
F411-cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004640  08004640  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004648  08004648  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000070  080046c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080046c0  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a511  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f40  00000000  00000000  0002a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016efe  00000000  00000000  0002d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1de  00000000  00000000  0004438e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b53  00000000  00000000  0005056c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d70bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a8  00000000  00000000  000d7110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800424c 	.word	0x0800424c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800424c 	.word	0x0800424c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	440b      	add	r3, r1
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d114      	bne.n	80005d4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005aa:	2301      	movs	r3, #1
 80005ac:	60bb      	str	r3, [r7, #8]
		i++;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005b4:	e00e      	b.n	80005d4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	440b      	add	r3, r1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d001      	beq.n	80005ce <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d11a      	bne.n	8000610 <ConsoleCommandMatch+0x8c>
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d817      	bhi.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005e8:	2b20      	cmp	r3, #32
 80005ea:	d011      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f4:	2b0a      	cmp	r3, #10
 80005f6:	d00b      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b0d      	cmp	r3, #13
 8000602:	d005      	beq.n	8000610 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1d2      	bne.n	80005b6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000610:	68bb      	ldr	r3, [r7, #8]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800061e:	b480      	push	{r7}
 8000620:	b087      	sub	sp, #28
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000636:	e00d      	b.n	8000654 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	441a      	add	r2, r3
 800063e:	68f9      	ldr	r1, [r7, #12]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	440b      	add	r3, r1
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	701a      	strb	r2, [r3, #0]
		i++;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3ed      	bcc.n	8000638 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800065c:	e007      	b.n	800066e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	4413      	add	r3, r2
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3301      	adds	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2bff      	cmp	r3, #255	; 0xff
 8000672:	d9f4      	bls.n	800065e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000674:	693b      	ldr	r3, [r7, #16]
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000694:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000696:	e002      	b.n	800069e <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d009      	beq.n	80006be <ConsoleCommandEndline+0x3c>
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b0a      	cmp	r3, #10
 80006b4:	d003      	beq.n	80006be <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3ec      	bcc.n	8000698 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d201      	bcs.n	80006ca <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006ca:	68bb      	ldr	r3, [r7, #8]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 80006de:	f000 fb87 	bl	8000df0 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <ConsoleInit+0x48>)
 80006e4:	f000 fbb8 	bl	8000e58 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <ConsoleInit+0x4c>)
 80006ea:	f000 fbb5 	bl	8000e58 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <ConsoleInit+0x50>)
 80006f0:	f000 fbb2 	bl	8000e58 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <ConsoleInit+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	e007      	b.n	8000710 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <ConsoleInit+0x58>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3301      	adds	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2bff      	cmp	r3, #255	; 0xff
 8000714:	d9f4      	bls.n	8000700 <ConsoleInit+0x28>
	}

}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08004264 	.word	0x08004264
 8000724:	080042ac 	.word	0x080042ac
 8000728:	080042b0 	.word	0x080042b0
 800072c:	2000018c 	.word	0x2000018c
 8000730:	2000008c 	.word	0x2000008c

08000734 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800073a:	4b54      	ldr	r3, [pc, #336]	; (800088c <ConsoleProcess+0x158>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a54      	ldr	r2, [pc, #336]	; (8000890 <ConsoleProcess+0x15c>)
 8000740:	1898      	adds	r0, r3, r2
 8000742:	4b52      	ldr	r3, [pc, #328]	; (800088c <ConsoleProcess+0x158>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800074a:	463a      	mov	r2, r7
 800074c:	4619      	mov	r1, r3
 800074e:	f000 fb57 	bl	8000e00 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d104      	bne.n	8000762 <ConsoleProcess+0x2e>
 8000758:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <ConsoleProcess+0x160>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	f000 8091 	beq.w	8000884 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000762:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <ConsoleProcess+0x160>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000768:	4b48      	ldr	r3, [pc, #288]	; (800088c <ConsoleProcess+0x158>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a46      	ldr	r2, [pc, #280]	; (800088c <ConsoleProcess+0x158>)
 8000772:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000774:	4b45      	ldr	r3, [pc, #276]	; (800088c <ConsoleProcess+0x158>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4845      	ldr	r0, [pc, #276]	; (8000890 <ConsoleProcess+0x15c>)
 800077c:	f7ff ff81 	bl	8000682 <ConsoleCommandEndline>
 8000780:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db7d      	blt.n	8000884 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000788:	f000 fb28 	bl	8000ddc <ConsoleCommandsGetTable>
 800078c:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000796:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000798:	e03d      	b.n	8000816 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	4613      	mov	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	461a      	mov	r2, r3
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	4413      	add	r3, r2
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4938      	ldr	r1, [pc, #224]	; (8000890 <ConsoleProcess+0x15c>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fee8 	bl	8000584 <ConsoleCommandMatch>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d02a      	beq.n	8000810 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	4613      	mov	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	461a      	mov	r2, r3
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	4413      	add	r3, r2
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4830      	ldr	r0, [pc, #192]	; (8000890 <ConsoleProcess+0x15c>)
 80007ce:	4798      	blx	r3
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d017      	beq.n	800080a <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007da:	482f      	ldr	r0, [pc, #188]	; (8000898 <ConsoleProcess+0x164>)
 80007dc:	f000 fb3c 	bl	8000e58 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007e0:	482b      	ldr	r0, [pc, #172]	; (8000890 <ConsoleProcess+0x15c>)
 80007e2:	f000 fb39 	bl	8000e58 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007e6:	482d      	ldr	r0, [pc, #180]	; (800089c <ConsoleProcess+0x168>)
 80007e8:	f000 fb36 	bl	8000e58 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	4613      	mov	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	461a      	mov	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4413      	add	r3, r2
 80007fc:	3308      	adds	r3, #8
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fb2a 	bl	8000e58 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000804:	4826      	ldr	r0, [pc, #152]	; (80008a0 <ConsoleProcess+0x16c>)
 8000806:	f000 fb27 	bl	8000e58 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	e002      	b.n	8000816 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3301      	adds	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	4613      	mov	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	461a      	mov	r2, r3
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	4413      	add	r3, r2
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d003      	beq.n	8000834 <ConsoleProcess+0x100>
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000832:	d0b2      	beq.n	800079a <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00d      	beq.n	8000856 <ConsoleProcess+0x122>
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000840:	d109      	bne.n	8000856 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <ConsoleProcess+0x158>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d905      	bls.n	8000856 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800084a:	4816      	ldr	r0, [pc, #88]	; (80008a4 <ConsoleProcess+0x170>)
 800084c:	f000 fb04 	bl	8000e58 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <ConsoleProcess+0x16c>)
 8000852:	f000 fb01 	bl	8000e58 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <ConsoleProcess+0x158>)
 8000858:	6819      	ldr	r1, [r3, #0]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	461a      	mov	r2, r3
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <ConsoleProcess+0x15c>)
 8000862:	f7ff fedc 	bl	800061e <ConsoleResetBuffer>
 8000866:	4603      	mov	r3, r0
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <ConsoleProcess+0x158>)
 800086a:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <ConsoleProcess+0x158>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <ConsoleProcess+0x160>)
 800087c:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <ConsoleProcess+0x174>)
 8000880:	f000 faea 	bl	8000e58 <ConsoleIoSendString>
		}
	}
}
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000018c 	.word	0x2000018c
 8000890:	2000008c 	.word	0x2000008c
 8000894:	20000190 	.word	0x20000190
 8000898:	080042b4 	.word	0x080042b4
 800089c:	080042bc 	.word	0x080042bc
 80008a0:	080042ac 	.word	0x080042ac
 80008a4:	080042c4 	.word	0x080042c4
 80008a8:	080042b0 	.word	0x080042b0

080008ac <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	460b      	mov	r3, r1
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008c2:	2300      	movs	r3, #0
 80008c4:	75fb      	strb	r3, [r7, #23]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008c6:	e00b      	b.n	80008e0 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b20      	cmp	r3, #32
 80008d2:	d102      	bne.n	80008da <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	3301      	adds	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3301      	adds	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d002      	beq.n	80008ee <ConsoleParamFindN+0x42>
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	2bff      	cmp	r3, #255	; 0xff
 80008ec:	d9ec      	bls.n	80008c8 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	d102      	bne.n	80008fc <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 80008f6:	2310      	movs	r3, #16
 80008f8:	75fb      	strb	r3, [r7, #23]
 80008fa:	e002      	b.n	8000902 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000902:	7dfb      	ldrb	r3, [r7, #23]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3724      	adds	r7, #36	; 0x24
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	460b      	mov	r3, r1
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000922:	f107 021c 	add.w	r2, r7, #28
 8000926:	7afb      	ldrb	r3, [r7, #11]
 8000928:	4619      	mov	r1, r3
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ffbe 	bl	80008ac <ConsoleParamFindN>
 8000930:	4603      	mov	r3, r0
 8000932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	4413      	add	r3, r2
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800094a:	e011      	b.n	8000970 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 800094c:	f107 0214 	add.w	r2, r7, #20
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000958:	701a      	strb	r2, [r3, #0]
		i++;
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	3301      	adds	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	4413      	add	r3, r2
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000970:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000974:	2b0a      	cmp	r3, #10
 8000976:	d00a      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
 8000978:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800097c:	2b0d      	cmp	r3, #13
 800097e:	d006      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000984:	2b20      	cmp	r3, #32
 8000986:	d002      	beq.n	800098e <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	2b07      	cmp	r3, #7
 800098c:	d9de      	bls.n	800094c <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	2b08      	cmp	r3, #8
 8000992:	d102      	bne.n	800099a <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000994:	2310      	movs	r3, #16
 8000996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 800099a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10e      	bne.n	80009c0 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009a2:	f107 0214 	add.w	r2, r7, #20
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	4413      	add	r3, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 ff1a 	bl	80037ec <atoi>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	460b      	mov	r3, r1
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	7afb      	ldrb	r3, [r7, #11]
 80009e8:	4619      	mov	r1, r3
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff5e 	bl	80008ac <ConsoleParamFindN>
 80009f0:	4603      	mov	r3, r0
 80009f2:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80009f4:	7ffb      	ldrb	r3, [r7, #31]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d12c      	bne.n	8000a54 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	e01e      	b.n	8000a3e <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a00:	7ffb      	ldrb	r3, [r7, #31]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10d      	bne.n	8000a22 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f107 0217 	add.w	r2, r7, #23
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f8c5 	bl	8000ba8 <ConsoleUtilHexCharToInt>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a22:	7ffb      	ldrb	r3, [r7, #31]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d107      	bne.n	8000a38 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a34:	4413      	add	r3, r2
 8000a36:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d9dd      	bls.n	8000a00 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a44:	7ffb      	ldrb	r3, [r7, #31]
 8000a46:	2b11      	cmp	r3, #17
 8000a48:	d101      	bne.n	8000a4e <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a52:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e01b      	b.n	8000aaa <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a72:	7cfb      	ldrb	r3, [r7, #19]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d115      	bne.n	8000aa4 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a78:	88fa      	ldrh	r2, [r7, #6]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f1c3 0303 	rsb	r3, r3, #3
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa42 f303 	asr.w	r3, r2, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 030f 	and.w	r3, r3, #15
 8000a8c:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000a8e:	f107 020c 	add.w	r2, r7, #12
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	441a      	add	r2, r3
 8000a96:	7cbb      	ldrb	r3, [r7, #18]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8c5 	bl	8000c2a <ConsoleUtilsIntToHexChar>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d9e0      	bls.n	8000a72 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ab0:	f107 020c 	add.w	r2, r7, #12
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f9c9 	bl	8000e58 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000adc:	2300      	movs	r3, #0
 8000ade:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da07      	bge.n	8000afa <smallItoa+0x2a>
		isNegative = true;
 8000aea:	2301      	movs	r3, #1
 8000aec:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	425b      	negs	r3, r3
 8000af2:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000afe:	e007      	b.n	8000b10 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b08:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1f1      	bne.n	8000b00 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	fb01 f202 	mul.w	r2, r1, r2
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	440b      	add	r3, r1
 8000b48:	3230      	adds	r2, #48	; 0x30
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b56:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	617a      	str	r2, [r7, #20]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1e6      	bne.n	8000b30 <smallItoa+0x60>

	if (isNegative) {
 8000b62:	7ffb      	ldrb	r3, [r7, #31]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	222d      	movs	r2, #45	; 0x2d
 8000b6c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b6e:	bf00      	nop
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b88:	f107 0108 	add.w	r1, r7, #8
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff9e 	bl	8000ad0 <smallItoa>
	ConsoleIoSendString(out);
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f95d 	bl	8000e58 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b2f      	cmp	r3, #47	; 0x2f
 8000bbc:	d908      	bls.n	8000bd0 <ConsoleUtilHexCharToInt+0x28>
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b39      	cmp	r3, #57	; 0x39
 8000bc2:	d805      	bhi.n	8000bd0 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	3b30      	subs	r3, #48	; 0x30
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e025      	b.n	8000c1c <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b40      	cmp	r3, #64	; 0x40
 8000bd4:	d908      	bls.n	8000be8 <ConsoleUtilHexCharToInt+0x40>
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b46      	cmp	r3, #70	; 0x46
 8000bda:	d805      	bhi.n	8000be8 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	3b37      	subs	r3, #55	; 0x37
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e019      	b.n	8000c1c <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b60      	cmp	r3, #96	; 0x60
 8000bec:	d908      	bls.n	8000c00 <ConsoleUtilHexCharToInt+0x58>
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b66      	cmp	r3, #102	; 0x66
 8000bf2:	d805      	bhi.n	8000c00 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	3b57      	subs	r3, #87	; 0x57
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	e00d      	b.n	8000c1c <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b0a      	cmp	r3, #10
 8000c04:	d105      	bne.n	8000c12 <ConsoleUtilHexCharToInt+0x6a>
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b0d      	cmp	r3, #13
 8000c0a:	d102      	bne.n	8000c12 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b20      	cmp	r3, #32
 8000c10:	d102      	bne.n	8000c18 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c12:	2311      	movs	r3, #17
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e001      	b.n	8000c1c <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c18:	2310      	movs	r3, #16
 8000c1a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	6039      	str	r1, [r7, #0]
 8000c34:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b09      	cmp	r3, #9
 8000c3e:	d805      	bhi.n	8000c4c <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	3330      	adds	r3, #48	; 0x30
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e00d      	b.n	8000c68 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	d908      	bls.n	8000c64 <ConsoleUtilsIntToHexChar+0x3a>
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d805      	bhi.n	8000c64 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	3337      	adds	r3, #55	; 0x37
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e001      	b.n	8000c68 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c64:	2310      	movs	r3, #16
 8000c66:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c94:	2300      	movs	r3, #0
 8000c96:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000c98:	2306      	movs	r3, #6
 8000c9a:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e01e      	b.n	8000ce0 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000ca2:	4914      	ldr	r1, [pc, #80]	; (8000cf4 <ConsoleCommandHelp+0x68>)
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f8d0 	bl	8000e58 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000cb8:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <ConsoleCommandHelp+0x6c>)
 8000cba:	f000 f8cd 	bl	8000e58 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	3308      	adds	r3, #8
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <ConsoleCommandHelp+0x68>)
 8000ccc:	4413      	add	r3, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f8c2 	bl	8000e58 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <ConsoleCommandHelp+0x70>)
 8000cd6:	f000 f8bf 	bl	8000e58 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3db      	bcc.n	8000ca2 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cea:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	08004344 	.word	0x08004344
 8000cf8:	080042f4 	.word	0x080042f4
 8000cfc:	080042f8 	.word	0x080042f8

08000d00 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2101      	movs	r1, #1
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fdfd 	bl	8000910 <ConsoleReceiveParamInt16>
 8000d16:	4603      	mov	r3, r0
 8000d18:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d116      	bne.n	8000d4e <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <ConsoleCommandParamExampleInt16+0x58>)
 8000d22:	f000 f899 	bl	8000e58 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff25 	bl	8000b7a <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d30:	480a      	ldr	r0, [pc, #40]	; (8000d5c <ConsoleCommandParamExampleInt16+0x5c>)
 8000d32:	f000 f891 	bl	8000e58 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe8e 	bl	8000a5e <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <ConsoleCommandParamExampleInt16+0x60>)
 8000d44:	f000 f888 	bl	8000e58 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <ConsoleCommandParamExampleInt16+0x64>)
 8000d4a:	f000 f885 	bl	8000e58 <ConsoleIoSendString>
	}
	return result;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	080042fc 	.word	0x080042fc
 8000d5c:	0800430c 	.word	0x0800430c
 8000d60:	08004314 	.word	0x08004314
 8000d64:	080042f8 	.word	0x080042f8

08000d68 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	461a      	mov	r2, r3
 8000d76:	2101      	movs	r1, #1
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fe27 	bl	80009cc <ConsoleReceiveParamHexUint16>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d109      	bne.n	8000d9c <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000d8a:	f000 f865 	bl	8000e58 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000d8e:	89bb      	ldrh	r3, [r7, #12]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe64 	bl	8000a5e <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <ConsoleCommandParamExampleHexUint16+0x44>)
 8000d98:	f000 f85e 	bl	8000e58 <ConsoleIoSendString>
	}
	return result;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	08004318 	.word	0x08004318
 8000dac:	080042f8 	.word	0x080042f8

08000db0 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <ConsoleCommandVer+0x24>)
 8000dbe:	f000 f84b 	bl	8000e58 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <ConsoleCommandVer+0x28>)
 8000dc4:	f000 f848 	bl	8000e58 <ConsoleIoSendString>
	return result;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	08004328 	.word	0x08004328
 8000dd8:	080042f8 	.word	0x080042f8

08000ddc <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <ConsoleCommandsGetTable+0x10>)
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	08004344 	.word	0x08004344

08000df0 <ConsoleIoInit>:

#include "consoleIo.h"
#include <stdio.h>

eConsoleError ConsoleIoInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine 
// but that's partially because the serial terminal sends all of the 
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]

	// ------- modified ----------
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	82fb      	strh	r3, [r7, #22]
 8000e10:	e010      	b.n	8000e34 <ConsoleIoReceive+0x34>
		if(uart_buf.buf[i] == 0) break;
 8000e12:	8afb      	ldrh	r3, [r7, #22]
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <ConsoleIoReceive+0x54>)
 8000e16:	4413      	add	r3, r2
 8000e18:	789b      	ldrb	r3, [r3, #2]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00e      	beq.n	8000e3c <ConsoleIoReceive+0x3c>
		buffer[i] = (uint8_t)uart_buf.buf[i];
 8000e1e:	8afa      	ldrh	r2, [r7, #22]
 8000e20:	8afb      	ldrh	r3, [r7, #22]
 8000e22:	68f9      	ldr	r1, [r7, #12]
 8000e24:	440b      	add	r3, r1
 8000e26:	490b      	ldr	r1, [pc, #44]	; (8000e54 <ConsoleIoReceive+0x54>)
 8000e28:	440a      	add	r2, r1
 8000e2a:	7892      	ldrb	r2, [r2, #2]
 8000e2c:	701a      	strb	r2, [r3, #0]
	for(i=0; i<BUF_SIZE; i++) {
 8000e2e:	8afb      	ldrh	r3, [r7, #22]
 8000e30:	3301      	adds	r3, #1
 8000e32:	82fb      	strh	r3, [r7, #22]
 8000e34:	8afb      	ldrh	r3, [r7, #22]
 8000e36:	2b7f      	cmp	r3, #127	; 0x7f
 8000e38:	d9eb      	bls.n	8000e12 <ConsoleIoReceive+0x12>
 8000e3a:	e000      	b.n	8000e3e <ConsoleIoReceive+0x3e>
		if(uart_buf.buf[i] == 0) break;
 8000e3c:	bf00      	nop
	}
	// -----------------

	*readLength = i;
 8000e3e:	8afa      	ldrh	r2, [r7, #22]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	601a      	str	r2, [r3, #0]
	//		i++;
	//	}
	//	*readLength = i;
	// ---

	return CONSOLE_SUCCESS;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000198 	.word	0x20000198

08000e58 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	// --------- modified ---------

	// count the size (sizeof didn't work for me, so manually counting)
	uint16_t i;
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 8000e60:	2300      	movs	r3, #0
 8000e62:	81fb      	strh	r3, [r7, #14]
 8000e64:	e008      	b.n	8000e78 <ConsoleIoSendString+0x20>
		if(buffer[i] == '\0') break;
 8000e66:	89fb      	ldrh	r3, [r7, #14]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <ConsoleIoSendString+0x28>
	for(i=0; i<BUF_SIZE; i++) { // arbitrarily setting output limit to be the same as input limit
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	3301      	adds	r3, #1
 8000e76:	81fb      	strh	r3, [r7, #14]
 8000e78:	89fb      	ldrh	r3, [r7, #14]
 8000e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7c:	d9f3      	bls.n	8000e66 <ConsoleIoSendString+0xe>
 8000e7e:	e000      	b.n	8000e82 <ConsoleIoSendString+0x2a>
		if(buffer[i] == '\0') break;
 8000e80:	bf00      	nop
	}

	// send it
	uint16_t the_size = i;
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, buffer, the_size, HAL_MAX_DELAY); // TODO: resolve this warning
 8000e86:	89ba      	ldrh	r2, [r7, #12]
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <ConsoleIoSendString+0x48>)
 8000e90:	f001 fc81 	bl	8002796 <HAL_UART_Transmit>
	// ---------------------------

	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000234 	.word	0x20000234

08000ea4 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	4ba2      	ldr	r3, [pc, #648]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4aa1      	ldr	r2, [pc, #644]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000ec4:	f043 0310 	orr.w	r3, r3, #16
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b9f      	ldr	r3, [pc, #636]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b9b      	ldr	r3, [pc, #620]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a9a      	ldr	r2, [pc, #616]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b98      	ldr	r3, [pc, #608]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b94      	ldr	r3, [pc, #592]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a93      	ldr	r2, [pc, #588]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b91      	ldr	r3, [pc, #580]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b8d      	ldr	r3, [pc, #564]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a8c      	ldr	r2, [pc, #560]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b8a      	ldr	r3, [pc, #552]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b86      	ldr	r3, [pc, #536]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a85      	ldr	r2, [pc, #532]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b83      	ldr	r3, [pc, #524]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b7f      	ldr	r3, [pc, #508]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a7e      	ldr	r2, [pc, #504]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b7c      	ldr	r3, [pc, #496]	; (8001148 <MX_GPIO_Init+0x2a4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2108      	movs	r1, #8
 8000f66:	4879      	ldr	r0, [pc, #484]	; (800114c <MX_GPIO_Init+0x2a8>)
 8000f68:	f000 ff16 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4877      	ldr	r0, [pc, #476]	; (8001150 <MX_GPIO_Init+0x2ac>)
 8000f72:	f000 ff11 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f76:	2200      	movs	r2, #0
 8000f78:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f7c:	4875      	ldr	r0, [pc, #468]	; (8001154 <MX_GPIO_Init+0x2b0>)
 8000f7e:	f000 ff0b 	bl	8001d98 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f82:	2304      	movs	r3, #4
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	486d      	ldr	r0, [pc, #436]	; (800114c <MX_GPIO_Init+0x2a8>)
 8000f96:	f000 fd7b 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4866      	ldr	r0, [pc, #408]	; (800114c <MX_GPIO_Init+0x2a8>)
 8000fb2:	f000 fd6d 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000fb6:	2332      	movs	r3, #50	; 0x32
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4860      	ldr	r0, [pc, #384]	; (800114c <MX_GPIO_Init+0x2a8>)
 8000fcc:	f000 fd60 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	485a      	ldr	r0, [pc, #360]	; (8001150 <MX_GPIO_Init+0x2ac>)
 8000fe8:	f000 fd52 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fec:	2308      	movs	r3, #8
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4852      	ldr	r0, [pc, #328]	; (8001150 <MX_GPIO_Init+0x2ac>)
 8001008:	f000 fd42 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001010:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	484d      	ldr	r0, [pc, #308]	; (8001158 <MX_GPIO_Init+0x2b4>)
 8001022:	f000 fd35 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001026:	2310      	movs	r3, #16
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001036:	2306      	movs	r3, #6
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4845      	ldr	r0, [pc, #276]	; (8001158 <MX_GPIO_Init+0x2b4>)
 8001042:	f000 fd25 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001046:	23e0      	movs	r3, #224	; 0xe0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001056:	2305      	movs	r3, #5
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	483d      	ldr	r0, [pc, #244]	; (8001158 <MX_GPIO_Init+0x2b4>)
 8001062:	f000 fd15 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001066:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001078:	2305      	movs	r3, #5
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4836      	ldr	r0, [pc, #216]	; (800115c <MX_GPIO_Init+0x2b8>)
 8001084:	f000 fd04 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001088:	f24f 0310 	movw	r3, #61456	; 0xf010
 800108c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	482c      	ldr	r0, [pc, #176]	; (8001154 <MX_GPIO_Init+0x2b0>)
 80010a2:	f000 fcf5 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010a6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010b8:	2306      	movs	r3, #6
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4823      	ldr	r0, [pc, #140]	; (8001150 <MX_GPIO_Init+0x2ac>)
 80010c4:	f000 fce4 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	481e      	ldr	r0, [pc, #120]	; (8001158 <MX_GPIO_Init+0x2b4>)
 80010de:	f000 fcd7 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f4:	230a      	movs	r3, #10
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4816      	ldr	r0, [pc, #88]	; (8001158 <MX_GPIO_Init+0x2b4>)
 8001100:	f000 fcc6 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001104:	2320      	movs	r3, #32
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	480f      	ldr	r0, [pc, #60]	; (8001154 <MX_GPIO_Init+0x2b0>)
 8001118:	f000 fcba 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800111c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <MX_GPIO_Init+0x2b8>)
 800113a:	f000 fca9 	bl	8001a90 <HAL_GPIO_Init>

}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40021000 	.word	0x40021000
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400

08001160 <input_buf_reset>:
// https://github.com/dekuNukem/STM32_tutorials/tree/master/lesson3_serial_recv_interrupt

#include "input_buf.h"
#include <string.h> // memset is declared here

void input_buf_reset(input_buf *ib) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <input_buf_reset+0x24>
	ib->curr_index = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	801a      	strh	r2, [r3, #0]
	memset(ib->buf, 0, BUF_SIZE);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3302      	adds	r3, #2
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fb63 	bl	8003848 <memset>
 8001182:	e000      	b.n	8001186 <input_buf_reset+0x26>
	if(NULL == ib) return; // check for null pointer. writing it this way to avoid an accidental assignment
 8001184:	bf00      	nop
}
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <input_buf_add>:

void input_buf_add(input_buf *ib, uint8_t c) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	if(NULL == ib) return;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d01a      	beq.n	80011d4 <input_buf_add+0x48>
	ib->buf[ib->curr_index] = c;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a4:	461a      	mov	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	78fa      	ldrb	r2, [r7, #3]
 80011ac:	709a      	strb	r2, [r3, #2]
	if(ib->curr_index < BUF_SIZE-1) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	2b7e      	cmp	r3, #126	; 0x7e
 80011b6:	dc09      	bgt.n	80011cc <input_buf_add+0x40>
		ib->curr_index = ib->curr_index+1;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3301      	adds	r3, #1
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	e004      	b.n	80011d6 <input_buf_add+0x4a>
	} else {
		input_buf_reset(ib);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ffc7 	bl	8001160 <input_buf_reset>
 80011d2:	e000      	b.n	80011d6 <input_buf_add+0x4a>
	if(NULL == ib) return;
 80011d4:	bf00      	nop
	}
}
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <input_buf_ready>:

uint8_t input_buf_ready(input_buf *ib) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if(NULL == ib) return 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <input_buf_ready+0x12>
 80011ea:	2300      	movs	r3, #0
 80011ec:	e014      	b.n	8001218 <input_buf_ready+0x3c>
	if(ib->buf[ib->curr_index-1] == '\n' || ib->buf[ib->curr_index-1] == '\r') {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	2b0a      	cmp	r3, #10
 80011fe:	d008      	beq.n	8001212 <input_buf_ready+0x36>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	3b01      	subs	r3, #1
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	789b      	ldrb	r3, [r3, #2]
 800120e:	2b0d      	cmp	r3, #13
 8001210:	d101      	bne.n	8001216 <input_buf_ready+0x3a>
		return 1;
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <input_buf_ready+0x3c>
	}
	return 0;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// uart interrupt callback
// huart2 defined in usart.c, generated from cubemx
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	c = uart_byte_buf[0];
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_UART_RxCpltCallback+0x34>)
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_UART_RxCpltCallback+0x38>)
 8001232:	701a      	strb	r2, [r3, #0]
	echo = true;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_UART_RxCpltCallback+0x3c>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
	input_buf_add(&uart_buf, uart_byte_buf[0]);
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_UART_RxCpltCallback+0x34>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	4808      	ldr	r0, [pc, #32]	; (8001264 <HAL_UART_RxCpltCallback+0x40>)
 8001242:	f7ff ffa3 	bl	800118c <input_buf_add>
	HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	4903      	ldr	r1, [pc, #12]	; (8001258 <HAL_UART_RxCpltCallback+0x34>)
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <HAL_UART_RxCpltCallback+0x44>)
 800124c:	f001 fb35 	bl	80028ba <HAL_UART_Receive_IT>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000194 	.word	0x20000194
 800125c:	2000021a 	.word	0x2000021a
 8001260:	2000021b 	.word	0x2000021b
 8001264:	20000198 	.word	0x20000198
 8001268:	20000234 	.word	0x20000234

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001270:	f000 f9f8 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f83e 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f7ff fe14 	bl	8000ea4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800127c:	f000 f94e 	bl	800151c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ConsoleInit();
 8001280:	f7ff fa2a 	bl	80006d8 <ConsoleInit>
  input_buf_reset(&uart_buf);
 8001284:	4814      	ldr	r0, [pc, #80]	; (80012d8 <main+0x6c>)
 8001286:	f7ff ff6b 	bl	8001160 <input_buf_reset>
  HAL_UART_Receive_IT(&huart2, uart_byte_buf, 1);
 800128a:	2201      	movs	r2, #1
 800128c:	4913      	ldr	r1, [pc, #76]	; (80012dc <main+0x70>)
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <main+0x74>)
 8001290:	f001 fb13 	bl	80028ba <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	if(echo) {
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <main+0x78>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d010      	beq.n	80012be <main+0x52>
			sprintf((char*)buf, "%c", c);
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <main+0x7c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4912      	ldr	r1, [pc, #72]	; (80012ec <main+0x80>)
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <main+0x84>)
 80012a6:	f002 fad7 	bl	8003858 <siprintf>
  		HAL_UART_Transmit(&huart2, buf, 1, HAL_MAX_DELAY);
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ae:	2201      	movs	r2, #1
 80012b0:	490f      	ldr	r1, [pc, #60]	; (80012f0 <main+0x84>)
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <main+0x74>)
 80012b4:	f001 fa6f 	bl	8002796 <HAL_UART_Transmit>
  		echo = false;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <main+0x78>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
  	}

  	if(input_buf_ready(&uart_buf)) {
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <main+0x6c>)
 80012c0:	f7ff ff8c 	bl	80011dc <input_buf_ready>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0e4      	beq.n	8001294 <main+0x28>
			ConsoleProcess();
 80012ca:	f7ff fa33 	bl	8000734 <ConsoleProcess>
			input_buf_reset(&uart_buf);
 80012ce:	4802      	ldr	r0, [pc, #8]	; (80012d8 <main+0x6c>)
 80012d0:	f7ff ff46 	bl	8001160 <input_buf_reset>
  	if(echo) {
 80012d4:	e7de      	b.n	8001294 <main+0x28>
 80012d6:	bf00      	nop
 80012d8:	20000198 	.word	0x20000198
 80012dc:	20000194 	.word	0x20000194
 80012e0:	20000234 	.word	0x20000234
 80012e4:	2000021b 	.word	0x2000021b
 80012e8:	2000021a 	.word	0x2000021a
 80012ec:	08004340 	.word	0x08004340
 80012f0:	2000021c 	.word	0x2000021c

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	; 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f002 faa0 	bl	8003848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <SystemClock_Config+0xcc>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <SystemClock_Config+0xcc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <SystemClock_Config+0xd0>)
 800133e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <SystemClock_Config+0xd0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001358:	2310      	movs	r3, #16
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001360:	2300      	movs	r3, #0
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001364:	2308      	movs	r3, #8
 8001366:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001368:	23c0      	movs	r3, #192	; 0xc0
 800136a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800136c:	2304      	movs	r3, #4
 800136e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001370:	2308      	movs	r3, #8
 8001372:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fd27 	bl	8001dcc <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001384:	f000 f820 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2302      	movs	r3, #2
 800138e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001394:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2103      	movs	r1, #3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 ff88 	bl	80022bc <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013b2:	f000 f809 	bl	80013c8 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	; 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001412:	2007      	movs	r0, #7
 8001414:	f000 fa68 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f94a 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <USART2_IRQHandler+0x10>)
 800147e:	f001 fa4d 	bl	800291c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000234 	.word	0x20000234

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f002 f99a 	bl	80037f4 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20020000 	.word	0x20020000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	20000230 	.word	0x20000230
 80014f4:	20000290 	.word	0x20000290

080014f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART2_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001554:	f001 f8d2 	bl	80026fc <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f7ff ff33 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000234 	.word	0x20000234
 800156c:	40004400 	.word	0x40004400

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_UART_MspInit+0x94>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d133      	bne.n	80015fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_UART_MspInit+0x98>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_UART_MspInit+0x98>)
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ca:	230c      	movs	r3, #12
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015da:	2307      	movs	r3, #7
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_UART_MspInit+0x9c>)
 80015e6:	f000 fa53 	bl	8001a90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2026      	movs	r0, #38	; 0x26
 80015f0:	f000 f985 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015f4:	2026      	movs	r0, #38	; 0x26
 80015f6:	f000 f99e 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40004400 	.word	0x40004400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001616:	490e      	ldr	r1, [pc, #56]	; (8001650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800162c:	4c0b      	ldr	r4, [pc, #44]	; (800165c <LoopFillZerobss+0x26>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163a:	f7ff ff5d 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f002 f8df 	bl	8003800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff fe13 	bl	800126c <main>
  bx  lr    
 8001646:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001654:	08004650 	.word	0x08004650
  ldr r2, =_sbss
 8001658:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800165c:	2000028c 	.word	0x2000028c

08001660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>
	...

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_Init+0x40>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_Init+0x40>)
 800167a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_Init+0x40>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168c:	2003      	movs	r0, #3
 800168e:	f000 f92b 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001692:	2000      	movs	r0, #0
 8001694:	f000 f808 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001698:	f7ff fe9c 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f943 	bl	8001952 <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e4:	f000 f90b 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000008 	.word	0x20000008
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008
 800172c:	20000278 	.word	0x20000278

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000278 	.word	0x20000278

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff31 	bl	80017ac <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff feda 	bl	8001730 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d008      	beq.n	800199c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e052      	b.n	8001a42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0216 	bic.w	r2, r2, #22
 80019aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <HAL_DMA_Abort+0x62>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0208 	bic.w	r2, r2, #8
 80019da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ec:	e013      	b.n	8001a16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ee:	f7ff fe9f 	bl	8001730 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d90c      	bls.n	8001a16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2203      	movs	r2, #3
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e015      	b.n	8001a42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e4      	bne.n	80019ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	223f      	movs	r2, #63	; 0x3f
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e00c      	b.n	8001a82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2205      	movs	r2, #5
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e159      	b.n	8001d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8148 	bne.w	8001d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d130      	bne.n	8001b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a2 	beq.w	8001d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a56      	ldr	r2, [pc, #344]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_GPIO_Init+0x2ec>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x202>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a48      	ldr	r2, [pc, #288]	; (8001d84 <HAL_GPIO_Init+0x2f4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x1fe>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <HAL_GPIO_Init+0x2f8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <HAL_GPIO_Init+0x2fc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x1f6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x1f2>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e008      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c82:	2307      	movs	r3, #7
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e004      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c92:	2300      	movs	r3, #0
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f002 0203 	and.w	r2, r2, #3
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca4:	4935      	ldr	r1, [pc, #212]	; (8001d7c <HAL_GPIO_Init+0x2ec>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd6:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d00:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2a:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d54:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	f67f aea2 	bls.w	8001aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40013c00 	.word	0x40013c00

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e267      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4b85      	ldr	r3, [pc, #532]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d112      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b82      	ldr	r3, [pc, #520]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b7e      	ldr	r3, [pc, #504]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e242      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6f      	ldr	r2, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b69      	ldr	r3, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a68      	ldr	r2, [pc, #416]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fc54 	bl	8001730 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fc50 	bl	8001730 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e207      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b5b      	ldr	r3, [pc, #364]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fc40 	bl	8001730 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fc3c 	bl	8001730 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1f3      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1c7      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fbf5 	bl	8001730 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fbf1 	bl	8001730 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1a8      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4925      	ldr	r1, [pc, #148]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff fbd4 	bl	8001730 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fbd0 	bl	8001730 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e187      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d036      	beq.n	8002024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fbb4 	bl	8001730 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff fbb0 	bl	8001730 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e167      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
 8001fea:	e01b      	b.n	8002024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fb9d 	bl	8001730 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fb99 	bl	8001730 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d907      	bls.n	8002018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e150      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ea      	bne.n	8001ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8097 	beq.w	8002160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b81      	ldr	r3, [pc, #516]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b7d      	ldr	r3, [pc, #500]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a7c      	ldr	r2, [pc, #496]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b7a      	ldr	r3, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b77      	ldr	r3, [pc, #476]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b74      	ldr	r3, [pc, #464]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a73      	ldr	r2, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff fb59 	bl	8001730 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff fb55 	bl	8001730 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e10c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2ea>
 80020a8:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a63      	ldr	r2, [pc, #396]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x30c>
 80020be:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a5e      	ldr	r2, [pc, #376]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5b      	ldr	r2, [pc, #364]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a57      	ldr	r2, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a54      	ldr	r2, [pc, #336]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff fb1a 	bl	8001730 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff fb16 	bl	8001730 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0cb      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ee      	beq.n	8002100 <HAL_RCC_OscConfig+0x334>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7ff fb04 	bl	8001730 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff fb00 	bl	8001730 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0b5      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ee      	bne.n	800212c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a38      	ldr	r2, [pc, #224]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a1 	beq.w	80022ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d05c      	beq.n	8002230 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d141      	bne.n	8002202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fad4 	bl	8001730 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff fad0 	bl	8001730 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e087      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	491b      	ldr	r1, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff faa9 	bl	8001730 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff faa5 	bl	8001730 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e05c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x416>
 8002200:	e054      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fa92 	bl	8001730 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff fa8e 	bl	8001730 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e045      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
 800222e:	e03d      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e038      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800223c:	40023800 	.word	0x40023800
 8002240:	40007000 	.word	0x40007000
 8002244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x4ec>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d11a      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800227e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002280:	4293      	cmp	r3, r2
 8002282:	d111      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0cc      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d90c      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800231a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d044      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d119      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d003      	beq.n	800237a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	2b03      	cmp	r3, #3
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e067      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4934      	ldr	r1, [pc, #208]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7ff f9c0 	bl	8001730 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7ff f9bc 	bl	8001730 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e04f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d20c      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f920 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00
 8002478:	40023800 	.word	0x40023800
 800247c:	080044f4 	.word	0x080044f4
 8002480:	20000000 	.word	0x20000000
 8002484:	20000004 	.word	0x20000004

08002488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800248c:	b094      	sub	sp, #80	; 0x50
 800248e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002498:	2300      	movs	r3, #0
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a0:	4b79      	ldr	r3, [pc, #484]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d00d      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x40>
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	f200 80e1 	bhi.w	8002674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x34>
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ba:	e0db      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b73      	ldr	r3, [pc, #460]	; (800268c <HAL_RCC_GetSysClockFreq+0x204>)
 80024be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024c0:	e0db      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <HAL_RCC_GetSysClockFreq+0x208>)
 80024c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024c6:	e0d8      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c8:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d2:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	2200      	movs	r2, #0
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024fa:	4622      	mov	r2, r4
 80024fc:	462b      	mov	r3, r5
 80024fe:	f04f 0000 	mov.w	r0, #0
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	0159      	lsls	r1, r3, #5
 8002508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800250c:	0150      	lsls	r0, r2, #5
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4621      	mov	r1, r4
 8002514:	1a51      	subs	r1, r2, r1
 8002516:	6139      	str	r1, [r7, #16]
 8002518:	4629      	mov	r1, r5
 800251a:	eb63 0301 	sbc.w	r3, r3, r1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800252c:	4659      	mov	r1, fp
 800252e:	018b      	lsls	r3, r1, #6
 8002530:	4651      	mov	r1, sl
 8002532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002536:	4651      	mov	r1, sl
 8002538:	018a      	lsls	r2, r1, #6
 800253a:	4651      	mov	r1, sl
 800253c:	ebb2 0801 	subs.w	r8, r2, r1
 8002540:	4659      	mov	r1, fp
 8002542:	eb63 0901 	sbc.w	r9, r3, r1
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800255a:	4690      	mov	r8, r2
 800255c:	4699      	mov	r9, r3
 800255e:	4623      	mov	r3, r4
 8002560:	eb18 0303 	adds.w	r3, r8, r3
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	462b      	mov	r3, r5
 8002568:	eb49 0303 	adc.w	r3, r9, r3
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800257a:	4629      	mov	r1, r5
 800257c:	024b      	lsls	r3, r1, #9
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002584:	4621      	mov	r1, r4
 8002586:	024a      	lsls	r2, r1, #9
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258e:	2200      	movs	r2, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
 8002592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002598:	f7fd fe72 	bl	8000280 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a4:	e058      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a6:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	2200      	movs	r2, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	4611      	mov	r1, r2
 80025b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	f04f 0000 	mov.w	r0, #0
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	0159      	lsls	r1, r3, #5
 80025ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d2:	0150      	lsls	r0, r2, #5
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4641      	mov	r1, r8
 80025da:	ebb2 0a01 	subs.w	sl, r2, r1
 80025de:	4649      	mov	r1, r9
 80025e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025f8:	ebb2 040a 	subs.w	r4, r2, sl
 80025fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	00eb      	lsls	r3, r5, #3
 800260a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260e:	00e2      	lsls	r2, r4, #3
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	4643      	mov	r3, r8
 8002616:	18e3      	adds	r3, r4, r3
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	464b      	mov	r3, r9
 800261c:	eb45 0303 	adc.w	r3, r5, r3
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262e:	4629      	mov	r1, r5
 8002630:	028b      	lsls	r3, r1, #10
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002638:	4621      	mov	r1, r4
 800263a:	028a      	lsls	r2, r1, #10
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	61fa      	str	r2, [r7, #28]
 8002648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264c:	f7fd fe18 	bl	8000280 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800266a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetSysClockFreq+0x204>)
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800267c:	4618      	mov	r0, r3
 800267e:	3750      	adds	r7, #80	; 0x50
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08004504 	.word	0x08004504

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d8:	f7ff ffdc 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0b5b      	lsrs	r3, r3, #13
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08004504 	.word	0x08004504

080026fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e03f      	b.n	800278e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe ff24 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fddf 	bl	8003304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b08a      	sub	sp, #40	; 0x28
 800279a:	af02      	add	r7, sp, #8
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d17c      	bne.n	80028b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_UART_Transmit+0x2c>
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e075      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Transmit+0x3e>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e06e      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2221      	movs	r2, #33	; 0x21
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ea:	f7fe ffa1 	bl	8001730 <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002804:	d108      	bne.n	8002818 <HAL_UART_Transmit+0x82>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d104      	bne.n	8002818 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e003      	b.n	8002820 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002828:	e02a      	b.n	8002880 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fb1f 	bl	8002e78 <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e036      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	3302      	adds	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	e007      	b.n	8002872 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3301      	adds	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1cf      	bne.n	800282a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 faef 	bl	8002e78 <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e006      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d11d      	bne.n	8002910 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_UART_Receive_IT+0x26>
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e016      	b.n	8002912 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Receive_IT+0x38>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e00f      	b.n	8002912 <HAL_UART_Receive_IT+0x58>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	461a      	mov	r2, r3
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fb24 	bl	8002f54 <UART_Start_Receive_IT>
 800290c:	4603      	mov	r3, r0
 800290e:	e000      	b.n	8002912 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b0ba      	sub	sp, #232	; 0xe8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800295a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10f      	bne.n	8002982 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_UART_IRQHandler+0x66>
 800296e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fc07 	bl	800318e <UART_Receive_IT>
      return;
 8002980:	e256      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80de 	beq.w	8002b48 <HAL_UART_IRQHandler+0x22c>
 800298c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800299c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80d1 	beq.w	8002b48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_UART_IRQHandler+0xae>
 80029b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_UART_IRQHandler+0xd2>
 80029d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_UART_IRQHandler+0xf6>
 80029fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d011      	beq.n	8002a42 <HAL_UART_IRQHandler+0x126>
 8002a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0208 	orr.w	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 81ed 	beq.w	8002e26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_UART_IRQHandler+0x14e>
 8002a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fb92 	bl	800318e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <HAL_UART_IRQHandler+0x17a>
 8002a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04f      	beq.n	8002b36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa9a 	bl	8002fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d141      	bne.n	8002b2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3314      	adds	r3, #20
 8002ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3314      	adds	r3, #20
 8002ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1d9      	bne.n	8002aaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d013      	beq.n	8002b26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	4a7d      	ldr	r2, [pc, #500]	; (8002cf8 <HAL_UART_IRQHandler+0x3dc>)
 8002b04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe ff9d 	bl	8001a4a <HAL_DMA_Abort_IT>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b20:	4610      	mov	r0, r2
 8002b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	e00e      	b.n	8002b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f990 	bl	8002e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	e00a      	b.n	8002b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f98c 	bl	8002e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	e006      	b.n	8002b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f988 	bl	8002e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b42:	e170      	b.n	8002e26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b44:	bf00      	nop
    return;
 8002b46:	e16e      	b.n	8002e26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f040 814a 	bne.w	8002de6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8143 	beq.w	8002de6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 813c 	beq.w	8002de6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	f040 80b4 	bne.w	8002cfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ba0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8140 	beq.w	8002e2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	f080 8139 	bcs.w	8002e2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bca:	f000 8088 	beq.w	8002cde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	330c      	adds	r3, #12
 8002bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1d9      	bne.n	8002bce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3314      	adds	r3, #20
 8002c20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3314      	adds	r3, #20
 8002c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e1      	bne.n	8002c1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e3      	bne.n	8002c56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca6:	e853 3f00 	ldrex	r3, [r3]
 8002caa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cae:	f023 0310 	bic.w	r3, r3, #16
 8002cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e3      	bne.n	8002c9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fe46 	bl	800196a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8b6 	bl	8002e60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf4:	e099      	b.n	8002e2a <HAL_UART_IRQHandler+0x50e>
 8002cf6:	bf00      	nop
 8002cf8:	08003097 	.word	0x08003097
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 808b 	beq.w	8002e2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8086 	beq.w	8002e2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d46:	647a      	str	r2, [r7, #68]	; 0x44
 8002d48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e3      	bne.n	8002d22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3314      	adds	r3, #20
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	623b      	str	r3, [r7, #32]
   return(result);
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d7e:	633a      	str	r2, [r7, #48]	; 0x30
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e3      	bne.n	8002d5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	e853 3f00 	ldrex	r3, [r3]
 8002dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0310 	bic.w	r3, r3, #16
 8002db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002dc4:	61fa      	str	r2, [r7, #28]
 8002dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	69b9      	ldr	r1, [r7, #24]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e3      	bne.n	8002da0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f83e 	bl	8002e60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002de4:	e023      	b.n	8002e2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_UART_IRQHandler+0x4ea>
 8002df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f95d 	bl	80030be <UART_Transmit_IT>
    return;
 8002e04:	e014      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00e      	beq.n	8002e30 <HAL_UART_IRQHandler+0x514>
 8002e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f99d 	bl	800315e <UART_EndTransmit_IT>
    return;
 8002e24:	e004      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
    return;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
      return;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
      return;
 8002e2e:	bf00      	nop
  }
}
 8002e30:	37e8      	adds	r7, #232	; 0xe8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop

08002e38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b090      	sub	sp, #64	; 0x40
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e88:	e050      	b.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e90:	d04c      	beq.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e98:	f7fe fc4a 	bl	8001730 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d241      	bcs.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ec8:	637a      	str	r2, [r7, #52]	; 0x34
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e5      	bne.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	613b      	str	r3, [r7, #16]
   return(result);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002efc:	623a      	str	r2, [r7, #32]
 8002efe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	69f9      	ldr	r1, [r7, #28]
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e00f      	b.n	8002f4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d09f      	beq.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3740      	adds	r7, #64	; 0x40
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2222      	movs	r2, #34	; 0x22
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0220 	orr.w	r2, r2, #32
 8002fc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b095      	sub	sp, #84	; 0x54
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ff8:	643a      	str	r2, [r7, #64]	; 0x40
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e5      	bne.n	8002fd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3314      	adds	r3, #20
 8003012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	61fb      	str	r3, [r7, #28]
   return(result);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	64bb      	str	r3, [r7, #72]	; 0x48
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800302c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	2b01      	cmp	r3, #1
 8003046:	d119      	bne.n	800307c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	60bb      	str	r3, [r7, #8]
   return(result);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f023 0310 	bic.w	r3, r3, #16
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003068:	61ba      	str	r2, [r7, #24]
 800306a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6979      	ldr	r1, [r7, #20]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	613b      	str	r3, [r7, #16]
   return(result);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e5      	bne.n	8003048 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
}
 800308a:	bf00      	nop
 800308c:	3754      	adds	r7, #84	; 0x54
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7ff fecb 	bl	8002e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b21      	cmp	r3, #33	; 0x21
 80030d0:	d13e      	bne.n	8003150 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	d114      	bne.n	8003106 <UART_Transmit_IT+0x48>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d110      	bne.n	8003106 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	1c9a      	adds	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	621a      	str	r2, [r3, #32]
 8003104:	e008      	b.n	8003118 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	1c59      	adds	r1, r3, #1
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6211      	str	r1, [r2, #32]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29b      	uxth	r3, r3
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4619      	mov	r1, r3
 8003126:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10f      	bne.n	800314c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800313a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800314a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003174:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fe5a 	bl	8002e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b08c      	sub	sp, #48	; 0x30
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b22      	cmp	r3, #34	; 0x22
 80031a0:	f040 80ab 	bne.w	80032fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ac:	d117      	bne.n	80031de <UART_Receive_IT+0x50>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d113      	bne.n	80031de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	1c9a      	adds	r2, r3, #2
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
 80031dc:	e026      	b.n	800322c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f0:	d007      	beq.n	8003202 <UART_Receive_IT+0x74>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <UART_Receive_IT+0x82>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e008      	b.n	8003222 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321c:	b2da      	uxtb	r2, r3
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29b      	uxth	r3, r3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4619      	mov	r1, r3
 800323a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800323c:	2b00      	cmp	r3, #0
 800323e:	d15a      	bne.n	80032f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0220 	bic.w	r2, r2, #32
 800324e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800325e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	2b01      	cmp	r3, #1
 800327e:	d135      	bne.n	80032ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	613b      	str	r3, [r7, #16]
   return(result);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f023 0310 	bic.w	r3, r3, #16
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	623a      	str	r2, [r7, #32]
 80032a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	69f9      	ldr	r1, [r7, #28]
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e5      	bne.n	8003286 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d10a      	bne.n	80032de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff fdbb 	bl	8002e60 <HAL_UARTEx_RxEventCallback>
 80032ea:	e002      	b.n	80032f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7fd ff99 	bl	8001224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e002      	b.n	80032fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e000      	b.n	80032fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
  }
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3730      	adds	r7, #48	; 0x30
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b0c0      	sub	sp, #256	; 0x100
 800330a:	af00      	add	r7, sp, #0
 800330c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	ea40 0301 	orr.w	r3, r0, r1
 800332c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	431a      	orrs	r2, r3
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	431a      	orrs	r2, r3
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800335c:	f021 010c 	bic.w	r1, r1, #12
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800336a:	430b      	orrs	r3, r1
 800336c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	6999      	ldr	r1, [r3, #24]
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	ea40 0301 	orr.w	r3, r0, r1
 800338a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <UART_SetConfig+0x2cc>)
 8003394:	429a      	cmp	r2, r3
 8003396:	d005      	beq.n	80033a4 <UART_SetConfig+0xa0>
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b8d      	ldr	r3, [pc, #564]	; (80035d4 <UART_SetConfig+0x2d0>)
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d104      	bne.n	80033ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033a4:	f7ff f996 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 80033a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033ac:	e003      	b.n	80033b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ae:	f7ff f97d 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 80033b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c0:	f040 810c 	bne.w	80035dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	1891      	adds	r1, r2, r2
 80033dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80033de:	415b      	adcs	r3, r3
 80033e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033e6:	4621      	mov	r1, r4
 80033e8:	eb12 0801 	adds.w	r8, r2, r1
 80033ec:	4629      	mov	r1, r5
 80033ee:	eb43 0901 	adc.w	r9, r3, r1
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003406:	4690      	mov	r8, r2
 8003408:	4699      	mov	r9, r3
 800340a:	4623      	mov	r3, r4
 800340c:	eb18 0303 	adds.w	r3, r8, r3
 8003410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003414:	462b      	mov	r3, r5
 8003416:	eb49 0303 	adc.w	r3, r9, r3
 800341a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800342a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800342e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003432:	460b      	mov	r3, r1
 8003434:	18db      	adds	r3, r3, r3
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
 8003438:	4613      	mov	r3, r2
 800343a:	eb42 0303 	adc.w	r3, r2, r3
 800343e:	657b      	str	r3, [r7, #84]	; 0x54
 8003440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003448:	f7fc ff1a 	bl	8000280 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <UART_SetConfig+0x2d4>)
 8003452:	fba3 2302 	umull	r2, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	011c      	lsls	r4, r3, #4
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003464:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	64b9      	str	r1, [r7, #72]	; 0x48
 8003474:	415b      	adcs	r3, r3
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800347c:	4641      	mov	r1, r8
 800347e:	eb12 0a01 	adds.w	sl, r2, r1
 8003482:	4649      	mov	r1, r9
 8003484:	eb43 0b01 	adc.w	fp, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800349c:	4692      	mov	sl, r2
 800349e:	469b      	mov	fp, r3
 80034a0:	4643      	mov	r3, r8
 80034a2:	eb1a 0303 	adds.w	r3, sl, r3
 80034a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034aa:	464b      	mov	r3, r9
 80034ac:	eb4b 0303 	adc.w	r3, fp, r3
 80034b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034c8:	460b      	mov	r3, r1
 80034ca:	18db      	adds	r3, r3, r3
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
 80034ce:	4613      	mov	r3, r2
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
 80034d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034de:	f7fc fecf 	bl	8000280 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <UART_SetConfig+0x2d4>)
 80034ea:	fba3 2301 	umull	r2, r3, r3, r1
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2264      	movs	r2, #100	; 0x64
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	1acb      	subs	r3, r1, r3
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <UART_SetConfig+0x2d4>)
 8003500:	fba3 2302 	umull	r2, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800350c:	441c      	add	r4, r3
 800350e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003518:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800351c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	1891      	adds	r1, r2, r2
 8003526:	63b9      	str	r1, [r7, #56]	; 0x38
 8003528:	415b      	adcs	r3, r3
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003530:	4641      	mov	r1, r8
 8003532:	1851      	adds	r1, r2, r1
 8003534:	6339      	str	r1, [r7, #48]	; 0x30
 8003536:	4649      	mov	r1, r9
 8003538:	414b      	adcs	r3, r1
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003548:	4659      	mov	r1, fp
 800354a:	00cb      	lsls	r3, r1, #3
 800354c:	4651      	mov	r1, sl
 800354e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003552:	4651      	mov	r1, sl
 8003554:	00ca      	lsls	r2, r1, #3
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	4603      	mov	r3, r0
 800355c:	4642      	mov	r2, r8
 800355e:	189b      	adds	r3, r3, r2
 8003560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003564:	464b      	mov	r3, r9
 8003566:	460a      	mov	r2, r1
 8003568:	eb42 0303 	adc.w	r3, r2, r3
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800357c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003584:	460b      	mov	r3, r1
 8003586:	18db      	adds	r3, r3, r3
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
 800358a:	4613      	mov	r3, r2
 800358c:	eb42 0303 	adc.w	r3, r2, r3
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800359a:	f7fc fe71 	bl	8000280 <__aeabi_uldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <UART_SetConfig+0x2d4>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	2164      	movs	r1, #100	; 0x64
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	3332      	adds	r3, #50	; 0x32
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <UART_SetConfig+0x2d4>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	f003 0207 	and.w	r2, r3, #7
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4422      	add	r2, r4
 80035ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035cc:	e105      	b.n	80037da <UART_SetConfig+0x4d6>
 80035ce:	bf00      	nop
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40011400 	.word	0x40011400
 80035d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ee:	4642      	mov	r2, r8
 80035f0:	464b      	mov	r3, r9
 80035f2:	1891      	adds	r1, r2, r2
 80035f4:	6239      	str	r1, [r7, #32]
 80035f6:	415b      	adcs	r3, r3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035fe:	4641      	mov	r1, r8
 8003600:	1854      	adds	r4, r2, r1
 8003602:	4649      	mov	r1, r9
 8003604:	eb43 0501 	adc.w	r5, r3, r1
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	00eb      	lsls	r3, r5, #3
 8003612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003616:	00e2      	lsls	r2, r4, #3
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	4643      	mov	r3, r8
 800361e:	18e3      	adds	r3, r4, r3
 8003620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003624:	464b      	mov	r3, r9
 8003626:	eb45 0303 	adc.w	r3, r5, r3
 800362a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800363a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800364a:	4629      	mov	r1, r5
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	4621      	mov	r1, r4
 8003650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003654:	4621      	mov	r1, r4
 8003656:	008a      	lsls	r2, r1, #2
 8003658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800365c:	f7fc fe10 	bl	8000280 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003666:	fba3 2302 	umull	r2, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	011c      	lsls	r4, r3, #4
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800367c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	61b9      	str	r1, [r7, #24]
 8003688:	415b      	adcs	r3, r3
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003690:	4641      	mov	r1, r8
 8003692:	1851      	adds	r1, r2, r1
 8003694:	6139      	str	r1, [r7, #16]
 8003696:	4649      	mov	r1, r9
 8003698:	414b      	adcs	r3, r1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a8:	4659      	mov	r1, fp
 80036aa:	00cb      	lsls	r3, r1, #3
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b2:	4651      	mov	r1, sl
 80036b4:	00ca      	lsls	r2, r1, #3
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	4642      	mov	r2, r8
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036c4:	464b      	mov	r3, r9
 80036c6:	460a      	mov	r2, r1
 80036c8:	eb42 0303 	adc.w	r3, r2, r3
 80036cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80036da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036e8:	4649      	mov	r1, r9
 80036ea:	008b      	lsls	r3, r1, #2
 80036ec:	4641      	mov	r1, r8
 80036ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f2:	4641      	mov	r1, r8
 80036f4:	008a      	lsls	r2, r1, #2
 80036f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036fa:	f7fc fdc1 	bl	8000280 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003704:	fba3 1302 	umull	r1, r3, r3, r2
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	2164      	movs	r1, #100	; 0x64
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	3332      	adds	r3, #50	; 0x32
 8003716:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003722:	441c      	add	r4, r3
 8003724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003728:	2200      	movs	r2, #0
 800372a:	673b      	str	r3, [r7, #112]	; 0x70
 800372c:	677a      	str	r2, [r7, #116]	; 0x74
 800372e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003732:	4642      	mov	r2, r8
 8003734:	464b      	mov	r3, r9
 8003736:	1891      	adds	r1, r2, r2
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	415b      	adcs	r3, r3
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003742:	4641      	mov	r1, r8
 8003744:	1851      	adds	r1, r2, r1
 8003746:	6039      	str	r1, [r7, #0]
 8003748:	4649      	mov	r1, r9
 800374a:	414b      	adcs	r3, r1
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800375a:	4659      	mov	r1, fp
 800375c:	00cb      	lsls	r3, r1, #3
 800375e:	4651      	mov	r1, sl
 8003760:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003764:	4651      	mov	r1, sl
 8003766:	00ca      	lsls	r2, r1, #3
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	4603      	mov	r3, r0
 800376e:	4642      	mov	r2, r8
 8003770:	189b      	adds	r3, r3, r2
 8003772:	66bb      	str	r3, [r7, #104]	; 0x68
 8003774:	464b      	mov	r3, r9
 8003776:	460a      	mov	r2, r1
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	663b      	str	r3, [r7, #96]	; 0x60
 8003788:	667a      	str	r2, [r7, #100]	; 0x64
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003796:	4649      	mov	r1, r9
 8003798:	008b      	lsls	r3, r1, #2
 800379a:	4641      	mov	r1, r8
 800379c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a0:	4641      	mov	r1, r8
 80037a2:	008a      	lsls	r2, r1, #2
 80037a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037a8:	f7fc fd6a 	bl	8000280 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <UART_SetConfig+0x4e4>)
 80037b2:	fba3 1302 	umull	r1, r3, r3, r2
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	2164      	movs	r1, #100	; 0x64
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	3332      	adds	r3, #50	; 0x32
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <UART_SetConfig+0x4e4>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	f003 020f 	and.w	r2, r3, #15
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4422      	add	r2, r4
 80037d8:	609a      	str	r2, [r3, #8]
}
 80037da:	bf00      	nop
 80037dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	51eb851f 	.word	0x51eb851f

080037ec <atoi>:
 80037ec:	220a      	movs	r2, #10
 80037ee:	2100      	movs	r1, #0
 80037f0:	f000 b8d4 	b.w	800399c <strtol>

080037f4 <__errno>:
 80037f4:	4b01      	ldr	r3, [pc, #4]	; (80037fc <__errno+0x8>)
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	2000000c 	.word	0x2000000c

08003800 <__libc_init_array>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	4d0d      	ldr	r5, [pc, #52]	; (8003838 <__libc_init_array+0x38>)
 8003804:	4c0d      	ldr	r4, [pc, #52]	; (800383c <__libc_init_array+0x3c>)
 8003806:	1b64      	subs	r4, r4, r5
 8003808:	10a4      	asrs	r4, r4, #2
 800380a:	2600      	movs	r6, #0
 800380c:	42a6      	cmp	r6, r4
 800380e:	d109      	bne.n	8003824 <__libc_init_array+0x24>
 8003810:	4d0b      	ldr	r5, [pc, #44]	; (8003840 <__libc_init_array+0x40>)
 8003812:	4c0c      	ldr	r4, [pc, #48]	; (8003844 <__libc_init_array+0x44>)
 8003814:	f000 fd1a 	bl	800424c <_init>
 8003818:	1b64      	subs	r4, r4, r5
 800381a:	10a4      	asrs	r4, r4, #2
 800381c:	2600      	movs	r6, #0
 800381e:	42a6      	cmp	r6, r4
 8003820:	d105      	bne.n	800382e <__libc_init_array+0x2e>
 8003822:	bd70      	pop	{r4, r5, r6, pc}
 8003824:	f855 3b04 	ldr.w	r3, [r5], #4
 8003828:	4798      	blx	r3
 800382a:	3601      	adds	r6, #1
 800382c:	e7ee      	b.n	800380c <__libc_init_array+0xc>
 800382e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003832:	4798      	blx	r3
 8003834:	3601      	adds	r6, #1
 8003836:	e7f2      	b.n	800381e <__libc_init_array+0x1e>
 8003838:	08004648 	.word	0x08004648
 800383c:	08004648 	.word	0x08004648
 8003840:	08004648 	.word	0x08004648
 8003844:	0800464c 	.word	0x0800464c

08003848 <memset>:
 8003848:	4402      	add	r2, r0
 800384a:	4603      	mov	r3, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <siprintf>:
 8003858:	b40e      	push	{r1, r2, r3}
 800385a:	b500      	push	{lr}
 800385c:	b09c      	sub	sp, #112	; 0x70
 800385e:	ab1d      	add	r3, sp, #116	; 0x74
 8003860:	9002      	str	r0, [sp, #8]
 8003862:	9006      	str	r0, [sp, #24]
 8003864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003868:	4809      	ldr	r0, [pc, #36]	; (8003890 <siprintf+0x38>)
 800386a:	9107      	str	r1, [sp, #28]
 800386c:	9104      	str	r1, [sp, #16]
 800386e:	4909      	ldr	r1, [pc, #36]	; (8003894 <siprintf+0x3c>)
 8003870:	f853 2b04 	ldr.w	r2, [r3], #4
 8003874:	9105      	str	r1, [sp, #20]
 8003876:	6800      	ldr	r0, [r0, #0]
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	a902      	add	r1, sp, #8
 800387c:	f000 f8f4 	bl	8003a68 <_svfiprintf_r>
 8003880:	9b02      	ldr	r3, [sp, #8]
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	b01c      	add	sp, #112	; 0x70
 8003888:	f85d eb04 	ldr.w	lr, [sp], #4
 800388c:	b003      	add	sp, #12
 800388e:	4770      	bx	lr
 8003890:	2000000c 	.word	0x2000000c
 8003894:	ffff0208 	.word	0xffff0208

08003898 <_strtol_l.constprop.0>:
 8003898:	2b01      	cmp	r3, #1
 800389a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800389e:	d001      	beq.n	80038a4 <_strtol_l.constprop.0+0xc>
 80038a0:	2b24      	cmp	r3, #36	; 0x24
 80038a2:	d906      	bls.n	80038b2 <_strtol_l.constprop.0+0x1a>
 80038a4:	f7ff ffa6 	bl	80037f4 <__errno>
 80038a8:	2316      	movs	r3, #22
 80038aa:	6003      	str	r3, [r0, #0]
 80038ac:	2000      	movs	r0, #0
 80038ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003998 <_strtol_l.constprop.0+0x100>
 80038b6:	460d      	mov	r5, r1
 80038b8:	462e      	mov	r6, r5
 80038ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80038c2:	f017 0708 	ands.w	r7, r7, #8
 80038c6:	d1f7      	bne.n	80038b8 <_strtol_l.constprop.0+0x20>
 80038c8:	2c2d      	cmp	r4, #45	; 0x2d
 80038ca:	d132      	bne.n	8003932 <_strtol_l.constprop.0+0x9a>
 80038cc:	782c      	ldrb	r4, [r5, #0]
 80038ce:	2701      	movs	r7, #1
 80038d0:	1cb5      	adds	r5, r6, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d05b      	beq.n	800398e <_strtol_l.constprop.0+0xf6>
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d109      	bne.n	80038ee <_strtol_l.constprop.0+0x56>
 80038da:	2c30      	cmp	r4, #48	; 0x30
 80038dc:	d107      	bne.n	80038ee <_strtol_l.constprop.0+0x56>
 80038de:	782c      	ldrb	r4, [r5, #0]
 80038e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80038e4:	2c58      	cmp	r4, #88	; 0x58
 80038e6:	d14d      	bne.n	8003984 <_strtol_l.constprop.0+0xec>
 80038e8:	786c      	ldrb	r4, [r5, #1]
 80038ea:	2310      	movs	r3, #16
 80038ec:	3502      	adds	r5, #2
 80038ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80038f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80038f6:	f04f 0c00 	mov.w	ip, #0
 80038fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80038fe:	4666      	mov	r6, ip
 8003900:	fb03 8a19 	mls	sl, r3, r9, r8
 8003904:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003908:	f1be 0f09 	cmp.w	lr, #9
 800390c:	d816      	bhi.n	800393c <_strtol_l.constprop.0+0xa4>
 800390e:	4674      	mov	r4, lr
 8003910:	42a3      	cmp	r3, r4
 8003912:	dd24      	ble.n	800395e <_strtol_l.constprop.0+0xc6>
 8003914:	f1bc 0f00 	cmp.w	ip, #0
 8003918:	db1e      	blt.n	8003958 <_strtol_l.constprop.0+0xc0>
 800391a:	45b1      	cmp	r9, r6
 800391c:	d31c      	bcc.n	8003958 <_strtol_l.constprop.0+0xc0>
 800391e:	d101      	bne.n	8003924 <_strtol_l.constprop.0+0x8c>
 8003920:	45a2      	cmp	sl, r4
 8003922:	db19      	blt.n	8003958 <_strtol_l.constprop.0+0xc0>
 8003924:	fb06 4603 	mla	r6, r6, r3, r4
 8003928:	f04f 0c01 	mov.w	ip, #1
 800392c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003930:	e7e8      	b.n	8003904 <_strtol_l.constprop.0+0x6c>
 8003932:	2c2b      	cmp	r4, #43	; 0x2b
 8003934:	bf04      	itt	eq
 8003936:	782c      	ldrbeq	r4, [r5, #0]
 8003938:	1cb5      	addeq	r5, r6, #2
 800393a:	e7ca      	b.n	80038d2 <_strtol_l.constprop.0+0x3a>
 800393c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003940:	f1be 0f19 	cmp.w	lr, #25
 8003944:	d801      	bhi.n	800394a <_strtol_l.constprop.0+0xb2>
 8003946:	3c37      	subs	r4, #55	; 0x37
 8003948:	e7e2      	b.n	8003910 <_strtol_l.constprop.0+0x78>
 800394a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800394e:	f1be 0f19 	cmp.w	lr, #25
 8003952:	d804      	bhi.n	800395e <_strtol_l.constprop.0+0xc6>
 8003954:	3c57      	subs	r4, #87	; 0x57
 8003956:	e7db      	b.n	8003910 <_strtol_l.constprop.0+0x78>
 8003958:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800395c:	e7e6      	b.n	800392c <_strtol_l.constprop.0+0x94>
 800395e:	f1bc 0f00 	cmp.w	ip, #0
 8003962:	da05      	bge.n	8003970 <_strtol_l.constprop.0+0xd8>
 8003964:	2322      	movs	r3, #34	; 0x22
 8003966:	6003      	str	r3, [r0, #0]
 8003968:	4646      	mov	r6, r8
 800396a:	b942      	cbnz	r2, 800397e <_strtol_l.constprop.0+0xe6>
 800396c:	4630      	mov	r0, r6
 800396e:	e79e      	b.n	80038ae <_strtol_l.constprop.0+0x16>
 8003970:	b107      	cbz	r7, 8003974 <_strtol_l.constprop.0+0xdc>
 8003972:	4276      	negs	r6, r6
 8003974:	2a00      	cmp	r2, #0
 8003976:	d0f9      	beq.n	800396c <_strtol_l.constprop.0+0xd4>
 8003978:	f1bc 0f00 	cmp.w	ip, #0
 800397c:	d000      	beq.n	8003980 <_strtol_l.constprop.0+0xe8>
 800397e:	1e69      	subs	r1, r5, #1
 8003980:	6011      	str	r1, [r2, #0]
 8003982:	e7f3      	b.n	800396c <_strtol_l.constprop.0+0xd4>
 8003984:	2430      	movs	r4, #48	; 0x30
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1b1      	bne.n	80038ee <_strtol_l.constprop.0+0x56>
 800398a:	2308      	movs	r3, #8
 800398c:	e7af      	b.n	80038ee <_strtol_l.constprop.0+0x56>
 800398e:	2c30      	cmp	r4, #48	; 0x30
 8003990:	d0a5      	beq.n	80038de <_strtol_l.constprop.0+0x46>
 8003992:	230a      	movs	r3, #10
 8003994:	e7ab      	b.n	80038ee <_strtol_l.constprop.0+0x56>
 8003996:	bf00      	nop
 8003998:	0800450d 	.word	0x0800450d

0800399c <strtol>:
 800399c:	4613      	mov	r3, r2
 800399e:	460a      	mov	r2, r1
 80039a0:	4601      	mov	r1, r0
 80039a2:	4802      	ldr	r0, [pc, #8]	; (80039ac <strtol+0x10>)
 80039a4:	6800      	ldr	r0, [r0, #0]
 80039a6:	f7ff bf77 	b.w	8003898 <_strtol_l.constprop.0>
 80039aa:	bf00      	nop
 80039ac:	2000000c 	.word	0x2000000c

080039b0 <__ssputs_r>:
 80039b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	688e      	ldr	r6, [r1, #8]
 80039b6:	429e      	cmp	r6, r3
 80039b8:	4682      	mov	sl, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	4690      	mov	r8, r2
 80039be:	461f      	mov	r7, r3
 80039c0:	d838      	bhi.n	8003a34 <__ssputs_r+0x84>
 80039c2:	898a      	ldrh	r2, [r1, #12]
 80039c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039c8:	d032      	beq.n	8003a30 <__ssputs_r+0x80>
 80039ca:	6825      	ldr	r5, [r4, #0]
 80039cc:	6909      	ldr	r1, [r1, #16]
 80039ce:	eba5 0901 	sub.w	r9, r5, r1
 80039d2:	6965      	ldr	r5, [r4, #20]
 80039d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039dc:	3301      	adds	r3, #1
 80039de:	444b      	add	r3, r9
 80039e0:	106d      	asrs	r5, r5, #1
 80039e2:	429d      	cmp	r5, r3
 80039e4:	bf38      	it	cc
 80039e6:	461d      	movcc	r5, r3
 80039e8:	0553      	lsls	r3, r2, #21
 80039ea:	d531      	bpl.n	8003a50 <__ssputs_r+0xa0>
 80039ec:	4629      	mov	r1, r5
 80039ee:	f000 fb63 	bl	80040b8 <_malloc_r>
 80039f2:	4606      	mov	r6, r0
 80039f4:	b950      	cbnz	r0, 8003a0c <__ssputs_r+0x5c>
 80039f6:	230c      	movs	r3, #12
 80039f8:	f8ca 3000 	str.w	r3, [sl]
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a0c:	6921      	ldr	r1, [r4, #16]
 8003a0e:	464a      	mov	r2, r9
 8003a10:	f000 fabe 	bl	8003f90 <memcpy>
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	6126      	str	r6, [r4, #16]
 8003a22:	6165      	str	r5, [r4, #20]
 8003a24:	444e      	add	r6, r9
 8003a26:	eba5 0509 	sub.w	r5, r5, r9
 8003a2a:	6026      	str	r6, [r4, #0]
 8003a2c:	60a5      	str	r5, [r4, #8]
 8003a2e:	463e      	mov	r6, r7
 8003a30:	42be      	cmp	r6, r7
 8003a32:	d900      	bls.n	8003a36 <__ssputs_r+0x86>
 8003a34:	463e      	mov	r6, r7
 8003a36:	6820      	ldr	r0, [r4, #0]
 8003a38:	4632      	mov	r2, r6
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	f000 fab6 	bl	8003fac <memmove>
 8003a40:	68a3      	ldr	r3, [r4, #8]
 8003a42:	1b9b      	subs	r3, r3, r6
 8003a44:	60a3      	str	r3, [r4, #8]
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	4433      	add	r3, r6
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	e7db      	b.n	8003a08 <__ssputs_r+0x58>
 8003a50:	462a      	mov	r2, r5
 8003a52:	f000 fba5 	bl	80041a0 <_realloc_r>
 8003a56:	4606      	mov	r6, r0
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d1e1      	bne.n	8003a20 <__ssputs_r+0x70>
 8003a5c:	6921      	ldr	r1, [r4, #16]
 8003a5e:	4650      	mov	r0, sl
 8003a60:	f000 fabe 	bl	8003fe0 <_free_r>
 8003a64:	e7c7      	b.n	80039f6 <__ssputs_r+0x46>
	...

08003a68 <_svfiprintf_r>:
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	4698      	mov	r8, r3
 8003a6e:	898b      	ldrh	r3, [r1, #12]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	b09d      	sub	sp, #116	; 0x74
 8003a74:	4607      	mov	r7, r0
 8003a76:	460d      	mov	r5, r1
 8003a78:	4614      	mov	r4, r2
 8003a7a:	d50e      	bpl.n	8003a9a <_svfiprintf_r+0x32>
 8003a7c:	690b      	ldr	r3, [r1, #16]
 8003a7e:	b963      	cbnz	r3, 8003a9a <_svfiprintf_r+0x32>
 8003a80:	2140      	movs	r1, #64	; 0x40
 8003a82:	f000 fb19 	bl	80040b8 <_malloc_r>
 8003a86:	6028      	str	r0, [r5, #0]
 8003a88:	6128      	str	r0, [r5, #16]
 8003a8a:	b920      	cbnz	r0, 8003a96 <_svfiprintf_r+0x2e>
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a94:	e0d1      	b.n	8003c3a <_svfiprintf_r+0x1d2>
 8003a96:	2340      	movs	r3, #64	; 0x40
 8003a98:	616b      	str	r3, [r5, #20]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aa8:	2330      	movs	r3, #48	; 0x30
 8003aaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c54 <_svfiprintf_r+0x1ec>
 8003aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ab2:	f04f 0901 	mov.w	r9, #1
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	469a      	mov	sl, r3
 8003aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003abe:	b10a      	cbz	r2, 8003ac4 <_svfiprintf_r+0x5c>
 8003ac0:	2a25      	cmp	r2, #37	; 0x25
 8003ac2:	d1f9      	bne.n	8003ab8 <_svfiprintf_r+0x50>
 8003ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ac8:	d00b      	beq.n	8003ae2 <_svfiprintf_r+0x7a>
 8003aca:	465b      	mov	r3, fp
 8003acc:	4622      	mov	r2, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f7ff ff6d 	bl	80039b0 <__ssputs_r>
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	f000 80aa 	beq.w	8003c30 <_svfiprintf_r+0x1c8>
 8003adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ade:	445a      	add	r2, fp
 8003ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80a2 	beq.w	8003c30 <_svfiprintf_r+0x1c8>
 8003aec:	2300      	movs	r3, #0
 8003aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003af6:	f10a 0a01 	add.w	sl, sl, #1
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b02:	931a      	str	r3, [sp, #104]	; 0x68
 8003b04:	4654      	mov	r4, sl
 8003b06:	2205      	movs	r2, #5
 8003b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0c:	4851      	ldr	r0, [pc, #324]	; (8003c54 <_svfiprintf_r+0x1ec>)
 8003b0e:	f7fc fb67 	bl	80001e0 <memchr>
 8003b12:	9a04      	ldr	r2, [sp, #16]
 8003b14:	b9d8      	cbnz	r0, 8003b4e <_svfiprintf_r+0xe6>
 8003b16:	06d0      	lsls	r0, r2, #27
 8003b18:	bf44      	itt	mi
 8003b1a:	2320      	movmi	r3, #32
 8003b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b20:	0711      	lsls	r1, r2, #28
 8003b22:	bf44      	itt	mi
 8003b24:	232b      	movmi	r3, #43	; 0x2b
 8003b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b30:	d015      	beq.n	8003b5e <_svfiprintf_r+0xf6>
 8003b32:	9a07      	ldr	r2, [sp, #28]
 8003b34:	4654      	mov	r4, sl
 8003b36:	2000      	movs	r0, #0
 8003b38:	f04f 0c0a 	mov.w	ip, #10
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b42:	3b30      	subs	r3, #48	; 0x30
 8003b44:	2b09      	cmp	r3, #9
 8003b46:	d94e      	bls.n	8003be6 <_svfiprintf_r+0x17e>
 8003b48:	b1b0      	cbz	r0, 8003b78 <_svfiprintf_r+0x110>
 8003b4a:	9207      	str	r2, [sp, #28]
 8003b4c:	e014      	b.n	8003b78 <_svfiprintf_r+0x110>
 8003b4e:	eba0 0308 	sub.w	r3, r0, r8
 8003b52:	fa09 f303 	lsl.w	r3, r9, r3
 8003b56:	4313      	orrs	r3, r2
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	46a2      	mov	sl, r4
 8003b5c:	e7d2      	b.n	8003b04 <_svfiprintf_r+0x9c>
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	1d19      	adds	r1, r3, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	9103      	str	r1, [sp, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	bfbb      	ittet	lt
 8003b6a:	425b      	neglt	r3, r3
 8003b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b70:	9307      	strge	r3, [sp, #28]
 8003b72:	9307      	strlt	r3, [sp, #28]
 8003b74:	bfb8      	it	lt
 8003b76:	9204      	strlt	r2, [sp, #16]
 8003b78:	7823      	ldrb	r3, [r4, #0]
 8003b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b7c:	d10c      	bne.n	8003b98 <_svfiprintf_r+0x130>
 8003b7e:	7863      	ldrb	r3, [r4, #1]
 8003b80:	2b2a      	cmp	r3, #42	; 0x2a
 8003b82:	d135      	bne.n	8003bf0 <_svfiprintf_r+0x188>
 8003b84:	9b03      	ldr	r3, [sp, #12]
 8003b86:	1d1a      	adds	r2, r3, #4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	9203      	str	r2, [sp, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bfb8      	it	lt
 8003b90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b94:	3402      	adds	r4, #2
 8003b96:	9305      	str	r3, [sp, #20]
 8003b98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c64 <_svfiprintf_r+0x1fc>
 8003b9c:	7821      	ldrb	r1, [r4, #0]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4650      	mov	r0, sl
 8003ba2:	f7fc fb1d 	bl	80001e0 <memchr>
 8003ba6:	b140      	cbz	r0, 8003bba <_svfiprintf_r+0x152>
 8003ba8:	2340      	movs	r3, #64	; 0x40
 8003baa:	eba0 000a 	sub.w	r0, r0, sl
 8003bae:	fa03 f000 	lsl.w	r0, r3, r0
 8003bb2:	9b04      	ldr	r3, [sp, #16]
 8003bb4:	4303      	orrs	r3, r0
 8003bb6:	3401      	adds	r4, #1
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bbe:	4826      	ldr	r0, [pc, #152]	; (8003c58 <_svfiprintf_r+0x1f0>)
 8003bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bc4:	2206      	movs	r2, #6
 8003bc6:	f7fc fb0b 	bl	80001e0 <memchr>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d038      	beq.n	8003c40 <_svfiprintf_r+0x1d8>
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <_svfiprintf_r+0x1f4>)
 8003bd0:	bb1b      	cbnz	r3, 8003c1a <_svfiprintf_r+0x1b2>
 8003bd2:	9b03      	ldr	r3, [sp, #12]
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	3308      	adds	r3, #8
 8003bdc:	9303      	str	r3, [sp, #12]
 8003bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be0:	4433      	add	r3, r6
 8003be2:	9309      	str	r3, [sp, #36]	; 0x24
 8003be4:	e767      	b.n	8003ab6 <_svfiprintf_r+0x4e>
 8003be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bea:	460c      	mov	r4, r1
 8003bec:	2001      	movs	r0, #1
 8003bee:	e7a5      	b.n	8003b3c <_svfiprintf_r+0xd4>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	3401      	adds	r4, #1
 8003bf4:	9305      	str	r3, [sp, #20]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f04f 0c0a 	mov.w	ip, #10
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c02:	3a30      	subs	r2, #48	; 0x30
 8003c04:	2a09      	cmp	r2, #9
 8003c06:	d903      	bls.n	8003c10 <_svfiprintf_r+0x1a8>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0c5      	beq.n	8003b98 <_svfiprintf_r+0x130>
 8003c0c:	9105      	str	r1, [sp, #20]
 8003c0e:	e7c3      	b.n	8003b98 <_svfiprintf_r+0x130>
 8003c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c14:	4604      	mov	r4, r0
 8003c16:	2301      	movs	r3, #1
 8003c18:	e7f0      	b.n	8003bfc <_svfiprintf_r+0x194>
 8003c1a:	ab03      	add	r3, sp, #12
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	462a      	mov	r2, r5
 8003c20:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <_svfiprintf_r+0x1f8>)
 8003c22:	a904      	add	r1, sp, #16
 8003c24:	4638      	mov	r0, r7
 8003c26:	f3af 8000 	nop.w
 8003c2a:	1c42      	adds	r2, r0, #1
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	d1d6      	bne.n	8003bde <_svfiprintf_r+0x176>
 8003c30:	89ab      	ldrh	r3, [r5, #12]
 8003c32:	065b      	lsls	r3, r3, #25
 8003c34:	f53f af2c 	bmi.w	8003a90 <_svfiprintf_r+0x28>
 8003c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c3a:	b01d      	add	sp, #116	; 0x74
 8003c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c40:	ab03      	add	r3, sp, #12
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	462a      	mov	r2, r5
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <_svfiprintf_r+0x1f8>)
 8003c48:	a904      	add	r1, sp, #16
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f000 f87a 	bl	8003d44 <_printf_i>
 8003c50:	e7eb      	b.n	8003c2a <_svfiprintf_r+0x1c2>
 8003c52:	bf00      	nop
 8003c54:	0800460d 	.word	0x0800460d
 8003c58:	08004617 	.word	0x08004617
 8003c5c:	00000000 	.word	0x00000000
 8003c60:	080039b1 	.word	0x080039b1
 8003c64:	08004613 	.word	0x08004613

08003c68 <_printf_common>:
 8003c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	4699      	mov	r9, r3
 8003c70:	688a      	ldr	r2, [r1, #8]
 8003c72:	690b      	ldr	r3, [r1, #16]
 8003c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bfb8      	it	lt
 8003c7c:	4613      	movlt	r3, r2
 8003c7e:	6033      	str	r3, [r6, #0]
 8003c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c84:	4607      	mov	r7, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	b10a      	cbz	r2, 8003c8e <_printf_common+0x26>
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	6033      	str	r3, [r6, #0]
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	0699      	lsls	r1, r3, #26
 8003c92:	bf42      	ittt	mi
 8003c94:	6833      	ldrmi	r3, [r6, #0]
 8003c96:	3302      	addmi	r3, #2
 8003c98:	6033      	strmi	r3, [r6, #0]
 8003c9a:	6825      	ldr	r5, [r4, #0]
 8003c9c:	f015 0506 	ands.w	r5, r5, #6
 8003ca0:	d106      	bne.n	8003cb0 <_printf_common+0x48>
 8003ca2:	f104 0a19 	add.w	sl, r4, #25
 8003ca6:	68e3      	ldr	r3, [r4, #12]
 8003ca8:	6832      	ldr	r2, [r6, #0]
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	42ab      	cmp	r3, r5
 8003cae:	dc26      	bgt.n	8003cfe <_printf_common+0x96>
 8003cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cb4:	1e13      	subs	r3, r2, #0
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	bf18      	it	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	0692      	lsls	r2, r2, #26
 8003cbe:	d42b      	bmi.n	8003d18 <_printf_common+0xb0>
 8003cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	47c0      	blx	r8
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d01e      	beq.n	8003d0c <_printf_common+0xa4>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	68e5      	ldr	r5, [r4, #12]
 8003cd2:	6832      	ldr	r2, [r6, #0]
 8003cd4:	f003 0306 	and.w	r3, r3, #6
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	bf08      	it	eq
 8003cdc:	1aad      	subeq	r5, r5, r2
 8003cde:	68a3      	ldr	r3, [r4, #8]
 8003ce0:	6922      	ldr	r2, [r4, #16]
 8003ce2:	bf0c      	ite	eq
 8003ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ce8:	2500      	movne	r5, #0
 8003cea:	4293      	cmp	r3, r2
 8003cec:	bfc4      	itt	gt
 8003cee:	1a9b      	subgt	r3, r3, r2
 8003cf0:	18ed      	addgt	r5, r5, r3
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	341a      	adds	r4, #26
 8003cf6:	42b5      	cmp	r5, r6
 8003cf8:	d11a      	bne.n	8003d30 <_printf_common+0xc8>
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e008      	b.n	8003d10 <_printf_common+0xa8>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4652      	mov	r2, sl
 8003d02:	4649      	mov	r1, r9
 8003d04:	4638      	mov	r0, r7
 8003d06:	47c0      	blx	r8
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d103      	bne.n	8003d14 <_printf_common+0xac>
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d14:	3501      	adds	r5, #1
 8003d16:	e7c6      	b.n	8003ca6 <_printf_common+0x3e>
 8003d18:	18e1      	adds	r1, r4, r3
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	2030      	movs	r0, #48	; 0x30
 8003d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d22:	4422      	add	r2, r4
 8003d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	e7c7      	b.n	8003cc0 <_printf_common+0x58>
 8003d30:	2301      	movs	r3, #1
 8003d32:	4622      	mov	r2, r4
 8003d34:	4649      	mov	r1, r9
 8003d36:	4638      	mov	r0, r7
 8003d38:	47c0      	blx	r8
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d0e6      	beq.n	8003d0c <_printf_common+0xa4>
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7d9      	b.n	8003cf6 <_printf_common+0x8e>
	...

08003d44 <_printf_i>:
 8003d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	7e0f      	ldrb	r7, [r1, #24]
 8003d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d4c:	2f78      	cmp	r7, #120	; 0x78
 8003d4e:	4691      	mov	r9, r2
 8003d50:	4680      	mov	r8, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	469a      	mov	sl, r3
 8003d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d5a:	d807      	bhi.n	8003d6c <_printf_i+0x28>
 8003d5c:	2f62      	cmp	r7, #98	; 0x62
 8003d5e:	d80a      	bhi.n	8003d76 <_printf_i+0x32>
 8003d60:	2f00      	cmp	r7, #0
 8003d62:	f000 80d8 	beq.w	8003f16 <_printf_i+0x1d2>
 8003d66:	2f58      	cmp	r7, #88	; 0x58
 8003d68:	f000 80a3 	beq.w	8003eb2 <_printf_i+0x16e>
 8003d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d74:	e03a      	b.n	8003dec <_printf_i+0xa8>
 8003d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d7a:	2b15      	cmp	r3, #21
 8003d7c:	d8f6      	bhi.n	8003d6c <_printf_i+0x28>
 8003d7e:	a101      	add	r1, pc, #4	; (adr r1, 8003d84 <_printf_i+0x40>)
 8003d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d84:	08003ddd 	.word	0x08003ddd
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003d6d 	.word	0x08003d6d
 8003d90:	08003d6d 	.word	0x08003d6d
 8003d94:	08003d6d 	.word	0x08003d6d
 8003d98:	08003d6d 	.word	0x08003d6d
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003d6d 	.word	0x08003d6d
 8003da4:	08003d6d 	.word	0x08003d6d
 8003da8:	08003d6d 	.word	0x08003d6d
 8003dac:	08003d6d 	.word	0x08003d6d
 8003db0:	08003efd 	.word	0x08003efd
 8003db4:	08003e21 	.word	0x08003e21
 8003db8:	08003edf 	.word	0x08003edf
 8003dbc:	08003d6d 	.word	0x08003d6d
 8003dc0:	08003d6d 	.word	0x08003d6d
 8003dc4:	08003f1f 	.word	0x08003f1f
 8003dc8:	08003d6d 	.word	0x08003d6d
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003d6d 	.word	0x08003d6d
 8003dd4:	08003d6d 	.word	0x08003d6d
 8003dd8:	08003ee7 	.word	0x08003ee7
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	602a      	str	r2, [r5, #0]
 8003de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0a3      	b.n	8003f38 <_printf_i+0x1f4>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	6829      	ldr	r1, [r5, #0]
 8003df4:	0606      	lsls	r6, r0, #24
 8003df6:	f101 0304 	add.w	r3, r1, #4
 8003dfa:	d50a      	bpl.n	8003e12 <_printf_i+0xce>
 8003dfc:	680e      	ldr	r6, [r1, #0]
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	2e00      	cmp	r6, #0
 8003e02:	da03      	bge.n	8003e0c <_printf_i+0xc8>
 8003e04:	232d      	movs	r3, #45	; 0x2d
 8003e06:	4276      	negs	r6, r6
 8003e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0c:	485e      	ldr	r0, [pc, #376]	; (8003f88 <_printf_i+0x244>)
 8003e0e:	230a      	movs	r3, #10
 8003e10:	e019      	b.n	8003e46 <_printf_i+0x102>
 8003e12:	680e      	ldr	r6, [r1, #0]
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e1a:	bf18      	it	ne
 8003e1c:	b236      	sxthne	r6, r6
 8003e1e:	e7ef      	b.n	8003e00 <_printf_i+0xbc>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	1d19      	adds	r1, r3, #4
 8003e26:	6029      	str	r1, [r5, #0]
 8003e28:	0601      	lsls	r1, r0, #24
 8003e2a:	d501      	bpl.n	8003e30 <_printf_i+0xec>
 8003e2c:	681e      	ldr	r6, [r3, #0]
 8003e2e:	e002      	b.n	8003e36 <_printf_i+0xf2>
 8003e30:	0646      	lsls	r6, r0, #25
 8003e32:	d5fb      	bpl.n	8003e2c <_printf_i+0xe8>
 8003e34:	881e      	ldrh	r6, [r3, #0]
 8003e36:	4854      	ldr	r0, [pc, #336]	; (8003f88 <_printf_i+0x244>)
 8003e38:	2f6f      	cmp	r7, #111	; 0x6f
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2308      	moveq	r3, #8
 8003e3e:	230a      	movne	r3, #10
 8003e40:	2100      	movs	r1, #0
 8003e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e46:	6865      	ldr	r5, [r4, #4]
 8003e48:	60a5      	str	r5, [r4, #8]
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	bfa2      	ittt	ge
 8003e4e:	6821      	ldrge	r1, [r4, #0]
 8003e50:	f021 0104 	bicge.w	r1, r1, #4
 8003e54:	6021      	strge	r1, [r4, #0]
 8003e56:	b90e      	cbnz	r6, 8003e5c <_printf_i+0x118>
 8003e58:	2d00      	cmp	r5, #0
 8003e5a:	d04d      	beq.n	8003ef8 <_printf_i+0x1b4>
 8003e5c:	4615      	mov	r5, r2
 8003e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e62:	fb03 6711 	mls	r7, r3, r1, r6
 8003e66:	5dc7      	ldrb	r7, [r0, r7]
 8003e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e6c:	4637      	mov	r7, r6
 8003e6e:	42bb      	cmp	r3, r7
 8003e70:	460e      	mov	r6, r1
 8003e72:	d9f4      	bls.n	8003e5e <_printf_i+0x11a>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d10b      	bne.n	8003e90 <_printf_i+0x14c>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	07de      	lsls	r6, r3, #31
 8003e7c:	d508      	bpl.n	8003e90 <_printf_i+0x14c>
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	6861      	ldr	r1, [r4, #4]
 8003e82:	4299      	cmp	r1, r3
 8003e84:	bfde      	ittt	le
 8003e86:	2330      	movle	r3, #48	; 0x30
 8003e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e90:	1b52      	subs	r2, r2, r5
 8003e92:	6122      	str	r2, [r4, #16]
 8003e94:	f8cd a000 	str.w	sl, [sp]
 8003e98:	464b      	mov	r3, r9
 8003e9a:	aa03      	add	r2, sp, #12
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	f7ff fee2 	bl	8003c68 <_printf_common>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d14c      	bne.n	8003f42 <_printf_i+0x1fe>
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eac:	b004      	add	sp, #16
 8003eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb2:	4835      	ldr	r0, [pc, #212]	; (8003f88 <_printf_i+0x244>)
 8003eb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003eb8:	6829      	ldr	r1, [r5, #0]
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ec0:	6029      	str	r1, [r5, #0]
 8003ec2:	061d      	lsls	r5, r3, #24
 8003ec4:	d514      	bpl.n	8003ef0 <_printf_i+0x1ac>
 8003ec6:	07df      	lsls	r7, r3, #31
 8003ec8:	bf44      	itt	mi
 8003eca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ece:	6023      	strmi	r3, [r4, #0]
 8003ed0:	b91e      	cbnz	r6, 8003eda <_printf_i+0x196>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f023 0320 	bic.w	r3, r3, #32
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	2310      	movs	r3, #16
 8003edc:	e7b0      	b.n	8003e40 <_printf_i+0xfc>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	f043 0320 	orr.w	r3, r3, #32
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	2378      	movs	r3, #120	; 0x78
 8003ee8:	4828      	ldr	r0, [pc, #160]	; (8003f8c <_printf_i+0x248>)
 8003eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eee:	e7e3      	b.n	8003eb8 <_printf_i+0x174>
 8003ef0:	0659      	lsls	r1, r3, #25
 8003ef2:	bf48      	it	mi
 8003ef4:	b2b6      	uxthmi	r6, r6
 8003ef6:	e7e6      	b.n	8003ec6 <_printf_i+0x182>
 8003ef8:	4615      	mov	r5, r2
 8003efa:	e7bb      	b.n	8003e74 <_printf_i+0x130>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	6826      	ldr	r6, [r4, #0]
 8003f00:	6961      	ldr	r1, [r4, #20]
 8003f02:	1d18      	adds	r0, r3, #4
 8003f04:	6028      	str	r0, [r5, #0]
 8003f06:	0635      	lsls	r5, r6, #24
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	d501      	bpl.n	8003f10 <_printf_i+0x1cc>
 8003f0c:	6019      	str	r1, [r3, #0]
 8003f0e:	e002      	b.n	8003f16 <_printf_i+0x1d2>
 8003f10:	0670      	lsls	r0, r6, #25
 8003f12:	d5fb      	bpl.n	8003f0c <_printf_i+0x1c8>
 8003f14:	8019      	strh	r1, [r3, #0]
 8003f16:	2300      	movs	r3, #0
 8003f18:	6123      	str	r3, [r4, #16]
 8003f1a:	4615      	mov	r5, r2
 8003f1c:	e7ba      	b.n	8003e94 <_printf_i+0x150>
 8003f1e:	682b      	ldr	r3, [r5, #0]
 8003f20:	1d1a      	adds	r2, r3, #4
 8003f22:	602a      	str	r2, [r5, #0]
 8003f24:	681d      	ldr	r5, [r3, #0]
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f7fc f958 	bl	80001e0 <memchr>
 8003f30:	b108      	cbz	r0, 8003f36 <_printf_i+0x1f2>
 8003f32:	1b40      	subs	r0, r0, r5
 8003f34:	6060      	str	r0, [r4, #4]
 8003f36:	6863      	ldr	r3, [r4, #4]
 8003f38:	6123      	str	r3, [r4, #16]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f40:	e7a8      	b.n	8003e94 <_printf_i+0x150>
 8003f42:	6923      	ldr	r3, [r4, #16]
 8003f44:	462a      	mov	r2, r5
 8003f46:	4649      	mov	r1, r9
 8003f48:	4640      	mov	r0, r8
 8003f4a:	47d0      	blx	sl
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d0ab      	beq.n	8003ea8 <_printf_i+0x164>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	079b      	lsls	r3, r3, #30
 8003f54:	d413      	bmi.n	8003f7e <_printf_i+0x23a>
 8003f56:	68e0      	ldr	r0, [r4, #12]
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	4298      	cmp	r0, r3
 8003f5c:	bfb8      	it	lt
 8003f5e:	4618      	movlt	r0, r3
 8003f60:	e7a4      	b.n	8003eac <_printf_i+0x168>
 8003f62:	2301      	movs	r3, #1
 8003f64:	4632      	mov	r2, r6
 8003f66:	4649      	mov	r1, r9
 8003f68:	4640      	mov	r0, r8
 8003f6a:	47d0      	blx	sl
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d09b      	beq.n	8003ea8 <_printf_i+0x164>
 8003f70:	3501      	adds	r5, #1
 8003f72:	68e3      	ldr	r3, [r4, #12]
 8003f74:	9903      	ldr	r1, [sp, #12]
 8003f76:	1a5b      	subs	r3, r3, r1
 8003f78:	42ab      	cmp	r3, r5
 8003f7a:	dcf2      	bgt.n	8003f62 <_printf_i+0x21e>
 8003f7c:	e7eb      	b.n	8003f56 <_printf_i+0x212>
 8003f7e:	2500      	movs	r5, #0
 8003f80:	f104 0619 	add.w	r6, r4, #25
 8003f84:	e7f5      	b.n	8003f72 <_printf_i+0x22e>
 8003f86:	bf00      	nop
 8003f88:	0800461e 	.word	0x0800461e
 8003f8c:	0800462f 	.word	0x0800462f

08003f90 <memcpy>:
 8003f90:	440a      	add	r2, r1
 8003f92:	4291      	cmp	r1, r2
 8003f94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003f98:	d100      	bne.n	8003f9c <memcpy+0xc>
 8003f9a:	4770      	bx	lr
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fa6:	4291      	cmp	r1, r2
 8003fa8:	d1f9      	bne.n	8003f9e <memcpy+0xe>
 8003faa:	bd10      	pop	{r4, pc}

08003fac <memmove>:
 8003fac:	4288      	cmp	r0, r1
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	eb01 0402 	add.w	r4, r1, r2
 8003fb4:	d902      	bls.n	8003fbc <memmove+0x10>
 8003fb6:	4284      	cmp	r4, r0
 8003fb8:	4623      	mov	r3, r4
 8003fba:	d807      	bhi.n	8003fcc <memmove+0x20>
 8003fbc:	1e43      	subs	r3, r0, #1
 8003fbe:	42a1      	cmp	r1, r4
 8003fc0:	d008      	beq.n	8003fd4 <memmove+0x28>
 8003fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fca:	e7f8      	b.n	8003fbe <memmove+0x12>
 8003fcc:	4402      	add	r2, r0
 8003fce:	4601      	mov	r1, r0
 8003fd0:	428a      	cmp	r2, r1
 8003fd2:	d100      	bne.n	8003fd6 <memmove+0x2a>
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fde:	e7f7      	b.n	8003fd0 <memmove+0x24>

08003fe0 <_free_r>:
 8003fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fe2:	2900      	cmp	r1, #0
 8003fe4:	d044      	beq.n	8004070 <_free_r+0x90>
 8003fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fea:	9001      	str	r0, [sp, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f1a1 0404 	sub.w	r4, r1, #4
 8003ff2:	bfb8      	it	lt
 8003ff4:	18e4      	addlt	r4, r4, r3
 8003ff6:	f000 f913 	bl	8004220 <__malloc_lock>
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <_free_r+0x94>)
 8003ffc:	9801      	ldr	r0, [sp, #4]
 8003ffe:	6813      	ldr	r3, [r2, #0]
 8004000:	b933      	cbnz	r3, 8004010 <_free_r+0x30>
 8004002:	6063      	str	r3, [r4, #4]
 8004004:	6014      	str	r4, [r2, #0]
 8004006:	b003      	add	sp, #12
 8004008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800400c:	f000 b90e 	b.w	800422c <__malloc_unlock>
 8004010:	42a3      	cmp	r3, r4
 8004012:	d908      	bls.n	8004026 <_free_r+0x46>
 8004014:	6825      	ldr	r5, [r4, #0]
 8004016:	1961      	adds	r1, r4, r5
 8004018:	428b      	cmp	r3, r1
 800401a:	bf01      	itttt	eq
 800401c:	6819      	ldreq	r1, [r3, #0]
 800401e:	685b      	ldreq	r3, [r3, #4]
 8004020:	1949      	addeq	r1, r1, r5
 8004022:	6021      	streq	r1, [r4, #0]
 8004024:	e7ed      	b.n	8004002 <_free_r+0x22>
 8004026:	461a      	mov	r2, r3
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	b10b      	cbz	r3, 8004030 <_free_r+0x50>
 800402c:	42a3      	cmp	r3, r4
 800402e:	d9fa      	bls.n	8004026 <_free_r+0x46>
 8004030:	6811      	ldr	r1, [r2, #0]
 8004032:	1855      	adds	r5, r2, r1
 8004034:	42a5      	cmp	r5, r4
 8004036:	d10b      	bne.n	8004050 <_free_r+0x70>
 8004038:	6824      	ldr	r4, [r4, #0]
 800403a:	4421      	add	r1, r4
 800403c:	1854      	adds	r4, r2, r1
 800403e:	42a3      	cmp	r3, r4
 8004040:	6011      	str	r1, [r2, #0]
 8004042:	d1e0      	bne.n	8004006 <_free_r+0x26>
 8004044:	681c      	ldr	r4, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	6053      	str	r3, [r2, #4]
 800404a:	4421      	add	r1, r4
 800404c:	6011      	str	r1, [r2, #0]
 800404e:	e7da      	b.n	8004006 <_free_r+0x26>
 8004050:	d902      	bls.n	8004058 <_free_r+0x78>
 8004052:	230c      	movs	r3, #12
 8004054:	6003      	str	r3, [r0, #0]
 8004056:	e7d6      	b.n	8004006 <_free_r+0x26>
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	1961      	adds	r1, r4, r5
 800405c:	428b      	cmp	r3, r1
 800405e:	bf04      	itt	eq
 8004060:	6819      	ldreq	r1, [r3, #0]
 8004062:	685b      	ldreq	r3, [r3, #4]
 8004064:	6063      	str	r3, [r4, #4]
 8004066:	bf04      	itt	eq
 8004068:	1949      	addeq	r1, r1, r5
 800406a:	6021      	streq	r1, [r4, #0]
 800406c:	6054      	str	r4, [r2, #4]
 800406e:	e7ca      	b.n	8004006 <_free_r+0x26>
 8004070:	b003      	add	sp, #12
 8004072:	bd30      	pop	{r4, r5, pc}
 8004074:	2000027c 	.word	0x2000027c

08004078 <sbrk_aligned>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	4e0e      	ldr	r6, [pc, #56]	; (80040b4 <sbrk_aligned+0x3c>)
 800407c:	460c      	mov	r4, r1
 800407e:	6831      	ldr	r1, [r6, #0]
 8004080:	4605      	mov	r5, r0
 8004082:	b911      	cbnz	r1, 800408a <sbrk_aligned+0x12>
 8004084:	f000 f8bc 	bl	8004200 <_sbrk_r>
 8004088:	6030      	str	r0, [r6, #0]
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 f8b7 	bl	8004200 <_sbrk_r>
 8004092:	1c43      	adds	r3, r0, #1
 8004094:	d00a      	beq.n	80040ac <sbrk_aligned+0x34>
 8004096:	1cc4      	adds	r4, r0, #3
 8004098:	f024 0403 	bic.w	r4, r4, #3
 800409c:	42a0      	cmp	r0, r4
 800409e:	d007      	beq.n	80040b0 <sbrk_aligned+0x38>
 80040a0:	1a21      	subs	r1, r4, r0
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 f8ac 	bl	8004200 <_sbrk_r>
 80040a8:	3001      	adds	r0, #1
 80040aa:	d101      	bne.n	80040b0 <sbrk_aligned+0x38>
 80040ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80040b0:	4620      	mov	r0, r4
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	20000280 	.word	0x20000280

080040b8 <_malloc_r>:
 80040b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040bc:	1ccd      	adds	r5, r1, #3
 80040be:	f025 0503 	bic.w	r5, r5, #3
 80040c2:	3508      	adds	r5, #8
 80040c4:	2d0c      	cmp	r5, #12
 80040c6:	bf38      	it	cc
 80040c8:	250c      	movcc	r5, #12
 80040ca:	2d00      	cmp	r5, #0
 80040cc:	4607      	mov	r7, r0
 80040ce:	db01      	blt.n	80040d4 <_malloc_r+0x1c>
 80040d0:	42a9      	cmp	r1, r5
 80040d2:	d905      	bls.n	80040e0 <_malloc_r+0x28>
 80040d4:	230c      	movs	r3, #12
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	2600      	movs	r6, #0
 80040da:	4630      	mov	r0, r6
 80040dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e0:	4e2e      	ldr	r6, [pc, #184]	; (800419c <_malloc_r+0xe4>)
 80040e2:	f000 f89d 	bl	8004220 <__malloc_lock>
 80040e6:	6833      	ldr	r3, [r6, #0]
 80040e8:	461c      	mov	r4, r3
 80040ea:	bb34      	cbnz	r4, 800413a <_malloc_r+0x82>
 80040ec:	4629      	mov	r1, r5
 80040ee:	4638      	mov	r0, r7
 80040f0:	f7ff ffc2 	bl	8004078 <sbrk_aligned>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	4604      	mov	r4, r0
 80040f8:	d14d      	bne.n	8004196 <_malloc_r+0xde>
 80040fa:	6834      	ldr	r4, [r6, #0]
 80040fc:	4626      	mov	r6, r4
 80040fe:	2e00      	cmp	r6, #0
 8004100:	d140      	bne.n	8004184 <_malloc_r+0xcc>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	4631      	mov	r1, r6
 8004106:	4638      	mov	r0, r7
 8004108:	eb04 0803 	add.w	r8, r4, r3
 800410c:	f000 f878 	bl	8004200 <_sbrk_r>
 8004110:	4580      	cmp	r8, r0
 8004112:	d13a      	bne.n	800418a <_malloc_r+0xd2>
 8004114:	6821      	ldr	r1, [r4, #0]
 8004116:	3503      	adds	r5, #3
 8004118:	1a6d      	subs	r5, r5, r1
 800411a:	f025 0503 	bic.w	r5, r5, #3
 800411e:	3508      	adds	r5, #8
 8004120:	2d0c      	cmp	r5, #12
 8004122:	bf38      	it	cc
 8004124:	250c      	movcc	r5, #12
 8004126:	4629      	mov	r1, r5
 8004128:	4638      	mov	r0, r7
 800412a:	f7ff ffa5 	bl	8004078 <sbrk_aligned>
 800412e:	3001      	adds	r0, #1
 8004130:	d02b      	beq.n	800418a <_malloc_r+0xd2>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	442b      	add	r3, r5
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	e00e      	b.n	8004158 <_malloc_r+0xa0>
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	1b52      	subs	r2, r2, r5
 800413e:	d41e      	bmi.n	800417e <_malloc_r+0xc6>
 8004140:	2a0b      	cmp	r2, #11
 8004142:	d916      	bls.n	8004172 <_malloc_r+0xba>
 8004144:	1961      	adds	r1, r4, r5
 8004146:	42a3      	cmp	r3, r4
 8004148:	6025      	str	r5, [r4, #0]
 800414a:	bf18      	it	ne
 800414c:	6059      	strne	r1, [r3, #4]
 800414e:	6863      	ldr	r3, [r4, #4]
 8004150:	bf08      	it	eq
 8004152:	6031      	streq	r1, [r6, #0]
 8004154:	5162      	str	r2, [r4, r5]
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	4638      	mov	r0, r7
 800415a:	f104 060b 	add.w	r6, r4, #11
 800415e:	f000 f865 	bl	800422c <__malloc_unlock>
 8004162:	f026 0607 	bic.w	r6, r6, #7
 8004166:	1d23      	adds	r3, r4, #4
 8004168:	1af2      	subs	r2, r6, r3
 800416a:	d0b6      	beq.n	80040da <_malloc_r+0x22>
 800416c:	1b9b      	subs	r3, r3, r6
 800416e:	50a3      	str	r3, [r4, r2]
 8004170:	e7b3      	b.n	80040da <_malloc_r+0x22>
 8004172:	6862      	ldr	r2, [r4, #4]
 8004174:	42a3      	cmp	r3, r4
 8004176:	bf0c      	ite	eq
 8004178:	6032      	streq	r2, [r6, #0]
 800417a:	605a      	strne	r2, [r3, #4]
 800417c:	e7ec      	b.n	8004158 <_malloc_r+0xa0>
 800417e:	4623      	mov	r3, r4
 8004180:	6864      	ldr	r4, [r4, #4]
 8004182:	e7b2      	b.n	80040ea <_malloc_r+0x32>
 8004184:	4634      	mov	r4, r6
 8004186:	6876      	ldr	r6, [r6, #4]
 8004188:	e7b9      	b.n	80040fe <_malloc_r+0x46>
 800418a:	230c      	movs	r3, #12
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4638      	mov	r0, r7
 8004190:	f000 f84c 	bl	800422c <__malloc_unlock>
 8004194:	e7a1      	b.n	80040da <_malloc_r+0x22>
 8004196:	6025      	str	r5, [r4, #0]
 8004198:	e7de      	b.n	8004158 <_malloc_r+0xa0>
 800419a:	bf00      	nop
 800419c:	2000027c 	.word	0x2000027c

080041a0 <_realloc_r>:
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	4680      	mov	r8, r0
 80041a6:	4614      	mov	r4, r2
 80041a8:	460e      	mov	r6, r1
 80041aa:	b921      	cbnz	r1, 80041b6 <_realloc_r+0x16>
 80041ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b0:	4611      	mov	r1, r2
 80041b2:	f7ff bf81 	b.w	80040b8 <_malloc_r>
 80041b6:	b92a      	cbnz	r2, 80041c4 <_realloc_r+0x24>
 80041b8:	f7ff ff12 	bl	8003fe0 <_free_r>
 80041bc:	4625      	mov	r5, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c4:	f000 f838 	bl	8004238 <_malloc_usable_size_r>
 80041c8:	4284      	cmp	r4, r0
 80041ca:	4607      	mov	r7, r0
 80041cc:	d802      	bhi.n	80041d4 <_realloc_r+0x34>
 80041ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041d2:	d812      	bhi.n	80041fa <_realloc_r+0x5a>
 80041d4:	4621      	mov	r1, r4
 80041d6:	4640      	mov	r0, r8
 80041d8:	f7ff ff6e 	bl	80040b8 <_malloc_r>
 80041dc:	4605      	mov	r5, r0
 80041de:	2800      	cmp	r0, #0
 80041e0:	d0ed      	beq.n	80041be <_realloc_r+0x1e>
 80041e2:	42bc      	cmp	r4, r7
 80041e4:	4622      	mov	r2, r4
 80041e6:	4631      	mov	r1, r6
 80041e8:	bf28      	it	cs
 80041ea:	463a      	movcs	r2, r7
 80041ec:	f7ff fed0 	bl	8003f90 <memcpy>
 80041f0:	4631      	mov	r1, r6
 80041f2:	4640      	mov	r0, r8
 80041f4:	f7ff fef4 	bl	8003fe0 <_free_r>
 80041f8:	e7e1      	b.n	80041be <_realloc_r+0x1e>
 80041fa:	4635      	mov	r5, r6
 80041fc:	e7df      	b.n	80041be <_realloc_r+0x1e>
	...

08004200 <_sbrk_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4d06      	ldr	r5, [pc, #24]	; (800421c <_sbrk_r+0x1c>)
 8004204:	2300      	movs	r3, #0
 8004206:	4604      	mov	r4, r0
 8004208:	4608      	mov	r0, r1
 800420a:	602b      	str	r3, [r5, #0]
 800420c:	f7fd f93e 	bl	800148c <_sbrk>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_sbrk_r+0x1a>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_sbrk_r+0x1a>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	20000284 	.word	0x20000284

08004220 <__malloc_lock>:
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <__malloc_lock+0x8>)
 8004222:	f000 b811 	b.w	8004248 <__retarget_lock_acquire_recursive>
 8004226:	bf00      	nop
 8004228:	20000288 	.word	0x20000288

0800422c <__malloc_unlock>:
 800422c:	4801      	ldr	r0, [pc, #4]	; (8004234 <__malloc_unlock+0x8>)
 800422e:	f000 b80c 	b.w	800424a <__retarget_lock_release_recursive>
 8004232:	bf00      	nop
 8004234:	20000288 	.word	0x20000288

08004238 <_malloc_usable_size_r>:
 8004238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800423c:	1f18      	subs	r0, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfbc      	itt	lt
 8004242:	580b      	ldrlt	r3, [r1, r0]
 8004244:	18c0      	addlt	r0, r0, r3
 8004246:	4770      	bx	lr

08004248 <__retarget_lock_acquire_recursive>:
 8004248:	4770      	bx	lr

0800424a <__retarget_lock_release_recursive>:
 800424a:	4770      	bx	lr

0800424c <_init>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr

08004258 <_fini>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	bf00      	nop
 800425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425e:	bc08      	pop	{r3}
 8004260:	469e      	mov	lr, r3
 8004262:	4770      	bx	lr
