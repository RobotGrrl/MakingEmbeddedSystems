
testing23_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112e4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fd8  08011490  08011490  00021490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013468  08013468  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  08013468  08013468  00023468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013470  08013470  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013470  08013470  00023470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013474  08013474  00023474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08013478  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002454  2000025c  080136d4  0003025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026b0  080136d4  000326b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035472  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072cd  00000000  00000000  000656fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c40  00000000  00000000  0006c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002940  00000000  00000000  0006f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037910  00000000  00000000  00071f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000382ca  00000000  00000000  000a9860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013622b  00000000  00000000  000e1b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00217d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9f8  00000000  00000000  00217da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000025c 	.word	0x2000025c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08011478 	.word	0x08011478

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000260 	.word	0x20000260
 80001e8:	08011478 	.word	0x08011478

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
 8000510:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000512:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000514:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <MX_ADC1_Init+0xe4>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000518:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <MX_ADC1_Init+0xe0>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_ADC1_Init+0xe0>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000532:	2204      	movs	r2, #4
 8000534:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000538:	2200      	movs	r2, #0
 800053a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xe0>)
 800053e:	2200      	movs	r2, #0
 8000540:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000542:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000544:	2201      	movs	r2, #1
 8000546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <MX_ADC1_Init+0xe0>)
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000552:	2200      	movs	r2, #0
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000558:	2200      	movs	r2, #0
 800055a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_ADC1_Init+0xe0>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000566:	2200      	movs	r2, #0
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_ADC1_Init+0xe0>)
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000572:	4817      	ldr	r0, [pc, #92]	; (80005d0 <MX_ADC1_Init+0xe0>)
 8000574:	f004 fe2a 	bl	80051cc <HAL_ADC_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800057e:	f001 f8ff 	bl	8001780 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	4619      	mov	r1, r3
 800058c:	4810      	ldr	r0, [pc, #64]	; (80005d0 <MX_ADC1_Init+0xe0>)
 800058e:	f005 fba9 	bl	8005ce4 <HAL_ADCEx_MultiModeConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000598:	f001 f8f2 	bl	8001780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_ADC1_Init+0xe8>)
 800059e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a0:	2306      	movs	r3, #6
 80005a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a8:	237f      	movs	r3, #127	; 0x7f
 80005aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ac:	2304      	movs	r3, #4
 80005ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_ADC1_Init+0xe0>)
 80005ba:	f004 ff61 	bl	8005480 <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80005c4:	f001 f8dc 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000278 	.word	0x20000278
 80005d4:	50040000 	.word	0x50040000
 80005d8:	10c00010 	.word	0x10c00010

080005dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <MX_ADC2_Init+0xbc>)
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <MX_ADC2_Init+0xc0>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_ADC2_Init+0xbc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_ADC2_Init+0xbc>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000612:	2204      	movs	r2, #4
 8000614:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_ADC2_Init+0xbc>)
 800061e:	2200      	movs	r2, #0
 8000620:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000624:	2201      	movs	r2, #1
 8000626:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_ADC2_Init+0xbc>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_ADC2_Init+0xbc>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000646:	2200      	movs	r2, #0
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_ADC2_Init+0xbc>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000652:	4811      	ldr	r0, [pc, #68]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000654:	f004 fdba 	bl	80051cc <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800065e:	f001 f88f 	bl	8001780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_ADC2_Init+0xc4>)
 8000664:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2306      	movs	r3, #6
 8000668:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066e:	237f      	movs	r3, #127	; 0x7f
 8000670:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000672:	2304      	movs	r3, #4
 8000674:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <MX_ADC2_Init+0xbc>)
 8000680:	f004 fefe 	bl	8005480 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800068a:	f001 f879 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200002e0 	.word	0x200002e0
 800069c:	50040100 	.word	0x50040100
 80006a0:	25b00200 	.word	0x25b00200

080006a4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006bc:	4a29      	ldr	r2, [pc, #164]	; (8000764 <MX_ADC3_Init+0xc0>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006da:	2204      	movs	r2, #4
 80006dc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_ADC3_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_ADC3_Init+0xbc>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_ADC3_Init+0xbc>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_ADC3_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_ADC3_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800071a:	4811      	ldr	r0, [pc, #68]	; (8000760 <MX_ADC3_Init+0xbc>)
 800071c:	f004 fd56 	bl	80051cc <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000726:	f001 f82b 	bl	8001780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC3_Init+0xc4>)
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072e:	2306      	movs	r3, #6
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000736:	237f      	movs	r3, #127	; 0x7f
 8000738:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073a:	2304      	movs	r3, #4
 800073c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_ADC3_Init+0xbc>)
 8000748:	f004 fe9a 	bl	8005480 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000752:	f001 f815 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000348 	.word	0x20000348
 8000764:	50040200 	.word	0x50040200
 8000768:	36902000 	.word	0x36902000

0800076c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	; 0x38
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a59      	ldr	r2, [pc, #356]	; (80008f0 <HAL_ADC_MspInit+0x184>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d12d      	bne.n	80007ea <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800078e:	4b59      	ldr	r3, [pc, #356]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a57      	ldr	r2, [pc, #348]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 8000796:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000798:	4b56      	ldr	r3, [pc, #344]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d10b      	bne.n	80007b8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a4:	4a54      	ldr	r2, [pc, #336]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80007a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ac:	4b52      	ldr	r3, [pc, #328]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b4:	623b      	str	r3, [r7, #32]
 80007b6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b8:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c4:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 80007d0:	2318      	movs	r3, #24
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007d4:	230b      	movs	r3, #11
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e0:	4619      	mov	r1, r3
 80007e2:	4846      	ldr	r0, [pc, #280]	; (80008fc <HAL_ADC_MspInit+0x190>)
 80007e4:	f005 fe04 	bl	80063f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007e8:	e07e      	b.n	80008e8 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a44      	ldr	r2, [pc, #272]	; (8000900 <HAL_ADC_MspInit+0x194>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d146      	bne.n	8000882 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 80007f4:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a3e      	ldr	r2, [pc, #248]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 80007fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80007fe:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d10b      	bne.n	800081e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000806:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a3b      	ldr	r2, [pc, #236]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 800080c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a35      	ldr	r2, [pc, #212]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800084e:	2303      	movs	r3, #3
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000852:	230b      	movs	r3, #11
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4826      	ldr	r0, [pc, #152]	; (80008fc <HAL_ADC_MspInit+0x190>)
 8000862:	f005 fdc5 	bl	80063f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8000866:	2312      	movs	r3, #18
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800086a:	230b      	movs	r3, #11
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f005 fdb8 	bl	80063f0 <HAL_GPIO_Init>
}
 8000880:	e032      	b.n	80008e8 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <HAL_ADC_MspInit+0x198>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d12d      	bne.n	80008e8 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 8000894:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_ADC_MspInit+0x188>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10b      	bne.n	80008b6 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80008a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80008bc:	f043 0320 	orr.w	r3, r3, #32
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_ADC_MspInit+0x18c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0320 	and.w	r3, r3, #32
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008d4:	230b      	movs	r3, #11
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <HAL_ADC_MspInit+0x19c>)
 80008e4:	f005 fd84 	bl	80063f0 <HAL_GPIO_Init>
}
 80008e8:	bf00      	nop
 80008ea:	3738      	adds	r7, #56	; 0x38
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	50040000 	.word	0x50040000
 80008f4:	200003b0 	.word	0x200003b0
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000800 	.word	0x48000800
 8000900:	50040100 	.word	0x50040100
 8000904:	50040200 	.word	0x50040200
 8000908:	48001400 	.word	0x48001400

0800090c <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_DCMI_Init+0x60>)
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <MX_DCMI_Init+0x64>)
 8000914:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_DCMI_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_DCMI_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_DCMI_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_DCMI_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_DCMI_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_DCMI_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_DCMI_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_DCMI_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_DCMI_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_DCMI_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_DCMI_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_DCMI_Init+0x60>)
 800095a:	f005 fbb7 	bl	80060cc <HAL_DCMI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 ff0c 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200003b4 	.word	0x200003b4
 8000970:	50050000 	.word	0x50050000

08000974 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <HAL_DCMI_MspInit+0xec>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d160      	bne.n	8000a58 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a32      	ldr	r2, [pc, #200]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a2c      	ldr	r2, [pc, #176]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a26      	ldr	r2, [pc, #152]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <HAL_DCMI_MspInit+0xf0>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80009f6:	f645 7320 	movw	r3, #24352	; 0x5f20
 80009fa:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4815      	ldr	r0, [pc, #84]	; (8000a68 <HAL_DCMI_MspInit+0xf4>)
 8000a14:	f005 fcec 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000a18:	23b0      	movs	r3, #176	; 0xb0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <HAL_DCMI_MspInit+0xf8>)
 8000a34:	f005 fcdc 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000a48:	230a      	movs	r3, #10
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <HAL_DCMI_MspInit+0xfc>)
 8000a54:	f005 fccc 	bl	80063f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	50050000 	.word	0x50050000
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48001c00 	.word	0x48001c00
 8000a6c:	48002000 	.word	0x48002000
 8000a70:	48001000 	.word	0x48001000

08000a74 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000a7a:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <MX_DFSDM1_Init+0xcc>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ac6:	481d      	ldr	r0, [pc, #116]	; (8000b3c <MX_DFSDM1_Init+0xc8>)
 8000ac8:	f005 fb86 	bl	80061d8 <HAL_DFSDM_ChannelInit>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000ad2:	f000 fe55 	bl	8001780 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <MX_DFSDM1_Init+0xd4>)
 8000ada:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b00:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_DFSDM1_Init+0xd0>)
 8000b28:	f005 fb56 	bl	80061d8 <HAL_DFSDM_ChannelInit>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000b32:	f000 fe25 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000418 	.word	0x20000418
 8000b40:	40016020 	.word	0x40016020
 8000b44:	20000450 	.word	0x20000450
 8000b48:	40016040 	.word	0x40016040

08000b4c <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0ae      	sub	sp, #184	; 0xb8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	228c      	movs	r2, #140	; 0x8c
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f010 fc7b 	bl	8011468 <memset>
  if(DFSDM1_Init == 0)
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0x100>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d163      	bne.n	8000c42 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b86:	f107 0318 	add.w	r3, r7, #24
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f008 fff2 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000b96:	f000 fdf3 	bl	8001780 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8000be2:	2384      	movs	r3, #132	; 0x84
 8000be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000c08:	f005 fbf2 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c26:	2306      	movs	r3, #6
 8000c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c30:	4619      	mov	r1, r3
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000c34:	f005 fbdc 	bl	80063f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0x100>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0x100>)
 8000c40:	6013      	str	r3, [r2, #0]
  }
}
 8000c42:	bf00      	nop
 8000c44:	37b8      	adds	r7, #184	; 0xb8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000488 	.word	0x20000488
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48000400 	.word	0x48000400

08000c5c <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2220      	movs	r2, #32
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f010 fbfd 	bl	8011468 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000c6e:	4b4f      	ldr	r3, [pc, #316]	; (8000dac <MX_FMC_Init+0x150>)
 8000c70:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c74:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000c76:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <MX_FMC_Init+0x150>)
 8000c78:	4a4d      	ldr	r2, [pc, #308]	; (8000db0 <MX_FMC_Init+0x154>)
 8000c7a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000c7c:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <MX_FMC_Init+0x150>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000c82:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <MX_FMC_Init+0x150>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000c88:	4b48      	ldr	r3, [pc, #288]	; (8000dac <MX_FMC_Init+0x150>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c8e:	4b47      	ldr	r3, [pc, #284]	; (8000dac <MX_FMC_Init+0x150>)
 8000c90:	2210      	movs	r2, #16
 8000c92:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000c94:	4b45      	ldr	r3, [pc, #276]	; (8000dac <MX_FMC_Init+0x150>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c9a:	4b44      	ldr	r3, [pc, #272]	; (8000dac <MX_FMC_Init+0x150>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ca0:	4b42      	ldr	r3, [pc, #264]	; (8000dac <MX_FMC_Init+0x150>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000ca6:	4b41      	ldr	r3, [pc, #260]	; (8000dac <MX_FMC_Init+0x150>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000cac:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <MX_FMC_Init+0x150>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000cb2:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <MX_FMC_Init+0x150>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <MX_FMC_Init+0x150>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <MX_FMC_Init+0x150>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000cc4:	4b39      	ldr	r3, [pc, #228]	; (8000dac <MX_FMC_Init+0x150>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000cca:	4b38      	ldr	r3, [pc, #224]	; (8000dac <MX_FMC_Init+0x150>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000cd0:	4b36      	ldr	r3, [pc, #216]	; (8000dac <MX_FMC_Init+0x150>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000cda:	230f      	movs	r3, #15
 8000cdc:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000cde:	23ff      	movs	r3, #255	; 0xff
 8000ce0:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000cea:	2311      	movs	r3, #17
 8000cec:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	482c      	ldr	r0, [pc, #176]	; (8000dac <MX_FMC_Init+0x150>)
 8000cfa:	f00b fb10 	bl	800c31e <HAL_SRAM_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8000d04:	f000 fd3c 	bl	8001780 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d0a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d0e:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d12:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <MX_FMC_Init+0x154>)
 8000d14:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8000d16:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d2a:	2210      	movs	r2, #16
 8000d2c:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d72:	230f      	movs	r3, #15
 8000d74:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000d76:	230f      	movs	r3, #15
 8000d78:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000d7a:	23ff      	movs	r3, #255	; 0xff
 8000d7c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d82:	2310      	movs	r3, #16
 8000d84:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d86:	2311      	movs	r3, #17
 8000d88:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <MX_FMC_Init+0x158>)
 8000d96:	f00b fac2 	bl	800c31e <HAL_SRAM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8000da0:	f000 fcee 	bl	8001780 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000048c 	.word	0x2000048c
 8000db0:	a0000104 	.word	0xa0000104
 8000db4:	200004dc 	.word	0x200004dc

08000db8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <HAL_FMC_MspInit+0xc4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14f      	bne.n	8000e74 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_FMC_MspInit+0xc4>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <HAL_FMC_MspInit+0xc8>)
 8000ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <HAL_FMC_MspInit+0xc8>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6513      	str	r3, [r2, #80]	; 0x50
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <HAL_FMC_MspInit+0xc8>)
 8000de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000df2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000df6:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e04:	230c      	movs	r3, #12
 8000e06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481d      	ldr	r0, [pc, #116]	; (8000e84 <HAL_FMC_MspInit+0xcc>)
 8000e0e:	f005 faef 	bl	80063f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000e12:	f240 233f 	movw	r3, #575	; 0x23f
 8000e16:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e24:	230c      	movs	r3, #12
 8000e26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4816      	ldr	r0, [pc, #88]	; (8000e88 <HAL_FMC_MspInit+0xd0>)
 8000e2e:	f005 fadf 	bl	80063f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000e32:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000e36:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e44:	230c      	movs	r3, #12
 8000e46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480f      	ldr	r0, [pc, #60]	; (8000e8c <HAL_FMC_MspInit+0xd4>)
 8000e4e:	f005 facf 	bl	80063f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000e52:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000e56:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e64:	230c      	movs	r3, #12
 8000e66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <HAL_FMC_MspInit+0xd8>)
 8000e6e:	f005 fabf 	bl	80063f0 <HAL_GPIO_Init>
 8000e72:	e000      	b.n	8000e76 <HAL_FMC_MspInit+0xbe>
    return;
 8000e74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000052c 	.word	0x2000052c
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48001000 	.word	0x48001000
 8000e88:	48001800 	.word	0x48001800
 8000e8c:	48000c00 	.word	0x48000c00
 8000e90:	48001400 	.word	0x48001400

08000e94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e9c:	f7ff ff8c 	bl	8000db8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ebe:	4bb3      	ldr	r3, [pc, #716]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4ab2      	ldr	r2, [pc, #712]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4bb0      	ldr	r3, [pc, #704]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed2:	623b      	str	r3, [r7, #32]
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	4bad      	ldr	r3, [pc, #692]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4aac      	ldr	r2, [pc, #688]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4baa      	ldr	r3, [pc, #680]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4ba7      	ldr	r3, [pc, #668]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4aa6      	ldr	r2, [pc, #664]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4ba4      	ldr	r3, [pc, #656]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4ba1      	ldr	r3, [pc, #644]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4aa0      	ldr	r2, [pc, #640]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b9e      	ldr	r3, [pc, #632]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b9b      	ldr	r3, [pc, #620]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a9a      	ldr	r2, [pc, #616]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b98      	ldr	r3, [pc, #608]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f36:	4b95      	ldr	r3, [pc, #596]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a94      	ldr	r2, [pc, #592]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b92      	ldr	r3, [pc, #584]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000f4e:	f007 feb9 	bl	8008cc4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	4b8e      	ldr	r3, [pc, #568]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a8d      	ldr	r2, [pc, #564]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b8b      	ldr	r3, [pc, #556]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	4b88      	ldr	r3, [pc, #544]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a87      	ldr	r2, [pc, #540]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b85      	ldr	r3, [pc, #532]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f82:	4b82      	ldr	r3, [pc, #520]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a81      	ldr	r2, [pc, #516]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b7f      	ldr	r3, [pc, #508]	; (800118c <MX_GPIO_Init+0x2e4>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0320 	and.w	r3, r3, #32
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	487c      	ldr	r0, [pc, #496]	; (8001190 <MX_GPIO_Init+0x2e8>)
 8000fa0:	f005 fcaa 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2143      	movs	r1, #67	; 0x43
 8000fa8:	487a      	ldr	r0, [pc, #488]	; (8001194 <MX_GPIO_Init+0x2ec>)
 8000faa:	f005 fca5 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2140      	movs	r1, #64	; 0x40
 8000fb2:	4879      	ldr	r0, [pc, #484]	; (8001198 <MX_GPIO_Init+0x2f0>)
 8000fb4:	f005 fca0 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbe:	4877      	ldr	r0, [pc, #476]	; (800119c <MX_GPIO_Init+0x2f4>)
 8000fc0:	f005 fc9a 	bl	80068f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	486d      	ldr	r0, [pc, #436]	; (8001190 <MX_GPIO_Init+0x2e8>)
 8000fdc:	f005 fa08 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4867      	ldr	r0, [pc, #412]	; (8001194 <MX_GPIO_Init+0x2ec>)
 8000ff6:	f005 f9fb 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	485f      	ldr	r0, [pc, #380]	; (8001190 <MX_GPIO_Init+0x2e8>)
 8001012:	f005 f9ed 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin|JOY_UP_Pin;
 8001016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001020:	2302      	movs	r3, #2
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4859      	ldr	r0, [pc, #356]	; (8001190 <MX_GPIO_Init+0x2e8>)
 800102c:	f005 f9e0 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001040:	2303      	movs	r3, #3
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4851      	ldr	r0, [pc, #324]	; (8001190 <MX_GPIO_Init+0x2e8>)
 800104c:	f005 f9d0 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001050:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001062:	2303      	movs	r3, #3
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4849      	ldr	r0, [pc, #292]	; (8001194 <MX_GPIO_Init+0x2ec>)
 800106e:	f005 f9bf 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001084:	2302      	movs	r3, #2
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	4843      	ldr	r0, [pc, #268]	; (800119c <MX_GPIO_Init+0x2f4>)
 8001090:	f005 f9ae 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	483b      	ldr	r0, [pc, #236]	; (8001194 <MX_GPIO_Init+0x2ec>)
 80010a8:	f005 f9a2 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80010ac:	2343      	movs	r3, #67	; 0x43
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4834      	ldr	r0, [pc, #208]	; (8001194 <MX_GPIO_Init+0x2ec>)
 80010c4:	f005 f994 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80010c8:	2340      	movs	r3, #64	; 0x40
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	482e      	ldr	r0, [pc, #184]	; (8001198 <MX_GPIO_Init+0x2f0>)
 80010e0:	f005 f986 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80010e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4829      	ldr	r0, [pc, #164]	; (80011a0 <MX_GPIO_Init+0x2f8>)
 80010fc:	f005 f978 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001112:	230e      	movs	r3, #14
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f005 f966 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001124:	2320      	movs	r3, #32
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001128:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	4817      	ldr	r0, [pc, #92]	; (8001198 <MX_GPIO_Init+0x2f0>)
 800113a:	f005 f959 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800113e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001144:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114a:	2302      	movs	r3, #2
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_GPIO_Init+0x2fc>)
 8001156:	f005 f94b 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 800115a:	2304      	movs	r3, #4
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <MX_GPIO_Init+0x2f4>)
 800116e:	f005 f93f 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001178:	2311      	movs	r3, #17
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	e00d      	b.n	80011a8 <MX_GPIO_Init+0x300>
 800118c:	40021000 	.word	0x40021000
 8001190:	48002000 	.word	0x48002000
 8001194:	48001c00 	.word	0x48001c00
 8001198:	48000800 	.word	0x48000800
 800119c:	48000400 	.word	0x48000400
 80011a0:	48001800 	.word	0x48001800
 80011a4:	48001400 	.word	0x48001400
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <MX_GPIO_Init+0x320>)
 80011aa:	f005 f921 	bl	80063f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2028      	movs	r0, #40	; 0x28
 80011b4:	f004 ff45 	bl	8006042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b8:	2028      	movs	r0, #40	; 0x28
 80011ba:	f004 ff5e 	bl	800607a <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3738      	adds	r7, #56	; 0x38
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	48000400 	.word	0x48000400

080011cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C1_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_I2C1_Init+0x7c>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_I2C1_Init+0x74>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_I2C1_Init+0x74>)
 8001208:	f005 fba6 	bl	8006958 <HAL_I2C_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001212:	f000 fab5 	bl	8001780 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C1_Init+0x74>)
 800121a:	f006 fa45 	bl	80076a8 <HAL_I2CEx_ConfigAnalogFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001224:	f000 faac 	bl	8001780 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2C1_Init+0x74>)
 800122c:	f006 fa87 	bl	800773e <HAL_I2CEx_ConfigDigitalFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001236:	f000 faa3 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000530 	.word	0x20000530
 8001244:	40005400 	.word	0x40005400
 8001248:	20303e5d 	.word	0x20303e5d

0800124c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_I2C2_Init+0x74>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <MX_I2C2_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_I2C2_Init+0x74>)
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <MX_I2C2_Init+0x7c>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_I2C2_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_I2C2_Init+0x74>)
 8001264:	2201      	movs	r2, #1
 8001266:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_I2C2_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_I2C2_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C2_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C2_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C2_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <MX_I2C2_Init+0x74>)
 8001288:	f005 fb66 	bl	8006958 <HAL_I2C_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001292:	f000 fa75 	bl	8001780 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <MX_I2C2_Init+0x74>)
 800129a:	f006 fa05 	bl	80076a8 <HAL_I2CEx_ConfigAnalogFilter>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012a4:	f000 fa6c 	bl	8001780 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_I2C2_Init+0x74>)
 80012ac:	f006 fa47 	bl	800773e <HAL_I2CEx_ConfigDigitalFilter>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012b6:	f000 fa63 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000584 	.word	0x20000584
 80012c4:	40005800 	.word	0x40005800
 80012c8:	20303e5d 	.word	0x20303e5d

080012cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b0      	sub	sp, #192	; 0xc0
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	228c      	movs	r2, #140	; 0x8c
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f010 f8bb 	bl	8011468 <memset>
  if(i2cHandle->Instance==I2C1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a53      	ldr	r2, [pc, #332]	; (8001444 <HAL_I2C_MspInit+0x178>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d13c      	bne.n	8001376 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012fc:	2340      	movs	r3, #64	; 0x40
 80012fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f008 fc33 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f000 fa34 	bl	8001780 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a4a      	ldr	r2, [pc, #296]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b48      	ldr	r3, [pc, #288]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001330:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133e:	2301      	movs	r3, #1
 8001340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800134a:	2304      	movs	r3, #4
 800134c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001354:	4619      	mov	r1, r3
 8001356:	483d      	ldr	r0, [pc, #244]	; (800144c <HAL_I2C_MspInit+0x180>)
 8001358:	f005 f84a 	bl	80063f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135c:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	4a39      	ldr	r2, [pc, #228]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 8001362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001366:	6593      	str	r3, [r2, #88]	; 0x58
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001374:	e061      	b.n	800143a <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a35      	ldr	r2, [pc, #212]	; (8001450 <HAL_I2C_MspInit+0x184>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d15c      	bne.n	800143a <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001384:	2300      	movs	r3, #0
 8001386:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4618      	mov	r0, r3
 800138e:	f008 fbf1 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001398:	f000 f9f2 	bl	8001780 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a29      	ldr	r2, [pc, #164]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 80013a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	4a23      	ldr	r2, [pc, #140]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80013cc:	2310      	movs	r3, #16
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d2:	2312      	movs	r3, #18
 80013d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d8:	2301      	movs	r3, #1
 80013da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013e4:	2304      	movs	r3, #4
 80013e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013ee:	4619      	mov	r1, r3
 80013f0:	4818      	ldr	r0, [pc, #96]	; (8001454 <HAL_I2C_MspInit+0x188>)
 80013f2:	f004 fffd 	bl	80063f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80013f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fe:	2312      	movs	r3, #18
 8001400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001410:	2304      	movs	r3, #4
 8001412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800141a:	4619      	mov	r1, r3
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <HAL_I2C_MspInit+0x180>)
 800141e:	f004 ffe7 	bl	80063f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 8001428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800142c:	6593      	str	r3, [r2, #88]	; 0x58
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_I2C_MspInit+0x17c>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
}
 800143a:	bf00      	nop
 800143c:	37c0      	adds	r7, #192	; 0xc0
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40005400 	.word	0x40005400
 8001448:	40021000 	.word	0x40021000
 800144c:	48000400 	.word	0x48000400
 8001450:	40005800 	.word	0x40005800
 8001454:	48001c00 	.word	0x48001c00

08001458 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a15      	ldr	r2, [pc, #84]	; (80014bc <HAL_I2C_MspDeInit+0x64>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10f      	bne.n	800148a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_I2C_MspDeInit+0x68>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_I2C_MspDeInit+0x68>)
 8001470:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001474:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147a:	4812      	ldr	r0, [pc, #72]	; (80014c4 <HAL_I2C_MspDeInit+0x6c>)
 800147c:	f005 f94a 	bl	8006714 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <HAL_I2C_MspDeInit+0x6c>)
 8001484:	f005 f946 	bl	8006714 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001488:	e013      	b.n	80014b2 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_I2C_MspDeInit+0x70>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d10e      	bne.n	80014b2 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_I2C_MspDeInit+0x68>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_I2C_MspDeInit+0x68>)
 800149a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800149e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 80014a0:	2110      	movs	r1, #16
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <HAL_I2C_MspDeInit+0x74>)
 80014a4:	f005 f936 	bl	8006714 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 80014a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HAL_I2C_MspDeInit+0x6c>)
 80014ae:	f005 f931 	bl	8006714 <HAL_GPIO_DeInit>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40005400 	.word	0x40005400
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000400 	.word	0x48000400
 80014c8:	40005800 	.word	0x40005800
 80014cc:	48001c00 	.word	0x48001c00

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d4:	f003 fc22 	bl	8004d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d8:	f000 f88a 	bl	80015f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014dc:	f000 f8ea 	bl	80016b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e0:	f7ff fce2 	bl	8000ea8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80014e4:	f7ff f804 	bl	80004f0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80014e8:	f7ff f878 	bl	80005dc <MX_ADC2_Init>
  MX_ADC3_Init();
 80014ec:	f7ff f8da 	bl	80006a4 <MX_ADC3_Init>
  MX_DCMI_Init();
 80014f0:	f7ff fa0c 	bl	800090c <MX_DCMI_Init>
  MX_DFSDM1_Init();
 80014f4:	f7ff fabe 	bl	8000a74 <MX_DFSDM1_Init>
  MX_FMC_Init();
 80014f8:	f7ff fbb0 	bl	8000c5c <MX_FMC_Init>
  MX_I2C1_Init();
 80014fc:	f7ff fe66 	bl	80011cc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001500:	f7ff fea4 	bl	800124c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001504:	f000 fd2c 	bl	8001f60 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001508:	f000 fd58 	bl	8001fbc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800150c:	f000 fd86 	bl	800201c <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8001510:	f000 f93c 	bl	800178c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001514:	f000 f9c8 	bl	80018a8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001518:	f000 fae8 	bl	8001aec <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800151c:	f000 fb78 	bl	8001c10 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001520:	f000 fbb4 	bl	8001c8c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001524:	f00f f972 	bl	801080c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 8001528:	2001      	movs	r0, #1
 800152a:	f003 f8e1 	bl	80046f0 <BSP_LCD_InitEx>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <main+0x68>
	{
		/* Initialization Error */
		Error_Handler();
 8001534:	f000 f924 	bl	8001780 <Error_Handler>
	}

	// the lcd bsp includes the fontNN.c files in the Utilities directory
	// in that file, a struct is declared: FontNN
	BSP_LCD_SetFont(&Font24);
 8001538:	4827      	ldr	r0, [pc, #156]	; (80015d8 <main+0x108>)
 800153a:	f003 f9a7 	bl	800488c <BSP_LCD_SetFont>

	// the display is 240 px tall, XYZ px wide
	BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Beep", CENTER_MODE);
 800153e:	2301      	movs	r3, #1
 8001540:	4a26      	ldr	r2, [pc, #152]	; (80015dc <main+0x10c>)
 8001542:	21af      	movs	r1, #175	; 0xaf
 8001544:	2000      	movs	r0, #0
 8001546:	f003 fa11 	bl	800496c <BSP_LCD_DisplayStringAt>

	HAL_Delay(5000);
 800154a:	f241 3088 	movw	r0, #5000	; 0x1388
 800154e:	f003 fc59 	bl	8004e04 <HAL_Delay>

	// LED
	BSP_LED_Init(LED1_PIN);
 8001552:	2010      	movs	r0, #16
 8001554:	f002 fbbc 	bl	8003cd0 <BSP_LED_Init>
	BSP_LED_Init(LED2_PIN);
 8001558:	2000      	movs	r0, #0
 800155a:	f002 fbb9 	bl	8003cd0 <BSP_LED_Init>
	BSP_LED_Off( LED1_PIN ); // orange labeled LD1
 800155e:	2010      	movs	r0, #16
 8001560:	f002 fc26 	bl	8003db0 <BSP_LED_Off>
	BSP_LED_Off( LED2_PIN ); // doesn't work
 8001564:	2000      	movs	r0, #0
 8001566:	f002 fc23 	bl	8003db0 <BSP_LED_Off>


	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800156a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800156e:	f003 f99d 	bl	80048ac <BSP_LCD_Clear>
  {

  	// by changing the text, we can prove that it's resetting when pressing
  	// the reset button - because the display will say Beep instead of the
  	// other two possibilities
  	if(TimingDelay == 0) {
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <main+0x110>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1fb      	bne.n	8001572 <main+0xa2>
  		/* Toggle LED1 */
			if(led_on) {
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <main+0x114>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <main+0xce>
				BSP_LED_Off(LED1);
 8001582:	2000      	movs	r0, #0
 8001584:	f002 fc14 	bl	8003db0 <BSP_LED_Off>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001588:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800158c:	f003 f98e 	bl	80048ac <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Zweep", CENTER_MODE);
 8001590:	2301      	movs	r3, #1
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <main+0x118>)
 8001594:	21af      	movs	r1, #175	; 0xaf
 8001596:	2000      	movs	r0, #0
 8001598:	f003 f9e8 	bl	800496c <BSP_LCD_DisplayStringAt>
 800159c:	e00c      	b.n	80015b8 <main+0xe8>
			} else {
				BSP_LED_On(LED1);
 800159e:	2000      	movs	r0, #0
 80015a0:	f002 fbe4 	bl	8003d6c <BSP_LED_On>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 80015a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015a8:	f003 f980 	bl	80048ac <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Fleep", CENTER_MODE);
 80015ac:	2301      	movs	r3, #1
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <main+0x11c>)
 80015b0:	21af      	movs	r1, #175	; 0xaf
 80015b2:	2000      	movs	r0, #0
 80015b4:	f003 f9da 	bl	800496c <BSP_LCD_DisplayStringAt>
			}
			led_on = !led_on;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <main+0x114>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf14      	ite	ne
 80015c0:	2301      	movne	r3, #1
 80015c2:	2300      	moveq	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f083 0301 	eor.w	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <main+0x114>)
 80015d4:	701a      	strb	r2, [r3, #0]
  	if(TimingDelay == 0) {
 80015d6:	e7cc      	b.n	8001572 <main+0xa2>
 80015d8:	200000bc 	.word	0x200000bc
 80015dc:	08011490 	.word	0x08011490
 80015e0:	200005dc 	.word	0x200005dc
 80015e4:	200005d8 	.word	0x200005d8
 80015e8:	08011498 	.word	0x08011498
 80015ec:	080114a0 	.word	0x080114a0

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b096      	sub	sp, #88	; 0x58
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2244      	movs	r2, #68	; 0x44
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f00f ff32 	bl	8011468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001616:	f007 faef 	bl	8008bf8 <HAL_PWREx_ControlVoltageScaling>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001620:	f000 f8ae 	bl	8001780 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001624:	f007 fa96 	bl	8008b54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <SystemClock_Config+0xc0>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	4a20      	ldr	r2, [pc, #128]	; (80016b0 <SystemClock_Config+0xc0>)
 8001630:	f023 0318 	bic.w	r3, r3, #24
 8001634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001638:	2314      	movs	r3, #20
 800163a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164c:	2302      	movs	r3, #2
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001650:	2301      	movs	r3, #1
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001658:	2318      	movs	r3, #24
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001660:	2302      	movs	r3, #2
 8001662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001664:	2302      	movs	r3, #2
 8001666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4618      	mov	r0, r3
 800166e:	f007 fc43 	bl	8008ef8 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001678:	f000 f882 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167c:	230f      	movs	r3, #15
 800167e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	2303      	movs	r3, #3
 8001682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001690:	463b      	mov	r3, r7
 8001692:	2102      	movs	r1, #2
 8001694:	4618      	mov	r0, r3
 8001696:	f008 f849 	bl	800972c <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016a0:	f000 f86e 	bl	8001780 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016a4:	f009 fb1a 	bl	800acdc <HAL_RCCEx_EnableMSIPLLMode>
}
 80016a8:	bf00      	nop
 80016aa:	3758      	adds	r7, #88	; 0x58
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000

080016b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0a4      	sub	sp, #144	; 0x90
 80016b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	228c      	movs	r2, #140	; 0x8c
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00f fed1 	bl	8011468 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <PeriphCommonClock_Config+0x64>)
 80016c8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016da:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80016dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016e0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016e2:	2301      	movs	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016ea:	2318      	movs	r3, #24
 80016ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <PeriphCommonClock_Config+0x68>)
 80016fc:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f008 fa37 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800170c:	f000 f838 	bl	8001780 <Error_Handler>
  }
}
 8001710:	bf00      	nop
 8001712:	3790      	adds	r7, #144	; 0x90
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	00086800 	.word	0x00086800
 800171c:	01110000 	.word	0x01110000

08001720 <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == JOY_DOWN_Pin) {
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001730:	d105      	bne.n	800173e <HAL_GPIO_EXTI_Callback+0x1e>
		//prepareForSleep();
		//enterSleep();

		// simpler version
		HAL_SuspendTick();
 8001732:	f003 fb8b 	bl	8004e4c <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001736:	2101      	movs	r1, #1
 8001738:	2000      	movs	r0, #0
 800173a:	f007 fa1b 	bl	8008b74 <HAL_PWR_EnterSLEEPMode>
	}

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001744:	d101      	bne.n	800174a <HAL_GPIO_EXTI_Callback+0x2a>
		//awakeFromSleep();

		// simpler version
		HAL_ResumeTick();
 8001746:	f003 fb91 	bl	8004e6c <HAL_ResumeTick>
	}

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  //HAL_IncTick(); // it's already incremented in _it.c
  if (TimingDelay != 0)
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_SYSTICK_Callback+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_SYSTICK_Callback+0x18>
  {
    TimingDelay--;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_SYSTICK_Callback+0x28>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_SYSTICK_Callback+0x28>)
 8001768:	6013      	str	r3, [r2, #0]
//  		BSP_LED_On(LED1);
//  	}
//  	led_on = !led_on;
    TimingDelay = LED_TOGGLE_DELAY;
  }
}
 800176a:	e002      	b.n	8001772 <HAL_SYSTICK_Callback+0x1e>
    TimingDelay = LED_TOGGLE_DELAY;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_SYSTICK_Callback+0x28>)
 800176e:	2264      	movs	r2, #100	; 0x64
 8001770:	601a      	str	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	200005dc 	.word	0x200005dc

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop

  // from the pwr example - unclear why this is
  /* Suspend tick */
  //HAL_SuspendTick();

  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_QUADSPI_Init+0x50>)
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <MX_QUADSPI_Init+0x54>)
 8001794:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_QUADSPI_Init+0x50>)
 8001798:	2202      	movs	r2, #2
 800179a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_QUADSPI_Init+0x50>)
 800179e:	2204      	movs	r2, #4
 80017a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_QUADSPI_Init+0x50>)
 80017a4:	2210      	movs	r2, #16
 80017a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_QUADSPI_Init+0x50>)
 80017aa:	2217      	movs	r2, #23
 80017ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_QUADSPI_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_QUADSPI_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_QUADSPI_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_QUADSPI_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_QUADSPI_Init+0x50>)
 80017c8:	f007 fad4 	bl	8008d74 <HAL_QSPI_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80017d2:	f7ff ffd5 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200005e0 	.word	0x200005e0
 80017e0:	a0001000 	.word	0xa0001000

080017e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_QSPI_MspInit+0xb8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d145      	bne.n	8001892 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 8001808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180a:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6513      	str	r3, [r2, #80]	; 0x50
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 8001814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a1f      	ldr	r2, [pc, #124]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_QSPI_MspInit+0xbc>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800184e:	f640 0303 	movw	r3, #2051	; 0x803
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001860:	230a      	movs	r3, #10
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <HAL_QSPI_MspInit+0xc0>)
 800186c:	f004 fdc0 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001870:	23c8      	movs	r3, #200	; 0xc8
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001880:	230a      	movs	r3, #10
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f004 fdaf 	bl	80063f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	a0001000 	.word	0xa0001000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	48000400 	.word	0x48000400

080018a8 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018ae:	4a4e      	ldr	r2, [pc, #312]	; (80019e8 <MX_SAI1_Init+0x140>)
 80018b0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018c0:	2240      	movs	r2, #64	; 0x40
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018ca:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80018d0:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018d6:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80018dc:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018e2:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018e8:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <MX_SAI1_Init+0x144>)
 80018ec:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80018f4:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <MX_SAI1_Init+0x13c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001900:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <MX_SAI1_Init+0x13c>)
 8001902:	2200      	movs	r2, #0
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <MX_SAI1_Init+0x13c>)
 8001908:	2208      	movs	r2, #8
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800190c:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <MX_SAI1_Init+0x13c>)
 800190e:	2201      	movs	r2, #1
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <MX_SAI1_Init+0x13c>)
 8001914:	2200      	movs	r2, #0
 8001916:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <MX_SAI1_Init+0x13c>)
 800191a:	2200      	movs	r2, #0
 800191c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800191e:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <MX_SAI1_Init+0x13c>)
 8001920:	2200      	movs	r2, #0
 8001922:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <MX_SAI1_Init+0x13c>)
 8001926:	2200      	movs	r2, #0
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <MX_SAI1_Init+0x13c>)
 800192c:	2200      	movs	r2, #0
 800192e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <MX_SAI1_Init+0x13c>)
 8001932:	2201      	movs	r2, #1
 8001934:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <MX_SAI1_Init+0x13c>)
 8001938:	2200      	movs	r2, #0
 800193a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800193c:	4829      	ldr	r0, [pc, #164]	; (80019e4 <MX_SAI1_Init+0x13c>)
 800193e:	f009 fcad 	bl	800b29c <HAL_SAI_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001948:	f7ff ff1a 	bl	8001780 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <MX_SAI1_Init+0x148>)
 800194e:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <MX_SAI1_Init+0x14c>)
 8001950:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <MX_SAI1_Init+0x148>)
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <MX_SAI1_Init+0x148>)
 800195a:	2203      	movs	r2, #3
 800195c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <MX_SAI1_Init+0x148>)
 8001960:	2240      	movs	r2, #64	; 0x40
 8001962:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <MX_SAI1_Init+0x148>)
 8001966:	2200      	movs	r2, #0
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <MX_SAI1_Init+0x148>)
 800196c:	2200      	movs	r2, #0
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <MX_SAI1_Init+0x148>)
 8001972:	2201      	movs	r2, #1
 8001974:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <MX_SAI1_Init+0x148>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_SAI1_Init+0x148>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <MX_SAI1_Init+0x148>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MX_SAI1_Init+0x148>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <MX_SAI1_Init+0x148>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_SAI1_Init+0x148>)
 8001996:	2200      	movs	r2, #0
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <MX_SAI1_Init+0x148>)
 800199c:	2208      	movs	r2, #8
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <MX_SAI1_Init+0x148>)
 80019d2:	f009 fc63 	bl	800b29c <HAL_SAI_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80019dc:	f7ff fed0 	bl	8001780 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000062c 	.word	0x2000062c
 80019e8:	40015404 	.word	0x40015404
 80019ec:	0002ee00 	.word	0x0002ee00
 80019f0:	200006b0 	.word	0x200006b0
 80019f4:	40015424 	.word	0x40015424

080019f8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a33      	ldr	r2, [pc, #204]	; (8001ad4 <HAL_SAI_MspInit+0xdc>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d135      	bne.n	8001a76 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_SAI_MspInit+0xe0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10b      	bne.n	8001a2a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a12:	4b32      	ldr	r3, [pc, #200]	; (8001adc <HAL_SAI_MspInit+0xe4>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	4a31      	ldr	r2, [pc, #196]	; (8001adc <HAL_SAI_MspInit+0xe4>)
 8001a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <HAL_SAI_MspInit+0xe4>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_SAI_MspInit+0xe0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a29      	ldr	r2, [pc, #164]	; (8001ad8 <HAL_SAI_MspInit+0xe0>)
 8001a32:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001a34:	2354      	movs	r3, #84	; 0x54
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a44:	230d      	movs	r3, #13
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4824      	ldr	r0, [pc, #144]	; (8001ae0 <HAL_SAI_MspInit+0xe8>)
 8001a50:	f004 fcce 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a66:	230d      	movs	r3, #13
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481c      	ldr	r0, [pc, #112]	; (8001ae4 <HAL_SAI_MspInit+0xec>)
 8001a72:	f004 fcbd 	bl	80063f0 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_SAI_MspInit+0xf0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d124      	bne.n	8001aca <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_SAI_MspInit+0xe0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10b      	bne.n	8001aa0 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_SAI_MspInit+0xe4>)
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_SAI_MspInit+0xe4>)
 8001a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a92:	6613      	str	r3, [r2, #96]	; 0x60
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_SAI_MspInit+0xe4>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_SAI_MspInit+0xe0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_SAI_MspInit+0xe0>)
 8001aa8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001aba:	230d      	movs	r3, #13
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <HAL_SAI_MspInit+0xe8>)
 8001ac6:	f004 fc93 	bl	80063f0 <HAL_GPIO_Init>

    }
}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	; 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40015404 	.word	0x40015404
 8001ad8:	20000734 	.word	0x20000734
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	40015424 	.word	0x40015424

08001aec <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <MX_SDMMC1_SD_Init+0x5c>)
 8001af4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001b1a:	480a      	ldr	r0, [pc, #40]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001b1c:	f009 fd6a 	bl	800b5f4 <HAL_SD_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8001b26:	f7ff fe2b 	bl	8001780 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_SDMMC1_SD_Init+0x58>)
 8001b30:	f009 ffda 	bl	800bae8 <HAL_SD_ConfigWideBusOperation>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001b3a:	f7ff fe21 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000738 	.word	0x20000738
 8001b48:	40012800 	.word	0x40012800

08001b4c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <HAL_SD_MspInit+0xb4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d144      	bne.n	8001bf8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b72:	4a24      	ldr	r2, [pc, #144]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b78:	6613      	str	r3, [r2, #96]	; 0x60
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_SD_MspInit+0xb8>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <HAL_SD_MspInit+0xbc>)
 8001bd2:	f004 fc0d 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001bd6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001bda:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001be8:	230c      	movs	r3, #12
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <HAL_SD_MspInit+0xc0>)
 8001bf4:	f004 fbfc 	bl	80063f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	; 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40012800 	.word	0x40012800
 8001c04:	40021000 	.word	0x40021000
 8001c08:	48000c00 	.word	0x48000c00
 8001c0c:	48000800 	.word	0x48000800

08001c10 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <MX_SPI1_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c3e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c5e:	2207      	movs	r2, #7
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c70:	f00a fab2 	bl	800c1d8 <HAL_SPI_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c7a:	f7ff fd81 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200007bc 	.word	0x200007bc
 8001c88:	40013000 	.word	0x40013000

08001c8c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <MX_SPI2_Init+0x78>)
 8001c94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001ca6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001caa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cbe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cda:	2207      	movs	r2, #7
 8001cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_SPI2_Init+0x74>)
 8001cec:	f00a fa74 	bl	800c1d8 <HAL_SPI_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cf6:	f7ff fd43 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000820 	.word	0x20000820
 8001d04:	40003800 	.word	0x40003800

08001d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_SPI_MspInit+0x14c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d146      	bne.n	8001db8 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d34:	6613      	str	r3, [r2, #96]	; 0x60
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3e:	623b      	str	r3, [r7, #32]
 8001d40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a44      	ldr	r2, [pc, #272]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4e:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001d72:	2330      	movs	r3, #48	; 0x30
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d82:	2305      	movs	r3, #5
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4833      	ldr	r0, [pc, #204]	; (8001e5c <HAL_SPI_MspInit+0x154>)
 8001d8e:	f004 fb2f 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001d92:	f248 0320 	movw	r3, #32800	; 0x8020
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da4:	2305      	movs	r3, #5
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db2:	f004 fb1d 	bl	80063f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001db6:	e049      	b.n	8001e4c <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_SPI_MspInit+0x158>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d144      	bne.n	8001e4c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_SPI_MspInit+0x150>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001e0a:	2306      	movs	r3, #6
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	4619      	mov	r1, r3
 8001e24:	480f      	ldr	r0, [pc, #60]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001e26:	f004 fae3 	bl	80063f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_SPI_MspInit+0x154>)
 8001e48:	f004 fad2 	bl	80063f0 <HAL_GPIO_Init>
}
 8001e4c:	bf00      	nop
 8001e4e:	3738      	adds	r7, #56	; 0x38
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40013000 	.word	0x40013000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	40003800 	.word	0x40003800
 8001e64:	48002000 	.word	0x48002000

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_MspInit+0x44>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <HAL_MspInit+0x44>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_MspInit+0x44>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_MspInit+0x44>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_MspInit+0x44>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_MspInit+0x44>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000

08001eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <NMI_Handler+0x4>

08001eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efc:	f002 ff62 	bl	8004dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback(); // EK added this, unsure why it was not generated
 8001f00:	f7ff fc28 	bl	8001754 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8001f0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f10:	f004 fd0a 	bl	8006928 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8001f14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f18:	f004 fd06 	bl	8006928 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8001f1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f20:	f004 fd02 	bl	8006928 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <OTG_FS_IRQHandler+0x10>)
 8001f2e:	f005 fda5 	bl	8007a7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20001f84 	.word	0x20001f84

08001f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <SystemInit+0x20>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <SystemInit+0x20>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <MX_LPUART1_UART_Init+0x54>)
 8001f68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <MX_LPUART1_UART_Init+0x58>)
 8001f6e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <MX_LPUART1_UART_Init+0x50>)
 8001f9e:	f00a fa06 	bl	800c3ae <HAL_UART_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001fa8:	f7ff fbea 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000884 	.word	0x20000884
 8001fb4:	40008000 	.word	0x40008000
 8001fb8:	00033324 	.word	0x00033324

08001fbc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <MX_USART1_UART_Init+0x5c>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001fe8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8002002:	f00a f9d4 	bl	800c3ae <HAL_UART_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800200c:	f7ff fbb8 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000908 	.word	0x20000908
 8002018:	40013800 	.word	0x40013800

0800201c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <MX_USART2_UART_Init+0x5c>)
 8002024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800202c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USART2_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USART2_UART_Init+0x58>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USART2_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002060:	f00a f9a5 	bl	800c3ae <HAL_UART_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800206a:	f7ff fb89 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000098c 	.word	0x2000098c
 8002078:	40004400 	.word	0x40004400

0800207c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0b2      	sub	sp, #200	; 0xc8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002098:	228c      	movs	r2, #140	; 0x8c
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f00f f9e3 	bl	8011468 <memset>
  if(uartHandle->Instance==LPUART1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a86      	ldr	r2, [pc, #536]	; (80022c0 <HAL_UART_MspInit+0x244>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d13e      	bne.n	800212a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020ac:	2320      	movs	r3, #32
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b8:	4618      	mov	r0, r3
 80020ba:	f007 fd5b 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020c4:	f7ff fb5c 	bl	8001780 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020c8:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <HAL_UART_MspInit+0x248>)
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	4a7d      	ldr	r2, [pc, #500]	; (80022c4 <HAL_UART_MspInit+0x248>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80020d4:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <HAL_UART_MspInit+0x248>)
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020e0:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <HAL_UART_MspInit+0x248>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	4a77      	ldr	r2, [pc, #476]	; (80022c4 <HAL_UART_MspInit+0x248>)
 80020e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ec:	4b75      	ldr	r3, [pc, #468]	; (80022c4 <HAL_UART_MspInit+0x248>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 80020f8:	f006 fde4 	bl	8008cc4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80020fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002116:	2308      	movs	r3, #8
 8002118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800211c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002120:	4619      	mov	r1, r3
 8002122:	4869      	ldr	r0, [pc, #420]	; (80022c8 <HAL_UART_MspInit+0x24c>)
 8002124:	f004 f964 	bl	80063f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002128:	e0c6      	b.n	80022b8 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a67      	ldr	r2, [pc, #412]	; (80022cc <HAL_UART_MspInit+0x250>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d15f      	bne.n	80021f4 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002134:	2301      	movs	r3, #1
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002138:	2300      	movs	r3, #0
 800213a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800213c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002140:	4618      	mov	r0, r3
 8002142:	f007 fd17 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800214c:	f7ff fb18 	bl	8001780 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002150:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	4a5b      	ldr	r2, [pc, #364]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215a:	6613      	str	r3, [r2, #96]	; 0x60
 800215c:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <HAL_UART_MspInit+0x248>)
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002168:	4b56      	ldr	r3, [pc, #344]	; (80022c4 <HAL_UART_MspInit+0x248>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	4a55      	ldr	r2, [pc, #340]	; (80022c4 <HAL_UART_MspInit+0x248>)
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002180:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800218a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218c:	4b4d      	ldr	r3, [pc, #308]	; (80022c4 <HAL_UART_MspInit+0x248>)
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8002198:	f006 fd94 	bl	8008cc4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 800219c:	2340      	movs	r3, #64	; 0x40
 800219e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b4:	2307      	movs	r3, #7
 80021b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021be:	4619      	mov	r1, r3
 80021c0:	4843      	ldr	r0, [pc, #268]	; (80022d0 <HAL_UART_MspInit+0x254>)
 80021c2:	f004 f915 	bl	80063f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80021c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e0:	2307      	movs	r3, #7
 80021e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021ea:	4619      	mov	r1, r3
 80021ec:	4836      	ldr	r0, [pc, #216]	; (80022c8 <HAL_UART_MspInit+0x24c>)
 80021ee:	f004 f8ff 	bl	80063f0 <HAL_GPIO_Init>
}
 80021f2:	e061      	b.n	80022b8 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a36      	ldr	r2, [pc, #216]	; (80022d4 <HAL_UART_MspInit+0x258>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d15c      	bne.n	80022b8 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021fe:	2302      	movs	r3, #2
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002202:	2300      	movs	r3, #0
 8002204:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220a:	4618      	mov	r0, r3
 800220c:	f007 fcb2 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8002216:	f7ff fab3 	bl	8001780 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_UART_MspInit+0x248>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
 8002226:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_UART_MspInit+0x248>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_UART_MspInit+0x248>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227a:	2307      	movs	r3, #7
 800227c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002284:	4619      	mov	r1, r3
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <HAL_UART_MspInit+0x25c>)
 8002288:	f004 f8b2 	bl	80063f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800228c:	2304      	movs	r3, #4
 800228e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a4:	2307      	movs	r3, #7
 80022a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022ae:	4619      	mov	r1, r3
 80022b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b4:	f004 f89c 	bl	80063f0 <HAL_GPIO_Init>
}
 80022b8:	bf00      	nop
 80022ba:	37c8      	adds	r7, #200	; 0xc8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40008000 	.word	0x40008000
 80022c4:	40021000 	.word	0x40021000
 80022c8:	48001800 	.word	0x48001800
 80022cc:	40013800 	.word	0x40013800
 80022d0:	48000400 	.word	0x48000400
 80022d4:	40004400 	.word	0x40004400
 80022d8:	48000c00 	.word	0x48000c00

080022dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002314 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e0:	f7ff fe2c 	bl	8001f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <LoopForever+0x6>)
  ldr r1, =_edata
 80022e6:	490d      	ldr	r1, [pc, #52]	; (800231c <LoopForever+0xa>)
  ldr r2, =_sidata
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <LoopForever+0xe>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022fc:	4c0a      	ldr	r4, [pc, #40]	; (8002328 <LoopForever+0x16>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230a:	f00f f889 	bl	8011420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800230e:	f7ff f8df 	bl	80014d0 <main>

08002312 <LoopForever>:

LoopForever:
    b LoopForever
 8002312:	e7fe      	b.n	8002312 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002314:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800231c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8002320:	08013478 	.word	0x08013478
  ldr r2, =_sbss
 8002324:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8002328:	200026b0 	.word	0x200026b0

0800232c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800232c:	e7fe      	b.n	800232c <ADC1_2_IRQHandler>
	...

08002330 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 ffd1 	bl	80032e4 <mfxstm32l152_GetInstance>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2bff      	cmp	r3, #255	; 0xff
 800234a:	d10e      	bne.n	800236a <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 800234c:	2000      	movs	r0, #0
 800234e:	f000 ffc9 	bl	80032e4 <mfxstm32l152_GetInstance>
 8002352:	4603      	mov	r3, r0
 8002354:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8002356:	7bbb      	ldrb	r3, [r7, #14]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d806      	bhi.n	800236a <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 800235c:	7bbb      	ldrb	r3, [r7, #14]
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	b2d1      	uxtb	r1, r2
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <mfxstm32l152_Init+0x58>)
 8002364:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8002366:	f001 ff19 	bl	800419c <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f8db 	bl	800252a <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	2101      	movs	r1, #1
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f8fc 	bl	8002576 <mfxstm32l152_SetIrqOutPinType>
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000a10 	.word	0x20000a10

0800238c <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 ffc3 	bl	8003324 <mfxstm32l152_ReleaseInstance>
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2bff      	cmp	r3, #255	; 0xff
 80023a6:	d001      	beq.n	80023ac <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80023a8:	f001 ff08 	bl	80041bc <MFX_IO_DeInit>
  }
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 ff9b 	bl	8004300 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 80023ca:	200a      	movs	r0, #10
 80023cc:	f001 ffda 	bl	8004384 <MFX_IO_Delay>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	2240      	movs	r2, #64	; 0x40
 80023e6:	2140      	movs	r1, #64	; 0x40
 80023e8:	4618      	mov	r0, r3
 80023ea:	f001 ff89 	bl	8004300 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80023ee:	f001 ff4f 	bl	8004290 <MFX_IO_EnableWakeupPin>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 ff6c 	bl	80032e4 <mfxstm32l152_GetInstance>
 800240c:	4603      	mov	r3, r0
 800240e:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d101      	bne.n	800241a <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8002416:	f001 ff3b 	bl	8004290 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800241a:	f001 ff5d 	bl	80042d8 <MFX_IO_Wakeup>
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8002430:	2001      	movs	r0, #1
 8002432:	f001 ffa7 	bl	8004384 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8002436:	f001 feb1 	bl	800419c <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f001 ff72 	bl	8004328 <MFX_IO_Read>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	b29b      	uxth	r3, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	460a      	mov	r2, r1
 800245e:	80fb      	strh	r3, [r7, #6]
 8002460:	4613      	mov	r3, r2
 8002462:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2142      	movs	r1, #66	; 0x42
 800246c:	4618      	mov	r0, r3
 800246e:	f001 ff5b 	bl	8004328 <MFX_IO_Read>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	797b      	ldrb	r3, [r7, #5]
 800247a:	4313      	orrs	r3, r2
 800247c:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	2142      	movs	r1, #66	; 0x42
 8002484:	4618      	mov	r0, r3
 8002486:	f001 ff3b 	bl	8004300 <MFX_IO_Write>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	460a      	mov	r2, r1
 800249c:	80fb      	strh	r3, [r7, #6]
 800249e:	4613      	mov	r3, r2
 80024a0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	2142      	movs	r1, #66	; 0x42
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 ff3c 	bl	8004328 <MFX_IO_Read>
 80024b0:	4603      	mov	r3, r0
 80024b2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80024b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	b25a      	sxtb	r2, r3
 80024bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c0:	4013      	ands	r3, r2
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	2142      	movs	r1, #66	; 0x42
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 ff17 	bl	8004300 <MFX_IO_Write>
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	460a      	mov	r2, r1
 80024e4:	80fb      	strh	r3, [r7, #6]
 80024e6:	4613      	mov	r3, r2
 80024e8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2108      	movs	r1, #8
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 ff1a 	bl	8004328 <MFX_IO_Read>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461a      	mov	r2, r3
 80024f8:	797b      	ldrb	r3, [r7, #5]
 80024fa:	4013      	ands	r3, r2
 80024fc:	b2db      	uxtb	r3, r3
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	460a      	mov	r2, r1
 8002510:	80fb      	strh	r3, [r7, #6]
 8002512:	4613      	mov	r3, r2
 8002514:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8002516:	797a      	ldrb	r2, [r7, #5]
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	2144      	movs	r1, #68	; 0x44
 800251c:	4618      	mov	r0, r3
 800251e:	f001 feef 	bl	8004300 <MFX_IO_Write>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	460a      	mov	r2, r1
 8002534:	80fb      	strh	r3, [r7, #6]
 8002536:	4613      	mov	r3, r2
 8002538:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	2141      	movs	r1, #65	; 0x41
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fef0 	bl	8004328 <MFX_IO_Read>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	f023 0302 	bic.w	r3, r3, #2
 8002552:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	4313      	orrs	r3, r2
 800255a:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2141      	movs	r1, #65	; 0x41
 8002562:	4618      	mov	r0, r3
 8002564:	f001 fecc 	bl	8004300 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8002568:	2001      	movs	r0, #1
 800256a:	f001 ff0b 	bl	8004384 <MFX_IO_Delay>

}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	460a      	mov	r2, r1
 8002580:	80fb      	strh	r3, [r7, #6]
 8002582:	4613      	mov	r3, r2
 8002584:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2141      	movs	r1, #65	; 0x41
 800258e:	4618      	mov	r0, r3
 8002590:	f001 feca 	bl	8004328 <MFX_IO_Read>
 8002594:	4603      	mov	r3, r0
 8002596:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	797b      	ldrb	r3, [r7, #5]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	2141      	movs	r1, #65	; 0x41
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 fea6 	bl	8004300 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f001 fee5 	bl	8004384 <MFX_IO_Delay>

}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	6039      	str	r1, [r7, #0]
 80025cc:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2140      	movs	r1, #64	; 0x40
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fea8 	bl	8004328 <MFX_IO_Read>
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ea:	d304      	bcc.n	80025f6 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e003      	b.n	80025fe <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	f023 0308 	bic.w	r3, r3, #8
 80025fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fe7b 	bl	8004300 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800260a:	2001      	movs	r0, #1
 800260c:	f001 feba 	bl	8004384 <MFX_IO_Delay>
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	80fb      	strh	r3, [r7, #6]
 8002624:	4613      	mov	r3, r2
 8002626:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 800262c:	797b      	ldrb	r3, [r7, #5]
 800262e:	2b17      	cmp	r3, #23
 8002630:	f200 82d4 	bhi.w	8002bdc <mfxstm32l152_IO_Config+0x5c4>
 8002634:	a201      	add	r2, pc, #4	; (adr r2, 800263c <mfxstm32l152_IO_Config+0x24>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	080026cd 	.word	0x080026cd
 8002640:	0800275d 	.word	0x0800275d
 8002644:	0800281d 	.word	0x0800281d
 8002648:	0800290d 	.word	0x0800290d
 800264c:	080029fd 	.word	0x080029fd
 8002650:	08002aed 	.word	0x08002aed
 8002654:	0800269d 	.word	0x0800269d
 8002658:	0800269d 	.word	0x0800269d
 800265c:	080026fd 	.word	0x080026fd
 8002660:	0800272d 	.word	0x0800272d
 8002664:	08002bdd 	.word	0x08002bdd
 8002668:	080027ed 	.word	0x080027ed
 800266c:	080027bd 	.word	0x080027bd
 8002670:	08002bdd 	.word	0x08002bdd
 8002674:	0800278d 	.word	0x0800278d
 8002678:	0800275d 	.word	0x0800275d
 800267c:	0800286d 	.word	0x0800286d
 8002680:	080028bd 	.word	0x080028bd
 8002684:	0800295d 	.word	0x0800295d
 8002688:	080029ad 	.word	0x080029ad
 800268c:	08002a4d 	.word	0x08002a4d
 8002690:	08002a9d 	.word	0x08002a9d
 8002694:	08002b3d 	.word	0x08002b3d
 8002698:	08002b8d 	.word	0x08002b8d
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	6839      	ldr	r1, [r7, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fb67 	bl	8002d74 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2200      	movs	r2, #0
 80026aa:	6839      	ldr	r1, [r7, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fa9d 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80026b2:	88f8      	ldrh	r0, [r7, #6]
 80026b4:	2300      	movs	r3, #0
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	2164      	movs	r1, #100	; 0x64
 80026ba:	f000 fe57 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80026be:	88f8      	ldrh	r0, [r7, #6]
 80026c0:	2300      	movs	r3, #0
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	2168      	movs	r1, #104	; 0x68
 80026c6:	f000 fe51 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    break;
 80026ca:	e28a      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fb4f 	bl	8002d74 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	2200      	movs	r2, #0
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fa85 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80026e2:	88f8      	ldrh	r0, [r7, #6]
 80026e4:	2300      	movs	r3, #0
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	2164      	movs	r1, #100	; 0x64
 80026ea:	f000 fe3f 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80026ee:	88f8      	ldrh	r0, [r7, #6]
 80026f0:	2301      	movs	r3, #1
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	2168      	movs	r1, #104	; 0x68
 80026f6:	f000 fe39 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    break;
 80026fa:	e272      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	6839      	ldr	r1, [r7, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fb37 	bl	8002d74 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2200      	movs	r2, #0
 800270a:	6839      	ldr	r1, [r7, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fa6d 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002712:	88f8      	ldrh	r0, [r7, #6]
 8002714:	2301      	movs	r3, #1
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	2164      	movs	r1, #100	; 0x64
 800271a:	f000 fe27 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800271e:	88f8      	ldrh	r0, [r7, #6]
 8002720:	2301      	movs	r3, #1
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	2168      	movs	r1, #104	; 0x68
 8002726:	f000 fe21 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    break;
 800272a:	e25a      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fb1f 	bl	8002d74 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	2200      	movs	r2, #0
 800273a:	6839      	ldr	r1, [r7, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fa55 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002742:	88f8      	ldrh	r0, [r7, #6]
 8002744:	2301      	movs	r3, #1
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	2164      	movs	r1, #100	; 0x64
 800274a:	f000 fe0f 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800274e:	88f8      	ldrh	r0, [r7, #6]
 8002750:	2300      	movs	r3, #0
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	2168      	movs	r1, #104	; 0x68
 8002756:	f000 fe09 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    break;
 800275a:	e242      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fb07 	bl	8002d74 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	2201      	movs	r2, #1
 800276a:	6839      	ldr	r1, [r7, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa3d 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8002772:	88f8      	ldrh	r0, [r7, #6]
 8002774:	2300      	movs	r3, #0
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	2164      	movs	r1, #100	; 0x64
 800277a:	f000 fdf7 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800277e:	88f8      	ldrh	r0, [r7, #6]
 8002780:	2300      	movs	r3, #0
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	2168      	movs	r1, #104	; 0x68
 8002786:	f000 fdf1 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    break;
 800278a:	e22a      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 faef 	bl	8002d74 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	2201      	movs	r2, #1
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fa25 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80027a2:	88f8      	ldrh	r0, [r7, #6]
 80027a4:	2300      	movs	r3, #0
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	2164      	movs	r1, #100	; 0x64
 80027aa:	f000 fddf 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80027ae:	88f8      	ldrh	r0, [r7, #6]
 80027b0:	2301      	movs	r3, #1
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	2168      	movs	r1, #104	; 0x68
 80027b6:	f000 fdd9 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    break;
 80027ba:	e212      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	6839      	ldr	r1, [r7, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fad7 	bl	8002d74 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2201      	movs	r2, #1
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fa0d 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80027d2:	88f8      	ldrh	r0, [r7, #6]
 80027d4:	2301      	movs	r3, #1
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	2164      	movs	r1, #100	; 0x64
 80027da:	f000 fdc7 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80027de:	88f8      	ldrh	r0, [r7, #6]
 80027e0:	2300      	movs	r3, #0
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	2168      	movs	r1, #104	; 0x68
 80027e6:	f000 fdc1 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    break;
 80027ea:	e1fa      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fabf 	bl	8002d74 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2201      	movs	r2, #1
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f9f5 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8002802:	88f8      	ldrh	r0, [r7, #6]
 8002804:	2301      	movs	r3, #1
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	2164      	movs	r1, #100	; 0x64
 800280a:	f000 fdaf 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800280e:	88f8      	ldrh	r0, [r7, #6]
 8002810:	2301      	movs	r3, #1
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	2168      	movs	r1, #104	; 0x68
 8002816:	f000 fda9 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    break;
 800281a:	e1e2      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fa7a 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	2200      	movs	r2, #0
 8002828:	6839      	ldr	r1, [r7, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f9de 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8002830:	88f8      	ldrh	r0, [r7, #6]
 8002832:	2300      	movs	r3, #0
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	2164      	movs	r1, #100	; 0x64
 8002838:	f000 fd98 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800283c:	88f8      	ldrh	r0, [r7, #6]
 800283e:	2301      	movs	r3, #1
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	2168      	movs	r1, #104	; 0x68
 8002844:	f000 fd92 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	2201      	movs	r2, #1
 800284c:	6839      	ldr	r1, [r7, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f9de 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	2201      	movs	r2, #1
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f9ed 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fa75 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 800286a:	e1ba      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fa52 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	2200      	movs	r2, #0
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f9b6 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002880:	88f8      	ldrh	r0, [r7, #6]
 8002882:	2301      	movs	r3, #1
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	2164      	movs	r1, #100	; 0x64
 8002888:	f000 fd70 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800288c:	88f8      	ldrh	r0, [r7, #6]
 800288e:	2301      	movs	r3, #1
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	2168      	movs	r1, #104	; 0x68
 8002894:	f000 fd6a 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2201      	movs	r2, #1
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f9b6 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	2201      	movs	r2, #1
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f9c5 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fa4d 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 80028ba:	e192      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa2a 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2200      	movs	r2, #0
 80028c8:	6839      	ldr	r1, [r7, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f98e 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80028d0:	88f8      	ldrh	r0, [r7, #6]
 80028d2:	2301      	movs	r3, #1
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	2164      	movs	r1, #100	; 0x64
 80028d8:	f000 fd48 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80028dc:	88f8      	ldrh	r0, [r7, #6]
 80028de:	2300      	movs	r3, #0
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	2168      	movs	r1, #104	; 0x68
 80028e4:	f000 fd42 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	2201      	movs	r2, #1
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f98e 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	2201      	movs	r2, #1
 80028f8:	6839      	ldr	r1, [r7, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f99d 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fa25 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 800290a:	e16a      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fa02 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	2200      	movs	r2, #0
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f966 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8002920:	88f8      	ldrh	r0, [r7, #6]
 8002922:	2300      	movs	r3, #0
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	2164      	movs	r1, #100	; 0x64
 8002928:	f000 fd20 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800292c:	88f8      	ldrh	r0, [r7, #6]
 800292e:	2301      	movs	r3, #1
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	2168      	movs	r1, #104	; 0x68
 8002934:	f000 fd1a 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	2201      	movs	r2, #1
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f966 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	2200      	movs	r2, #0
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f975 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	6839      	ldr	r1, [r7, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f9fd 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 800295a:	e142      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f9da 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	2200      	movs	r2, #0
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f93e 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002970:	88f8      	ldrh	r0, [r7, #6]
 8002972:	2301      	movs	r3, #1
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	2164      	movs	r1, #100	; 0x64
 8002978:	f000 fcf8 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800297c:	88f8      	ldrh	r0, [r7, #6]
 800297e:	2301      	movs	r3, #1
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	2168      	movs	r1, #104	; 0x68
 8002984:	f000 fcf2 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	2201      	movs	r2, #1
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f93e 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	2200      	movs	r2, #0
 8002998:	6839      	ldr	r1, [r7, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f94d 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 f9d5 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 80029aa:	e11a      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f9b2 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	2200      	movs	r2, #0
 80029b8:	6839      	ldr	r1, [r7, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f916 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80029c0:	88f8      	ldrh	r0, [r7, #6]
 80029c2:	2301      	movs	r3, #1
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	2164      	movs	r1, #100	; 0x64
 80029c8:	f000 fcd0 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80029cc:	88f8      	ldrh	r0, [r7, #6]
 80029ce:	2300      	movs	r3, #0
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	2168      	movs	r1, #104	; 0x68
 80029d4:	f000 fcca 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2201      	movs	r2, #1
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f916 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	2200      	movs	r2, #0
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f925 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f9ad 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 80029fa:	e0f2      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f98a 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2200      	movs	r2, #0
 8002a08:	6839      	ldr	r1, [r7, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f8ee 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8002a10:	88f8      	ldrh	r0, [r7, #6]
 8002a12:	2300      	movs	r3, #0
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	2164      	movs	r1, #100	; 0x64
 8002a18:	f000 fca8 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002a1c:	88f8      	ldrh	r0, [r7, #6]
 8002a1e:	2301      	movs	r3, #1
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	2168      	movs	r1, #104	; 0x68
 8002a24:	f000 fca2 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f8ee 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	2200      	movs	r2, #0
 8002a38:	6839      	ldr	r1, [r7, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f8fd 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	6839      	ldr	r1, [r7, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f985 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002a4a:	e0ca      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f962 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2200      	movs	r2, #0
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f8c6 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002a60:	88f8      	ldrh	r0, [r7, #6]
 8002a62:	2301      	movs	r3, #1
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	2164      	movs	r1, #100	; 0x64
 8002a68:	f000 fc80 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002a6c:	88f8      	ldrh	r0, [r7, #6]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	2168      	movs	r1, #104	; 0x68
 8002a74:	f000 fc7a 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f8c6 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	2200      	movs	r2, #0
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f8d5 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f95d 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002a9a:	e0a2      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f93a 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f89e 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002ab0:	88f8      	ldrh	r0, [r7, #6]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	2164      	movs	r1, #100	; 0x64
 8002ab8:	f000 fc58 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002abc:	88f8      	ldrh	r0, [r7, #6]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	2168      	movs	r1, #104	; 0x68
 8002ac4:	f000 fc52 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	2200      	movs	r2, #0
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f89e 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f8ad 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f935 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002aea:	e07a      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f912 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	2200      	movs	r2, #0
 8002af8:	6839      	ldr	r1, [r7, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f876 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8002b00:	88f8      	ldrh	r0, [r7, #6]
 8002b02:	2300      	movs	r3, #0
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	2164      	movs	r1, #100	; 0x64
 8002b08:	f000 fc30 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002b0c:	88f8      	ldrh	r0, [r7, #6]
 8002b0e:	2301      	movs	r3, #1
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	2168      	movs	r1, #104	; 0x68
 8002b14:	f000 fc2a 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f876 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	2201      	movs	r2, #1
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f885 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f90d 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002b3a:	e052      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f8ea 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2200      	movs	r2, #0
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f84e 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002b50:	88f8      	ldrh	r0, [r7, #6]
 8002b52:	2301      	movs	r3, #1
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	2164      	movs	r1, #100	; 0x64
 8002b58:	f000 fc08 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002b5c:	88f8      	ldrh	r0, [r7, #6]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	2168      	movs	r1, #104	; 0x68
 8002b64:	f000 fc02 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f84e 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	2201      	movs	r2, #1
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f85d 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	6839      	ldr	r1, [r7, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 f8e5 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002b8a:	e02a      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f8c2 	bl	8002d18 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	2200      	movs	r2, #0
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f826 	bl	8002bec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002ba0:	88f8      	ldrh	r0, [r7, #6]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	2164      	movs	r1, #100	; 0x64
 8002ba8:	f000 fbe0 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002bac:	88f8      	ldrh	r0, [r7, #6]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	2168      	movs	r1, #104	; 0x68
 8002bb4:	f000 fbda 	bl	800336c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	6839      	ldr	r1, [r7, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f826 	bl	8002c10 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	6839      	ldr	r1, [r7, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f835 	bl	8002c3a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f8bd 	bl	8002d54 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002bda:	e002      	b.n	8002be2 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8002bdc:	797b      	ldrb	r3, [r7, #5]
 8002bde:	73fb      	strb	r3, [r7, #15]
    break;
 8002be0:	bf00      	nop
  }

  return error_code;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	80fb      	strh	r3, [r7, #6]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8002bfc:	797b      	ldrb	r3, [r7, #5]
 8002bfe:	88f8      	ldrh	r0, [r7, #6]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	2160      	movs	r1, #96	; 0x60
 8002c04:	f000 fbb2 	bl	800336c <mfxstm32l152_reg24_setPinValue>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	80fb      	strh	r3, [r7, #6]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8002c20:	797b      	ldrb	r3, [r7, #5]
 8002c22:	88f8      	ldrh	r0, [r7, #6]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	214c      	movs	r1, #76	; 0x4c
 8002c28:	f000 fba0 	bl	800336c <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f001 fba9 	bl	8004384 <MFX_IO_Delay>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	6039      	str	r1, [r7, #0]
 8002c44:	80fb      	strh	r3, [r7, #6]
 8002c46:	4613      	mov	r3, r2
 8002c48:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8002c4a:	797b      	ldrb	r3, [r7, #5]
 8002c4c:	88f8      	ldrh	r0, [r7, #6]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	2150      	movs	r1, #80	; 0x50
 8002c52:	f000 fb8b 	bl	800336c <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f001 fb94 	bl	8004384 <MFX_IO_Delay>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	80fb      	strh	r3, [r7, #6]
 8002c70:	4613      	mov	r3, r2
 8002c72:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8002c74:	797b      	ldrb	r3, [r7, #5]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8002c7a:	88f8      	ldrh	r0, [r7, #6]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	216c      	movs	r1, #108	; 0x6c
 8002c82:	f000 fb73 	bl	800336c <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8002c86:	e005      	b.n	8002c94 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8002c88:	88f8      	ldrh	r0, [r7, #6]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	2170      	movs	r1, #112	; 0x70
 8002c90:	f000 fb6c 	bl	800336c <mfxstm32l152_reg24_setPinValue>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	2110      	movs	r1, #16
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fb31 	bl	8004328 <MFX_IO_Read>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	2111      	movs	r1, #17
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fb25 	bl	8004328 <MFX_IO_Read>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	2112      	movs	r1, #18
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 fb19 	bl	8004328 <MFX_IO_Read>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	441a      	add	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	4413      	add	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4013      	ands	r3, r2
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8002d22:	f001 fa87 	bl	8004234 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fb92 	bl	8002454 <mfxstm32l152_EnableITSource>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fba3 	bl	8002492 <mfxstm32l152_DisableITSource>
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8002d60:	88f8      	ldrh	r0, [r7, #6]
 8002d62:	2301      	movs	r3, #1
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	2148      	movs	r1, #72	; 0x48
 8002d68:	f000 fb00 	bl	800336c <mfxstm32l152_reg24_setPinValue>
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8002d80:	88f8      	ldrh	r0, [r7, #6]
 8002d82:	2300      	movs	r3, #0
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	2148      	movs	r1, #72	; 0x48
 8002d88:	f000 faf0 	bl	800336c <mfxstm32l152_reg24_setPinValue>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	210c      	movs	r1, #12
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 fab5 	bl	8004328 <MFX_IO_Read>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dc8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d006      	beq.n	8002dde <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	210d      	movs	r1, #13
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 faa7 	bl	8004328 <MFX_IO_Read>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	210e      	movs	r1, #14
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 fa9b 	bl	8004328 <MFX_IO_Read>
 8002df2:	4603      	mov	r3, r0
 8002df4:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	89bb      	ldrh	r3, [r7, #12]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	4413      	add	r3, r2
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	4413      	add	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4013      	ands	r3, r2
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	6039      	str	r1, [r7, #0]
 8002e20:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	2154      	movs	r1, #84	; 0x54
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fa5e 	bl	8004300 <MFX_IO_Write>
  }
  if (pin_8_15)
 8002e44:	7bbb      	ldrb	r3, [r7, #14]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8002e4a:	7bba      	ldrb	r2, [r7, #14]
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	2155      	movs	r1, #85	; 0x55
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 fa55 	bl	8004300 <MFX_IO_Write>
  }
  if (pin_16_23)
 8002e56:	7b7b      	ldrb	r3, [r7, #13]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8002e5c:	7b7a      	ldrb	r2, [r7, #13]
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2156      	movs	r1, #86	; 0x56
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 fa4c 	bl	8004300 <MFX_IO_Write>
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fa4e 	bl	8004328 <MFX_IO_Read>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 fa2c 	bl	8004300 <MFX_IO_Write>
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	b590      	push	{r4, r7, lr}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4604      	mov	r4, r0
 8002eba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2140      	movs	r1, #64	; 0x40
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 fa26 	bl	8004328 <MFX_IO_Read>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8002ee0:	7bbb      	ldrb	r3, [r7, #14]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8002eea:	7bbb      	ldrb	r3, [r7, #14]
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	7bba      	ldrb	r2, [r7, #14]
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	4618      	mov	r0, r3
 8002efe:	f001 f9ff 	bl	8004300 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8002f02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f003 030e 	and.w	r3, r3, #14
 8002f0e:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8002f10:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	b25a      	sxtb	r2, r3
 8002f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b25b      	sxtb	r3, r3
 8002f24:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8002f26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f9da 	bl	8004300 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8002f4c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f56:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8002f58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f62:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8002f64:	4313      	orrs	r3, r2
 8002f66:	b25b      	sxtb	r3, r3
 8002f68:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	2181      	movs	r1, #129	; 0x81
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 f9c3 	bl	8004300 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8002f7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	2182      	movs	r1, #130	; 0x82
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 f9b7 	bl	8004300 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8002f92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f94:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	2183      	movs	r1, #131	; 0x83
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 f9ad 	bl	8004300 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8002fa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	2184      	movs	r1, #132	; 0x84
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 f9a1 	bl	8004300 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8002fbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fc0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	2185      	movs	r1, #133	; 0x85
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 f997 	bl	8004300 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8002fd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	2186      	movs	r1, #134	; 0x86
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 f98b 	bl	8004300 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8002fea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002fec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	2187      	movs	r1, #135	; 0x87
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 f981 	bl	8004300 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8002ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	b29b      	uxth	r3, r3
 8003004:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	2188      	movs	r1, #136	; 0x88
 8003010:	4618      	mov	r0, r3
 8003012:	f001 f975 	bl	8004300 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8003016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003018:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	b29b      	uxth	r3, r3
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	2189      	movs	r1, #137	; 0x89
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f96b 	bl	8004300 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 800302a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	b29b      	uxth	r3, r3
 8003030:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	b29b      	uxth	r3, r3
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	218a      	movs	r1, #138	; 0x8a
 800303c:	4618      	mov	r0, r3
 800303e:	f001 f95f 	bl	8004300 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8003042:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003044:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	218b      	movs	r1, #139	; 0x8b
 8003050:	4618      	mov	r0, r3
 8003052:	f001 f955 	bl	8004300 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8003056:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003058:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	b29b      	uxth	r3, r3
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	2190      	movs	r1, #144	; 0x90
 8003064:	4618      	mov	r0, r3
 8003066:	f001 f94b 	bl	8004300 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 800306a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800306c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	b29b      	uxth	r3, r3
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	2191      	movs	r1, #145	; 0x91
 8003078:	4618      	mov	r0, r3
 800307a:	f001 f941 	bl	8004300 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 800307e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003080:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	b29b      	uxth	r3, r3
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	2192      	movs	r1, #146	; 0x92
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f937 	bl	8004300 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8003092:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003094:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	b29b      	uxth	r3, r3
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	2193      	movs	r1, #147	; 0x93
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 f92d 	bl	8004300 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80030a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80030a8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	2194      	movs	r1, #148	; 0x94
 80030b4:	4618      	mov	r0, r3
 80030b6:	f001 f923 	bl	8004300 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80030ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	b29b      	uxth	r3, r3
 80030c0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	218c      	movs	r1, #140	; 0x8c
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f917 	bl	8004300 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 80030d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030d4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	b29b      	uxth	r3, r3
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	218d      	movs	r1, #141	; 0x8d
 80030e0:	4618      	mov	r0, r3
 80030e2:	f001 f90d 	bl	8004300 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80030e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	218e      	movs	r1, #142	; 0x8e
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 f901 	bl	8004300 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 80030fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003100:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	b29b      	uxth	r3, r3
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	218f      	movs	r1, #143	; 0x8f
 800310c:	4618      	mov	r0, r3
 800310e:	f001 f8f7 	bl	8004300 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8003112:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003116:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	b29b      	uxth	r3, r3
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	2196      	movs	r1, #150	; 0x96
 8003122:	4618      	mov	r0, r3
 8003124:	f001 f8ec 	bl	8004300 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003128:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800312c:	b25b      	sxtb	r3, r3
 800312e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003132:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8003134:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003138:	b25b      	sxtb	r3, r3
 800313a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003140:	4313      	orrs	r3, r2
 8003142:	b25b      	sxtb	r3, r3
 8003144:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	b29b      	uxth	r3, r3
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	2197      	movs	r1, #151	; 0x97
 8003150:	4618      	mov	r0, r3
 8003152:	f001 f8d5 	bl	8004300 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8003156:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800315a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	b29b      	uxth	r3, r3
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	2198      	movs	r1, #152	; 0x98
 8003166:	4618      	mov	r0, r3
 8003168:	f001 f8ca 	bl	8004300 <MFX_IO_Write>
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003176:	b004      	add	sp, #16
 8003178:	4770      	bx	lr

0800317a <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	6039      	str	r1, [r7, #0]
 8003184:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	b298      	uxth	r0, r3
 800318c:	f107 020c 	add.w	r2, r7, #12
 8003190:	2303      	movs	r3, #3
 8003192:	2114      	movs	r1, #20
 8003194:	f001 f8dc 	bl	8004350 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8003198:	7b3b      	ldrb	r3, [r7, #12]
 800319a:	041a      	lsls	r2, r3, #16
 800319c:	7b7b      	ldrb	r3, [r7, #13]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	4313      	orrs	r3, r2
 80031a2:	7bba      	ldrb	r2, [r7, #14]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	461a      	mov	r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]

}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80031be:	f001 f839 	bl	8004234 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2102      	movs	r1, #2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f944 	bl	8002454 <mfxstm32l152_EnableITSource>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2102      	movs	r1, #2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f98f 	bl	8002506 <mfxstm32l152_ClearGlobalIT>
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2102      	movs	r1, #2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f96b 	bl	80024da <mfxstm32l152_GlobalITStatus>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f938 	bl	8002492 <mfxstm32l152_DisableITSource>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	b29b      	uxth	r3, r3
 800323a:	2103      	movs	r1, #3
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f873 	bl	8004328 <MFX_IO_Read>
 8003242:	4603      	mov	r3, r0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	b29b      	uxth	r3, r3
 800325c:	2104      	movs	r1, #4
 800325e:	4618      	mov	r0, r3
 8003260:	f001 f862 	bl	8004328 <MFX_IO_Read>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003278:	f000 ffdc 	bl	8004234 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	2104      	movs	r1, #4
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f8e7 	bl	8002454 <mfxstm32l152_EnableITSource>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2104      	movs	r1, #4
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f932 	bl	8002506 <mfxstm32l152_ClearGlobalIT>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	2104      	movs	r1, #4
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f90e 	bl	80024da <mfxstm32l152_GlobalITStatus>
 80032be:	4603      	mov	r3, r0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	2104      	movs	r1, #4
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff f8db 	bl	8002492 <mfxstm32l152_DisableITSource>
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e00b      	b.n	800330c <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <mfxstm32l152_GetInstance+0x3c>)
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	88fa      	ldrh	r2, [r7, #6]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d101      	bne.n	8003306 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	e006      	b.n	8003314 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	3301      	adds	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d9f0      	bls.n	80032f4 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8003312:	23ff      	movs	r3, #255	; 0xff
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	20000a10 	.word	0x20000a10

08003324 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e00f      	b.n	8003354 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <mfxstm32l152_ReleaseInstance+0x44>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	b29b      	uxth	r3, r3
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	429a      	cmp	r2, r3
 8003340:	d105      	bne.n	800334e <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	4a08      	ldr	r2, [pc, #32]	; (8003368 <mfxstm32l152_ReleaseInstance+0x44>)
 8003346:	2100      	movs	r1, #0
 8003348:	54d1      	strb	r1, [r2, r3]
      return idx;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	e006      	b.n	800335c <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	3301      	adds	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d9ec      	bls.n	8003334 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800335a:	23ff      	movs	r3, #255	; 0xff
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	20000a10 	.word	0x20000a10

0800336c <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	603a      	str	r2, [r7, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
 800337a:	460b      	mov	r3, r1
 800337c:	717b      	strb	r3, [r7, #5]
 800337e:	4613      	mov	r3, r2
 8003380:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8003396:	7bbb      	ldrb	r3, [r7, #14]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01e      	beq.n	80033da <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 800339c:	797a      	ldrb	r2, [r7, #5]
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 ffc0 	bl	8004328 <MFX_IO_Read>
 80033a8:	4603      	mov	r3, r0
 80033aa:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80033ac:	793b      	ldrb	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	7bbb      	ldrb	r3, [r7, #14]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e008      	b.n	80033ce <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80033bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	b25a      	sxtb	r2, r3
 80033c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	7979      	ldrb	r1, [r7, #5]
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 ff93 	bl	8004300 <MFX_IO_Write>
  }

  if (pin_8_15)
 80033da:	7b7b      	ldrb	r3, [r7, #13]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d022      	beq.n	8003426 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80033e0:	797b      	ldrb	r3, [r7, #5]
 80033e2:	3301      	adds	r3, #1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 ff9c 	bl	8004328 <MFX_IO_Read>
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80033f4:	793b      	ldrb	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	7b7b      	ldrb	r3, [r7, #13]
 80033fe:	4313      	orrs	r3, r2
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e008      	b.n	8003416 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8003404:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003408:	43db      	mvns	r3, r3
 800340a:	b25a      	sxtb	r2, r3
 800340c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003410:	4013      	ands	r3, r2
 8003412:	b25b      	sxtb	r3, r3
 8003414:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8003416:	797b      	ldrb	r3, [r7, #5]
 8003418:	3301      	adds	r3, #1
 800341a:	b2d9      	uxtb	r1, r3
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 ff6d 	bl	8004300 <MFX_IO_Write>
  }

  if (pin_16_23)
 8003426:	7b3b      	ldrb	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d022      	beq.n	8003472 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 800342c:	797b      	ldrb	r3, [r7, #5]
 800342e:	3302      	adds	r3, #2
 8003430:	b2da      	uxtb	r2, r3
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 ff76 	bl	8004328 <MFX_IO_Read>
 800343c:	4603      	mov	r3, r0
 800343e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003440:	793b      	ldrb	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	7b3b      	ldrb	r3, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e008      	b.n	8003462 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8003450:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003454:	43db      	mvns	r3, r3
 8003456:	b25a      	sxtb	r2, r3
 8003458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345c:	4013      	ands	r3, r2
 800345e:	b25b      	sxtb	r3, r3
 8003460:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8003462:	797b      	ldrb	r3, [r7, #5]
 8003464:	3302      	adds	r3, #2
 8003466:	b2d9      	uxtb	r1, r3
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 ff47 	bl	8004300 <MFX_IO_Write>
  }
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003480:	f001 f888 	bl	8004594 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8003484:	2200      	movs	r2, #0
 8003486:	2100      	movs	r1, #0
 8003488:	2010      	movs	r0, #16
 800348a:	f000 f9e4 	bl	8003856 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800348e:	200a      	movs	r0, #10
 8003490:	f001 f8a7 	bl	80045e2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8003494:	2200      	movs	r2, #0
 8003496:	2100      	movs	r1, #0
 8003498:	2001      	movs	r0, #1
 800349a:	f000 f9dc 	bl	8003856 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800349e:	20c8      	movs	r0, #200	; 0xc8
 80034a0:	f001 f89f 	bl	80045e2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80034a4:	2200      	movs	r2, #0
 80034a6:	2100      	movs	r1, #0
 80034a8:	2011      	movs	r0, #17
 80034aa:	f000 f9d4 	bl	8003856 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80034ae:	2078      	movs	r0, #120	; 0x78
 80034b0:	f001 f897 	bl	80045e2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80034b4:	2300      	movs	r3, #0
 80034b6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80034b8:	463b      	mov	r3, r7
 80034ba:	2201      	movs	r2, #1
 80034bc:	4619      	mov	r1, r3
 80034be:	2036      	movs	r0, #54	; 0x36
 80034c0:	f000 f9c9 	bl	8003856 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80034c4:	2305      	movs	r3, #5
 80034c6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80034c8:	463b      	mov	r3, r7
 80034ca:	2201      	movs	r2, #1
 80034cc:	4619      	mov	r1, r3
 80034ce:	203a      	movs	r0, #58	; 0x3a
 80034d0:	f000 f9c1 	bl	8003856 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	2021      	movs	r0, #33	; 0x21
 80034da:	f000 f9bc 	bl	8003856 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80034de:	2300      	movs	r3, #0
 80034e0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80034e2:	2300      	movs	r3, #0
 80034e4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80034e6:	2300      	movs	r3, #0
 80034e8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80034ea:	23ef      	movs	r3, #239	; 0xef
 80034ec:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80034ee:	463b      	mov	r3, r7
 80034f0:	2204      	movs	r2, #4
 80034f2:	4619      	mov	r1, r3
 80034f4:	202a      	movs	r0, #42	; 0x2a
 80034f6:	f000 f9ae 	bl	8003856 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80034fa:	2300      	movs	r3, #0
 80034fc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80034fe:	2300      	movs	r3, #0
 8003500:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8003502:	2300      	movs	r3, #0
 8003504:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8003506:	23ef      	movs	r3, #239	; 0xef
 8003508:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800350a:	463b      	mov	r3, r7
 800350c:	2204      	movs	r2, #4
 800350e:	4619      	mov	r1, r3
 8003510:	202b      	movs	r0, #43	; 0x2b
 8003512:	f000 f9a0 	bl	8003856 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8003516:	230c      	movs	r3, #12
 8003518:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800351a:	230c      	movs	r3, #12
 800351c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800351e:	2300      	movs	r3, #0
 8003520:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8003522:	2333      	movs	r3, #51	; 0x33
 8003524:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8003526:	2333      	movs	r3, #51	; 0x33
 8003528:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800352a:	463b      	mov	r3, r7
 800352c:	2205      	movs	r2, #5
 800352e:	4619      	mov	r1, r3
 8003530:	20b2      	movs	r0, #178	; 0xb2
 8003532:	f000 f990 	bl	8003856 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8003536:	2335      	movs	r3, #53	; 0x35
 8003538:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800353a:	463b      	mov	r3, r7
 800353c:	2201      	movs	r2, #1
 800353e:	4619      	mov	r1, r3
 8003540:	20b7      	movs	r0, #183	; 0xb7
 8003542:	f000 f988 	bl	8003856 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8003546:	231f      	movs	r3, #31
 8003548:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800354a:	463b      	mov	r3, r7
 800354c:	2201      	movs	r2, #1
 800354e:	4619      	mov	r1, r3
 8003550:	20bb      	movs	r0, #187	; 0xbb
 8003552:	f000 f980 	bl	8003856 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8003556:	232c      	movs	r3, #44	; 0x2c
 8003558:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800355a:	463b      	mov	r3, r7
 800355c:	2201      	movs	r2, #1
 800355e:	4619      	mov	r1, r3
 8003560:	20c0      	movs	r0, #192	; 0xc0
 8003562:	f000 f978 	bl	8003856 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8003566:	2301      	movs	r3, #1
 8003568:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 800356a:	23c3      	movs	r3, #195	; 0xc3
 800356c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 800356e:	463b      	mov	r3, r7
 8003570:	2202      	movs	r2, #2
 8003572:	4619      	mov	r1, r3
 8003574:	20c2      	movs	r0, #194	; 0xc2
 8003576:	f000 f96e 	bl	8003856 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800357a:	2320      	movs	r3, #32
 800357c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 800357e:	463b      	mov	r3, r7
 8003580:	2201      	movs	r2, #1
 8003582:	4619      	mov	r1, r3
 8003584:	20c4      	movs	r0, #196	; 0xc4
 8003586:	f000 f966 	bl	8003856 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 800358a:	230f      	movs	r3, #15
 800358c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 800358e:	463b      	mov	r3, r7
 8003590:	2201      	movs	r2, #1
 8003592:	4619      	mov	r1, r3
 8003594:	20c6      	movs	r0, #198	; 0xc6
 8003596:	f000 f95e 	bl	8003856 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 800359a:	23a4      	movs	r3, #164	; 0xa4
 800359c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 800359e:	23a1      	movs	r3, #161	; 0xa1
 80035a0:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 80035a2:	463b      	mov	r3, r7
 80035a4:	2202      	movs	r2, #2
 80035a6:	4619      	mov	r1, r3
 80035a8:	20d0      	movs	r0, #208	; 0xd0
 80035aa:	f000 f954 	bl	8003856 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80035ae:	23d0      	movs	r3, #208	; 0xd0
 80035b0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80035b2:	2308      	movs	r3, #8
 80035b4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80035b6:	2311      	movs	r3, #17
 80035b8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80035ba:	2308      	movs	r3, #8
 80035bc:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80035be:	230c      	movs	r3, #12
 80035c0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80035c2:	2315      	movs	r3, #21
 80035c4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80035c6:	2339      	movs	r3, #57	; 0x39
 80035c8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80035ca:	2333      	movs	r3, #51	; 0x33
 80035cc:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80035ce:	2350      	movs	r3, #80	; 0x50
 80035d0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80035d2:	2336      	movs	r3, #54	; 0x36
 80035d4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80035d6:	2313      	movs	r3, #19
 80035d8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80035da:	2314      	movs	r3, #20
 80035dc:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80035de:	2329      	movs	r3, #41	; 0x29
 80035e0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80035e2:	232d      	movs	r3, #45	; 0x2d
 80035e4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80035e6:	463b      	mov	r3, r7
 80035e8:	220e      	movs	r2, #14
 80035ea:	4619      	mov	r1, r3
 80035ec:	20e0      	movs	r0, #224	; 0xe0
 80035ee:	f000 f932 	bl	8003856 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80035f2:	23d0      	movs	r3, #208	; 0xd0
 80035f4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80035f6:	2308      	movs	r3, #8
 80035f8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80035fa:	2310      	movs	r3, #16
 80035fc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80035fe:	2308      	movs	r3, #8
 8003600:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8003602:	2306      	movs	r3, #6
 8003604:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8003606:	2306      	movs	r3, #6
 8003608:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800360a:	2339      	movs	r3, #57	; 0x39
 800360c:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 800360e:	2344      	movs	r3, #68	; 0x44
 8003610:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8003612:	2351      	movs	r3, #81	; 0x51
 8003614:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8003616:	230b      	movs	r3, #11
 8003618:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800361a:	2316      	movs	r3, #22
 800361c:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800361e:	2314      	movs	r3, #20
 8003620:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8003622:	232f      	movs	r3, #47	; 0x2f
 8003624:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8003626:	2331      	movs	r3, #49	; 0x31
 8003628:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800362a:	463b      	mov	r3, r7
 800362c:	220e      	movs	r2, #14
 800362e:	4619      	mov	r1, r3
 8003630:	20e1      	movs	r0, #225	; 0xe1
 8003632:	f000 f910 	bl	8003856 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8003636:	f000 f847 	bl	80036c8 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800363a:	2300      	movs	r3, #0
 800363c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800363e:	463b      	mov	r3, r7
 8003640:	2201      	movs	r2, #1
 8003642:	4619      	mov	r1, r3
 8003644:	2035      	movs	r0, #53	; 0x35
 8003646:	f000 f906 	bl	8003856 <ST7789H2_WriteReg>

}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d102      	bne.n	8003666 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8003660:	2300      	movs	r3, #0
 8003662:	723b      	strb	r3, [r7, #8]
 8003664:	e025      	b.n	80036b2 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d120      	bne.n	80036ae <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 800366c:	2300      	movs	r3, #0
 800366e:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8003670:	2300      	movs	r3, #0
 8003672:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8003674:	2301      	movs	r3, #1
 8003676:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8003678:	23f0      	movs	r3, #240	; 0xf0
 800367a:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 800367c:	2300      	movs	r3, #0
 800367e:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8003680:	2300      	movs	r3, #0
 8003682:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8003684:	f107 0308 	add.w	r3, r7, #8
 8003688:	2206      	movs	r2, #6
 800368a:	4619      	mov	r1, r3
 800368c:	2033      	movs	r0, #51	; 0x33
 800368e:	f000 f8e2 	bl	8003856 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8003692:	2300      	movs	r3, #0
 8003694:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8003696:	2350      	movs	r3, #80	; 0x50
 8003698:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	2202      	movs	r2, #2
 80036a0:	4619      	mov	r1, r3
 80036a2:	2037      	movs	r0, #55	; 0x37
 80036a4:	f000 f8d7 	bl	8003856 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80036a8:	23c0      	movs	r3, #192	; 0xc0
 80036aa:	723b      	strb	r3, [r7, #8]
 80036ac:	e001      	b.n	80036b2 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80036ae:	2360      	movs	r3, #96	; 0x60
 80036b0:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80036b2:	f107 0308 	add.w	r3, r7, #8
 80036b6:	2201      	movs	r2, #1
 80036b8:	4619      	mov	r1, r3
 80036ba:	2036      	movs	r0, #54	; 0x36
 80036bc:	f000 f8cb 	bl	8003856 <ST7789H2_WriteReg>
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2100      	movs	r1, #0
 80036d0:	2029      	movs	r0, #41	; 0x29
 80036d2:	f000 f8c0 	bl	8003856 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	2011      	movs	r0, #17
 80036dc:	f000 f8bb 	bl	8003856 <ST7789H2_WriteReg>
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80036ea:	23fe      	movs	r3, #254	; 0xfe
 80036ec:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	2201      	movs	r2, #1
 80036f2:	4619      	mov	r1, r3
 80036f4:	20bd      	movs	r0, #189	; 0xbd
 80036f6:	f000 f8ae 	bl	8003856 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80036fa:	2200      	movs	r2, #0
 80036fc:	2100      	movs	r1, #0
 80036fe:	2010      	movs	r0, #16
 8003700:	f000 f8a9 	bl	8003856 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8003704:	200a      	movs	r0, #10
 8003706:	f000 ff6c 	bl	80045e2 <LCD_IO_Delay>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8003716:	23f0      	movs	r3, #240	; 0xf0
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8003726:	23f0      	movs	r3, #240	; 0xf0
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003736:	f000 ff2d 	bl	8004594 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800373a:	2004      	movs	r0, #4
 800373c:	f000 f8ae 	bl	800389c <ST7789H2_ReadReg>
 8003740:	4603      	mov	r3, r0
 8003742:	b29b      	uxth	r3, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}

08003748 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	460a      	mov	r2, r1
 8003752:	80fb      	strh	r3, [r7, #6]
 8003754:	4613      	mov	r3, r2
 8003756:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8003758:	2300      	movs	r3, #0
 800375a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8003762:	2300      	movs	r3, #0
 8003764:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	3b11      	subs	r3, #17
 800376c:	b2db      	uxtb	r3, r3
 800376e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	2204      	movs	r2, #4
 8003776:	4619      	mov	r1, r3
 8003778:	202a      	movs	r0, #42	; 0x2a
 800377a:	f000 f86c 	bl	8003856 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 800377e:	2300      	movs	r3, #0
 8003780:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8003782:	88bb      	ldrh	r3, [r7, #4]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8003788:	2300      	movs	r3, #0
 800378a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 800378c:	88bb      	ldrh	r3, [r7, #4]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3b11      	subs	r3, #17
 8003792:	b2db      	uxtb	r3, r3
 8003794:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8003796:	f107 030c 	add.w	r3, r7, #12
 800379a:	2204      	movs	r2, #4
 800379c:	4619      	mov	r1, r3
 800379e:	202b      	movs	r0, #43	; 0x2b
 80037a0:	f000 f859 	bl	8003856 <ST7789H2_WriteReg>
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
 80037b6:	460b      	mov	r3, r1
 80037b8:	80bb      	strh	r3, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80037be:	88ba      	ldrh	r2, [r7, #4]
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ffbf 	bl	8003748 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80037ca:	2200      	movs	r2, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	202c      	movs	r0, #44	; 0x2c
 80037d0:	f000 f841 	bl	8003856 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fee2 	bl	80045a0 <LCD_IO_WriteData>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	460a      	mov	r2, r1
 80037ee:	80fb      	strh	r3, [r7, #6]
 80037f0:	4613      	mov	r3, r2
 80037f2:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80037f4:	88ba      	ldrh	r2, [r7, #4]
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff ffa4 	bl	8003748 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8003800:	88ba      	ldrh	r2, [r7, #4]
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f9c0 	bl	8003b8c <ST7789H2_ReadPixel_rgb888>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	733a      	strb	r2, [r7, #12]
 8003812:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003816:	737a      	strb	r2, [r7, #13]
 8003818:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800381c:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800381e:	7b3b      	ldrb	r3, [r7, #12]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8003824:	7b7b      	ldrb	r3, [r7, #13]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800382a:	7bbb      	ldrb	r3, [r7, #14]
 800382c:	08db      	lsrs	r3, r3, #3
 800382e:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	b29b      	uxth	r3, r3
 8003834:	02db      	lsls	r3, r3, #11
 8003836:	b29a      	uxth	r2, r3
 8003838:	7dbb      	ldrb	r3, [r7, #22]
 800383a:	b29b      	uxth	r3, r3
 800383c:	015b      	lsls	r3, r3, #5
 800383e:	b29b      	uxth	r3, r3
 8003840:	4413      	add	r3, r2
 8003842:	b29a      	uxth	r2, r3
 8003844:	7d7b      	ldrb	r3, [r7, #21]
 8003846:	b29b      	uxth	r3, r3
 8003848:	4413      	add	r3, r2
 800384a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800384c:	8a7b      	ldrh	r3, [r7, #18]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	6039      	str	r1, [r7, #0]
 8003860:	71fb      	strb	r3, [r7, #7]
 8003862:	4613      	mov	r3, r2
 8003864:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fea6 	bl	80045ba <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e00a      	b.n	800388a <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	4413      	add	r3, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fe8e 	bl	80045a0 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	3301      	adds	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	79bb      	ldrb	r3, [r7, #6]
 800388e:	429a      	cmp	r2, r3
 8003890:	d3f0      	bcc.n	8003874 <ST7789H2_WriteReg+0x1e>
  }
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fe86 	bl	80045ba <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80038ae:	f000 fe91 	bl	80045d4 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80038b2:	f000 fe8f 	bl	80045d4 <LCD_IO_ReadData>
 80038b6:	4603      	mov	r3, r0
 80038b8:	b2db      	uxtb	r3, r3
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80038c4:	b490      	push	{r4, r7}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4604      	mov	r4, r0
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	4623      	mov	r3, r4
 80038d4:	80fb      	strh	r3, [r7, #6]
 80038d6:	4603      	mov	r3, r0
 80038d8:	80bb      	strh	r3, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	807b      	strh	r3, [r7, #2]
 80038de:	4613      	mov	r3, r2
 80038e0:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	2bef      	cmp	r3, #239	; 0xef
 80038e6:	d803      	bhi.n	80038f0 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <ST7789H2_SetDisplayWindow+0x94>)
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	8013      	strh	r3, [r2, #0]
 80038ee:	e002      	b.n	80038f6 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <ST7789H2_SetDisplayWindow+0x94>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80038f6:	88bb      	ldrh	r3, [r7, #4]
 80038f8:	2bef      	cmp	r3, #239	; 0xef
 80038fa:	d803      	bhi.n	8003904 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <ST7789H2_SetDisplayWindow+0x98>)
 80038fe:	88bb      	ldrh	r3, [r7, #4]
 8003900:	8013      	strh	r3, [r2, #0]
 8003902:	e002      	b.n	800390a <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <ST7789H2_SetDisplayWindow+0x98>)
 8003906:	2200      	movs	r2, #0
 8003908:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	4413      	add	r3, r2
 8003910:	2bf0      	cmp	r3, #240	; 0xf0
 8003912:	dc08      	bgt.n	8003926 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8003914:	887a      	ldrh	r2, [r7, #2]
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	4413      	add	r3, r2
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <ST7789H2_SetDisplayWindow+0x9c>)
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	e002      	b.n	800392c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8003926:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <ST7789H2_SetDisplayWindow+0x9c>)
 8003928:	22ef      	movs	r2, #239	; 0xef
 800392a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800392c:	883a      	ldrh	r2, [r7, #0]
 800392e:	88bb      	ldrh	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	2bf0      	cmp	r3, #240	; 0xf0
 8003934:	dc08      	bgt.n	8003948 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8003936:	883a      	ldrh	r2, [r7, #0]
 8003938:	88bb      	ldrh	r3, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <ST7789H2_SetDisplayWindow+0xa0>)
 8003944:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8003946:	e002      	b.n	800394e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <ST7789H2_SetDisplayWindow+0xa0>)
 800394a:	22ef      	movs	r2, #239	; 0xef
 800394c:	801a      	strh	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bc90      	pop	{r4, r7}
 8003956:	4770      	bx	lr
 8003958:	20000a14 	.word	0x20000a14
 800395c:	20000a16 	.word	0x20000a16
 8003960:	200000b4 	.word	0x200000b4
 8003964:	200000b6 	.word	0x200000b6

08003968 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	4604      	mov	r4, r0
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	461a      	mov	r2, r3
 8003976:	4623      	mov	r3, r4
 8003978:	80fb      	strh	r3, [r7, #6]
 800397a:	4603      	mov	r3, r0
 800397c:	80bb      	strh	r3, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	807b      	strh	r3, [r7, #2]
 8003982:	4613      	mov	r3, r2
 8003984:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	88bb      	ldrh	r3, [r7, #4]
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fedb 	bl	8003748 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003992:	2200      	movs	r2, #0
 8003994:	2100      	movs	r1, #0
 8003996:	202c      	movs	r0, #44	; 0x2c
 8003998:	f7ff ff5d 	bl	8003856 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 800399c:	2300      	movs	r3, #0
 800399e:	81fb      	strh	r3, [r7, #14]
 80039a0:	e006      	b.n	80039b0 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fdfb 	bl	80045a0 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80039aa:	89fb      	ldrh	r3, [r7, #14]
 80039ac:	3301      	adds	r3, #1
 80039ae:	81fb      	strh	r3, [r7, #14]
 80039b0:	89fa      	ldrh	r2, [r7, #14]
 80039b2:	883b      	ldrh	r3, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d3f4      	bcc.n	80039a2 <ST7789H2_DrawHLine+0x3a>
  }  
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}

080039c2 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80039c2:	b590      	push	{r4, r7, lr}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	4604      	mov	r4, r0
 80039ca:	4608      	mov	r0, r1
 80039cc:	4611      	mov	r1, r2
 80039ce:	461a      	mov	r2, r3
 80039d0:	4623      	mov	r3, r4
 80039d2:	80fb      	strh	r3, [r7, #6]
 80039d4:	4603      	mov	r3, r0
 80039d6:	80bb      	strh	r3, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
 80039dc:	4613      	mov	r3, r2
 80039de:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80039e0:	887a      	ldrh	r2, [r7, #2]
 80039e2:	88bb      	ldrh	r3, [r7, #4]
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff feae 	bl	8003748 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80039ec:	2200      	movs	r2, #0
 80039ee:	2100      	movs	r1, #0
 80039f0:	202c      	movs	r0, #44	; 0x2c
 80039f2:	f7ff ff30 	bl	8003856 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	81fb      	strh	r3, [r7, #14]
 80039fa:	e00b      	b.n	8003a14 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80039fc:	887a      	ldrh	r2, [r7, #2]
 80039fe:	89fb      	ldrh	r3, [r7, #14]
 8003a00:	4413      	add	r3, r2
 8003a02:	b299      	uxth	r1, r3
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	88bb      	ldrh	r3, [r7, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fecf 	bl	80037ac <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8003a0e:	89fb      	ldrh	r3, [r7, #14]
 8003a10:	3301      	adds	r3, #1
 8003a12:	81fb      	strh	r3, [r7, #14]
 8003a14:	89fa      	ldrh	r2, [r7, #14]
 8003a16:	883b      	ldrh	r3, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3ef      	bcc.n	80039fc <ST7789H2_DrawVLine+0x3a>
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}
	...

08003a28 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	603a      	str	r2, [r7, #0]
 8003a32:	80fb      	strh	r3, [r7, #6]
 8003a34:	460b      	mov	r3, r1
 8003a36:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8003a44:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <ST7789H2_DrawBitmap+0xe0>)
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <ST7789H2_DrawBitmap+0xe4>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8003a54:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <ST7789H2_DrawBitmap+0xe8>)
 8003a56:	881a      	ldrh	r2, [r3, #0]
 8003a58:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <ST7789H2_DrawBitmap+0xec>)
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	3302      	adds	r3, #2
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	3304      	adds	r3, #4
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	461a      	mov	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	330a      	adds	r3, #10
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	461a      	mov	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4413      	add	r3, r2
 8003aac:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003aae:	88ba      	ldrh	r2, [r7, #4]
 8003ab0:	89bb      	ldrh	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	e01d      	b.n	8003af4 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fe3f 	bl	8003748 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b299      	uxth	r1, r3
 8003ad2:	89fb      	ldrh	r3, [r7, #14]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	4413      	add	r3, r2
 8003ae0:	89fa      	ldrh	r2, [r7, #14]
 8003ae2:	88f8      	ldrh	r0, [r7, #6]
 8003ae4:	f000 f89c 	bl	8003c20 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	88bb      	ldrh	r3, [r7, #4]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d8dd      	bhi.n	8003ab8 <ST7789H2_DrawBitmap+0x90>
  }
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200000b4 	.word	0x200000b4
 8003b0c:	20000a14 	.word	0x20000a14
 8003b10:	200000b6 	.word	0x200000b6
 8003b14:	20000a16 	.word	0x20000a16

08003b18 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4623      	mov	r3, r4
 8003b28:	80fb      	strh	r3, [r7, #6]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	80bb      	strh	r3, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	807b      	strh	r3, [r7, #2]
 8003b32:	4613      	mov	r3, r2
 8003b34:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003b3a:	88bb      	ldrh	r3, [r7, #4]
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e019      	b.n	8003b74 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fdfd 	bl	8003748 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	b299      	uxth	r1, r3
 8003b52:	887b      	ldrh	r3, [r7, #2]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	4413      	add	r3, r2
 8003b60:	887a      	ldrh	r2, [r7, #2]
 8003b62:	88f8      	ldrh	r0, [r7, #6]
 8003b64:	f000 f85c 	bl	8003c20 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	88ba      	ldrh	r2, [r7, #4]
 8003b76:	883b      	ldrh	r3, [r7, #0]
 8003b78:	4413      	add	r3, r2
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d3de      	bcc.n	8003b40 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd90      	pop	{r4, r7, pc}

08003b8c <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	460a      	mov	r2, r1
 8003b96:	80fb      	strh	r3, [r7, #6]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003b9c:	88ba      	ldrh	r2, [r7, #4]
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fdd0 	bl	8003748 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2100      	movs	r1, #0
 8003bac:	202e      	movs	r0, #46	; 0x2e
 8003bae:	f7ff fe52 	bl	8003856 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8003bb2:	f000 fd0f 	bl	80045d4 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8003bb6:	f000 fd0d 	bl	80045d4 <LCD_IO_ReadData>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8003bbe:	f000 fd09 	bl	80045d4 <LCD_IO_ReadData>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8003bc6:	8afb      	ldrh	r3, [r7, #22]
 8003bc8:	121b      	asrs	r3, r3, #8
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f023 0303 	bic.w	r3, r3, #3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8003bd4:	8afb      	ldrh	r3, [r7, #22]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f023 0303 	bic.w	r3, r3, #3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8003be0:	8abb      	ldrh	r3, [r7, #20]
 8003be2:	121b      	asrs	r3, r3, #8
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8003bee:	f107 0310 	add.w	r3, r7, #16
 8003bf2:	f107 020c 	add.w	r2, r7, #12
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	8019      	strh	r1, [r3, #0]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	0c12      	lsrs	r2, r2, #16
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	7c3a      	ldrb	r2, [r7, #16]
 8003c06:	f362 0307 	bfi	r3, r2, #0, #8
 8003c0a:	7c7a      	ldrb	r2, [r7, #17]
 8003c0c:	f362 230f 	bfi	r3, r2, #8, #8
 8003c10:	7cba      	ldrb	r2, [r7, #18]
 8003c12:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	4603      	mov	r3, r0
 8003c2a:	81fb      	strh	r3, [r7, #14]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	81bb      	strh	r3, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2100      	movs	r1, #0
 8003c40:	202c      	movs	r0, #44	; 0x2c
 8003c42:	f7ff fe08 	bl	8003856 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e029      	b.n	8003ca0 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <ST7789H2_DrawRGBHLine+0x98>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d320      	bcc.n	8003c9a <ST7789H2_DrawRGBHLine+0x7a>
 8003c58:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <ST7789H2_DrawRGBHLine+0x9c>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	89ba      	ldrh	r2, [r7, #12]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d31b      	bcc.n	8003c9a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003c62:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <ST7789H2_DrawRGBHLine+0xa0>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d815      	bhi.n	8003c9a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <ST7789H2_DrawRGBHLine+0xa4>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	89ba      	ldrh	r2, [r7, #12]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d810      	bhi.n	8003c9a <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8003c78:	897a      	ldrh	r2, [r7, #10]
 8003c7a:	89fb      	ldrh	r3, [r7, #14]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d007      	beq.n	8003c94 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fc86 	bl	80045a0 <LCD_IO_WriteData>
      }      
      i++;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	3301      	adds	r3, #1
 8003c98:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	897a      	ldrh	r2, [r7, #10]
 8003ca2:	89fb      	ldrh	r3, [r7, #14]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d3ce      	bcc.n	8003c4c <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	3720      	adds	r7, #32
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000a14 	.word	0x20000a14
 8003cbc:	20000a16 	.word	0x20000a16
 8003cc0:	200000b4 	.word	0x200000b4
 8003cc4:	200000b6 	.word	0x200000b6

08003cc8 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  while (1);
 8003ccc:	e7fe      	b.n	8003ccc <BSP_ErrorHandler+0x4>
	...

08003cd0 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d124      	bne.n	8003d2a <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <BSP_LED_Init+0x90>)
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <BSP_LED_Init+0x90>)
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cec:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <BSP_LED_Init+0x90>)
 8003cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <BSP_LED_Init+0x94>)
 8003cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003d02:	2301      	movs	r3, #1
 8003d04:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	4619      	mov	r1, r3
 8003d14:	4814      	ldr	r0, [pc, #80]	; (8003d68 <BSP_LED_Init+0x98>)
 8003d16:	f002 fb6b 	bl	80063f0 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4619      	mov	r1, r3
 8003d22:	4811      	ldr	r0, [pc, #68]	; (8003d68 <BSP_LED_Init+0x98>)
 8003d24:	f002 fde8 	bl	80068f8 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8003d28:	e016      	b.n	8003d58 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 8003d2a:	f000 fc65 	bl	80045f8 <BSP_IO_Init>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 8003d34:	f7ff ffc8 	bl	8003cc8 <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <BSP_LED_Init+0x94>)
 8003d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fc9c 	bl	8004680 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <BSP_LED_Init+0x94>)
 8003d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fcb0 	bl	80046b8 <BSP_IO_WritePin>
}
 8003d58:	bf00      	nop
 8003d5a:	3720      	adds	r7, #32
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	08011538 	.word	0x08011538
 8003d68:	48000400 	.word	0x48000400

08003d6c <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d109      	bne.n	8003d90 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <BSP_LED_On+0x3c>)
 8003d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d84:	2200      	movs	r2, #0
 8003d86:	4619      	mov	r1, r3
 8003d88:	4808      	ldr	r0, [pc, #32]	; (8003dac <BSP_LED_On+0x40>)
 8003d8a:	f002 fdb5 	bl	80068f8 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 8003d8e:	e007      	b.n	8003da0 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <BSP_LED_On+0x3c>)
 8003d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fc8c 	bl	80046b8 <BSP_IO_WritePin>
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	08011538 	.word	0x08011538
 8003dac:	48000400 	.word	0x48000400

08003db0 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d109      	bne.n	8003dd4 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <BSP_LED_Off+0x3c>)
 8003dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4808      	ldr	r0, [pc, #32]	; (8003df0 <BSP_LED_Off+0x40>)
 8003dce:	f002 fd93 	bl	80068f8 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 8003dd2:	e007      	b.n	8003de4 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	4a05      	ldr	r2, [pc, #20]	; (8003dec <BSP_LED_Off+0x3c>)
 8003dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fc6a 	bl	80046b8 <BSP_IO_WritePin>
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08011538 	.word	0x08011538
 8003df0:	48000400 	.word	0x48000400

08003df4 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8003df8:	4812      	ldr	r0, [pc, #72]	; (8003e44 <I2C2_Init+0x50>)
 8003dfa:	f003 f9a0 	bl	800713e <HAL_I2C_GetState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11d      	bne.n	8003e40 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <I2C2_Init+0x50>)
 8003e06:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <I2C2_Init+0x54>)
 8003e08:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <I2C2_Init+0x50>)
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <I2C2_Init+0x58>)
 8003e0e:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <I2C2_Init+0x50>)
 8003e12:	2270      	movs	r2, #112	; 0x70
 8003e14:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <I2C2_Init+0x50>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <I2C2_Init+0x50>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <I2C2_Init+0x50>)
 8003e24:	22ff      	movs	r2, #255	; 0xff
 8003e26:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <I2C2_Init+0x50>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003e2e:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <I2C2_Init+0x50>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8003e34:	4803      	ldr	r0, [pc, #12]	; (8003e44 <I2C2_Init+0x50>)
 8003e36:	f000 f80b 	bl	8003e50 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8003e3a:	4802      	ldr	r0, [pc, #8]	; (8003e44 <I2C2_Init+0x50>)
 8003e3c:	f002 fd8c 	bl	8006958 <HAL_I2C_Init>
  }
}
 8003e40:	bf00      	nop
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000a18 	.word	0x20000a18
 8003e48:	40005800 	.word	0x40005800
 8003e4c:	40403e5d 	.word	0x40403e5d

08003e50 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0ae      	sub	sp, #184	; 0xb8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a37      	ldr	r2, [pc, #220]	; (8003f3c <I2C2_MspInit+0xec>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d168      	bne.n	8003f34 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8003e66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8003e6c:	f107 0318 	add.w	r3, r7, #24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f005 fe7f 	bl	8009b74 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8003e76:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e9a:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8003eac:	2312      	movs	r3, #18
 8003eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8003ec4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	481e      	ldr	r0, [pc, #120]	; (8003f44 <I2C2_MspInit+0xf4>)
 8003ecc:	f002 fa90 	bl	80063f0 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8003ed0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8003ed8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003edc:	4619      	mov	r1, r3
 8003ede:	481a      	ldr	r0, [pc, #104]	; (8003f48 <I2C2_MspInit+0xf8>)
 8003ee0:	f002 fa86 	bl	80063f0 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8003ee4:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eee:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	4a0f      	ldr	r2, [pc, #60]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f06:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <I2C2_MspInit+0xf0>)
 8003f0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003f12:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8003f14:	2200      	movs	r2, #0
 8003f16:	2100      	movs	r1, #0
 8003f18:	2021      	movs	r0, #33	; 0x21
 8003f1a:	f002 f892 	bl	8006042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8003f1e:	2021      	movs	r0, #33	; 0x21
 8003f20:	f002 f8ab 	bl	800607a <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8003f24:	2200      	movs	r2, #0
 8003f26:	2100      	movs	r1, #0
 8003f28:	2022      	movs	r0, #34	; 0x22
 8003f2a:	f002 f88a 	bl	8006042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8003f2e:	2022      	movs	r0, #34	; 0x22
 8003f30:	f002 f8a3 	bl	800607a <HAL_NVIC_EnableIRQ>
  }
}
 8003f34:	bf00      	nop
 8003f36:	37b8      	adds	r7, #184	; 0xb8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40005800 	.word	0x40005800
 8003f40:	40021000 	.word	0x40021000
 8003f44:	48001c00 	.word	0x48001c00
 8003f48:	48000400 	.word	0x48000400

08003f4c <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8003f50:	4806      	ldr	r0, [pc, #24]	; (8003f6c <I2C2_DeInit+0x20>)
 8003f52:	f003 f8f4 	bl	800713e <HAL_I2C_GetState>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8003f5c:	4803      	ldr	r0, [pc, #12]	; (8003f6c <I2C2_DeInit+0x20>)
 8003f5e:	f002 fd8a 	bl	8006a76 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8003f62:	4802      	ldr	r0, [pc, #8]	; (8003f6c <I2C2_DeInit+0x20>)
 8003f64:	f000 f804 	bl	8003f70 <I2C2_MspDeInit>
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000a18 	.word	0x20000a18

08003f70 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <I2C2_MspDeInit+0x8c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d138      	bne.n	8003ff4 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8003f82:	4b1f      	ldr	r3, [pc, #124]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8e:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	4a18      	ldr	r2, [pc, #96]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa6:	4b16      	ldr	r3, [pc, #88]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	4813      	ldr	r0, [pc, #76]	; (8004004 <I2C2_MspDeInit+0x94>)
 8003fb6:	f002 fbad 	bl	8006714 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8003fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fbe:	4812      	ldr	r0, [pc, #72]	; (8004008 <I2C2_MspDeInit+0x98>)
 8003fc0:	f002 fba8 	bl	8006714 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003fca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fce:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003fd6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003fda:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <I2C2_MspDeInit+0x90>)
 8003fe2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8003fe8:	2021      	movs	r0, #33	; 0x21
 8003fea:	f002 f854 	bl	8006096 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8003fee:	2022      	movs	r0, #34	; 0x22
 8003ff0:	f002 f851 	bl	8006096 <HAL_NVIC_DisableIRQ>
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40005800 	.word	0x40005800
 8004000:	40021000 	.word	0x40021000
 8004004:	48001c00 	.word	0x48001c00
 8004008:	48000400 	.word	0x48000400

0800400c <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af04      	add	r7, sp, #16
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4623      	mov	r3, r4
 800401c:	80fb      	strh	r3, [r7, #6]
 800401e:	4603      	mov	r3, r0
 8004020:	80bb      	strh	r3, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	807b      	strh	r3, [r7, #2]
 8004026:	4613      	mov	r3, r2
 8004028:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800402e:	b672      	cpsid	i
}
 8004030:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <I2C2_WriteData+0x5c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	8878      	ldrh	r0, [r7, #2]
 8004038:	88ba      	ldrh	r2, [r7, #4]
 800403a:	88f9      	ldrh	r1, [r7, #6]
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	2301      	movs	r3, #1
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	1c7b      	adds	r3, r7, #1
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	4603      	mov	r3, r0
 8004048:	4808      	ldr	r0, [pc, #32]	; (800406c <I2C2_WriteData+0x60>)
 800404a:	f002 fd43 	bl	8006ad4 <HAL_I2C_Mem_Write>
 800404e:	4603      	mov	r3, r0
 8004050:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004052:	b662      	cpsie	i
}
 8004054:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800405c:	f000 f890 	bl	8004180 <I2C2_Error>
  }
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}
 8004068:	200000b8 	.word	0x200000b8
 800406c:	20000a18 	.word	0x20000a18

08004070 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af04      	add	r7, sp, #16
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
 800407a:	460b      	mov	r3, r1
 800407c:	80bb      	strh	r3, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8004086:	2300      	movs	r3, #0
 8004088:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800408a:	b672      	cpsid	i
}
 800408c:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 800408e:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <I2C2_ReadData+0x60>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	8878      	ldrh	r0, [r7, #2]
 8004094:	88ba      	ldrh	r2, [r7, #4]
 8004096:	88f9      	ldrh	r1, [r7, #6]
 8004098:	9302      	str	r3, [sp, #8]
 800409a:	2301      	movs	r3, #1
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	f107 030e 	add.w	r3, r7, #14
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4603      	mov	r3, r0
 80040a6:	480b      	ldr	r0, [pc, #44]	; (80040d4 <I2C2_ReadData+0x64>)
 80040a8:	f002 fe28 	bl	8006cfc <HAL_I2C_Mem_Read>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80040b0:	b662      	cpsie	i
}
 80040b2:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80040ba:	f000 f861 	bl	8004180 <I2C2_Error>
    HAL_Delay(200);
 80040be:	20c8      	movs	r0, #200	; 0xc8
 80040c0:	f000 fea0 	bl	8004e04 <HAL_Delay>
  }

  return value;
 80040c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200000b8 	.word	0x200000b8
 80040d4:	20000a18 	.word	0x20000a18

080040d8 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80040ec:	b672      	cpsid	i
}
 80040ee:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 80040f0:	88f9      	ldrh	r1, [r7, #6]
 80040f2:	2332      	movs	r3, #50	; 0x32
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	480a      	ldr	r0, [pc, #40]	; (8004120 <I2C2_isDeviceReady+0x48>)
 80040f8:	f002 ff1a 	bl	8006f30 <HAL_I2C_IsDeviceReady>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004100:	b662      	cpsie	i
}
 8004102:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d004      	beq.n	8004114 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800410a:	f000 f839 	bl	8004180 <I2C2_Error>
    HAL_Delay(200);
 800410e:	20c8      	movs	r0, #200	; 0xc8
 8004110:	f000 fe78 	bl	8004e04 <HAL_Delay>
  }

  return value;
 8004114:	7bbb      	ldrb	r3, [r7, #14]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000a18 	.word	0x20000a18

08004124 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af04      	add	r7, sp, #16
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	4603      	mov	r3, r0
 800412e:	81fb      	strh	r3, [r7, #14]
 8004130:	460b      	mov	r3, r1
 8004132:	81bb      	strh	r3, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 800413c:	b672      	cpsid	i
}
 800413e:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <I2C2_ReadBuffer+0x54>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	8978      	ldrh	r0, [r7, #10]
 8004146:	89ba      	ldrh	r2, [r7, #12]
 8004148:	89f9      	ldrh	r1, [r7, #14]
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	8c3b      	ldrh	r3, [r7, #32]
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4603      	mov	r3, r0
 8004156:	4809      	ldr	r0, [pc, #36]	; (800417c <I2C2_ReadBuffer+0x58>)
 8004158:	f002 fdd0 	bl	8006cfc <HAL_I2C_Mem_Read>
 800415c:	4603      	mov	r3, r0
 800415e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8004160:	b662      	cpsie	i
}
 8004162:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800416a:	f000 f809 	bl	8004180 <I2C2_Error>
  }

  return status;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200000b8 	.word	0x200000b8
 800417c:	20000a18 	.word	0x20000a18

08004180 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8004184:	f7ff fda0 	bl	8003cc8 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8004188:	4803      	ldr	r0, [pc, #12]	; (8004198 <I2C2_Error+0x18>)
 800418a:	f002 fc74 	bl	8006a76 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 800418e:	f7ff fe31 	bl	8003df4 <I2C2_Init>
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000a18 	.word	0x20000a18

0800419c <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 80041a0:	f7ff fe28 	bl	8003df4 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 80041a4:	2104      	movs	r1, #4
 80041a6:	2084      	movs	r0, #132	; 0x84
 80041a8:	f7ff ff96 	bl	80040d8 <I2C2_isDeviceReady>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 80041b2:	f7ff fd89 	bl	8003cc8 <BSP_ErrorHandler>
  }
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <MFX_IO_DeInit+0x6c>)
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <MFX_IO_DeInit+0x6c>)
 80041c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <MFX_IO_DeInit+0x6c>)
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80041da:	2340      	movs	r3, #64	; 0x40
 80041dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80041de:	2301      	movs	r3, #1
 80041e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80041e6:	2302      	movs	r3, #2
 80041e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	4619      	mov	r1, r3
 80041f0:	480e      	ldr	r0, [pc, #56]	; (800422c <MFX_IO_DeInit+0x70>)
 80041f2:	f002 f8fd 	bl	80063f0 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80041f6:	2017      	movs	r0, #23
 80041f8:	f001 ff4d 	bl	8006096 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <MFX_IO_DeInit+0x6c>)
 80041fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004200:	4a09      	ldr	r2, [pc, #36]	; (8004228 <MFX_IO_DeInit+0x6c>)
 8004202:	f043 0304 	orr.w	r3, r3, #4
 8004206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <MFX_IO_DeInit+0x6c>)
 800420a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8004214:	2120      	movs	r1, #32
 8004216:	4806      	ldr	r0, [pc, #24]	; (8004230 <MFX_IO_DeInit+0x74>)
 8004218:	f002 fa7c 	bl	8006714 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 800421c:	f7ff fe96 	bl	8003f4c <I2C2_DeInit>
}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	48001c00 	.word	0x48001c00
 8004230:	48000800 	.word	0x48000800

08004234 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800423a:	4b13      	ldr	r3, [pc, #76]	; (8004288 <MFX_IO_ITConfig+0x54>)
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	4a12      	ldr	r2, [pc, #72]	; (8004288 <MFX_IO_ITConfig+0x54>)
 8004240:	f043 0304 	orr.w	r3, r3, #4
 8004244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <MFX_IO_ITConfig+0x54>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8004252:	2320      	movs	r3, #32
 8004254:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800425e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004262:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4808      	ldr	r0, [pc, #32]	; (800428c <MFX_IO_ITConfig+0x58>)
 800426a:	f002 f8c1 	bl	80063f0 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 800426e:	220f      	movs	r2, #15
 8004270:	210f      	movs	r1, #15
 8004272:	2017      	movs	r0, #23
 8004274:	f001 fee5 	bl	8006042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8004278:	2017      	movs	r0, #23
 800427a:	f001 fefe 	bl	800607a <HAL_NVIC_EnableIRQ>
}
 800427e:	bf00      	nop
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	48000800 	.word	0x48000800

08004290 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8004296:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <MFX_IO_EnableWakeupPin+0x40>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <MFX_IO_EnableWakeupPin+0x40>)
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <MFX_IO_EnableWakeupPin+0x40>)
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80042ae:	2340      	movs	r3, #64	; 0x40
 80042b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80042b2:	2301      	movs	r3, #1
 80042b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042b6:	2302      	movs	r3, #2
 80042b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4804      	ldr	r0, [pc, #16]	; (80042d4 <MFX_IO_EnableWakeupPin+0x44>)
 80042c4:	f002 f894 	bl	80063f0 <HAL_GPIO_Init>
}
 80042c8:	bf00      	nop
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	48001c00 	.word	0x48001c00

080042d8 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 80042dc:	2201      	movs	r2, #1
 80042de:	2140      	movs	r1, #64	; 0x40
 80042e0:	4806      	ldr	r0, [pc, #24]	; (80042fc <MFX_IO_Wakeup+0x24>)
 80042e2:	f002 fb09 	bl	80068f8 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 80042e6:	2001      	movs	r0, #1
 80042e8:	f000 fd8c 	bl	8004e04 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80042ec:	2200      	movs	r2, #0
 80042ee:	2140      	movs	r1, #64	; 0x40
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <MFX_IO_Wakeup+0x24>)
 80042f2:	f002 fb01 	bl	80068f8 <HAL_GPIO_WritePin>
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	48001c00 	.word	0x48001c00

08004300 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	80fb      	strh	r3, [r7, #6]
 800430a:	460b      	mov	r3, r1
 800430c:	717b      	strb	r3, [r7, #5]
 800430e:	4613      	mov	r3, r2
 8004310:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8004312:	797b      	ldrb	r3, [r7, #5]
 8004314:	b299      	uxth	r1, r3
 8004316:	793b      	ldrb	r3, [r7, #4]
 8004318:	88f8      	ldrh	r0, [r7, #6]
 800431a:	2201      	movs	r2, #1
 800431c:	f7ff fe76 	bl	800400c <I2C2_WriteData>
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	460a      	mov	r2, r1
 8004332:	80fb      	strh	r3, [r7, #6]
 8004334:	4613      	mov	r3, r2
 8004336:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8004338:	797b      	ldrb	r3, [r7, #5]
 800433a:	b299      	uxth	r1, r3
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	2201      	movs	r2, #1
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fe95 	bl	8004070 <I2C2_ReadData>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af02      	add	r7, sp, #8
 8004356:	60ba      	str	r2, [r7, #8]
 8004358:	461a      	mov	r2, r3
 800435a:	4603      	mov	r3, r0
 800435c:	81fb      	strh	r3, [r7, #14]
 800435e:	460b      	mov	r3, r1
 8004360:	737b      	strb	r3, [r7, #13]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004366:	7b7b      	ldrb	r3, [r7, #13]
 8004368:	b299      	uxth	r1, r3
 800436a:	89f8      	ldrh	r0, [r7, #14]
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2201      	movs	r2, #1
 8004374:	f7ff fed6 	bl	8004124 <I2C2_ReadBuffer>
 8004378:	4603      	mov	r3, r0
 800437a:	b29b      	uxth	r3, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fd39 	bl	8004e04 <HAL_Delay>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	; 0x30
 80043a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80043a2:	4b38      	ldr	r3, [pc, #224]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	4a37      	ldr	r2, [pc, #220]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6513      	str	r3, [r2, #80]	; 0x50
 80043ae:	4b35      	ldr	r3, [pc, #212]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ba:	4b32      	ldr	r3, [pc, #200]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	4a31      	ldr	r2, [pc, #196]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043c0:	f043 0308 	orr.w	r3, r3, #8
 80043c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043c6:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	4a2b      	ldr	r2, [pc, #172]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043d8:	f043 0310 	orr.w	r3, r3, #16
 80043dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043de:	4b29      	ldr	r3, [pc, #164]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	4a25      	ldr	r2, [pc, #148]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043f0:	f043 0320 	orr.w	r3, r3, #32
 80043f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043f6:	4b23      	ldr	r3, [pc, #140]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 80043f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 8004404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004406:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 8004408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800440e:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 8004410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	4a19      	ldr	r2, [pc, #100]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	6593      	str	r3, [r2, #88]	; 0x58
 8004426:	4b17      	ldr	r3, [pc, #92]	; (8004484 <FMC_BANK1_MspInit+0xe8>)
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8004432:	f004 fc47 	bl	8008cc4 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8004436:	2302      	movs	r3, #2
 8004438:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800443a:	2301      	movs	r3, #1
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800443e:	2303      	movs	r3, #3
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8004442:	230c      	movs	r3, #12
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 8004446:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800444a:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800444c:	f107 031c 	add.w	r3, r7, #28
 8004450:	4619      	mov	r1, r3
 8004452:	480d      	ldr	r0, [pc, #52]	; (8004488 <FMC_BANK1_MspInit+0xec>)
 8004454:	f001 ffcc 	bl	80063f0 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 8004458:	f64f 7380 	movw	r3, #65408	; 0xff80
 800445c:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800445e:	f107 031c 	add.w	r3, r7, #28
 8004462:	4619      	mov	r1, r3
 8004464:	4809      	ldr	r0, [pc, #36]	; (800448c <FMC_BANK1_MspInit+0xf0>)
 8004466:	f001 ffc3 	bl	80063f0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800446a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800446e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8004470:	f107 031c 	add.w	r3, r7, #28
 8004474:	4619      	mov	r1, r3
 8004476:	4804      	ldr	r0, [pc, #16]	; (8004488 <FMC_BANK1_MspInit+0xec>)
 8004478:	f001 ffba 	bl	80063f0 <HAL_GPIO_Init>

}
 800447c:	bf00      	nop
 800447e:	3730      	adds	r7, #48	; 0x30
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	48000c00 	.word	0x48000c00
 800448c:	48001000 	.word	0x48001000

08004490 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b0a4      	sub	sp, #144	; 0x90
 8004494:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8004496:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800449a:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <FMC_BANK1_Init+0xa8>)
 800449e:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 80044a0:	2301      	movs	r3, #1
 80044a2:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 80044a4:	2301      	movs	r3, #1
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 80044a8:	2301      	movs	r3, #1
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 80044b0:	2302      	movs	r3, #2
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 80044b4:	2302      	movs	r3, #2
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 80044b8:	2300      	movs	r3, #0
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 80044bc:	2305      	movs	r3, #5
 80044be:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 80044c4:	2303      	movs	r3, #3
 80044c6:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 80044c8:	2302      	movs	r3, #2
 80044ca:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 80044cc:	2302      	movs	r3, #2
 80044ce:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 80044d0:	2302      	movs	r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 80044d8:	2300      	movs	r3, #0
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 80044dc:	2300      	movs	r3, #0
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 80044e0:	2300      	movs	r3, #0
 80044e2:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80044e4:	2310      	movs	r3, #16
 80044e6:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80044ec:	2300      	movs	r3, #0
 80044ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 80044f0:	2300      	movs	r3, #0
 80044f2:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 80044f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f8:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 800450a:	2300      	movs	r3, #0
 800450c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8004510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004514:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8004516:	2300      	movs	r3, #0
 8004518:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800451a:	f7ff ff3f 	bl	800439c <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800451e:	463a      	mov	r2, r7
 8004520:	f107 0120 	add.w	r1, r7, #32
 8004524:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004528:	4618      	mov	r0, r3
 800452a:	f007 fef8 	bl	800c31e <HAL_SRAM_Init>

}
 800452e:	bf00      	nop
 8004530:	3790      	adds	r7, #144	; 0x90
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	a0000104 	.word	0xa0000104

0800453c <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 8004546:	4a04      	ldr	r2, [pc, #16]	; (8004558 <FMC_BANK1_WriteData+0x1c>)
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	8013      	strh	r3, [r2, #0]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	60080000 	.word	0x60080000

0800455c <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 8004566:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800456a:	79fa      	ldrb	r2, [r7, #7]
 800456c:	b292      	uxth	r2, r2
 800456e:	801a      	strh	r2, [r3, #0]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <FMC_BANK1_ReadData+0x14>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
}
 8004586:	4618      	mov	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	60080000 	.word	0x60080000

08004594 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8004598:	f7ff ff7a 	bl	8004490 <FMC_BANK1_Init>
}
 800459c:	bf00      	nop
 800459e:	bd80      	pop	{r7, pc}

080045a0 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ffc5 	bl	800453c <FMC_BANK1_WriteData>
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	4603      	mov	r3, r0
 80045c2:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ffc8 	bl	800455c <FMC_BANK1_WriteReg>
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 80045d8:	f7ff ffd0 	bl	800457c <FMC_BANK1_ReadData>
 80045dc:	4603      	mov	r3, r0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fc0a 	bl	8004e04 <HAL_Delay>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8004606:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <BSP_IO_Init+0x78>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d128      	bne.n	8004660 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800460e:	4b19      	ldr	r3, [pc, #100]	; (8004674 <BSP_IO_Init+0x7c>)
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	2084      	movs	r0, #132	; 0x84
 8004614:	4798      	blx	r3

    HAL_Delay(10);
 8004616:	200a      	movs	r0, #10
 8004618:	f000 fbf4 	bl	8004e04 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 800461c:	4b16      	ldr	r3, [pc, #88]	; (8004678 <BSP_IO_Init+0x80>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2084      	movs	r0, #132	; 0x84
 8004622:	4798      	blx	r3
 8004624:	4603      	mov	r3, r0
 8004626:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8004628:	79bb      	ldrb	r3, [r7, #6]
 800462a:	2b7b      	cmp	r3, #123	; 0x7b
 800462c:	d002      	beq.n	8004634 <BSP_IO_Init+0x3c>
 800462e:	79bb      	ldrb	r3, [r7, #6]
 8004630:	2b79      	cmp	r3, #121	; 0x79
 8004632:	d117      	bne.n	8004664 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <BSP_IO_Init+0x78>)
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <BSP_IO_Init+0x80>)
 8004638:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <BSP_IO_Init+0x78>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00f      	beq.n	8004664 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <BSP_IO_Init+0x78>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2084      	movs	r0, #132	; 0x84
 800464c:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <BSP_IO_Init+0x78>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4909      	ldr	r1, [pc, #36]	; (800467c <BSP_IO_Init+0x84>)
 8004656:	2084      	movs	r0, #132	; 0x84
 8004658:	4798      	blx	r3

        ret = IO_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	71fb      	strb	r3, [r7, #7]
 800465e:	e001      	b.n	8004664 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8004660:	2303      	movs	r3, #3
 8004662:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8004664:	79fb      	ldrb	r3, [r7, #7]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000a6c 	.word	0x20000a6c
 8004674:	20000030 	.word	0x20000030
 8004678:	20000004 	.word	0x20000004
 800467c:	000301ff 	.word	0x000301ff

08004680 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <BSP_IO_ConfigPin+0x30>)
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <BSP_IO_ConfigPin+0x34>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	68f9      	ldr	r1, [r7, #12]
 80046a2:	2084      	movs	r0, #132	; 0x84
 80046a4:	4798      	blx	r3

  return IO_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	000301ff 	.word	0x000301ff
 80046b4:	20000a6c 	.word	0x20000a6c

080046b8 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <BSP_IO_WritePin+0x30>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <BSP_IO_WritePin+0x34>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	2084      	movs	r0, #132	; 0x84
 80046dc:	4798      	blx	r3

}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	000301ff 	.word	0x000301ff
 80046ec:	20000a6c 	.word	0x20000a6c

080046f0 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8004700:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <BSP_LCD_InitEx+0xe0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d102      	bne.n	800470e <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	e05b      	b.n	80047c6 <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 800470e:	f7ff ff73 	bl	80045f8 <BSP_IO_Init>
 8004712:	4603      	mov	r3, r0
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 8004718:	f7ff fad6 	bl	8003cc8 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 800471c:	f000 fa08 	bl	8004b30 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8004720:	2200      	movs	r2, #0
 8004722:	2101      	movs	r1, #1
 8004724:	482b      	ldr	r0, [pc, #172]	; (80047d4 <BSP_LCD_InitEx+0xe4>)
 8004726:	f002 f8e7 	bl	80068f8 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 800472a:	4b2b      	ldr	r3, [pc, #172]	; (80047d8 <BSP_LCD_InitEx+0xe8>)
 800472c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004730:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8004732:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <BSP_LCD_InitEx+0xe8>)
 8004734:	4a29      	ldr	r2, [pc, #164]	; (80047dc <BSP_LCD_InitEx+0xec>)
 8004736:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <BSP_LCD_InitEx+0xe8>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 800473e:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <BSP_LCD_InitEx+0xf0>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <BSP_LCD_InitEx+0x68>
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <BSP_LCD_InitEx+0xf4>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800474e:	2201      	movs	r2, #1
 8004750:	2101      	movs	r1, #1
 8004752:	4825      	ldr	r0, [pc, #148]	; (80047e8 <BSP_LCD_InitEx+0xf8>)
 8004754:	f002 f8d0 	bl	80068f8 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8004758:	f000 f850 	bl	80047fc <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 800475c:	4b23      	ldr	r3, [pc, #140]	; (80047ec <BSP_LCD_InitEx+0xfc>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4798      	blx	r3
 8004762:	4603      	mov	r3, r0
 8004764:	2b85      	cmp	r3, #133	; 0x85
 8004766:	d12e      	bne.n	80047c6 <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 8004768:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <BSP_LCD_InitEx+0x100>)
 800476a:	4a20      	ldr	r2, [pc, #128]	; (80047ec <BSP_LCD_InitEx+0xfc>)
 800476c:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <BSP_LCD_InitEx+0x100>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8004776:	2200      	movs	r2, #0
 8004778:	2100      	movs	r1, #0
 800477a:	202c      	movs	r0, #44	; 0x2c
 800477c:	f7ff f86b 	bl	8003856 <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8004780:	2300      	movs	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	e006      	b.n	8004794 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8004786:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800478a:	f7ff ff09 	bl	80045a0 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3301      	adds	r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 800479a:	d3f4      	bcc.n	8004786 <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 80047a2:	2000      	movs	r0, #0
 80047a4:	f7fe ff55 	bl	8003652 <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 80047a8:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <BSP_LCD_InitEx+0x104>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e002      	b.n	80047b6 <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <BSP_LCD_InitEx+0x104>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80047b6:	4810      	ldr	r0, [pc, #64]	; (80047f8 <BSP_LCD_InitEx+0x108>)
 80047b8:	f000 f868 	bl	800488c <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <BSP_LCD_InitEx+0xe0>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000a70 	.word	0x20000a70
 80047d4:	48001c00 	.word	0x48001c00
 80047d8:	20000a78 	.word	0x20000a78
 80047dc:	200000bc 	.word	0x200000bc
 80047e0:	20000a74 	.word	0x20000a74
 80047e4:	20000a75 	.word	0x20000a75
 80047e8:	48002000 	.word	0x48002000
 80047ec:	2000007c 	.word	0x2000007c
 80047f0:	20000a84 	.word	0x20000a84
 80047f4:	200000cc 	.word	0x200000cc
 80047f8:	200000c4 	.word	0x200000c4

080047fc <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8004800:	2100      	movs	r1, #0
 8004802:	2004      	movs	r0, #4
 8004804:	f7ff ff58 	bl	80046b8 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8004808:	2005      	movs	r0, #5
 800480a:	f000 fafb 	bl	8004e04 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800480e:	2101      	movs	r1, #1
 8004810:	2004      	movs	r0, #4
 8004812:	f7ff ff51 	bl	80046b8 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8004816:	200a      	movs	r0, #10
 8004818:	f000 faf4 	bl	8004e04 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800481c:	2100      	movs	r1, #0
 800481e:	2004      	movs	r0, #4
 8004820:	f7ff ff4a 	bl	80046b8 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8004824:	2014      	movs	r0, #20
 8004826:	f000 faed 	bl	8004e04 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800482a:	2101      	movs	r1, #1
 800482c:	2004      	movs	r0, #4
 800482e:	f7ff ff43 	bl	80046b8 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8004832:	200a      	movs	r0, #10
 8004834:	f000 fae6 	bl	8004e04 <HAL_Delay>
}
 8004838:	bf00      	nop
 800483a:	bd80      	pop	{r7, pc}

0800483c <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <BSP_LCD_GetXSize+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	4798      	blx	r3
 8004848:	4603      	mov	r3, r0
}
 800484a:	4618      	mov	r0, r3
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000a84 	.word	0x20000a84

08004854 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <BSP_LCD_GetYSize+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	4798      	blx	r3
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000a84 	.word	0x20000a84

0800486c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	4a03      	ldr	r2, [pc, #12]	; (8004888 <BSP_LCD_SetTextColor+0x1c>)
 800487a:	6013      	str	r3, [r2, #0]
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	20000a78 	.word	0x20000a78

0800488c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8004894:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <BSP_LCD_SetFont+0x1c>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6093      	str	r3, [r2, #8]
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000a78 	.word	0x20000a78

080048ac <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <BSP_LCD_Clear+0x68>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <BSP_LCD_Clear+0x68>)
 80048c8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80048ca:	f7ff ffc3 	bl	8004854 <BSP_LCD_GetYSize>
 80048ce:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e00d      	b.n	80048f2 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	b29c      	uxth	r4, r3
 80048da:	f7ff ffaf 	bl	800483c <BSP_LCD_GetXSize>
 80048de:	4603      	mov	r3, r0
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	4621      	mov	r1, r4
 80048e6:	2000      	movs	r0, #0
 80048e8:	f000 f8e8 	bl	8004abc <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	3301      	adds	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d3ed      	bcc.n	80048d6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 80048fa:	4a06      	ldr	r2, [pc, #24]	; (8004914 <BSP_LCD_Clear+0x68>)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <BSP_LCD_Clear+0x68>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ffb0 	bl	800486c <BSP_LCD_SetTextColor>
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	bd90      	pop	{r4, r7, pc}
 8004914:	20000a78 	.word	0x20000a78

08004918 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	80fb      	strh	r3, [r7, #6]
 8004922:	460b      	mov	r3, r1
 8004924:	80bb      	strh	r3, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <BSP_LCD_DisplayChar+0x50>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8004934:	490c      	ldr	r1, [pc, #48]	; (8004968 <BSP_LCD_DisplayChar+0x50>)
 8004936:	6889      	ldr	r1, [r1, #8]
 8004938:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800493a:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <BSP_LCD_DisplayChar+0x50>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	889b      	ldrh	r3, [r3, #4]
 8004944:	3307      	adds	r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	da00      	bge.n	800494c <BSP_LCD_DisplayChar+0x34>
 800494a:	3307      	adds	r3, #7
 800494c:	10db      	asrs	r3, r3, #3
 800494e:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8004952:	441a      	add	r2, r3
 8004954:	88b9      	ldrh	r1, [r7, #4]
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 f945 	bl	8004be8 <DrawChar>
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000a78 	.word	0x20000a78

0800496c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	60ba      	str	r2, [r7, #8]
 8004974:	461a      	mov	r2, r3
 8004976:	4603      	mov	r3, r0
 8004978:	81fb      	strh	r3, [r7, #14]
 800497a:	460b      	mov	r3, r1
 800497c:	81bb      	strh	r3, [r7, #12]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004982:	2301      	movs	r3, #1
 8004984:	83fb      	strh	r3, [r7, #30]
 8004986:	2300      	movs	r3, #0
 8004988:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 8004996:	e002      	b.n	800499e <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	3301      	adds	r3, #1
 800499c:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	617a      	str	r2, [r7, #20]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f6      	bne.n	8004998 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 80049aa:	f7ff ff47 	bl	800483c <BSP_LCD_GetXSize>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <BSP_LCD_DisplayStringAt+0x114>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	889b      	ldrh	r3, [r3, #4]
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d014      	beq.n	80049ec <BSP_LCD_DisplayStringAt+0x80>
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	dc23      	bgt.n	8004a0e <BSP_LCD_DisplayStringAt+0xa2>
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d002      	beq.n	80049d0 <BSP_LCD_DisplayStringAt+0x64>
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d011      	beq.n	80049f2 <BSP_LCD_DisplayStringAt+0x86>
 80049ce:	e01e      	b.n	8004a0e <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	4a2a      	ldr	r2, [pc, #168]	; (8004a80 <BSP_LCD_DisplayStringAt+0x114>)
 80049d8:	6892      	ldr	r2, [r2, #8]
 80049da:	8892      	ldrh	r2, [r2, #4]
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	4413      	add	r3, r2
 80049e8:	83fb      	strh	r3, [r7, #30]
      break;
 80049ea:	e013      	b.n	8004a14 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 80049ec:	89fb      	ldrh	r3, [r7, #14]
 80049ee:	83fb      	strh	r3, [r7, #30]
      break;
 80049f0:	e010      	b.n	8004a14 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <BSP_LCD_DisplayStringAt+0x114>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	889b      	ldrh	r3, [r3, #4]
 8004a00:	fb12 f303 	smulbb	r3, r2, r3
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	89fb      	ldrh	r3, [r7, #14]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	83fb      	strh	r3, [r7, #30]
      break;
 8004a0c:	e002      	b.n	8004a14 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
 8004a10:	83fb      	strh	r3, [r7, #30]
      break;
 8004a12:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8004a14:	8bfb      	ldrh	r3, [r7, #30]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <BSP_LCD_DisplayStringAt+0xb6>
 8004a1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	da15      	bge.n	8004a4e <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8004a26:	e012      	b.n	8004a4e <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	89b9      	ldrh	r1, [r7, #12]
 8004a2e:	8bfb      	ldrh	r3, [r7, #30]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff ff71 	bl	8004918 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <BSP_LCD_DisplayStringAt+0x114>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	889a      	ldrh	r2, [r3, #4]
 8004a3c:	8bfb      	ldrh	r3, [r7, #30]
 8004a3e:	4413      	add	r3, r2
 8004a40:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	3301      	adds	r3, #1
 8004a46:	60bb      	str	r3, [r7, #8]
    i++;
 8004a48:	8bbb      	ldrh	r3, [r7, #28]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00f      	beq.n	8004a76 <BSP_LCD_DisplayStringAt+0x10a>
 8004a56:	f7ff fef1 	bl	800483c <BSP_LCD_GetXSize>
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	8bbb      	ldrh	r3, [r7, #28]
 8004a5e:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <BSP_LCD_DisplayStringAt+0x114>)
 8004a60:	6892      	ldr	r2, [r2, #8]
 8004a62:	8892      	ldrh	r2, [r2, #4]
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	1acb      	subs	r3, r1, r3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <BSP_LCD_DisplayStringAt+0x114>)
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	8892      	ldrh	r2, [r2, #4]
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d2d8      	bcs.n	8004a28 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8004a76:	bf00      	nop
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000a78 	.word	0x20000a78

08004a84 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	80fb      	strh	r3, [r7, #6]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	80bb      	strh	r3, [r7, #4]
 8004a92:	4613      	mov	r3, r2
 8004a94:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <BSP_LCD_DrawPixel+0x34>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d006      	beq.n	8004aae <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <BSP_LCD_DrawPixel+0x34>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	88b9      	ldrh	r1, [r7, #4]
 8004aaa:	88f8      	ldrh	r0, [r7, #6]
 8004aac:	4798      	blx	r3
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000a84 	.word	0x20000a84

08004abc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004abc:	b590      	push	{r4, r7, lr}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	80fb      	strh	r3, [r7, #6]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	80bb      	strh	r3, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <BSP_LCD_DrawHLine+0x6c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <BSP_LCD_DrawHLine+0x6c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a1c      	ldr	r4, [r3, #32]
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <BSP_LCD_DrawHLine+0x70>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b298      	uxth	r0, r3
 8004ae8:	887b      	ldrh	r3, [r7, #2]
 8004aea:	88ba      	ldrh	r2, [r7, #4]
 8004aec:	88f9      	ldrh	r1, [r7, #6]
 8004aee:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8004af0:	e015      	b.n	8004b1e <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e00e      	b.n	8004b16 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	4413      	add	r3, r2
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <BSP_LCD_DrawHLine+0x70>)
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	b292      	uxth	r2, r2
 8004b08:	88b9      	ldrh	r1, [r7, #4]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff ffba 	bl	8004a84 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d3ec      	bcc.n	8004af8 <BSP_LCD_DrawHLine+0x3c>
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd90      	pop	{r4, r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000a84 	.word	0x20000a84
 8004b2c:	20000a78 	.word	0x20000a78

08004b30 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b42:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004b4e:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b5a:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b72:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <BSP_LCD_MspInit+0xac>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8004b7e:	f7ff fd3b 	bl	80045f8 <BSP_IO_Init>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 8004b88:	f7ff f89e 	bl	8003cc8 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	2004      	movs	r0, #4
 8004b90:	f7ff fd76 	bl	8004680 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8004b94:	2301      	movs	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	4619      	mov	r1, r3
 8004bae:	480c      	ldr	r0, [pc, #48]	; (8004be0 <BSP_LCD_MspInit+0xb0>)
 8004bb0:	f001 fc1e 	bl	80063f0 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4805      	ldr	r0, [pc, #20]	; (8004be4 <BSP_LCD_MspInit+0xb4>)
 8004bd0:	f001 fc0e 	bl	80063f0 <HAL_GPIO_Init>
}
 8004bd4:	bf00      	nop
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	48002000 	.word	0x48002000
 8004be4:	48001c00 	.word	0x48001c00

08004be8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	603a      	str	r2, [r7, #0]
 8004bf2:	80fb      	strh	r3, [r7, #6]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 8004c00:	4b45      	ldr	r3, [pc, #276]	; (8004d18 <DrawChar+0x130>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	88db      	ldrh	r3, [r3, #6]
 8004c06:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8004c08:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <DrawChar+0x130>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	889b      	ldrh	r3, [r3, #4]
 8004c0e:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 8004c10:	8a3b      	ldrh	r3, [r7, #16]
 8004c12:	3307      	adds	r3, #7
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	da00      	bge.n	8004c1a <DrawChar+0x32>
 8004c18:	3307      	adds	r3, #7
 8004c1a:	10db      	asrs	r3, r3, #3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	8a3b      	ldrh	r3, [r7, #16]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	e069      	b.n	8004d04 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8004c30:	8a3b      	ldrh	r3, [r7, #16]
 8004c32:	3307      	adds	r3, #7
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	da00      	bge.n	8004c3a <DrawChar+0x52>
 8004c38:	3307      	adds	r3, #7
 8004c3a:	10db      	asrs	r3, r3, #3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	fb02 f303 	mul.w	r3, r2, r3
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	4413      	add	r3, r2
 8004c48:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8004c4a:	8a3b      	ldrh	r3, [r7, #16]
 8004c4c:	3307      	adds	r3, #7
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	da00      	bge.n	8004c54 <DrawChar+0x6c>
 8004c52:	3307      	adds	r3, #7
 8004c54:	10db      	asrs	r3, r3, #3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d002      	beq.n	8004c60 <DrawChar+0x78>
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d004      	beq.n	8004c68 <DrawChar+0x80>
 8004c5e:	e00c      	b.n	8004c7a <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	617b      	str	r3, [r7, #20]
        break;
 8004c66:	e016      	b.n	8004c96 <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	3201      	adds	r2, #1
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
        break;
 8004c78:	e00d      	b.n	8004c96 <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	041a      	lsls	r2, r3, #16
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	3301      	adds	r3, #1
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	3202      	adds	r2, #2
 8004c8e:	7812      	ldrb	r2, [r2, #0]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
        break;
 8004c94:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e029      	b.n	8004cf0 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 8004c9c:	8a3a      	ldrh	r2, [r7, #16]
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	1ad2      	subs	r2, r2, r3
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	2201      	movs	r2, #1
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	88fb      	ldrh	r3, [r7, #6]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <DrawChar+0x130>)
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	88b9      	ldrh	r1, [r7, #4]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff feda 	bl	8004a84 <BSP_LCD_DrawPixel>
 8004cd0:	e00b      	b.n	8004cea <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	4413      	add	r3, r2
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <DrawChar+0x130>)
 8004cde:	6852      	ldr	r2, [r2, #4]
 8004ce0:	b292      	uxth	r2, r2
 8004ce2:	88b9      	ldrh	r1, [r7, #4]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fecd 	bl	8004a84 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	3301      	adds	r3, #1
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	8a3b      	ldrh	r3, [r7, #16]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d3d1      	bcc.n	8004c9c <DrawChar+0xb4>
      }
    }
    Ypos++;
 8004cf8:	88bb      	ldrh	r3, [r7, #4]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	8a7b      	ldrh	r3, [r7, #18]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d391      	bcc.n	8004c30 <DrawChar+0x48>
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000a78 	.word	0x20000a78

08004d1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d26:	2003      	movs	r0, #3
 8004d28:	f001 f980 	bl	800602c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	f000 f80d 	bl	8004d4c <HAL_InitTick>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	71fb      	strb	r3, [r7, #7]
 8004d3c:	e001      	b.n	8004d42 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d3e:	f7fd f893 	bl	8001e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d42:	79fb      	ldrb	r3, [r7, #7]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_InitTick+0x6c>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004d60:	4b16      	ldr	r3, [pc, #88]	; (8004dbc <HAL_InitTick+0x70>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_InitTick+0x6c>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 f99b 	bl	80060b2 <HAL_SYSTICK_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10f      	bne.n	8004da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b0f      	cmp	r3, #15
 8004d86:	d809      	bhi.n	8004d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d88:	2200      	movs	r2, #0
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d90:	f001 f957 	bl	8006042 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <HAL_InitTick+0x74>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e007      	b.n	8004dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
 8004da0:	e004      	b.n	8004dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
 8004da6:	e001      	b.n	8004dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	200000d4 	.word	0x200000d4
 8004dbc:	20000000 	.word	0x20000000
 8004dc0:	200000d0 	.word	0x200000d0

08004dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_IncTick+0x20>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_IncTick+0x24>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <HAL_IncTick+0x24>)
 8004dd6:	6013      	str	r3, [r2, #0]
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	200000d4 	.word	0x200000d4
 8004de8:	20000a88 	.word	0x20000a88

08004dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return uwTick;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_GetTick+0x14>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000a88 	.word	0x20000a88

08004e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e0c:	f7ff ffee 	bl	8004dec <HAL_GetTick>
 8004e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e1c:	d005      	beq.n	8004e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <HAL_Delay+0x44>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e2a:	bf00      	nop
 8004e2c:	f7ff ffde 	bl	8004dec <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d8f7      	bhi.n	8004e2c <HAL_Delay+0x28>
  {
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200000d4 	.word	0x200000d4

08004e4c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_SuspendTick+0x1c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <HAL_SuspendTick+0x1c>)
 8004e56:	f023 0302 	bic.w	r3, r3, #2
 8004e5a:	6013      	str	r3, [r2, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000e010 	.word	0xe000e010

08004e6c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_ResumeTick+0x1c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_ResumeTick+0x1c>)
 8004e76:	f043 0302 	orr.w	r3, r3, #2
 8004e7a:	6013      	str	r3, [r2, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	e000e010 	.word	0xe000e010

08004e8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	609a      	str	r2, [r3, #8]
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3360      	adds	r3, #96	; 0x60
 8004f06:	461a      	mov	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <LL_ADC_SetOffset+0x44>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	03fff000 	.word	0x03fff000

08004f3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3360      	adds	r3, #96	; 0x60
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3360      	adds	r3, #96	; 0x60
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	615a      	str	r2, [r3, #20]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3330      	adds	r3, #48	; 0x30
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	0a1b      	lsrs	r3, r3, #8
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	f003 030c 	and.w	r3, r3, #12
 8004fe0:	4413      	add	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	211f      	movs	r1, #31
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0e9b      	lsrs	r3, r3, #26
 8004ffc:	f003 011f 	and.w	r1, r3, #31
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	431a      	orrs	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3314      	adds	r3, #20
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	0e5b      	lsrs	r3, r3, #25
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	4413      	add	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	0d1b      	lsrs	r3, r3, #20
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	2107      	movs	r1, #7
 800504a:	fa01 f303 	lsl.w	r3, r1, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	401a      	ands	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	0d1b      	lsrs	r3, r3, #20
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	fa01 f303 	lsl.w	r3, r1, r3
 8005060:	431a      	orrs	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f003 0318 	and.w	r3, r3, #24
 8005096:	4908      	ldr	r1, [pc, #32]	; (80050b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005098:	40d9      	lsrs	r1, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	400b      	ands	r3, r1
 800509e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a2:	431a      	orrs	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	0007ffff 	.word	0x0007ffff

080050bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80050cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6093      	str	r3, [r2, #8]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f4:	d101      	bne.n	80050fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800511c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005144:	d101      	bne.n	800514a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <LL_ADC_IsEnabled+0x18>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <LL_ADC_IsEnabled+0x1a>
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b04      	cmp	r3, #4
 8005190:	d101      	bne.n	8005196 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d101      	bne.n	80051bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b089      	sub	sp, #36	; 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e139      	b.n	800545a <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fb fab9 	bl	800076c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff ff67 	bl	80050e0 <LL_ADC_IsDeepPowerDownEnabled>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff4d 	bl	80050bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff82 	bl	8005130 <LL_ADC_IsInternalRegulatorEnabled>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d115      	bne.n	800525e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff ff66 	bl	8005108 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800523c:	4b89      	ldr	r3, [pc, #548]	; (8005464 <HAL_ADC_Init+0x298>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	099b      	lsrs	r3, r3, #6
 8005242:	4a89      	ldr	r2, [pc, #548]	; (8005468 <HAL_ADC_Init+0x29c>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	099b      	lsrs	r3, r3, #6
 800524a:	3301      	adds	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005250:	e002      	b.n	8005258 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	3b01      	subs	r3, #1
 8005256:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f9      	bne.n	8005252 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff64 	bl	8005130 <LL_ADC_IsInternalRegulatorEnabled>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	f043 0210 	orr.w	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527e:	f043 0201 	orr.w	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff ff75 	bl	800517e <LL_ADC_REG_IsConversionOngoing>
 8005294:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f040 80d2 	bne.w	8005448 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 80ce 	bne.w	8005448 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80052b4:	f043 0202 	orr.w	r2, r3, #2
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff ff49 	bl	8005158 <LL_ADC_IsEnabled>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052cc:	4867      	ldr	r0, [pc, #412]	; (800546c <HAL_ADC_Init+0x2a0>)
 80052ce:	f7ff ff43 	bl	8005158 <LL_ADC_IsEnabled>
 80052d2:	4604      	mov	r4, r0
 80052d4:	4866      	ldr	r0, [pc, #408]	; (8005470 <HAL_ADC_Init+0x2a4>)
 80052d6:	f7ff ff3f 	bl	8005158 <LL_ADC_IsEnabled>
 80052da:	4603      	mov	r3, r0
 80052dc:	431c      	orrs	r4, r3
 80052de:	4865      	ldr	r0, [pc, #404]	; (8005474 <HAL_ADC_Init+0x2a8>)
 80052e0:	f7ff ff3a 	bl	8005158 <LL_ADC_IsEnabled>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4323      	orrs	r3, r4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4619      	mov	r1, r3
 80052f2:	4861      	ldr	r0, [pc, #388]	; (8005478 <HAL_ADC_Init+0x2ac>)
 80052f4:	f7ff fdca 	bl	8004e8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	7e5b      	ldrb	r3, [r3, #25]
 80052fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005302:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005308:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800530e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005316:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d106      	bne.n	8005334 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	3b01      	subs	r3, #1
 800532c:	045b      	lsls	r3, r3, #17
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	4b49      	ldr	r3, [pc, #292]	; (800547c <HAL_ADC_Init+0x2b0>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	69b9      	ldr	r1, [r7, #24]
 8005360:	430b      	orrs	r3, r1
 8005362:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff08 	bl	800517e <LL_ADC_REG_IsConversionOngoing>
 800536e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff ff15 	bl	80051a4 <LL_ADC_INJ_IsConversionOngoing>
 800537a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d140      	bne.n	8005404 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d13d      	bne.n	8005404 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7e1b      	ldrb	r3, [r3, #24]
 8005390:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005392:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800539a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053aa:	f023 0306 	bic.w	r3, r3, #6
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	69b9      	ldr	r1, [r7, #24]
 80053b4:	430b      	orrs	r3, r1
 80053b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d118      	bne.n	80053f4 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053cc:	f023 0304 	bic.w	r3, r3, #4
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053d8:	4311      	orrs	r1, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053de:	4311      	orrs	r1, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053e4:	430a      	orrs	r2, r1
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	611a      	str	r2, [r3, #16]
 80053f2:	e007      	b.n	8005404 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10c      	bne.n	8005426 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f023 010f 	bic.w	r1, r3, #15
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	1e5a      	subs	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
 8005424:	e007      	b.n	8005436 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 020f 	bic.w	r2, r2, #15
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	f043 0201 	orr.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	659a      	str	r2, [r3, #88]	; 0x58
 8005446:	e007      	b.n	8005458 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544c:	f043 0210 	orr.w	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005458:	7ffb      	ldrb	r3, [r7, #31]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3724      	adds	r7, #36	; 0x24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd90      	pop	{r4, r7, pc}
 8005462:	bf00      	nop
 8005464:	20000000 	.word	0x20000000
 8005468:	053e2d63 	.word	0x053e2d63
 800546c:	50040000 	.word	0x50040000
 8005470:	50040100 	.word	0x50040100
 8005474:	50040200 	.word	0x50040200
 8005478:	50040300 	.word	0x50040300
 800547c:	fff0c007 	.word	0xfff0c007

08005480 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0b6      	sub	sp, #216	; 0xd8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x22>
 800549e:	2302      	movs	r3, #2
 80054a0:	e3e3      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x7ea>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fe65 	bl	800517e <LL_ADC_REG_IsConversionOngoing>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 83c4 	bne.w	8005c44 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	d824      	bhi.n	800550e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	3b02      	subs	r3, #2
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d81b      	bhi.n	8005506 <HAL_ADC_ConfigChannel+0x86>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <HAL_ADC_ConfigChannel+0x54>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054e5 	.word	0x080054e5
 80054d8:	080054ed 	.word	0x080054ed
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054fd 	.word	0x080054fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	220c      	movs	r2, #12
 80054e8:	605a      	str	r2, [r3, #4]
          break;
 80054ea:	e011      	b.n	8005510 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2212      	movs	r2, #18
 80054f0:	605a      	str	r2, [r3, #4]
          break;
 80054f2:	e00d      	b.n	8005510 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2218      	movs	r2, #24
 80054f8:	605a      	str	r2, [r3, #4]
          break;
 80054fa:	e009      	b.n	8005510 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005502:	605a      	str	r2, [r3, #4]
          break;
 8005504:	e004      	b.n	8005510 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2206      	movs	r2, #6
 800550a:	605a      	str	r2, [r3, #4]
          break;
 800550c:	e000      	b.n	8005510 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800550e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6859      	ldr	r1, [r3, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	f7ff fd51 	bl	8004fc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fe29 	bl	800517e <LL_ADC_REG_IsConversionOngoing>
 800552c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fe35 	bl	80051a4 <LL_ADC_INJ_IsConversionOngoing>
 800553a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800553e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005542:	2b00      	cmp	r3, #0
 8005544:	f040 81c1 	bne.w	80058ca <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800554c:	2b00      	cmp	r3, #0
 800554e:	f040 81bc 	bne.w	80058ca <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555a:	d10f      	bne.n	800557c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2200      	movs	r2, #0
 8005566:	4619      	mov	r1, r3
 8005568:	f7ff fd58 	bl	800501c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fd12 	bl	8004f9e <LL_ADC_SetSamplingTimeCommonConfig>
 800557a:	e00e      	b.n	800559a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	461a      	mov	r2, r3
 800558a:	f7ff fd47 	bl	800501c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2100      	movs	r1, #0
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff fd02 	bl	8004f9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	08db      	lsrs	r3, r3, #3
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d00a      	beq.n	80055d2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6919      	ldr	r1, [r3, #16]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055cc:	f7ff fc92 	bl	8004ef4 <LL_ADC_SetOffset>
 80055d0:	e17b      	b.n	80058ca <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fcaf 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x17e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fca4 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	0e9b      	lsrs	r3, r3, #26
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	e01e      	b.n	800563c <HAL_ADC_ConfigChannel+0x1bc>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fc99 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 800560a:	4603      	mov	r3, r0
 800560c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005614:	fa93 f3a3 	rbit	r3, r3
 8005618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800561c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800562c:	2320      	movs	r3, #32
 800562e:	e004      	b.n	800563a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005634:	fab3 f383 	clz	r3, r3
 8005638:	b2db      	uxtb	r3, r3
 800563a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_ADC_ConfigChannel+0x1d4>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	0e9b      	lsrs	r3, r3, #26
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	e018      	b.n	8005686 <HAL_ADC_ConfigChannel+0x206>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800566c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005678:	2320      	movs	r3, #32
 800567a:	e004      	b.n	8005686 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800567c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005686:	429a      	cmp	r2, r3
 8005688:	d106      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fc68 	bl	8004f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fc4c 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <HAL_ADC_ConfigChannel+0x244>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fc41 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 80056ba:	4603      	mov	r3, r0
 80056bc:	0e9b      	lsrs	r3, r3, #26
 80056be:	f003 021f 	and.w	r2, r3, #31
 80056c2:	e01e      	b.n	8005702 <HAL_ADC_ConfigChannel+0x282>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fc36 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056da:	fa93 f3a3 	rbit	r3, r3
 80056de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80056e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80056ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80056f2:	2320      	movs	r3, #32
 80056f4:	e004      	b.n	8005700 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80056f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056fa:	fab3 f383 	clz	r3, r3
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570a:	2b00      	cmp	r3, #0
 800570c:	d105      	bne.n	800571a <HAL_ADC_ConfigChannel+0x29a>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	0e9b      	lsrs	r3, r3, #26
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	e018      	b.n	800574c <HAL_ADC_ConfigChannel+0x2cc>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005726:	fa93 f3a3 	rbit	r3, r3
 800572a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800572e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005736:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800573e:	2320      	movs	r3, #32
 8005740:	e004      	b.n	800574c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8005742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800574c:	429a      	cmp	r2, r3
 800574e:	d106      	bne.n	800575e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	2101      	movs	r1, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fc05 	bl	8004f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2102      	movs	r1, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fbe9 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 800576a:	4603      	mov	r3, r0
 800576c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <HAL_ADC_ConfigChannel+0x30a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2102      	movs	r1, #2
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fbde 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	0e9b      	lsrs	r3, r3, #26
 8005784:	f003 021f 	and.w	r2, r3, #31
 8005788:	e01e      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x348>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2102      	movs	r1, #2
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fbd3 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 8005796:	4603      	mov	r3, r0
 8005798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80057a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80057b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80057b8:	2320      	movs	r3, #32
 80057ba:	e004      	b.n	80057c6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80057bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x360>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0e9b      	lsrs	r3, r3, #26
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	e016      	b.n	800580e <HAL_ADC_ConfigChannel+0x38e>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057ec:	fa93 f3a3 	rbit	r3, r3
 80057f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80057f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80057f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005800:	2320      	movs	r3, #32
 8005802:	e004      	b.n	800580e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005808:	fab3 f383 	clz	r3, r3
 800580c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800580e:	429a      	cmp	r2, r3
 8005810:	d106      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2200      	movs	r2, #0
 8005818:	2102      	movs	r1, #2
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fba4 	bl	8004f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2103      	movs	r1, #3
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fb88 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 800582c:	4603      	mov	r3, r0
 800582e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <HAL_ADC_ConfigChannel+0x3cc>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2103      	movs	r1, #3
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fb7d 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 8005842:	4603      	mov	r3, r0
 8005844:	0e9b      	lsrs	r3, r3, #26
 8005846:	f003 021f 	and.w	r2, r3, #31
 800584a:	e017      	b.n	800587c <HAL_ADC_ConfigChannel+0x3fc>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2103      	movs	r1, #3
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fb72 	bl	8004f3c <LL_ADC_GetOffsetChannel>
 8005858:	4603      	mov	r3, r0
 800585a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585e:	fa93 f3a3 	rbit	r3, r3
 8005862:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005866:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800586e:	2320      	movs	r3, #32
 8005870:	e003      	b.n	800587a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005874:	fab3 f383 	clz	r3, r3
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_ADC_ConfigChannel+0x414>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0e9b      	lsrs	r3, r3, #26
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	e011      	b.n	80058b8 <HAL_ADC_ConfigChannel+0x438>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589c:	fa93 f3a3 	rbit	r3, r3
 80058a0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80058a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80058ac:	2320      	movs	r3, #32
 80058ae:	e003      	b.n	80058b8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	fab3 f383 	clz	r3, r3
 80058b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d106      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	2103      	movs	r1, #3
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fb4f 	bl	8004f68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fc42 	bl	8005158 <LL_ADC_IsEnabled>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 8140 	bne.w	8005b5c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	461a      	mov	r2, r3
 80058ea:	f7ff fbc3 	bl	8005074 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	4a8f      	ldr	r2, [pc, #572]	; (8005b30 <HAL_ADC_ConfigChannel+0x6b0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	f040 8131 	bne.w	8005b5c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x4a2>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	0e9b      	lsrs	r3, r3, #26
 8005910:	3301      	adds	r3, #1
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	2b09      	cmp	r3, #9
 8005918:	bf94      	ite	ls
 800591a:	2301      	movls	r3, #1
 800591c:	2300      	movhi	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	e019      	b.n	8005956 <HAL_ADC_ConfigChannel+0x4d6>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592a:	fa93 f3a3 	rbit	r3, r3
 800592e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005932:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800593a:	2320      	movs	r3, #32
 800593c:	e003      	b.n	8005946 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800593e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005940:	fab3 f383 	clz	r3, r3
 8005944:	b2db      	uxtb	r3, r3
 8005946:	3301      	adds	r3, #1
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	2b09      	cmp	r3, #9
 800594e:	bf94      	ite	ls
 8005950:	2301      	movls	r3, #1
 8005952:	2300      	movhi	r3, #0
 8005954:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005956:	2b00      	cmp	r3, #0
 8005958:	d079      	beq.n	8005a4e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x4f6>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	0e9b      	lsrs	r3, r3, #26
 800596c:	3301      	adds	r3, #1
 800596e:	069b      	lsls	r3, r3, #26
 8005970:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005974:	e015      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x522>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597e:	fa93 f3a3 	rbit	r3, r3
 8005982:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005986:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800598e:	2320      	movs	r3, #32
 8005990:	e003      	b.n	800599a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005994:	fab3 f383 	clz	r3, r3
 8005998:	b2db      	uxtb	r3, r3
 800599a:	3301      	adds	r3, #1
 800599c:	069b      	lsls	r3, r3, #26
 800599e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <HAL_ADC_ConfigChannel+0x542>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	0e9b      	lsrs	r3, r3, #26
 80059b4:	3301      	adds	r3, #1
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2101      	movs	r1, #1
 80059bc:	fa01 f303 	lsl.w	r3, r1, r3
 80059c0:	e017      	b.n	80059f2 <HAL_ADC_ConfigChannel+0x572>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ca:	fa93 f3a3 	rbit	r3, r3
 80059ce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80059d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80059d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80059da:	2320      	movs	r3, #32
 80059dc:	e003      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80059de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e0:	fab3 f383 	clz	r3, r3
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	3301      	adds	r3, #1
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2101      	movs	r1, #1
 80059ee:	fa01 f303 	lsl.w	r3, r1, r3
 80059f2:	ea42 0103 	orr.w	r1, r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0x598>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	0e9b      	lsrs	r3, r3, #26
 8005a08:	3301      	adds	r3, #1
 8005a0a:	f003 021f 	and.w	r2, r3, #31
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	051b      	lsls	r3, r3, #20
 8005a16:	e018      	b.n	8005a4a <HAL_ADC_ConfigChannel+0x5ca>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	fa93 f3a3 	rbit	r3, r3
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005a30:	2320      	movs	r3, #32
 8005a32:	e003      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a36:	fab3 f383 	clz	r3, r3
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	f003 021f 	and.w	r2, r3, #31
 8005a42:	4613      	mov	r3, r2
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	4413      	add	r3, r2
 8005a48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	e081      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d107      	bne.n	8005a6a <HAL_ADC_ConfigChannel+0x5ea>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	0e9b      	lsrs	r3, r3, #26
 8005a60:	3301      	adds	r3, #1
 8005a62:	069b      	lsls	r3, r3, #26
 8005a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a68:	e015      	b.n	8005a96 <HAL_ADC_ConfigChannel+0x616>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	fa93 f3a3 	rbit	r3, r3
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8005a82:	2320      	movs	r3, #32
 8005a84:	e003      	b.n	8005a8e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	fab3 f383 	clz	r3, r3
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	069b      	lsls	r3, r3, #26
 8005a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <HAL_ADC_ConfigChannel+0x636>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	0e9b      	lsrs	r3, r3, #26
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	2101      	movs	r1, #1
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	e017      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x666>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	fa93 f3a3 	rbit	r3, r3
 8005ac2:	61fb      	str	r3, [r7, #28]
  return result;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005ace:	2320      	movs	r3, #32
 8005ad0:	e003      	b.n	8005ada <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	fab3 f383 	clz	r3, r3
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	3301      	adds	r3, #1
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae6:	ea42 0103 	orr.w	r1, r2, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10d      	bne.n	8005b12 <HAL_ADC_ConfigChannel+0x692>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	0e9b      	lsrs	r3, r3, #26
 8005afc:	3301      	adds	r3, #1
 8005afe:	f003 021f 	and.w	r2, r3, #31
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	3b1e      	subs	r3, #30
 8005b0a:	051b      	lsls	r3, r3, #20
 8005b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b10:	e01e      	b.n	8005b50 <HAL_ADC_ConfigChannel+0x6d0>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	fa93 f3a3 	rbit	r3, r3
 8005b1e:	613b      	str	r3, [r7, #16]
  return result;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005b2a:	2320      	movs	r3, #32
 8005b2c:	e006      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x6bc>
 8005b2e:	bf00      	nop
 8005b30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	fab3 f383 	clz	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	f003 021f 	and.w	r2, r3, #31
 8005b42:	4613      	mov	r3, r2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	4413      	add	r3, r2
 8005b48:	3b1e      	subs	r3, #30
 8005b4a:	051b      	lsls	r3, r3, #20
 8005b4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b50:	430b      	orrs	r3, r1
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	6892      	ldr	r2, [r2, #8]
 8005b56:	4619      	mov	r1, r3
 8005b58:	f7ff fa60 	bl	800501c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b44      	ldr	r3, [pc, #272]	; (8005c74 <HAL_ADC_ConfigChannel+0x7f4>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d07a      	beq.n	8005c5e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b68:	4843      	ldr	r0, [pc, #268]	; (8005c78 <HAL_ADC_ConfigChannel+0x7f8>)
 8005b6a:	f7ff f9b5 	bl	8004ed8 <LL_ADC_GetCommonPathInternalCh>
 8005b6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a41      	ldr	r2, [pc, #260]	; (8005c7c <HAL_ADC_ConfigChannel+0x7fc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d12c      	bne.n	8005bd6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d126      	bne.n	8005bd6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a3c      	ldr	r2, [pc, #240]	; (8005c80 <HAL_ADC_ConfigChannel+0x800>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_ADC_ConfigChannel+0x71c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a3b      	ldr	r2, [pc, #236]	; (8005c84 <HAL_ADC_ConfigChannel+0x804>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d15d      	bne.n	8005c58 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4834      	ldr	r0, [pc, #208]	; (8005c78 <HAL_ADC_ConfigChannel+0x7f8>)
 8005ba8:	f7ff f983 	bl	8004eb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bac:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <HAL_ADC_ConfigChannel+0x808>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	4a36      	ldr	r2, [pc, #216]	; (8005c8c <HAL_ADC_ConfigChannel+0x80c>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005bc6:	e002      	b.n	8005bce <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f9      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bd4:	e040      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <HAL_ADC_ConfigChannel+0x810>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d118      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x792>
 8005be0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d112      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	; (8005c80 <HAL_ADC_ConfigChannel+0x800>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_ADC_ConfigChannel+0x780>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <HAL_ADC_ConfigChannel+0x804>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d12d      	bne.n	8005c5c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c08:	4619      	mov	r1, r3
 8005c0a:	481b      	ldr	r0, [pc, #108]	; (8005c78 <HAL_ADC_ConfigChannel+0x7f8>)
 8005c0c:	f7ff f951 	bl	8004eb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c10:	e024      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <HAL_ADC_ConfigChannel+0x814>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d120      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d11a      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a14      	ldr	r2, [pc, #80]	; (8005c80 <HAL_ADC_ConfigChannel+0x800>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d115      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	480e      	ldr	r0, [pc, #56]	; (8005c78 <HAL_ADC_ConfigChannel+0x7f8>)
 8005c3e:	f7ff f938 	bl	8004eb2 <LL_ADC_SetCommonPathInternalCh>
 8005c42:	e00c      	b.n	8005c5e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005c56:	e002      	b.n	8005c5e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c58:	bf00      	nop
 8005c5a:	e000      	b.n	8005c5e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005c66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	37d8      	adds	r7, #216	; 0xd8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	80080000 	.word	0x80080000
 8005c78:	50040300 	.word	0x50040300
 8005c7c:	c7520000 	.word	0xc7520000
 8005c80:	50040000 	.word	0x50040000
 8005c84:	50040200 	.word	0x50040200
 8005c88:	20000000 	.word	0x20000000
 8005c8c:	053e2d63 	.word	0x053e2d63
 8005c90:	cb840000 	.word	0xcb840000
 8005c94:	80000001 	.word	0x80000001

08005c98 <LL_ADC_IsEnabled>:
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <LL_ADC_IsEnabled+0x18>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <LL_ADC_IsEnabled+0x1a>
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <LL_ADC_REG_IsConversionOngoing>:
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d101      	bne.n	8005cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005ce4:	b590      	push	{r4, r7, lr}
 8005ce6:	b0a1      	sub	sp, #132	; 0x84
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e093      	b.n	8005e2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a47      	ldr	r2, [pc, #284]	; (8005e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d102      	bne.n	8005d22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005d1c:	4b46      	ldr	r3, [pc, #280]	; (8005e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e001      	b.n	8005d26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	f043 0220 	orr.w	r2, r3, #32
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e072      	b.n	8005e2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff ffb9 	bl	8005cbe <LL_ADC_REG_IsConversionOngoing>
 8005d4c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff ffb3 	bl	8005cbe <LL_ADC_REG_IsConversionOngoing>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d154      	bne.n	8005e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d151      	bne.n	8005e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d64:	4b35      	ldr	r3, [pc, #212]	; (8005e3c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005d66:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d02c      	beq.n	8005dca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6859      	ldr	r1, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d82:	035b      	lsls	r3, r3, #13
 8005d84:	430b      	orrs	r3, r1
 8005d86:	431a      	orrs	r2, r3
 8005d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d8c:	4829      	ldr	r0, [pc, #164]	; (8005e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005d8e:	f7ff ff83 	bl	8005c98 <LL_ADC_IsEnabled>
 8005d92:	4604      	mov	r4, r0
 8005d94:	4828      	ldr	r0, [pc, #160]	; (8005e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005d96:	f7ff ff7f 	bl	8005c98 <LL_ADC_IsEnabled>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	431c      	orrs	r4, r3
 8005d9e:	4828      	ldr	r0, [pc, #160]	; (8005e40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005da0:	f7ff ff7a 	bl	8005c98 <LL_ADC_IsEnabled>
 8005da4:	4603      	mov	r3, r0
 8005da6:	4323      	orrs	r3, r4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d137      	bne.n	8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005db4:	f023 030f 	bic.w	r3, r3, #15
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	6811      	ldr	r1, [r2, #0]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	6892      	ldr	r2, [r2, #8]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005dc8:	e028      	b.n	8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dd6:	4817      	ldr	r0, [pc, #92]	; (8005e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005dd8:	f7ff ff5e 	bl	8005c98 <LL_ADC_IsEnabled>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4816      	ldr	r0, [pc, #88]	; (8005e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005de0:	f7ff ff5a 	bl	8005c98 <LL_ADC_IsEnabled>
 8005de4:	4603      	mov	r3, r0
 8005de6:	431c      	orrs	r4, r3
 8005de8:	4815      	ldr	r0, [pc, #84]	; (8005e40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005dea:	f7ff ff55 	bl	8005c98 <LL_ADC_IsEnabled>
 8005dee:	4603      	mov	r3, r0
 8005df0:	4323      	orrs	r3, r4
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d112      	bne.n	8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005dfe:	f023 030f 	bic.w	r3, r3, #15
 8005e02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005e04:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e06:	e009      	b.n	8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	f043 0220 	orr.w	r2, r3, #32
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005e1a:	e000      	b.n	8005e1e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005e26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3784      	adds	r7, #132	; 0x84
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd90      	pop	{r4, r7, pc}
 8005e32:	bf00      	nop
 8005e34:	50040000 	.word	0x50040000
 8005e38:	50040100 	.word	0x50040100
 8005e3c:	50040300 	.word	0x50040300
 8005e40:	50040200 	.word	0x50040200

08005e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <__NVIC_SetPriorityGrouping+0x44>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e60:	4013      	ands	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e76:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <__NVIC_SetPriorityGrouping+0x44>)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	60d3      	str	r3, [r2, #12]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	f003 0307 	and.w	r3, r3, #7
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	db0b      	blt.n	8005ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	4907      	ldr	r1, [pc, #28]	; (8005ee0 <__NVIC_EnableIRQ+0x38>)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2001      	movs	r0, #1
 8005eca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	e000e100 	.word	0xe000e100

08005ee4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	db12      	blt.n	8005f1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	f003 021f 	and.w	r2, r3, #31
 8005efc:	490a      	ldr	r1, [pc, #40]	; (8005f28 <__NVIC_DisableIRQ+0x44>)
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	2001      	movs	r0, #1
 8005f06:	fa00 f202 	lsl.w	r2, r0, r2
 8005f0a:	3320      	adds	r3, #32
 8005f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f10:	f3bf 8f4f 	dsb	sy
}
 8005f14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f16:	f3bf 8f6f 	isb	sy
}
 8005f1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	e000e100 	.word	0xe000e100

08005f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	6039      	str	r1, [r7, #0]
 8005f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	db0a      	blt.n	8005f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	490c      	ldr	r1, [pc, #48]	; (8005f78 <__NVIC_SetPriority+0x4c>)
 8005f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4a:	0112      	lsls	r2, r2, #4
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	440b      	add	r3, r1
 8005f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f54:	e00a      	b.n	8005f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	4908      	ldr	r1, [pc, #32]	; (8005f7c <__NVIC_SetPriority+0x50>)
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	3b04      	subs	r3, #4
 8005f64:	0112      	lsls	r2, r2, #4
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	440b      	add	r3, r1
 8005f6a:	761a      	strb	r2, [r3, #24]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	e000e100 	.word	0xe000e100
 8005f7c:	e000ed00 	.word	0xe000ed00

08005f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f1c3 0307 	rsb	r3, r3, #7
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	bf28      	it	cs
 8005f9e:	2304      	movcs	r3, #4
 8005fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	2b06      	cmp	r3, #6
 8005fa8:	d902      	bls.n	8005fb0 <NVIC_EncodePriority+0x30>
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	3b03      	subs	r3, #3
 8005fae:	e000      	b.n	8005fb2 <NVIC_EncodePriority+0x32>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43da      	mvns	r2, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd2:	43d9      	mvns	r1, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fd8:	4313      	orrs	r3, r2
         );
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3724      	adds	r7, #36	; 0x24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff8:	d301      	bcc.n	8005ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e00f      	b.n	800601e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <SysTick_Config+0x40>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3b01      	subs	r3, #1
 8006004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006006:	210f      	movs	r1, #15
 8006008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800600c:	f7ff ff8e 	bl	8005f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <SysTick_Config+0x40>)
 8006012:	2200      	movs	r2, #0
 8006014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006016:	4b04      	ldr	r3, [pc, #16]	; (8006028 <SysTick_Config+0x40>)
 8006018:	2207      	movs	r2, #7
 800601a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	e000e010 	.word	0xe000e010

0800602c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ff05 	bl	8005e44 <__NVIC_SetPriorityGrouping>
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	4603      	mov	r3, r0
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006054:	f7ff ff1a 	bl	8005e8c <__NVIC_GetPriorityGrouping>
 8006058:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	f7ff ff8e 	bl	8005f80 <NVIC_EncodePriority>
 8006064:	4602      	mov	r2, r0
 8006066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff ff5d 	bl	8005f2c <__NVIC_SetPriority>
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	4603      	mov	r3, r0
 8006082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff0d 	bl	8005ea8 <__NVIC_EnableIRQ>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	4603      	mov	r3, r0
 800609e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80060a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff ff1d 	bl	8005ee4 <__NVIC_DisableIRQ>
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff ff94 	bl	8005fe8 <SysTick_Config>
 80060c0:	4603      	mov	r3, r0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e075      	b.n	80061ca <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fa fc3e 	bl	8000974 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800610e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4b2a      	ldr	r3, [pc, #168]	; (80061d4 <HAL_DCMI_Init+0x108>)
 800612a:	400b      	ands	r3, r1
 800612c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6819      	ldr	r1, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8006142:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800614e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800615a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006166:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006172:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b10      	cmp	r3, #16
 8006182:	d112      	bne.n	80061aa <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	7f1b      	ldrb	r3, [r3, #28]
 8006188:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7f5b      	ldrb	r3, [r3, #29]
 800618e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006190:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7f9b      	ldrb	r3, [r3, #30]
 8006196:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8006198:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7fdb      	ldrb	r3, [r3, #31]
 80061a0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80061a6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80061a8:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 021f 	orr.w	r2, r2, #31
 80061b8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	ffe0f007 	.word	0xffe0f007

080061d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e0ac      	b.n	8006344 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f8b2 	bl	8006358 <DFSDM_GetChannelFromInstance>
 80061f4:	4603      	mov	r3, r0
 80061f6:	4a55      	ldr	r2, [pc, #340]	; (800634c <HAL_DFSDM_ChannelInit+0x174>)
 80061f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e09f      	b.n	8006344 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fa fca1 	bl	8000b4c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800620a:	4b51      	ldr	r3, [pc, #324]	; (8006350 <HAL_DFSDM_ChannelInit+0x178>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3301      	adds	r3, #1
 8006210:	4a4f      	ldr	r2, [pc, #316]	; (8006350 <HAL_DFSDM_ChannelInit+0x178>)
 8006212:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8006214:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <HAL_DFSDM_ChannelInit+0x178>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d125      	bne.n	8006268 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800621c:	4b4d      	ldr	r3, [pc, #308]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a4c      	ldr	r2, [pc, #304]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 8006222:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006226:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8006228:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	4948      	ldr	r1, [pc, #288]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a46      	ldr	r2, [pc, #280]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 800623c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006240:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d108      	bne.n	800625c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800624a:	4b42      	ldr	r3, [pc, #264]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	3b01      	subs	r3, #1
 8006254:	041b      	lsls	r3, r3, #16
 8006256:	493f      	ldr	r1, [pc, #252]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 8006258:	4313      	orrs	r3, r2
 800625a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800625c:	4b3d      	ldr	r3, [pc, #244]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a3c      	ldr	r2, [pc, #240]	; (8006354 <HAL_DFSDM_ChannelInit+0x17c>)
 8006262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006266:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8006276:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006286:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800628c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 020f 	bic.w	r2, r2, #15
 80062a4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80062cc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	3b01      	subs	r3, #1
 80062de:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f002 0207 	and.w	r2, r2, #7
 80062f8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6859      	ldr	r1, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006324:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f810 	bl	8006358 <DFSDM_GetChannelFromInstance>
 8006338:	4602      	mov	r2, r0
 800633a:	4904      	ldr	r1, [pc, #16]	; (800634c <HAL_DFSDM_ChannelInit+0x174>)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20000a90 	.word	0x20000a90
 8006350:	20000a8c 	.word	0x20000a8c
 8006354:	40016000 	.word	0x40016000

08006358 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a1c      	ldr	r2, [pc, #112]	; (80063d4 <DFSDM_GetChannelFromInstance+0x7c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d102      	bne.n	800636e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e02b      	b.n	80063c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <DFSDM_GetChannelFromInstance+0x80>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d102      	bne.n	800637c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8006376:	2301      	movs	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	e024      	b.n	80063c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a17      	ldr	r2, [pc, #92]	; (80063dc <DFSDM_GetChannelFromInstance+0x84>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d102      	bne.n	800638a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8006384:	2302      	movs	r3, #2
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e01d      	b.n	80063c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a14      	ldr	r2, [pc, #80]	; (80063e0 <DFSDM_GetChannelFromInstance+0x88>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d102      	bne.n	8006398 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8006392:	2304      	movs	r3, #4
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e016      	b.n	80063c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a12      	ldr	r2, [pc, #72]	; (80063e4 <DFSDM_GetChannelFromInstance+0x8c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d102      	bne.n	80063a6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80063a0:	2305      	movs	r3, #5
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e00f      	b.n	80063c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a0f      	ldr	r2, [pc, #60]	; (80063e8 <DFSDM_GetChannelFromInstance+0x90>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d102      	bne.n	80063b4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80063ae:	2306      	movs	r3, #6
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e008      	b.n	80063c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <DFSDM_GetChannelFromInstance+0x94>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d102      	bne.n	80063c2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80063bc:	2307      	movs	r3, #7
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e001      	b.n	80063c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80063c2:	2303      	movs	r3, #3
 80063c4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40016000 	.word	0x40016000
 80063d8:	40016020 	.word	0x40016020
 80063dc:	40016040 	.word	0x40016040
 80063e0:	40016080 	.word	0x40016080
 80063e4:	400160a0 	.word	0x400160a0
 80063e8:	400160c0 	.word	0x400160c0
 80063ec:	400160e0 	.word	0x400160e0

080063f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063fe:	e166      	b.n	80066ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	2101      	movs	r1, #1
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	4013      	ands	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8158 	beq.w	80066c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d005      	beq.n	8006430 <HAL_GPIO_Init+0x40>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d130      	bne.n	8006492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	2203      	movs	r2, #3
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	43db      	mvns	r3, r3
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4013      	ands	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006466:	2201      	movs	r2, #1
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	43db      	mvns	r3, r3
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4013      	ands	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 0201 	and.w	r2, r3, #1
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d017      	beq.n	80064ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	2203      	movs	r2, #3
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43db      	mvns	r3, r3
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4013      	ands	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d123      	bne.n	8006522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	08da      	lsrs	r2, r3, #3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3208      	adds	r2, #8
 80064e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	220f      	movs	r2, #15
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	43db      	mvns	r3, r3
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4013      	ands	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	08da      	lsrs	r2, r3, #3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3208      	adds	r2, #8
 800651c:	6939      	ldr	r1, [r7, #16]
 800651e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	2203      	movs	r2, #3
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4013      	ands	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0203 	and.w	r2, r3, #3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80b2 	beq.w	80066c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006564:	4b61      	ldr	r3, [pc, #388]	; (80066ec <HAL_GPIO_Init+0x2fc>)
 8006566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006568:	4a60      	ldr	r2, [pc, #384]	; (80066ec <HAL_GPIO_Init+0x2fc>)
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	6613      	str	r3, [r2, #96]	; 0x60
 8006570:	4b5e      	ldr	r3, [pc, #376]	; (80066ec <HAL_GPIO_Init+0x2fc>)
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800657c:	4a5c      	ldr	r2, [pc, #368]	; (80066f0 <HAL_GPIO_Init+0x300>)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	089b      	lsrs	r3, r3, #2
 8006582:	3302      	adds	r3, #2
 8006584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	220f      	movs	r2, #15
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4013      	ands	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065a6:	d02b      	beq.n	8006600 <HAL_GPIO_Init+0x210>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a52      	ldr	r2, [pc, #328]	; (80066f4 <HAL_GPIO_Init+0x304>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d025      	beq.n	80065fc <HAL_GPIO_Init+0x20c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a51      	ldr	r2, [pc, #324]	; (80066f8 <HAL_GPIO_Init+0x308>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d01f      	beq.n	80065f8 <HAL_GPIO_Init+0x208>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a50      	ldr	r2, [pc, #320]	; (80066fc <HAL_GPIO_Init+0x30c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d019      	beq.n	80065f4 <HAL_GPIO_Init+0x204>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a4f      	ldr	r2, [pc, #316]	; (8006700 <HAL_GPIO_Init+0x310>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_GPIO_Init+0x200>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a4e      	ldr	r2, [pc, #312]	; (8006704 <HAL_GPIO_Init+0x314>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00d      	beq.n	80065ec <HAL_GPIO_Init+0x1fc>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a4d      	ldr	r2, [pc, #308]	; (8006708 <HAL_GPIO_Init+0x318>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <HAL_GPIO_Init+0x1f8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a4c      	ldr	r2, [pc, #304]	; (800670c <HAL_GPIO_Init+0x31c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d101      	bne.n	80065e4 <HAL_GPIO_Init+0x1f4>
 80065e0:	2307      	movs	r3, #7
 80065e2:	e00e      	b.n	8006602 <HAL_GPIO_Init+0x212>
 80065e4:	2308      	movs	r3, #8
 80065e6:	e00c      	b.n	8006602 <HAL_GPIO_Init+0x212>
 80065e8:	2306      	movs	r3, #6
 80065ea:	e00a      	b.n	8006602 <HAL_GPIO_Init+0x212>
 80065ec:	2305      	movs	r3, #5
 80065ee:	e008      	b.n	8006602 <HAL_GPIO_Init+0x212>
 80065f0:	2304      	movs	r3, #4
 80065f2:	e006      	b.n	8006602 <HAL_GPIO_Init+0x212>
 80065f4:	2303      	movs	r3, #3
 80065f6:	e004      	b.n	8006602 <HAL_GPIO_Init+0x212>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e002      	b.n	8006602 <HAL_GPIO_Init+0x212>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <HAL_GPIO_Init+0x212>
 8006600:	2300      	movs	r3, #0
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	f002 0203 	and.w	r2, r2, #3
 8006608:	0092      	lsls	r2, r2, #2
 800660a:	4093      	lsls	r3, r2
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006612:	4937      	ldr	r1, [pc, #220]	; (80066f0 <HAL_GPIO_Init+0x300>)
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	089b      	lsrs	r3, r3, #2
 8006618:	3302      	adds	r3, #2
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006620:	4b3b      	ldr	r3, [pc, #236]	; (8006710 <HAL_GPIO_Init+0x320>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	43db      	mvns	r3, r3
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4013      	ands	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006644:	4a32      	ldr	r2, [pc, #200]	; (8006710 <HAL_GPIO_Init+0x320>)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800664a:	4b31      	ldr	r3, [pc, #196]	; (8006710 <HAL_GPIO_Init+0x320>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	43db      	mvns	r3, r3
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4013      	ands	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800666e:	4a28      	ldr	r2, [pc, #160]	; (8006710 <HAL_GPIO_Init+0x320>)
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006674:	4b26      	ldr	r3, [pc, #152]	; (8006710 <HAL_GPIO_Init+0x320>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	43db      	mvns	r3, r3
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4013      	ands	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006698:	4a1d      	ldr	r2, [pc, #116]	; (8006710 <HAL_GPIO_Init+0x320>)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800669e:	4b1c      	ldr	r3, [pc, #112]	; (8006710 <HAL_GPIO_Init+0x320>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	43db      	mvns	r3, r3
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4013      	ands	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066c2:	4a13      	ldr	r2, [pc, #76]	; (8006710 <HAL_GPIO_Init+0x320>)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	3301      	adds	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f47f ae91 	bne.w	8006400 <HAL_GPIO_Init+0x10>
  }
}
 80066de:	bf00      	nop
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40021000 	.word	0x40021000
 80066f0:	40010000 	.word	0x40010000
 80066f4:	48000400 	.word	0x48000400
 80066f8:	48000800 	.word	0x48000800
 80066fc:	48000c00 	.word	0x48000c00
 8006700:	48001000 	.word	0x48001000
 8006704:	48001400 	.word	0x48001400
 8006708:	48001800 	.word	0x48001800
 800670c:	48001c00 	.word	0x48001c00
 8006710:	40010400 	.word	0x40010400

08006714 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006722:	e0c9      	b.n	80068b8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006724:	2201      	movs	r2, #1
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	4013      	ands	r3, r2
 8006730:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80bc 	beq.w	80068b2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800673a:	4a66      	ldr	r2, [pc, #408]	; (80068d4 <HAL_GPIO_DeInit+0x1c0>)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	089b      	lsrs	r3, r3, #2
 8006740:	3302      	adds	r3, #2
 8006742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006746:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	220f      	movs	r2, #15
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4013      	ands	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006762:	d02b      	beq.n	80067bc <HAL_GPIO_DeInit+0xa8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a5c      	ldr	r2, [pc, #368]	; (80068d8 <HAL_GPIO_DeInit+0x1c4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d025      	beq.n	80067b8 <HAL_GPIO_DeInit+0xa4>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a5b      	ldr	r2, [pc, #364]	; (80068dc <HAL_GPIO_DeInit+0x1c8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d01f      	beq.n	80067b4 <HAL_GPIO_DeInit+0xa0>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a5a      	ldr	r2, [pc, #360]	; (80068e0 <HAL_GPIO_DeInit+0x1cc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d019      	beq.n	80067b0 <HAL_GPIO_DeInit+0x9c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a59      	ldr	r2, [pc, #356]	; (80068e4 <HAL_GPIO_DeInit+0x1d0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <HAL_GPIO_DeInit+0x98>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a58      	ldr	r2, [pc, #352]	; (80068e8 <HAL_GPIO_DeInit+0x1d4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00d      	beq.n	80067a8 <HAL_GPIO_DeInit+0x94>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a57      	ldr	r2, [pc, #348]	; (80068ec <HAL_GPIO_DeInit+0x1d8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d007      	beq.n	80067a4 <HAL_GPIO_DeInit+0x90>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a56      	ldr	r2, [pc, #344]	; (80068f0 <HAL_GPIO_DeInit+0x1dc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_GPIO_DeInit+0x8c>
 800679c:	2307      	movs	r3, #7
 800679e:	e00e      	b.n	80067be <HAL_GPIO_DeInit+0xaa>
 80067a0:	2308      	movs	r3, #8
 80067a2:	e00c      	b.n	80067be <HAL_GPIO_DeInit+0xaa>
 80067a4:	2306      	movs	r3, #6
 80067a6:	e00a      	b.n	80067be <HAL_GPIO_DeInit+0xaa>
 80067a8:	2305      	movs	r3, #5
 80067aa:	e008      	b.n	80067be <HAL_GPIO_DeInit+0xaa>
 80067ac:	2304      	movs	r3, #4
 80067ae:	e006      	b.n	80067be <HAL_GPIO_DeInit+0xaa>
 80067b0:	2303      	movs	r3, #3
 80067b2:	e004      	b.n	80067be <HAL_GPIO_DeInit+0xaa>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e002      	b.n	80067be <HAL_GPIO_DeInit+0xaa>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_GPIO_DeInit+0xaa>
 80067bc:	2300      	movs	r3, #0
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	f002 0203 	and.w	r2, r2, #3
 80067c4:	0092      	lsls	r2, r2, #2
 80067c6:	4093      	lsls	r3, r2
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d132      	bne.n	8006834 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80067ce:	4b49      	ldr	r3, [pc, #292]	; (80068f4 <HAL_GPIO_DeInit+0x1e0>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	43db      	mvns	r3, r3
 80067d6:	4947      	ldr	r1, [pc, #284]	; (80068f4 <HAL_GPIO_DeInit+0x1e0>)
 80067d8:	4013      	ands	r3, r2
 80067da:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80067dc:	4b45      	ldr	r3, [pc, #276]	; (80068f4 <HAL_GPIO_DeInit+0x1e0>)
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	43db      	mvns	r3, r3
 80067e4:	4943      	ldr	r1, [pc, #268]	; (80068f4 <HAL_GPIO_DeInit+0x1e0>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80067ea:	4b42      	ldr	r3, [pc, #264]	; (80068f4 <HAL_GPIO_DeInit+0x1e0>)
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	43db      	mvns	r3, r3
 80067f2:	4940      	ldr	r1, [pc, #256]	; (80068f4 <HAL_GPIO_DeInit+0x1e0>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80067f8:	4b3e      	ldr	r3, [pc, #248]	; (80068f4 <HAL_GPIO_DeInit+0x1e0>)
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	43db      	mvns	r3, r3
 8006800:	493c      	ldr	r1, [pc, #240]	; (80068f4 <HAL_GPIO_DeInit+0x1e0>)
 8006802:	4013      	ands	r3, r2
 8006804:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	220f      	movs	r2, #15
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006816:	4a2f      	ldr	r2, [pc, #188]	; (80068d4 <HAL_GPIO_DeInit+0x1c0>)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	089b      	lsrs	r3, r3, #2
 800681c:	3302      	adds	r3, #2
 800681e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	43da      	mvns	r2, r3
 8006826:	482b      	ldr	r0, [pc, #172]	; (80068d4 <HAL_GPIO_DeInit+0x1c0>)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	089b      	lsrs	r3, r3, #2
 800682c:	400a      	ands	r2, r1
 800682e:	3302      	adds	r3, #2
 8006830:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	2103      	movs	r1, #3
 800683e:	fa01 f303 	lsl.w	r3, r1, r3
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	08da      	lsrs	r2, r3, #3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3208      	adds	r2, #8
 8006850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	220f      	movs	r2, #15
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	43db      	mvns	r3, r3
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	08d2      	lsrs	r2, r2, #3
 8006868:	4019      	ands	r1, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3208      	adds	r2, #8
 800686e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	2103      	movs	r1, #3
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	43db      	mvns	r3, r3
 8006882:	401a      	ands	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	2101      	movs	r1, #1
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	fa01 f303 	lsl.w	r3, r1, r3
 8006894:	43db      	mvns	r3, r3
 8006896:	401a      	ands	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	2103      	movs	r1, #3
 80068a6:	fa01 f303 	lsl.w	r3, r1, r3
 80068aa:	43db      	mvns	r3, r3
 80068ac:	401a      	ands	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	3301      	adds	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	fa22 f303 	lsr.w	r3, r2, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f47f af2f 	bne.w	8006724 <HAL_GPIO_DeInit+0x10>
  }
}
 80068c6:	bf00      	nop
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40010000 	.word	0x40010000
 80068d8:	48000400 	.word	0x48000400
 80068dc:	48000800 	.word	0x48000800
 80068e0:	48000c00 	.word	0x48000c00
 80068e4:	48001000 	.word	0x48001000
 80068e8:	48001400 	.word	0x48001400
 80068ec:	48001800 	.word	0x48001800
 80068f0:	48001c00 	.word	0x48001c00
 80068f4:	40010400 	.word	0x40010400

080068f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	807b      	strh	r3, [r7, #2]
 8006904:	4613      	mov	r3, r2
 8006906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006908:	787b      	ldrb	r3, [r7, #1]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800690e:	887a      	ldrh	r2, [r7, #2]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006914:	e002      	b.n	800691c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006916:	887a      	ldrh	r2, [r7, #2]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d006      	beq.n	800694c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800693e:	4a05      	ldr	r2, [pc, #20]	; (8006954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	4618      	mov	r0, r3
 8006948:	f7fa feea 	bl	8001720 <HAL_GPIO_EXTI_Callback>
  }
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40010400 	.word	0x40010400

08006958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e081      	b.n	8006a6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fa fca4 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2224      	movs	r2, #36	; 0x24
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80069a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d107      	bne.n	80069d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ce:	609a      	str	r2, [r3, #8]
 80069d0:	e006      	b.n	80069e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80069de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d104      	bne.n	80069f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69d9      	ldr	r1, [r3, #28]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1a      	ldr	r2, [r3, #32]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e021      	b.n	8006acc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2224      	movs	r2, #36	; 0x24
 8006a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0201 	bic.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fa fcd9 	bl	8001458 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	4608      	mov	r0, r1
 8006ade:	4611      	mov	r1, r2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	817b      	strh	r3, [r7, #10]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	813b      	strh	r3, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	f040 80f9 	bne.w	8006cee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_I2C_Mem_Write+0x34>
 8006b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0ed      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_I2C_Mem_Write+0x4e>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e0e6      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x21c>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b2a:	f7fe f95f 	bl	8004dec <HAL_GetTick>
 8006b2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	2319      	movs	r3, #25
 8006b36:	2201      	movs	r2, #1
 8006b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 fbd9 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0d1      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2221      	movs	r2, #33	; 0x21
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2240      	movs	r2, #64	; 0x40
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b74:	88f8      	ldrh	r0, [r7, #6]
 8006b76:	893a      	ldrh	r2, [r7, #8]
 8006b78:	8979      	ldrh	r1, [r7, #10]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	4603      	mov	r3, r0
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fae9 	bl	800715c <I2C_RequestMemoryWrite>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0a9      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2bff      	cmp	r3, #255	; 0xff
 8006ba4:	d90e      	bls.n	8006bc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	22ff      	movs	r2, #255	; 0xff
 8006baa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	8979      	ldrh	r1, [r7, #10]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fd41 	bl	8007644 <I2C_TransferConfig>
 8006bc2:	e00f      	b.n	8006be4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	8979      	ldrh	r1, [r7, #10]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fd30 	bl	8007644 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fbc3 	bl	8007374 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e07b      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d034      	beq.n	8006c9c <HAL_I2C_Mem_Write+0x1c8>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d130      	bne.n	8006c9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	2200      	movs	r2, #0
 8006c42:	2180      	movs	r1, #128	; 0x80
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fb55 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e04d      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2bff      	cmp	r3, #255	; 0xff
 8006c5c:	d90e      	bls.n	8006c7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22ff      	movs	r2, #255	; 0xff
 8006c62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	8979      	ldrh	r1, [r7, #10]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fce5 	bl	8007644 <I2C_TransferConfig>
 8006c7a:	e00f      	b.n	8006c9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	8979      	ldrh	r1, [r7, #10]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fcd4 	bl	8007644 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d19e      	bne.n	8006be4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fba2 	bl	80073f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e01a      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6859      	ldr	r1, [r3, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <HAL_I2C_Mem_Write+0x224>)
 8006cce:	400b      	ands	r3, r1
 8006cd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e000      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cee:	2302      	movs	r3, #2
  }
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	fe00e800 	.word	0xfe00e800

08006cfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	4608      	mov	r0, r1
 8006d06:	4611      	mov	r1, r2
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	817b      	strh	r3, [r7, #10]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	813b      	strh	r3, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	f040 80fd 	bne.w	8006f1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <HAL_I2C_Mem_Read+0x34>
 8006d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d105      	bne.n	8006d3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0f1      	b.n	8006f20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_I2C_Mem_Read+0x4e>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e0ea      	b.n	8006f20 <HAL_I2C_Mem_Read+0x224>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d52:	f7fe f84b 	bl	8004dec <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	2319      	movs	r3, #25
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fac5 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0d5      	b.n	8006f20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2222      	movs	r2, #34	; 0x22
 8006d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2240      	movs	r2, #64	; 0x40
 8006d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a3a      	ldr	r2, [r7, #32]
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d9c:	88f8      	ldrh	r0, [r7, #6]
 8006d9e:	893a      	ldrh	r2, [r7, #8]
 8006da0:	8979      	ldrh	r1, [r7, #10]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	4603      	mov	r3, r0
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fa29 	bl	8007204 <I2C_RequestMemoryRead>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0ad      	b.n	8006f20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2bff      	cmp	r3, #255	; 0xff
 8006dcc:	d90e      	bls.n	8006dec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	22ff      	movs	r2, #255	; 0xff
 8006dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	8979      	ldrh	r1, [r7, #10]
 8006ddc:	4b52      	ldr	r3, [pc, #328]	; (8006f28 <HAL_I2C_Mem_Read+0x22c>)
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fc2d 	bl	8007644 <I2C_TransferConfig>
 8006dea:	e00f      	b.n	8006e0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	8979      	ldrh	r1, [r7, #10]
 8006dfe:	4b4a      	ldr	r3, [pc, #296]	; (8006f28 <HAL_I2C_Mem_Read+0x22c>)
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fc1c 	bl	8007644 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	2200      	movs	r2, #0
 8006e14:	2104      	movs	r1, #4
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fa6c 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e07c      	b.n	8006f20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d034      	beq.n	8006ecc <HAL_I2C_Mem_Read+0x1d0>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d130      	bne.n	8006ecc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	2200      	movs	r2, #0
 8006e72:	2180      	movs	r1, #128	; 0x80
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 fa3d 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e04d      	b.n	8006f20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2bff      	cmp	r3, #255	; 0xff
 8006e8c:	d90e      	bls.n	8006eac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	22ff      	movs	r2, #255	; 0xff
 8006e92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	8979      	ldrh	r1, [r7, #10]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fbcd 	bl	8007644 <I2C_TransferConfig>
 8006eaa:	e00f      	b.n	8006ecc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	8979      	ldrh	r1, [r7, #10]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 fbbc 	bl	8007644 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d19a      	bne.n	8006e0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fa8a 	bl	80073f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e01a      	b.n	8006f20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6859      	ldr	r1, [r3, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <HAL_I2C_Mem_Read+0x230>)
 8006efe:	400b      	ands	r3, r1
 8006f00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e000      	b.n	8006f20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f1e:	2302      	movs	r3, #2
  }
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	80002400 	.word	0x80002400
 8006f2c:	fe00e800 	.word	0xfe00e800

08006f30 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	f040 80f1 	bne.w	8007134 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f60:	d101      	bne.n	8006f66 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006f62:	2302      	movs	r3, #2
 8006f64:	e0e7      	b.n	8007136 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_I2C_IsDeviceReady+0x44>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e0e0      	b.n	8007136 <HAL_I2C_IsDeviceReady+0x206>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2224      	movs	r2, #36	; 0x24
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d107      	bne.n	8006fa2 <HAL_I2C_IsDeviceReady+0x72>
 8006f92:	897b      	ldrh	r3, [r7, #10]
 8006f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fa0:	e004      	b.n	8006fac <HAL_I2C_IsDeviceReady+0x7c>
 8006fa2:	897b      	ldrh	r3, [r7, #10]
 8006fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006fb2:	f7fd ff1b 	bl	8004dec <HAL_GetTick>
 8006fb6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006fe4:	e034      	b.n	8007050 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fec:	d01a      	beq.n	8007024 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fee:	f7fd fefd 	bl	8004dec <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d302      	bcc.n	8007004 <HAL_I2C_IsDeviceReady+0xd4>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10f      	bne.n	8007024 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007010:	f043 0220 	orr.w	r2, r3, #32
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e088      	b.n	8007136 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b20      	cmp	r3, #32
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b10      	cmp	r3, #16
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007050:	7ffb      	ldrb	r3, [r7, #31]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d102      	bne.n	800705c <HAL_I2C_IsDeviceReady+0x12c>
 8007056:	7fbb      	ldrb	r3, [r7, #30]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0c4      	beq.n	8006fe6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	2b10      	cmp	r3, #16
 8007068:	d01a      	beq.n	80070a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2200      	movs	r2, #0
 8007072:	2120      	movs	r1, #32
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f93d 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e058      	b.n	8007136 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2220      	movs	r2, #32
 800708a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e04a      	b.n	8007136 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	2120      	movs	r1, #32
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f922 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e03d      	b.n	8007136 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2210      	movs	r2, #16
 80070c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2220      	movs	r2, #32
 80070c8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d118      	bne.n	8007104 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070e0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2200      	movs	r2, #0
 80070ea:	2120      	movs	r1, #32
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f901 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e01c      	b.n	8007136 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2220      	movs	r2, #32
 8007102:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	3301      	adds	r3, #1
 8007108:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	f63f af3b 	bhi.w	8006f8a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007134:	2302      	movs	r3, #2
  }
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714c:	b2db      	uxtb	r3, r3
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
	...

0800715c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af02      	add	r7, sp, #8
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	4608      	mov	r0, r1
 8007166:	4611      	mov	r1, r2
 8007168:	461a      	mov	r2, r3
 800716a:	4603      	mov	r3, r0
 800716c:	817b      	strh	r3, [r7, #10]
 800716e:	460b      	mov	r3, r1
 8007170:	813b      	strh	r3, [r7, #8]
 8007172:	4613      	mov	r3, r2
 8007174:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	b2da      	uxtb	r2, r3
 800717a:	8979      	ldrh	r1, [r7, #10]
 800717c:	4b20      	ldr	r3, [pc, #128]	; (8007200 <I2C_RequestMemoryWrite+0xa4>)
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fa5d 	bl	8007644 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	69b9      	ldr	r1, [r7, #24]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f8f0 	bl	8007374 <I2C_WaitOnTXISFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e02c      	b.n	80071f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d105      	bne.n	80071b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	629a      	str	r2, [r3, #40]	; 0x28
 80071ae:	e015      	b.n	80071dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071b0:	893b      	ldrh	r3, [r7, #8]
 80071b2:	0a1b      	lsrs	r3, r3, #8
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	69b9      	ldr	r1, [r7, #24]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 f8d6 	bl	8007374 <I2C_WaitOnTXISFlagUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e012      	b.n	80071f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071d2:	893b      	ldrh	r3, [r7, #8]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2200      	movs	r2, #0
 80071e4:	2180      	movs	r1, #128	; 0x80
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f884 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	80002000 	.word	0x80002000

08007204 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	4608      	mov	r0, r1
 800720e:	4611      	mov	r1, r2
 8007210:	461a      	mov	r2, r3
 8007212:	4603      	mov	r3, r0
 8007214:	817b      	strh	r3, [r7, #10]
 8007216:	460b      	mov	r3, r1
 8007218:	813b      	strh	r3, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	b2da      	uxtb	r2, r3
 8007222:	8979      	ldrh	r1, [r7, #10]
 8007224:	4b20      	ldr	r3, [pc, #128]	; (80072a8 <I2C_RequestMemoryRead+0xa4>)
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2300      	movs	r3, #0
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fa0a 	bl	8007644 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	69b9      	ldr	r1, [r7, #24]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f89d 	bl	8007374 <I2C_WaitOnTXISFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e02c      	b.n	800729e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d105      	bne.n	8007256 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800724a:	893b      	ldrh	r3, [r7, #8]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
 8007254:	e015      	b.n	8007282 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007256:	893b      	ldrh	r3, [r7, #8]
 8007258:	0a1b      	lsrs	r3, r3, #8
 800725a:	b29b      	uxth	r3, r3
 800725c:	b2da      	uxtb	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	69b9      	ldr	r1, [r7, #24]
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f883 	bl	8007374 <I2C_WaitOnTXISFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e012      	b.n	800729e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007278:	893b      	ldrh	r3, [r7, #8]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2200      	movs	r2, #0
 800728a:	2140      	movs	r1, #64	; 0x40
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f831 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	80002000 	.word	0x80002000

080072ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d103      	bne.n	80072ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2200      	movs	r2, #0
 80072c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d007      	beq.n	80072e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	619a      	str	r2, [r3, #24]
  }
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007304:	e022      	b.n	800734c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800730c:	d01e      	beq.n	800734c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730e:	f7fd fd6d 	bl	8004dec <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d113      	bne.n	800734c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007328:	f043 0220 	orr.w	r2, r3, #32
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e00f      	b.n	800736c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	4013      	ands	r3, r2
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	429a      	cmp	r2, r3
 800735a:	bf0c      	ite	eq
 800735c:	2301      	moveq	r3, #1
 800735e:	2300      	movne	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	429a      	cmp	r2, r3
 8007368:	d0cd      	beq.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007380:	e02c      	b.n	80073dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f870 	bl	800746c <I2C_IsErrorOccurred>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e02a      	b.n	80073ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800739c:	d01e      	beq.n	80073dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739e:	f7fd fd25 	bl	8004dec <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d113      	bne.n	80073dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b8:	f043 0220 	orr.w	r2, r3, #32
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e007      	b.n	80073ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d1cb      	bne.n	8007382 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007400:	e028      	b.n	8007454 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f830 	bl	800746c <I2C_IsErrorOccurred>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e026      	b.n	8007464 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007416:	f7fd fce9 	bl	8004dec <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d113      	bne.n	8007454 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007430:	f043 0220 	orr.w	r2, r3, #32
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e007      	b.n	8007464 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b20      	cmp	r3, #32
 8007460:	d1cf      	bne.n	8007402 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	; 0x28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b00      	cmp	r3, #0
 8007496:	d075      	beq.n	8007584 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2210      	movs	r2, #16
 800749e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074a0:	e056      	b.n	8007550 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a8:	d052      	beq.n	8007550 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074aa:	f7fd fc9f 	bl	8004dec <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <I2C_IsErrorOccurred+0x54>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d147      	bne.n	8007550 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e2:	d12e      	bne.n	8007542 <I2C_IsErrorOccurred+0xd6>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ea:	d02a      	beq.n	8007542 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80074ec:	7cfb      	ldrb	r3, [r7, #19]
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d027      	beq.n	8007542 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007500:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007502:	f7fd fc73 	bl	8004dec <HAL_GetTick>
 8007506:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007508:	e01b      	b.n	8007542 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800750a:	f7fd fc6f 	bl	8004dec <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b19      	cmp	r3, #25
 8007516:	d914      	bls.n	8007542 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b20      	cmp	r3, #32
 800754e:	d1dc      	bne.n	800750a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b20      	cmp	r3, #32
 800755c:	d003      	beq.n	8007566 <I2C_IsErrorOccurred+0xfa>
 800755e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007562:	2b00      	cmp	r3, #0
 8007564:	d09d      	beq.n	80074a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2220      	movs	r2, #32
 8007574:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	f043 0304 	orr.w	r3, r3, #4
 800757c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	f043 0308 	orr.w	r3, r3, #8
 80075be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00b      	beq.n	80075f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	f043 0302 	orr.w	r3, r3, #2
 80075e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80075f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01c      	beq.n	8007634 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff fe56 	bl	80072ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6859      	ldr	r1, [r3, #4]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <I2C_IsErrorOccurred+0x1d4>)
 800760c:	400b      	ands	r3, r1
 800760e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	431a      	orrs	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007638:	4618      	mov	r0, r3
 800763a:	3728      	adds	r7, #40	; 0x28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	fe00e800 	.word	0xfe00e800

08007644 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	607b      	str	r3, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	817b      	strh	r3, [r7, #10]
 8007652:	4613      	mov	r3, r2
 8007654:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007656:	897b      	ldrh	r3, [r7, #10]
 8007658:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800765c:	7a7b      	ldrb	r3, [r7, #9]
 800765e:	041b      	lsls	r3, r3, #16
 8007660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007664:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	4313      	orrs	r3, r2
 800766e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007672:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	0d5b      	lsrs	r3, r3, #21
 800767e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007682:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <I2C_TransferConfig+0x60>)
 8007684:	430b      	orrs	r3, r1
 8007686:	43db      	mvns	r3, r3
 8007688:	ea02 0103 	and.w	r1, r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007696:	bf00      	nop
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	03ff63ff 	.word	0x03ff63ff

080076a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d138      	bne.n	8007730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e032      	b.n	8007732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2224      	movs	r2, #36	; 0x24
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6819      	ldr	r1, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	e000      	b.n	8007732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007730:	2302      	movs	r3, #2
  }
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b20      	cmp	r3, #32
 8007752:	d139      	bne.n	80077c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800775e:	2302      	movs	r3, #2
 8007760:	e033      	b.n	80077ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2224      	movs	r2, #36	; 0x24
 800776e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	e000      	b.n	80077ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077c8:	2302      	movs	r3, #2
  }
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80077d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077d8:	b08f      	sub	sp, #60	; 0x3c
 80077da:	af0a      	add	r7, sp, #40	; 0x28
 80077dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e116      	b.n	8007a16 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f009 f9f4 	bl	8010bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2203      	movs	r2, #3
 800780c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f006 f903 	bl	800da32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	603b      	str	r3, [r7, #0]
 8007832:	687e      	ldr	r6, [r7, #4]
 8007834:	466d      	mov	r5, sp
 8007836:	f106 0410 	add.w	r4, r6, #16
 800783a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800783c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800783e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007846:	e885 0003 	stmia.w	r5, {r0, r1}
 800784a:	1d33      	adds	r3, r6, #4
 800784c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800784e:	6838      	ldr	r0, [r7, #0]
 8007850:	f006 f816 	bl	800d880 <USB_CoreInit>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e0d7      	b.n	8007a16 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2100      	movs	r1, #0
 800786c:	4618      	mov	r0, r3
 800786e:	f006 f8f1 	bl	800da54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
 8007876:	e04a      	b.n	800790e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007878:	7bfa      	ldrb	r2, [r7, #15]
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	4613      	mov	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	440b      	add	r3, r1
 8007886:	333d      	adds	r3, #61	; 0x3d
 8007888:	2201      	movs	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800788c:	7bfa      	ldrb	r2, [r7, #15]
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	4613      	mov	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	333c      	adds	r3, #60	; 0x3c
 800789c:	7bfa      	ldrb	r2, [r7, #15]
 800789e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80078a0:	7bfa      	ldrb	r2, [r7, #15]
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	b298      	uxth	r0, r3
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	4613      	mov	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	3344      	adds	r3, #68	; 0x44
 80078b4:	4602      	mov	r2, r0
 80078b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80078b8:	7bfa      	ldrb	r2, [r7, #15]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	3340      	adds	r3, #64	; 0x40
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80078cc:	7bfa      	ldrb	r2, [r7, #15]
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	4613      	mov	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	3348      	adds	r3, #72	; 0x48
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80078e0:	7bfa      	ldrb	r2, [r7, #15]
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	4613      	mov	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	334c      	adds	r3, #76	; 0x4c
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80078f4:	7bfa      	ldrb	r2, [r7, #15]
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	4613      	mov	r3, r2
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	4413      	add	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	440b      	add	r3, r1
 8007902:	3354      	adds	r3, #84	; 0x54
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	3301      	adds	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
 800790e:	7bfa      	ldrb	r2, [r7, #15]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	d3af      	bcc.n	8007878 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
 800791c:	e044      	b.n	80079a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800791e:	7bfa      	ldrb	r2, [r7, #15]
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4613      	mov	r3, r2
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007934:	7bfa      	ldrb	r2, [r7, #15]
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	4613      	mov	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	440b      	add	r3, r1
 8007942:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007946:	7bfa      	ldrb	r2, [r7, #15]
 8007948:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800794a:	7bfa      	ldrb	r2, [r7, #15]
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	4613      	mov	r3, r2
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	440b      	add	r3, r1
 8007958:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007960:	7bfa      	ldrb	r2, [r7, #15]
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	4613      	mov	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	440b      	add	r3, r1
 800796e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007976:	7bfa      	ldrb	r2, [r7, #15]
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	440b      	add	r3, r1
 8007984:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800798c:	7bfa      	ldrb	r2, [r7, #15]
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	3301      	adds	r3, #1
 80079a6:	73fb      	strb	r3, [r7, #15]
 80079a8:	7bfa      	ldrb	r2, [r7, #15]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d3b5      	bcc.n	800791e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	687e      	ldr	r6, [r7, #4]
 80079ba:	466d      	mov	r5, sp
 80079bc:	f106 0410 	add.w	r4, r6, #16
 80079c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80079d0:	1d33      	adds	r3, r6, #4
 80079d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079d4:	6838      	ldr	r0, [r7, #0]
 80079d6:	f006 f889 	bl	800daec <USB_DevInit>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e014      	b.n	8007a16 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d102      	bne.n	8007a0a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f881 	bl	8008b0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f007 f911 	bl	800ec36 <USB_DevDisconnect>

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_PCD_Start+0x1c>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e01c      	b.n	8007a74 <HAL_PCD_Start+0x56>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d105      	bne.n	8007a56 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f005 ffd8 	bl	800da10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f007 f8c5 	bl	800ebf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007a7c:	b590      	push	{r4, r7, lr}
 8007a7e:	b08d      	sub	sp, #52	; 0x34
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f007 f983 	bl	800ed9e <USB_GetMode>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 847e 	bne.w	800839c <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f007 f8e7 	bl	800ec78 <USB_ReadInterrupts>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 8474 	beq.w	800839a <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f007 f8d4 	bl	800ec78 <USB_ReadInterrupts>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d107      	bne.n	8007aea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f002 0202 	and.w	r2, r2, #2
 8007ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f007 f8c2 	bl	800ec78 <USB_ReadInterrupts>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d161      	bne.n	8007bc2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0210 	bic.w	r2, r2, #16
 8007b0c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	f003 020f 	and.w	r2, r3, #15
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4413      	add	r3, r2
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	0c5b      	lsrs	r3, r3, #17
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d124      	bne.n	8007b84 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007b40:	4013      	ands	r3, r2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d035      	beq.n	8007bb2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	091b      	lsrs	r3, r3, #4
 8007b4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	6a38      	ldr	r0, [r7, #32]
 8007b5a:	f006 fef9 	bl	800e950 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b6a:	441a      	add	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	091b      	lsrs	r3, r3, #4
 8007b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b7c:	441a      	add	r2, r3
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	621a      	str	r2, [r3, #32]
 8007b82:	e016      	b.n	8007bb2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	0c5b      	lsrs	r3, r3, #17
 8007b88:	f003 030f 	and.w	r3, r3, #15
 8007b8c:	2b06      	cmp	r3, #6
 8007b8e:	d110      	bne.n	8007bb2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b96:	2208      	movs	r2, #8
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6a38      	ldr	r0, [r7, #32]
 8007b9c:	f006 fed8 	bl	800e950 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	6a1a      	ldr	r2, [r3, #32]
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bac:	441a      	add	r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699a      	ldr	r2, [r3, #24]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0210 	orr.w	r2, r2, #16
 8007bc0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f007 f856 	bl	800ec78 <USB_ReadInterrupts>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bd6:	f040 80a7 	bne.w	8007d28 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f007 f85b 	bl	800ec9e <USB_ReadDevAllOutEpInterrupt>
 8007be8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007bea:	e099      	b.n	8007d20 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 808e 	beq.w	8007d14 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f007 f87f 	bl	800ed06 <USB_ReadDevOutEPInterrupt>
 8007c08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c20:	461a      	mov	r2, r3
 8007c22:	2301      	movs	r3, #1
 8007c24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fe95 	bl	8008958 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f003 0308 	and.w	r3, r3, #8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00c      	beq.n	8007c52 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c44:	461a      	mov	r2, r3
 8007c46:	2308      	movs	r3, #8
 8007c48:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fed1 	bl	80089f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d008      	beq.n	8007c6e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c68:	461a      	mov	r2, r3
 8007c6a:	2310      	movs	r3, #16
 8007c6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d030      	beq.n	8007cda <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c80:	2b80      	cmp	r3, #128	; 0x80
 8007c82:	d109      	bne.n	8007c98 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c96:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	3304      	adds	r3, #4
 8007cac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	78db      	ldrb	r3, [r3, #3]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d108      	bne.n	8007cc8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f009 f8bc 	bl	8010e40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	2320      	movs	r3, #32
 8007cf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d009      	beq.n	8007d14 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	3301      	adds	r3, #1
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f47f af62 	bne.w	8007bec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f006 ffa3 	bl	800ec78 <USB_ReadInterrupts>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d3c:	f040 80a4 	bne.w	8007e88 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f006 ffc4 	bl	800ecd2 <USB_ReadDevAllInEpInterrupt>
 8007d4a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007d50:	e096      	b.n	8007e80 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 808b 	beq.w	8007e74 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f006 ffea 	bl	800ed42 <USB_ReadDevInEPInterrupt>
 8007d6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d020      	beq.n	8007dbc <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	2201      	movs	r2, #1
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	43db      	mvns	r3, r3
 8007d94:	69f9      	ldr	r1, [r7, #28]
 8007d96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007daa:	461a      	mov	r2, r3
 8007dac:	2301      	movs	r3, #1
 8007dae:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f008 ffad 	bl	8010d16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d008      	beq.n	8007dd8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f003 0310 	and.w	r3, r3, #16
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d008      	beq.n	8007df4 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dee:	461a      	mov	r2, r3
 8007df0:	2310      	movs	r3, #16
 8007df2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d008      	beq.n	8007e10 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	2340      	movs	r3, #64	; 0x40
 8007e0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d023      	beq.n	8007e62 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e1c:	6a38      	ldr	r0, [r7, #32]
 8007e1e:	f005 ffb1 	bl	800dd84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e24:	4613      	mov	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	3338      	adds	r3, #56	; 0x38
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	3304      	adds	r3, #4
 8007e34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	78db      	ldrb	r3, [r3, #3]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d108      	bne.n	8007e50 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2200      	movs	r2, #0
 8007e42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f009 f80a 	bl	8010e64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	2302      	movs	r3, #2
 8007e60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fcea 	bl	8008848 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	3301      	adds	r3, #1
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f47f af65 	bne.w	8007d52 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f006 fef3 	bl	800ec78 <USB_ReadInterrupts>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e9c:	d122      	bne.n	8007ee4 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eac:	f023 0301 	bic.w	r3, r3, #1
 8007eb0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d108      	bne.n	8007ece <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f009 fa3e 	bl	8011348 <HAL_PCDEx_LPM_Callback>
 8007ecc:	e002      	b.n	8007ed4 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f008 ff8e 	bl	8010df0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695a      	ldr	r2, [r3, #20]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f006 fec5 	bl	800ec78 <USB_ReadInterrupts>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef8:	d112      	bne.n	8007f20 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d102      	bne.n	8007f10 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f008 ff4a 	bl	8010da4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695a      	ldr	r2, [r3, #20]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f006 fea7 	bl	800ec78 <USB_ReadInterrupts>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f34:	d121      	bne.n	8007f7a <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695a      	ldr	r2, [r3, #20]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007f44:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d111      	bne.n	8007f74 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5e:	089b      	lsrs	r3, r3, #2
 8007f60:	f003 020f 	and.w	r2, r3, #15
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f009 f9eb 	bl	8011348 <HAL_PCDEx_LPM_Callback>
 8007f72:	e002      	b.n	8007f7a <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f008 ff15 	bl	8010da4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f006 fe7a 	bl	800ec78 <USB_ReadInterrupts>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8e:	f040 80b5 	bne.w	80080fc <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2110      	movs	r1, #16
 8007fac:	4618      	mov	r0, r3
 8007fae:	f005 fee9 	bl	800dd84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fb6:	e046      	b.n	8008046 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ffe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008010:	0151      	lsls	r1, r2, #5
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	440a      	add	r2, r1
 8008016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800801e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800803a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800803e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	3301      	adds	r3, #1
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804c:	429a      	cmp	r2, r3
 800804e:	d3b3      	bcc.n	8007fb8 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800805e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008062:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	2b00      	cmp	r3, #0
 800806a:	d016      	beq.n	800809a <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800807c:	f043 030b 	orr.w	r3, r3, #11
 8008080:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008092:	f043 030b 	orr.w	r3, r3, #11
 8008096:	6453      	str	r3, [r2, #68]	; 0x44
 8008098:	e015      	b.n	80080c6 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80080b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080c0:	f043 030b 	orr.w	r3, r3, #11
 80080c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f006 fe8a 	bl	800ee00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695a      	ldr	r2, [r3, #20]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80080fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f006 fdb9 	bl	800ec78 <USB_ReadInterrupts>
 8008106:	4603      	mov	r3, r0
 8008108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800810c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008110:	d124      	bne.n	800815c <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f006 fe4f 	bl	800edba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4618      	mov	r0, r3
 8008122:	f005 feac 	bl	800de7e <USB_GetDevSpeed>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681c      	ldr	r4, [r3, #0]
 8008132:	f001 fc87 	bl	8009a44 <HAL_RCC_GetHCLKFreq>
 8008136:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800813c:	b2db      	uxtb	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	4620      	mov	r0, r4
 8008142:	f005 fbc9 	bl	800d8d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f008 fe0d 	bl	8010d66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800815a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4618      	mov	r0, r3
 8008162:	f006 fd89 	bl	800ec78 <USB_ReadInterrupts>
 8008166:	4603      	mov	r3, r0
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	2b08      	cmp	r3, #8
 800816e:	d10a      	bne.n	8008186 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f008 fdea 	bl	8010d4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	695a      	ldr	r2, [r3, #20]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f002 0208 	and.w	r2, r2, #8
 8008184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f006 fd74 	bl	800ec78 <USB_ReadInterrupts>
 8008190:	4603      	mov	r3, r0
 8008192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008196:	2b80      	cmp	r3, #128	; 0x80
 8008198:	d122      	bne.n	80081e0 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081a6:	2301      	movs	r3, #1
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
 80081aa:	e014      	b.n	80081d6 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b0:	4613      	mov	r3, r2
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d105      	bne.n	80081d0 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb0b 	bl	80087e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	3301      	adds	r3, #1
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081dc:	429a      	cmp	r2, r3
 80081de:	d3e5      	bcc.n	80081ac <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f006 fd47 	bl	800ec78 <USB_ReadInterrupts>
 80081ea:	4603      	mov	r3, r0
 80081ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f4:	d13b      	bne.n	800826e <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081f6:	2301      	movs	r3, #1
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
 80081fa:	e02b      	b.n	8008254 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008210:	4613      	mov	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	3340      	adds	r3, #64	; 0x40
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d115      	bne.n	800824e <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008222:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008224:	2b00      	cmp	r3, #0
 8008226:	da12      	bge.n	800824e <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800822c:	4613      	mov	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	333f      	adds	r3, #63	; 0x3f
 8008238:	2201      	movs	r2, #1
 800823a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008244:	b2db      	uxtb	r3, r3
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 facc 	bl	80087e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	3301      	adds	r3, #1
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825a:	429a      	cmp	r2, r3
 800825c:	d3ce      	bcc.n	80081fc <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695a      	ldr	r2, [r3, #20]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800826c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f006 fd00 	bl	800ec78 <USB_ReadInterrupts>
 8008278:	4603      	mov	r3, r0
 800827a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800827e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008282:	d155      	bne.n	8008330 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008284:	2301      	movs	r3, #1
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
 8008288:	e045      	b.n	8008316 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	4613      	mov	r3, r2
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d12e      	bne.n	8008310 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80082b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	da2b      	bge.n	8008310 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80082c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d121      	bne.n	8008310 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d0:	4613      	mov	r3, r2
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	440b      	add	r3, r1
 80082da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80082de:	2201      	movs	r2, #1
 80082e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800830c:	6053      	str	r3, [r2, #4]
            break;
 800830e:	e007      	b.n	8008320 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	3301      	adds	r3, #1
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831c:	429a      	cmp	r2, r3
 800831e:	d3b4      	bcc.n	800828a <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	695a      	ldr	r2, [r3, #20]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800832e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f006 fc9f 	bl	800ec78 <USB_ReadInterrupts>
 800833a:	4603      	mov	r3, r0
 800833c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008344:	d10a      	bne.n	800835c <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f008 fd9e 	bl	8010e88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695a      	ldr	r2, [r3, #20]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800835a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f006 fc89 	bl	800ec78 <USB_ReadInterrupts>
 8008366:	4603      	mov	r3, r0
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b04      	cmp	r3, #4
 800836e:	d115      	bne.n	800839c <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f008 fd8e 	bl	8010ea4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6859      	ldr	r1, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
 8008398:	e000      	b.n	800839c <HAL_PCD_IRQHandler+0x920>
      return;
 800839a:	bf00      	nop
    }
  }
}
 800839c:	3734      	adds	r7, #52	; 0x34
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd90      	pop	{r4, r7, pc}

080083a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_PCD_SetAddress+0x1a>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e013      	b.n	80083e4 <HAL_PCD_SetAddress+0x42>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	78fa      	ldrb	r2, [r7, #3]
 80083c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f006 fbe7 	bl	800eba8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	4608      	mov	r0, r1
 80083f6:	4611      	mov	r1, r2
 80083f8:	461a      	mov	r2, r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	70fb      	strb	r3, [r7, #3]
 80083fe:	460b      	mov	r3, r1
 8008400:	803b      	strh	r3, [r7, #0]
 8008402:	4613      	mov	r3, r2
 8008404:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800840a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800840e:	2b00      	cmp	r3, #0
 8008410:	da0f      	bge.n	8008432 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	f003 020f 	and.w	r2, r3, #15
 8008418:	4613      	mov	r3, r2
 800841a:	00db      	lsls	r3, r3, #3
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	3338      	adds	r3, #56	; 0x38
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	3304      	adds	r3, #4
 8008428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	705a      	strb	r2, [r3, #1]
 8008430:	e00f      	b.n	8008452 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	4613      	mov	r3, r2
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	4413      	add	r3, r2
 8008448:	3304      	adds	r3, #4
 800844a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	b2da      	uxtb	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800845e:	883a      	ldrh	r2, [r7, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	78ba      	ldrb	r2, [r7, #2]
 8008468:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	785b      	ldrb	r3, [r3, #1]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b29a      	uxth	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800847c:	78bb      	ldrb	r3, [r7, #2]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d102      	bne.n	8008488 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_PCD_EP_Open+0xaa>
 8008492:	2302      	movs	r3, #2
 8008494:	e00e      	b.n	80084b4 <HAL_PCD_EP_Open+0xc8>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68f9      	ldr	r1, [r7, #12]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f005 fd09 	bl	800debc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80084b2:	7afb      	ldrb	r3, [r7, #11]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80084c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	da0f      	bge.n	80084f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	f003 020f 	and.w	r2, r3, #15
 80084d6:	4613      	mov	r3, r2
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	3338      	adds	r3, #56	; 0x38
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	3304      	adds	r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	705a      	strb	r2, [r3, #1]
 80084ee:	e00f      	b.n	8008510 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	f003 020f 	and.w	r2, r3, #15
 80084f6:	4613      	mov	r3, r2
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	3304      	adds	r3, #4
 8008508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	b2da      	uxtb	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <HAL_PCD_EP_Close+0x6e>
 8008526:	2302      	movs	r3, #2
 8008528:	e00e      	b.n	8008548 <HAL_PCD_EP_Close+0x8c>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68f9      	ldr	r1, [r7, #12]
 8008538:	4618      	mov	r0, r3
 800853a:	f005 fd47 	bl	800dfcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	460b      	mov	r3, r1
 800855e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	f003 020f 	and.w	r2, r3, #15
 8008566:	4613      	mov	r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	3304      	adds	r3, #4
 8008578:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2200      	movs	r2, #0
 800858a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2200      	movs	r2, #0
 8008590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008592:	7afb      	ldrb	r3, [r7, #11]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	b2da      	uxtb	r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	f003 030f 	and.w	r3, r3, #15
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6979      	ldr	r1, [r7, #20]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f005 ffc8 	bl	800e544 <USB_EP0StartXfer>
 80085b4:	e005      	b.n	80085c2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6979      	ldr	r1, [r7, #20]
 80085bc:	4618      	mov	r0, r3
 80085be:	f005 fde1 	bl	800e184 <USB_EPStartXfer>
  }

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	f003 020f 	and.w	r2, r3, #15
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	4613      	mov	r3, r2
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	440b      	add	r3, r1
 80085ea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80085ee:	681b      	ldr	r3, [r3, #0]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	460b      	mov	r3, r1
 800860a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	f003 020f 	and.w	r2, r3, #15
 8008612:	4613      	mov	r3, r2
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	3338      	adds	r3, #56	; 0x38
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	3304      	adds	r3, #4
 8008622:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2200      	movs	r2, #0
 8008634:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2201      	movs	r2, #1
 800863a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	b2da      	uxtb	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6979      	ldr	r1, [r7, #20]
 8008658:	4618      	mov	r0, r3
 800865a:	f005 ff73 	bl	800e544 <USB_EP0StartXfer>
 800865e:	e005      	b.n	800866c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6979      	ldr	r1, [r7, #20]
 8008666:	4618      	mov	r0, r3
 8008668:	f005 fd8c 	bl	800e184 <USB_EPStartXfer>
  }

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d901      	bls.n	8008694 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e04e      	b.n	8008732 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008698:	2b00      	cmp	r3, #0
 800869a:	da0f      	bge.n	80086bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	f003 020f 	and.w	r2, r3, #15
 80086a2:	4613      	mov	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	3338      	adds	r3, #56	; 0x38
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	4413      	add	r3, r2
 80086b0:	3304      	adds	r3, #4
 80086b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	705a      	strb	r2, [r3, #1]
 80086ba:	e00d      	b.n	80086d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	4613      	mov	r3, r2
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	4413      	add	r3, r2
 80086ce:	3304      	adds	r3, #4
 80086d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_PCD_EP_SetStall+0x82>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e01c      	b.n	8008732 <HAL_PCD_EP_SetStall+0xbc>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68f9      	ldr	r1, [r7, #12]
 8008706:	4618      	mov	r0, r3
 8008708:	f006 f97a 	bl	800ea00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	f003 030f 	and.w	r3, r3, #15
 8008712:	2b00      	cmp	r3, #0
 8008714:	d108      	bne.n	8008728 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f006 fb6c 	bl	800ee00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	f003 020f 	and.w	r2, r3, #15
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d901      	bls.n	8008758 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e042      	b.n	80087de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800875c:	2b00      	cmp	r3, #0
 800875e:	da0f      	bge.n	8008780 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	f003 020f 	and.w	r2, r3, #15
 8008766:	4613      	mov	r3, r2
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	3338      	adds	r3, #56	; 0x38
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	4413      	add	r3, r2
 8008774:	3304      	adds	r3, #4
 8008776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2201      	movs	r2, #1
 800877c:	705a      	strb	r2, [r3, #1]
 800877e:	e00f      	b.n	80087a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	f003 020f 	and.w	r2, r3, #15
 8008786:	4613      	mov	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	3304      	adds	r3, #4
 8008798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d101      	bne.n	80087c0 <HAL_PCD_EP_ClrStall+0x86>
 80087bc:	2302      	movs	r3, #2
 80087be:	e00e      	b.n	80087de <HAL_PCD_EP_ClrStall+0xa4>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68f9      	ldr	r1, [r7, #12]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f006 f984 	bl	800eadc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b084      	sub	sp, #16
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80087f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	da0c      	bge.n	8008814 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	3338      	adds	r3, #56	; 0x38
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	3304      	adds	r3, #4
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	e00c      	b.n	800882e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	f003 020f 	and.w	r2, r3, #15
 800881a:	4613      	mov	r3, r2
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	4413      	add	r3, r2
 800882a:	3304      	adds	r3, #4
 800882c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68f9      	ldr	r1, [r7, #12]
 8008834:	4618      	mov	r0, r3
 8008836:	f005 ffa7 	bl	800e788 <USB_EPStopXfer>
 800883a:	4603      	mov	r3, r0
 800883c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800883e:	7afb      	ldrb	r3, [r7, #11]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	4613      	mov	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	3338      	adds	r3, #56	; 0x38
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4413      	add	r3, r2
 800886c:	3304      	adds	r3, #4
 800886e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1a      	ldr	r2, [r3, #32]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	429a      	cmp	r2, r3
 800887a:	d901      	bls.n	8008880 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e067      	b.n	8008950 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699a      	ldr	r2, [r3, #24]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	429a      	cmp	r2, r3
 8008894:	d902      	bls.n	800889c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	3303      	adds	r3, #3
 80088a0:	089b      	lsrs	r3, r3, #2
 80088a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088a4:	e026      	b.n	80088f4 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699a      	ldr	r2, [r3, #24]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d902      	bls.n	80088c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	3303      	adds	r3, #3
 80088c6:	089b      	lsrs	r3, r3, #2
 80088c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6919      	ldr	r1, [r3, #16]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f006 f800 	bl	800e8dc <USB_WritePacket>

    ep->xfer_buff  += len;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	441a      	add	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a1a      	ldr	r2, [r3, #32]
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	441a      	add	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	b29b      	uxth	r3, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	429a      	cmp	r2, r3
 8008908:	d809      	bhi.n	800891e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a1a      	ldr	r2, [r3, #32]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008912:	429a      	cmp	r2, r3
 8008914:	d203      	bcs.n	800891e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1c3      	bne.n	80088a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	429a      	cmp	r2, r3
 8008928:	d811      	bhi.n	800894e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	2201      	movs	r2, #1
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	43db      	mvns	r3, r3
 8008944:	6939      	ldr	r1, [r7, #16]
 8008946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800894a:	4013      	ands	r3, r2
 800894c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3720      	adds	r7, #32
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	333c      	adds	r3, #60	; 0x3c
 8008970:	3304      	adds	r3, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4a19      	ldr	r2, [pc, #100]	; (80089f0 <PCD_EP_OutXfrComplete_int+0x98>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d124      	bne.n	80089d8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a4:	461a      	mov	r2, r3
 80089a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089aa:	6093      	str	r3, [r2, #8]
 80089ac:	e01a      	b.n	80089e4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c4:	461a      	mov	r2, r3
 80089c6:	2320      	movs	r3, #32
 80089c8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f008 f985 	bl	8010ce0 <HAL_PCD_DataOutStageCallback>
 80089d6:	e005      	b.n	80089e4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f008 f97e 	bl	8010ce0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	4f54310a 	.word	0x4f54310a

080089f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	333c      	adds	r3, #60	; 0x3c
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4a0c      	ldr	r2, [pc, #48]	; (8008a58 <PCD_EP_OutSetupPacket_int+0x64>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d90e      	bls.n	8008a48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a40:	461a      	mov	r2, r3
 8008a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f008 f937 	bl	8010cbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	4f54300a 	.word	0x4f54300a

08008a5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d107      	bne.n	8008a8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008a7a:	883b      	ldrh	r3, [r7, #0]
 8008a7c:	0419      	lsls	r1, r3, #16
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	629a      	str	r2, [r3, #40]	; 0x28
 8008a88:	e028      	b.n	8008adc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a90:	0c1b      	lsrs	r3, r3, #16
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	4413      	add	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
 8008a9c:	e00d      	b.n	8008aba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	3340      	adds	r3, #64	; 0x40
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	0c1b      	lsrs	r3, r3, #16
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	73fb      	strb	r3, [r7, #15]
 8008aba:	7bfa      	ldrb	r2, [r7, #15]
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d3ec      	bcc.n	8008a9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008ac4:	883b      	ldrh	r3, [r7, #0]
 8008ac6:	0418      	lsls	r0, r3, #16
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6819      	ldr	r1, [r3, #0]
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	4302      	orrs	r2, r0
 8008ad4:	3340      	adds	r3, #64	; 0x40
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	887a      	ldrh	r2, [r7, #2]
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b3e:	f043 0303 	orr.w	r3, r3, #3
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b58:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a04      	ldr	r2, [pc, #16]	; (8008b70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b62:	6013      	str	r3, [r2, #0]
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40007000 	.word	0x40007000

08008b74 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10c      	bne.n	8008ba0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8008b86:	4b13      	ldr	r3, [pc, #76]	; (8008bd4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b92:	d10e      	bne.n	8008bb2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8008b94:	f000 f8b6 	bl	8008d04 <HAL_PWREx_DisableLowPowerRunMode>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d009      	beq.n	8008bb2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8008b9e:	e016      	b.n	8008bce <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8008ba0:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bac:	d001      	beq.n	8008bb2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008bae:	f000 f899 	bl	8008ce4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008bb8:	f023 0304 	bic.w	r3, r3, #4
 8008bbc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008bc4:	bf30      	wfi
 8008bc6:	e002      	b.n	8008bce <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008bc8:	bf40      	sev
    __WFE();
 8008bca:	bf20      	wfe
    __WFE();
 8008bcc:	bf20      	wfe
  }

}
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	40007000 	.word	0x40007000
 8008bd8:	e000ed00 	.word	0xe000ed00

08008bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008be0:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40007000 	.word	0x40007000

08008bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c06:	d130      	bne.n	8008c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c08:	4b23      	ldr	r3, [pc, #140]	; (8008c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c14:	d038      	beq.n	8008c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c16:	4b20      	ldr	r3, [pc, #128]	; (8008c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c1e:	4a1e      	ldr	r2, [pc, #120]	; (8008c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c26:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2232      	movs	r2, #50	; 0x32
 8008c2c:	fb02 f303 	mul.w	r3, r2, r3
 8008c30:	4a1b      	ldr	r2, [pc, #108]	; (8008ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008c32:	fba2 2303 	umull	r2, r3, r2, r3
 8008c36:	0c9b      	lsrs	r3, r3, #18
 8008c38:	3301      	adds	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c3c:	e002      	b.n	8008c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c44:	4b14      	ldr	r3, [pc, #80]	; (8008c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c50:	d102      	bne.n	8008c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1f2      	bne.n	8008c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c58:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c64:	d110      	bne.n	8008c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e00f      	b.n	8008c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008c6a:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c76:	d007      	beq.n	8008c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c80:	4a05      	ldr	r2, [pc, #20]	; (8008c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40007000 	.word	0x40007000
 8008c9c:	20000000 	.word	0x20000000
 8008ca0:	431bde83 	.word	0x431bde83

08008ca4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008ca8:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	4a04      	ldr	r2, [pc, #16]	; (8008cc0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cb2:	6053      	str	r3, [r2, #4]
}
 8008cb4:	bf00      	nop
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	40007000 	.word	0x40007000

08008cc4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4a04      	ldr	r2, [pc, #16]	; (8008ce0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cd2:	6053      	str	r3, [r2, #4]
}
 8008cd4:	bf00      	nop
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40007000 	.word	0x40007000

08008ce4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a04      	ldr	r2, [pc, #16]	; (8008d00 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8008cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cf2:	6013      	str	r3, [r2, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	40007000 	.word	0x40007000

08008d04 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8008d0a:	4b17      	ldr	r3, [pc, #92]	; (8008d68 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a16      	ldr	r2, [pc, #88]	; (8008d68 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d14:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d16:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2232      	movs	r2, #50	; 0x32
 8008d1c:	fb02 f303 	mul.w	r3, r2, r3
 8008d20:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	0c9b      	lsrs	r3, r3, #18
 8008d28:	3301      	adds	r3, #1
 8008d2a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008d2c:	e002      	b.n	8008d34 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d40:	d102      	bne.n	8008d48 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f2      	bne.n	8008d2e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8008d48:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d54:	d101      	bne.n	8008d5a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e000      	b.n	8008d5c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	40007000 	.word	0x40007000
 8008d6c:	20000000 	.word	0x20000000
 8008d70:	431bde83 	.word	0x431bde83

08008d74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008d7c:	f7fc f836 	bl	8004dec <HAL_GetTick>
 8008d80:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e069      	b.n	8008e60 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10b      	bne.n	8008db0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7f8 fd1f 	bl	80017e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008da6:	f241 3188 	movw	r1, #5000	; 0x1388
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f85e 	bl	8008e6c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	021a      	lsls	r2, r3, #8
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2120      	movs	r1, #32
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f856 	bl	8008e88 <QSPI_WaitFlagStateUntilTimeout>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008de0:	7afb      	ldrb	r3, [r7, #11]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d137      	bne.n	8008e56 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008df0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6852      	ldr	r2, [r2, #4]
 8008df8:	0611      	lsls	r1, r2, #24
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	68d2      	ldr	r2, [r2, #12]
 8008dfe:	4311      	orrs	r1, r2
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	69d2      	ldr	r2, [r2, #28]
 8008e04:	4311      	orrs	r1, r2
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6a12      	ldr	r2, [r2, #32]
 8008e0a:	4311      	orrs	r1, r2
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6812      	ldr	r2, [r2, #0]
 8008e10:	430b      	orrs	r3, r1
 8008e12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	4b13      	ldr	r3, [pc, #76]	; (8008e68 <HAL_QSPI_Init+0xf4>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6912      	ldr	r2, [r2, #16]
 8008e22:	0411      	lsls	r1, r2, #16
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	6952      	ldr	r2, [r2, #20]
 8008e28:	4311      	orrs	r1, r2
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6992      	ldr	r2, [r2, #24]
 8008e2e:	4311      	orrs	r1, r2
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	430b      	orrs	r3, r1
 8008e36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0201 	orr.w	r2, r2, #1
 8008e46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	ffe0f8fe 	.word	0xffe0f8fe

08008e6c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	4613      	mov	r3, r2
 8008e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008e98:	e01a      	b.n	8008ed0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ea0:	d016      	beq.n	8008ed0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ea2:	f7fb ffa3 	bl	8004dec <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d302      	bcc.n	8008eb8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2204      	movs	r2, #4
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec4:	f043 0201 	orr.w	r2, r3, #1
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e00e      	b.n	8008eee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	4013      	ands	r3, r2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	bf14      	ite	ne
 8008ede:	2301      	movne	r3, #1
 8008ee0:	2300      	moveq	r3, #0
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	79fb      	ldrb	r3, [r7, #7]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d1d6      	bne.n	8008e9a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f000 bc08 	b.w	800971c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f0c:	4b96      	ldr	r3, [pc, #600]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f003 030c 	and.w	r3, r3, #12
 8008f14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f16:	4b94      	ldr	r3, [pc, #592]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f003 0303 	and.w	r3, r3, #3
 8008f1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0310 	and.w	r3, r3, #16
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 80e4 	beq.w	80090f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <HAL_RCC_OscConfig+0x4c>
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	2b0c      	cmp	r3, #12
 8008f38:	f040 808b 	bne.w	8009052 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	f040 8087 	bne.w	8009052 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f44:	4b88      	ldr	r3, [pc, #544]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d005      	beq.n	8008f5c <HAL_RCC_OscConfig+0x64>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e3df      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a1a      	ldr	r2, [r3, #32]
 8008f60:	4b81      	ldr	r3, [pc, #516]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d004      	beq.n	8008f76 <HAL_RCC_OscConfig+0x7e>
 8008f6c:	4b7e      	ldr	r3, [pc, #504]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f74:	e005      	b.n	8008f82 <HAL_RCC_OscConfig+0x8a>
 8008f76:	4b7c      	ldr	r3, [pc, #496]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f7c:	091b      	lsrs	r3, r3, #4
 8008f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d223      	bcs.n	8008fce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fd92 	bl	8009ab4 <RCC_SetFlashLatencyFromMSIRange>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e3c0      	b.n	800971c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f9a:	4b73      	ldr	r3, [pc, #460]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a72      	ldr	r2, [pc, #456]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fa0:	f043 0308 	orr.w	r3, r3, #8
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	4b70      	ldr	r3, [pc, #448]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	496d      	ldr	r1, [pc, #436]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fb8:	4b6b      	ldr	r3, [pc, #428]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	021b      	lsls	r3, r3, #8
 8008fc6:	4968      	ldr	r1, [pc, #416]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	604b      	str	r3, [r1, #4]
 8008fcc:	e025      	b.n	800901a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fce:	4b66      	ldr	r3, [pc, #408]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a65      	ldr	r2, [pc, #404]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fd4:	f043 0308 	orr.w	r3, r3, #8
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	4b63      	ldr	r3, [pc, #396]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	4960      	ldr	r1, [pc, #384]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fec:	4b5e      	ldr	r3, [pc, #376]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	495b      	ldr	r1, [pc, #364]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fd52 	bl	8009ab4 <RCC_SetFlashLatencyFromMSIRange>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e380      	b.n	800971c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800901a:	f000 fc87 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800901e:	4602      	mov	r2, r0
 8009020:	4b51      	ldr	r3, [pc, #324]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	091b      	lsrs	r3, r3, #4
 8009026:	f003 030f 	and.w	r3, r3, #15
 800902a:	4950      	ldr	r1, [pc, #320]	; (800916c <HAL_RCC_OscConfig+0x274>)
 800902c:	5ccb      	ldrb	r3, [r1, r3]
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	fa22 f303 	lsr.w	r3, r2, r3
 8009036:	4a4e      	ldr	r2, [pc, #312]	; (8009170 <HAL_RCC_OscConfig+0x278>)
 8009038:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800903a:	4b4e      	ldr	r3, [pc, #312]	; (8009174 <HAL_RCC_OscConfig+0x27c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f7fb fe84 	bl	8004d4c <HAL_InitTick>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d052      	beq.n	80090f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	e364      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d032      	beq.n	80090c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800905a:	4b43      	ldr	r3, [pc, #268]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a42      	ldr	r2, [pc, #264]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009066:	f7fb fec1 	bl	8004dec <HAL_GetTick>
 800906a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800906c:	e008      	b.n	8009080 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800906e:	f7fb febd 	bl	8004dec <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	2b02      	cmp	r3, #2
 800907a:	d901      	bls.n	8009080 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e34d      	b.n	800971c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009080:	4b39      	ldr	r3, [pc, #228]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d0f0      	beq.n	800906e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800908c:	4b36      	ldr	r3, [pc, #216]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a35      	ldr	r2, [pc, #212]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009092:	f043 0308 	orr.w	r3, r3, #8
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	4b33      	ldr	r3, [pc, #204]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	4930      	ldr	r1, [pc, #192]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80090aa:	4b2f      	ldr	r3, [pc, #188]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	021b      	lsls	r3, r3, #8
 80090b8:	492b      	ldr	r1, [pc, #172]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	604b      	str	r3, [r1, #4]
 80090be:	e01a      	b.n	80090f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80090c0:	4b29      	ldr	r3, [pc, #164]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a28      	ldr	r2, [pc, #160]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 80090c6:	f023 0301 	bic.w	r3, r3, #1
 80090ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80090cc:	f7fb fe8e 	bl	8004dec <HAL_GetTick>
 80090d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80090d2:	e008      	b.n	80090e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80090d4:	f7fb fe8a 	bl	8004dec <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d901      	bls.n	80090e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e31a      	b.n	800971c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80090e6:	4b20      	ldr	r3, [pc, #128]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f0      	bne.n	80090d4 <HAL_RCC_OscConfig+0x1dc>
 80090f2:	e000      	b.n	80090f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80090f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d073      	beq.n	80091ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b08      	cmp	r3, #8
 8009106:	d005      	beq.n	8009114 <HAL_RCC_OscConfig+0x21c>
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b0c      	cmp	r3, #12
 800910c:	d10e      	bne.n	800912c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b03      	cmp	r3, #3
 8009112:	d10b      	bne.n	800912c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009114:	4b14      	ldr	r3, [pc, #80]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d063      	beq.n	80091e8 <HAL_RCC_OscConfig+0x2f0>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d15f      	bne.n	80091e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e2f7      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009134:	d106      	bne.n	8009144 <HAL_RCC_OscConfig+0x24c>
 8009136:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a0b      	ldr	r2, [pc, #44]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 800913c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	e025      	b.n	8009190 <HAL_RCC_OscConfig+0x298>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800914c:	d114      	bne.n	8009178 <HAL_RCC_OscConfig+0x280>
 800914e:	4b06      	ldr	r3, [pc, #24]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a05      	ldr	r2, [pc, #20]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	4b03      	ldr	r3, [pc, #12]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a02      	ldr	r2, [pc, #8]	; (8009168 <HAL_RCC_OscConfig+0x270>)
 8009160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	e013      	b.n	8009190 <HAL_RCC_OscConfig+0x298>
 8009168:	40021000 	.word	0x40021000
 800916c:	080114f0 	.word	0x080114f0
 8009170:	20000000 	.word	0x20000000
 8009174:	200000d0 	.word	0x200000d0
 8009178:	4ba0      	ldr	r3, [pc, #640]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a9f      	ldr	r2, [pc, #636]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 800917e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	4b9d      	ldr	r3, [pc, #628]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a9c      	ldr	r2, [pc, #624]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 800918a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800918e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d013      	beq.n	80091c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009198:	f7fb fe28 	bl	8004dec <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091a0:	f7fb fe24 	bl	8004dec <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b64      	cmp	r3, #100	; 0x64
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e2b4      	b.n	800971c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091b2:	4b92      	ldr	r3, [pc, #584]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f0      	beq.n	80091a0 <HAL_RCC_OscConfig+0x2a8>
 80091be:	e014      	b.n	80091ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c0:	f7fb fe14 	bl	8004dec <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091c8:	f7fb fe10 	bl	8004dec <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b64      	cmp	r3, #100	; 0x64
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e2a0      	b.n	800971c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091da:	4b88      	ldr	r3, [pc, #544]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1f0      	bne.n	80091c8 <HAL_RCC_OscConfig+0x2d0>
 80091e6:	e000      	b.n	80091ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d060      	beq.n	80092b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d005      	beq.n	8009208 <HAL_RCC_OscConfig+0x310>
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	2b0c      	cmp	r3, #12
 8009200:	d119      	bne.n	8009236 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d116      	bne.n	8009236 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009208:	4b7c      	ldr	r3, [pc, #496]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <HAL_RCC_OscConfig+0x328>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e27d      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009220:	4b76      	ldr	r3, [pc, #472]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	061b      	lsls	r3, r3, #24
 800922e:	4973      	ldr	r1, [pc, #460]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009230:	4313      	orrs	r3, r2
 8009232:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009234:	e040      	b.n	80092b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d023      	beq.n	8009286 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800923e:	4b6f      	ldr	r3, [pc, #444]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a6e      	ldr	r2, [pc, #440]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924a:	f7fb fdcf 	bl	8004dec <HAL_GetTick>
 800924e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009250:	e008      	b.n	8009264 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009252:	f7fb fdcb 	bl	8004dec <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d901      	bls.n	8009264 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e25b      	b.n	800971c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009264:	4b65      	ldr	r3, [pc, #404]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0f0      	beq.n	8009252 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009270:	4b62      	ldr	r3, [pc, #392]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	061b      	lsls	r3, r3, #24
 800927e:	495f      	ldr	r1, [pc, #380]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009280:	4313      	orrs	r3, r2
 8009282:	604b      	str	r3, [r1, #4]
 8009284:	e018      	b.n	80092b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009286:	4b5d      	ldr	r3, [pc, #372]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a5c      	ldr	r2, [pc, #368]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 800928c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009292:	f7fb fdab 	bl	8004dec <HAL_GetTick>
 8009296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009298:	e008      	b.n	80092ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800929a:	f7fb fda7 	bl	8004dec <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d901      	bls.n	80092ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e237      	b.n	800971c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092ac:	4b53      	ldr	r3, [pc, #332]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1f0      	bne.n	800929a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d03c      	beq.n	800933e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01c      	beq.n	8009306 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092cc:	4b4b      	ldr	r3, [pc, #300]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80092ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092d2:	4a4a      	ldr	r2, [pc, #296]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80092d4:	f043 0301 	orr.w	r3, r3, #1
 80092d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092dc:	f7fb fd86 	bl	8004dec <HAL_GetTick>
 80092e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092e2:	e008      	b.n	80092f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092e4:	f7fb fd82 	bl	8004dec <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d901      	bls.n	80092f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e212      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092f6:	4b41      	ldr	r3, [pc, #260]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80092f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0ef      	beq.n	80092e4 <HAL_RCC_OscConfig+0x3ec>
 8009304:	e01b      	b.n	800933e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009306:	4b3d      	ldr	r3, [pc, #244]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800930c:	4a3b      	ldr	r2, [pc, #236]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 800930e:	f023 0301 	bic.w	r3, r3, #1
 8009312:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009316:	f7fb fd69 	bl	8004dec <HAL_GetTick>
 800931a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800931c:	e008      	b.n	8009330 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800931e:	f7fb fd65 	bl	8004dec <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	d901      	bls.n	8009330 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e1f5      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009330:	4b32      	ldr	r3, [pc, #200]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1ef      	bne.n	800931e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 80a6 	beq.w	8009498 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800934c:	2300      	movs	r3, #0
 800934e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009350:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10d      	bne.n	8009378 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800935c:	4b27      	ldr	r3, [pc, #156]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 800935e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009360:	4a26      	ldr	r2, [pc, #152]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 8009362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009366:	6593      	str	r3, [r2, #88]	; 0x58
 8009368:	4b24      	ldr	r3, [pc, #144]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 800936a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009370:	60bb      	str	r3, [r7, #8]
 8009372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009374:	2301      	movs	r3, #1
 8009376:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009378:	4b21      	ldr	r3, [pc, #132]	; (8009400 <HAL_RCC_OscConfig+0x508>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009380:	2b00      	cmp	r3, #0
 8009382:	d118      	bne.n	80093b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009384:	4b1e      	ldr	r3, [pc, #120]	; (8009400 <HAL_RCC_OscConfig+0x508>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a1d      	ldr	r2, [pc, #116]	; (8009400 <HAL_RCC_OscConfig+0x508>)
 800938a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800938e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009390:	f7fb fd2c 	bl	8004dec <HAL_GetTick>
 8009394:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009396:	e008      	b.n	80093aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009398:	f7fb fd28 	bl	8004dec <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d901      	bls.n	80093aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e1b8      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093aa:	4b15      	ldr	r3, [pc, #84]	; (8009400 <HAL_RCC_OscConfig+0x508>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0f0      	beq.n	8009398 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d108      	bne.n	80093d0 <HAL_RCC_OscConfig+0x4d8>
 80093be:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c4:	4a0d      	ldr	r2, [pc, #52]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80093c6:	f043 0301 	orr.w	r3, r3, #1
 80093ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093ce:	e029      	b.n	8009424 <HAL_RCC_OscConfig+0x52c>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	2b05      	cmp	r3, #5
 80093d6:	d115      	bne.n	8009404 <HAL_RCC_OscConfig+0x50c>
 80093d8:	4b08      	ldr	r3, [pc, #32]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80093da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093de:	4a07      	ldr	r2, [pc, #28]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80093e0:	f043 0304 	orr.w	r3, r3, #4
 80093e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093e8:	4b04      	ldr	r3, [pc, #16]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80093ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ee:	4a03      	ldr	r2, [pc, #12]	; (80093fc <HAL_RCC_OscConfig+0x504>)
 80093f0:	f043 0301 	orr.w	r3, r3, #1
 80093f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093f8:	e014      	b.n	8009424 <HAL_RCC_OscConfig+0x52c>
 80093fa:	bf00      	nop
 80093fc:	40021000 	.word	0x40021000
 8009400:	40007000 	.word	0x40007000
 8009404:	4b9d      	ldr	r3, [pc, #628]	; (800967c <HAL_RCC_OscConfig+0x784>)
 8009406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940a:	4a9c      	ldr	r2, [pc, #624]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800940c:	f023 0301 	bic.w	r3, r3, #1
 8009410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009414:	4b99      	ldr	r3, [pc, #612]	; (800967c <HAL_RCC_OscConfig+0x784>)
 8009416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800941a:	4a98      	ldr	r2, [pc, #608]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800941c:	f023 0304 	bic.w	r3, r3, #4
 8009420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d016      	beq.n	800945a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800942c:	f7fb fcde 	bl	8004dec <HAL_GetTick>
 8009430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009432:	e00a      	b.n	800944a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009434:	f7fb fcda 	bl	8004dec <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009442:	4293      	cmp	r3, r2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e168      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800944a:	4b8c      	ldr	r3, [pc, #560]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800944c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0ed      	beq.n	8009434 <HAL_RCC_OscConfig+0x53c>
 8009458:	e015      	b.n	8009486 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800945a:	f7fb fcc7 	bl	8004dec <HAL_GetTick>
 800945e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009460:	e00a      	b.n	8009478 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009462:	f7fb fcc3 	bl	8004dec <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009470:	4293      	cmp	r3, r2
 8009472:	d901      	bls.n	8009478 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e151      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009478:	4b80      	ldr	r3, [pc, #512]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1ed      	bne.n	8009462 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009486:	7ffb      	ldrb	r3, [r7, #31]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d105      	bne.n	8009498 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800948c:	4b7b      	ldr	r3, [pc, #492]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800948e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009490:	4a7a      	ldr	r2, [pc, #488]	; (800967c <HAL_RCC_OscConfig+0x784>)
 8009492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009496:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d03c      	beq.n	800951e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01c      	beq.n	80094e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80094ac:	4b73      	ldr	r3, [pc, #460]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80094ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094b2:	4a72      	ldr	r2, [pc, #456]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80094b4:	f043 0301 	orr.w	r3, r3, #1
 80094b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094bc:	f7fb fc96 	bl	8004dec <HAL_GetTick>
 80094c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094c2:	e008      	b.n	80094d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094c4:	f7fb fc92 	bl	8004dec <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d901      	bls.n	80094d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
 80094d4:	e122      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094d6:	4b69      	ldr	r3, [pc, #420]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80094d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0ef      	beq.n	80094c4 <HAL_RCC_OscConfig+0x5cc>
 80094e4:	e01b      	b.n	800951e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80094e6:	4b65      	ldr	r3, [pc, #404]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80094e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094ec:	4a63      	ldr	r2, [pc, #396]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80094ee:	f023 0301 	bic.w	r3, r3, #1
 80094f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094f6:	f7fb fc79 	bl	8004dec <HAL_GetTick>
 80094fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094fc:	e008      	b.n	8009510 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094fe:	f7fb fc75 	bl	8004dec <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b02      	cmp	r3, #2
 800950a:	d901      	bls.n	8009510 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e105      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009510:	4b5a      	ldr	r3, [pc, #360]	; (800967c <HAL_RCC_OscConfig+0x784>)
 8009512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1ef      	bne.n	80094fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 80f9 	beq.w	800971a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952c:	2b02      	cmp	r3, #2
 800952e:	f040 80cf 	bne.w	80096d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009532:	4b52      	ldr	r3, [pc, #328]	; (800967c <HAL_RCC_OscConfig+0x784>)
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f003 0203 	and.w	r2, r3, #3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	429a      	cmp	r2, r3
 8009544:	d12c      	bne.n	80095a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009550:	3b01      	subs	r3, #1
 8009552:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009554:	429a      	cmp	r2, r3
 8009556:	d123      	bne.n	80095a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009564:	429a      	cmp	r2, r3
 8009566:	d11b      	bne.n	80095a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009572:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009574:	429a      	cmp	r2, r3
 8009576:	d113      	bne.n	80095a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	3b01      	subs	r3, #1
 8009586:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009588:	429a      	cmp	r2, r3
 800958a:	d109      	bne.n	80095a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	085b      	lsrs	r3, r3, #1
 8009598:	3b01      	subs	r3, #1
 800959a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800959c:	429a      	cmp	r2, r3
 800959e:	d071      	beq.n	8009684 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2b0c      	cmp	r3, #12
 80095a4:	d068      	beq.n	8009678 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80095a6:	4b35      	ldr	r3, [pc, #212]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d105      	bne.n	80095be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80095b2:	4b32      	ldr	r3, [pc, #200]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e0ac      	b.n	800971c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80095c2:	4b2e      	ldr	r3, [pc, #184]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a2d      	ldr	r2, [pc, #180]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80095c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80095ce:	f7fb fc0d 	bl	8004dec <HAL_GetTick>
 80095d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095d6:	f7fb fc09 	bl	8004dec <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e099      	b.n	800971c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095e8:	4b24      	ldr	r3, [pc, #144]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f0      	bne.n	80095d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80095f4:	4b21      	ldr	r3, [pc, #132]	; (800967c <HAL_RCC_OscConfig+0x784>)
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	4b21      	ldr	r3, [pc, #132]	; (8009680 <HAL_RCC_OscConfig+0x788>)
 80095fa:	4013      	ands	r3, r2
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009604:	3a01      	subs	r2, #1
 8009606:	0112      	lsls	r2, r2, #4
 8009608:	4311      	orrs	r1, r2
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800960e:	0212      	lsls	r2, r2, #8
 8009610:	4311      	orrs	r1, r2
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009616:	0852      	lsrs	r2, r2, #1
 8009618:	3a01      	subs	r2, #1
 800961a:	0552      	lsls	r2, r2, #21
 800961c:	4311      	orrs	r1, r2
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009622:	0852      	lsrs	r2, r2, #1
 8009624:	3a01      	subs	r2, #1
 8009626:	0652      	lsls	r2, r2, #25
 8009628:	4311      	orrs	r1, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800962e:	06d2      	lsls	r2, r2, #27
 8009630:	430a      	orrs	r2, r1
 8009632:	4912      	ldr	r1, [pc, #72]	; (800967c <HAL_RCC_OscConfig+0x784>)
 8009634:	4313      	orrs	r3, r2
 8009636:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009638:	4b10      	ldr	r3, [pc, #64]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a0f      	ldr	r2, [pc, #60]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800963e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009642:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009644:	4b0d      	ldr	r3, [pc, #52]	; (800967c <HAL_RCC_OscConfig+0x784>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4a0c      	ldr	r2, [pc, #48]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800964a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800964e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009650:	f7fb fbcc 	bl	8004dec <HAL_GetTick>
 8009654:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009656:	e008      	b.n	800966a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009658:	f7fb fbc8 	bl	8004dec <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b02      	cmp	r3, #2
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e058      	b.n	800971c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800966a:	4b04      	ldr	r3, [pc, #16]	; (800967c <HAL_RCC_OscConfig+0x784>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0f0      	beq.n	8009658 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009676:	e050      	b.n	800971a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e04f      	b.n	800971c <HAL_RCC_OscConfig+0x824>
 800967c:	40021000 	.word	0x40021000
 8009680:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009684:	4b27      	ldr	r3, [pc, #156]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d144      	bne.n	800971a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009690:	4b24      	ldr	r3, [pc, #144]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a23      	ldr	r2, [pc, #140]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 8009696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800969a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800969c:	4b21      	ldr	r3, [pc, #132]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	4a20      	ldr	r2, [pc, #128]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 80096a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096a8:	f7fb fba0 	bl	8004dec <HAL_GetTick>
 80096ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096ae:	e008      	b.n	80096c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096b0:	f7fb fb9c 	bl	8004dec <HAL_GetTick>
 80096b4:	4602      	mov	r2, r0
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d901      	bls.n	80096c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e02c      	b.n	800971c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096c2:	4b18      	ldr	r3, [pc, #96]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0f0      	beq.n	80096b0 <HAL_RCC_OscConfig+0x7b8>
 80096ce:	e024      	b.n	800971a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	2b0c      	cmp	r3, #12
 80096d4:	d01f      	beq.n	8009716 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096d6:	4b13      	ldr	r3, [pc, #76]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a12      	ldr	r2, [pc, #72]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 80096dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e2:	f7fb fb83 	bl	8004dec <HAL_GetTick>
 80096e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096e8:	e008      	b.n	80096fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096ea:	f7fb fb7f 	bl	8004dec <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d901      	bls.n	80096fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e00f      	b.n	800971c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096fc:	4b09      	ldr	r3, [pc, #36]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1f0      	bne.n	80096ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009708:	4b06      	ldr	r3, [pc, #24]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	4905      	ldr	r1, [pc, #20]	; (8009724 <HAL_RCC_OscConfig+0x82c>)
 800970e:	4b06      	ldr	r3, [pc, #24]	; (8009728 <HAL_RCC_OscConfig+0x830>)
 8009710:	4013      	ands	r3, r2
 8009712:	60cb      	str	r3, [r1, #12]
 8009714:	e001      	b.n	800971a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3720      	adds	r7, #32
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40021000 	.word	0x40021000
 8009728:	feeefffc 	.word	0xfeeefffc

0800972c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e0e7      	b.n	8009910 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009740:	4b75      	ldr	r3, [pc, #468]	; (8009918 <HAL_RCC_ClockConfig+0x1ec>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0307 	and.w	r3, r3, #7
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d910      	bls.n	8009770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800974e:	4b72      	ldr	r3, [pc, #456]	; (8009918 <HAL_RCC_ClockConfig+0x1ec>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f023 0207 	bic.w	r2, r3, #7
 8009756:	4970      	ldr	r1, [pc, #448]	; (8009918 <HAL_RCC_ClockConfig+0x1ec>)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	4313      	orrs	r3, r2
 800975c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800975e:	4b6e      	ldr	r3, [pc, #440]	; (8009918 <HAL_RCC_ClockConfig+0x1ec>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d001      	beq.n	8009770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e0cf      	b.n	8009910 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0302 	and.w	r3, r3, #2
 8009778:	2b00      	cmp	r3, #0
 800977a:	d010      	beq.n	800979e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	4b66      	ldr	r3, [pc, #408]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009788:	429a      	cmp	r2, r3
 800978a:	d908      	bls.n	800979e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800978c:	4b63      	ldr	r3, [pc, #396]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4960      	ldr	r1, [pc, #384]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 800979a:	4313      	orrs	r3, r2
 800979c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d04c      	beq.n	8009844 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d107      	bne.n	80097c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097b2:	4b5a      	ldr	r3, [pc, #360]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d121      	bne.n	8009802 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e0a6      	b.n	8009910 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d107      	bne.n	80097da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097ca:	4b54      	ldr	r3, [pc, #336]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d115      	bne.n	8009802 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e09a      	b.n	8009910 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d107      	bne.n	80097f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097e2:	4b4e      	ldr	r3, [pc, #312]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d109      	bne.n	8009802 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e08e      	b.n	8009910 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097f2:	4b4a      	ldr	r3, [pc, #296]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e086      	b.n	8009910 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009802:	4b46      	ldr	r3, [pc, #280]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f023 0203 	bic.w	r2, r3, #3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	4943      	ldr	r1, [pc, #268]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 8009810:	4313      	orrs	r3, r2
 8009812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009814:	f7fb faea 	bl	8004dec <HAL_GetTick>
 8009818:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800981a:	e00a      	b.n	8009832 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800981c:	f7fb fae6 	bl	8004dec <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	f241 3288 	movw	r2, #5000	; 0x1388
 800982a:	4293      	cmp	r3, r2
 800982c:	d901      	bls.n	8009832 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e06e      	b.n	8009910 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009832:	4b3a      	ldr	r3, [pc, #232]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 020c 	and.w	r2, r3, #12
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	429a      	cmp	r2, r3
 8009842:	d1eb      	bne.n	800981c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d010      	beq.n	8009872 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	4b31      	ldr	r3, [pc, #196]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800985c:	429a      	cmp	r2, r3
 800985e:	d208      	bcs.n	8009872 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009860:	4b2e      	ldr	r3, [pc, #184]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	492b      	ldr	r1, [pc, #172]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 800986e:	4313      	orrs	r3, r2
 8009870:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009872:	4b29      	ldr	r3, [pc, #164]	; (8009918 <HAL_RCC_ClockConfig+0x1ec>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d210      	bcs.n	80098a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009880:	4b25      	ldr	r3, [pc, #148]	; (8009918 <HAL_RCC_ClockConfig+0x1ec>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f023 0207 	bic.w	r2, r3, #7
 8009888:	4923      	ldr	r1, [pc, #140]	; (8009918 <HAL_RCC_ClockConfig+0x1ec>)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	4313      	orrs	r3, r2
 800988e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009890:	4b21      	ldr	r3, [pc, #132]	; (8009918 <HAL_RCC_ClockConfig+0x1ec>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0307 	and.w	r3, r3, #7
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d001      	beq.n	80098a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e036      	b.n	8009910 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0304 	and.w	r3, r3, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d008      	beq.n	80098c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098ae:	4b1b      	ldr	r3, [pc, #108]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	4918      	ldr	r1, [pc, #96]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0308 	and.w	r3, r3, #8
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d009      	beq.n	80098e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098cc:	4b13      	ldr	r3, [pc, #76]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	4910      	ldr	r1, [pc, #64]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098e0:	f000 f824 	bl	800992c <HAL_RCC_GetSysClockFreq>
 80098e4:	4602      	mov	r2, r0
 80098e6:	4b0d      	ldr	r3, [pc, #52]	; (800991c <HAL_RCC_ClockConfig+0x1f0>)
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	091b      	lsrs	r3, r3, #4
 80098ec:	f003 030f 	and.w	r3, r3, #15
 80098f0:	490b      	ldr	r1, [pc, #44]	; (8009920 <HAL_RCC_ClockConfig+0x1f4>)
 80098f2:	5ccb      	ldrb	r3, [r1, r3]
 80098f4:	f003 031f 	and.w	r3, r3, #31
 80098f8:	fa22 f303 	lsr.w	r3, r2, r3
 80098fc:	4a09      	ldr	r2, [pc, #36]	; (8009924 <HAL_RCC_ClockConfig+0x1f8>)
 80098fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009900:	4b09      	ldr	r3, [pc, #36]	; (8009928 <HAL_RCC_ClockConfig+0x1fc>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f7fb fa21 	bl	8004d4c <HAL_InitTick>
 800990a:	4603      	mov	r3, r0
 800990c:	72fb      	strb	r3, [r7, #11]

  return status;
 800990e:	7afb      	ldrb	r3, [r7, #11]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40022000 	.word	0x40022000
 800991c:	40021000 	.word	0x40021000
 8009920:	080114f0 	.word	0x080114f0
 8009924:	20000000 	.word	0x20000000
 8009928:	200000d0 	.word	0x200000d0

0800992c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800992c:	b480      	push	{r7}
 800992e:	b089      	sub	sp, #36	; 0x24
 8009930:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	61fb      	str	r3, [r7, #28]
 8009936:	2300      	movs	r3, #0
 8009938:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800993a:	4b3e      	ldr	r3, [pc, #248]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f003 030c 	and.w	r3, r3, #12
 8009942:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009944:	4b3b      	ldr	r3, [pc, #236]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f003 0303 	and.w	r3, r3, #3
 800994c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <HAL_RCC_GetSysClockFreq+0x34>
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2b0c      	cmp	r3, #12
 8009958:	d121      	bne.n	800999e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d11e      	bne.n	800999e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009960:	4b34      	ldr	r3, [pc, #208]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	2b00      	cmp	r3, #0
 800996a:	d107      	bne.n	800997c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800996c:	4b31      	ldr	r3, [pc, #196]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800996e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	f003 030f 	and.w	r3, r3, #15
 8009978:	61fb      	str	r3, [r7, #28]
 800997a:	e005      	b.n	8009988 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800997c:	4b2d      	ldr	r3, [pc, #180]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	091b      	lsrs	r3, r3, #4
 8009982:	f003 030f 	and.w	r3, r3, #15
 8009986:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009988:	4a2b      	ldr	r2, [pc, #172]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x10c>)
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009990:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10d      	bne.n	80099b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800999c:	e00a      	b.n	80099b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d102      	bne.n	80099aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80099a4:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80099a6:	61bb      	str	r3, [r7, #24]
 80099a8:	e004      	b.n	80099b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d101      	bne.n	80099b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80099b0:	4b23      	ldr	r3, [pc, #140]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80099b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	2b0c      	cmp	r3, #12
 80099b8:	d134      	bne.n	8009a24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80099ba:	4b1e      	ldr	r3, [pc, #120]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d003      	beq.n	80099d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d003      	beq.n	80099d8 <HAL_RCC_GetSysClockFreq+0xac>
 80099d0:	e005      	b.n	80099de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80099d2:	4b1a      	ldr	r3, [pc, #104]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80099d4:	617b      	str	r3, [r7, #20]
      break;
 80099d6:	e005      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80099d8:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80099da:	617b      	str	r3, [r7, #20]
      break;
 80099dc:	e002      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	617b      	str	r3, [r7, #20]
      break;
 80099e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80099e4:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	091b      	lsrs	r3, r3, #4
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	3301      	adds	r3, #1
 80099f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80099f2:	4b10      	ldr	r3, [pc, #64]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	0a1b      	lsrs	r3, r3, #8
 80099f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	fb03 f202 	mul.w	r2, r3, r2
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009a0a:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	0e5b      	lsrs	r3, r3, #25
 8009a10:	f003 0303 	and.w	r3, r3, #3
 8009a14:	3301      	adds	r3, #1
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009a24:	69bb      	ldr	r3, [r7, #24]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3724      	adds	r7, #36	; 0x24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	40021000 	.word	0x40021000
 8009a38:	08011508 	.word	0x08011508
 8009a3c:	00f42400 	.word	0x00f42400
 8009a40:	007a1200 	.word	0x007a1200

08009a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a48:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	20000000 	.word	0x20000000

08009a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009a60:	f7ff fff0 	bl	8009a44 <HAL_RCC_GetHCLKFreq>
 8009a64:	4602      	mov	r2, r0
 8009a66:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	0a1b      	lsrs	r3, r3, #8
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	4904      	ldr	r1, [pc, #16]	; (8009a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a72:	5ccb      	ldrb	r3, [r1, r3]
 8009a74:	f003 031f 	and.w	r3, r3, #31
 8009a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	40021000 	.word	0x40021000
 8009a84:	08011500 	.word	0x08011500

08009a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a8c:	f7ff ffda 	bl	8009a44 <HAL_RCC_GetHCLKFreq>
 8009a90:	4602      	mov	r2, r0
 8009a92:	4b06      	ldr	r3, [pc, #24]	; (8009aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	0adb      	lsrs	r3, r3, #11
 8009a98:	f003 0307 	and.w	r3, r3, #7
 8009a9c:	4904      	ldr	r1, [pc, #16]	; (8009ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a9e:	5ccb      	ldrb	r3, [r1, r3]
 8009aa0:	f003 031f 	and.w	r3, r3, #31
 8009aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	40021000 	.word	0x40021000
 8009ab0:	08011500 	.word	0x08011500

08009ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009abc:	2300      	movs	r3, #0
 8009abe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009ac0:	4b2a      	ldr	r3, [pc, #168]	; (8009b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009acc:	f7ff f886 	bl	8008bdc <HAL_PWREx_GetVoltageRange>
 8009ad0:	6178      	str	r0, [r7, #20]
 8009ad2:	e014      	b.n	8009afe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ad4:	4b25      	ldr	r3, [pc, #148]	; (8009b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad8:	4a24      	ldr	r2, [pc, #144]	; (8009b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ade:	6593      	str	r3, [r2, #88]	; 0x58
 8009ae0:	4b22      	ldr	r3, [pc, #136]	; (8009b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ae8:	60fb      	str	r3, [r7, #12]
 8009aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009aec:	f7ff f876 	bl	8008bdc <HAL_PWREx_GetVoltageRange>
 8009af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009af2:	4b1e      	ldr	r3, [pc, #120]	; (8009b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af6:	4a1d      	ldr	r2, [pc, #116]	; (8009b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009afc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b04:	d10b      	bne.n	8009b1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b80      	cmp	r3, #128	; 0x80
 8009b0a:	d919      	bls.n	8009b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2ba0      	cmp	r3, #160	; 0xa0
 8009b10:	d902      	bls.n	8009b18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b12:	2302      	movs	r3, #2
 8009b14:	613b      	str	r3, [r7, #16]
 8009b16:	e013      	b.n	8009b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009b18:	2301      	movs	r3, #1
 8009b1a:	613b      	str	r3, [r7, #16]
 8009b1c:	e010      	b.n	8009b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b80      	cmp	r3, #128	; 0x80
 8009b22:	d902      	bls.n	8009b2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009b24:	2303      	movs	r3, #3
 8009b26:	613b      	str	r3, [r7, #16]
 8009b28:	e00a      	b.n	8009b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b80      	cmp	r3, #128	; 0x80
 8009b2e:	d102      	bne.n	8009b36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b30:	2302      	movs	r3, #2
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	e004      	b.n	8009b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b70      	cmp	r3, #112	; 0x70
 8009b3a:	d101      	bne.n	8009b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009b40:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f023 0207 	bic.w	r2, r3, #7
 8009b48:	4909      	ldr	r1, [pc, #36]	; (8009b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009b50:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d001      	beq.n	8009b62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	40021000 	.word	0x40021000
 8009b70:	40022000 	.word	0x40022000

08009b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b80:	2300      	movs	r3, #0
 8009b82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d041      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b98:	d02a      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b9e:	d824      	bhi.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ba4:	d008      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009baa:	d81e      	bhi.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00a      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bb4:	d010      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009bb6:	e018      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009bb8:	4b86      	ldr	r3, [pc, #536]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	4a85      	ldr	r2, [pc, #532]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009bc4:	e015      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 f895 	bl	800acfc <RCCEx_PLLSAI1_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009bd6:	e00c      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3320      	adds	r3, #32
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 f97e 	bl	800aee0 <RCCEx_PLLSAI2_Config>
 8009be4:	4603      	mov	r3, r0
 8009be6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009be8:	e003      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	74fb      	strb	r3, [r7, #19]
      break;
 8009bee:	e000      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bf2:	7cfb      	ldrb	r3, [r7, #19]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10b      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bf8:	4b76      	ldr	r3, [pc, #472]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c06:	4973      	ldr	r1, [pc, #460]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009c0e:	e001      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	7cfb      	ldrb	r3, [r7, #19]
 8009c12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d041      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c28:	d02a      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009c2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c2e:	d824      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c34:	d008      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c3a:	d81e      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00a      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c44:	d010      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009c46:	e018      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009c48:	4b62      	ldr	r3, [pc, #392]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	4a61      	ldr	r2, [pc, #388]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009c54:	e015      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f001 f84d 	bl	800acfc <RCCEx_PLLSAI1_Config>
 8009c62:	4603      	mov	r3, r0
 8009c64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009c66:	e00c      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3320      	adds	r3, #32
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f001 f936 	bl	800aee0 <RCCEx_PLLSAI2_Config>
 8009c74:	4603      	mov	r3, r0
 8009c76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009c78:	e003      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	74fb      	strb	r3, [r7, #19]
      break;
 8009c7e:	e000      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c82:	7cfb      	ldrb	r3, [r7, #19]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10b      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009c88:	4b52      	ldr	r3, [pc, #328]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c96:	494f      	ldr	r1, [pc, #316]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009c9e:	e001      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca0:	7cfb      	ldrb	r3, [r7, #19]
 8009ca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 80a0 	beq.w	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009cb6:	4b47      	ldr	r3, [pc, #284]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00d      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ccc:	4b41      	ldr	r3, [pc, #260]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd0:	4a40      	ldr	r2, [pc, #256]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8009cd8:	4b3e      	ldr	r3, [pc, #248]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ce0:	60bb      	str	r3, [r7, #8]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ce8:	4b3b      	ldr	r3, [pc, #236]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a3a      	ldr	r2, [pc, #232]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cf4:	f7fb f87a 	bl	8004dec <HAL_GetTick>
 8009cf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009cfa:	e009      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cfc:	f7fb f876 	bl	8004dec <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d902      	bls.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	74fb      	strb	r3, [r7, #19]
        break;
 8009d0e:	e005      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009d10:	4b31      	ldr	r3, [pc, #196]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0ef      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009d1c:	7cfb      	ldrb	r3, [r7, #19]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d15c      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009d22:	4b2c      	ldr	r3, [pc, #176]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01f      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d019      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009d40:	4b24      	ldr	r3, [pc, #144]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d4c:	4b21      	ldr	r3, [pc, #132]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d52:	4a20      	ldr	r2, [pc, #128]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d5c:	4b1d      	ldr	r3, [pc, #116]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d62:	4a1c      	ldr	r2, [pc, #112]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009d6c:	4a19      	ldr	r2, [pc, #100]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d016      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7e:	f7fb f835 	bl	8004dec <HAL_GetTick>
 8009d82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d84:	e00b      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d86:	f7fb f831 	bl	8004dec <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d902      	bls.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	74fb      	strb	r3, [r7, #19]
            break;
 8009d9c:	e006      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d9e:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009da4:	f003 0302 	and.w	r3, r3, #2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d0ec      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009dac:	7cfb      	ldrb	r3, [r7, #19]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10c      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc2:	4904      	ldr	r1, [pc, #16]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009dca:	e009      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dcc:	7cfb      	ldrb	r3, [r7, #19]
 8009dce:	74bb      	strb	r3, [r7, #18]
 8009dd0:	e006      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009dd2:	bf00      	nop
 8009dd4:	40021000 	.word	0x40021000
 8009dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ddc:	7cfb      	ldrb	r3, [r7, #19]
 8009dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009de0:	7c7b      	ldrb	r3, [r7, #17]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d105      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009de6:	4ba6      	ldr	r3, [pc, #664]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dea:	4aa5      	ldr	r2, [pc, #660]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009dfe:	4ba0      	ldr	r3, [pc, #640]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e04:	f023 0203 	bic.w	r2, r3, #3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0c:	499c      	ldr	r1, [pc, #624]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0302 	and.w	r3, r3, #2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00a      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e20:	4b97      	ldr	r3, [pc, #604]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e26:	f023 020c 	bic.w	r2, r3, #12
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2e:	4994      	ldr	r1, [pc, #592]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0304 	and.w	r3, r3, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009e42:	4b8f      	ldr	r3, [pc, #572]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	498b      	ldr	r1, [pc, #556]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00a      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009e64:	4b86      	ldr	r3, [pc, #536]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e72:	4983      	ldr	r1, [pc, #524]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e74:	4313      	orrs	r3, r2
 8009e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009e86:	4b7e      	ldr	r3, [pc, #504]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e94:	497a      	ldr	r1, [pc, #488]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0320 	and.w	r3, r3, #32
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00a      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ea8:	4b75      	ldr	r3, [pc, #468]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb6:	4972      	ldr	r1, [pc, #456]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00a      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009eca:	4b6d      	ldr	r3, [pc, #436]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ed8:	4969      	ldr	r1, [pc, #420]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009eda:	4313      	orrs	r3, r2
 8009edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00a      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009eec:	4b64      	ldr	r3, [pc, #400]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009efa:	4961      	ldr	r1, [pc, #388]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009efc:	4313      	orrs	r3, r2
 8009efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f0e:	4b5c      	ldr	r3, [pc, #368]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f1c:	4958      	ldr	r1, [pc, #352]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f30:	4b53      	ldr	r3, [pc, #332]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3e:	4950      	ldr	r1, [pc, #320]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f40:	4313      	orrs	r3, r2
 8009f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f52:	4b4b      	ldr	r3, [pc, #300]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f60:	4947      	ldr	r1, [pc, #284]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00a      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f74:	4b42      	ldr	r3, [pc, #264]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f7a:	f023 0203 	bic.w	r2, r3, #3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f82:	493f      	ldr	r1, [pc, #252]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d028      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f96:	4b3a      	ldr	r3, [pc, #232]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa4:	4936      	ldr	r1, [pc, #216]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fb4:	d106      	bne.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009fb6:	4b32      	ldr	r3, [pc, #200]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	4a31      	ldr	r2, [pc, #196]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fc0:	60d3      	str	r3, [r2, #12]
 8009fc2:	e011      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fcc:	d10c      	bne.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 fe91 	bl	800acfc <RCCEx_PLLSAI1_Config>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009fde:	7cfb      	ldrb	r3, [r7, #19]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8009fe4:	7cfb      	ldrb	r3, [r7, #19]
 8009fe6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d028      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ff4:	4b22      	ldr	r3, [pc, #136]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a002:	491f      	ldr	r1, [pc, #124]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a004:	4313      	orrs	r3, r2
 800a006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a00e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a012:	d106      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a014:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	4a19      	ldr	r2, [pc, #100]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a01e:	60d3      	str	r3, [r2, #12]
 800a020:	e011      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a02a:	d10c      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3304      	adds	r3, #4
 800a030:	2101      	movs	r1, #1
 800a032:	4618      	mov	r0, r3
 800a034:	f000 fe62 	bl	800acfc <RCCEx_PLLSAI1_Config>
 800a038:	4603      	mov	r3, r0
 800a03a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a03c:	7cfb      	ldrb	r3, [r7, #19]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800a042:	7cfb      	ldrb	r3, [r7, #19]
 800a044:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d02a      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a052:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a058:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a060:	4907      	ldr	r1, [pc, #28]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a062:	4313      	orrs	r3, r2
 800a064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a06c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a070:	d108      	bne.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a072:	4b03      	ldr	r3, [pc, #12]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	4a02      	ldr	r2, [pc, #8]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a07c:	60d3      	str	r3, [r2, #12]
 800a07e:	e013      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800a080:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a08c:	d10c      	bne.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3304      	adds	r3, #4
 800a092:	2101      	movs	r1, #1
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fe31 	bl	800acfc <RCCEx_PLLSAI1_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a09e:	7cfb      	ldrb	r3, [r7, #19]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800a0a4:	7cfb      	ldrb	r3, [r7, #19]
 800a0a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d02f      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a0b4:	4b2c      	ldr	r3, [pc, #176]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0c2:	4929      	ldr	r1, [pc, #164]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0d2:	d10d      	bne.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	2102      	movs	r1, #2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 fe0e 	bl	800acfc <RCCEx_PLLSAI1_Config>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a0e4:	7cfb      	ldrb	r3, [r7, #19]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d014      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a0ea:	7cfb      	ldrb	r3, [r7, #19]
 800a0ec:	74bb      	strb	r3, [r7, #18]
 800a0ee:	e011      	b.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f8:	d10c      	bne.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3320      	adds	r3, #32
 800a0fe:	2102      	movs	r1, #2
 800a100:	4618      	mov	r0, r3
 800a102:	f000 feed 	bl	800aee0 <RCCEx_PLLSAI2_Config>
 800a106:	4603      	mov	r3, r0
 800a108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a10a:	7cfb      	ldrb	r3, [r7, #19]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a110:	7cfb      	ldrb	r3, [r7, #19]
 800a112:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a120:	4b11      	ldr	r3, [pc, #68]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a126:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a130:	490d      	ldr	r1, [pc, #52]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a132:	4313      	orrs	r3, r2
 800a134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a144:	4b08      	ldr	r3, [pc, #32]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a154:	4904      	ldr	r1, [pc, #16]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a156:	4313      	orrs	r3, r2
 800a158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a15c:	7cbb      	ldrb	r3, [r7, #18]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3718      	adds	r7, #24
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	40021000 	.word	0x40021000

0800a16c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a17e:	d13e      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a180:	4bb4      	ldr	r3, [pc, #720]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a18a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a192:	d028      	beq.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a19a:	f200 858c 	bhi.w	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a4:	d005      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1ac:	d00e      	beq.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800a1ae:	f000 bd82 	b.w	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a1b2:	4ba8      	ldr	r3, [pc, #672]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	f040 857c 	bne.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 800a1c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1c6:	61fb      	str	r3, [r7, #28]
      break;
 800a1c8:	f000 bd77 	b.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a1cc:	4ba1      	ldr	r3, [pc, #644]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a1ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	f040 8571 	bne.w	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 800a1dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a1e0:	61fb      	str	r3, [r7, #28]
      break;
 800a1e2:	f000 bd6c 	b.w	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1e6:	4b9b      	ldr	r3, [pc, #620]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1f2:	f040 8566 	bne.w	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800a1f6:	4b98      	ldr	r3, [pc, #608]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a1f8:	61fb      	str	r3, [r7, #28]
      break;
 800a1fa:	f000 bd62 	b.w	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a1fe:	4b95      	ldr	r3, [pc, #596]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d036      	beq.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2b03      	cmp	r3, #3
 800a212:	d840      	bhi.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d003      	beq.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d020      	beq.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800a220:	e039      	b.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a222:	4b8c      	ldr	r3, [pc, #560]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d116      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a22e:	4b89      	ldr	r3, [pc, #548]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0308 	and.w	r3, r3, #8
 800a236:	2b00      	cmp	r3, #0
 800a238:	d005      	beq.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a23a:	4b86      	ldr	r3, [pc, #536]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	091b      	lsrs	r3, r3, #4
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	e005      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a246:	4b83      	ldr	r3, [pc, #524]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a24c:	0a1b      	lsrs	r3, r3, #8
 800a24e:	f003 030f 	and.w	r3, r3, #15
 800a252:	4a82      	ldr	r2, [pc, #520]	; (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a258:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a25a:	e01f      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	61bb      	str	r3, [r7, #24]
      break;
 800a260:	e01c      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a262:	4b7c      	ldr	r3, [pc, #496]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a26a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a26e:	d102      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a270:	4b7b      	ldr	r3, [pc, #492]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800a272:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a274:	e012      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	61bb      	str	r3, [r7, #24]
      break;
 800a27a:	e00f      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a27c:	4b75      	ldr	r3, [pc, #468]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a288:	d102      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a28a:	4b76      	ldr	r3, [pc, #472]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a28c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a28e:	e005      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	61bb      	str	r3, [r7, #24]
      break;
 800a294:	e002      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a296:	2300      	movs	r3, #0
 800a298:	61bb      	str	r3, [r7, #24]
      break;
 800a29a:	bf00      	nop
    }

    switch(PeriphClk)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2a2:	f000 842a 	beq.w	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ac:	f200 850b 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a2b6:	f000 80df 	beq.w	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a2c0:	f200 8501 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2ca:	f000 80d5 	beq.w	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2d4:	f200 84f7 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2de:	f000 8377 	beq.w	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e8:	f200 84ed 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f2:	f000 84c3 	beq.w	800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2fc:	f200 84e3 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a306:	f000 82e6 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a310:	f200 84d9 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a31a:	f000 80ad 	beq.w	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a324:	f200 84cf 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a32e:	f000 809b 	beq.w	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a338:	f200 84c5 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a342:	d07f      	beq.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a34a:	f200 84bc 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a354:	f000 8448 	beq.w	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a35e:	f200 84b2 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a368:	f000 83f0 	beq.w	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a372:	f200 84a8 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a37c:	f000 8391 	beq.w	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a386:	f200 849e 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b80      	cmp	r3, #128	; 0x80
 800a38e:	f000 835c 	beq.w	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b80      	cmp	r3, #128	; 0x80
 800a396:	f200 8496 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	d84b      	bhi.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 848f 	beq.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	2b1f      	cmp	r3, #31
 800a3ae:	f200 848a 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a3b2:	a201      	add	r2, pc, #4	; (adr r2, 800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b8:	0800a5cf 	.word	0x0800a5cf
 800a3bc:	0800a63f 	.word	0x0800a63f
 800a3c0:	0800acc7 	.word	0x0800acc7
 800a3c4:	0800a6d3 	.word	0x0800a6d3
 800a3c8:	0800acc7 	.word	0x0800acc7
 800a3cc:	0800acc7 	.word	0x0800acc7
 800a3d0:	0800acc7 	.word	0x0800acc7
 800a3d4:	0800a75b 	.word	0x0800a75b
 800a3d8:	0800acc7 	.word	0x0800acc7
 800a3dc:	0800acc7 	.word	0x0800acc7
 800a3e0:	0800acc7 	.word	0x0800acc7
 800a3e4:	0800acc7 	.word	0x0800acc7
 800a3e8:	0800acc7 	.word	0x0800acc7
 800a3ec:	0800acc7 	.word	0x0800acc7
 800a3f0:	0800acc7 	.word	0x0800acc7
 800a3f4:	0800a7d3 	.word	0x0800a7d3
 800a3f8:	0800acc7 	.word	0x0800acc7
 800a3fc:	0800acc7 	.word	0x0800acc7
 800a400:	0800acc7 	.word	0x0800acc7
 800a404:	0800acc7 	.word	0x0800acc7
 800a408:	0800acc7 	.word	0x0800acc7
 800a40c:	0800acc7 	.word	0x0800acc7
 800a410:	0800acc7 	.word	0x0800acc7
 800a414:	0800acc7 	.word	0x0800acc7
 800a418:	0800acc7 	.word	0x0800acc7
 800a41c:	0800acc7 	.word	0x0800acc7
 800a420:	0800acc7 	.word	0x0800acc7
 800a424:	0800acc7 	.word	0x0800acc7
 800a428:	0800acc7 	.word	0x0800acc7
 800a42c:	0800acc7 	.word	0x0800acc7
 800a430:	0800acc7 	.word	0x0800acc7
 800a434:	0800a855 	.word	0x0800a855
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b40      	cmp	r3, #64	; 0x40
 800a43c:	f000 82d9 	beq.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a440:	f000 bc41 	b.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a444:	69b9      	ldr	r1, [r7, #24]
 800a446:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a44a:	f000 fe25 	bl	800b098 <RCCEx_GetSAIxPeriphCLKFreq>
 800a44e:	61f8      	str	r0, [r7, #28]
      break;
 800a450:	f000 bc3a 	b.w	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800a454:	40021000 	.word	0x40021000
 800a458:	0003d090 	.word	0x0003d090
 800a45c:	08011508 	.word	0x08011508
 800a460:	00f42400 	.word	0x00f42400
 800a464:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a468:	69b9      	ldr	r1, [r7, #24]
 800a46a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a46e:	f000 fe13 	bl	800b098 <RCCEx_GetSAIxPeriphCLKFreq>
 800a472:	61f8      	str	r0, [r7, #28]
      break;
 800a474:	f000 bc28 	b.w	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a478:	4ba6      	ldr	r3, [pc, #664]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a47e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a482:	613b      	str	r3, [r7, #16]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a48a:	d015      	beq.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a492:	f200 8092 	bhi.w	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a49c:	d029      	beq.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4a4:	f200 8089 	bhi.w	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d07b      	beq.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4b4:	d04a      	beq.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800a4b6:	e080      	b.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a4b8:	4b96      	ldr	r3, [pc, #600]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d17c      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a4c4:	4b93      	ldr	r3, [pc, #588]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d005      	beq.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a4d0:	4b90      	ldr	r3, [pc, #576]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	091b      	lsrs	r3, r3, #4
 800a4d6:	f003 030f 	and.w	r3, r3, #15
 800a4da:	e005      	b.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a4dc:	4b8d      	ldr	r3, [pc, #564]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a4de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	f003 030f 	and.w	r3, r3, #15
 800a4e8:	4a8b      	ldr	r2, [pc, #556]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800a4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4ee:	61fb      	str	r3, [r7, #28]
          break;
 800a4f0:	e065      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a4f2:	4b88      	ldr	r3, [pc, #544]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4fe:	d160      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a500:	4b84      	ldr	r3, [pc, #528]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a50c:	d159      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a50e:	4b81      	ldr	r3, [pc, #516]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	0a1b      	lsrs	r3, r3, #8
 800a514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a518:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	fb03 f202 	mul.w	r2, r3, r2
 800a522:	4b7c      	ldr	r3, [pc, #496]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	091b      	lsrs	r3, r3, #4
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	3301      	adds	r3, #1
 800a52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a532:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a534:	4b77      	ldr	r3, [pc, #476]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	0d5b      	lsrs	r3, r3, #21
 800a53a:	f003 0303 	and.w	r3, r3, #3
 800a53e:	3301      	adds	r3, #1
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	fbb2 f3f3 	udiv	r3, r2, r3
 800a548:	61fb      	str	r3, [r7, #28]
          break;
 800a54a:	e03a      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a54c:	4b71      	ldr	r3, [pc, #452]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a558:	d135      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a55a:	4b6e      	ldr	r3, [pc, #440]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a566:	d12e      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a568:	4b6a      	ldr	r3, [pc, #424]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a572:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	fb03 f202 	mul.w	r2, r3, r2
 800a57c:	4b65      	ldr	r3, [pc, #404]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	091b      	lsrs	r3, r3, #4
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	3301      	adds	r3, #1
 800a588:	fbb2 f3f3 	udiv	r3, r2, r3
 800a58c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a58e:	4b61      	ldr	r3, [pc, #388]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	0d5b      	lsrs	r3, r3, #21
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	3301      	adds	r3, #1
 800a59a:	005b      	lsls	r3, r3, #1
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a2:	61fb      	str	r3, [r7, #28]
          break;
 800a5a4:	e00f      	b.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a5a6:	4b5b      	ldr	r3, [pc, #364]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a5a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5ac:	f003 0302 	and.w	r3, r3, #2
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d10a      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800a5b4:	4b59      	ldr	r3, [pc, #356]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800a5b6:	61fb      	str	r3, [r7, #28]
          break;
 800a5b8:	e007      	b.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800a5ba:	bf00      	nop
 800a5bc:	e384      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a5be:	bf00      	nop
 800a5c0:	e382      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a5c2:	bf00      	nop
 800a5c4:	e380      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a5c6:	bf00      	nop
 800a5c8:	e37e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a5ca:	bf00      	nop
        break;
 800a5cc:	e37c      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a5ce:	4b51      	ldr	r3, [pc, #324]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d4:	f003 0303 	and.w	r3, r3, #3
 800a5d8:	613b      	str	r3, [r7, #16]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b03      	cmp	r3, #3
 800a5de:	d828      	bhi.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800a5e0:	a201      	add	r2, pc, #4	; (adr r2, 800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800a5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e6:	bf00      	nop
 800a5e8:	0800a5f9 	.word	0x0800a5f9
 800a5ec:	0800a601 	.word	0x0800a601
 800a5f0:	0800a609 	.word	0x0800a609
 800a5f4:	0800a61d 	.word	0x0800a61d
          frequency = HAL_RCC_GetPCLK2Freq();
 800a5f8:	f7ff fa46 	bl	8009a88 <HAL_RCC_GetPCLK2Freq>
 800a5fc:	61f8      	str	r0, [r7, #28]
          break;
 800a5fe:	e01d      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a600:	f7ff f994 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800a604:	61f8      	str	r0, [r7, #28]
          break;
 800a606:	e019      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a608:	4b42      	ldr	r3, [pc, #264]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a614:	d10f      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800a616:	4b42      	ldr	r3, [pc, #264]	; (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800a618:	61fb      	str	r3, [r7, #28]
          break;
 800a61a:	e00c      	b.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a61c:	4b3d      	ldr	r3, [pc, #244]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b02      	cmp	r3, #2
 800a628:	d107      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800a62a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a62e:	61fb      	str	r3, [r7, #28]
          break;
 800a630:	e003      	b.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800a632:	bf00      	nop
 800a634:	e348      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a636:	bf00      	nop
 800a638:	e346      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a63a:	bf00      	nop
        break;
 800a63c:	e344      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a63e:	4b35      	ldr	r3, [pc, #212]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a644:	f003 030c 	and.w	r3, r3, #12
 800a648:	613b      	str	r3, [r7, #16]
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	2b0c      	cmp	r3, #12
 800a64e:	d83a      	bhi.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800a650:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a68d 	.word	0x0800a68d
 800a65c:	0800a6c7 	.word	0x0800a6c7
 800a660:	0800a6c7 	.word	0x0800a6c7
 800a664:	0800a6c7 	.word	0x0800a6c7
 800a668:	0800a695 	.word	0x0800a695
 800a66c:	0800a6c7 	.word	0x0800a6c7
 800a670:	0800a6c7 	.word	0x0800a6c7
 800a674:	0800a6c7 	.word	0x0800a6c7
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a6c7 	.word	0x0800a6c7
 800a680:	0800a6c7 	.word	0x0800a6c7
 800a684:	0800a6c7 	.word	0x0800a6c7
 800a688:	0800a6b1 	.word	0x0800a6b1
          frequency = HAL_RCC_GetPCLK1Freq();
 800a68c:	f7ff f9e6 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800a690:	61f8      	str	r0, [r7, #28]
          break;
 800a692:	e01d      	b.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800a694:	f7ff f94a 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800a698:	61f8      	str	r0, [r7, #28]
          break;
 800a69a:	e019      	b.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a69c:	4b1d      	ldr	r3, [pc, #116]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a8:	d10f      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800a6aa:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800a6ac:	61fb      	str	r3, [r7, #28]
          break;
 800a6ae:	e00c      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a6b0:	4b18      	ldr	r3, [pc, #96]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d107      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800a6be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6c2:	61fb      	str	r3, [r7, #28]
          break;
 800a6c4:	e003      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800a6c6:	bf00      	nop
 800a6c8:	e2fe      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a6ca:	bf00      	nop
 800a6cc:	e2fc      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a6ce:	bf00      	nop
        break;
 800a6d0:	e2fa      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a6d2:	4b10      	ldr	r3, [pc, #64]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800a6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a6dc:	613b      	str	r3, [r7, #16]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	2b30      	cmp	r3, #48	; 0x30
 800a6e2:	d029      	beq.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2b30      	cmp	r3, #48	; 0x30
 800a6e8:	d831      	bhi.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	2b20      	cmp	r3, #32
 800a6ee:	d019      	beq.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2b20      	cmp	r3, #32
 800a6f4:	d82b      	bhi.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	2b10      	cmp	r3, #16
 800a700:	d004      	beq.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 800a702:	e024      	b.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a704:	f7ff f9aa 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800a708:	61f8      	str	r0, [r7, #28]
          break;
 800a70a:	e025      	b.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800a70c:	f7ff f90e 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800a710:	61f8      	str	r0, [r7, #28]
          break;
 800a712:	e021      	b.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800a714:	40021000 	.word	0x40021000
 800a718:	08011508 	.word	0x08011508
 800a71c:	02dc6c00 	.word	0x02dc6c00
 800a720:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a724:	4b8f      	ldr	r3, [pc, #572]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a72c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a730:	d10f      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 800a732:	4b8d      	ldr	r3, [pc, #564]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a734:	61fb      	str	r3, [r7, #28]
          break;
 800a736:	e00c      	b.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a738:	4b8a      	ldr	r3, [pc, #552]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b02      	cmp	r3, #2
 800a744:	d107      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 800a746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a74a:	61fb      	str	r3, [r7, #28]
          break;
 800a74c:	e003      	b.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800a74e:	bf00      	nop
 800a750:	e2ba      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a752:	bf00      	nop
 800a754:	e2b8      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a756:	bf00      	nop
        break;
 800a758:	e2b6      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a75a:	4b82      	ldr	r3, [pc, #520]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a760:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a764:	613b      	str	r3, [r7, #16]
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2bc0      	cmp	r3, #192	; 0xc0
 800a76a:	d021      	beq.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	2bc0      	cmp	r3, #192	; 0xc0
 800a770:	d829      	bhi.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2b80      	cmp	r3, #128	; 0x80
 800a776:	d011      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	2b80      	cmp	r3, #128	; 0x80
 800a77c:	d823      	bhi.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d003      	beq.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b40      	cmp	r3, #64	; 0x40
 800a788:	d004      	beq.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 800a78a:	e01c      	b.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a78c:	f7ff f966 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800a790:	61f8      	str	r0, [r7, #28]
          break;
 800a792:	e01d      	b.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 800a794:	f7ff f8ca 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800a798:	61f8      	str	r0, [r7, #28]
          break;
 800a79a:	e019      	b.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a79c:	4b71      	ldr	r3, [pc, #452]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a8:	d10f      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 800a7aa:	4b6f      	ldr	r3, [pc, #444]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a7ac:	61fb      	str	r3, [r7, #28]
          break;
 800a7ae:	e00c      	b.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a7b0:	4b6c      	ldr	r3, [pc, #432]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a7b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d107      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 800a7be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7c2:	61fb      	str	r3, [r7, #28]
          break;
 800a7c4:	e003      	b.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 800a7c6:	bf00      	nop
 800a7c8:	e27e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a7ca:	bf00      	nop
 800a7cc:	e27c      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a7ce:	bf00      	nop
        break;
 800a7d0:	e27a      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a7d2:	4b64      	ldr	r3, [pc, #400]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a7d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7e4:	d025      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7ec:	d82c      	bhi.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7f4:	d013      	beq.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7fc:	d824      	bhi.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80a:	d004      	beq.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 800a80c:	e01c      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a80e:	f7ff f925 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800a812:	61f8      	str	r0, [r7, #28]
          break;
 800a814:	e01d      	b.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 800a816:	f7ff f889 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800a81a:	61f8      	str	r0, [r7, #28]
          break;
 800a81c:	e019      	b.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a81e:	4b51      	ldr	r3, [pc, #324]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a82a:	d10f      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 800a82c:	4b4e      	ldr	r3, [pc, #312]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a82e:	61fb      	str	r3, [r7, #28]
          break;
 800a830:	e00c      	b.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a832:	4b4c      	ldr	r3, [pc, #304]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a838:	f003 0302 	and.w	r3, r3, #2
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d107      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 800a840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a844:	61fb      	str	r3, [r7, #28]
          break;
 800a846:	e003      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 800a848:	bf00      	nop
 800a84a:	e23d      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a84c:	bf00      	nop
 800a84e:	e23b      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a850:	bf00      	nop
        break;
 800a852:	e239      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a854:	4b43      	ldr	r3, [pc, #268]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a85a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a866:	d025      	beq.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a86e:	d82c      	bhi.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a876:	d013      	beq.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a87e:	d824      	bhi.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a88c:	d004      	beq.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 800a88e:	e01c      	b.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a890:	f7ff f8e4 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800a894:	61f8      	str	r0, [r7, #28]
          break;
 800a896:	e01d      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 800a898:	f7ff f848 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800a89c:	61f8      	str	r0, [r7, #28]
          break;
 800a89e:	e019      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8a0:	4b30      	ldr	r3, [pc, #192]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ac:	d10f      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 800a8ae:	4b2e      	ldr	r3, [pc, #184]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a8b0:	61fb      	str	r3, [r7, #28]
          break;
 800a8b2:	e00c      	b.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a8b4:	4b2b      	ldr	r3, [pc, #172]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d107      	bne.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 800a8c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8c6:	61fb      	str	r3, [r7, #28]
          break;
 800a8c8:	e003      	b.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800a8ca:	bf00      	nop
 800a8cc:	e1fc      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a8ce:	bf00      	nop
 800a8d0:	e1fa      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a8d2:	bf00      	nop
        break;
 800a8d4:	e1f8      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a8d6:	4b23      	ldr	r3, [pc, #140]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8e0:	613b      	str	r3, [r7, #16]
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8e8:	d00c      	beq.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8f0:	d868      	bhi.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8f8:	d008      	beq.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a900:	d034      	beq.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 800a902:	e05f      	b.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 800a904:	f7ff f812 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800a908:	61f8      	str	r0, [r7, #28]
          break;
 800a90a:	e060      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a90c:	4b15      	ldr	r3, [pc, #84]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a918:	d156      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800a91a:	4b12      	ldr	r3, [pc, #72]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d050      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a926:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	0a1b      	lsrs	r3, r3, #8
 800a92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a930:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	fb03 f202 	mul.w	r2, r3, r2
 800a93a:	4b0a      	ldr	r3, [pc, #40]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	091b      	lsrs	r3, r3, #4
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	3301      	adds	r3, #1
 800a946:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	0e5b      	lsrs	r3, r3, #25
 800a952:	f003 0303 	and.w	r3, r3, #3
 800a956:	3301      	adds	r3, #1
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	69ba      	ldr	r2, [r7, #24]
 800a95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a960:	61fb      	str	r3, [r7, #28]
          break;
 800a962:	e031      	b.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800a964:	40021000 	.word	0x40021000
 800a968:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800a96c:	4b9c      	ldr	r3, [pc, #624]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a978:	d128      	bne.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800a97a:	4b99      	ldr	r3, [pc, #612]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d022      	beq.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a986:	4b96      	ldr	r3, [pc, #600]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	0a1b      	lsrs	r3, r3, #8
 800a98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a990:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	fb03 f202 	mul.w	r2, r3, r2
 800a99a:	4b91      	ldr	r3, [pc, #580]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	091b      	lsrs	r3, r3, #4
 800a9a0:	f003 0307 	and.w	r3, r3, #7
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9aa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800a9ac:	4b8c      	ldr	r3, [pc, #560]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	0e5b      	lsrs	r3, r3, #25
 800a9b2:	f003 0303 	and.w	r3, r3, #3
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	005b      	lsls	r3, r3, #1
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c0:	61fb      	str	r3, [r7, #28]
          break;
 800a9c2:	e003      	b.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800a9c4:	bf00      	nop
 800a9c6:	e17f      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a9c8:	bf00      	nop
 800a9ca:	e17d      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a9cc:	bf00      	nop
        break;
 800a9ce:	e17b      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a9d0:	4b83      	ldr	r3, [pc, #524]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9da:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d103      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a9e2:	f7ff f851 	bl	8009a88 <HAL_RCC_GetPCLK2Freq>
 800a9e6:	61f8      	str	r0, [r7, #28]
        break;
 800a9e8:	e16e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800a9ea:	f7fe ff9f 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800a9ee:	61f8      	str	r0, [r7, #28]
        break;
 800a9f0:	e16a      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a9f2:	4b7b      	ldr	r3, [pc, #492]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a9fc:	613b      	str	r3, [r7, #16]
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa04:	d013      	beq.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa0c:	d819      	bhi.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d004      	beq.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1a:	d004      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800aa1c:	e011      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aa1e:	f7ff f81d 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800aa22:	61f8      	str	r0, [r7, #28]
          break;
 800aa24:	e010      	b.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800aa26:	f7fe ff81 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800aa2a:	61f8      	str	r0, [r7, #28]
          break;
 800aa2c:	e00c      	b.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa2e:	4b6c      	ldr	r3, [pc, #432]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa3a:	d104      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800aa3c:	4b69      	ldr	r3, [pc, #420]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800aa3e:	61fb      	str	r3, [r7, #28]
          break;
 800aa40:	e001      	b.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 800aa42:	bf00      	nop
 800aa44:	e140      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800aa46:	bf00      	nop
        break;
 800aa48:	e13e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800aa4a:	4b65      	ldr	r3, [pc, #404]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800aa4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa54:	613b      	str	r3, [r7, #16]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa5c:	d013      	beq.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa64:	d819      	bhi.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d004      	beq.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa72:	d004      	beq.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 800aa74:	e011      	b.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aa76:	f7fe fff1 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800aa7a:	61f8      	str	r0, [r7, #28]
          break;
 800aa7c:	e010      	b.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 800aa7e:	f7fe ff55 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800aa82:	61f8      	str	r0, [r7, #28]
          break;
 800aa84:	e00c      	b.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa86:	4b56      	ldr	r3, [pc, #344]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa92:	d104      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 800aa94:	4b53      	ldr	r3, [pc, #332]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800aa96:	61fb      	str	r3, [r7, #28]
          break;
 800aa98:	e001      	b.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800aa9a:	bf00      	nop
 800aa9c:	e114      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800aa9e:	bf00      	nop
        break;
 800aaa0:	e112      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800aaa2:	4b4f      	ldr	r3, [pc, #316]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800aaa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aaac:	613b      	str	r3, [r7, #16]
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aab4:	d013      	beq.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aabc:	d819      	bhi.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d004      	beq.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaca:	d004      	beq.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 800aacc:	e011      	b.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aace:	f7fe ffc5 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800aad2:	61f8      	str	r0, [r7, #28]
          break;
 800aad4:	e010      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800aad6:	f7fe ff29 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800aada:	61f8      	str	r0, [r7, #28]
          break;
 800aadc:	e00c      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aade:	4b40      	ldr	r3, [pc, #256]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaea:	d104      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 800aaec:	4b3d      	ldr	r3, [pc, #244]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800aaee:	61fb      	str	r3, [r7, #28]
          break;
 800aaf0:	e001      	b.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 800aaf2:	bf00      	nop
 800aaf4:	e0e8      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800aaf6:	bf00      	nop
        break;
 800aaf8:	e0e6      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800aafa:	4b39      	ldr	r3, [pc, #228]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800aafc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab00:	f003 0303 	and.w	r3, r3, #3
 800ab04:	613b      	str	r3, [r7, #16]
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d011      	beq.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d818      	bhi.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d004      	beq.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800ab1e:	e011      	b.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab20:	f7fe ff9c 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800ab24:	61f8      	str	r0, [r7, #28]
          break;
 800ab26:	e010      	b.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800ab28:	f7fe ff00 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800ab2c:	61f8      	str	r0, [r7, #28]
          break;
 800ab2e:	e00c      	b.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab30:	4b2b      	ldr	r3, [pc, #172]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab3c:	d104      	bne.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800ab3e:	4b29      	ldr	r3, [pc, #164]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800ab40:	61fb      	str	r3, [r7, #28]
          break;
 800ab42:	e001      	b.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800ab44:	bf00      	nop
 800ab46:	e0bf      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ab48:	bf00      	nop
        break;
 800ab4a:	e0bd      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ab4c:	4b24      	ldr	r3, [pc, #144]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ab4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ab56:	613b      	str	r3, [r7, #16]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ab5e:	d02c      	beq.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ab66:	d833      	bhi.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab6e:	d01a      	beq.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab76:	d82b      	bhi.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d004      	beq.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab84:	d004      	beq.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800ab86:	e023      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab88:	f7fe ff68 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800ab8c:	61f8      	str	r0, [r7, #28]
          break;
 800ab8e:	e026      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ab90:	4b13      	ldr	r3, [pc, #76]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ab92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d11a      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800ab9e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800aba2:	61fb      	str	r3, [r7, #28]
          break;
 800aba4:	e016      	b.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aba6:	4b0e      	ldr	r3, [pc, #56]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abb2:	d111      	bne.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800abb4:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800abb6:	61fb      	str	r3, [r7, #28]
          break;
 800abb8:	e00e      	b.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800abba:	4b09      	ldr	r3, [pc, #36]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800abbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d109      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800abc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abcc:	61fb      	str	r3, [r7, #28]
          break;
 800abce:	e005      	b.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800abd0:	bf00      	nop
 800abd2:	e079      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800abd4:	bf00      	nop
 800abd6:	e077      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800abd8:	bf00      	nop
 800abda:	e075      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800abdc:	bf00      	nop
        break;
 800abde:	e073      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800abe0:	40021000 	.word	0x40021000
 800abe4:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800abe8:	4b3a      	ldr	r3, [pc, #232]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800abea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800abf2:	613b      	str	r3, [r7, #16]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abfa:	d02c      	beq.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac02:	d833      	bhi.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac0a:	d01a      	beq.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac12:	d82b      	bhi.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac20:	d004      	beq.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ac22:	e023      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac24:	f7fe ff1a 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800ac28:	61f8      	str	r0, [r7, #28]
          break;
 800ac2a:	e026      	b.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ac2c:	4b29      	ldr	r3, [pc, #164]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ac2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac32:	f003 0302 	and.w	r3, r3, #2
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d11a      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800ac3a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ac3e:	61fb      	str	r3, [r7, #28]
          break;
 800ac40:	e016      	b.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac42:	4b24      	ldr	r3, [pc, #144]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4e:	d111      	bne.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 800ac50:	4b21      	ldr	r3, [pc, #132]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800ac52:	61fb      	str	r3, [r7, #28]
          break;
 800ac54:	e00e      	b.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac56:	4b1f      	ldr	r3, [pc, #124]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ac58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac5c:	f003 0302 	and.w	r3, r3, #2
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d109      	bne.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 800ac64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac68:	61fb      	str	r3, [r7, #28]
          break;
 800ac6a:	e005      	b.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800ac6c:	bf00      	nop
 800ac6e:	e02b      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ac70:	bf00      	nop
 800ac72:	e029      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ac74:	bf00      	nop
 800ac76:	e027      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ac78:	bf00      	nop
        break;
 800ac7a:	e025      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800ac7c:	4b15      	ldr	r3, [pc, #84]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ac7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d004      	beq.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac94:	d004      	beq.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 800ac96:	e00d      	b.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac98:	f7fe fee0 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800ac9c:	61f8      	str	r0, [r7, #28]
          break;
 800ac9e:	e009      	b.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aca0:	4b0c      	ldr	r3, [pc, #48]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acac:	d101      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 800acae:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800acb0:	61fb      	str	r3, [r7, #28]
          break;
 800acb2:	bf00      	nop
        break;
 800acb4:	e008      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800acb6:	bf00      	nop
 800acb8:	e006      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800acba:	bf00      	nop
 800acbc:	e004      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800acbe:	bf00      	nop
 800acc0:	e002      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800acc2:	bf00      	nop
 800acc4:	e000      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800acc6:	bf00      	nop
    }
  }

  return(frequency);
 800acc8:	69fb      	ldr	r3, [r7, #28]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3720      	adds	r7, #32
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	40021000 	.word	0x40021000
 800acd8:	00f42400 	.word	0x00f42400

0800acdc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a04      	ldr	r2, [pc, #16]	; (800acf8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ace6:	f043 0304 	orr.w	r3, r3, #4
 800acea:	6013      	str	r3, [r2, #0]
}
 800acec:	bf00      	nop
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	40021000 	.word	0x40021000

0800acfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ad0a:	4b74      	ldr	r3, [pc, #464]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d018      	beq.n	800ad48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ad16:	4b71      	ldr	r3, [pc, #452]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	f003 0203 	and.w	r2, r3, #3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d10d      	bne.n	800ad42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
       ||
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d009      	beq.n	800ad42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ad2e:	4b6b      	ldr	r3, [pc, #428]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	091b      	lsrs	r3, r3, #4
 800ad34:	f003 0307 	and.w	r3, r3, #7
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	685b      	ldr	r3, [r3, #4]
       ||
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d047      	beq.n	800add2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	73fb      	strb	r3, [r7, #15]
 800ad46:	e044      	b.n	800add2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d018      	beq.n	800ad82 <RCCEx_PLLSAI1_Config+0x86>
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d825      	bhi.n	800ada0 <RCCEx_PLLSAI1_Config+0xa4>
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d002      	beq.n	800ad5e <RCCEx_PLLSAI1_Config+0x62>
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d009      	beq.n	800ad70 <RCCEx_PLLSAI1_Config+0x74>
 800ad5c:	e020      	b.n	800ada0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ad5e:	4b5f      	ldr	r3, [pc, #380]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d11d      	bne.n	800ada6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad6e:	e01a      	b.n	800ada6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ad70:	4b5a      	ldr	r3, [pc, #360]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d116      	bne.n	800adaa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad80:	e013      	b.n	800adaa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ad82:	4b56      	ldr	r3, [pc, #344]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10f      	bne.n	800adae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ad8e:	4b53      	ldr	r3, [pc, #332]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d109      	bne.n	800adae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad9e:	e006      	b.n	800adae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	73fb      	strb	r3, [r7, #15]
      break;
 800ada4:	e004      	b.n	800adb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ada6:	bf00      	nop
 800ada8:	e002      	b.n	800adb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800adaa:	bf00      	nop
 800adac:	e000      	b.n	800adb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800adae:	bf00      	nop
    }

    if(status == HAL_OK)
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10d      	bne.n	800add2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800adb6:	4b49      	ldr	r3, [pc, #292]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6819      	ldr	r1, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	011b      	lsls	r3, r3, #4
 800adca:	430b      	orrs	r3, r1
 800adcc:	4943      	ldr	r1, [pc, #268]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800adce:	4313      	orrs	r3, r2
 800add0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800add2:	7bfb      	ldrb	r3, [r7, #15]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d17c      	bne.n	800aed2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800add8:	4b40      	ldr	r3, [pc, #256]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a3f      	ldr	r2, [pc, #252]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800adde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ade2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ade4:	f7fa f802 	bl	8004dec <HAL_GetTick>
 800ade8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800adea:	e009      	b.n	800ae00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800adec:	f7f9 fffe 	bl	8004dec <HAL_GetTick>
 800adf0:	4602      	mov	r2, r0
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d902      	bls.n	800ae00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	73fb      	strb	r3, [r7, #15]
        break;
 800adfe:	e005      	b.n	800ae0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ae00:	4b36      	ldr	r3, [pc, #216]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1ef      	bne.n	800adec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d15f      	bne.n	800aed2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d110      	bne.n	800ae3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ae18:	4b30      	ldr	r3, [pc, #192]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ae20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	6892      	ldr	r2, [r2, #8]
 800ae28:	0211      	lsls	r1, r2, #8
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	68d2      	ldr	r2, [r2, #12]
 800ae2e:	06d2      	lsls	r2, r2, #27
 800ae30:	430a      	orrs	r2, r1
 800ae32:	492a      	ldr	r1, [pc, #168]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	610b      	str	r3, [r1, #16]
 800ae38:	e027      	b.n	800ae8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d112      	bne.n	800ae66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ae40:	4b26      	ldr	r3, [pc, #152]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ae48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	6892      	ldr	r2, [r2, #8]
 800ae50:	0211      	lsls	r1, r2, #8
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	6912      	ldr	r2, [r2, #16]
 800ae56:	0852      	lsrs	r2, r2, #1
 800ae58:	3a01      	subs	r2, #1
 800ae5a:	0552      	lsls	r2, r2, #21
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	491f      	ldr	r1, [pc, #124]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	610b      	str	r3, [r1, #16]
 800ae64:	e011      	b.n	800ae8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ae66:	4b1d      	ldr	r3, [pc, #116]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ae6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6892      	ldr	r2, [r2, #8]
 800ae76:	0211      	lsls	r1, r2, #8
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6952      	ldr	r2, [r2, #20]
 800ae7c:	0852      	lsrs	r2, r2, #1
 800ae7e:	3a01      	subs	r2, #1
 800ae80:	0652      	lsls	r2, r2, #25
 800ae82:	430a      	orrs	r2, r1
 800ae84:	4915      	ldr	r1, [pc, #84]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ae8a:	4b14      	ldr	r3, [pc, #80]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a13      	ldr	r2, [pc, #76]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae96:	f7f9 ffa9 	bl	8004dec <HAL_GetTick>
 800ae9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ae9c:	e009      	b.n	800aeb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ae9e:	f7f9 ffa5 	bl	8004dec <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d902      	bls.n	800aeb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	73fb      	strb	r3, [r7, #15]
          break;
 800aeb0:	e005      	b.n	800aebe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aeb2:	4b0a      	ldr	r3, [pc, #40]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0ef      	beq.n	800ae9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d106      	bne.n	800aed2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800aec6:	691a      	ldr	r2, [r3, #16]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	4903      	ldr	r1, [pc, #12]	; (800aedc <RCCEx_PLLSAI1_Config+0x1e0>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	40021000 	.word	0x40021000

0800aee0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aeee:	4b69      	ldr	r3, [pc, #420]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	f003 0303 	and.w	r3, r3, #3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800aefa:	4b66      	ldr	r3, [pc, #408]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f003 0203 	and.w	r2, r3, #3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d10d      	bne.n	800af26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
       ||
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800af12:	4b60      	ldr	r3, [pc, #384]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	091b      	lsrs	r3, r3, #4
 800af18:	f003 0307 	and.w	r3, r3, #7
 800af1c:	1c5a      	adds	r2, r3, #1
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
       ||
 800af22:	429a      	cmp	r2, r3
 800af24:	d047      	beq.n	800afb6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	73fb      	strb	r3, [r7, #15]
 800af2a:	e044      	b.n	800afb6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b03      	cmp	r3, #3
 800af32:	d018      	beq.n	800af66 <RCCEx_PLLSAI2_Config+0x86>
 800af34:	2b03      	cmp	r3, #3
 800af36:	d825      	bhi.n	800af84 <RCCEx_PLLSAI2_Config+0xa4>
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d002      	beq.n	800af42 <RCCEx_PLLSAI2_Config+0x62>
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d009      	beq.n	800af54 <RCCEx_PLLSAI2_Config+0x74>
 800af40:	e020      	b.n	800af84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800af42:	4b54      	ldr	r3, [pc, #336]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0302 	and.w	r3, r3, #2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d11d      	bne.n	800af8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af52:	e01a      	b.n	800af8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800af54:	4b4f      	ldr	r3, [pc, #316]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d116      	bne.n	800af8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af64:	e013      	b.n	800af8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800af66:	4b4b      	ldr	r3, [pc, #300]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10f      	bne.n	800af92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800af72:	4b48      	ldr	r3, [pc, #288]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d109      	bne.n	800af92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af82:	e006      	b.n	800af92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]
      break;
 800af88:	e004      	b.n	800af94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800af8a:	bf00      	nop
 800af8c:	e002      	b.n	800af94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800af8e:	bf00      	nop
 800af90:	e000      	b.n	800af94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800af92:	bf00      	nop
    }

    if(status == HAL_OK)
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10d      	bne.n	800afb6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800af9a:	4b3e      	ldr	r3, [pc, #248]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6819      	ldr	r1, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	3b01      	subs	r3, #1
 800afac:	011b      	lsls	r3, r3, #4
 800afae:	430b      	orrs	r3, r1
 800afb0:	4938      	ldr	r1, [pc, #224]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800afb2:	4313      	orrs	r3, r2
 800afb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d166      	bne.n	800b08a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800afbc:	4b35      	ldr	r3, [pc, #212]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a34      	ldr	r2, [pc, #208]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800afc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afc8:	f7f9 ff10 	bl	8004dec <HAL_GetTick>
 800afcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800afce:	e009      	b.n	800afe4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800afd0:	f7f9 ff0c 	bl	8004dec <HAL_GetTick>
 800afd4:	4602      	mov	r2, r0
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d902      	bls.n	800afe4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	73fb      	strb	r3, [r7, #15]
        break;
 800afe2:	e005      	b.n	800aff0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800afe4:	4b2b      	ldr	r3, [pc, #172]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1ef      	bne.n	800afd0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d149      	bne.n	800b08a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d110      	bne.n	800b01e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800affc:	4b25      	ldr	r3, [pc, #148]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	6892      	ldr	r2, [r2, #8]
 800b00c:	0211      	lsls	r1, r2, #8
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	68d2      	ldr	r2, [r2, #12]
 800b012:	06d2      	lsls	r2, r2, #27
 800b014:	430a      	orrs	r2, r1
 800b016:	491f      	ldr	r1, [pc, #124]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b018:	4313      	orrs	r3, r2
 800b01a:	614b      	str	r3, [r1, #20]
 800b01c:	e011      	b.n	800b042 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b01e:	4b1d      	ldr	r3, [pc, #116]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b026:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	6892      	ldr	r2, [r2, #8]
 800b02e:	0211      	lsls	r1, r2, #8
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	6912      	ldr	r2, [r2, #16]
 800b034:	0852      	lsrs	r2, r2, #1
 800b036:	3a01      	subs	r2, #1
 800b038:	0652      	lsls	r2, r2, #25
 800b03a:	430a      	orrs	r2, r1
 800b03c:	4915      	ldr	r1, [pc, #84]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b042:	4b14      	ldr	r3, [pc, #80]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a13      	ldr	r2, [pc, #76]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b04c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b04e:	f7f9 fecd 	bl	8004dec <HAL_GetTick>
 800b052:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b054:	e009      	b.n	800b06a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b056:	f7f9 fec9 	bl	8004dec <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	2b02      	cmp	r3, #2
 800b062:	d902      	bls.n	800b06a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	73fb      	strb	r3, [r7, #15]
          break;
 800b068:	e005      	b.n	800b076 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b06a:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0ef      	beq.n	800b056 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d106      	bne.n	800b08a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b07c:	4b05      	ldr	r3, [pc, #20]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b07e:	695a      	ldr	r2, [r3, #20]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	4903      	ldr	r1, [pc, #12]	; (800b094 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b086:	4313      	orrs	r3, r2
 800b088:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	40021000 	.word	0x40021000

0800b098 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b098:	b480      	push	{r7}
 800b09a:	b089      	sub	sp, #36	; 0x24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0b4:	d10c      	bne.n	800b0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b0b6:	4b77      	ldr	r3, [pc, #476]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b0c0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0c8:	d112      	bne.n	800b0f0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b0ca:	4b73      	ldr	r3, [pc, #460]	; (800b298 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800b0cc:	61fb      	str	r3, [r7, #28]
 800b0ce:	e00f      	b.n	800b0f0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0d6:	d10b      	bne.n	800b0f0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b0d8:	4b6e      	ldr	r3, [pc, #440]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0de:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b0e2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0ea:	d101      	bne.n	800b0f0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b0ec:	4b6a      	ldr	r3, [pc, #424]	; (800b298 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800b0ee:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f040 80c6 	bne.w	800b284 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b102:	d003      	beq.n	800b10c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b10a:	d13b      	bne.n	800b184 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b10c:	4b61      	ldr	r3, [pc, #388]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b114:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b118:	f040 80b3 	bne.w	800b282 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800b11c:	4b5d      	ldr	r3, [pc, #372]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 80ac 	beq.w	800b282 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b12a:	4b5a      	ldr	r3, [pc, #360]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	091b      	lsrs	r3, r3, #4
 800b130:	f003 0307 	and.w	r3, r3, #7
 800b134:	3301      	adds	r3, #1
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b13e:	4b55      	ldr	r3, [pc, #340]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	0a1b      	lsrs	r3, r3, #8
 800b144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b148:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b14a:	4b52      	ldr	r3, [pc, #328]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	0edb      	lsrs	r3, r3, #27
 800b150:	f003 031f 	and.w	r3, r3, #31
 800b154:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10a      	bne.n	800b172 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b15c:	4b4d      	ldr	r3, [pc, #308]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800b168:	2311      	movs	r3, #17
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	e001      	b.n	800b172 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800b16e:	2307      	movs	r3, #7
 800b170:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	fb03 f202 	mul.w	r2, r3, r2
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b180:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b182:	e07e      	b.n	800b282 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d139      	bne.n	800b1fe <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800b18a:	4b42      	ldr	r3, [pc, #264]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b196:	d175      	bne.n	800b284 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800b198:	4b3e      	ldr	r3, [pc, #248]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d06f      	beq.n	800b284 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b1a4:	4b3b      	ldr	r3, [pc, #236]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	091b      	lsrs	r3, r3, #4
 800b1aa:	f003 0307 	and.w	r3, r3, #7
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b1b8:	4b36      	ldr	r3, [pc, #216]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	0a1b      	lsrs	r3, r3, #8
 800b1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1c2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800b1c4:	4b33      	ldr	r3, [pc, #204]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	0edb      	lsrs	r3, r3, #27
 800b1ca:	f003 031f 	and.w	r3, r3, #31
 800b1ce:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800b1d6:	4b2f      	ldr	r3, [pc, #188]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800b1e2:	2311      	movs	r3, #17
 800b1e4:	617b      	str	r3, [r7, #20]
 800b1e6:	e001      	b.n	800b1ec <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800b1e8:	2307      	movs	r3, #7
 800b1ea:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	fb03 f202 	mul.w	r2, r3, r2
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	e042      	b.n	800b284 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b204:	d003      	beq.n	800b20e <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b20c:	d13a      	bne.n	800b284 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800b20e:	4b21      	ldr	r3, [pc, #132]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b21a:	d133      	bne.n	800b284 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800b21c:	4b1d      	ldr	r3, [pc, #116]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d02d      	beq.n	800b284 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b228:	4b1a      	ldr	r3, [pc, #104]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	091b      	lsrs	r3, r3, #4
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	3301      	adds	r3, #1
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b23c:	4b15      	ldr	r3, [pc, #84]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	0a1b      	lsrs	r3, r3, #8
 800b242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b246:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800b248:	4b12      	ldr	r3, [pc, #72]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	0edb      	lsrs	r3, r3, #27
 800b24e:	f003 031f 	and.w	r3, r3, #31
 800b252:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10a      	bne.n	800b270 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800b25a:	4b0e      	ldr	r3, [pc, #56]	; (800b294 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800b266:	2311      	movs	r3, #17
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	e001      	b.n	800b270 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800b26c:	2307      	movs	r3, #7
 800b26e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	fb03 f202 	mul.w	r2, r3, r2
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27e:	61fb      	str	r3, [r7, #28]
 800b280:	e000      	b.n	800b284 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b282:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800b284:	69fb      	ldr	r3, [r7, #28]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3724      	adds	r7, #36	; 0x24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	40021000 	.word	0x40021000
 800b298:	001fff68 	.word	0x001fff68

0800b29c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b088      	sub	sp, #32
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e155      	b.n	800b55a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7f6 fb98 	bl	80019f8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f959 	bl	800b580 <SAI_Disable>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e140      	b.n	800b55a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2202      	movs	r2, #2
 800b2dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d00c      	beq.n	800b302 <HAL_SAI_Init+0x66>
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d80d      	bhi.n	800b308 <HAL_SAI_Init+0x6c>
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <HAL_SAI_Init+0x5a>
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d003      	beq.n	800b2fc <HAL_SAI_Init+0x60>
 800b2f4:	e008      	b.n	800b308 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	61fb      	str	r3, [r7, #28]
      break;
 800b2fa:	e008      	b.n	800b30e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b2fc:	2310      	movs	r3, #16
 800b2fe:	61fb      	str	r3, [r7, #28]
      break;
 800b300:	e005      	b.n	800b30e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b302:	2320      	movs	r3, #32
 800b304:	61fb      	str	r3, [r7, #28]
      break;
 800b306:	e002      	b.n	800b30e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	61fb      	str	r3, [r7, #28]
      break;
 800b30c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	2b03      	cmp	r3, #3
 800b314:	d81d      	bhi.n	800b352 <HAL_SAI_Init+0xb6>
 800b316:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <HAL_SAI_Init+0x80>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b32d 	.word	0x0800b32d
 800b320:	0800b333 	.word	0x0800b333
 800b324:	0800b33b 	.word	0x0800b33b
 800b328:	0800b343 	.word	0x0800b343
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	617b      	str	r3, [r7, #20]
      break;
 800b330:	e012      	b.n	800b358 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b336:	617b      	str	r3, [r7, #20]
      break;
 800b338:	e00e      	b.n	800b358 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b33a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b33e:	617b      	str	r3, [r7, #20]
      break;
 800b340:	e00a      	b.n	800b358 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b346:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	f043 0301 	orr.w	r3, r3, #1
 800b34e:	61fb      	str	r3, [r7, #28]
      break;
 800b350:	e002      	b.n	800b358 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	617b      	str	r3, [r7, #20]
      break;
 800b356:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a81      	ldr	r2, [pc, #516]	; (800b564 <HAL_SAI_Init+0x2c8>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d004      	beq.n	800b36c <HAL_SAI_Init+0xd0>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a80      	ldr	r2, [pc, #512]	; (800b568 <HAL_SAI_Init+0x2cc>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d103      	bne.n	800b374 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800b36c:	4a7f      	ldr	r2, [pc, #508]	; (800b56c <HAL_SAI_Init+0x2d0>)
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	e002      	b.n	800b37a <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b374:	4a7e      	ldr	r2, [pc, #504]	; (800b570 <HAL_SAI_Init+0x2d4>)
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d041      	beq.n	800b406 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a77      	ldr	r2, [pc, #476]	; (800b564 <HAL_SAI_Init+0x2c8>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d004      	beq.n	800b396 <HAL_SAI_Init+0xfa>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a75      	ldr	r2, [pc, #468]	; (800b568 <HAL_SAI_Init+0x2cc>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d105      	bne.n	800b3a2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b396:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b39a:	f7fe fee7 	bl	800a16c <HAL_RCCEx_GetPeriphCLKFreq>
 800b39e:	6138      	str	r0, [r7, #16]
 800b3a0:	e004      	b.n	800b3ac <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b3a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b3a6:	f7fe fee1 	bl	800a16c <HAL_RCCEx_GetPeriphCLKFreq>
 800b3aa:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	005b      	lsls	r3, r3, #1
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	025b      	lsls	r3, r3, #9
 800b3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4a6b      	ldr	r2, [pc, #428]	; (800b574 <HAL_SAI_Init+0x2d8>)
 800b3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3cc:	08da      	lsrs	r2, r3, #3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b3d2:	68f9      	ldr	r1, [r7, #12]
 800b3d4:	4b67      	ldr	r3, [pc, #412]	; (800b574 <HAL_SAI_Init+0x2d8>)
 800b3d6:	fba3 2301 	umull	r2, r3, r3, r1
 800b3da:	08da      	lsrs	r2, r3, #3
 800b3dc:	4613      	mov	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	1aca      	subs	r2, r1, r3
 800b3e6:	2a08      	cmp	r2, #8
 800b3e8:	d904      	bls.n	800b3f4 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	d104      	bne.n	800b406 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	085a      	lsrs	r2, r3, #1
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d003      	beq.n	800b416 <HAL_SAI_Init+0x17a>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d109      	bne.n	800b42a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d101      	bne.n	800b422 <HAL_SAI_Init+0x186>
 800b41e:	2300      	movs	r3, #0
 800b420:	e001      	b.n	800b426 <HAL_SAI_Init+0x18a>
 800b422:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b426:	61bb      	str	r3, [r7, #24]
 800b428:	e008      	b.n	800b43c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d102      	bne.n	800b438 <HAL_SAI_Init+0x19c>
 800b432:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b436:	e000      	b.n	800b43a <HAL_SAI_Init+0x19e>
 800b438:	2300      	movs	r3, #0
 800b43a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6819      	ldr	r1, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	4b4c      	ldr	r3, [pc, #304]	; (800b578 <HAL_SAI_Init+0x2dc>)
 800b448:	400b      	ands	r3, r1
 800b44a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6819      	ldr	r1, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b460:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b466:	431a      	orrs	r2, r3
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800b474:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b480:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	051b      	lsls	r3, r3, #20
 800b488:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	6812      	ldr	r2, [r2, #0]
 800b49c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b4a0:	f023 030f 	bic.w	r3, r3, #15
 800b4a4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6859      	ldr	r1, [r3, #4]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	699a      	ldr	r2, [r3, #24]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b4:	431a      	orrs	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6899      	ldr	r1, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	4b2b      	ldr	r3, [pc, #172]	; (800b57c <HAL_SAI_Init+0x2e0>)
 800b4d0:	400b      	ands	r3, r1
 800b4d2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6899      	ldr	r1, [r3, #8]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b4e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800b4ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800b4f0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b4fa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	430a      	orrs	r2, r1
 800b502:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68d9      	ldr	r1, [r3, #12]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b512:	400b      	ands	r3, r1
 800b514:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68d9      	ldr	r1, [r3, #12]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b524:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b52a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b52c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b532:	3b01      	subs	r3, #1
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	430a      	orrs	r2, r1
 800b53e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3720      	adds	r7, #32
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	40015404 	.word	0x40015404
 800b568:	40015424 	.word	0x40015424
 800b56c:	40015400 	.word	0x40015400
 800b570:	40015800 	.word	0x40015800
 800b574:	cccccccd 	.word	0xcccccccd
 800b578:	ff05c010 	.word	0xff05c010
 800b57c:	fff88000 	.word	0xfff88000

0800b580 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b588:	4b18      	ldr	r3, [pc, #96]	; (800b5ec <SAI_Disable+0x6c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a18      	ldr	r2, [pc, #96]	; (800b5f0 <SAI_Disable+0x70>)
 800b58e:	fba2 2303 	umull	r2, r3, r2, r3
 800b592:	0b1b      	lsrs	r3, r3, #12
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b5aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10a      	bne.n	800b5c8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	72fb      	strb	r3, [r7, #11]
      break;
 800b5c6:	e009      	b.n	800b5dc <SAI_Disable+0x5c>
    }
    count--;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e7      	bne.n	800b5ac <SAI_Disable+0x2c>

  return status;
 800b5dc:	7afb      	ldrb	r3, [r7, #11]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	20000000 	.word	0x20000000
 800b5f0:	95cbec1b 	.word	0x95cbec1b

0800b5f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e022      	b.n	800b64c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7f6 fa97 	bl	8001b4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2203      	movs	r2, #3
 800b622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f814 	bl	800b654 <HAL_SD_InitCard>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e00a      	b.n	800b64c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b654:	b5b0      	push	{r4, r5, r7, lr}
 800b656:	b08e      	sub	sp, #56	; 0x38
 800b658:	af04      	add	r7, sp, #16
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b664:	2300      	movs	r3, #0
 800b666:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b668:	2300      	movs	r3, #0
 800b66a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b670:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b674:	f7fe fd7a 	bl	800a16c <HAL_RCCEx_GetPeriphCLKFreq>
 800b678:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d109      	bne.n	800b694 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b68e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	e07b      	b.n	800b78c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	09db      	lsrs	r3, r3, #7
 800b698:	4a3e      	ldr	r2, [pc, #248]	; (800b794 <HAL_SD_InitCard+0x140>)
 800b69a:	fba2 2303 	umull	r2, r3, r2, r3
 800b69e:	091b      	lsrs	r3, r3, #4
 800b6a0:	3b02      	subs	r3, #2
 800b6a2:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681d      	ldr	r5, [r3, #0]
 800b6a8:	466c      	mov	r4, sp
 800b6aa:	f107 0314 	add.w	r3, r7, #20
 800b6ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b6b6:	f107 0308 	add.w	r3, r7, #8
 800b6ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f001 fc45 	bl	800cf4c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6d0:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f001 fc72 	bl	800cfc0 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6ea:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	3302      	adds	r3, #2
 800b6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f6:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b6f8:	4a27      	ldr	r2, [pc, #156]	; (800b798 <HAL_SD_InitCard+0x144>)
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b700:	3301      	adds	r3, #1
 800b702:	4618      	mov	r0, r3
 800b704:	f7f9 fb7e 	bl	8004e04 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fb77 	bl	800bdfc <SD_PowerON>
 800b70e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00b      	beq.n	800b72e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b722:	6a3b      	ldr	r3, [r7, #32]
 800b724:	431a      	orrs	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e02e      	b.n	800b78c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa96 	bl	800bc60 <SD_InitCard>
 800b734:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00b      	beq.n	800b754 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b748:	6a3b      	ldr	r3, [r7, #32]
 800b74a:	431a      	orrs	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e01b      	b.n	800b78c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b75c:	4618      	mov	r0, r3
 800b75e:	f001 fcc2 	bl	800d0e6 <SDMMC_CmdBlockLength>
 800b762:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00f      	beq.n	800b78a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a0b      	ldr	r2, [pc, #44]	; (800b79c <HAL_SD_InitCard+0x148>)
 800b770:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	431a      	orrs	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e000      	b.n	800b78c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3728      	adds	r7, #40	; 0x28
 800b790:	46bd      	mov	sp, r7
 800b792:	bdb0      	pop	{r4, r5, r7, pc}
 800b794:	014f8b59 	.word	0x014f8b59
 800b798:	00012110 	.word	0x00012110
 800b79c:	004005ff 	.word	0x004005ff

0800b7a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ae:	0f9b      	lsrs	r3, r3, #30
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ba:	0e9b      	lsrs	r3, r3, #26
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	f003 030f 	and.w	r3, r3, #15
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7cc:	0e1b      	lsrs	r3, r3, #24
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0303 	and.w	r3, r3, #3
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7de:	0c1b      	lsrs	r3, r3, #16
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ea:	0a1b      	lsrs	r3, r3, #8
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b800:	0d1b      	lsrs	r3, r3, #20
 800b802:	b29a      	uxth	r2, r3
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b80c:	0c1b      	lsrs	r3, r3, #16
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	f003 030f 	and.w	r3, r3, #15
 800b814:	b2da      	uxtb	r2, r3
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b81e:	0bdb      	lsrs	r3, r3, #15
 800b820:	b2db      	uxtb	r3, r3
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	b2da      	uxtb	r2, r3
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b830:	0b9b      	lsrs	r3, r3, #14
 800b832:	b2db      	uxtb	r3, r3
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b842:	0b5b      	lsrs	r3, r3, #13
 800b844:	b2db      	uxtb	r3, r3
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b854:	0b1b      	lsrs	r3, r3, #12
 800b856:	b2db      	uxtb	r3, r3
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2200      	movs	r2, #0
 800b866:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d163      	bne.n	800b938 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b874:	009a      	lsls	r2, r3, #2
 800b876:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b87a:	4013      	ands	r3, r2
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b880:	0f92      	lsrs	r2, r2, #30
 800b882:	431a      	orrs	r2, r3
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b88c:	0edb      	lsrs	r3, r3, #27
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	f003 0307 	and.w	r3, r3, #7
 800b894:	b2da      	uxtb	r2, r3
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b89e:	0e1b      	lsrs	r3, r3, #24
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	f003 0307 	and.w	r3, r3, #7
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8b0:	0d5b      	lsrs	r3, r3, #21
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8c2:	0c9b      	lsrs	r3, r3, #18
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	f003 0307 	and.w	r3, r3, #7
 800b8ca:	b2da      	uxtb	r2, r3
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d4:	0bdb      	lsrs	r3, r3, #15
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f003 0307 	and.w	r3, r3, #7
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	7e1b      	ldrb	r3, [r3, #24]
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	3302      	adds	r3, #2
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b902:	fb03 f202 	mul.w	r2, r3, r2
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	7a1b      	ldrb	r3, [r3, #8]
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	f003 030f 	and.w	r3, r3, #15
 800b914:	2201      	movs	r2, #1
 800b916:	409a      	lsls	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b924:	0a52      	lsrs	r2, r2, #9
 800b926:	fb03 f202 	mul.w	r2, r3, r2
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b934:	661a      	str	r2, [r3, #96]	; 0x60
 800b936:	e031      	b.n	800b99c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d11d      	bne.n	800b97c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b944:	041b      	lsls	r3, r3, #16
 800b946:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b94e:	0c1b      	lsrs	r3, r3, #16
 800b950:	431a      	orrs	r2, r3
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	3301      	adds	r3, #1
 800b95c:	029a      	lsls	r2, r3, #10
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b970:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	661a      	str	r2, [r3, #96]	; 0x60
 800b97a:	e00f      	b.n	800b99c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a58      	ldr	r2, [pc, #352]	; (800bae4 <HAL_SD_GetCardCSD+0x344>)
 800b982:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b988:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e09d      	b.n	800bad8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a0:	0b9b      	lsrs	r3, r3, #14
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b2:	09db      	lsrs	r3, r3, #7
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d4:	0fdb      	lsrs	r3, r3, #31
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e0:	0f5b      	lsrs	r3, r3, #29
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	b2da      	uxtb	r2, r3
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f2:	0e9b      	lsrs	r3, r3, #26
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	f003 0307 	and.w	r3, r3, #7
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba04:	0d9b      	lsrs	r3, r3, #22
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	f003 030f 	and.w	r3, r3, #15
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba16:	0d5b      	lsrs	r3, r3, #21
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba32:	0c1b      	lsrs	r3, r3, #16
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba46:	0bdb      	lsrs	r3, r3, #15
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba5a:	0b9b      	lsrs	r3, r3, #14
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6e:	0b5b      	lsrs	r3, r3, #13
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	f003 0301 	and.w	r3, r3, #1
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba82:	0b1b      	lsrs	r3, r3, #12
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba96:	0a9b      	lsrs	r3, r3, #10
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	f003 0303 	and.w	r3, r3, #3
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baaa:	0a1b      	lsrs	r3, r3, #8
 800baac:	b2db      	uxtb	r3, r3
 800baae:	f003 0303 	and.w	r3, r3, #3
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800babe:	085b      	lsrs	r3, r3, #1
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac6:	b2da      	uxtb	r2, r3
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr
 800bae4:	004005ff 	.word	0x004005ff

0800bae8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bae8:	b5b0      	push	{r4, r5, r7, lr}
 800baea:	b090      	sub	sp, #64	; 0x40
 800baec:	af04      	add	r7, sp, #16
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2203      	movs	r2, #3
 800bafc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d02e      	beq.n	800bb66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb0e:	d106      	bne.n	800bb1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	639a      	str	r2, [r3, #56]	; 0x38
 800bb1c:	e029      	b.n	800bb72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb24:	d10a      	bne.n	800bb3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f9f6 	bl	800bf18 <SD_WideBus_Enable>
 800bb2c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	431a      	orrs	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	639a      	str	r2, [r3, #56]	; 0x38
 800bb3a:	e01a      	b.n	800bb72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10a      	bne.n	800bb58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fa33 	bl	800bfae <SD_WideBus_Disable>
 800bb48:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	431a      	orrs	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	639a      	str	r2, [r3, #56]	; 0x38
 800bb56:	e00c      	b.n	800bb72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38
 800bb64:	e005      	b.n	800bb72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d007      	beq.n	800bb8a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a35      	ldr	r2, [pc, #212]	; (800bc54 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800bb80:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bb88:	e042      	b.n	800bc10 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800bb8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bb8e:	f7fe faed 	bl	800a16c <HAL_RCCEx_GetPeriphCLKFreq>
 800bb92:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d031      	beq.n	800bbfe <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	3302      	adds	r3, #2
 800bbbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbc2:	4a25      	ldr	r2, [pc, #148]	; (800bc58 <HAL_SD_ConfigWideBusOperation+0x170>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d907      	bls.n	800bbd8 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbca:	4a24      	ldr	r2, [pc, #144]	; (800bc5c <HAL_SD_ConfigWideBusOperation+0x174>)
 800bbcc:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd0:	0ddb      	lsrs	r3, r3, #23
 800bbd2:	3b02      	subs	r3, #2
 800bbd4:	623b      	str	r3, [r7, #32]
 800bbd6:	e002      	b.n	800bbde <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681d      	ldr	r5, [r3, #0]
 800bbe2:	466c      	mov	r4, sp
 800bbe4:	f107 0318 	add.w	r3, r7, #24
 800bbe8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bbec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bbf0:	f107 030c 	add.w	r3, r7, #12
 800bbf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f001 f9a8 	bl	800cf4c <SDMMC_Init>
 800bbfc:	e008      	b.n	800bc10 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f001 fa64 	bl	800d0e6 <SDMMC_CmdBlockLength>
 800bc1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00c      	beq.n	800bc40 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a0a      	ldr	r2, [pc, #40]	; (800bc54 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800bc2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc34:	431a      	orrs	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800bc48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3730      	adds	r7, #48	; 0x30
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bdb0      	pop	{r4, r5, r7, pc}
 800bc54:	004005ff 	.word	0x004005ff
 800bc58:	017d7840 	.word	0x017d7840
 800bc5c:	55e63b89 	.word	0x55e63b89

0800bc60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bc60:	b5b0      	push	{r4, r5, r7, lr}
 800bc62:	b094      	sub	sp, #80	; 0x50
 800bc64:	af04      	add	r7, sp, #16
 800bc66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f001 f9b4 	bl	800cfde <SDMMC_GetPowerState>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bc80:	e0b8      	b.n	800bdf4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d02f      	beq.n	800bcea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f001 fb33 	bl	800d2fa <SDMMC_CmdSendCID>
 800bc94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <SD_InitCard+0x40>
    {
      return errorstate;
 800bc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc9e:	e0a9      	b.n	800bdf4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2100      	movs	r1, #0
 800bca6:	4618      	mov	r0, r3
 800bca8:	f001 f9de 	bl	800d068 <SDMMC_GetResponse>
 800bcac:	4602      	mov	r2, r0
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2104      	movs	r1, #4
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f001 f9d5 	bl	800d068 <SDMMC_GetResponse>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2108      	movs	r1, #8
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 f9cc 	bl	800d068 <SDMMC_GetResponse>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	210c      	movs	r1, #12
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f001 f9c3 	bl	800d068 <SDMMC_GetResponse>
 800bce2:	4602      	mov	r2, r0
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d00d      	beq.n	800bd0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f107 020e 	add.w	r2, r7, #14
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 fb39 	bl	800d374 <SDMMC_CmdSetRelAdd>
 800bd02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <SD_InitCard+0xae>
    {
      return errorstate;
 800bd0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0c:	e072      	b.n	800bdf4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d036      	beq.n	800bd84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bd16:	89fb      	ldrh	r3, [r7, #14]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd26:	041b      	lsls	r3, r3, #16
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f001 fb03 	bl	800d336 <SDMMC_CmdSendCSD>
 800bd30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <SD_InitCard+0xdc>
    {
      return errorstate;
 800bd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3a:	e05b      	b.n	800bdf4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2100      	movs	r1, #0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f001 f990 	bl	800d068 <SDMMC_GetResponse>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2104      	movs	r1, #4
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 f987 	bl	800d068 <SDMMC_GetResponse>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2108      	movs	r1, #8
 800bd66:	4618      	mov	r0, r3
 800bd68:	f001 f97e 	bl	800d068 <SDMMC_GetResponse>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	210c      	movs	r1, #12
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f001 f975 	bl	800d068 <SDMMC_GetResponse>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2104      	movs	r1, #4
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f001 f96c 	bl	800d068 <SDMMC_GetResponse>
 800bd90:	4603      	mov	r3, r0
 800bd92:	0d1a      	lsrs	r2, r3, #20
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bd98:	f107 0310 	add.w	r3, r7, #16
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7ff fcfe 	bl	800b7a0 <HAL_SD_GetCardCSD>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bdaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bdae:	e021      	b.n	800bdf4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6819      	ldr	r1, [r3, #0]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb8:	041b      	lsls	r3, r3, #16
 800bdba:	2200      	movs	r2, #0
 800bdbc:	461c      	mov	r4, r3
 800bdbe:	4615      	mov	r5, r2
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	462b      	mov	r3, r5
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	f001 f9b0 	bl	800d12a <SDMMC_CmdSelDesel>
 800bdca:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <SD_InitCard+0x176>
  {
    return errorstate;
 800bdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd4:	e00e      	b.n	800bdf4 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681d      	ldr	r5, [r3, #0]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	466c      	mov	r4, sp
 800bdde:	f103 0210 	add.w	r2, r3, #16
 800bde2:	ca07      	ldmia	r2, {r0, r1, r2}
 800bde4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bde8:	3304      	adds	r3, #4
 800bdea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bdec:	4628      	mov	r0, r5
 800bdee:	f001 f8ad 	bl	800cf4c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3740      	adds	r7, #64	; 0x40
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bdb0      	pop	{r4, r5, r7, pc}

0800bdfc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be04:	2300      	movs	r3, #0
 800be06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800be08:	2300      	movs	r3, #0
 800be0a:	617b      	str	r3, [r7, #20]
 800be0c:	2300      	movs	r3, #0
 800be0e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4618      	mov	r0, r3
 800be16:	f001 f9ab 	bl	800d170 <SDMMC_CmdGoIdleState>
 800be1a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <SD_PowerON+0x2a>
  {
    return errorstate;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	e072      	b.n	800bf0c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f001 f9be 	bl	800d1ac <SDMMC_CmdOperCond>
 800be30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00d      	beq.n	800be54 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4618      	mov	r0, r3
 800be44:	f001 f994 	bl	800d170 <SDMMC_CmdGoIdleState>
 800be48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <SD_PowerON+0x5e>
    {
      return errorstate;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	e05b      	b.n	800bf0c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d137      	bne.n	800bed2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2100      	movs	r1, #0
 800be68:	4618      	mov	r0, r3
 800be6a:	f001 f9be 	bl	800d1ea <SDMMC_CmdAppCommand>
 800be6e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d02d      	beq.n	800bed2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800be7a:	e047      	b.n	800bf0c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2100      	movs	r1, #0
 800be82:	4618      	mov	r0, r3
 800be84:	f001 f9b1 	bl	800d1ea <SDMMC_CmdAppCommand>
 800be88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <SD_PowerON+0x98>
    {
      return errorstate;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	e03b      	b.n	800bf0c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	491e      	ldr	r1, [pc, #120]	; (800bf14 <SD_PowerON+0x118>)
 800be9a:	4618      	mov	r0, r3
 800be9c:	f001 f9c7 	bl	800d22e <SDMMC_CmdAppOperCommand>
 800bea0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800beac:	e02e      	b.n	800bf0c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2100      	movs	r1, #0
 800beb4:	4618      	mov	r0, r3
 800beb6:	f001 f8d7 	bl	800d068 <SDMMC_GetResponse>
 800beba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	0fdb      	lsrs	r3, r3, #31
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d101      	bne.n	800bec8 <SD_PowerON+0xcc>
 800bec4:	2301      	movs	r3, #1
 800bec6:	e000      	b.n	800beca <SD_PowerON+0xce>
 800bec8:	2300      	movs	r3, #0
 800beca:	613b      	str	r3, [r7, #16]

    count++;
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	3301      	adds	r3, #1
 800bed0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bed8:	4293      	cmp	r3, r2
 800beda:	d802      	bhi.n	800bee2 <SD_PowerON+0xe6>
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0cc      	beq.n	800be7c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bee8:	4293      	cmp	r3, r2
 800beea:	d902      	bls.n	800bef2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800beec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bef0:	e00c      	b.n	800bf0c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d003      	beq.n	800bf04 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	645a      	str	r2, [r3, #68]	; 0x44
 800bf02:	e002      	b.n	800bf0a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	c1100000 	.word	0xc1100000

0800bf18 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	2300      	movs	r3, #0
 800bf26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f001 f89a 	bl	800d068 <SDMMC_GetResponse>
 800bf34:	4603      	mov	r3, r0
 800bf36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf3e:	d102      	bne.n	800bf46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bf40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf44:	e02f      	b.n	800bfa6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bf46:	f107 030c 	add.w	r3, r7, #12
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f879 	bl	800c044 <SD_FindSCR>
 800bf52:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	e023      	b.n	800bfa6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01c      	beq.n	800bfa2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf70:	041b      	lsls	r3, r3, #16
 800bf72:	4619      	mov	r1, r3
 800bf74:	4610      	mov	r0, r2
 800bf76:	f001 f938 	bl	800d1ea <SDMMC_CmdAppCommand>
 800bf7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	e00f      	b.n	800bfa6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2102      	movs	r1, #2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 f971 	bl	800d274 <SDMMC_CmdBusWidth>
 800bf92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	e003      	b.n	800bfa6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e001      	b.n	800bfa6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bfa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b086      	sub	sp, #24
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	2300      	movs	r3, #0
 800bfbc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f001 f84f 	bl	800d068 <SDMMC_GetResponse>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfd4:	d102      	bne.n	800bfdc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bfd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bfda:	e02f      	b.n	800c03c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bfdc:	f107 030c 	add.w	r3, r7, #12
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f82e 	bl	800c044 <SD_FindSCR>
 800bfe8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d001      	beq.n	800bff4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	e023      	b.n	800c03c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d01c      	beq.n	800c038 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c006:	041b      	lsls	r3, r3, #16
 800c008:	4619      	mov	r1, r3
 800c00a:	4610      	mov	r0, r2
 800c00c:	f001 f8ed 	bl	800d1ea <SDMMC_CmdAppCommand>
 800c010:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d001      	beq.n	800c01c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	e00f      	b.n	800c03c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2100      	movs	r1, #0
 800c022:	4618      	mov	r0, r3
 800c024:	f001 f926 	bl	800d274 <SDMMC_CmdBusWidth>
 800c028:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	e003      	b.n	800c03c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c034:	2300      	movs	r3, #0
 800c036:	e001      	b.n	800c03c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c038:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c044:	b590      	push	{r4, r7, lr}
 800c046:	b08f      	sub	sp, #60	; 0x3c
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c04e:	f7f8 fecd 	bl	8004dec <HAL_GetTick>
 800c052:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c054:	2300      	movs	r3, #0
 800c056:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c058:	2300      	movs	r3, #0
 800c05a:	60bb      	str	r3, [r7, #8]
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2108      	movs	r1, #8
 800c06a:	4618      	mov	r0, r3
 800c06c:	f001 f83b 	bl	800d0e6 <SDMMC_CmdBlockLength>
 800c070:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <SD_FindSCR+0x38>
  {
    return errorstate;
 800c078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07a:	e0a9      	b.n	800c1d0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	4619      	mov	r1, r3
 800c088:	4610      	mov	r0, r2
 800c08a:	f001 f8ae 	bl	800d1ea <SDMMC_CmdAppCommand>
 800c08e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <SD_FindSCR+0x56>
  {
    return errorstate;
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	e09a      	b.n	800c1d0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c09a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c09e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c0a4:	2330      	movs	r3, #48	; 0x30
 800c0a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f107 0210 	add.w	r2, r7, #16
 800c0bc:	4611      	mov	r1, r2
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f000 ffe5 	bl	800d08e <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f001 f8f5 	bl	800d2b8 <SDMMC_CmdSendSCR>
 800c0ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d022      	beq.n	800c11c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	e07a      	b.n	800c1d0 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00e      	beq.n	800c106 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6819      	ldr	r1, [r3, #0]
 800c0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	f107 0208 	add.w	r2, r7, #8
 800c0f4:	18d4      	adds	r4, r2, r3
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	f000 ff55 	bl	800cfa6 <SDMMC_ReadFIFO>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	6023      	str	r3, [r4, #0]
      index++;
 800c100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c102:	3301      	adds	r3, #1
 800c104:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c106:	f7f8 fe71 	bl	8004dec <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c114:	d102      	bne.n	800c11c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c11a:	e059      	b.n	800c1d0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c122:	f240 432a 	movw	r3, #1066	; 0x42a
 800c126:	4013      	ands	r3, r2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0d6      	beq.n	800c0da <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c132:	f003 0308 	and.w	r3, r3, #8
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2208      	movs	r2, #8
 800c140:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c142:	2308      	movs	r3, #8
 800c144:	e044      	b.n	800c1d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c14c:	f003 0302 	and.w	r3, r3, #2
 800c150:	2b00      	cmp	r3, #0
 800c152:	d005      	beq.n	800c160 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2202      	movs	r2, #2
 800c15a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c15c:	2302      	movs	r3, #2
 800c15e:	e037      	b.n	800c1d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c166:	f003 0320 	and.w	r3, r3, #32
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2220      	movs	r2, #32
 800c174:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c176:	2320      	movs	r3, #32
 800c178:	e02a      	b.n	800c1d0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f240 523a 	movw	r2, #1338	; 0x53a
 800c182:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	061a      	lsls	r2, r3, #24
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	021b      	lsls	r3, r3, #8
 800c18c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c190:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	0a1b      	lsrs	r3, r3, #8
 800c196:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c19a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	0e1b      	lsrs	r3, r3, #24
 800c1a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	601a      	str	r2, [r3, #0]
    scr++;
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	061a      	lsls	r2, r3, #24
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	021b      	lsls	r3, r3, #8
 800c1b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c1b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	0a1b      	lsrs	r3, r3, #8
 800c1be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c1c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	0e1b      	lsrs	r3, r3, #24
 800c1c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	373c      	adds	r7, #60	; 0x3c
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd90      	pop	{r4, r7, pc}

0800c1d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e095      	b.n	800c316 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d108      	bne.n	800c204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1fa:	d009      	beq.n	800c210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	61da      	str	r2, [r3, #28]
 800c202:	e005      	b.n	800c210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7f5 fd6c 	bl	8001d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2202      	movs	r2, #2
 800c234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c246:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c250:	d902      	bls.n	800c258 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c252:	2300      	movs	r3, #0
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	e002      	b.n	800c25e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c25c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c266:	d007      	beq.n	800c278 <HAL_SPI_Init+0xa0>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c270:	d002      	beq.n	800c278 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c288:	431a      	orrs	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	f003 0302 	and.w	r3, r3, #2
 800c292:	431a      	orrs	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	431a      	orrs	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2a6:	431a      	orrs	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	69db      	ldr	r3, [r3, #28]
 800c2ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ba:	ea42 0103 	orr.w	r1, r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	0c1b      	lsrs	r3, r3, #16
 800c2d4:	f003 0204 	and.w	r2, r3, #4
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	f003 0310 	and.w	r3, r3, #16
 800c2e0:	431a      	orrs	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e6:	f003 0308 	and.w	r3, r3, #8
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c2f4:	ea42 0103 	orr.w	r1, r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b084      	sub	sp, #16
 800c322:	af00      	add	r7, sp, #0
 800c324:	60f8      	str	r0, [r7, #12]
 800c326:	60b9      	str	r1, [r7, #8]
 800c328:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e038      	b.n	800c3a6 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d106      	bne.n	800c34e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f7f4 fda3 	bl	8000e94 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3308      	adds	r3, #8
 800c356:	4619      	mov	r1, r3
 800c358:	4610      	mov	r0, r2
 800c35a:	f000 fcdf 	bl	800cd1c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6818      	ldr	r0, [r3, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	461a      	mov	r2, r3
 800c368:	68b9      	ldr	r1, [r7, #8]
 800c36a:	f000 fd67 	bl	800ce3c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6858      	ldr	r0, [r3, #4]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	689a      	ldr	r2, [r3, #8]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37a:	6879      	ldr	r1, [r7, #4]
 800c37c:	f000 fdae 	bl	800cedc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	6892      	ldr	r2, [r2, #8]
 800c388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	6892      	ldr	r2, [r2, #8]
 800c394:	f041 0101 	orr.w	r1, r1, #1
 800c398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e040      	b.n	800c442 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d106      	bne.n	800c3d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7f5 fe53 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2224      	movs	r2, #36	; 0x24
 800c3da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f022 0201 	bic.w	r2, r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f82d 	bl	800c44c <UART_SetConfig>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d101      	bne.n	800c3fc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e022      	b.n	800c442 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fad9 	bl	800c9bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c418:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	689a      	ldr	r2, [r3, #8]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c428:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f042 0201 	orr.w	r2, r2, #1
 800c438:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fb60 	bl	800cb00 <UART_CheckIdleState>
 800c440:	4603      	mov	r3, r0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c44c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c450:	b08a      	sub	sp, #40	; 0x28
 800c452:	af00      	add	r7, sp, #0
 800c454:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	689a      	ldr	r2, [r3, #8]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	431a      	orrs	r2, r3
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	431a      	orrs	r2, r3
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	69db      	ldr	r3, [r3, #28]
 800c470:	4313      	orrs	r3, r2
 800c472:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	4ba4      	ldr	r3, [pc, #656]	; (800c70c <UART_SetConfig+0x2c0>)
 800c47c:	4013      	ands	r3, r2
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	6812      	ldr	r2, [r2, #0]
 800c482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c484:	430b      	orrs	r3, r1
 800c486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	430a      	orrs	r2, r1
 800c49c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a99      	ldr	r2, [pc, #612]	; (800c710 <UART_SetConfig+0x2c4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d004      	beq.n	800c4b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a90      	ldr	r2, [pc, #576]	; (800c714 <UART_SetConfig+0x2c8>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d126      	bne.n	800c524 <UART_SetConfig+0xd8>
 800c4d6:	4b90      	ldr	r3, [pc, #576]	; (800c718 <UART_SetConfig+0x2cc>)
 800c4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4dc:	f003 0303 	and.w	r3, r3, #3
 800c4e0:	2b03      	cmp	r3, #3
 800c4e2:	d81b      	bhi.n	800c51c <UART_SetConfig+0xd0>
 800c4e4:	a201      	add	r2, pc, #4	; (adr r2, 800c4ec <UART_SetConfig+0xa0>)
 800c4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ea:	bf00      	nop
 800c4ec:	0800c4fd 	.word	0x0800c4fd
 800c4f0:	0800c50d 	.word	0x0800c50d
 800c4f4:	0800c505 	.word	0x0800c505
 800c4f8:	0800c515 	.word	0x0800c515
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c502:	e116      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c504:	2302      	movs	r3, #2
 800c506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c50a:	e112      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c50c:	2304      	movs	r3, #4
 800c50e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c512:	e10e      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c514:	2308      	movs	r3, #8
 800c516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c51a:	e10a      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c51c:	2310      	movs	r3, #16
 800c51e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c522:	e106      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a7c      	ldr	r2, [pc, #496]	; (800c71c <UART_SetConfig+0x2d0>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d138      	bne.n	800c5a0 <UART_SetConfig+0x154>
 800c52e:	4b7a      	ldr	r3, [pc, #488]	; (800c718 <UART_SetConfig+0x2cc>)
 800c530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c534:	f003 030c 	and.w	r3, r3, #12
 800c538:	2b0c      	cmp	r3, #12
 800c53a:	d82d      	bhi.n	800c598 <UART_SetConfig+0x14c>
 800c53c:	a201      	add	r2, pc, #4	; (adr r2, 800c544 <UART_SetConfig+0xf8>)
 800c53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c542:	bf00      	nop
 800c544:	0800c579 	.word	0x0800c579
 800c548:	0800c599 	.word	0x0800c599
 800c54c:	0800c599 	.word	0x0800c599
 800c550:	0800c599 	.word	0x0800c599
 800c554:	0800c589 	.word	0x0800c589
 800c558:	0800c599 	.word	0x0800c599
 800c55c:	0800c599 	.word	0x0800c599
 800c560:	0800c599 	.word	0x0800c599
 800c564:	0800c581 	.word	0x0800c581
 800c568:	0800c599 	.word	0x0800c599
 800c56c:	0800c599 	.word	0x0800c599
 800c570:	0800c599 	.word	0x0800c599
 800c574:	0800c591 	.word	0x0800c591
 800c578:	2300      	movs	r3, #0
 800c57a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c57e:	e0d8      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c580:	2302      	movs	r3, #2
 800c582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c586:	e0d4      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c588:	2304      	movs	r3, #4
 800c58a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c58e:	e0d0      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c590:	2308      	movs	r3, #8
 800c592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c596:	e0cc      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c598:	2310      	movs	r3, #16
 800c59a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c59e:	e0c8      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a5e      	ldr	r2, [pc, #376]	; (800c720 <UART_SetConfig+0x2d4>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d125      	bne.n	800c5f6 <UART_SetConfig+0x1aa>
 800c5aa:	4b5b      	ldr	r3, [pc, #364]	; (800c718 <UART_SetConfig+0x2cc>)
 800c5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c5b4:	2b30      	cmp	r3, #48	; 0x30
 800c5b6:	d016      	beq.n	800c5e6 <UART_SetConfig+0x19a>
 800c5b8:	2b30      	cmp	r3, #48	; 0x30
 800c5ba:	d818      	bhi.n	800c5ee <UART_SetConfig+0x1a2>
 800c5bc:	2b20      	cmp	r3, #32
 800c5be:	d00a      	beq.n	800c5d6 <UART_SetConfig+0x18a>
 800c5c0:	2b20      	cmp	r3, #32
 800c5c2:	d814      	bhi.n	800c5ee <UART_SetConfig+0x1a2>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <UART_SetConfig+0x182>
 800c5c8:	2b10      	cmp	r3, #16
 800c5ca:	d008      	beq.n	800c5de <UART_SetConfig+0x192>
 800c5cc:	e00f      	b.n	800c5ee <UART_SetConfig+0x1a2>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5d4:	e0ad      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5dc:	e0a9      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c5de:	2304      	movs	r3, #4
 800c5e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5e4:	e0a5      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c5e6:	2308      	movs	r3, #8
 800c5e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5ec:	e0a1      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c5ee:	2310      	movs	r3, #16
 800c5f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5f4:	e09d      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a4a      	ldr	r2, [pc, #296]	; (800c724 <UART_SetConfig+0x2d8>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d125      	bne.n	800c64c <UART_SetConfig+0x200>
 800c600:	4b45      	ldr	r3, [pc, #276]	; (800c718 <UART_SetConfig+0x2cc>)
 800c602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c60a:	2bc0      	cmp	r3, #192	; 0xc0
 800c60c:	d016      	beq.n	800c63c <UART_SetConfig+0x1f0>
 800c60e:	2bc0      	cmp	r3, #192	; 0xc0
 800c610:	d818      	bhi.n	800c644 <UART_SetConfig+0x1f8>
 800c612:	2b80      	cmp	r3, #128	; 0x80
 800c614:	d00a      	beq.n	800c62c <UART_SetConfig+0x1e0>
 800c616:	2b80      	cmp	r3, #128	; 0x80
 800c618:	d814      	bhi.n	800c644 <UART_SetConfig+0x1f8>
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d002      	beq.n	800c624 <UART_SetConfig+0x1d8>
 800c61e:	2b40      	cmp	r3, #64	; 0x40
 800c620:	d008      	beq.n	800c634 <UART_SetConfig+0x1e8>
 800c622:	e00f      	b.n	800c644 <UART_SetConfig+0x1f8>
 800c624:	2300      	movs	r3, #0
 800c626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c62a:	e082      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c62c:	2302      	movs	r3, #2
 800c62e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c632:	e07e      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c634:	2304      	movs	r3, #4
 800c636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c63a:	e07a      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c63c:	2308      	movs	r3, #8
 800c63e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c642:	e076      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c644:	2310      	movs	r3, #16
 800c646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c64a:	e072      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a35      	ldr	r2, [pc, #212]	; (800c728 <UART_SetConfig+0x2dc>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d12a      	bne.n	800c6ac <UART_SetConfig+0x260>
 800c656:	4b30      	ldr	r3, [pc, #192]	; (800c718 <UART_SetConfig+0x2cc>)
 800c658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c65c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c664:	d01a      	beq.n	800c69c <UART_SetConfig+0x250>
 800c666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c66a:	d81b      	bhi.n	800c6a4 <UART_SetConfig+0x258>
 800c66c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c670:	d00c      	beq.n	800c68c <UART_SetConfig+0x240>
 800c672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c676:	d815      	bhi.n	800c6a4 <UART_SetConfig+0x258>
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d003      	beq.n	800c684 <UART_SetConfig+0x238>
 800c67c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c680:	d008      	beq.n	800c694 <UART_SetConfig+0x248>
 800c682:	e00f      	b.n	800c6a4 <UART_SetConfig+0x258>
 800c684:	2300      	movs	r3, #0
 800c686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c68a:	e052      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c68c:	2302      	movs	r3, #2
 800c68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c692:	e04e      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c694:	2304      	movs	r3, #4
 800c696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c69a:	e04a      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c69c:	2308      	movs	r3, #8
 800c69e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6a2:	e046      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6aa:	e042      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a17      	ldr	r2, [pc, #92]	; (800c710 <UART_SetConfig+0x2c4>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d13a      	bne.n	800c72c <UART_SetConfig+0x2e0>
 800c6b6:	4b18      	ldr	r3, [pc, #96]	; (800c718 <UART_SetConfig+0x2cc>)
 800c6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c6c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6c4:	d01a      	beq.n	800c6fc <UART_SetConfig+0x2b0>
 800c6c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6ca:	d81b      	bhi.n	800c704 <UART_SetConfig+0x2b8>
 800c6cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6d0:	d00c      	beq.n	800c6ec <UART_SetConfig+0x2a0>
 800c6d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6d6:	d815      	bhi.n	800c704 <UART_SetConfig+0x2b8>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <UART_SetConfig+0x298>
 800c6dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6e0:	d008      	beq.n	800c6f4 <UART_SetConfig+0x2a8>
 800c6e2:	e00f      	b.n	800c704 <UART_SetConfig+0x2b8>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6ea:	e022      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6f2:	e01e      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c6f4:	2304      	movs	r3, #4
 800c6f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6fa:	e01a      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c6fc:	2308      	movs	r3, #8
 800c6fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c702:	e016      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c704:	2310      	movs	r3, #16
 800c706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c70a:	e012      	b.n	800c732 <UART_SetConfig+0x2e6>
 800c70c:	efff69f3 	.word	0xefff69f3
 800c710:	40008000 	.word	0x40008000
 800c714:	40013800 	.word	0x40013800
 800c718:	40021000 	.word	0x40021000
 800c71c:	40004400 	.word	0x40004400
 800c720:	40004800 	.word	0x40004800
 800c724:	40004c00 	.word	0x40004c00
 800c728:	40005000 	.word	0x40005000
 800c72c:	2310      	movs	r3, #16
 800c72e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a9f      	ldr	r2, [pc, #636]	; (800c9b4 <UART_SetConfig+0x568>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d17a      	bne.n	800c832 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c73c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c740:	2b08      	cmp	r3, #8
 800c742:	d824      	bhi.n	800c78e <UART_SetConfig+0x342>
 800c744:	a201      	add	r2, pc, #4	; (adr r2, 800c74c <UART_SetConfig+0x300>)
 800c746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74a:	bf00      	nop
 800c74c:	0800c771 	.word	0x0800c771
 800c750:	0800c78f 	.word	0x0800c78f
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c78f 	.word	0x0800c78f
 800c75c:	0800c77f 	.word	0x0800c77f
 800c760:	0800c78f 	.word	0x0800c78f
 800c764:	0800c78f 	.word	0x0800c78f
 800c768:	0800c78f 	.word	0x0800c78f
 800c76c:	0800c787 	.word	0x0800c787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c770:	f7fd f974 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800c774:	61f8      	str	r0, [r7, #28]
        break;
 800c776:	e010      	b.n	800c79a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c778:	4b8f      	ldr	r3, [pc, #572]	; (800c9b8 <UART_SetConfig+0x56c>)
 800c77a:	61fb      	str	r3, [r7, #28]
        break;
 800c77c:	e00d      	b.n	800c79a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c77e:	f7fd f8d5 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800c782:	61f8      	str	r0, [r7, #28]
        break;
 800c784:	e009      	b.n	800c79a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c78a:	61fb      	str	r3, [r7, #28]
        break;
 800c78c:	e005      	b.n	800c79a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800c78e:	2300      	movs	r3, #0
 800c790:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 80fb 	beq.w	800c998 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	685a      	ldr	r2, [r3, #4]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	4413      	add	r3, r2
 800c7ac:	69fa      	ldr	r2, [r7, #28]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d305      	bcc.n	800c7be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c7b8:	69fa      	ldr	r2, [r7, #28]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d903      	bls.n	800c7c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c7c4:	e0e8      	b.n	800c998 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	461c      	mov	r4, r3
 800c7cc:	4615      	mov	r5, r2
 800c7ce:	f04f 0200 	mov.w	r2, #0
 800c7d2:	f04f 0300 	mov.w	r3, #0
 800c7d6:	022b      	lsls	r3, r5, #8
 800c7d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c7dc:	0222      	lsls	r2, r4, #8
 800c7de:	68f9      	ldr	r1, [r7, #12]
 800c7e0:	6849      	ldr	r1, [r1, #4]
 800c7e2:	0849      	lsrs	r1, r1, #1
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	4688      	mov	r8, r1
 800c7e8:	4681      	mov	r9, r0
 800c7ea:	eb12 0a08 	adds.w	sl, r2, r8
 800c7ee:	eb43 0b09 	adc.w	fp, r3, r9
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	603b      	str	r3, [r7, #0]
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c800:	4650      	mov	r0, sl
 800c802:	4659      	mov	r1, fp
 800c804:	f7f3 fcf2 	bl	80001ec <__aeabi_uldivmod>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4613      	mov	r3, r2
 800c80e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c816:	d308      	bcc.n	800c82a <UART_SetConfig+0x3de>
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c81e:	d204      	bcs.n	800c82a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	69ba      	ldr	r2, [r7, #24]
 800c826:	60da      	str	r2, [r3, #12]
 800c828:	e0b6      	b.n	800c998 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c830:	e0b2      	b.n	800c998 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c83a:	d15e      	bne.n	800c8fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800c83c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c840:	2b08      	cmp	r3, #8
 800c842:	d828      	bhi.n	800c896 <UART_SetConfig+0x44a>
 800c844:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <UART_SetConfig+0x400>)
 800c846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84a:	bf00      	nop
 800c84c:	0800c871 	.word	0x0800c871
 800c850:	0800c879 	.word	0x0800c879
 800c854:	0800c881 	.word	0x0800c881
 800c858:	0800c897 	.word	0x0800c897
 800c85c:	0800c887 	.word	0x0800c887
 800c860:	0800c897 	.word	0x0800c897
 800c864:	0800c897 	.word	0x0800c897
 800c868:	0800c897 	.word	0x0800c897
 800c86c:	0800c88f 	.word	0x0800c88f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c870:	f7fd f8f4 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800c874:	61f8      	str	r0, [r7, #28]
        break;
 800c876:	e014      	b.n	800c8a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c878:	f7fd f906 	bl	8009a88 <HAL_RCC_GetPCLK2Freq>
 800c87c:	61f8      	str	r0, [r7, #28]
        break;
 800c87e:	e010      	b.n	800c8a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c880:	4b4d      	ldr	r3, [pc, #308]	; (800c9b8 <UART_SetConfig+0x56c>)
 800c882:	61fb      	str	r3, [r7, #28]
        break;
 800c884:	e00d      	b.n	800c8a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c886:	f7fd f851 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800c88a:	61f8      	str	r0, [r7, #28]
        break;
 800c88c:	e009      	b.n	800c8a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c88e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c892:	61fb      	str	r3, [r7, #28]
        break;
 800c894:	e005      	b.n	800c8a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800c896:	2300      	movs	r3, #0
 800c898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c8a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d077      	beq.n	800c998 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	005a      	lsls	r2, r3, #1
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	085b      	lsrs	r3, r3, #1
 800c8b2:	441a      	add	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	2b0f      	cmp	r3, #15
 800c8c2:	d916      	bls.n	800c8f2 <UART_SetConfig+0x4a6>
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8ca:	d212      	bcs.n	800c8f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	f023 030f 	bic.w	r3, r3, #15
 800c8d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	085b      	lsrs	r3, r3, #1
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	f003 0307 	and.w	r3, r3, #7
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	8afb      	ldrh	r3, [r7, #22]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	8afa      	ldrh	r2, [r7, #22]
 800c8ee:	60da      	str	r2, [r3, #12]
 800c8f0:	e052      	b.n	800c998 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c8f8:	e04e      	b.n	800c998 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c8fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c8fe:	2b08      	cmp	r3, #8
 800c900:	d827      	bhi.n	800c952 <UART_SetConfig+0x506>
 800c902:	a201      	add	r2, pc, #4	; (adr r2, 800c908 <UART_SetConfig+0x4bc>)
 800c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c908:	0800c92d 	.word	0x0800c92d
 800c90c:	0800c935 	.word	0x0800c935
 800c910:	0800c93d 	.word	0x0800c93d
 800c914:	0800c953 	.word	0x0800c953
 800c918:	0800c943 	.word	0x0800c943
 800c91c:	0800c953 	.word	0x0800c953
 800c920:	0800c953 	.word	0x0800c953
 800c924:	0800c953 	.word	0x0800c953
 800c928:	0800c94b 	.word	0x0800c94b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c92c:	f7fd f896 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800c930:	61f8      	str	r0, [r7, #28]
        break;
 800c932:	e014      	b.n	800c95e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c934:	f7fd f8a8 	bl	8009a88 <HAL_RCC_GetPCLK2Freq>
 800c938:	61f8      	str	r0, [r7, #28]
        break;
 800c93a:	e010      	b.n	800c95e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c93c:	4b1e      	ldr	r3, [pc, #120]	; (800c9b8 <UART_SetConfig+0x56c>)
 800c93e:	61fb      	str	r3, [r7, #28]
        break;
 800c940:	e00d      	b.n	800c95e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c942:	f7fc fff3 	bl	800992c <HAL_RCC_GetSysClockFreq>
 800c946:	61f8      	str	r0, [r7, #28]
        break;
 800c948:	e009      	b.n	800c95e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c94a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c94e:	61fb      	str	r3, [r7, #28]
        break;
 800c950:	e005      	b.n	800c95e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c95c:	bf00      	nop
    }

    if (pclk != 0U)
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d019      	beq.n	800c998 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	085a      	lsrs	r2, r3, #1
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	441a      	add	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	fbb2 f3f3 	udiv	r3, r2, r3
 800c976:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	2b0f      	cmp	r3, #15
 800c97c:	d909      	bls.n	800c992 <UART_SetConfig+0x546>
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c984:	d205      	bcs.n	800c992 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	b29a      	uxth	r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	60da      	str	r2, [r3, #12]
 800c990:	e002      	b.n	800c998 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c9a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3728      	adds	r7, #40	; 0x28
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9b2:	bf00      	nop
 800c9b4:	40008000 	.word	0x40008000
 800c9b8:	00f42400 	.word	0x00f42400

0800c9bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c8:	f003 0301 	and.w	r3, r3, #1
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00a      	beq.n	800c9e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	430a      	orrs	r2, r1
 800c9e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00a      	beq.n	800ca08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	430a      	orrs	r2, r1
 800ca06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0c:	f003 0304 	and.w	r3, r3, #4
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00a      	beq.n	800ca2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	430a      	orrs	r2, r1
 800ca28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2e:	f003 0308 	and.w	r3, r3, #8
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00a      	beq.n	800ca4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	430a      	orrs	r2, r1
 800ca4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca50:	f003 0310 	and.w	r3, r3, #16
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00a      	beq.n	800ca6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	430a      	orrs	r2, r1
 800ca6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca72:	f003 0320 	and.w	r3, r3, #32
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00a      	beq.n	800ca90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	430a      	orrs	r2, r1
 800ca8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d01a      	beq.n	800cad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	430a      	orrs	r2, r1
 800cab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caba:	d10a      	bne.n	800cad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	430a      	orrs	r2, r1
 800cad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00a      	beq.n	800caf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	430a      	orrs	r2, r1
 800caf2:	605a      	str	r2, [r3, #4]
  }
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af02      	add	r7, sp, #8
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb10:	f7f8 f96c 	bl	8004dec <HAL_GetTick>
 800cb14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 0308 	and.w	r3, r3, #8
 800cb20:	2b08      	cmp	r3, #8
 800cb22:	d10e      	bne.n	800cb42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f82d 	bl	800cb92 <UART_WaitOnFlagUntilTimeout>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d001      	beq.n	800cb42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e023      	b.n	800cb8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 0304 	and.w	r3, r3, #4
 800cb4c:	2b04      	cmp	r3, #4
 800cb4e:	d10e      	bne.n	800cb6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 f817 	bl	800cb92 <UART_WaitOnFlagUntilTimeout>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d001      	beq.n	800cb6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e00d      	b.n	800cb8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2220      	movs	r2, #32
 800cb78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b09c      	sub	sp, #112	; 0x70
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	60b9      	str	r1, [r7, #8]
 800cb9c:	603b      	str	r3, [r7, #0]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cba2:	e0a5      	b.n	800ccf0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbaa:	f000 80a1 	beq.w	800ccf0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbae:	f7f8 f91d 	bl	8004dec <HAL_GetTick>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d302      	bcc.n	800cbc4 <UART_WaitOnFlagUntilTimeout+0x32>
 800cbbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d13e      	bne.n	800cc42 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbcc:	e853 3f00 	ldrex	r3, [r3]
 800cbd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cbd8:	667b      	str	r3, [r7, #100]	; 0x64
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbe4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbea:	e841 2300 	strex	r3, r2, [r1]
 800cbee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1e6      	bne.n	800cbc4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc00:	e853 3f00 	ldrex	r3, [r3]
 800cc04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc08:	f023 0301 	bic.w	r3, r3, #1
 800cc0c:	663b      	str	r3, [r7, #96]	; 0x60
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3308      	adds	r3, #8
 800cc14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc16:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc1e:	e841 2300 	strex	r3, r2, [r1]
 800cc22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1e5      	bne.n	800cbf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2220      	movs	r2, #32
 800cc2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2220      	movs	r2, #32
 800cc34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e067      	b.n	800cd12 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f003 0304 	and.w	r3, r3, #4
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d04f      	beq.n	800ccf0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	69db      	ldr	r3, [r3, #28]
 800cc56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc5e:	d147      	bne.n	800ccf0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc68:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	e853 3f00 	ldrex	r3, [r3]
 800cc76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	461a      	mov	r2, r3
 800cc86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc88:	637b      	str	r3, [r7, #52]	; 0x34
 800cc8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc90:	e841 2300 	strex	r3, r2, [r1]
 800cc94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1e6      	bne.n	800cc6a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3308      	adds	r3, #8
 800cca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	e853 3f00 	ldrex	r3, [r3]
 800ccaa:	613b      	str	r3, [r7, #16]
   return(result);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	f023 0301 	bic.w	r3, r3, #1
 800ccb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	3308      	adds	r3, #8
 800ccba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccbc:	623a      	str	r2, [r7, #32]
 800ccbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc0:	69f9      	ldr	r1, [r7, #28]
 800ccc2:	6a3a      	ldr	r2, [r7, #32]
 800ccc4:	e841 2300 	strex	r3, r2, [r1]
 800ccc8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1e5      	bne.n	800cc9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2220      	movs	r2, #32
 800ccda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2220      	movs	r2, #32
 800cce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ccec:	2303      	movs	r3, #3
 800ccee:	e010      	b.n	800cd12 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	69da      	ldr	r2, [r3, #28]
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	4013      	ands	r3, r2
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	bf0c      	ite	eq
 800cd00:	2301      	moveq	r3, #1
 800cd02:	2300      	movne	r3, #0
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	461a      	mov	r2, r3
 800cd08:	79fb      	ldrb	r3, [r7, #7]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	f43f af4a 	beq.w	800cba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3770      	adds	r7, #112	; 0x70
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b087      	sub	sp, #28
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd30:	683a      	ldr	r2, [r7, #0]
 800cd32:	6812      	ldr	r2, [r2, #0]
 800cd34:	f023 0101 	bic.w	r1, r3, #1
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	2b08      	cmp	r3, #8
 800cd44:	d102      	bne.n	800cd4c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800cd46:	2340      	movs	r3, #64	; 0x40
 800cd48:	617b      	str	r3, [r7, #20]
 800cd4a:	e001      	b.n	800cd50 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800cd5c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800cd62:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800cd68:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800cd6e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800cd74:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800cd7a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800cd80:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800cd86:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800cd8c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800cd92:	4313      	orrs	r3, r2
 800cd94:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda4:	693a      	ldr	r2, [r7, #16]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800cdb4:	4b20      	ldr	r3, [pc, #128]	; (800ce38 <FMC_NORSRAM_Init+0x11c>)
 800cdb6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdbe:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdc6:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800cdce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	43db      	mvns	r3, r3
 800cdde:	ea02 0103 	and.w	r1, r2, r3
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	4319      	orrs	r1, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdf8:	d10c      	bne.n	800ce14 <FMC_NORSRAM_Init+0xf8>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d008      	beq.n	800ce14 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d006      	beq.n	800ce2a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce24:	431a      	orrs	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800ce2a:	2300      	movs	r3, #0
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	371c      	adds	r7, #28
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	0008fb7f 	.word	0x0008fb7f

0800ce3c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b087      	sub	sp, #28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce52:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	011b      	lsls	r3, r3, #4
 800ce60:	431a      	orrs	r2, r3
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	431a      	orrs	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	041b      	lsls	r3, r3, #16
 800ce70:	431a      	orrs	r2, r3
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	051b      	lsls	r3, r3, #20
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	3b02      	subs	r3, #2
 800ce82:	061b      	lsls	r3, r3, #24
 800ce84:	431a      	orrs	r2, r3
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	69db      	ldr	r3, [r3, #28]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	3201      	adds	r2, #1
 800ce90:	4319      	orrs	r1, r3
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cea4:	d113      	bne.n	800cece <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ceae:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	051b      	lsls	r3, r3, #20
 800ceb8:	697a      	ldr	r2, [r7, #20]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	431a      	orrs	r2, r3
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	371c      	adds	r7, #28
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cef0:	d11d      	bne.n	800cf2e <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cefa:	4b13      	ldr	r3, [pc, #76]	; (800cf48 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800cefc:	4013      	ands	r3, r2
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	6811      	ldr	r1, [r2, #0]
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	6852      	ldr	r2, [r2, #4]
 800cf06:	0112      	lsls	r2, r2, #4
 800cf08:	4311      	orrs	r1, r2
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	6892      	ldr	r2, [r2, #8]
 800cf0e:	0212      	lsls	r2, r2, #8
 800cf10:	4311      	orrs	r1, r2
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	69d2      	ldr	r2, [r2, #28]
 800cf16:	4311      	orrs	r1, r2
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	6912      	ldr	r2, [r2, #16]
 800cf1c:	0412      	lsls	r2, r2, #16
 800cf1e:	430a      	orrs	r2, r1
 800cf20:	ea43 0102 	orr.w	r1, r3, r2
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cf2c:	e005      	b.n	800cf3a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800cf36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3714      	adds	r7, #20
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	cff00000 	.word	0xcff00000

0800cf4c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	b480      	push	{r7}
 800cf50:	b085      	sub	sp, #20
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	f107 001c 	add.w	r0, r7, #28
 800cf5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800cf62:	6a3b      	ldr	r3, [r7, #32]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800cf6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800cf6e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cf72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cf76:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cf7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cf8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	431a      	orrs	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	b004      	add	sp, #16
 800cfa4:	4770      	bx	lr

0800cfa6 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b083      	sub	sp, #12
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2203      	movs	r2, #3
 800cfcc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cfce:	2002      	movs	r0, #2
 800cfd0:	f7f7 ff18 	bl	8004e04 <HAL_Delay>

  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cfde:	b480      	push	{r7}
 800cfe0:	b083      	sub	sp, #12
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 0303 	and.w	r3, r3, #3
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b085      	sub	sp, #20
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d018:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d01e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d024:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	4313      	orrs	r3, r2
 800d02a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d034:	f023 030f 	bic.w	r3, r3, #15
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	b2db      	uxtb	r3, r3
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3314      	adds	r3, #20
 800d076:	461a      	mov	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	4413      	add	r3, r2
 800d07c:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3714      	adds	r7, #20
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d08e:	b480      	push	{r7}
 800d090:	b085      	sub	sp, #20
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d098:	2300      	movs	r3, #0
 800d09a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0b4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d0ba:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d0c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d0d8:	2300      	movs	r3, #0

}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3714      	adds	r7, #20
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b088      	sub	sp, #32
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0f8:	2340      	movs	r3, #64	; 0x40
 800d0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d106:	f107 0308 	add.w	r3, r7, #8
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff ff74 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d112:	f241 3288 	movw	r2, #5000	; 0x1388
 800d116:	2110      	movs	r1, #16
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f94d 	bl	800d3b8 <SDMMC_GetCmdResp1>
 800d11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d120:	69fb      	ldr	r3, [r7, #28]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3720      	adds	r7, #32
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b08a      	sub	sp, #40	; 0x28
 800d12e:	af00      	add	r7, sp, #0
 800d130:	60f8      	str	r0, [r7, #12]
 800d132:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d13a:	2307      	movs	r3, #7
 800d13c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d13e:	2340      	movs	r3, #64	; 0x40
 800d140:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d142:	2300      	movs	r3, #0
 800d144:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d14a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d14c:	f107 0310 	add.w	r3, r7, #16
 800d150:	4619      	mov	r1, r3
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7ff ff51 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d158:	f241 3288 	movw	r2, #5000	; 0x1388
 800d15c:	2107      	movs	r1, #7
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f000 f92a 	bl	800d3b8 <SDMMC_GetCmdResp1>
 800d164:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3728      	adds	r7, #40	; 0x28
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b088      	sub	sp, #32
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d178:	2300      	movs	r3, #0
 800d17a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d17c:	2300      	movs	r3, #0
 800d17e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d180:	2300      	movs	r3, #0
 800d182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d184:	2300      	movs	r3, #0
 800d186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d18c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff ff30 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fb44 	bl	800d828 <SDMMC_GetCmdError>
 800d1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1a2:	69fb      	ldr	r3, [r7, #28]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3720      	adds	r7, #32
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b088      	sub	sp, #32
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d1b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d1ba:	2308      	movs	r3, #8
 800d1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1be:	2340      	movs	r3, #64	; 0x40
 800d1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1cc:	f107 0308 	add.w	r3, r7, #8
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff ff11 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 fad7 	bl	800d78c <SDMMC_GetCmdResp7>
 800d1de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1e0:	69fb      	ldr	r3, [r7, #28]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3720      	adds	r7, #32
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b088      	sub	sp, #32
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d1f8:	2337      	movs	r3, #55	; 0x37
 800d1fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1fc:	2340      	movs	r3, #64	; 0x40
 800d1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d200:	2300      	movs	r3, #0
 800d202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d20a:	f107 0308 	add.w	r3, r7, #8
 800d20e:	4619      	mov	r1, r3
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff fef2 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d216:	f241 3288 	movw	r2, #5000	; 0x1388
 800d21a:	2137      	movs	r1, #55	; 0x37
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f8cb 	bl	800d3b8 <SDMMC_GetCmdResp1>
 800d222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d224:	69fb      	ldr	r3, [r7, #28]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3720      	adds	r7, #32
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b088      	sub	sp, #32
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d23e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d242:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d244:	2329      	movs	r3, #41	; 0x29
 800d246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d248:	2340      	movs	r3, #64	; 0x40
 800d24a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d24c:	2300      	movs	r3, #0
 800d24e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d254:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d256:	f107 0308 	add.w	r3, r7, #8
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7ff fecc 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f9de 	bl	800d624 <SDMMC_GetCmdResp3>
 800d268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d26a:	69fb      	ldr	r3, [r7, #28]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3720      	adds	r7, #32
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b088      	sub	sp, #32
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d282:	2306      	movs	r3, #6
 800d284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d286:	2340      	movs	r3, #64	; 0x40
 800d288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d28a:	2300      	movs	r3, #0
 800d28c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d294:	f107 0308 	add.w	r3, r7, #8
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff fead 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2a4:	2106      	movs	r1, #6
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 f886 	bl	800d3b8 <SDMMC_GetCmdResp1>
 800d2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2ae:	69fb      	ldr	r3, [r7, #28]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3720      	adds	r7, #32
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b088      	sub	sp, #32
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d2c4:	2333      	movs	r3, #51	; 0x33
 800d2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2c8:	2340      	movs	r3, #64	; 0x40
 800d2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2d6:	f107 0308 	add.w	r3, r7, #8
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff fe8c 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e6:	2133      	movs	r1, #51	; 0x33
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f865 	bl	800d3b8 <SDMMC_GetCmdResp1>
 800d2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2f0:	69fb      	ldr	r3, [r7, #28]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b088      	sub	sp, #32
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d302:	2300      	movs	r3, #0
 800d304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d306:	2302      	movs	r3, #2
 800d308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d30a:	23c0      	movs	r3, #192	; 0xc0
 800d30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d30e:	2300      	movs	r3, #0
 800d310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d318:	f107 0308 	add.w	r3, r7, #8
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff fe6b 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f935 	bl	800d594 <SDMMC_GetCmdResp2>
 800d32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d32c:	69fb      	ldr	r3, [r7, #28]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3720      	adds	r7, #32
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b088      	sub	sp, #32
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d344:	2309      	movs	r3, #9
 800d346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d348:	23c0      	movs	r3, #192	; 0xc0
 800d34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d34c:	2300      	movs	r3, #0
 800d34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d356:	f107 0308 	add.w	r3, r7, #8
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff fe4c 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f916 	bl	800d594 <SDMMC_GetCmdResp2>
 800d368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d36a:	69fb      	ldr	r3, [r7, #28]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3720      	adds	r7, #32
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b088      	sub	sp, #32
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d37e:	2300      	movs	r3, #0
 800d380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d382:	2303      	movs	r3, #3
 800d384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d386:	2340      	movs	r3, #64	; 0x40
 800d388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d38a:	2300      	movs	r3, #0
 800d38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d394:	f107 0308 	add.w	r3, r7, #8
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff fe2d 	bl	800cffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d3a0:	683a      	ldr	r2, [r7, #0]
 800d3a2:	2103      	movs	r1, #3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 f97b 	bl	800d6a0 <SDMMC_GetCmdResp6>
 800d3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3720      	adds	r7, #32
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
	...

0800d3b8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3c6:	4b70      	ldr	r3, [pc, #448]	; (800d588 <SDMMC_GetCmdResp1+0x1d0>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a70      	ldr	r2, [pc, #448]	; (800d58c <SDMMC_GetCmdResp1+0x1d4>)
 800d3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d0:	0a5a      	lsrs	r2, r3, #9
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	fb02 f303 	mul.w	r3, r2, r3
 800d3d8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	1e5a      	subs	r2, r3, #1
 800d3de:	61fa      	str	r2, [r7, #28]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d102      	bne.n	800d3ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3e8:	e0c9      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ee:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d0ef      	beq.n	800d3da <SDMMC_GetCmdResp1+0x22>
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1ea      	bne.n	800d3da <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d408:	f003 0304 	and.w	r3, r3, #4
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d004      	beq.n	800d41a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2204      	movs	r2, #4
 800d414:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d416:	2304      	movs	r3, #4
 800d418:	e0b1      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	2b00      	cmp	r3, #0
 800d424:	d004      	beq.n	800d430 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2201      	movs	r2, #1
 800d42a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e0a6      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	22c5      	movs	r2, #197	; 0xc5
 800d434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7ff fe09 	bl	800d04e <SDMMC_GetCommandResponse>
 800d43c:	4603      	mov	r3, r0
 800d43e:	461a      	mov	r2, r3
 800d440:	7afb      	ldrb	r3, [r7, #11]
 800d442:	4293      	cmp	r3, r2
 800d444:	d001      	beq.n	800d44a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d446:	2301      	movs	r3, #1
 800d448:	e099      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d44a:	2100      	movs	r1, #0
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f7ff fe0b 	bl	800d068 <SDMMC_GetResponse>
 800d452:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	4b4e      	ldr	r3, [pc, #312]	; (800d590 <SDMMC_GetCmdResp1+0x1d8>)
 800d458:	4013      	ands	r3, r2
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d45e:	2300      	movs	r3, #0
 800d460:	e08d      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	2b00      	cmp	r3, #0
 800d466:	da02      	bge.n	800d46e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d46c:	e087      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d001      	beq.n	800d47c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d478:	2340      	movs	r3, #64	; 0x40
 800d47a:	e080      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d486:	2380      	movs	r3, #128	; 0x80
 800d488:	e079      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d490:	2b00      	cmp	r3, #0
 800d492:	d002      	beq.n	800d49a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d498:	e071      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d4a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4a8:	e069      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4b8:	e061      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d002      	beq.n	800d4ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4c8:	e059      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4d8:	e051      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d002      	beq.n	800d4ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4e8:	e049      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d002      	beq.n	800d4fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d4f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d4f8:	e041      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d508:	e039      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d510:	2b00      	cmp	r3, #0
 800d512:	d002      	beq.n	800d51a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d518:	e031      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d524:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d528:	e029      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d534:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d538:	e021      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d544:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d548:	e019      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d554:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d558:	e011      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d568:	e009      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	f003 0308 	and.w	r3, r3, #8
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d574:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d578:	e001      	b.n	800d57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d57a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3720      	adds	r7, #32
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	20000000 	.word	0x20000000
 800d58c:	10624dd3 	.word	0x10624dd3
 800d590:	fdffe008 	.word	0xfdffe008

0800d594 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d59c:	4b1f      	ldr	r3, [pc, #124]	; (800d61c <SDMMC_GetCmdResp2+0x88>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a1f      	ldr	r2, [pc, #124]	; (800d620 <SDMMC_GetCmdResp2+0x8c>)
 800d5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a6:	0a5b      	lsrs	r3, r3, #9
 800d5a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5ac:	fb02 f303 	mul.w	r3, r2, r3
 800d5b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	1e5a      	subs	r2, r3, #1
 800d5b6:	60fa      	str	r2, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d102      	bne.n	800d5c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5c0:	e026      	b.n	800d610 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d0ef      	beq.n	800d5b2 <SDMMC_GetCmdResp2+0x1e>
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1ea      	bne.n	800d5b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e0:	f003 0304 	and.w	r3, r3, #4
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d004      	beq.n	800d5f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2204      	movs	r2, #4
 800d5ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5ee:	2304      	movs	r3, #4
 800d5f0:	e00e      	b.n	800d610 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f6:	f003 0301 	and.w	r3, r3, #1
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d004      	beq.n	800d608 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d604:	2301      	movs	r3, #1
 800d606:	e003      	b.n	800d610 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	22c5      	movs	r2, #197	; 0xc5
 800d60c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3714      	adds	r7, #20
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	20000000 	.word	0x20000000
 800d620:	10624dd3 	.word	0x10624dd3

0800d624 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d62c:	4b1a      	ldr	r3, [pc, #104]	; (800d698 <SDMMC_GetCmdResp3+0x74>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a1a      	ldr	r2, [pc, #104]	; (800d69c <SDMMC_GetCmdResp3+0x78>)
 800d632:	fba2 2303 	umull	r2, r3, r2, r3
 800d636:	0a5b      	lsrs	r3, r3, #9
 800d638:	f241 3288 	movw	r2, #5000	; 0x1388
 800d63c:	fb02 f303 	mul.w	r3, r2, r3
 800d640:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	1e5a      	subs	r2, r3, #1
 800d646:	60fa      	str	r2, [r7, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d64c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d650:	e01b      	b.n	800d68a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d656:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0ef      	beq.n	800d642 <SDMMC_GetCmdResp3+0x1e>
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1ea      	bne.n	800d642 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d670:	f003 0304 	and.w	r3, r3, #4
 800d674:	2b00      	cmp	r3, #0
 800d676:	d004      	beq.n	800d682 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2204      	movs	r2, #4
 800d67c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d67e:	2304      	movs	r3, #4
 800d680:	e003      	b.n	800d68a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	22c5      	movs	r2, #197	; 0xc5
 800d686:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	20000000 	.word	0x20000000
 800d69c:	10624dd3 	.word	0x10624dd3

0800d6a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b088      	sub	sp, #32
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	607a      	str	r2, [r7, #4]
 800d6ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6ae:	4b35      	ldr	r3, [pc, #212]	; (800d784 <SDMMC_GetCmdResp6+0xe4>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a35      	ldr	r2, [pc, #212]	; (800d788 <SDMMC_GetCmdResp6+0xe8>)
 800d6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6b8:	0a5b      	lsrs	r3, r3, #9
 800d6ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6be:	fb02 f303 	mul.w	r3, r2, r3
 800d6c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	1e5a      	subs	r2, r3, #1
 800d6c8:	61fa      	str	r2, [r7, #28]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d102      	bne.n	800d6d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6d2:	e052      	b.n	800d77a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d0ef      	beq.n	800d6c4 <SDMMC_GetCmdResp6+0x24>
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d1ea      	bne.n	800d6c4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f2:	f003 0304 	and.w	r3, r3, #4
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d004      	beq.n	800d704 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2204      	movs	r2, #4
 800d6fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d700:	2304      	movs	r3, #4
 800d702:	e03a      	b.n	800d77a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2201      	movs	r2, #1
 800d714:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d716:	2301      	movs	r3, #1
 800d718:	e02f      	b.n	800d77a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f7ff fc97 	bl	800d04e <SDMMC_GetCommandResponse>
 800d720:	4603      	mov	r3, r0
 800d722:	461a      	mov	r2, r3
 800d724:	7afb      	ldrb	r3, [r7, #11]
 800d726:	4293      	cmp	r3, r2
 800d728:	d001      	beq.n	800d72e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d72a:	2301      	movs	r3, #1
 800d72c:	e025      	b.n	800d77a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	22c5      	movs	r2, #197	; 0xc5
 800d732:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d734:	2100      	movs	r1, #0
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f7ff fc96 	bl	800d068 <SDMMC_GetResponse>
 800d73c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d106      	bne.n	800d756 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	0c1b      	lsrs	r3, r3, #16
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d752:	2300      	movs	r3, #0
 800d754:	e011      	b.n	800d77a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d764:	e009      	b.n	800d77a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d774:	e001      	b.n	800d77a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3720      	adds	r7, #32
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	20000000 	.word	0x20000000
 800d788:	10624dd3 	.word	0x10624dd3

0800d78c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d794:	4b22      	ldr	r3, [pc, #136]	; (800d820 <SDMMC_GetCmdResp7+0x94>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a22      	ldr	r2, [pc, #136]	; (800d824 <SDMMC_GetCmdResp7+0x98>)
 800d79a:	fba2 2303 	umull	r2, r3, r2, r3
 800d79e:	0a5b      	lsrs	r3, r3, #9
 800d7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a4:	fb02 f303 	mul.w	r3, r2, r3
 800d7a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	1e5a      	subs	r2, r3, #1
 800d7ae:	60fa      	str	r2, [r7, #12]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d102      	bne.n	800d7ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7b8:	e02c      	b.n	800d814 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d0ef      	beq.n	800d7aa <SDMMC_GetCmdResp7+0x1e>
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1ea      	bne.n	800d7aa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d8:	f003 0304 	and.w	r3, r3, #4
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d004      	beq.n	800d7ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2204      	movs	r2, #4
 800d7e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7e6:	2304      	movs	r3, #4
 800d7e8:	e014      	b.n	800d814 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ee:	f003 0301 	and.w	r3, r3, #1
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d004      	beq.n	800d800 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e009      	b.n	800d814 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2240      	movs	r2, #64	; 0x40
 800d810:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d812:	2300      	movs	r3, #0

}
 800d814:	4618      	mov	r0, r3
 800d816:	3714      	adds	r7, #20
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr
 800d820:	20000000 	.word	0x20000000
 800d824:	10624dd3 	.word	0x10624dd3

0800d828 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d830:	4b11      	ldr	r3, [pc, #68]	; (800d878 <SDMMC_GetCmdError+0x50>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a11      	ldr	r2, [pc, #68]	; (800d87c <SDMMC_GetCmdError+0x54>)
 800d836:	fba2 2303 	umull	r2, r3, r2, r3
 800d83a:	0a5b      	lsrs	r3, r3, #9
 800d83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d840:	fb02 f303 	mul.w	r3, r2, r3
 800d844:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	1e5a      	subs	r2, r3, #1
 800d84a:	60fa      	str	r2, [r7, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d102      	bne.n	800d856 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d850:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d854:	e009      	b.n	800d86a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d0f1      	beq.n	800d846 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	22c5      	movs	r2, #197	; 0xc5
 800d866:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	20000000 	.word	0x20000000
 800d87c:	10624dd3 	.word	0x10624dd3

0800d880 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d880:	b084      	sub	sp, #16
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	f107 001c 	add.w	r0, r7, #28
 800d88e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f001 faf6 	bl	800ee90 <USB_CoreReset>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	639a      	str	r2, [r3, #56]	; 0x38
 800d8ba:	e005      	b.n	800d8c8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8d4:	b004      	add	sp, #16
 800d8d6:	4770      	bx	lr

0800d8d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d8e6:	79fb      	ldrb	r3, [r7, #7]
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	d165      	bne.n	800d9b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	4a3e      	ldr	r2, [pc, #248]	; (800d9e8 <USB_SetTurnaroundTime+0x110>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d906      	bls.n	800d902 <USB_SetTurnaroundTime+0x2a>
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	4a3d      	ldr	r2, [pc, #244]	; (800d9ec <USB_SetTurnaroundTime+0x114>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d202      	bcs.n	800d902 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d8fc:	230f      	movs	r3, #15
 800d8fe:	617b      	str	r3, [r7, #20]
 800d900:	e05c      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	4a39      	ldr	r2, [pc, #228]	; (800d9ec <USB_SetTurnaroundTime+0x114>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d306      	bcc.n	800d918 <USB_SetTurnaroundTime+0x40>
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	4a38      	ldr	r2, [pc, #224]	; (800d9f0 <USB_SetTurnaroundTime+0x118>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d202      	bcs.n	800d918 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d912:	230e      	movs	r3, #14
 800d914:	617b      	str	r3, [r7, #20]
 800d916:	e051      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	4a35      	ldr	r2, [pc, #212]	; (800d9f0 <USB_SetTurnaroundTime+0x118>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d306      	bcc.n	800d92e <USB_SetTurnaroundTime+0x56>
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	4a34      	ldr	r2, [pc, #208]	; (800d9f4 <USB_SetTurnaroundTime+0x11c>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d202      	bcs.n	800d92e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d928:	230d      	movs	r3, #13
 800d92a:	617b      	str	r3, [r7, #20]
 800d92c:	e046      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	4a30      	ldr	r2, [pc, #192]	; (800d9f4 <USB_SetTurnaroundTime+0x11c>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d306      	bcc.n	800d944 <USB_SetTurnaroundTime+0x6c>
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	4a2f      	ldr	r2, [pc, #188]	; (800d9f8 <USB_SetTurnaroundTime+0x120>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d802      	bhi.n	800d944 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d93e:	230c      	movs	r3, #12
 800d940:	617b      	str	r3, [r7, #20]
 800d942:	e03b      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	4a2c      	ldr	r2, [pc, #176]	; (800d9f8 <USB_SetTurnaroundTime+0x120>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d906      	bls.n	800d95a <USB_SetTurnaroundTime+0x82>
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	4a2b      	ldr	r2, [pc, #172]	; (800d9fc <USB_SetTurnaroundTime+0x124>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d802      	bhi.n	800d95a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d954:	230b      	movs	r3, #11
 800d956:	617b      	str	r3, [r7, #20]
 800d958:	e030      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	4a27      	ldr	r2, [pc, #156]	; (800d9fc <USB_SetTurnaroundTime+0x124>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d906      	bls.n	800d970 <USB_SetTurnaroundTime+0x98>
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	4a26      	ldr	r2, [pc, #152]	; (800da00 <USB_SetTurnaroundTime+0x128>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d802      	bhi.n	800d970 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d96a:	230a      	movs	r3, #10
 800d96c:	617b      	str	r3, [r7, #20]
 800d96e:	e025      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	4a23      	ldr	r2, [pc, #140]	; (800da00 <USB_SetTurnaroundTime+0x128>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d906      	bls.n	800d986 <USB_SetTurnaroundTime+0xae>
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	4a22      	ldr	r2, [pc, #136]	; (800da04 <USB_SetTurnaroundTime+0x12c>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d202      	bcs.n	800d986 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d980:	2309      	movs	r3, #9
 800d982:	617b      	str	r3, [r7, #20]
 800d984:	e01a      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	4a1e      	ldr	r2, [pc, #120]	; (800da04 <USB_SetTurnaroundTime+0x12c>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d306      	bcc.n	800d99c <USB_SetTurnaroundTime+0xc4>
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	4a1d      	ldr	r2, [pc, #116]	; (800da08 <USB_SetTurnaroundTime+0x130>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d802      	bhi.n	800d99c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d996:	2308      	movs	r3, #8
 800d998:	617b      	str	r3, [r7, #20]
 800d99a:	e00f      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	4a1a      	ldr	r2, [pc, #104]	; (800da08 <USB_SetTurnaroundTime+0x130>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d906      	bls.n	800d9b2 <USB_SetTurnaroundTime+0xda>
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	4a19      	ldr	r2, [pc, #100]	; (800da0c <USB_SetTurnaroundTime+0x134>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d202      	bcs.n	800d9b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d9ac:	2307      	movs	r3, #7
 800d9ae:	617b      	str	r3, [r7, #20]
 800d9b0:	e004      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d9b2:	2306      	movs	r3, #6
 800d9b4:	617b      	str	r3, [r7, #20]
 800d9b6:	e001      	b.n	800d9bc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d9b8:	2309      	movs	r3, #9
 800d9ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	68da      	ldr	r2, [r3, #12]
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	029b      	lsls	r3, r3, #10
 800d9d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d9da:	2300      	movs	r3, #0
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	371c      	adds	r7, #28
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr
 800d9e8:	00d8acbf 	.word	0x00d8acbf
 800d9ec:	00e4e1c0 	.word	0x00e4e1c0
 800d9f0:	00f42400 	.word	0x00f42400
 800d9f4:	01067380 	.word	0x01067380
 800d9f8:	011a499f 	.word	0x011a499f
 800d9fc:	01312cff 	.word	0x01312cff
 800da00:	014ca43f 	.word	0x014ca43f
 800da04:	016e3600 	.word	0x016e3600
 800da08:	01a6ab1f 	.word	0x01a6ab1f
 800da0c:	01e84800 	.word	0x01e84800

0800da10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	f043 0201 	orr.w	r2, r3, #1
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da32:	b480      	push	{r7}
 800da34:	b083      	sub	sp, #12
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	f023 0201 	bic.w	r2, r3, #1
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	460b      	mov	r3, r1
 800da5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800da60:	2300      	movs	r3, #0
 800da62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800da70:	78fb      	ldrb	r3, [r7, #3]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d115      	bne.n	800daa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800da82:	2001      	movs	r0, #1
 800da84:	f7f7 f9be 	bl	8004e04 <HAL_Delay>
      ms++;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	3301      	adds	r3, #1
 800da8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f001 f985 	bl	800ed9e <USB_GetMode>
 800da94:	4603      	mov	r3, r0
 800da96:	2b01      	cmp	r3, #1
 800da98:	d01e      	beq.n	800dad8 <USB_SetCurrentMode+0x84>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2b31      	cmp	r3, #49	; 0x31
 800da9e:	d9f0      	bls.n	800da82 <USB_SetCurrentMode+0x2e>
 800daa0:	e01a      	b.n	800dad8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800daa2:	78fb      	ldrb	r3, [r7, #3]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d115      	bne.n	800dad4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dab4:	2001      	movs	r0, #1
 800dab6:	f7f7 f9a5 	bl	8004e04 <HAL_Delay>
      ms++;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	3301      	adds	r3, #1
 800dabe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f001 f96c 	bl	800ed9e <USB_GetMode>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d005      	beq.n	800dad8 <USB_SetCurrentMode+0x84>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b31      	cmp	r3, #49	; 0x31
 800dad0:	d9f0      	bls.n	800dab4 <USB_SetCurrentMode+0x60>
 800dad2:	e001      	b.n	800dad8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dad4:	2301      	movs	r3, #1
 800dad6:	e005      	b.n	800dae4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2b32      	cmp	r3, #50	; 0x32
 800dadc:	d101      	bne.n	800dae2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dade:	2301      	movs	r3, #1
 800dae0:	e000      	b.n	800dae4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800daec:	b084      	sub	sp, #16
 800daee:	b580      	push	{r7, lr}
 800daf0:	b086      	sub	sp, #24
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db06:	2300      	movs	r3, #0
 800db08:	613b      	str	r3, [r7, #16]
 800db0a:	e009      	b.n	800db20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	3340      	adds	r3, #64	; 0x40
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4413      	add	r3, r2
 800db16:	2200      	movs	r2, #0
 800db18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	3301      	adds	r3, #1
 800db1e:	613b      	str	r3, [r7, #16]
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	2b0e      	cmp	r3, #14
 800db24:	d9f2      	bls.n	800db0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d11c      	bne.n	800db66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db3a:	f043 0302 	orr.w	r3, r3, #2
 800db3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	601a      	str	r2, [r3, #0]
 800db64:	e005      	b.n	800db72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db78:	461a      	mov	r2, r3
 800db7a:	2300      	movs	r3, #0
 800db7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db84:	4619      	mov	r1, r3
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db8c:	461a      	mov	r2, r3
 800db8e:	680b      	ldr	r3, [r1, #0]
 800db90:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800db92:	2103      	movs	r1, #3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f959 	bl	800de4c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800db9a:	2110      	movs	r1, #16
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 f8f1 	bl	800dd84 <USB_FlushTxFifo>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 f91d 	bl	800ddec <USB_FlushRxFifo>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbce:	461a      	mov	r2, r3
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbda:	461a      	mov	r2, r3
 800dbdc:	2300      	movs	r3, #0
 800dbde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	613b      	str	r3, [r7, #16]
 800dbe4:	e043      	b.n	800dc6e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	015a      	lsls	r2, r3, #5
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	4413      	add	r3, r2
 800dbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbfc:	d118      	bne.n	800dc30 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10a      	bne.n	800dc1a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	015a      	lsls	r2, r3, #5
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc10:	461a      	mov	r2, r3
 800dc12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc16:	6013      	str	r3, [r2, #0]
 800dc18:	e013      	b.n	800dc42 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	015a      	lsls	r2, r3, #5
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	4413      	add	r3, r2
 800dc22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc26:	461a      	mov	r2, r3
 800dc28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dc2c:	6013      	str	r3, [r2, #0]
 800dc2e:	e008      	b.n	800dc42 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	015a      	lsls	r2, r3, #5
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4413      	add	r3, r2
 800dc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	2300      	movs	r3, #0
 800dc40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	015a      	lsls	r2, r3, #5
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	4413      	add	r3, r2
 800dc4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc4e:	461a      	mov	r2, r3
 800dc50:	2300      	movs	r3, #0
 800dc52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	015a      	lsls	r2, r3, #5
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc60:	461a      	mov	r2, r3
 800dc62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dc66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	613b      	str	r3, [r7, #16]
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc70:	693a      	ldr	r2, [r7, #16]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d3b7      	bcc.n	800dbe6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc76:	2300      	movs	r3, #0
 800dc78:	613b      	str	r3, [r7, #16]
 800dc7a:	e043      	b.n	800dd04 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc92:	d118      	bne.n	800dcc6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10a      	bne.n	800dcb0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	015a      	lsls	r2, r3, #5
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	4413      	add	r3, r2
 800dca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dca6:	461a      	mov	r2, r3
 800dca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcac:	6013      	str	r3, [r2, #0]
 800dcae:	e013      	b.n	800dcd8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	015a      	lsls	r2, r3, #5
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dcc2:	6013      	str	r3, [r2, #0]
 800dcc4:	e008      	b.n	800dcd8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	015a      	lsls	r2, r3, #5
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	4413      	add	r3, r2
 800dcce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	015a      	lsls	r2, r3, #5
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	4413      	add	r3, r2
 800dce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce4:	461a      	mov	r2, r3
 800dce6:	2300      	movs	r3, #0
 800dce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	015a      	lsls	r2, r3, #5
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dcfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	3301      	adds	r3, #1
 800dd02:	613b      	str	r3, [r7, #16]
 800dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd06:	693a      	ldr	r2, [r7, #16]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d3b7      	bcc.n	800dc7c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dd2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	699b      	ldr	r3, [r3, #24]
 800dd32:	f043 0210 	orr.w	r2, r3, #16
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	699a      	ldr	r2, [r3, #24]
 800dd3e:	4b10      	ldr	r3, [pc, #64]	; (800dd80 <USB_DevInit+0x294>)
 800dd40:	4313      	orrs	r3, r2
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d005      	beq.n	800dd58 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	f043 0208 	orr.w	r2, r3, #8
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dd58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d107      	bne.n	800dd6e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd66:	f043 0304 	orr.w	r3, r3, #4
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dd6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3718      	adds	r7, #24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd7a:	b004      	add	sp, #16
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	803c3800 	.word	0x803c3800

0800dd84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3301      	adds	r3, #1
 800dd96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	4a13      	ldr	r2, [pc, #76]	; (800dde8 <USB_FlushTxFifo+0x64>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d901      	bls.n	800dda4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dda0:	2303      	movs	r3, #3
 800dda2:	e01b      	b.n	800dddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	daf2      	bge.n	800dd92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ddac:	2300      	movs	r3, #0
 800ddae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	019b      	lsls	r3, r3, #6
 800ddb4:	f043 0220 	orr.w	r2, r3, #32
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	4a08      	ldr	r2, [pc, #32]	; (800dde8 <USB_FlushTxFifo+0x64>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d901      	bls.n	800ddce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	e006      	b.n	800dddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	f003 0320 	and.w	r3, r3, #32
 800ddd6:	2b20      	cmp	r3, #32
 800ddd8:	d0f0      	beq.n	800ddbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3714      	adds	r7, #20
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	00030d40 	.word	0x00030d40

0800ddec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	4a11      	ldr	r2, [pc, #68]	; (800de48 <USB_FlushRxFifo+0x5c>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d901      	bls.n	800de0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800de06:	2303      	movs	r3, #3
 800de08:	e018      	b.n	800de3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	daf2      	bge.n	800ddf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800de12:	2300      	movs	r3, #0
 800de14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2210      	movs	r2, #16
 800de1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3301      	adds	r3, #1
 800de20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	4a08      	ldr	r2, [pc, #32]	; (800de48 <USB_FlushRxFifo+0x5c>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d901      	bls.n	800de2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800de2a:	2303      	movs	r3, #3
 800de2c:	e006      	b.n	800de3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	f003 0310 	and.w	r3, r3, #16
 800de36:	2b10      	cmp	r3, #16
 800de38:	d0f0      	beq.n	800de1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	00030d40 	.word	0x00030d40

0800de4c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	78fb      	ldrb	r3, [r7, #3]
 800de66:	68f9      	ldr	r1, [r7, #12]
 800de68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de6c:	4313      	orrs	r3, r2
 800de6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800de7e:	b480      	push	{r7}
 800de80:	b087      	sub	sp, #28
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	f003 0306 	and.w	r3, r3, #6
 800de96:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	d002      	beq.n	800dea4 <USB_GetDevSpeed+0x26>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b06      	cmp	r3, #6
 800dea2:	d102      	bne.n	800deaa <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dea4:	2302      	movs	r3, #2
 800dea6:	75fb      	strb	r3, [r7, #23]
 800dea8:	e001      	b.n	800deae <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800deaa:	230f      	movs	r3, #15
 800deac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800deae:	7dfb      	ldrb	r3, [r7, #23]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	371c      	adds	r7, #28
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	785b      	ldrb	r3, [r3, #1]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d13a      	bne.n	800df4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dede:	69da      	ldr	r2, [r3, #28]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	f003 030f 	and.w	r3, r3, #15
 800dee8:	2101      	movs	r1, #1
 800deea:	fa01 f303 	lsl.w	r3, r1, r3
 800deee:	b29b      	uxth	r3, r3
 800def0:	68f9      	ldr	r1, [r7, #12]
 800def2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800def6:	4313      	orrs	r3, r2
 800def8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	015a      	lsls	r2, r3, #5
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4413      	add	r3, r2
 800df02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d155      	bne.n	800dfbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	015a      	lsls	r2, r3, #5
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	4413      	add	r3, r2
 800df18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	791b      	ldrb	r3, [r3, #4]
 800df2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	059b      	lsls	r3, r3, #22
 800df32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df34:	4313      	orrs	r3, r2
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	0151      	lsls	r1, r2, #5
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	440a      	add	r2, r1
 800df3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	e036      	b.n	800dfbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df54:	69da      	ldr	r2, [r3, #28]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	f003 030f 	and.w	r3, r3, #15
 800df5e:	2101      	movs	r1, #1
 800df60:	fa01 f303 	lsl.w	r3, r1, r3
 800df64:	041b      	lsls	r3, r3, #16
 800df66:	68f9      	ldr	r1, [r7, #12]
 800df68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df6c:	4313      	orrs	r3, r2
 800df6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	015a      	lsls	r2, r3, #5
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	4413      	add	r3, r2
 800df78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df82:	2b00      	cmp	r3, #0
 800df84:	d11a      	bne.n	800dfbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	015a      	lsls	r2, r3, #5
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	4413      	add	r3, r2
 800df8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	791b      	ldrb	r3, [r3, #4]
 800dfa0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dfa2:	430b      	orrs	r3, r1
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	0151      	lsls	r1, r2, #5
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	440a      	add	r2, r1
 800dfae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
	...

0800dfcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	785b      	ldrb	r3, [r3, #1]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d161      	bne.n	800e0ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	015a      	lsls	r2, r3, #5
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	4413      	add	r3, r2
 800dff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dffe:	d11f      	bne.n	800e040 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	015a      	lsls	r2, r3, #5
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	4413      	add	r3, r2
 800e008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	0151      	lsls	r1, r2, #5
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	440a      	add	r2, r1
 800e016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e01a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e01e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	015a      	lsls	r2, r3, #5
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	4413      	add	r3, r2
 800e028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	68ba      	ldr	r2, [r7, #8]
 800e030:	0151      	lsls	r1, r2, #5
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	440a      	add	r2, r1
 800e036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e03a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e03e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	f003 030f 	and.w	r3, r3, #15
 800e050:	2101      	movs	r1, #1
 800e052:	fa01 f303 	lsl.w	r3, r1, r3
 800e056:	b29b      	uxth	r3, r3
 800e058:	43db      	mvns	r3, r3
 800e05a:	68f9      	ldr	r1, [r7, #12]
 800e05c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e060:	4013      	ands	r3, r2
 800e062:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e06a:	69da      	ldr	r2, [r3, #28]
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	f003 030f 	and.w	r3, r3, #15
 800e074:	2101      	movs	r1, #1
 800e076:	fa01 f303 	lsl.w	r3, r1, r3
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	43db      	mvns	r3, r3
 800e07e:	68f9      	ldr	r1, [r7, #12]
 800e080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e084:	4013      	ands	r3, r2
 800e086:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	015a      	lsls	r2, r3, #5
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	4413      	add	r3, r2
 800e090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	0159      	lsls	r1, r3, #5
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	440b      	add	r3, r1
 800e09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	4b35      	ldr	r3, [pc, #212]	; (800e17c <USB_DeactivateEndpoint+0x1b0>)
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	600b      	str	r3, [r1, #0]
 800e0aa:	e060      	b.n	800e16e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	015a      	lsls	r2, r3, #5
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0c2:	d11f      	bne.n	800e104 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	015a      	lsls	r2, r3, #5
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	0151      	lsls	r1, r2, #5
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	440a      	add	r2, r1
 800e0da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e0e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	015a      	lsls	r2, r3, #5
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	0151      	lsls	r1, r2, #5
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	440a      	add	r2, r1
 800e0fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e102:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e10a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	f003 030f 	and.w	r3, r3, #15
 800e114:	2101      	movs	r1, #1
 800e116:	fa01 f303 	lsl.w	r3, r1, r3
 800e11a:	041b      	lsls	r3, r3, #16
 800e11c:	43db      	mvns	r3, r3
 800e11e:	68f9      	ldr	r1, [r7, #12]
 800e120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e124:	4013      	ands	r3, r2
 800e126:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e12e:	69da      	ldr	r2, [r3, #28]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	f003 030f 	and.w	r3, r3, #15
 800e138:	2101      	movs	r1, #1
 800e13a:	fa01 f303 	lsl.w	r3, r1, r3
 800e13e:	041b      	lsls	r3, r3, #16
 800e140:	43db      	mvns	r3, r3
 800e142:	68f9      	ldr	r1, [r7, #12]
 800e144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e148:	4013      	ands	r3, r2
 800e14a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	015a      	lsls	r2, r3, #5
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	4413      	add	r3, r2
 800e154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	0159      	lsls	r1, r3, #5
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	440b      	add	r3, r1
 800e162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e166:	4619      	mov	r1, r3
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <USB_DeactivateEndpoint+0x1b4>)
 800e16a:	4013      	ands	r3, r2
 800e16c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	ec337800 	.word	0xec337800
 800e180:	eff37800 	.word	0xeff37800

0800e184 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	785b      	ldrb	r3, [r3, #1]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	f040 810a 	bne.w	800e3b6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d132      	bne.n	800e210 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	015a      	lsls	r2, r3, #5
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	693a      	ldr	r2, [r7, #16]
 800e1ba:	0151      	lsls	r1, r2, #5
 800e1bc:	697a      	ldr	r2, [r7, #20]
 800e1be:	440a      	add	r2, r1
 800e1c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e1c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e1cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	015a      	lsls	r2, r3, #5
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	693a      	ldr	r2, [r7, #16]
 800e1de:	0151      	lsls	r1, r2, #5
 800e1e0:	697a      	ldr	r2, [r7, #20]
 800e1e2:	440a      	add	r2, r1
 800e1e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	015a      	lsls	r2, r3, #5
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	0151      	lsls	r1, r2, #5
 800e200:	697a      	ldr	r2, [r7, #20]
 800e202:	440a      	add	r2, r1
 800e204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e208:	0cdb      	lsrs	r3, r3, #19
 800e20a:	04db      	lsls	r3, r3, #19
 800e20c:	6113      	str	r3, [r2, #16]
 800e20e:	e074      	b.n	800e2fa <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	015a      	lsls	r2, r3, #5
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	4413      	add	r3, r2
 800e218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	0151      	lsls	r1, r2, #5
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	440a      	add	r2, r1
 800e226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e22a:	0cdb      	lsrs	r3, r3, #19
 800e22c:	04db      	lsls	r3, r3, #19
 800e22e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	015a      	lsls	r2, r3, #5
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	4413      	add	r3, r2
 800e238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	693a      	ldr	r2, [r7, #16]
 800e240:	0151      	lsls	r1, r2, #5
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	440a      	add	r2, r1
 800e246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e24a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e24e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	015a      	lsls	r2, r3, #5
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	4413      	add	r3, r2
 800e25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e260:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	6999      	ldr	r1, [r3, #24]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	440b      	add	r3, r1
 800e26c:	1e59      	subs	r1, r3, #1
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	fbb1 f3f3 	udiv	r3, r1, r3
 800e276:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e278:	4b9e      	ldr	r3, [pc, #632]	; (800e4f4 <USB_EPStartXfer+0x370>)
 800e27a:	400b      	ands	r3, r1
 800e27c:	6939      	ldr	r1, [r7, #16]
 800e27e:	0148      	lsls	r0, r1, #5
 800e280:	6979      	ldr	r1, [r7, #20]
 800e282:	4401      	add	r1, r0
 800e284:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e288:	4313      	orrs	r3, r2
 800e28a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	015a      	lsls	r2, r3, #5
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	4413      	add	r3, r2
 800e294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e298:	691a      	ldr	r2, [r3, #16]
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	699b      	ldr	r3, [r3, #24]
 800e29e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2a2:	6939      	ldr	r1, [r7, #16]
 800e2a4:	0148      	lsls	r0, r1, #5
 800e2a6:	6979      	ldr	r1, [r7, #20]
 800e2a8:	4401      	add	r1, r0
 800e2aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	791b      	ldrb	r3, [r3, #4]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d11f      	bne.n	800e2fa <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	015a      	lsls	r2, r3, #5
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2c6:	691b      	ldr	r3, [r3, #16]
 800e2c8:	693a      	ldr	r2, [r7, #16]
 800e2ca:	0151      	lsls	r1, r2, #5
 800e2cc:	697a      	ldr	r2, [r7, #20]
 800e2ce:	440a      	add	r2, r1
 800e2d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e2d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	693a      	ldr	r2, [r7, #16]
 800e2ea:	0151      	lsls	r1, r2, #5
 800e2ec:	697a      	ldr	r2, [r7, #20]
 800e2ee:	440a      	add	r2, r1
 800e2f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e2f8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	015a      	lsls	r2, r3, #5
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	4413      	add	r3, r2
 800e302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	0151      	lsls	r1, r2, #5
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	440a      	add	r2, r1
 800e310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e314:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e318:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	791b      	ldrb	r3, [r3, #4]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d015      	beq.n	800e34e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	699b      	ldr	r3, [r3, #24]
 800e326:	2b00      	cmp	r3, #0
 800e328:	f000 8106 	beq.w	800e538 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	f003 030f 	and.w	r3, r3, #15
 800e33c:	2101      	movs	r1, #1
 800e33e:	fa01 f303 	lsl.w	r3, r1, r3
 800e342:	6979      	ldr	r1, [r7, #20]
 800e344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e348:	4313      	orrs	r3, r2
 800e34a:	634b      	str	r3, [r1, #52]	; 0x34
 800e34c:	e0f4      	b.n	800e538 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d110      	bne.n	800e380 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	015a      	lsls	r2, r3, #5
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	4413      	add	r3, r2
 800e366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	693a      	ldr	r2, [r7, #16]
 800e36e:	0151      	lsls	r1, r2, #5
 800e370:	697a      	ldr	r2, [r7, #20]
 800e372:	440a      	add	r2, r1
 800e374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e378:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e37c:	6013      	str	r3, [r2, #0]
 800e37e:	e00f      	b.n	800e3a0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	015a      	lsls	r2, r3, #5
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	4413      	add	r3, r2
 800e388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	693a      	ldr	r2, [r7, #16]
 800e390:	0151      	lsls	r1, r2, #5
 800e392:	697a      	ldr	r2, [r7, #20]
 800e394:	440a      	add	r2, r1
 800e396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e39a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e39e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	6919      	ldr	r1, [r3, #16]
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	781a      	ldrb	r2, [r3, #0]
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	699b      	ldr	r3, [r3, #24]
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 fa94 	bl	800e8dc <USB_WritePacket>
 800e3b4:	e0c0      	b.n	800e538 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	015a      	lsls	r2, r3, #5
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	0151      	lsls	r1, r2, #5
 800e3c8:	697a      	ldr	r2, [r7, #20]
 800e3ca:	440a      	add	r2, r1
 800e3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3d0:	0cdb      	lsrs	r3, r3, #19
 800e3d2:	04db      	lsls	r3, r3, #19
 800e3d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	015a      	lsls	r2, r3, #5
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	4413      	add	r3, r2
 800e3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3e2:	691b      	ldr	r3, [r3, #16]
 800e3e4:	693a      	ldr	r2, [r7, #16]
 800e3e6:	0151      	lsls	r1, r2, #5
 800e3e8:	697a      	ldr	r2, [r7, #20]
 800e3ea:	440a      	add	r2, r1
 800e3ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e3f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e3f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	699b      	ldr	r3, [r3, #24]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d123      	bne.n	800e44a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	015a      	lsls	r2, r3, #5
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	4413      	add	r3, r2
 800e40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e40e:	691a      	ldr	r2, [r3, #16]
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e418:	6939      	ldr	r1, [r7, #16]
 800e41a:	0148      	lsls	r0, r1, #5
 800e41c:	6979      	ldr	r1, [r7, #20]
 800e41e:	4401      	add	r1, r0
 800e420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e424:	4313      	orrs	r3, r2
 800e426:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	015a      	lsls	r2, r3, #5
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	4413      	add	r3, r2
 800e430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	693a      	ldr	r2, [r7, #16]
 800e438:	0151      	lsls	r1, r2, #5
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	440a      	add	r2, r1
 800e43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e446:	6113      	str	r3, [r2, #16]
 800e448:	e037      	b.n	800e4ba <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	699a      	ldr	r2, [r3, #24]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	4413      	add	r3, r2
 800e454:	1e5a      	subs	r2, r3, #1
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e45e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	89fa      	ldrh	r2, [r7, #14]
 800e466:	fb03 f202 	mul.w	r2, r3, r2
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	015a      	lsls	r2, r3, #5
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	4413      	add	r3, r2
 800e476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e47a:	691a      	ldr	r2, [r3, #16]
 800e47c:	89fb      	ldrh	r3, [r7, #14]
 800e47e:	04d9      	lsls	r1, r3, #19
 800e480:	4b1c      	ldr	r3, [pc, #112]	; (800e4f4 <USB_EPStartXfer+0x370>)
 800e482:	400b      	ands	r3, r1
 800e484:	6939      	ldr	r1, [r7, #16]
 800e486:	0148      	lsls	r0, r1, #5
 800e488:	6979      	ldr	r1, [r7, #20]
 800e48a:	4401      	add	r1, r0
 800e48c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e490:	4313      	orrs	r3, r2
 800e492:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	015a      	lsls	r2, r3, #5
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	4413      	add	r3, r2
 800e49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4a0:	691a      	ldr	r2, [r3, #16]
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	69db      	ldr	r3, [r3, #28]
 800e4a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4aa:	6939      	ldr	r1, [r7, #16]
 800e4ac:	0148      	lsls	r0, r1, #5
 800e4ae:	6979      	ldr	r1, [r7, #20]
 800e4b0:	4401      	add	r1, r0
 800e4b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	791b      	ldrb	r3, [r3, #4]
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d12a      	bne.n	800e518 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d112      	bne.n	800e4f8 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	015a      	lsls	r2, r3, #5
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	4413      	add	r3, r2
 800e4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	693a      	ldr	r2, [r7, #16]
 800e4e2:	0151      	lsls	r1, r2, #5
 800e4e4:	697a      	ldr	r2, [r7, #20]
 800e4e6:	440a      	add	r2, r1
 800e4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e4f0:	6013      	str	r3, [r2, #0]
 800e4f2:	e011      	b.n	800e518 <USB_EPStartXfer+0x394>
 800e4f4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	015a      	lsls	r2, r3, #5
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	4413      	add	r3, r2
 800e500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	693a      	ldr	r2, [r7, #16]
 800e508:	0151      	lsls	r1, r2, #5
 800e50a:	697a      	ldr	r2, [r7, #20]
 800e50c:	440a      	add	r2, r1
 800e50e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e516:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	693a      	ldr	r2, [r7, #16]
 800e528:	0151      	lsls	r1, r2, #5
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	440a      	add	r2, r1
 800e52e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e536:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e538:	2300      	movs	r3, #0
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop

0800e544 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e544:	b480      	push	{r7}
 800e546:	b085      	sub	sp, #20
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	785b      	ldrb	r3, [r3, #1]
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	f040 80ab 	bne.w	800e6b8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	699b      	ldr	r3, [r3, #24]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d132      	bne.n	800e5d0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	015a      	lsls	r2, r3, #5
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	4413      	add	r3, r2
 800e572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	0151      	lsls	r1, r2, #5
 800e57c:	68fa      	ldr	r2, [r7, #12]
 800e57e:	440a      	add	r2, r1
 800e580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e584:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e588:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e58c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	015a      	lsls	r2, r3, #5
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	4413      	add	r3, r2
 800e596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	68ba      	ldr	r2, [r7, #8]
 800e59e:	0151      	lsls	r1, r2, #5
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	440a      	add	r2, r1
 800e5a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	015a      	lsls	r2, r3, #5
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ba:	691b      	ldr	r3, [r3, #16]
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	0151      	lsls	r1, r2, #5
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	440a      	add	r2, r1
 800e5c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5c8:	0cdb      	lsrs	r3, r3, #19
 800e5ca:	04db      	lsls	r3, r3, #19
 800e5cc:	6113      	str	r3, [r2, #16]
 800e5ce:	e04e      	b.n	800e66e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	0151      	lsls	r1, r2, #5
 800e5e2:	68fa      	ldr	r2, [r7, #12]
 800e5e4:	440a      	add	r2, r1
 800e5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5ea:	0cdb      	lsrs	r3, r3, #19
 800e5ec:	04db      	lsls	r3, r3, #19
 800e5ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	015a      	lsls	r2, r3, #5
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	68ba      	ldr	r2, [r7, #8]
 800e600:	0151      	lsls	r1, r2, #5
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	440a      	add	r2, r1
 800e606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e60a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e60e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e612:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	699a      	ldr	r2, [r3, #24]
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d903      	bls.n	800e628 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	68da      	ldr	r2, [r3, #12]
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e634:	691b      	ldr	r3, [r3, #16]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	0151      	lsls	r1, r2, #5
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	440a      	add	r2, r1
 800e63e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e654:	691a      	ldr	r2, [r3, #16]
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	699b      	ldr	r3, [r3, #24]
 800e65a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e65e:	68b9      	ldr	r1, [r7, #8]
 800e660:	0148      	lsls	r0, r1, #5
 800e662:	68f9      	ldr	r1, [r7, #12]
 800e664:	4401      	add	r1, r0
 800e666:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e66a:	4313      	orrs	r3, r2
 800e66c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	015a      	lsls	r2, r3, #5
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	4413      	add	r3, r2
 800e676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	0151      	lsls	r1, r2, #5
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	440a      	add	r2, r1
 800e684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e68c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d071      	beq.n	800e77a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e69c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	f003 030f 	and.w	r3, r3, #15
 800e6a6:	2101      	movs	r1, #1
 800e6a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e6ac:	68f9      	ldr	r1, [r7, #12]
 800e6ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	634b      	str	r3, [r1, #52]	; 0x34
 800e6b6:	e060      	b.n	800e77a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	015a      	lsls	r2, r3, #5
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	4413      	add	r3, r2
 800e6c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6c4:	691b      	ldr	r3, [r3, #16]
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	0151      	lsls	r1, r2, #5
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	440a      	add	r2, r1
 800e6ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6d2:	0cdb      	lsrs	r3, r3, #19
 800e6d4:	04db      	lsls	r3, r3, #19
 800e6d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	015a      	lsls	r2, r3, #5
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	4413      	add	r3, r2
 800e6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	0151      	lsls	r1, r2, #5
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	440a      	add	r2, r1
 800e6ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e6f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e6fa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d003      	beq.n	800e70c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	68da      	ldr	r2, [r3, #12]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	68da      	ldr	r2, [r3, #12]
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	015a      	lsls	r2, r3, #5
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	4413      	add	r3, r2
 800e71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	0151      	lsls	r1, r2, #5
 800e726:	68fa      	ldr	r2, [r7, #12]
 800e728:	440a      	add	r2, r1
 800e72a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e72e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e732:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	015a      	lsls	r2, r3, #5
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	4413      	add	r3, r2
 800e73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e740:	691a      	ldr	r2, [r3, #16]
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	69db      	ldr	r3, [r3, #28]
 800e746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e74a:	68b9      	ldr	r1, [r7, #8]
 800e74c:	0148      	lsls	r0, r1, #5
 800e74e:	68f9      	ldr	r1, [r7, #12]
 800e750:	4401      	add	r1, r0
 800e752:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e756:	4313      	orrs	r3, r2
 800e758:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	015a      	lsls	r2, r3, #5
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	4413      	add	r3, r2
 800e762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	0151      	lsls	r1, r2, #5
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	440a      	add	r2, r1
 800e770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e774:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3714      	adds	r7, #20
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e788:	b480      	push	{r7}
 800e78a:	b087      	sub	sp, #28
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e792:	2300      	movs	r3, #0
 800e794:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e796:	2300      	movs	r3, #0
 800e798:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	785b      	ldrb	r3, [r3, #1]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d14a      	bne.n	800e83c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	015a      	lsls	r2, r3, #5
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7be:	f040 8086 	bne.w	800e8ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	015a      	lsls	r2, r3, #5
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	7812      	ldrb	r2, [r2, #0]
 800e7d6:	0151      	lsls	r1, r2, #5
 800e7d8:	693a      	ldr	r2, [r7, #16]
 800e7da:	440a      	add	r2, r1
 800e7dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e7e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	015a      	lsls	r2, r3, #5
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	7812      	ldrb	r2, [r2, #0]
 800e7fa:	0151      	lsls	r1, r2, #5
 800e7fc:	693a      	ldr	r2, [r7, #16]
 800e7fe:	440a      	add	r2, r1
 800e800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e808:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	3301      	adds	r3, #1
 800e80e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f242 7210 	movw	r2, #10000	; 0x2710
 800e816:	4293      	cmp	r3, r2
 800e818:	d902      	bls.n	800e820 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	75fb      	strb	r3, [r7, #23]
          break;
 800e81e:	e056      	b.n	800e8ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	015a      	lsls	r2, r3, #5
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	4413      	add	r3, r2
 800e82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e838:	d0e7      	beq.n	800e80a <USB_EPStopXfer+0x82>
 800e83a:	e048      	b.n	800e8ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	015a      	lsls	r2, r3, #5
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	4413      	add	r3, r2
 800e846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e854:	d13b      	bne.n	800e8ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	015a      	lsls	r2, r3, #5
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	4413      	add	r3, r2
 800e860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	683a      	ldr	r2, [r7, #0]
 800e868:	7812      	ldrb	r2, [r2, #0]
 800e86a:	0151      	lsls	r1, r2, #5
 800e86c:	693a      	ldr	r2, [r7, #16]
 800e86e:	440a      	add	r2, r1
 800e870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e878:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	015a      	lsls	r2, r3, #5
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	4413      	add	r3, r2
 800e884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	7812      	ldrb	r2, [r2, #0]
 800e88e:	0151      	lsls	r1, r2, #5
 800e890:	693a      	ldr	r2, [r7, #16]
 800e892:	440a      	add	r2, r1
 800e894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e89c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f242 7210 	movw	r2, #10000	; 0x2710
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d902      	bls.n	800e8b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	75fb      	strb	r3, [r7, #23]
          break;
 800e8b2:	e00c      	b.n	800e8ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	015a      	lsls	r2, r3, #5
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8cc:	d0e7      	beq.n	800e89e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	371c      	adds	r7, #28
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b089      	sub	sp, #36	; 0x24
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	4611      	mov	r1, r2
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	71fb      	strb	r3, [r7, #7]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800e8fa:	88bb      	ldrh	r3, [r7, #4]
 800e8fc:	3303      	adds	r3, #3
 800e8fe:	089b      	lsrs	r3, r3, #2
 800e900:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800e902:	2300      	movs	r3, #0
 800e904:	61bb      	str	r3, [r7, #24]
 800e906:	e018      	b.n	800e93a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	031a      	lsls	r2, r3, #12
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	4413      	add	r3, r2
 800e910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e914:	461a      	mov	r2, r3
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	3301      	adds	r3, #1
 800e920:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	3301      	adds	r3, #1
 800e926:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	3301      	adds	r3, #1
 800e92c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	3301      	adds	r3, #1
 800e932:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	3301      	adds	r3, #1
 800e938:	61bb      	str	r3, [r7, #24]
 800e93a:	69ba      	ldr	r2, [r7, #24]
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d3e2      	bcc.n	800e908 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3724      	adds	r7, #36	; 0x24
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e950:	b480      	push	{r7}
 800e952:	b08b      	sub	sp, #44	; 0x2c
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	4613      	mov	r3, r2
 800e95c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e966:	88fb      	ldrh	r3, [r7, #6]
 800e968:	089b      	lsrs	r3, r3, #2
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e96e:	88fb      	ldrh	r3, [r7, #6]
 800e970:	f003 0303 	and.w	r3, r3, #3
 800e974:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e976:	2300      	movs	r3, #0
 800e978:	623b      	str	r3, [r7, #32]
 800e97a:	e014      	b.n	800e9a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	601a      	str	r2, [r3, #0]
    pDest++;
 800e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98a:	3301      	adds	r3, #1
 800e98c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	3301      	adds	r3, #1
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	3301      	adds	r3, #1
 800e998:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	3301      	adds	r3, #1
 800e99e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e9a0:	6a3b      	ldr	r3, [r7, #32]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	623b      	str	r3, [r7, #32]
 800e9a6:	6a3a      	ldr	r2, [r7, #32]
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d3e6      	bcc.n	800e97c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e9ae:	8bfb      	ldrh	r3, [r7, #30]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d01e      	beq.n	800e9f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9be:	461a      	mov	r2, r3
 800e9c0:	f107 0310 	add.w	r3, r7, #16
 800e9c4:	6812      	ldr	r2, [r2, #0]
 800e9c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e9c8:	693a      	ldr	r2, [r7, #16]
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	00db      	lsls	r3, r3, #3
 800e9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e9d4:	b2da      	uxtb	r2, r3
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d8:	701a      	strb	r2, [r3, #0]
      i++;
 800e9da:	6a3b      	ldr	r3, [r7, #32]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	623b      	str	r3, [r7, #32]
      pDest++;
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e9e6:	8bfb      	ldrh	r3, [r7, #30]
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e9ec:	8bfb      	ldrh	r3, [r7, #30]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d1ea      	bne.n	800e9c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	372c      	adds	r7, #44	; 0x2c
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b085      	sub	sp, #20
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	785b      	ldrb	r3, [r3, #1]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d12c      	bne.n	800ea76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	015a      	lsls	r2, r3, #5
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	4413      	add	r3, r2
 800ea24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	db12      	blt.n	800ea54 <USB_EPSetStall+0x54>
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d00f      	beq.n	800ea54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	015a      	lsls	r2, r3, #5
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	0151      	lsls	r1, r2, #5
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	440a      	add	r2, r1
 800ea4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ea52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	015a      	lsls	r2, r3, #5
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	0151      	lsls	r1, r2, #5
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	440a      	add	r2, r1
 800ea6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ea72:	6013      	str	r3, [r2, #0]
 800ea74:	e02b      	b.n	800eace <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	015a      	lsls	r2, r3, #5
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	db12      	blt.n	800eaae <USB_EPSetStall+0xae>
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00f      	beq.n	800eaae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	015a      	lsls	r2, r3, #5
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	4413      	add	r3, r2
 800ea96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68ba      	ldr	r2, [r7, #8]
 800ea9e:	0151      	lsls	r1, r2, #5
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	440a      	add	r2, r1
 800eaa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eaa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800eaac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	015a      	lsls	r2, r3, #5
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	4413      	add	r3, r2
 800eab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	0151      	lsls	r1, r2, #5
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	440a      	add	r2, r1
 800eac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eacc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3714      	adds	r7, #20
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	785b      	ldrb	r3, [r3, #1]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d128      	bne.n	800eb4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	015a      	lsls	r2, r3, #5
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	4413      	add	r3, r2
 800eb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	0151      	lsls	r1, r2, #5
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	440a      	add	r2, r1
 800eb0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	791b      	ldrb	r3, [r3, #4]
 800eb1c:	2b03      	cmp	r3, #3
 800eb1e:	d003      	beq.n	800eb28 <USB_EPClearStall+0x4c>
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	791b      	ldrb	r3, [r3, #4]
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d138      	bne.n	800eb9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	015a      	lsls	r2, r3, #5
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	4413      	add	r3, r2
 800eb30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68ba      	ldr	r2, [r7, #8]
 800eb38:	0151      	lsls	r1, r2, #5
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	440a      	add	r2, r1
 800eb3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb46:	6013      	str	r3, [r2, #0]
 800eb48:	e027      	b.n	800eb9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	015a      	lsls	r2, r3, #5
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	4413      	add	r3, r2
 800eb52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	0151      	lsls	r1, r2, #5
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	440a      	add	r2, r1
 800eb60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	791b      	ldrb	r3, [r3, #4]
 800eb6e:	2b03      	cmp	r3, #3
 800eb70:	d003      	beq.n	800eb7a <USB_EPClearStall+0x9e>
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	791b      	ldrb	r3, [r3, #4]
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d10f      	bne.n	800eb9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	015a      	lsls	r2, r3, #5
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	4413      	add	r3, r2
 800eb82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	68ba      	ldr	r2, [r7, #8]
 800eb8a:	0151      	lsls	r1, r2, #5
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	440a      	add	r2, r1
 800eb90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3714      	adds	r7, #20
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ebc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ebca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	78fb      	ldrb	r3, [r7, #3]
 800ebd6:	011b      	lsls	r3, r3, #4
 800ebd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ebdc:	68f9      	ldr	r1, [r7, #12]
 800ebde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ebe6:	2300      	movs	r3, #0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec0e:	f023 0303 	bic.w	r3, r3, #3
 800ec12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec22:	f023 0302 	bic.w	r3, r3, #2
 800ec26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ec36:	b480      	push	{r7}
 800ec38:	b085      	sub	sp, #20
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec50:	f023 0303 	bic.w	r3, r3, #3
 800ec54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec64:	f043 0302 	orr.w	r3, r3, #2
 800ec68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3714      	adds	r7, #20
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	695b      	ldr	r3, [r3, #20]
 800ec84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	699b      	ldr	r3, [r3, #24]
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ec90:	68fb      	ldr	r3, [r7, #12]
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3714      	adds	r7, #20
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec9e:	b480      	push	{r7}
 800eca0:	b085      	sub	sp, #20
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecba:	69db      	ldr	r3, [r3, #28]
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	0c1b      	lsrs	r3, r3, #16
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3714      	adds	r7, #20
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ecd2:	b480      	push	{r7}
 800ecd4:	b085      	sub	sp, #20
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ece4:	699b      	ldr	r3, [r3, #24]
 800ece6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecee:	69db      	ldr	r3, [r3, #28]
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	4013      	ands	r3, r2
 800ecf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	b29b      	uxth	r3, r3
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr

0800ed06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ed06:	b480      	push	{r7}
 800ed08:	b085      	sub	sp, #20
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
 800ed0e:	460b      	mov	r3, r1
 800ed10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ed16:	78fb      	ldrb	r3, [r7, #3]
 800ed18:	015a      	lsls	r2, r3, #5
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed22:	689b      	ldr	r3, [r3, #8]
 800ed24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed2c:	695b      	ldr	r3, [r3, #20]
 800ed2e:	68ba      	ldr	r2, [r7, #8]
 800ed30:	4013      	ands	r3, r2
 800ed32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ed34:	68bb      	ldr	r3, [r7, #8]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3714      	adds	r7, #20
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ed42:	b480      	push	{r7}
 800ed44:	b087      	sub	sp, #28
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ed66:	78fb      	ldrb	r3, [r7, #3]
 800ed68:	f003 030f 	and.w	r3, r3, #15
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ed72:	01db      	lsls	r3, r3, #7
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	693a      	ldr	r2, [r7, #16]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ed7c:	78fb      	ldrb	r3, [r7, #3]
 800ed7e:	015a      	lsls	r2, r3, #5
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	4413      	add	r3, r2
 800ed84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	693a      	ldr	r2, [r7, #16]
 800ed8c:	4013      	ands	r3, r2
 800ed8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ed90:	68bb      	ldr	r3, [r7, #8]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	371c      	adds	r7, #28
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ed9e:	b480      	push	{r7}
 800eda0:	b083      	sub	sp, #12
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	695b      	ldr	r3, [r3, #20]
 800edaa:	f003 0301 	and.w	r3, r3, #1
}
 800edae:	4618      	mov	r0, r3
 800edb0:	370c      	adds	r7, #12
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr

0800edba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800edba:	b480      	push	{r7}
 800edbc:	b085      	sub	sp, #20
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800edd8:	f023 0307 	bic.w	r3, r3, #7
 800eddc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800edf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3714      	adds	r7, #20
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	333c      	adds	r3, #60	; 0x3c
 800ee12:	3304      	adds	r3, #4
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	4a1c      	ldr	r2, [pc, #112]	; (800ee8c <USB_EP0_OutStart+0x8c>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d90a      	bls.n	800ee36 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee30:	d101      	bne.n	800ee36 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	e024      	b.n	800ee80 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	2300      	movs	r3, #0
 800ee40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee48:	691b      	ldr	r3, [r3, #16]
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee64:	f043 0318 	orr.w	r3, r3, #24
 800ee68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee70:	691b      	ldr	r3, [r3, #16]
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ee7c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3714      	adds	r7, #20
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	4f54300a 	.word	0x4f54300a

0800ee90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	4a13      	ldr	r2, [pc, #76]	; (800eef4 <USB_CoreReset+0x64>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d901      	bls.n	800eeae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	e01b      	b.n	800eee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	691b      	ldr	r3, [r3, #16]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	daf2      	bge.n	800ee9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	f043 0201 	orr.w	r2, r3, #1
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	3301      	adds	r3, #1
 800eeca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	4a09      	ldr	r2, [pc, #36]	; (800eef4 <USB_CoreReset+0x64>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d901      	bls.n	800eed8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eed4:	2303      	movs	r3, #3
 800eed6:	e006      	b.n	800eee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	f003 0301 	and.w	r3, r3, #1
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d0f0      	beq.n	800eec6 <USB_CoreReset+0x36>

  return HAL_OK;
 800eee4:	2300      	movs	r3, #0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3714      	adds	r7, #20
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	00030d40 	.word	0x00030d40

0800eef8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	460b      	mov	r3, r1
 800ef02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ef04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ef08:	f002 fa6c 	bl	80113e4 <USBD_static_malloc>
 800ef0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d105      	bne.n	800ef20 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	e066      	b.n	800efee <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	7c1b      	ldrb	r3, [r3, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d119      	bne.n	800ef64 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ef30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef34:	2202      	movs	r2, #2
 800ef36:	2181      	movs	r1, #129	; 0x81
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f002 f83f 	bl	8010fbc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ef44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef48:	2202      	movs	r2, #2
 800ef4a:	2101      	movs	r1, #1
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f002 f835 	bl	8010fbc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2210      	movs	r2, #16
 800ef5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ef62:	e016      	b.n	800ef92 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ef64:	2340      	movs	r3, #64	; 0x40
 800ef66:	2202      	movs	r2, #2
 800ef68:	2181      	movs	r1, #129	; 0x81
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f002 f826 	bl	8010fbc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2201      	movs	r2, #1
 800ef74:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ef76:	2340      	movs	r3, #64	; 0x40
 800ef78:	2202      	movs	r2, #2
 800ef7a:	2101      	movs	r1, #1
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f002 f81d 	bl	8010fbc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2201      	movs	r2, #1
 800ef86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2210      	movs	r2, #16
 800ef8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ef92:	2308      	movs	r3, #8
 800ef94:	2203      	movs	r2, #3
 800ef96:	2182      	movs	r1, #130	; 0x82
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f002 f80f 	bl	8010fbc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2200      	movs	r2, #0
 800efbc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	7c1b      	ldrb	r3, [r3, #16]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d109      	bne.n	800efdc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800efce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800efd2:	2101      	movs	r1, #1
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f002 f96b 	bl	80112b0 <USBD_LL_PrepareReceive>
 800efda:	e007      	b.n	800efec <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800efe2:	2340      	movs	r3, #64	; 0x40
 800efe4:	2101      	movs	r1, #1
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f002 f962 	bl	80112b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b082      	sub	sp, #8
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
 800effe:	460b      	mov	r3, r1
 800f000:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f002:	2181      	movs	r1, #129	; 0x81
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f002 f817 	bl	8011038 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f010:	2101      	movs	r1, #1
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f002 f810 	bl	8011038 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f020:	2182      	movs	r1, #130	; 0x82
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f002 f808 	bl	8011038 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2200      	movs	r2, #0
 800f034:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00e      	beq.n	800f060 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f052:	4618      	mov	r0, r3
 800f054:	f002 f9d4 	bl	8011400 <USBD_static_free>
    pdev->pClassData = NULL;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f07c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f07e:	2300      	movs	r3, #0
 800f080:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f082:	2300      	movs	r3, #0
 800f084:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f086:	2300      	movs	r3, #0
 800f088:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f090:	2303      	movs	r3, #3
 800f092:	e0af      	b.n	800f1f4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d03f      	beq.n	800f120 <USBD_CDC_Setup+0xb4>
 800f0a0:	2b20      	cmp	r3, #32
 800f0a2:	f040 809f 	bne.w	800f1e4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	88db      	ldrh	r3, [r3, #6]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d02e      	beq.n	800f10c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	b25b      	sxtb	r3, r3
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	da16      	bge.n	800f0e6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	683a      	ldr	r2, [r7, #0]
 800f0c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f0c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f0c6:	683a      	ldr	r2, [r7, #0]
 800f0c8:	88d2      	ldrh	r2, [r2, #6]
 800f0ca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	88db      	ldrh	r3, [r3, #6]
 800f0d0:	2b07      	cmp	r3, #7
 800f0d2:	bf28      	it	cs
 800f0d4:	2307      	movcs	r3, #7
 800f0d6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	89fa      	ldrh	r2, [r7, #14]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f001 fb13 	bl	801070a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f0e4:	e085      	b.n	800f1f2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	785a      	ldrb	r2, [r3, #1]
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	88db      	ldrh	r3, [r3, #6]
 800f0f4:	b2da      	uxtb	r2, r3
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f0fc:	6939      	ldr	r1, [r7, #16]
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	88db      	ldrh	r3, [r3, #6]
 800f102:	461a      	mov	r2, r3
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f001 fb2c 	bl	8010762 <USBD_CtlPrepareRx>
      break;
 800f10a:	e072      	b.n	800f1f2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	683a      	ldr	r2, [r7, #0]
 800f116:	7850      	ldrb	r0, [r2, #1]
 800f118:	2200      	movs	r2, #0
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	4798      	blx	r3
      break;
 800f11e:	e068      	b.n	800f1f2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	785b      	ldrb	r3, [r3, #1]
 800f124:	2b0b      	cmp	r3, #11
 800f126:	d852      	bhi.n	800f1ce <USBD_CDC_Setup+0x162>
 800f128:	a201      	add	r2, pc, #4	; (adr r2, 800f130 <USBD_CDC_Setup+0xc4>)
 800f12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f12e:	bf00      	nop
 800f130:	0800f161 	.word	0x0800f161
 800f134:	0800f1dd 	.word	0x0800f1dd
 800f138:	0800f1cf 	.word	0x0800f1cf
 800f13c:	0800f1cf 	.word	0x0800f1cf
 800f140:	0800f1cf 	.word	0x0800f1cf
 800f144:	0800f1cf 	.word	0x0800f1cf
 800f148:	0800f1cf 	.word	0x0800f1cf
 800f14c:	0800f1cf 	.word	0x0800f1cf
 800f150:	0800f1cf 	.word	0x0800f1cf
 800f154:	0800f1cf 	.word	0x0800f1cf
 800f158:	0800f18b 	.word	0x0800f18b
 800f15c:	0800f1b5 	.word	0x0800f1b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b03      	cmp	r3, #3
 800f16a:	d107      	bne.n	800f17c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f16c:	f107 030a 	add.w	r3, r7, #10
 800f170:	2202      	movs	r2, #2
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f001 fac8 	bl	801070a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f17a:	e032      	b.n	800f1e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f17c:	6839      	ldr	r1, [r7, #0]
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f001 fa52 	bl	8010628 <USBD_CtlError>
            ret = USBD_FAIL;
 800f184:	2303      	movs	r3, #3
 800f186:	75fb      	strb	r3, [r7, #23]
          break;
 800f188:	e02b      	b.n	800f1e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f190:	b2db      	uxtb	r3, r3
 800f192:	2b03      	cmp	r3, #3
 800f194:	d107      	bne.n	800f1a6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f196:	f107 030d 	add.w	r3, r7, #13
 800f19a:	2201      	movs	r2, #1
 800f19c:	4619      	mov	r1, r3
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f001 fab3 	bl	801070a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f1a4:	e01d      	b.n	800f1e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f1a6:	6839      	ldr	r1, [r7, #0]
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f001 fa3d 	bl	8010628 <USBD_CtlError>
            ret = USBD_FAIL;
 800f1ae:	2303      	movs	r3, #3
 800f1b0:	75fb      	strb	r3, [r7, #23]
          break;
 800f1b2:	e016      	b.n	800f1e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b03      	cmp	r3, #3
 800f1be:	d00f      	beq.n	800f1e0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f1c0:	6839      	ldr	r1, [r7, #0]
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f001 fa30 	bl	8010628 <USBD_CtlError>
            ret = USBD_FAIL;
 800f1c8:	2303      	movs	r3, #3
 800f1ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f1cc:	e008      	b.n	800f1e0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f001 fa29 	bl	8010628 <USBD_CtlError>
          ret = USBD_FAIL;
 800f1d6:	2303      	movs	r3, #3
 800f1d8:	75fb      	strb	r3, [r7, #23]
          break;
 800f1da:	e002      	b.n	800f1e2 <USBD_CDC_Setup+0x176>
          break;
 800f1dc:	bf00      	nop
 800f1de:	e008      	b.n	800f1f2 <USBD_CDC_Setup+0x186>
          break;
 800f1e0:	bf00      	nop
      }
      break;
 800f1e2:	e006      	b.n	800f1f2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f1e4:	6839      	ldr	r1, [r7, #0]
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f001 fa1e 	bl	8010628 <USBD_CtlError>
      ret = USBD_FAIL;
 800f1ec:	2303      	movs	r3, #3
 800f1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800f1f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f20e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f21a:	2303      	movs	r3, #3
 800f21c:	e04f      	b.n	800f2be <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f224:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f226:	78fa      	ldrb	r2, [r7, #3]
 800f228:	6879      	ldr	r1, [r7, #4]
 800f22a:	4613      	mov	r3, r2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4413      	add	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	440b      	add	r3, r1
 800f234:	3318      	adds	r3, #24
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d029      	beq.n	800f290 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f23c:	78fa      	ldrb	r2, [r7, #3]
 800f23e:	6879      	ldr	r1, [r7, #4]
 800f240:	4613      	mov	r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	4413      	add	r3, r2
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	440b      	add	r3, r1
 800f24a:	3318      	adds	r3, #24
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	78f9      	ldrb	r1, [r7, #3]
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	460b      	mov	r3, r1
 800f254:	00db      	lsls	r3, r3, #3
 800f256:	440b      	add	r3, r1
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	4403      	add	r3, r0
 800f25c:	3348      	adds	r3, #72	; 0x48
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	fbb2 f1f3 	udiv	r1, r2, r3
 800f264:	fb01 f303 	mul.w	r3, r1, r3
 800f268:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d110      	bne.n	800f290 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f26e:	78fa      	ldrb	r2, [r7, #3]
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	4613      	mov	r3, r2
 800f274:	009b      	lsls	r3, r3, #2
 800f276:	4413      	add	r3, r2
 800f278:	009b      	lsls	r3, r3, #2
 800f27a:	440b      	add	r3, r1
 800f27c:	3318      	adds	r3, #24
 800f27e:	2200      	movs	r2, #0
 800f280:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f282:	78f9      	ldrb	r1, [r7, #3]
 800f284:	2300      	movs	r3, #0
 800f286:	2200      	movs	r2, #0
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f001 ffd9 	bl	8011240 <USBD_LL_Transmit>
 800f28e:	e015      	b.n	800f2bc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	2200      	movs	r2, #0
 800f294:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f29e:	691b      	ldr	r3, [r3, #16]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00b      	beq.n	800f2bc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f2b2:	68ba      	ldr	r2, [r7, #8]
 800f2b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f2b8:	78fa      	ldrb	r2, [r7, #3]
 800f2ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f2bc:	2300      	movs	r3, #0
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f2c6:	b580      	push	{r7, lr}
 800f2c8:	b084      	sub	sp, #16
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	e015      	b.n	800f314 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f2e8:	78fb      	ldrb	r3, [r7, #3]
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f002 f817 	bl	8011320 <USBD_LL_GetRxDataSize>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f30e:	4611      	mov	r1, r2
 800f310:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f32a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d101      	bne.n	800f336 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f332:	2303      	movs	r3, #3
 800f334:	e01b      	b.n	800f36e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d015      	beq.n	800f36c <USBD_CDC_EP0_RxReady+0x50>
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f346:	2bff      	cmp	r3, #255	; 0xff
 800f348:	d010      	beq.n	800f36c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f358:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f360:	b292      	uxth	r2, r2
 800f362:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	22ff      	movs	r2, #255	; 0xff
 800f368:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f378:	b480      	push	{r7}
 800f37a:	b083      	sub	sp, #12
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2243      	movs	r2, #67	; 0x43
 800f384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f386:	4b03      	ldr	r3, [pc, #12]	; (800f394 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f388:	4618      	mov	r0, r3
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr
 800f394:	20000160 	.word	0x20000160

0800f398 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2243      	movs	r2, #67	; 0x43
 800f3a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f3a6:	4b03      	ldr	r3, [pc, #12]	; (800f3b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr
 800f3b4:	2000011c 	.word	0x2000011c

0800f3b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2243      	movs	r2, #67	; 0x43
 800f3c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f3c6:	4b03      	ldr	r3, [pc, #12]	; (800f3d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr
 800f3d4:	200001a4 	.word	0x200001a4

0800f3d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	220a      	movs	r2, #10
 800f3e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f3e6:	4b03      	ldr	r3, [pc, #12]	; (800f3f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr
 800f3f4:	200000d8 	.word	0x200000d8

0800f3f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d101      	bne.n	800f40c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f408:	2303      	movs	r3, #3
 800f40a:	e004      	b.n	800f416 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f422:	b480      	push	{r7}
 800f424:	b087      	sub	sp, #28
 800f426:	af00      	add	r7, sp, #0
 800f428:	60f8      	str	r0, [r7, #12]
 800f42a:	60b9      	str	r1, [r7, #8]
 800f42c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f434:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f43c:	2303      	movs	r3, #3
 800f43e:	e008      	b.n	800f452 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	68ba      	ldr	r2, [r7, #8]
 800f444:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	371c      	adds	r7, #28
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr

0800f45e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f45e:	b480      	push	{r7}
 800f460:	b085      	sub	sp, #20
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f46e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d101      	bne.n	800f47a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f476:	2303      	movs	r3, #3
 800f478:	e004      	b.n	800f484 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	683a      	ldr	r2, [r7, #0]
 800f47e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f49e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d101      	bne.n	800f4ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f4aa:	2303      	movs	r3, #3
 800f4ac:	e016      	b.n	800f4dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	7c1b      	ldrb	r3, [r3, #16]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d109      	bne.n	800f4ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f4bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4c0:	2101      	movs	r1, #1
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f001 fef4 	bl	80112b0 <USBD_LL_PrepareReceive>
 800f4c8:	e007      	b.n	800f4da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f4d0:	2340      	movs	r3, #64	; 0x40
 800f4d2:	2101      	movs	r1, #1
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f001 feeb 	bl	80112b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3710      	adds	r7, #16
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d101      	bne.n	800f4fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f4f8:	2303      	movs	r3, #3
 800f4fa:	e01f      	b.n	800f53c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2200      	movs	r2, #0
 800f508:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2200      	movs	r2, #0
 800f510:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d003      	beq.n	800f522 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	68ba      	ldr	r2, [r7, #8]
 800f51e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2201      	movs	r2, #1
 800f526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	79fa      	ldrb	r2, [r7, #7]
 800f52e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f001 fcc5 	bl	8010ec0 <USBD_LL_Init>
 800f536:	4603      	mov	r3, r0
 800f538:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3718      	adds	r7, #24
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f54e:	2300      	movs	r3, #0
 800f550:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d101      	bne.n	800f55c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f558:	2303      	movs	r3, #3
 800f55a:	e016      	b.n	800f58a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	683a      	ldr	r2, [r7, #0]
 800f560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00b      	beq.n	800f588 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	f107 020e 	add.w	r2, r7, #14
 800f57c:	4610      	mov	r0, r2
 800f57e:	4798      	blx	r3
 800f580:	4602      	mov	r2, r0
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b082      	sub	sp, #8
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f001 fcdc 	bl	8010f58 <USBD_LL_Start>
 800f5a0:	4603      	mov	r3, r0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f5aa:	b480      	push	{r7}
 800f5ac:	b083      	sub	sp, #12
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f5b2:	2300      	movs	r3, #0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f5cc:	2303      	movs	r3, #3
 800f5ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d009      	beq.n	800f5ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	78fa      	ldrb	r2, [r7, #3]
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	4798      	blx	r3
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3710      	adds	r7, #16
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	460b      	mov	r3, r1
 800f602:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d007      	beq.n	800f61e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	78fa      	ldrb	r2, [r7, #3]
 800f618:	4611      	mov	r1, r2
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	4798      	blx	r3
  }

  return USBD_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 ffba 	bl	80105b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2201      	movs	r2, #1
 800f644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f64e:	461a      	mov	r2, r3
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f65c:	f003 031f 	and.w	r3, r3, #31
 800f660:	2b02      	cmp	r3, #2
 800f662:	d01a      	beq.n	800f69a <USBD_LL_SetupStage+0x72>
 800f664:	2b02      	cmp	r3, #2
 800f666:	d822      	bhi.n	800f6ae <USBD_LL_SetupStage+0x86>
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d002      	beq.n	800f672 <USBD_LL_SetupStage+0x4a>
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d00a      	beq.n	800f686 <USBD_LL_SetupStage+0x5e>
 800f670:	e01d      	b.n	800f6ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f678:	4619      	mov	r1, r3
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 fa62 	bl	800fb44 <USBD_StdDevReq>
 800f680:	4603      	mov	r3, r0
 800f682:	73fb      	strb	r3, [r7, #15]
      break;
 800f684:	e020      	b.n	800f6c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f68c:	4619      	mov	r1, r3
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f000 fac6 	bl	800fc20 <USBD_StdItfReq>
 800f694:	4603      	mov	r3, r0
 800f696:	73fb      	strb	r3, [r7, #15]
      break;
 800f698:	e016      	b.n	800f6c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 fb05 	bl	800fcb2 <USBD_StdEPReq>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f6ac:	e00c      	b.n	800f6c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f6b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f001 fcf1 	bl	80110a4 <USBD_LL_StallEP>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800f6c6:	bf00      	nop
  }

  return ret;
 800f6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b086      	sub	sp, #24
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	60f8      	str	r0, [r7, #12]
 800f6da:	460b      	mov	r3, r1
 800f6dc:	607a      	str	r2, [r7, #4]
 800f6de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f6e0:	7afb      	ldrb	r3, [r7, #11]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d138      	bne.n	800f758 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f6ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6f4:	2b03      	cmp	r3, #3
 800f6f6:	d14a      	bne.n	800f78e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	689a      	ldr	r2, [r3, #8]
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	429a      	cmp	r2, r3
 800f702:	d913      	bls.n	800f72c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	689a      	ldr	r2, [r3, #8]
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	1ad2      	subs	r2, r2, r3
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	68da      	ldr	r2, [r3, #12]
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	4293      	cmp	r3, r2
 800f71c:	bf28      	it	cs
 800f71e:	4613      	movcs	r3, r2
 800f720:	461a      	mov	r2, r3
 800f722:	6879      	ldr	r1, [r7, #4]
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f001 f839 	bl	801079c <USBD_CtlContinueRx>
 800f72a:	e030      	b.n	800f78e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f732:	b2db      	uxtb	r3, r3
 800f734:	2b03      	cmp	r3, #3
 800f736:	d10b      	bne.n	800f750 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d005      	beq.n	800f750 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f001 f834 	bl	80107be <USBD_CtlSendStatus>
 800f756:	e01a      	b.n	800f78e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b03      	cmp	r3, #3
 800f762:	d114      	bne.n	800f78e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00e      	beq.n	800f78e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	7afa      	ldrb	r2, [r7, #11]
 800f77a:	4611      	mov	r1, r2
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	4798      	blx	r3
 800f780:	4603      	mov	r3, r0
 800f782:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f784:	7dfb      	ldrb	r3, [r7, #23]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d001      	beq.n	800f78e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f78a:	7dfb      	ldrb	r3, [r7, #23]
 800f78c:	e000      	b.n	800f790 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3718      	adds	r7, #24
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b086      	sub	sp, #24
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	607a      	str	r2, [r7, #4]
 800f7a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f7a6:	7afb      	ldrb	r3, [r7, #11]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d16b      	bne.n	800f884 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3314      	adds	r3, #20
 800f7b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	d156      	bne.n	800f86a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	689a      	ldr	r2, [r3, #8]
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d914      	bls.n	800f7f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	689a      	ldr	r2, [r3, #8]
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	1ad2      	subs	r2, r2, r3
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	6879      	ldr	r1, [r7, #4]
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f000 ffae 	bl	8010740 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f001 fd60 	bl	80112b0 <USBD_LL_PrepareReceive>
 800f7f0:	e03b      	b.n	800f86a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	68da      	ldr	r2, [r3, #12]
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d11c      	bne.n	800f838 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	685a      	ldr	r2, [r3, #4]
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f806:	429a      	cmp	r2, r3
 800f808:	d316      	bcc.n	800f838 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	685a      	ldr	r2, [r3, #4]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f814:	429a      	cmp	r2, r3
 800f816:	d20f      	bcs.n	800f838 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f818:	2200      	movs	r2, #0
 800f81a:	2100      	movs	r1, #0
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f000 ff8f 	bl	8010740 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2200      	movs	r2, #0
 800f826:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f82a:	2300      	movs	r3, #0
 800f82c:	2200      	movs	r2, #0
 800f82e:	2100      	movs	r1, #0
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f001 fd3d 	bl	80112b0 <USBD_LL_PrepareReceive>
 800f836:	e018      	b.n	800f86a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b03      	cmp	r3, #3
 800f842:	d10b      	bne.n	800f85c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d005      	beq.n	800f85c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f85c:	2180      	movs	r1, #128	; 0x80
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f001 fc20 	bl	80110a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f864:	68f8      	ldr	r0, [r7, #12]
 800f866:	f000 ffbd 	bl	80107e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f870:	2b01      	cmp	r3, #1
 800f872:	d122      	bne.n	800f8ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f7ff fe98 	bl	800f5aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f882:	e01a      	b.n	800f8ba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	2b03      	cmp	r3, #3
 800f88e:	d114      	bne.n	800f8ba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f896:	695b      	ldr	r3, [r3, #20]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00e      	beq.n	800f8ba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8a2:	695b      	ldr	r3, [r3, #20]
 800f8a4:	7afa      	ldrb	r2, [r7, #11]
 800f8a6:	4611      	mov	r1, r2
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	4798      	blx	r3
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f8b0:	7dfb      	ldrb	r3, [r7, #23]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d001      	beq.n	800f8ba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f8b6:	7dfb      	ldrb	r3, [r7, #23]
 800f8b8:	e000      	b.n	800f8bc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d101      	bne.n	800f8f8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f8f4:	2303      	movs	r3, #3
 800f8f6:	e02f      	b.n	800f958 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00f      	beq.n	800f922 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d009      	beq.n	800f922 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	6852      	ldr	r2, [r2, #4]
 800f91a:	b2d2      	uxtb	r2, r2
 800f91c:	4611      	mov	r1, r2
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f922:	2340      	movs	r3, #64	; 0x40
 800f924:	2200      	movs	r2, #0
 800f926:	2100      	movs	r1, #0
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f001 fb47 	bl	8010fbc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2201      	movs	r2, #1
 800f932:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2240      	movs	r2, #64	; 0x40
 800f93a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f93e:	2340      	movs	r3, #64	; 0x40
 800f940:	2200      	movs	r2, #0
 800f942:	2180      	movs	r1, #128	; 0x80
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f001 fb39 	bl	8010fbc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2201      	movs	r2, #1
 800f94e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2240      	movs	r2, #64	; 0x40
 800f954:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	460b      	mov	r3, r1
 800f96a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	78fa      	ldrb	r2, [r7, #3]
 800f970:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f972:	2300      	movs	r3, #0
}
 800f974:	4618      	mov	r0, r3
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f98e:	b2da      	uxtb	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2204      	movs	r2, #4
 800f99a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr

0800f9ac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	2b04      	cmp	r3, #4
 800f9be:	d106      	bne.n	800f9ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f9c6:	b2da      	uxtb	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f9ce:	2300      	movs	r3, #0
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d101      	bne.n	800f9f2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	e012      	b.n	800fa18 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	2b03      	cmp	r3, #3
 800f9fc:	d10b      	bne.n	800fa16 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa04:	69db      	ldr	r3, [r3, #28]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d005      	beq.n	800fa16 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa10:	69db      	ldr	r3, [r3, #28]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d101      	bne.n	800fa3a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fa36:	2303      	movs	r3, #3
 800fa38:	e014      	b.n	800fa64 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	2b03      	cmp	r3, #3
 800fa44:	d10d      	bne.n	800fa62 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d007      	beq.n	800fa62 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	78fa      	ldrb	r2, [r7, #3]
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fa62:	2300      	movs	r3, #0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	460b      	mov	r3, r1
 800fa76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d101      	bne.n	800fa86 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fa82:	2303      	movs	r3, #3
 800fa84:	e014      	b.n	800fab0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d10d      	bne.n	800faae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d007      	beq.n	800faae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa6:	78fa      	ldrb	r2, [r7, #3]
 800faa8:	4611      	mov	r1, r2
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b082      	sub	sp, #8
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2201      	movs	r2, #1
 800fada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d009      	beq.n	800fafc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	6852      	ldr	r2, [r2, #4]
 800faf4:	b2d2      	uxtb	r2, r2
 800faf6:	4611      	mov	r1, r2
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	4798      	blx	r3
  }

  return USBD_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fb06:	b480      	push	{r7}
 800fb08:	b087      	sub	sp, #28
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fb24:	8a3b      	ldrh	r3, [r7, #16]
 800fb26:	021b      	lsls	r3, r3, #8
 800fb28:	b21a      	sxth	r2, r3
 800fb2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	b21b      	sxth	r3, r3
 800fb32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fb34:	89fb      	ldrh	r3, [r7, #14]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	371c      	adds	r7, #28
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
	...

0800fb44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb5a:	2b40      	cmp	r3, #64	; 0x40
 800fb5c:	d005      	beq.n	800fb6a <USBD_StdDevReq+0x26>
 800fb5e:	2b40      	cmp	r3, #64	; 0x40
 800fb60:	d853      	bhi.n	800fc0a <USBD_StdDevReq+0xc6>
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00b      	beq.n	800fb7e <USBD_StdDevReq+0x3a>
 800fb66:	2b20      	cmp	r3, #32
 800fb68:	d14f      	bne.n	800fc0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb70:	689b      	ldr	r3, [r3, #8]
 800fb72:	6839      	ldr	r1, [r7, #0]
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	4798      	blx	r3
 800fb78:	4603      	mov	r3, r0
 800fb7a:	73fb      	strb	r3, [r7, #15]
      break;
 800fb7c:	e04a      	b.n	800fc14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	785b      	ldrb	r3, [r3, #1]
 800fb82:	2b09      	cmp	r3, #9
 800fb84:	d83b      	bhi.n	800fbfe <USBD_StdDevReq+0xba>
 800fb86:	a201      	add	r2, pc, #4	; (adr r2, 800fb8c <USBD_StdDevReq+0x48>)
 800fb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb8c:	0800fbe1 	.word	0x0800fbe1
 800fb90:	0800fbf5 	.word	0x0800fbf5
 800fb94:	0800fbff 	.word	0x0800fbff
 800fb98:	0800fbeb 	.word	0x0800fbeb
 800fb9c:	0800fbff 	.word	0x0800fbff
 800fba0:	0800fbbf 	.word	0x0800fbbf
 800fba4:	0800fbb5 	.word	0x0800fbb5
 800fba8:	0800fbff 	.word	0x0800fbff
 800fbac:	0800fbd7 	.word	0x0800fbd7
 800fbb0:	0800fbc9 	.word	0x0800fbc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fbb4:	6839      	ldr	r1, [r7, #0]
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f9de 	bl	800ff78 <USBD_GetDescriptor>
          break;
 800fbbc:	e024      	b.n	800fc08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fbbe:	6839      	ldr	r1, [r7, #0]
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f000 fb6d 	bl	80102a0 <USBD_SetAddress>
          break;
 800fbc6:	e01f      	b.n	800fc08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fbac 	bl	8010328 <USBD_SetConfig>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	73fb      	strb	r3, [r7, #15]
          break;
 800fbd4:	e018      	b.n	800fc08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fbd6:	6839      	ldr	r1, [r7, #0]
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fc4b 	bl	8010474 <USBD_GetConfig>
          break;
 800fbde:	e013      	b.n	800fc08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fbe0:	6839      	ldr	r1, [r7, #0]
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 fc7c 	bl	80104e0 <USBD_GetStatus>
          break;
 800fbe8:	e00e      	b.n	800fc08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fbea:	6839      	ldr	r1, [r7, #0]
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 fcab 	bl	8010548 <USBD_SetFeature>
          break;
 800fbf2:	e009      	b.n	800fc08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fbf4:	6839      	ldr	r1, [r7, #0]
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 fcba 	bl	8010570 <USBD_ClrFeature>
          break;
 800fbfc:	e004      	b.n	800fc08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fbfe:	6839      	ldr	r1, [r7, #0]
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 fd11 	bl	8010628 <USBD_CtlError>
          break;
 800fc06:	bf00      	nop
      }
      break;
 800fc08:	e004      	b.n	800fc14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fc0a:	6839      	ldr	r1, [r7, #0]
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f000 fd0b 	bl	8010628 <USBD_CtlError>
      break;
 800fc12:	bf00      	nop
  }

  return ret;
 800fc14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop

0800fc20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc36:	2b40      	cmp	r3, #64	; 0x40
 800fc38:	d005      	beq.n	800fc46 <USBD_StdItfReq+0x26>
 800fc3a:	2b40      	cmp	r3, #64	; 0x40
 800fc3c:	d82f      	bhi.n	800fc9e <USBD_StdItfReq+0x7e>
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d001      	beq.n	800fc46 <USBD_StdItfReq+0x26>
 800fc42:	2b20      	cmp	r3, #32
 800fc44:	d12b      	bne.n	800fc9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	2b02      	cmp	r3, #2
 800fc52:	d81d      	bhi.n	800fc90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	889b      	ldrh	r3, [r3, #4]
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d813      	bhi.n	800fc86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	4798      	blx	r3
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	88db      	ldrh	r3, [r3, #6]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d110      	bne.n	800fc9a <USBD_StdItfReq+0x7a>
 800fc78:	7bfb      	ldrb	r3, [r7, #15]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d10d      	bne.n	800fc9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 fd9d 	bl	80107be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fc84:	e009      	b.n	800fc9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fc86:	6839      	ldr	r1, [r7, #0]
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f000 fccd 	bl	8010628 <USBD_CtlError>
          break;
 800fc8e:	e004      	b.n	800fc9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fc90:	6839      	ldr	r1, [r7, #0]
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fcc8 	bl	8010628 <USBD_CtlError>
          break;
 800fc98:	e000      	b.n	800fc9c <USBD_StdItfReq+0x7c>
          break;
 800fc9a:	bf00      	nop
      }
      break;
 800fc9c:	e004      	b.n	800fca8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fc9e:	6839      	ldr	r1, [r7, #0]
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 fcc1 	bl	8010628 <USBD_CtlError>
      break;
 800fca6:	bf00      	nop
  }

  return ret;
 800fca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3710      	adds	r7, #16
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b084      	sub	sp, #16
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
 800fcba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	889b      	ldrh	r3, [r3, #4]
 800fcc4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fcce:	2b40      	cmp	r3, #64	; 0x40
 800fcd0:	d007      	beq.n	800fce2 <USBD_StdEPReq+0x30>
 800fcd2:	2b40      	cmp	r3, #64	; 0x40
 800fcd4:	f200 8145 	bhi.w	800ff62 <USBD_StdEPReq+0x2b0>
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d00c      	beq.n	800fcf6 <USBD_StdEPReq+0x44>
 800fcdc:	2b20      	cmp	r3, #32
 800fcde:	f040 8140 	bne.w	800ff62 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	6839      	ldr	r1, [r7, #0]
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	4798      	blx	r3
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	73fb      	strb	r3, [r7, #15]
      break;
 800fcf4:	e13a      	b.n	800ff6c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	785b      	ldrb	r3, [r3, #1]
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d007      	beq.n	800fd0e <USBD_StdEPReq+0x5c>
 800fcfe:	2b03      	cmp	r3, #3
 800fd00:	f300 8129 	bgt.w	800ff56 <USBD_StdEPReq+0x2a4>
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d07f      	beq.n	800fe08 <USBD_StdEPReq+0x156>
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d03c      	beq.n	800fd86 <USBD_StdEPReq+0xd4>
 800fd0c:	e123      	b.n	800ff56 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	2b02      	cmp	r3, #2
 800fd18:	d002      	beq.n	800fd20 <USBD_StdEPReq+0x6e>
 800fd1a:	2b03      	cmp	r3, #3
 800fd1c:	d016      	beq.n	800fd4c <USBD_StdEPReq+0x9a>
 800fd1e:	e02c      	b.n	800fd7a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd20:	7bbb      	ldrb	r3, [r7, #14]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00d      	beq.n	800fd42 <USBD_StdEPReq+0x90>
 800fd26:	7bbb      	ldrb	r3, [r7, #14]
 800fd28:	2b80      	cmp	r3, #128	; 0x80
 800fd2a:	d00a      	beq.n	800fd42 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fd2c:	7bbb      	ldrb	r3, [r7, #14]
 800fd2e:	4619      	mov	r1, r3
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f001 f9b7 	bl	80110a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd36:	2180      	movs	r1, #128	; 0x80
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f001 f9b3 	bl	80110a4 <USBD_LL_StallEP>
 800fd3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fd40:	e020      	b.n	800fd84 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fd42:	6839      	ldr	r1, [r7, #0]
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fc6f 	bl	8010628 <USBD_CtlError>
              break;
 800fd4a:	e01b      	b.n	800fd84 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	885b      	ldrh	r3, [r3, #2]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10e      	bne.n	800fd72 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fd54:	7bbb      	ldrb	r3, [r7, #14]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00b      	beq.n	800fd72 <USBD_StdEPReq+0xc0>
 800fd5a:	7bbb      	ldrb	r3, [r7, #14]
 800fd5c:	2b80      	cmp	r3, #128	; 0x80
 800fd5e:	d008      	beq.n	800fd72 <USBD_StdEPReq+0xc0>
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	88db      	ldrh	r3, [r3, #6]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d104      	bne.n	800fd72 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fd68:	7bbb      	ldrb	r3, [r7, #14]
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f001 f999 	bl	80110a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f000 fd23 	bl	80107be <USBD_CtlSendStatus>

              break;
 800fd78:	e004      	b.n	800fd84 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fd7a:	6839      	ldr	r1, [r7, #0]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 fc53 	bl	8010628 <USBD_CtlError>
              break;
 800fd82:	bf00      	nop
          }
          break;
 800fd84:	e0ec      	b.n	800ff60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d002      	beq.n	800fd98 <USBD_StdEPReq+0xe6>
 800fd92:	2b03      	cmp	r3, #3
 800fd94:	d016      	beq.n	800fdc4 <USBD_StdEPReq+0x112>
 800fd96:	e030      	b.n	800fdfa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd98:	7bbb      	ldrb	r3, [r7, #14]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00d      	beq.n	800fdba <USBD_StdEPReq+0x108>
 800fd9e:	7bbb      	ldrb	r3, [r7, #14]
 800fda0:	2b80      	cmp	r3, #128	; 0x80
 800fda2:	d00a      	beq.n	800fdba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fda4:	7bbb      	ldrb	r3, [r7, #14]
 800fda6:	4619      	mov	r1, r3
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f001 f97b 	bl	80110a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdae:	2180      	movs	r1, #128	; 0x80
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f001 f977 	bl	80110a4 <USBD_LL_StallEP>
 800fdb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fdb8:	e025      	b.n	800fe06 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fdba:	6839      	ldr	r1, [r7, #0]
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 fc33 	bl	8010628 <USBD_CtlError>
              break;
 800fdc2:	e020      	b.n	800fe06 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	885b      	ldrh	r3, [r3, #2]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d11b      	bne.n	800fe04 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fdcc:	7bbb      	ldrb	r3, [r7, #14]
 800fdce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d004      	beq.n	800fde0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fdd6:	7bbb      	ldrb	r3, [r7, #14]
 800fdd8:	4619      	mov	r1, r3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f001 f998 	bl	8011110 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 fcec 	bl	80107be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	6839      	ldr	r1, [r7, #0]
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	4798      	blx	r3
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fdf8:	e004      	b.n	800fe04 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fdfa:	6839      	ldr	r1, [r7, #0]
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 fc13 	bl	8010628 <USBD_CtlError>
              break;
 800fe02:	e000      	b.n	800fe06 <USBD_StdEPReq+0x154>
              break;
 800fe04:	bf00      	nop
          }
          break;
 800fe06:	e0ab      	b.n	800ff60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d002      	beq.n	800fe1a <USBD_StdEPReq+0x168>
 800fe14:	2b03      	cmp	r3, #3
 800fe16:	d032      	beq.n	800fe7e <USBD_StdEPReq+0x1cc>
 800fe18:	e097      	b.n	800ff4a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe1a:	7bbb      	ldrb	r3, [r7, #14]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d007      	beq.n	800fe30 <USBD_StdEPReq+0x17e>
 800fe20:	7bbb      	ldrb	r3, [r7, #14]
 800fe22:	2b80      	cmp	r3, #128	; 0x80
 800fe24:	d004      	beq.n	800fe30 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fe26:	6839      	ldr	r1, [r7, #0]
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fbfd 	bl	8010628 <USBD_CtlError>
                break;
 800fe2e:	e091      	b.n	800ff54 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	da0b      	bge.n	800fe50 <USBD_StdEPReq+0x19e>
 800fe38:	7bbb      	ldrb	r3, [r7, #14]
 800fe3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe3e:	4613      	mov	r3, r2
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	4413      	add	r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	3310      	adds	r3, #16
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	4413      	add	r3, r2
 800fe4c:	3304      	adds	r3, #4
 800fe4e:	e00b      	b.n	800fe68 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe50:	7bbb      	ldrb	r3, [r7, #14]
 800fe52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe56:	4613      	mov	r3, r2
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	4413      	add	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	4413      	add	r3, r2
 800fe66:	3304      	adds	r3, #4
 800fe68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	2202      	movs	r2, #2
 800fe74:	4619      	mov	r1, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 fc47 	bl	801070a <USBD_CtlSendData>
              break;
 800fe7c:	e06a      	b.n	800ff54 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fe7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	da11      	bge.n	800feaa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
 800fe88:	f003 020f 	and.w	r2, r3, #15
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	4413      	add	r3, r2
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	440b      	add	r3, r1
 800fe98:	3324      	adds	r3, #36	; 0x24
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d117      	bne.n	800fed0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fea0:	6839      	ldr	r1, [r7, #0]
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 fbc0 	bl	8010628 <USBD_CtlError>
                  break;
 800fea8:	e054      	b.n	800ff54 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800feaa:	7bbb      	ldrb	r3, [r7, #14]
 800feac:	f003 020f 	and.w	r2, r3, #15
 800feb0:	6879      	ldr	r1, [r7, #4]
 800feb2:	4613      	mov	r3, r2
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	440b      	add	r3, r1
 800febc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d104      	bne.n	800fed0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fec6:	6839      	ldr	r1, [r7, #0]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fbad 	bl	8010628 <USBD_CtlError>
                  break;
 800fece:	e041      	b.n	800ff54 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	da0b      	bge.n	800fef0 <USBD_StdEPReq+0x23e>
 800fed8:	7bbb      	ldrb	r3, [r7, #14]
 800feda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fede:	4613      	mov	r3, r2
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	4413      	add	r3, r2
 800fee4:	009b      	lsls	r3, r3, #2
 800fee6:	3310      	adds	r3, #16
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	4413      	add	r3, r2
 800feec:	3304      	adds	r3, #4
 800feee:	e00b      	b.n	800ff08 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fef0:	7bbb      	ldrb	r3, [r7, #14]
 800fef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fef6:	4613      	mov	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	4413      	add	r3, r2
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	4413      	add	r3, r2
 800ff06:	3304      	adds	r3, #4
 800ff08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ff0a:	7bbb      	ldrb	r3, [r7, #14]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d002      	beq.n	800ff16 <USBD_StdEPReq+0x264>
 800ff10:	7bbb      	ldrb	r3, [r7, #14]
 800ff12:	2b80      	cmp	r3, #128	; 0x80
 800ff14:	d103      	bne.n	800ff1e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	601a      	str	r2, [r3, #0]
 800ff1c:	e00e      	b.n	800ff3c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ff1e:	7bbb      	ldrb	r3, [r7, #14]
 800ff20:	4619      	mov	r1, r3
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f001 f92a 	bl	801117c <USBD_LL_IsStallEP>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d003      	beq.n	800ff36 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	2201      	movs	r2, #1
 800ff32:	601a      	str	r2, [r3, #0]
 800ff34:	e002      	b.n	800ff3c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	2202      	movs	r2, #2
 800ff40:	4619      	mov	r1, r3
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 fbe1 	bl	801070a <USBD_CtlSendData>
              break;
 800ff48:	e004      	b.n	800ff54 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ff4a:	6839      	ldr	r1, [r7, #0]
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 fb6b 	bl	8010628 <USBD_CtlError>
              break;
 800ff52:	bf00      	nop
          }
          break;
 800ff54:	e004      	b.n	800ff60 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ff56:	6839      	ldr	r1, [r7, #0]
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 fb65 	bl	8010628 <USBD_CtlError>
          break;
 800ff5e:	bf00      	nop
      }
      break;
 800ff60:	e004      	b.n	800ff6c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ff62:	6839      	ldr	r1, [r7, #0]
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 fb5f 	bl	8010628 <USBD_CtlError>
      break;
 800ff6a:	bf00      	nop
  }

  return ret;
 800ff6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
	...

0800ff78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ff82:	2300      	movs	r3, #0
 800ff84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	885b      	ldrh	r3, [r3, #2]
 800ff92:	0a1b      	lsrs	r3, r3, #8
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	3b01      	subs	r3, #1
 800ff98:	2b0e      	cmp	r3, #14
 800ff9a:	f200 8152 	bhi.w	8010242 <USBD_GetDescriptor+0x2ca>
 800ff9e:	a201      	add	r2, pc, #4	; (adr r2, 800ffa4 <USBD_GetDescriptor+0x2c>)
 800ffa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa4:	08010015 	.word	0x08010015
 800ffa8:	0801002d 	.word	0x0801002d
 800ffac:	0801006d 	.word	0x0801006d
 800ffb0:	08010243 	.word	0x08010243
 800ffb4:	08010243 	.word	0x08010243
 800ffb8:	080101e3 	.word	0x080101e3
 800ffbc:	0801020f 	.word	0x0801020f
 800ffc0:	08010243 	.word	0x08010243
 800ffc4:	08010243 	.word	0x08010243
 800ffc8:	08010243 	.word	0x08010243
 800ffcc:	08010243 	.word	0x08010243
 800ffd0:	08010243 	.word	0x08010243
 800ffd4:	08010243 	.word	0x08010243
 800ffd8:	08010243 	.word	0x08010243
 800ffdc:	0800ffe1 	.word	0x0800ffe1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffe6:	69db      	ldr	r3, [r3, #28]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00b      	beq.n	8010004 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fff2:	69db      	ldr	r3, [r3, #28]
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	7c12      	ldrb	r2, [r2, #16]
 800fff8:	f107 0108 	add.w	r1, r7, #8
 800fffc:	4610      	mov	r0, r2
 800fffe:	4798      	blx	r3
 8010000:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010002:	e126      	b.n	8010252 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010004:	6839      	ldr	r1, [r7, #0]
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 fb0e 	bl	8010628 <USBD_CtlError>
        err++;
 801000c:	7afb      	ldrb	r3, [r7, #11]
 801000e:	3301      	adds	r3, #1
 8010010:	72fb      	strb	r3, [r7, #11]
      break;
 8010012:	e11e      	b.n	8010252 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	7c12      	ldrb	r2, [r2, #16]
 8010020:	f107 0108 	add.w	r1, r7, #8
 8010024:	4610      	mov	r0, r2
 8010026:	4798      	blx	r3
 8010028:	60f8      	str	r0, [r7, #12]
      break;
 801002a:	e112      	b.n	8010252 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	7c1b      	ldrb	r3, [r3, #16]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d10d      	bne.n	8010050 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801003a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801003c:	f107 0208 	add.w	r2, r7, #8
 8010040:	4610      	mov	r0, r2
 8010042:	4798      	blx	r3
 8010044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	3301      	adds	r3, #1
 801004a:	2202      	movs	r2, #2
 801004c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801004e:	e100      	b.n	8010252 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010058:	f107 0208 	add.w	r2, r7, #8
 801005c:	4610      	mov	r0, r2
 801005e:	4798      	blx	r3
 8010060:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	3301      	adds	r3, #1
 8010066:	2202      	movs	r2, #2
 8010068:	701a      	strb	r2, [r3, #0]
      break;
 801006a:	e0f2      	b.n	8010252 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	885b      	ldrh	r3, [r3, #2]
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b05      	cmp	r3, #5
 8010074:	f200 80ac 	bhi.w	80101d0 <USBD_GetDescriptor+0x258>
 8010078:	a201      	add	r2, pc, #4	; (adr r2, 8010080 <USBD_GetDescriptor+0x108>)
 801007a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007e:	bf00      	nop
 8010080:	08010099 	.word	0x08010099
 8010084:	080100cd 	.word	0x080100cd
 8010088:	08010101 	.word	0x08010101
 801008c:	08010135 	.word	0x08010135
 8010090:	08010169 	.word	0x08010169
 8010094:	0801019d 	.word	0x0801019d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d00b      	beq.n	80100bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	7c12      	ldrb	r2, [r2, #16]
 80100b0:	f107 0108 	add.w	r1, r7, #8
 80100b4:	4610      	mov	r0, r2
 80100b6:	4798      	blx	r3
 80100b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100ba:	e091      	b.n	80101e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 fab2 	bl	8010628 <USBD_CtlError>
            err++;
 80100c4:	7afb      	ldrb	r3, [r7, #11]
 80100c6:	3301      	adds	r3, #1
 80100c8:	72fb      	strb	r3, [r7, #11]
          break;
 80100ca:	e089      	b.n	80101e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00b      	beq.n	80100f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100de:	689b      	ldr	r3, [r3, #8]
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	7c12      	ldrb	r2, [r2, #16]
 80100e4:	f107 0108 	add.w	r1, r7, #8
 80100e8:	4610      	mov	r0, r2
 80100ea:	4798      	blx	r3
 80100ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100ee:	e077      	b.n	80101e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100f0:	6839      	ldr	r1, [r7, #0]
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 fa98 	bl	8010628 <USBD_CtlError>
            err++;
 80100f8:	7afb      	ldrb	r3, [r7, #11]
 80100fa:	3301      	adds	r3, #1
 80100fc:	72fb      	strb	r3, [r7, #11]
          break;
 80100fe:	e06f      	b.n	80101e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00b      	beq.n	8010124 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	7c12      	ldrb	r2, [r2, #16]
 8010118:	f107 0108 	add.w	r1, r7, #8
 801011c:	4610      	mov	r0, r2
 801011e:	4798      	blx	r3
 8010120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010122:	e05d      	b.n	80101e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 fa7e 	bl	8010628 <USBD_CtlError>
            err++;
 801012c:	7afb      	ldrb	r3, [r7, #11]
 801012e:	3301      	adds	r3, #1
 8010130:	72fb      	strb	r3, [r7, #11]
          break;
 8010132:	e055      	b.n	80101e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d00b      	beq.n	8010158 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010146:	691b      	ldr	r3, [r3, #16]
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	7c12      	ldrb	r2, [r2, #16]
 801014c:	f107 0108 	add.w	r1, r7, #8
 8010150:	4610      	mov	r0, r2
 8010152:	4798      	blx	r3
 8010154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010156:	e043      	b.n	80101e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010158:	6839      	ldr	r1, [r7, #0]
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 fa64 	bl	8010628 <USBD_CtlError>
            err++;
 8010160:	7afb      	ldrb	r3, [r7, #11]
 8010162:	3301      	adds	r3, #1
 8010164:	72fb      	strb	r3, [r7, #11]
          break;
 8010166:	e03b      	b.n	80101e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801016e:	695b      	ldr	r3, [r3, #20]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d00b      	beq.n	801018c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801017a:	695b      	ldr	r3, [r3, #20]
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	7c12      	ldrb	r2, [r2, #16]
 8010180:	f107 0108 	add.w	r1, r7, #8
 8010184:	4610      	mov	r0, r2
 8010186:	4798      	blx	r3
 8010188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801018a:	e029      	b.n	80101e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801018c:	6839      	ldr	r1, [r7, #0]
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 fa4a 	bl	8010628 <USBD_CtlError>
            err++;
 8010194:	7afb      	ldrb	r3, [r7, #11]
 8010196:	3301      	adds	r3, #1
 8010198:	72fb      	strb	r3, [r7, #11]
          break;
 801019a:	e021      	b.n	80101e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101a2:	699b      	ldr	r3, [r3, #24]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d00b      	beq.n	80101c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101ae:	699b      	ldr	r3, [r3, #24]
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	7c12      	ldrb	r2, [r2, #16]
 80101b4:	f107 0108 	add.w	r1, r7, #8
 80101b8:	4610      	mov	r0, r2
 80101ba:	4798      	blx	r3
 80101bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101be:	e00f      	b.n	80101e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80101c0:	6839      	ldr	r1, [r7, #0]
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 fa30 	bl	8010628 <USBD_CtlError>
            err++;
 80101c8:	7afb      	ldrb	r3, [r7, #11]
 80101ca:	3301      	adds	r3, #1
 80101cc:	72fb      	strb	r3, [r7, #11]
          break;
 80101ce:	e007      	b.n	80101e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80101d0:	6839      	ldr	r1, [r7, #0]
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 fa28 	bl	8010628 <USBD_CtlError>
          err++;
 80101d8:	7afb      	ldrb	r3, [r7, #11]
 80101da:	3301      	adds	r3, #1
 80101dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80101de:	bf00      	nop
      }
      break;
 80101e0:	e037      	b.n	8010252 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	7c1b      	ldrb	r3, [r3, #16]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d109      	bne.n	80101fe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101f2:	f107 0208 	add.w	r2, r7, #8
 80101f6:	4610      	mov	r0, r2
 80101f8:	4798      	blx	r3
 80101fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80101fc:	e029      	b.n	8010252 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80101fe:	6839      	ldr	r1, [r7, #0]
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 fa11 	bl	8010628 <USBD_CtlError>
        err++;
 8010206:	7afb      	ldrb	r3, [r7, #11]
 8010208:	3301      	adds	r3, #1
 801020a:	72fb      	strb	r3, [r7, #11]
      break;
 801020c:	e021      	b.n	8010252 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	7c1b      	ldrb	r3, [r3, #16]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d10d      	bne.n	8010232 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801021e:	f107 0208 	add.w	r2, r7, #8
 8010222:	4610      	mov	r0, r2
 8010224:	4798      	blx	r3
 8010226:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	3301      	adds	r3, #1
 801022c:	2207      	movs	r2, #7
 801022e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010230:	e00f      	b.n	8010252 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010232:	6839      	ldr	r1, [r7, #0]
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 f9f7 	bl	8010628 <USBD_CtlError>
        err++;
 801023a:	7afb      	ldrb	r3, [r7, #11]
 801023c:	3301      	adds	r3, #1
 801023e:	72fb      	strb	r3, [r7, #11]
      break;
 8010240:	e007      	b.n	8010252 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010242:	6839      	ldr	r1, [r7, #0]
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 f9ef 	bl	8010628 <USBD_CtlError>
      err++;
 801024a:	7afb      	ldrb	r3, [r7, #11]
 801024c:	3301      	adds	r3, #1
 801024e:	72fb      	strb	r3, [r7, #11]
      break;
 8010250:	bf00      	nop
  }

  if (err != 0U)
 8010252:	7afb      	ldrb	r3, [r7, #11]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d11e      	bne.n	8010296 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	88db      	ldrh	r3, [r3, #6]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d016      	beq.n	801028e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010260:	893b      	ldrh	r3, [r7, #8]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d00e      	beq.n	8010284 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	88da      	ldrh	r2, [r3, #6]
 801026a:	893b      	ldrh	r3, [r7, #8]
 801026c:	4293      	cmp	r3, r2
 801026e:	bf28      	it	cs
 8010270:	4613      	movcs	r3, r2
 8010272:	b29b      	uxth	r3, r3
 8010274:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010276:	893b      	ldrh	r3, [r7, #8]
 8010278:	461a      	mov	r2, r3
 801027a:	68f9      	ldr	r1, [r7, #12]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fa44 	bl	801070a <USBD_CtlSendData>
 8010282:	e009      	b.n	8010298 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010284:	6839      	ldr	r1, [r7, #0]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 f9ce 	bl	8010628 <USBD_CtlError>
 801028c:	e004      	b.n	8010298 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 fa95 	bl	80107be <USBD_CtlSendStatus>
 8010294:	e000      	b.n	8010298 <USBD_GetDescriptor+0x320>
    return;
 8010296:	bf00      	nop
  }
}
 8010298:	3710      	adds	r7, #16
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop

080102a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	889b      	ldrh	r3, [r3, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d131      	bne.n	8010316 <USBD_SetAddress+0x76>
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	88db      	ldrh	r3, [r3, #6]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d12d      	bne.n	8010316 <USBD_SetAddress+0x76>
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	885b      	ldrh	r3, [r3, #2]
 80102be:	2b7f      	cmp	r3, #127	; 0x7f
 80102c0:	d829      	bhi.n	8010316 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	885b      	ldrh	r3, [r3, #2]
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	2b03      	cmp	r3, #3
 80102d8:	d104      	bne.n	80102e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80102da:	6839      	ldr	r1, [r7, #0]
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f000 f9a3 	bl	8010628 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102e2:	e01d      	b.n	8010320 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	7bfa      	ldrb	r2, [r7, #15]
 80102e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80102ec:	7bfb      	ldrb	r3, [r7, #15]
 80102ee:	4619      	mov	r1, r3
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 ff6f 	bl	80111d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 fa61 	bl	80107be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80102fc:	7bfb      	ldrb	r3, [r7, #15]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d004      	beq.n	801030c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2202      	movs	r2, #2
 8010306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801030a:	e009      	b.n	8010320 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010314:	e004      	b.n	8010320 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010316:	6839      	ldr	r1, [r7, #0]
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f985 	bl	8010628 <USBD_CtlError>
  }
}
 801031e:	bf00      	nop
 8010320:	bf00      	nop
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010332:	2300      	movs	r3, #0
 8010334:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	885b      	ldrh	r3, [r3, #2]
 801033a:	b2da      	uxtb	r2, r3
 801033c:	4b4c      	ldr	r3, [pc, #304]	; (8010470 <USBD_SetConfig+0x148>)
 801033e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010340:	4b4b      	ldr	r3, [pc, #300]	; (8010470 <USBD_SetConfig+0x148>)
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	2b01      	cmp	r3, #1
 8010346:	d905      	bls.n	8010354 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010348:	6839      	ldr	r1, [r7, #0]
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 f96c 	bl	8010628 <USBD_CtlError>
    return USBD_FAIL;
 8010350:	2303      	movs	r3, #3
 8010352:	e088      	b.n	8010466 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b02      	cmp	r3, #2
 801035e:	d002      	beq.n	8010366 <USBD_SetConfig+0x3e>
 8010360:	2b03      	cmp	r3, #3
 8010362:	d025      	beq.n	80103b0 <USBD_SetConfig+0x88>
 8010364:	e071      	b.n	801044a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010366:	4b42      	ldr	r3, [pc, #264]	; (8010470 <USBD_SetConfig+0x148>)
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d01c      	beq.n	80103a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801036e:	4b40      	ldr	r3, [pc, #256]	; (8010470 <USBD_SetConfig+0x148>)
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	461a      	mov	r2, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010378:	4b3d      	ldr	r3, [pc, #244]	; (8010470 <USBD_SetConfig+0x148>)
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	4619      	mov	r1, r3
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7ff f91e 	bl	800f5c0 <USBD_SetClassConfig>
 8010384:	4603      	mov	r3, r0
 8010386:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010388:	7bfb      	ldrb	r3, [r7, #15]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d004      	beq.n	8010398 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 f949 	bl	8010628 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010396:	e065      	b.n	8010464 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 fa10 	bl	80107be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2203      	movs	r2, #3
 80103a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80103a6:	e05d      	b.n	8010464 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 fa08 	bl	80107be <USBD_CtlSendStatus>
      break;
 80103ae:	e059      	b.n	8010464 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80103b0:	4b2f      	ldr	r3, [pc, #188]	; (8010470 <USBD_SetConfig+0x148>)
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d112      	bne.n	80103de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2202      	movs	r2, #2
 80103bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80103c0:	4b2b      	ldr	r3, [pc, #172]	; (8010470 <USBD_SetConfig+0x148>)
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	461a      	mov	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80103ca:	4b29      	ldr	r3, [pc, #164]	; (8010470 <USBD_SetConfig+0x148>)
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	4619      	mov	r1, r3
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff f911 	bl	800f5f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f9f1 	bl	80107be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80103dc:	e042      	b.n	8010464 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80103de:	4b24      	ldr	r3, [pc, #144]	; (8010470 <USBD_SetConfig+0x148>)
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	461a      	mov	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d02a      	beq.n	8010442 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	4619      	mov	r1, r3
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f7ff f8ff 	bl	800f5f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80103fa:	4b1d      	ldr	r3, [pc, #116]	; (8010470 <USBD_SetConfig+0x148>)
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	461a      	mov	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010404:	4b1a      	ldr	r3, [pc, #104]	; (8010470 <USBD_SetConfig+0x148>)
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	4619      	mov	r1, r3
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff f8d8 	bl	800f5c0 <USBD_SetClassConfig>
 8010410:	4603      	mov	r3, r0
 8010412:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010414:	7bfb      	ldrb	r3, [r7, #15]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00f      	beq.n	801043a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f000 f903 	bl	8010628 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	b2db      	uxtb	r3, r3
 8010428:	4619      	mov	r1, r3
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7ff f8e4 	bl	800f5f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2202      	movs	r2, #2
 8010434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010438:	e014      	b.n	8010464 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 f9bf 	bl	80107be <USBD_CtlSendStatus>
      break;
 8010440:	e010      	b.n	8010464 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 f9bb 	bl	80107be <USBD_CtlSendStatus>
      break;
 8010448:	e00c      	b.n	8010464 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801044a:	6839      	ldr	r1, [r7, #0]
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f000 f8eb 	bl	8010628 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010452:	4b07      	ldr	r3, [pc, #28]	; (8010470 <USBD_SetConfig+0x148>)
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	4619      	mov	r1, r3
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7ff f8cd 	bl	800f5f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801045e:	2303      	movs	r3, #3
 8010460:	73fb      	strb	r3, [r7, #15]
      break;
 8010462:	bf00      	nop
  }

  return ret;
 8010464:	7bfb      	ldrb	r3, [r7, #15]
}
 8010466:	4618      	mov	r0, r3
 8010468:	3710      	adds	r7, #16
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	20000ab0 	.word	0x20000ab0

08010474 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	88db      	ldrh	r3, [r3, #6]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d004      	beq.n	8010490 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010486:	6839      	ldr	r1, [r7, #0]
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 f8cd 	bl	8010628 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801048e:	e023      	b.n	80104d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010496:	b2db      	uxtb	r3, r3
 8010498:	2b02      	cmp	r3, #2
 801049a:	dc02      	bgt.n	80104a2 <USBD_GetConfig+0x2e>
 801049c:	2b00      	cmp	r3, #0
 801049e:	dc03      	bgt.n	80104a8 <USBD_GetConfig+0x34>
 80104a0:	e015      	b.n	80104ce <USBD_GetConfig+0x5a>
 80104a2:	2b03      	cmp	r3, #3
 80104a4:	d00b      	beq.n	80104be <USBD_GetConfig+0x4a>
 80104a6:	e012      	b.n	80104ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	3308      	adds	r3, #8
 80104b2:	2201      	movs	r2, #1
 80104b4:	4619      	mov	r1, r3
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 f927 	bl	801070a <USBD_CtlSendData>
        break;
 80104bc:	e00c      	b.n	80104d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	3304      	adds	r3, #4
 80104c2:	2201      	movs	r2, #1
 80104c4:	4619      	mov	r1, r3
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f91f 	bl	801070a <USBD_CtlSendData>
        break;
 80104cc:	e004      	b.n	80104d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80104ce:	6839      	ldr	r1, [r7, #0]
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f000 f8a9 	bl	8010628 <USBD_CtlError>
        break;
 80104d6:	bf00      	nop
}
 80104d8:	bf00      	nop
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	3b01      	subs	r3, #1
 80104f4:	2b02      	cmp	r3, #2
 80104f6:	d81e      	bhi.n	8010536 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	88db      	ldrh	r3, [r3, #6]
 80104fc:	2b02      	cmp	r3, #2
 80104fe:	d004      	beq.n	801050a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010500:	6839      	ldr	r1, [r7, #0]
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f890 	bl	8010628 <USBD_CtlError>
        break;
 8010508:	e01a      	b.n	8010540 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2201      	movs	r2, #1
 801050e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010516:	2b00      	cmp	r3, #0
 8010518:	d005      	beq.n	8010526 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	f043 0202 	orr.w	r2, r3, #2
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	330c      	adds	r3, #12
 801052a:	2202      	movs	r2, #2
 801052c:	4619      	mov	r1, r3
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 f8eb 	bl	801070a <USBD_CtlSendData>
      break;
 8010534:	e004      	b.n	8010540 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010536:	6839      	ldr	r1, [r7, #0]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 f875 	bl	8010628 <USBD_CtlError>
      break;
 801053e:	bf00      	nop
  }
}
 8010540:	bf00      	nop
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	885b      	ldrh	r3, [r3, #2]
 8010556:	2b01      	cmp	r3, #1
 8010558:	d106      	bne.n	8010568 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2201      	movs	r2, #1
 801055e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 f92b 	bl	80107be <USBD_CtlSendStatus>
  }
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010580:	b2db      	uxtb	r3, r3
 8010582:	3b01      	subs	r3, #1
 8010584:	2b02      	cmp	r3, #2
 8010586:	d80b      	bhi.n	80105a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	885b      	ldrh	r3, [r3, #2]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d10c      	bne.n	80105aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f000 f910 	bl	80107be <USBD_CtlSendStatus>
      }
      break;
 801059e:	e004      	b.n	80105aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80105a0:	6839      	ldr	r1, [r7, #0]
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 f840 	bl	8010628 <USBD_CtlError>
      break;
 80105a8:	e000      	b.n	80105ac <USBD_ClrFeature+0x3c>
      break;
 80105aa:	bf00      	nop
  }
}
 80105ac:	bf00      	nop
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	781a      	ldrb	r2, [r3, #0]
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	3301      	adds	r3, #1
 80105ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	781a      	ldrb	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	3301      	adds	r3, #1
 80105dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f7ff fa91 	bl	800fb06 <SWAPBYTE>
 80105e4:	4603      	mov	r3, r0
 80105e6:	461a      	mov	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	3301      	adds	r3, #1
 80105f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3301      	adds	r3, #1
 80105f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f7ff fa84 	bl	800fb06 <SWAPBYTE>
 80105fe:	4603      	mov	r3, r0
 8010600:	461a      	mov	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	3301      	adds	r3, #1
 801060a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	3301      	adds	r3, #1
 8010610:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f7ff fa77 	bl	800fb06 <SWAPBYTE>
 8010618:	4603      	mov	r3, r0
 801061a:	461a      	mov	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	80da      	strh	r2, [r3, #6]
}
 8010620:	bf00      	nop
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010632:	2180      	movs	r1, #128	; 0x80
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f000 fd35 	bl	80110a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801063a:	2100      	movs	r1, #0
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 fd31 	bl	80110a4 <USBD_LL_StallEP>
}
 8010642:	bf00      	nop
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}

0801064a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801064a:	b580      	push	{r7, lr}
 801064c:	b086      	sub	sp, #24
 801064e:	af00      	add	r7, sp, #0
 8010650:	60f8      	str	r0, [r7, #12]
 8010652:	60b9      	str	r1, [r7, #8]
 8010654:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010656:	2300      	movs	r3, #0
 8010658:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d036      	beq.n	80106ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010664:	6938      	ldr	r0, [r7, #16]
 8010666:	f000 f836 	bl	80106d6 <USBD_GetLen>
 801066a:	4603      	mov	r3, r0
 801066c:	3301      	adds	r3, #1
 801066e:	b29b      	uxth	r3, r3
 8010670:	005b      	lsls	r3, r3, #1
 8010672:	b29a      	uxth	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010678:	7dfb      	ldrb	r3, [r7, #23]
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	4413      	add	r3, r2
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	7812      	ldrb	r2, [r2, #0]
 8010682:	701a      	strb	r2, [r3, #0]
  idx++;
 8010684:	7dfb      	ldrb	r3, [r7, #23]
 8010686:	3301      	adds	r3, #1
 8010688:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801068a:	7dfb      	ldrb	r3, [r7, #23]
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	4413      	add	r3, r2
 8010690:	2203      	movs	r2, #3
 8010692:	701a      	strb	r2, [r3, #0]
  idx++;
 8010694:	7dfb      	ldrb	r3, [r7, #23]
 8010696:	3301      	adds	r3, #1
 8010698:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801069a:	e013      	b.n	80106c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801069c:	7dfb      	ldrb	r3, [r7, #23]
 801069e:	68ba      	ldr	r2, [r7, #8]
 80106a0:	4413      	add	r3, r2
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	7812      	ldrb	r2, [r2, #0]
 80106a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	3301      	adds	r3, #1
 80106ac:	613b      	str	r3, [r7, #16]
    idx++;
 80106ae:	7dfb      	ldrb	r3, [r7, #23]
 80106b0:	3301      	adds	r3, #1
 80106b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80106b4:	7dfb      	ldrb	r3, [r7, #23]
 80106b6:	68ba      	ldr	r2, [r7, #8]
 80106b8:	4413      	add	r3, r2
 80106ba:	2200      	movs	r2, #0
 80106bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80106be:	7dfb      	ldrb	r3, [r7, #23]
 80106c0:	3301      	adds	r3, #1
 80106c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1e7      	bne.n	801069c <USBD_GetString+0x52>
 80106cc:	e000      	b.n	80106d0 <USBD_GetString+0x86>
    return;
 80106ce:	bf00      	nop
  }
}
 80106d0:	3718      	adds	r7, #24
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b085      	sub	sp, #20
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80106de:	2300      	movs	r3, #0
 80106e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80106e6:	e005      	b.n	80106f4 <USBD_GetLen+0x1e>
  {
    len++;
 80106e8:	7bfb      	ldrb	r3, [r7, #15]
 80106ea:	3301      	adds	r3, #1
 80106ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	3301      	adds	r3, #1
 80106f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1f5      	bne.n	80106e8 <USBD_GetLen+0x12>
  }

  return len;
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3714      	adds	r7, #20
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr

0801070a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b084      	sub	sp, #16
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	2202      	movs	r2, #2
 801071a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	2100      	movs	r1, #0
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	f000 fd85 	bl	8011240 <USBD_LL_Transmit>

  return USBD_OK;
 8010736:	2300      	movs	r3, #0
}
 8010738:	4618      	mov	r0, r3
 801073a:	3710      	adds	r7, #16
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	2100      	movs	r1, #0
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f000 fd74 	bl	8011240 <USBD_LL_Transmit>

  return USBD_OK;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b084      	sub	sp, #16
 8010766:	af00      	add	r7, sp, #0
 8010768:	60f8      	str	r0, [r7, #12]
 801076a:	60b9      	str	r1, [r7, #8]
 801076c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2203      	movs	r2, #3
 8010772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	687a      	ldr	r2, [r7, #4]
 8010782:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	2100      	movs	r1, #0
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f000 fd8f 	bl	80112b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3710      	adds	r7, #16
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	60b9      	str	r1, [r7, #8]
 80107a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	2100      	movs	r1, #0
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	f000 fd7e 	bl	80112b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80107b4:	2300      	movs	r3, #0
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3710      	adds	r7, #16
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b082      	sub	sp, #8
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2204      	movs	r2, #4
 80107ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80107ce:	2300      	movs	r3, #0
 80107d0:	2200      	movs	r2, #0
 80107d2:	2100      	movs	r1, #0
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 fd33 	bl	8011240 <USBD_LL_Transmit>

  return USBD_OK;
 80107da:	2300      	movs	r3, #0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2205      	movs	r2, #5
 80107f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80107f4:	2300      	movs	r3, #0
 80107f6:	2200      	movs	r2, #0
 80107f8:	2100      	movs	r1, #0
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 fd58 	bl	80112b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
	...

0801080c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010810:	2200      	movs	r2, #0
 8010812:	4912      	ldr	r1, [pc, #72]	; (801085c <MX_USB_DEVICE_Init+0x50>)
 8010814:	4812      	ldr	r0, [pc, #72]	; (8010860 <MX_USB_DEVICE_Init+0x54>)
 8010816:	f7fe fe65 	bl	800f4e4 <USBD_Init>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d001      	beq.n	8010824 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010820:	f7f0 ffae 	bl	8001780 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010824:	490f      	ldr	r1, [pc, #60]	; (8010864 <MX_USB_DEVICE_Init+0x58>)
 8010826:	480e      	ldr	r0, [pc, #56]	; (8010860 <MX_USB_DEVICE_Init+0x54>)
 8010828:	f7fe fe8c 	bl	800f544 <USBD_RegisterClass>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d001      	beq.n	8010836 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010832:	f7f0 ffa5 	bl	8001780 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010836:	490c      	ldr	r1, [pc, #48]	; (8010868 <MX_USB_DEVICE_Init+0x5c>)
 8010838:	4809      	ldr	r0, [pc, #36]	; (8010860 <MX_USB_DEVICE_Init+0x54>)
 801083a:	f7fe fddd 	bl	800f3f8 <USBD_CDC_RegisterInterface>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d001      	beq.n	8010848 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010844:	f7f0 ff9c 	bl	8001780 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010848:	4805      	ldr	r0, [pc, #20]	; (8010860 <MX_USB_DEVICE_Init+0x54>)
 801084a:	f7fe fea2 	bl	800f592 <USBD_Start>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d001      	beq.n	8010858 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010854:	f7f0 ff94 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010858:	bf00      	nop
 801085a:	bd80      	pop	{r7, pc}
 801085c:	200001fc 	.word	0x200001fc
 8010860:	20000ab4 	.word	0x20000ab4
 8010864:	200000e4 	.word	0x200000e4
 8010868:	200001e8 	.word	0x200001e8

0801086c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010870:	2200      	movs	r2, #0
 8010872:	4905      	ldr	r1, [pc, #20]	; (8010888 <CDC_Init_FS+0x1c>)
 8010874:	4805      	ldr	r0, [pc, #20]	; (801088c <CDC_Init_FS+0x20>)
 8010876:	f7fe fdd4 	bl	800f422 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801087a:	4905      	ldr	r1, [pc, #20]	; (8010890 <CDC_Init_FS+0x24>)
 801087c:	4803      	ldr	r0, [pc, #12]	; (801088c <CDC_Init_FS+0x20>)
 801087e:	f7fe fdee 	bl	800f45e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010882:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010884:	4618      	mov	r0, r3
 8010886:	bd80      	pop	{r7, pc}
 8010888:	20001584 	.word	0x20001584
 801088c:	20000ab4 	.word	0x20000ab4
 8010890:	20000d84 	.word	0x20000d84

08010894 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010894:	b480      	push	{r7}
 8010896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010898:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801089a:	4618      	mov	r0, r3
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	6039      	str	r1, [r7, #0]
 80108ae:	71fb      	strb	r3, [r7, #7]
 80108b0:	4613      	mov	r3, r2
 80108b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80108b4:	79fb      	ldrb	r3, [r7, #7]
 80108b6:	2b23      	cmp	r3, #35	; 0x23
 80108b8:	d84a      	bhi.n	8010950 <CDC_Control_FS+0xac>
 80108ba:	a201      	add	r2, pc, #4	; (adr r2, 80108c0 <CDC_Control_FS+0x1c>)
 80108bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108c0:	08010951 	.word	0x08010951
 80108c4:	08010951 	.word	0x08010951
 80108c8:	08010951 	.word	0x08010951
 80108cc:	08010951 	.word	0x08010951
 80108d0:	08010951 	.word	0x08010951
 80108d4:	08010951 	.word	0x08010951
 80108d8:	08010951 	.word	0x08010951
 80108dc:	08010951 	.word	0x08010951
 80108e0:	08010951 	.word	0x08010951
 80108e4:	08010951 	.word	0x08010951
 80108e8:	08010951 	.word	0x08010951
 80108ec:	08010951 	.word	0x08010951
 80108f0:	08010951 	.word	0x08010951
 80108f4:	08010951 	.word	0x08010951
 80108f8:	08010951 	.word	0x08010951
 80108fc:	08010951 	.word	0x08010951
 8010900:	08010951 	.word	0x08010951
 8010904:	08010951 	.word	0x08010951
 8010908:	08010951 	.word	0x08010951
 801090c:	08010951 	.word	0x08010951
 8010910:	08010951 	.word	0x08010951
 8010914:	08010951 	.word	0x08010951
 8010918:	08010951 	.word	0x08010951
 801091c:	08010951 	.word	0x08010951
 8010920:	08010951 	.word	0x08010951
 8010924:	08010951 	.word	0x08010951
 8010928:	08010951 	.word	0x08010951
 801092c:	08010951 	.word	0x08010951
 8010930:	08010951 	.word	0x08010951
 8010934:	08010951 	.word	0x08010951
 8010938:	08010951 	.word	0x08010951
 801093c:	08010951 	.word	0x08010951
 8010940:	08010951 	.word	0x08010951
 8010944:	08010951 	.word	0x08010951
 8010948:	08010951 	.word	0x08010951
 801094c:	08010951 	.word	0x08010951
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010950:	bf00      	nop
  }

  return (USBD_OK);
 8010952:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010954:	4618      	mov	r0, r3
 8010956:	370c      	adds	r7, #12
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801096a:	6879      	ldr	r1, [r7, #4]
 801096c:	4805      	ldr	r0, [pc, #20]	; (8010984 <CDC_Receive_FS+0x24>)
 801096e:	f7fe fd76 	bl	800f45e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010972:	4804      	ldr	r0, [pc, #16]	; (8010984 <CDC_Receive_FS+0x24>)
 8010974:	f7fe fd8c 	bl	800f490 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010978:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801097a:	4618      	mov	r0, r3
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	20000ab4 	.word	0x20000ab4

08010988 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010988:	b480      	push	{r7}
 801098a:	b087      	sub	sp, #28
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	4613      	mov	r3, r2
 8010994:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010996:	2300      	movs	r3, #0
 8010998:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801099a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	371c      	adds	r7, #28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
	...

080109ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b083      	sub	sp, #12
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	4603      	mov	r3, r0
 80109b4:	6039      	str	r1, [r7, #0]
 80109b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	2212      	movs	r2, #18
 80109bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80109be:	4b03      	ldr	r3, [pc, #12]	; (80109cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	370c      	adds	r7, #12
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	2000021c 	.word	0x2000021c

080109d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	4603      	mov	r3, r0
 80109d8:	6039      	str	r1, [r7, #0]
 80109da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	2204      	movs	r2, #4
 80109e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80109e2:	4b03      	ldr	r3, [pc, #12]	; (80109f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	370c      	adds	r7, #12
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr
 80109f0:	2000023c 	.word	0x2000023c

080109f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	4603      	mov	r3, r0
 80109fc:	6039      	str	r1, [r7, #0]
 80109fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a00:	79fb      	ldrb	r3, [r7, #7]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d105      	bne.n	8010a12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a06:	683a      	ldr	r2, [r7, #0]
 8010a08:	4907      	ldr	r1, [pc, #28]	; (8010a28 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a0a:	4808      	ldr	r0, [pc, #32]	; (8010a2c <USBD_FS_ProductStrDescriptor+0x38>)
 8010a0c:	f7ff fe1d 	bl	801064a <USBD_GetString>
 8010a10:	e004      	b.n	8010a1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a12:	683a      	ldr	r2, [r7, #0]
 8010a14:	4904      	ldr	r1, [pc, #16]	; (8010a28 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a16:	4805      	ldr	r0, [pc, #20]	; (8010a2c <USBD_FS_ProductStrDescriptor+0x38>)
 8010a18:	f7ff fe17 	bl	801064a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a1c:	4b02      	ldr	r3, [pc, #8]	; (8010a28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3708      	adds	r7, #8
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	20001d84 	.word	0x20001d84
 8010a2c:	080114a8 	.word	0x080114a8

08010a30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	4603      	mov	r3, r0
 8010a38:	6039      	str	r1, [r7, #0]
 8010a3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010a3c:	683a      	ldr	r2, [r7, #0]
 8010a3e:	4904      	ldr	r1, [pc, #16]	; (8010a50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010a40:	4804      	ldr	r0, [pc, #16]	; (8010a54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010a42:	f7ff fe02 	bl	801064a <USBD_GetString>
  return USBD_StrDesc;
 8010a46:	4b02      	ldr	r3, [pc, #8]	; (8010a50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	20001d84 	.word	0x20001d84
 8010a54:	080114c0 	.word	0x080114c0

08010a58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	4603      	mov	r3, r0
 8010a60:	6039      	str	r1, [r7, #0]
 8010a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	221a      	movs	r2, #26
 8010a68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010a6a:	f000 f855 	bl	8010b18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010a6e:	4b02      	ldr	r3, [pc, #8]	; (8010a78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	20000240 	.word	0x20000240

08010a7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	4603      	mov	r3, r0
 8010a84:	6039      	str	r1, [r7, #0]
 8010a86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d105      	bne.n	8010a9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010a8e:	683a      	ldr	r2, [r7, #0]
 8010a90:	4907      	ldr	r1, [pc, #28]	; (8010ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010a92:	4808      	ldr	r0, [pc, #32]	; (8010ab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010a94:	f7ff fdd9 	bl	801064a <USBD_GetString>
 8010a98:	e004      	b.n	8010aa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	4904      	ldr	r1, [pc, #16]	; (8010ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010a9e:	4805      	ldr	r0, [pc, #20]	; (8010ab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010aa0:	f7ff fdd3 	bl	801064a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010aa4:	4b02      	ldr	r3, [pc, #8]	; (8010ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20001d84 	.word	0x20001d84
 8010ab4:	080114d4 	.word	0x080114d4

08010ab8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	4603      	mov	r3, r0
 8010ac0:	6039      	str	r1, [r7, #0]
 8010ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ac4:	79fb      	ldrb	r3, [r7, #7]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d105      	bne.n	8010ad6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	4907      	ldr	r1, [pc, #28]	; (8010aec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010ace:	4808      	ldr	r0, [pc, #32]	; (8010af0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010ad0:	f7ff fdbb 	bl	801064a <USBD_GetString>
 8010ad4:	e004      	b.n	8010ae0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010ad6:	683a      	ldr	r2, [r7, #0]
 8010ad8:	4904      	ldr	r1, [pc, #16]	; (8010aec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010ada:	4805      	ldr	r0, [pc, #20]	; (8010af0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010adc:	f7ff fdb5 	bl	801064a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ae0:	4b02      	ldr	r3, [pc, #8]	; (8010aec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3708      	adds	r7, #8
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	20001d84 	.word	0x20001d84
 8010af0:	080114e0 	.word	0x080114e0

08010af4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b083      	sub	sp, #12
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	4603      	mov	r3, r0
 8010afc:	6039      	str	r1, [r7, #0]
 8010afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	220c      	movs	r2, #12
 8010b04:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010b06:	4b03      	ldr	r3, [pc, #12]	; (8010b14 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr
 8010b14:	20000230 	.word	0x20000230

08010b18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b1e:	4b0f      	ldr	r3, [pc, #60]	; (8010b5c <Get_SerialNum+0x44>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b24:	4b0e      	ldr	r3, [pc, #56]	; (8010b60 <Get_SerialNum+0x48>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b2a:	4b0e      	ldr	r3, [pc, #56]	; (8010b64 <Get_SerialNum+0x4c>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4413      	add	r3, r2
 8010b36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d009      	beq.n	8010b52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010b3e:	2208      	movs	r2, #8
 8010b40:	4909      	ldr	r1, [pc, #36]	; (8010b68 <Get_SerialNum+0x50>)
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f000 f814 	bl	8010b70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010b48:	2204      	movs	r2, #4
 8010b4a:	4908      	ldr	r1, [pc, #32]	; (8010b6c <Get_SerialNum+0x54>)
 8010b4c:	68b8      	ldr	r0, [r7, #8]
 8010b4e:	f000 f80f 	bl	8010b70 <IntToUnicode>
  }
}
 8010b52:	bf00      	nop
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	1fff7590 	.word	0x1fff7590
 8010b60:	1fff7594 	.word	0x1fff7594
 8010b64:	1fff7598 	.word	0x1fff7598
 8010b68:	20000242 	.word	0x20000242
 8010b6c:	20000252 	.word	0x20000252

08010b70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b087      	sub	sp, #28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010b82:	2300      	movs	r3, #0
 8010b84:	75fb      	strb	r3, [r7, #23]
 8010b86:	e027      	b.n	8010bd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	0f1b      	lsrs	r3, r3, #28
 8010b8c:	2b09      	cmp	r3, #9
 8010b8e:	d80b      	bhi.n	8010ba8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	0f1b      	lsrs	r3, r3, #28
 8010b94:	b2da      	uxtb	r2, r3
 8010b96:	7dfb      	ldrb	r3, [r7, #23]
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	440b      	add	r3, r1
 8010ba0:	3230      	adds	r2, #48	; 0x30
 8010ba2:	b2d2      	uxtb	r2, r2
 8010ba4:	701a      	strb	r2, [r3, #0]
 8010ba6:	e00a      	b.n	8010bbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	0f1b      	lsrs	r3, r3, #28
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	7dfb      	ldrb	r3, [r7, #23]
 8010bb0:	005b      	lsls	r3, r3, #1
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	440b      	add	r3, r1
 8010bb8:	3237      	adds	r2, #55	; 0x37
 8010bba:	b2d2      	uxtb	r2, r2
 8010bbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	011b      	lsls	r3, r3, #4
 8010bc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010bc4:	7dfb      	ldrb	r3, [r7, #23]
 8010bc6:	005b      	lsls	r3, r3, #1
 8010bc8:	3301      	adds	r3, #1
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	4413      	add	r3, r2
 8010bce:	2200      	movs	r2, #0
 8010bd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010bd2:	7dfb      	ldrb	r3, [r7, #23]
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	75fb      	strb	r3, [r7, #23]
 8010bd8:	7dfa      	ldrb	r2, [r7, #23]
 8010bda:	79fb      	ldrb	r3, [r7, #7]
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d3d3      	bcc.n	8010b88 <IntToUnicode+0x18>
  }
}
 8010be0:	bf00      	nop
 8010be2:	bf00      	nop
 8010be4:	371c      	adds	r7, #28
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
	...

08010bf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b08a      	sub	sp, #40	; 0x28
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010bf8:	f107 0314 	add.w	r3, r7, #20
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	601a      	str	r2, [r3, #0]
 8010c00:	605a      	str	r2, [r3, #4]
 8010c02:	609a      	str	r2, [r3, #8]
 8010c04:	60da      	str	r2, [r3, #12]
 8010c06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c10:	d14e      	bne.n	8010cb0 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c12:	4b29      	ldr	r3, [pc, #164]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c16:	4a28      	ldr	r2, [pc, #160]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c18:	f043 0301 	orr.w	r3, r3, #1
 8010c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010c1e:	4b26      	ldr	r3, [pc, #152]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c22:	f003 0301 	and.w	r3, r3, #1
 8010c26:	613b      	str	r3, [r7, #16]
 8010c28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8010c2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c30:	2302      	movs	r3, #2
 8010c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c34:	2300      	movs	r3, #0
 8010c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c38:	2303      	movs	r3, #3
 8010c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010c3c:	230a      	movs	r3, #10
 8010c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c40:	f107 0314 	add.w	r3, r7, #20
 8010c44:	4619      	mov	r1, r3
 8010c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c4a:	f7f5 fbd1 	bl	80063f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010c4e:	4b1a      	ldr	r3, [pc, #104]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c52:	4a19      	ldr	r2, [pc, #100]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010c5a:	4b17      	ldr	r3, [pc, #92]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010c62:	60fb      	str	r3, [r7, #12]
 8010c64:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010c66:	4b14      	ldr	r3, [pc, #80]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d114      	bne.n	8010c9c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010c72:	4b11      	ldr	r3, [pc, #68]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c76:	4a10      	ldr	r2, [pc, #64]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8010c7e:	4b0e      	ldr	r3, [pc, #56]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c86:	60bb      	str	r3, [r7, #8]
 8010c88:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8010c8a:	f7f8 f80b 	bl	8008ca4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010c8e:	4b0a      	ldr	r3, [pc, #40]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c92:	4a09      	ldr	r2, [pc, #36]	; (8010cb8 <HAL_PCD_MspInit+0xc8>)
 8010c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010c98:	6593      	str	r3, [r2, #88]	; 0x58
 8010c9a:	e001      	b.n	8010ca0 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010c9c:	f7f8 f802 	bl	8008ca4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	2100      	movs	r1, #0
 8010ca4:	2043      	movs	r0, #67	; 0x43
 8010ca6:	f7f5 f9cc 	bl	8006042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010caa:	2043      	movs	r0, #67	; 0x43
 8010cac:	f7f5 f9e5 	bl	800607a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010cb0:	bf00      	nop
 8010cb2:	3728      	adds	r7, #40	; 0x28
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	40021000 	.word	0x40021000

08010cbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	4610      	mov	r0, r2
 8010cd4:	f7fe fca8 	bl	800f628 <USBD_LL_SetupStage>
}
 8010cd8:	bf00      	nop
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010cf2:	78fa      	ldrb	r2, [r7, #3]
 8010cf4:	6879      	ldr	r1, [r7, #4]
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	00db      	lsls	r3, r3, #3
 8010cfa:	4413      	add	r3, r2
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	440b      	add	r3, r1
 8010d00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	78fb      	ldrb	r3, [r7, #3]
 8010d08:	4619      	mov	r1, r3
 8010d0a:	f7fe fce2 	bl	800f6d2 <USBD_LL_DataOutStage>
}
 8010d0e:	bf00      	nop
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}

08010d16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b082      	sub	sp, #8
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
 8010d1e:	460b      	mov	r3, r1
 8010d20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010d28:	78fa      	ldrb	r2, [r7, #3]
 8010d2a:	6879      	ldr	r1, [r7, #4]
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	4413      	add	r3, r2
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	440b      	add	r3, r1
 8010d36:	334c      	adds	r3, #76	; 0x4c
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	78fb      	ldrb	r3, [r7, #3]
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	f7fe fd2b 	bl	800f798 <USBD_LL_DataInStage>
}
 8010d42:	bf00      	nop
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}

08010d4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d4a:	b580      	push	{r7, lr}
 8010d4c:	b082      	sub	sp, #8
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fe fe3f 	bl	800f9dc <USBD_LL_SOF>
}
 8010d5e:	bf00      	nop
 8010d60:	3708      	adds	r7, #8
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b084      	sub	sp, #16
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	2b02      	cmp	r3, #2
 8010d78:	d001      	beq.n	8010d7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010d7a:	f7f0 fd01 	bl	8001780 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d84:	7bfa      	ldrb	r2, [r7, #15]
 8010d86:	4611      	mov	r1, r2
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fe fde9 	bl	800f960 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7fe fd95 	bl	800f8c4 <USBD_LL_Reset>
}
 8010d9a:	bf00      	nop
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
	...

08010da4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	6812      	ldr	r2, [r2, #0]
 8010dba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010dbe:	f043 0301 	orr.w	r3, r3, #1
 8010dc2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fe fdd8 	bl	800f980 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a1b      	ldr	r3, [r3, #32]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d005      	beq.n	8010de4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010dd8:	4b04      	ldr	r3, [pc, #16]	; (8010dec <HAL_PCD_SuspendCallback+0x48>)
 8010dda:	691b      	ldr	r3, [r3, #16]
 8010ddc:	4a03      	ldr	r2, [pc, #12]	; (8010dec <HAL_PCD_SuspendCallback+0x48>)
 8010dde:	f043 0306 	orr.w	r3, r3, #6
 8010de2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010de4:	bf00      	nop
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	e000ed00 	.word	0xe000ed00

08010df0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	6812      	ldr	r2, [r2, #0]
 8010e06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e0a:	f023 0301 	bic.w	r3, r3, #1
 8010e0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6a1b      	ldr	r3, [r3, #32]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d007      	beq.n	8010e28 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010e18:	4b08      	ldr	r3, [pc, #32]	; (8010e3c <HAL_PCD_ResumeCallback+0x4c>)
 8010e1a:	691b      	ldr	r3, [r3, #16]
 8010e1c:	4a07      	ldr	r2, [pc, #28]	; (8010e3c <HAL_PCD_ResumeCallback+0x4c>)
 8010e1e:	f023 0306 	bic.w	r3, r3, #6
 8010e22:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010e24:	f000 faf6 	bl	8011414 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fe fdbc 	bl	800f9ac <USBD_LL_Resume>
}
 8010e34:	bf00      	nop
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	e000ed00 	.word	0xe000ed00

08010e40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	460b      	mov	r3, r1
 8010e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e52:	78fa      	ldrb	r2, [r7, #3]
 8010e54:	4611      	mov	r1, r2
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fe fe08 	bl	800fa6c <USBD_LL_IsoOUTIncomplete>
}
 8010e5c:	bf00      	nop
 8010e5e:	3708      	adds	r7, #8
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e76:	78fa      	ldrb	r2, [r7, #3]
 8010e78:	4611      	mov	r1, r2
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fe fdd0 	bl	800fa20 <USBD_LL_IsoINIncomplete>
}
 8010e80:	bf00      	nop
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fe fe0e 	bl	800fab8 <USBD_LL_DevConnected>
}
 8010e9c:	bf00      	nop
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fe fe0b 	bl	800face <USBD_LL_DevDisconnected>
}
 8010eb8:	bf00      	nop
 8010eba:	3708      	adds	r7, #8
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d13c      	bne.n	8010f4a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010ed0:	4a20      	ldr	r2, [pc, #128]	; (8010f54 <USBD_LL_Init+0x94>)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	4a1e      	ldr	r2, [pc, #120]	; (8010f54 <USBD_LL_Init+0x94>)
 8010edc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010ee0:	4b1c      	ldr	r3, [pc, #112]	; (8010f54 <USBD_LL_Init+0x94>)
 8010ee2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010ee6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010ee8:	4b1a      	ldr	r3, [pc, #104]	; (8010f54 <USBD_LL_Init+0x94>)
 8010eea:	2206      	movs	r2, #6
 8010eec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010eee:	4b19      	ldr	r3, [pc, #100]	; (8010f54 <USBD_LL_Init+0x94>)
 8010ef0:	2202      	movs	r2, #2
 8010ef2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ef4:	4b17      	ldr	r3, [pc, #92]	; (8010f54 <USBD_LL_Init+0x94>)
 8010ef6:	2202      	movs	r2, #2
 8010ef8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010efa:	4b16      	ldr	r3, [pc, #88]	; (8010f54 <USBD_LL_Init+0x94>)
 8010efc:	2200      	movs	r2, #0
 8010efe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010f00:	4b14      	ldr	r3, [pc, #80]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010f06:	4b13      	ldr	r3, [pc, #76]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f08:	2200      	movs	r2, #0
 8010f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010f0c:	4b11      	ldr	r3, [pc, #68]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f0e:	2200      	movs	r2, #0
 8010f10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010f12:	4b10      	ldr	r3, [pc, #64]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f14:	2200      	movs	r2, #0
 8010f16:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010f18:	4b0e      	ldr	r3, [pc, #56]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010f1e:	480d      	ldr	r0, [pc, #52]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f20:	f7f6 fc59 	bl	80077d6 <HAL_PCD_Init>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d001      	beq.n	8010f2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010f2a:	f7f0 fc29 	bl	8001780 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010f2e:	2180      	movs	r1, #128	; 0x80
 8010f30:	4808      	ldr	r0, [pc, #32]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f32:	f7f7 fdda 	bl	8008aea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010f36:	2240      	movs	r2, #64	; 0x40
 8010f38:	2100      	movs	r1, #0
 8010f3a:	4806      	ldr	r0, [pc, #24]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f3c:	f7f7 fd8e 	bl	8008a5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010f40:	2280      	movs	r2, #128	; 0x80
 8010f42:	2101      	movs	r1, #1
 8010f44:	4803      	ldr	r0, [pc, #12]	; (8010f54 <USBD_LL_Init+0x94>)
 8010f46:	f7f7 fd89 	bl	8008a5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}
 8010f54:	20001f84 	.word	0x20001f84

08010f58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f60:	2300      	movs	r3, #0
 8010f62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f64:	2300      	movs	r3, #0
 8010f66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7f6 fd55 	bl	8007a1e <HAL_PCD_Start>
 8010f74:	4603      	mov	r3, r0
 8010f76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010f78:	7bbb      	ldrb	r3, [r7, #14]
 8010f7a:	2b03      	cmp	r3, #3
 8010f7c:	d816      	bhi.n	8010fac <USBD_LL_Start+0x54>
 8010f7e:	a201      	add	r2, pc, #4	; (adr r2, 8010f84 <USBD_LL_Start+0x2c>)
 8010f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f84:	08010f95 	.word	0x08010f95
 8010f88:	08010f9b 	.word	0x08010f9b
 8010f8c:	08010fa1 	.word	0x08010fa1
 8010f90:	08010fa7 	.word	0x08010fa7
    case HAL_OK :
      usb_status = USBD_OK;
 8010f94:	2300      	movs	r3, #0
 8010f96:	73fb      	strb	r3, [r7, #15]
    break;
 8010f98:	e00b      	b.n	8010fb2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010f9a:	2303      	movs	r3, #3
 8010f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8010f9e:	e008      	b.n	8010fb2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8010fa4:	e005      	b.n	8010fb2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8010faa:	e002      	b.n	8010fb2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010fac:	2303      	movs	r3, #3
 8010fae:	73fb      	strb	r3, [r7, #15]
    break;
 8010fb0:	bf00      	nop
  }
  return usb_status;
 8010fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b084      	sub	sp, #16
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	4608      	mov	r0, r1
 8010fc6:	4611      	mov	r1, r2
 8010fc8:	461a      	mov	r2, r3
 8010fca:	4603      	mov	r3, r0
 8010fcc:	70fb      	strb	r3, [r7, #3]
 8010fce:	460b      	mov	r3, r1
 8010fd0:	70bb      	strb	r3, [r7, #2]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010fe4:	78bb      	ldrb	r3, [r7, #2]
 8010fe6:	883a      	ldrh	r2, [r7, #0]
 8010fe8:	78f9      	ldrb	r1, [r7, #3]
 8010fea:	f7f7 f9ff 	bl	80083ec <HAL_PCD_EP_Open>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010ff2:	7bbb      	ldrb	r3, [r7, #14]
 8010ff4:	2b03      	cmp	r3, #3
 8010ff6:	d817      	bhi.n	8011028 <USBD_LL_OpenEP+0x6c>
 8010ff8:	a201      	add	r2, pc, #4	; (adr r2, 8011000 <USBD_LL_OpenEP+0x44>)
 8010ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ffe:	bf00      	nop
 8011000:	08011011 	.word	0x08011011
 8011004:	08011017 	.word	0x08011017
 8011008:	0801101d 	.word	0x0801101d
 801100c:	08011023 	.word	0x08011023
    case HAL_OK :
      usb_status = USBD_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	73fb      	strb	r3, [r7, #15]
    break;
 8011014:	e00b      	b.n	801102e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011016:	2303      	movs	r3, #3
 8011018:	73fb      	strb	r3, [r7, #15]
    break;
 801101a:	e008      	b.n	801102e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801101c:	2301      	movs	r3, #1
 801101e:	73fb      	strb	r3, [r7, #15]
    break;
 8011020:	e005      	b.n	801102e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011022:	2303      	movs	r3, #3
 8011024:	73fb      	strb	r3, [r7, #15]
    break;
 8011026:	e002      	b.n	801102e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8011028:	2303      	movs	r3, #3
 801102a:	73fb      	strb	r3, [r7, #15]
    break;
 801102c:	bf00      	nop
  }
  return usb_status;
 801102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011044:	2300      	movs	r3, #0
 8011046:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011052:	78fa      	ldrb	r2, [r7, #3]
 8011054:	4611      	mov	r1, r2
 8011056:	4618      	mov	r0, r3
 8011058:	f7f7 fa30 	bl	80084bc <HAL_PCD_EP_Close>
 801105c:	4603      	mov	r3, r0
 801105e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011060:	7bbb      	ldrb	r3, [r7, #14]
 8011062:	2b03      	cmp	r3, #3
 8011064:	d816      	bhi.n	8011094 <USBD_LL_CloseEP+0x5c>
 8011066:	a201      	add	r2, pc, #4	; (adr r2, 801106c <USBD_LL_CloseEP+0x34>)
 8011068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801106c:	0801107d 	.word	0x0801107d
 8011070:	08011083 	.word	0x08011083
 8011074:	08011089 	.word	0x08011089
 8011078:	0801108f 	.word	0x0801108f
    case HAL_OK :
      usb_status = USBD_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	73fb      	strb	r3, [r7, #15]
    break;
 8011080:	e00b      	b.n	801109a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011082:	2303      	movs	r3, #3
 8011084:	73fb      	strb	r3, [r7, #15]
    break;
 8011086:	e008      	b.n	801109a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011088:	2301      	movs	r3, #1
 801108a:	73fb      	strb	r3, [r7, #15]
    break;
 801108c:	e005      	b.n	801109a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801108e:	2303      	movs	r3, #3
 8011090:	73fb      	strb	r3, [r7, #15]
    break;
 8011092:	e002      	b.n	801109a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011094:	2303      	movs	r3, #3
 8011096:	73fb      	strb	r3, [r7, #15]
    break;
 8011098:	bf00      	nop
  }
  return usb_status;
 801109a:	7bfb      	ldrb	r3, [r7, #15]
}
 801109c:	4618      	mov	r0, r3
 801109e:	3710      	adds	r7, #16
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	460b      	mov	r3, r1
 80110ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110b0:	2300      	movs	r3, #0
 80110b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110b4:	2300      	movs	r3, #0
 80110b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80110be:	78fa      	ldrb	r2, [r7, #3]
 80110c0:	4611      	mov	r1, r2
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7f7 fad7 	bl	8008676 <HAL_PCD_EP_SetStall>
 80110c8:	4603      	mov	r3, r0
 80110ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80110cc:	7bbb      	ldrb	r3, [r7, #14]
 80110ce:	2b03      	cmp	r3, #3
 80110d0:	d816      	bhi.n	8011100 <USBD_LL_StallEP+0x5c>
 80110d2:	a201      	add	r2, pc, #4	; (adr r2, 80110d8 <USBD_LL_StallEP+0x34>)
 80110d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d8:	080110e9 	.word	0x080110e9
 80110dc:	080110ef 	.word	0x080110ef
 80110e0:	080110f5 	.word	0x080110f5
 80110e4:	080110fb 	.word	0x080110fb
    case HAL_OK :
      usb_status = USBD_OK;
 80110e8:	2300      	movs	r3, #0
 80110ea:	73fb      	strb	r3, [r7, #15]
    break;
 80110ec:	e00b      	b.n	8011106 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80110ee:	2303      	movs	r3, #3
 80110f0:	73fb      	strb	r3, [r7, #15]
    break;
 80110f2:	e008      	b.n	8011106 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80110f4:	2301      	movs	r3, #1
 80110f6:	73fb      	strb	r3, [r7, #15]
    break;
 80110f8:	e005      	b.n	8011106 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80110fa:	2303      	movs	r3, #3
 80110fc:	73fb      	strb	r3, [r7, #15]
    break;
 80110fe:	e002      	b.n	8011106 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011100:	2303      	movs	r3, #3
 8011102:	73fb      	strb	r3, [r7, #15]
    break;
 8011104:	bf00      	nop
  }
  return usb_status;
 8011106:	7bfb      	ldrb	r3, [r7, #15]
}
 8011108:	4618      	mov	r0, r3
 801110a:	3710      	adds	r7, #16
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	460b      	mov	r3, r1
 801111a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801111c:	2300      	movs	r3, #0
 801111e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011120:	2300      	movs	r3, #0
 8011122:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801112a:	78fa      	ldrb	r2, [r7, #3]
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7f7 fb03 	bl	800873a <HAL_PCD_EP_ClrStall>
 8011134:	4603      	mov	r3, r0
 8011136:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011138:	7bbb      	ldrb	r3, [r7, #14]
 801113a:	2b03      	cmp	r3, #3
 801113c:	d816      	bhi.n	801116c <USBD_LL_ClearStallEP+0x5c>
 801113e:	a201      	add	r2, pc, #4	; (adr r2, 8011144 <USBD_LL_ClearStallEP+0x34>)
 8011140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011144:	08011155 	.word	0x08011155
 8011148:	0801115b 	.word	0x0801115b
 801114c:	08011161 	.word	0x08011161
 8011150:	08011167 	.word	0x08011167
    case HAL_OK :
      usb_status = USBD_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	73fb      	strb	r3, [r7, #15]
    break;
 8011158:	e00b      	b.n	8011172 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801115a:	2303      	movs	r3, #3
 801115c:	73fb      	strb	r3, [r7, #15]
    break;
 801115e:	e008      	b.n	8011172 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011160:	2301      	movs	r3, #1
 8011162:	73fb      	strb	r3, [r7, #15]
    break;
 8011164:	e005      	b.n	8011172 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011166:	2303      	movs	r3, #3
 8011168:	73fb      	strb	r3, [r7, #15]
    break;
 801116a:	e002      	b.n	8011172 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801116c:	2303      	movs	r3, #3
 801116e:	73fb      	strb	r3, [r7, #15]
    break;
 8011170:	bf00      	nop
  }
  return usb_status;
 8011172:	7bfb      	ldrb	r3, [r7, #15]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801118e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011194:	2b00      	cmp	r3, #0
 8011196:	da0b      	bge.n	80111b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011198:	78fb      	ldrb	r3, [r7, #3]
 801119a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801119e:	68f9      	ldr	r1, [r7, #12]
 80111a0:	4613      	mov	r3, r2
 80111a2:	00db      	lsls	r3, r3, #3
 80111a4:	4413      	add	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	440b      	add	r3, r1
 80111aa:	333e      	adds	r3, #62	; 0x3e
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	e00b      	b.n	80111c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80111b0:	78fb      	ldrb	r3, [r7, #3]
 80111b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111b6:	68f9      	ldr	r1, [r7, #12]
 80111b8:	4613      	mov	r3, r2
 80111ba:	00db      	lsls	r3, r3, #3
 80111bc:	4413      	add	r3, r2
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	440b      	add	r3, r1
 80111c2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80111c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b084      	sub	sp, #16
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	460b      	mov	r3, r1
 80111de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111e0:	2300      	movs	r3, #0
 80111e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111e4:	2300      	movs	r3, #0
 80111e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80111ee:	78fa      	ldrb	r2, [r7, #3]
 80111f0:	4611      	mov	r1, r2
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7f7 f8d5 	bl	80083a2 <HAL_PCD_SetAddress>
 80111f8:	4603      	mov	r3, r0
 80111fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80111fc:	7bbb      	ldrb	r3, [r7, #14]
 80111fe:	2b03      	cmp	r3, #3
 8011200:	d816      	bhi.n	8011230 <USBD_LL_SetUSBAddress+0x5c>
 8011202:	a201      	add	r2, pc, #4	; (adr r2, 8011208 <USBD_LL_SetUSBAddress+0x34>)
 8011204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011208:	08011219 	.word	0x08011219
 801120c:	0801121f 	.word	0x0801121f
 8011210:	08011225 	.word	0x08011225
 8011214:	0801122b 	.word	0x0801122b
    case HAL_OK :
      usb_status = USBD_OK;
 8011218:	2300      	movs	r3, #0
 801121a:	73fb      	strb	r3, [r7, #15]
    break;
 801121c:	e00b      	b.n	8011236 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801121e:	2303      	movs	r3, #3
 8011220:	73fb      	strb	r3, [r7, #15]
    break;
 8011222:	e008      	b.n	8011236 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011224:	2301      	movs	r3, #1
 8011226:	73fb      	strb	r3, [r7, #15]
    break;
 8011228:	e005      	b.n	8011236 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801122a:	2303      	movs	r3, #3
 801122c:	73fb      	strb	r3, [r7, #15]
    break;
 801122e:	e002      	b.n	8011236 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011230:	2303      	movs	r3, #3
 8011232:	73fb      	strb	r3, [r7, #15]
    break;
 8011234:	bf00      	nop
  }
  return usb_status;
 8011236:	7bfb      	ldrb	r3, [r7, #15]
}
 8011238:	4618      	mov	r0, r3
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}

08011240 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b086      	sub	sp, #24
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	607a      	str	r2, [r7, #4]
 801124a:	603b      	str	r3, [r7, #0]
 801124c:	460b      	mov	r3, r1
 801124e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011254:	2300      	movs	r3, #0
 8011256:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801125e:	7af9      	ldrb	r1, [r7, #11]
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	f7f7 f9ca 	bl	80085fc <HAL_PCD_EP_Transmit>
 8011268:	4603      	mov	r3, r0
 801126a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801126c:	7dbb      	ldrb	r3, [r7, #22]
 801126e:	2b03      	cmp	r3, #3
 8011270:	d816      	bhi.n	80112a0 <USBD_LL_Transmit+0x60>
 8011272:	a201      	add	r2, pc, #4	; (adr r2, 8011278 <USBD_LL_Transmit+0x38>)
 8011274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011278:	08011289 	.word	0x08011289
 801127c:	0801128f 	.word	0x0801128f
 8011280:	08011295 	.word	0x08011295
 8011284:	0801129b 	.word	0x0801129b
    case HAL_OK :
      usb_status = USBD_OK;
 8011288:	2300      	movs	r3, #0
 801128a:	75fb      	strb	r3, [r7, #23]
    break;
 801128c:	e00b      	b.n	80112a6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801128e:	2303      	movs	r3, #3
 8011290:	75fb      	strb	r3, [r7, #23]
    break;
 8011292:	e008      	b.n	80112a6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011294:	2301      	movs	r3, #1
 8011296:	75fb      	strb	r3, [r7, #23]
    break;
 8011298:	e005      	b.n	80112a6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801129a:	2303      	movs	r3, #3
 801129c:	75fb      	strb	r3, [r7, #23]
    break;
 801129e:	e002      	b.n	80112a6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80112a0:	2303      	movs	r3, #3
 80112a2:	75fb      	strb	r3, [r7, #23]
    break;
 80112a4:	bf00      	nop
  }
  return usb_status;
 80112a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3718      	adds	r7, #24
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	607a      	str	r2, [r7, #4]
 80112ba:	603b      	str	r3, [r7, #0]
 80112bc:	460b      	mov	r3, r1
 80112be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112ce:	7af9      	ldrb	r1, [r7, #11]
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	f7f7 f93c 	bl	8008550 <HAL_PCD_EP_Receive>
 80112d8:	4603      	mov	r3, r0
 80112da:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80112dc:	7dbb      	ldrb	r3, [r7, #22]
 80112de:	2b03      	cmp	r3, #3
 80112e0:	d816      	bhi.n	8011310 <USBD_LL_PrepareReceive+0x60>
 80112e2:	a201      	add	r2, pc, #4	; (adr r2, 80112e8 <USBD_LL_PrepareReceive+0x38>)
 80112e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112e8:	080112f9 	.word	0x080112f9
 80112ec:	080112ff 	.word	0x080112ff
 80112f0:	08011305 	.word	0x08011305
 80112f4:	0801130b 	.word	0x0801130b
    case HAL_OK :
      usb_status = USBD_OK;
 80112f8:	2300      	movs	r3, #0
 80112fa:	75fb      	strb	r3, [r7, #23]
    break;
 80112fc:	e00b      	b.n	8011316 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112fe:	2303      	movs	r3, #3
 8011300:	75fb      	strb	r3, [r7, #23]
    break;
 8011302:	e008      	b.n	8011316 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011304:	2301      	movs	r3, #1
 8011306:	75fb      	strb	r3, [r7, #23]
    break;
 8011308:	e005      	b.n	8011316 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801130a:	2303      	movs	r3, #3
 801130c:	75fb      	strb	r3, [r7, #23]
    break;
 801130e:	e002      	b.n	8011316 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8011310:	2303      	movs	r3, #3
 8011312:	75fb      	strb	r3, [r7, #23]
    break;
 8011314:	bf00      	nop
  }
  return usb_status;
 8011316:	7dfb      	ldrb	r3, [r7, #23]
}
 8011318:	4618      	mov	r0, r3
 801131a:	3718      	adds	r7, #24
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	460b      	mov	r3, r1
 801132a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011332:	78fa      	ldrb	r2, [r7, #3]
 8011334:	4611      	mov	r1, r2
 8011336:	4618      	mov	r0, r3
 8011338:	f7f7 f948 	bl	80085cc <HAL_PCD_EP_GetRxCount>
 801133c:	4603      	mov	r3, r0
}
 801133e:	4618      	mov	r0, r3
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
	...

08011348 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	460b      	mov	r3, r1
 8011352:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011354:	78fb      	ldrb	r3, [r7, #3]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d002      	beq.n	8011360 <HAL_PCDEx_LPM_Callback+0x18>
 801135a:	2b01      	cmp	r3, #1
 801135c:	d01f      	beq.n	801139e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801135e:	e03b      	b.n	80113d8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6a1b      	ldr	r3, [r3, #32]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d007      	beq.n	8011378 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011368:	f000 f854 	bl	8011414 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801136c:	4b1c      	ldr	r3, [pc, #112]	; (80113e0 <HAL_PCDEx_LPM_Callback+0x98>)
 801136e:	691b      	ldr	r3, [r3, #16]
 8011370:	4a1b      	ldr	r2, [pc, #108]	; (80113e0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011372:	f023 0306 	bic.w	r3, r3, #6
 8011376:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	6812      	ldr	r2, [r2, #0]
 8011386:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801138a:	f023 0301 	bic.w	r3, r3, #1
 801138e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011396:	4618      	mov	r0, r3
 8011398:	f7fe fb08 	bl	800f9ac <USBD_LL_Resume>
    break;
 801139c:	e01c      	b.n	80113d8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	6812      	ldr	r2, [r2, #0]
 80113ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80113b0:	f043 0301 	orr.w	r3, r3, #1
 80113b4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80113bc:	4618      	mov	r0, r3
 80113be:	f7fe fadf 	bl	800f980 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6a1b      	ldr	r3, [r3, #32]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d005      	beq.n	80113d6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113ca:	4b05      	ldr	r3, [pc, #20]	; (80113e0 <HAL_PCDEx_LPM_Callback+0x98>)
 80113cc:	691b      	ldr	r3, [r3, #16]
 80113ce:	4a04      	ldr	r2, [pc, #16]	; (80113e0 <HAL_PCDEx_LPM_Callback+0x98>)
 80113d0:	f043 0306 	orr.w	r3, r3, #6
 80113d4:	6113      	str	r3, [r2, #16]
    break;
 80113d6:	bf00      	nop
}
 80113d8:	bf00      	nop
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	e000ed00 	.word	0xe000ed00

080113e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80113ec:	4b03      	ldr	r3, [pc, #12]	; (80113fc <USBD_static_malloc+0x18>)
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	370c      	adds	r7, #12
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop
 80113fc:	20002490 	.word	0x20002490

08011400 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]

}
 8011408:	bf00      	nop
 801140a:	370c      	adds	r7, #12
 801140c:	46bd      	mov	sp, r7
 801140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011412:	4770      	bx	lr

08011414 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011418:	f7f0 f8ea 	bl	80015f0 <SystemClock_Config>
}
 801141c:	bf00      	nop
 801141e:	bd80      	pop	{r7, pc}

08011420 <__libc_init_array>:
 8011420:	b570      	push	{r4, r5, r6, lr}
 8011422:	4d0d      	ldr	r5, [pc, #52]	; (8011458 <__libc_init_array+0x38>)
 8011424:	4c0d      	ldr	r4, [pc, #52]	; (801145c <__libc_init_array+0x3c>)
 8011426:	1b64      	subs	r4, r4, r5
 8011428:	10a4      	asrs	r4, r4, #2
 801142a:	2600      	movs	r6, #0
 801142c:	42a6      	cmp	r6, r4
 801142e:	d109      	bne.n	8011444 <__libc_init_array+0x24>
 8011430:	4d0b      	ldr	r5, [pc, #44]	; (8011460 <__libc_init_array+0x40>)
 8011432:	4c0c      	ldr	r4, [pc, #48]	; (8011464 <__libc_init_array+0x44>)
 8011434:	f000 f820 	bl	8011478 <_init>
 8011438:	1b64      	subs	r4, r4, r5
 801143a:	10a4      	asrs	r4, r4, #2
 801143c:	2600      	movs	r6, #0
 801143e:	42a6      	cmp	r6, r4
 8011440:	d105      	bne.n	801144e <__libc_init_array+0x2e>
 8011442:	bd70      	pop	{r4, r5, r6, pc}
 8011444:	f855 3b04 	ldr.w	r3, [r5], #4
 8011448:	4798      	blx	r3
 801144a:	3601      	adds	r6, #1
 801144c:	e7ee      	b.n	801142c <__libc_init_array+0xc>
 801144e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011452:	4798      	blx	r3
 8011454:	3601      	adds	r6, #1
 8011456:	e7f2      	b.n	801143e <__libc_init_array+0x1e>
 8011458:	08013470 	.word	0x08013470
 801145c:	08013470 	.word	0x08013470
 8011460:	08013470 	.word	0x08013470
 8011464:	08013474 	.word	0x08013474

08011468 <memset>:
 8011468:	4402      	add	r2, r0
 801146a:	4603      	mov	r3, r0
 801146c:	4293      	cmp	r3, r2
 801146e:	d100      	bne.n	8011472 <memset+0xa>
 8011470:	4770      	bx	lr
 8011472:	f803 1b01 	strb.w	r1, [r3], #1
 8011476:	e7f9      	b.n	801146c <memset+0x4>

08011478 <_init>:
 8011478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801147a:	bf00      	nop
 801147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801147e:	bc08      	pop	{r3}
 8011480:	469e      	mov	lr, r3
 8011482:	4770      	bx	lr

08011484 <_fini>:
 8011484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011486:	bf00      	nop
 8011488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801148a:	bc08      	pop	{r3}
 801148c:	469e      	mov	lr, r3
 801148e:	4770      	bx	lr
