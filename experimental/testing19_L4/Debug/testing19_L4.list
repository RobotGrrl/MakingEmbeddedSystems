
testing19_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000143a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f44  08014554  08014554  00024554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017498  08017498  0004c610  2**0
                  CONTENTS
  4 .ARM          00000008  08017498  08017498  00027498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174a0  080174a0  0004c610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174a0  080174a0  000274a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080174a4  080174a4  000274a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001c610  20000000  080174a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000287c  2001c610  08033ab8  0004c610  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001ee8c  08033ab8  0004ee8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004c610  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036fd9  00000000  00000000  0004c640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dda  00000000  00000000  00083619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ee8  00000000  00000000  0008a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c28  00000000  00000000  0008d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000377a6  00000000  00000000  0008ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037c0f  00000000  00000000  000c76ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013996f  00000000  00000000  000ff2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00238c2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf90  00000000  00000000  00238c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2001c610 	.word	0x2001c610
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801453c 	.word	0x0801453c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2001c614 	.word	0x2001c614
 80001ec:	0801453c 	.word	0x0801453c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <AudioPlay_TransferComplete_CallBack>:
* @retval None
* @note This callback function has been registered during the audio playback
*       setup phase by calling the BSP_AUDIO_OUT_RegisterCallbacks function.
*/
void AudioPlay_TransferComplete_CallBack()
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0

	int a = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
//      }
//    }
//  }


}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <AudioPlay_Error_CallBack>:
* @retval None
* @note This callback function has been registered during the audio playback
*       setup phase by calling the BSP_AUDIO_OUT_RegisterCallbacks function.
*/
void AudioPlay_Error_CallBack(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0

	int a = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]

	/* Stop the program with an infinite loop */
  //Error_Handler();
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <IDontKnow_CallBack>:



void IDontKnow_CallBack(void) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
	int a = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f006 f953 	bl	8006888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f921 	bl	8000828 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005e6:	f000 f981 	bl	80008ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fecf 	bl	800138c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ee:	f000 f9b3 	bl	8000958 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f2:	f000 fa27 	bl	8000a44 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005f6:	f000 fa89 	bl	8000b0c <MX_ADC3_Init>
  MX_DCMI_Init();
 80005fa:	f000 faeb 	bl	8000bd4 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 80005fe:	f000 fb1d 	bl	8000c3c <MX_DFSDM1_Init>
  MX_FMC_Init();
 8000602:	f000 fe15 	bl	8001230 <MX_FMC_Init>
  MX_I2C1_Init();
 8000606:	f000 fb85 	bl	8000d14 <MX_I2C1_Init>
  MX_I2C2_Init();
 800060a:	f000 fbc3 	bl	8000d94 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800060e:	f000 fc01 	bl	8000e14 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000612:	f000 fc2d 	bl	8000e70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000616:	f000 fc5b 	bl	8000ed0 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800061a:	f000 fc89 	bl	8000f30 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800061e:	f000 fcb3 	bl	8000f88 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000622:	f000 fd59 	bl	80010d8 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000626:	f000 fd87 	bl	8001138 <MX_SPI1_Init>
  MX_SPI2_Init();
 800062a:	f000 fdc3 	bl	80011b4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800062e:	f012 f9bb 	bl	80129a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 8000632:	2001      	movs	r0, #1
 8000634:	f005 fb90 	bl	8005d58 <BSP_LCD_InitEx>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d101      	bne.n	8000642 <main+0x6a>
	{
		/* Initialization Error */
		Error_Handler();
 800063e:	f001 f81d 	bl	800167c <Error_Handler>
	}

	// the lcd bsp includes the fontNN.c files in the Utilities directory
	// in that file, a struct is declared: FontNN
	BSP_LCD_SetFont(&Font20);
 8000642:	486a      	ldr	r0, [pc, #424]	; (80007ec <main+0x214>)
 8000644:	f005 fc56 	bl	8005ef4 <BSP_LCD_SetFont>

	// the display is 240 px tall, XYZ px wide
	BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Purple Ball", CENTER_MODE);
 8000648:	2301      	movs	r3, #1
 800064a:	4a69      	ldr	r2, [pc, #420]	; (80007f0 <main+0x218>)
 800064c:	21af      	movs	r1, #175	; 0xaf
 800064e:	2000      	movs	r0, #0
 8000650:	f005 fc8a 	bl	8005f68 <BSP_LCD_DisplayStringAt>



	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 8000654:	f005 fc26 	bl	8005ea4 <BSP_LCD_GetXSize>
 8000658:	4603      	mov	r3, r0
 800065a:	b29c      	uxth	r4, r3
 800065c:	f005 fc2e 	bl	8005ebc <BSP_LCD_GetYSize>
 8000660:	4603      	mov	r3, r0
 8000662:	b29b      	uxth	r3, r3
 8000664:	2201      	movs	r2, #1
 8000666:	4619      	mov	r1, r3
 8000668:	4620      	mov	r0, r4
 800066a:	f005 ffa3 	bl	80065b4 <BSP_TS_InitEx>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0xa0>
		Error_Handler();
 8000674:	f001 f802 	bl	800167c <Error_Handler>


	// audio init

	// should this go here? or after audio init?
	HAL_SAI_MspInit( &BSP_AUDIO_hSai_Tx );
 8000678:	485e      	ldr	r0, [pc, #376]	; (80007f4 <main+0x21c>)
 800067a:	f005 f9a3 	bl	80059c4 <HAL_SAI_MspInit>
	 */


	//if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 80, (uint32_t)8000) == AUDIO_ERROR ) {
	//if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 80, AUDIO_FREQUENCY_44K) == AUDIO_ERROR ) {
	if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 80, AUDIO_FREQUENCY_44K) == AUDIO_ERROR ) {
 800067e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000682:	2150      	movs	r1, #80	; 0x50
 8000684:	2001      	movs	r0, #1
 8000686:	f004 ff17 	bl	80054b8 <BSP_AUDIO_OUT_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d101      	bne.n	8000694 <main+0xbc>
	//if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLMAX, AUDIO_FREQUENCY_44K) == AUDIO_ERROR ) {
		Error_Handler();
 8000690:	f000 fff4 	bl	800167c <Error_Handler>
	}

	BSP_AUDIO_OUT_ChangeAudioConfig(BSP_AUDIO_OUT_MONOMODE);//BSP_AUDIO_OUT_NORMALMODE);//BSP_AUDIO_OUT_MONOMODE);
 8000694:	2008      	movs	r0, #8
 8000696:	f004 ffc9 	bl	800562c <BSP_AUDIO_OUT_ChangeAudioConfig>

	if(BSP_AUDIO_OUT_SetOutputMode(OUTPUT_DEVICE_HEADPHONE) != AUDIO_OK) {
 800069a:	2001      	movs	r0, #1
 800069c:	f004 ffae 	bl	80055fc <BSP_AUDIO_OUT_SetOutputMode>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0xd2>
		Error_Handler();
 80006a6:	f000 ffe9 	bl	800167c <Error_Handler>

//	if(BSP_AUDIO_OUT_SetFrequency(  ) != AUDIO_OK) {
//		Error_Handler();
//	}

	BSP_AUDIO_OUT_RegisterCallbacks(AudioPlay_Error_CallBack,
 80006aa:	4a53      	ldr	r2, [pc, #332]	; (80007f8 <main+0x220>)
 80006ac:	4953      	ldr	r1, [pc, #332]	; (80007fc <main+0x224>)
 80006ae:	4854      	ldr	r0, [pc, #336]	; (8000800 <main+0x228>)
 80006b0:	f005 f82e 	bl	8005710 <BSP_AUDIO_OUT_RegisterCallbacks>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


  	BSP_TS_GetState(&ts_result);
 80006b4:	4853      	ldr	r0, [pc, #332]	; (8000804 <main+0x22c>)
 80006b6:	f005 ffd5 	bl	8006664 <BSP_TS_GetState>

  	uint8_t num_touches = ts_result.touchDetected;
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <main+0x22c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	74fb      	strb	r3, [r7, #19]

  	for(int i=0; i<num_touches; i++) {
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e01d      	b.n	8000702 <main+0x12a>
  		Point touch;
  		touch.X = ts_result.touchX[i];
 80006c6:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <main+0x22c>)
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	885b      	ldrh	r3, [r3, #2]
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	80bb      	strh	r3, [r7, #4]
  		touch.Y = ts_result.touchY[i];
 80006d4:	4a4b      	ldr	r2, [pc, #300]	; (8000804 <main+0x22c>)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	88db      	ldrh	r3, [r3, #6]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	80fb      	strh	r3, [r7, #6]

  		BSP_LCD_SetTextColor( LCD_COLOR_BLUE );
 80006e2:	201f      	movs	r0, #31
 80006e4:	f005 fbf6 	bl	8005ed4 <BSP_LCD_SetTextColor>
  		BSP_LCD_FillCircle(touch.X, touch.Y, 10);
 80006e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006f2:	b291      	uxth	r1, r2
 80006f4:	220a      	movs	r2, #10
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 fdd4 	bl	80062a4 <BSP_LCD_FillCircle>
  	for(int i=0; i<num_touches; i++) {
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	429a      	cmp	r2, r3
 8000708:	dbdd      	blt.n	80006c6 <main+0xee>
  	}


  	xpos+=10;
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <main+0x230>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	330a      	adds	r3, #10
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <main+0x230>)
 8000714:	701a      	strb	r2, [r3, #0]
		if(xpos > BSP_LCD_GetXSize()) {
 8000716:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <main+0x230>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461c      	mov	r4, r3
 800071c:	f005 fbc2 	bl	8005ea4 <BSP_LCD_GetXSize>
 8000720:	4603      	mov	r3, r0
 8000722:	429c      	cmp	r4, r3
 8000724:	d929      	bls.n	800077a <main+0x1a2>

			flip = !flip;
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <main+0x234>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f083 0301 	eor.w	r3, r3, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <main+0x234>)
 8000742:	701a      	strb	r2, [r3, #0]
			if(flip) {
 8000744:	4b31      	ldr	r3, [pc, #196]	; (800080c <main+0x234>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d013      	beq.n	8000774 <main+0x19c>

				if( BSP_AUDIO_OUT_SetMute(AUDIO_MUTE_OFF) == AUDIO_ERROR ) {
 800074c:	2000      	movs	r0, #0
 800074e:	f004 ff3f 	bl	80055d0 <BSP_AUDIO_OUT_SetMute>
 8000752:	4603      	mov	r3, r0
 8000754:	2b01      	cmp	r3, #1
 8000756:	d101      	bne.n	800075c <main+0x184>
					int a2 = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
				}

				//if( BSP_AUDIO_OUT_Play( (uint16_t*)quack_wav , quack_wav_len) == AUDIO_ERROR) {

				if( BSP_AUDIO_OUT_Play( (uint16_t*)wav , sizeof(wav)) == AUDIO_ERROR) {
 800075c:	492c      	ldr	r1, [pc, #176]	; (8000810 <main+0x238>)
 800075e:	482d      	ldr	r0, [pc, #180]	; (8000814 <main+0x23c>)
 8000760:	f004 ff0a 	bl	8005578 <BSP_AUDIO_OUT_Play>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d104      	bne.n	8000774 <main+0x19c>
				//if( BSP_AUDIO_OUT_Play( (uint16_t*)wav , 6) == AUDIO_ERROR) { // ? this one?
				//if( BSP_AUDIO_OUT_Play( (uint16_t*)wav[0] , 10) == AUDIO_ERROR) { // infinite loop
				//if( BSP_AUDIO_OUT_Play( (uint16_t*)&wav[0] , 10) == AUDIO_ERROR) { // infinite loop
					int a1 = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
					printf("AUDIO_ERROR");
 800076e:	482a      	ldr	r0, [pc, #168]	; (8000818 <main+0x240>)
 8000770:	f013 f836 	bl	80137e0 <iprintf>
				}
			} else {
				//BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
			}

			xpos = 0;
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <main+0x230>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
		}
		new.X = xpos;
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <main+0x230>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b21a      	sxth	r2, r3
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <main+0x244>)
 8000782:	801a      	strh	r2, [r3, #0]
		new.Y = ypos;
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <main+0x248>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b21a      	sxth	r2, r3
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <main+0x244>)
 800078c:	805a      	strh	r2, [r3, #2]

		BSP_LCD_SetTextColor( LCD_COLOR_WHITE );
 800078e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000792:	f005 fb9f 	bl	8005ed4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(prev.X, prev.Y, 20);
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <main+0x24c>)
 8000798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800079c:	b29b      	uxth	r3, r3
 800079e:	4a21      	ldr	r2, [pc, #132]	; (8000824 <main+0x24c>)
 80007a0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80007a4:	b291      	uxth	r1, r2
 80007a6:	2214      	movs	r2, #20
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 fd7b 	bl	80062a4 <BSP_LCD_FillCircle>

		//HAL_Delay(100);

		BSP_LCD_SetTextColor( LCD_COLOR_DARKMAGENTA );
 80007ae:	f248 0010 	movw	r0, #32784	; 0x8010
 80007b2:	f005 fb8f 	bl	8005ed4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(new.X, new.Y, 20);
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <main+0x244>)
 80007b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <main+0x244>)
 80007c0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80007c4:	b291      	uxth	r1, r2
 80007c6:	2214      	movs	r2, #20
 80007c8:	4618      	mov	r0, r3
 80007ca:	f005 fd6b 	bl	80062a4 <BSP_LCD_FillCircle>

		HAL_Delay(100);
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f006 f8ce 	bl	8006970 <HAL_Delay>

		prev.X = new.X;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <main+0x244>)
 80007d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <main+0x24c>)
 80007dc:	801a      	strh	r2, [r3, #0]
		prev.Y = new.Y;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <main+0x244>)
 80007e0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <main+0x24c>)
 80007e6:	805a      	strh	r2, [r3, #2]
  {
 80007e8:	e764      	b.n	80006b4 <main+0xdc>
 80007ea:	bf00      	nop
 80007ec:	2001c40c 	.word	0x2001c40c
 80007f0:	08014554 	.word	0x08014554
 80007f4:	2001d118 	.word	0x2001d118
 80007f8:	08000595 	.word	0x08000595
 80007fc:	080005c1 	.word	0x080005c1
 8000800:	080005ab 	.word	0x080005ab
 8000804:	2001cdb8 	.word	0x2001cdb8
 8000808:	2001cdac 	.word	0x2001cdac
 800080c:	2001cdc2 	.word	0x2001cdc2
 8000810:	0001c2ea 	.word	0x0001c2ea
 8000814:	20000000 	.word	0x20000000
 8000818:	08014560 	.word	0x08014560
 800081c:	2001cdb4 	.word	0x2001cdb4
 8000820:	2001c2ea 	.word	0x2001c2ea
 8000824:	2001cdb0 	.word	0x2001cdb0

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b096      	sub	sp, #88	; 0x58
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2244      	movs	r2, #68	; 0x44
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f012 feea 	bl	8013610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800084a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800084e:	f00a f867 	bl	800a920 <HAL_PWREx_ControlVoltageScaling>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000858:	f000 ff10 	bl	800167c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800085c:	f00a f842 	bl	800a8e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000860:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <SystemClock_Config+0xc0>)
 8000862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000866:	4a20      	ldr	r2, [pc, #128]	; (80008e8 <SystemClock_Config+0xc0>)
 8000868:	f023 0318 	bic.w	r3, r3, #24
 800086c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000870:	2314      	movs	r3, #20
 8000872:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000880:	2360      	movs	r3, #96	; 0x60
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000888:	2301      	movs	r3, #1
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000890:	2328      	movs	r3, #40	; 0x28
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4618      	mov	r0, r3
 80008a6:	f00a f973 	bl	800ab90 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008b0:	f000 fee4 	bl	800167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2303      	movs	r3, #3
 80008ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	2104      	movs	r1, #4
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00a fd79 	bl	800b3c4 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d8:	f000 fed0 	bl	800167c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008dc:	f00c f942 	bl	800cb64 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e0:	bf00      	nop
 80008e2:	3758      	adds	r7, #88	; 0x58
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000

080008ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0a4      	sub	sp, #144	; 0x90
 80008f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	228c      	movs	r2, #140	; 0x8c
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f012 fe89 	bl	8013610 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <PeriphCommonClock_Config+0x64>)
 8000900:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000902:	2300      	movs	r3, #0
 8000904:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800090a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800090e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000912:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000914:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000918:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800091a:	2301      	movs	r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800091e:	2301      	movs	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000922:	2318      	movs	r3, #24
 8000924:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV12;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <PeriphCommonClock_Config+0x68>)
 8000934:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f00a ff67 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000944:	f000 fe9a 	bl	800167c <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3790      	adds	r7, #144	; 0x90
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	00086800 	.word	0x00086800
 8000954:	01110000 	.word	0x01110000

08000958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_ADC1_Init+0xe0>)
 800097c:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <MX_ADC1_Init+0xe4>)
 800097e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000980:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <MX_ADC1_Init+0xe0>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_ADC1_Init+0xe0>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_ADC1_Init+0xe0>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_ADC1_Init+0xe0>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_ADC1_Init+0xe0>)
 800099a:	2204      	movs	r2, #4
 800099c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009da:	4817      	ldr	r0, [pc, #92]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009dc:	f006 f98c 	bl	8006cf8 <HAL_ADC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009e6:	f000 fe49 	bl	800167c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4810      	ldr	r0, [pc, #64]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009f6:	f006 ff0b 	bl	8007810 <HAL_ADCEx_MultiModeConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a00:	f000 fe3c 	bl	800167c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_ADC1_Init+0xe8>)
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a10:	237f      	movs	r3, #127	; 0x7f
 8000a12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a14:	2304      	movs	r3, #4
 8000a16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_ADC1_Init+0xe0>)
 8000a22:	f006 fac3 	bl	8006fac <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a2c:	f000 fe26 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2001c62c 	.word	0x2001c62c
 8000a3c:	50040000 	.word	0x50040000
 8000a40:	10c00010 	.word	0x10c00010

08000a44 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a5c:	4a29      	ldr	r2, [pc, #164]	; (8000b04 <MX_ADC2_Init+0xc0>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aba:	4811      	ldr	r0, [pc, #68]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000abc:	f006 f91c 	bl	8006cf8 <HAL_ADC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000ac6:	f000 fdd9 	bl	800167c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_ADC2_Init+0xc4>)
 8000acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ace:	2306      	movs	r3, #6
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ad6:	237f      	movs	r3, #127	; 0x7f
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ada:	2304      	movs	r3, #4
 8000adc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000ae8:	f006 fa60 	bl	8006fac <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000af2:	f000 fdc3 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2001c694 	.word	0x2001c694
 8000b04:	50040100 	.word	0x50040100
 8000b08:	25b00200 	.word	0x25b00200

08000b0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b24:	4a29      	ldr	r2, [pc, #164]	; (8000bcc <MX_ADC3_Init+0xc0>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b82:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000b84:	f006 f8b8 	bl	8006cf8 <HAL_ADC_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000b8e:	f000 fd75 	bl	800167c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_ADC3_Init+0xc4>)
 8000b94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b96:	2306      	movs	r3, #6
 8000b98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b9e:	237f      	movs	r3, #127	; 0x7f
 8000ba0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_ADC3_Init+0xbc>)
 8000bb0:	f006 f9fc 	bl	8006fac <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000bba:	f000 fd5f 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2001c6fc 	.word	0x2001c6fc
 8000bcc:	50040200 	.word	0x50040200
 8000bd0:	36902000 	.word	0x36902000

08000bd4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <MX_DCMI_Init+0x64>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_DCMI_Init+0x60>)
 8000c22:	f006 ffe9 	bl	8007bf8 <HAL_DCMI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000c2c:	f000 fd26 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2001c764 	.word	0x2001c764
 8000c38:	50050000 	.word	0x50050000

08000c3c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c42:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <MX_DFSDM1_Init+0xcc>)
 8000c44:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000c52:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c8e:	481d      	ldr	r0, [pc, #116]	; (8000d04 <MX_DFSDM1_Init+0xc8>)
 8000c90:	f007 f838 	bl	8007d04 <HAL_DFSDM_ChannelInit>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000c9a:	f000 fcef 	bl	800167c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <MX_DFSDM1_Init+0xd4>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000cee:	4807      	ldr	r0, [pc, #28]	; (8000d0c <MX_DFSDM1_Init+0xd0>)
 8000cf0:	f007 f808 	bl	8007d04 <HAL_DFSDM_ChannelInit>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000cfa:	f000 fcbf 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2001c7c8 	.word	0x2001c7c8
 8000d08:	40016020 	.word	0x40016020
 8000d0c:	2001c800 	.word	0x2001c800
 8000d10:	40016040 	.word	0x40016040

08000d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d1a:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <MX_I2C1_Init+0x78>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d20:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <MX_I2C1_Init+0x7c>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d4e:	480e      	ldr	r0, [pc, #56]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d50:	f007 fcca 	bl	80086e8 <HAL_I2C_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d5a:	f000 fc8f 	bl	800167c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d62:	f008 fb69 	bl	8009438 <HAL_I2CEx_ConfigAnalogFilter>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d6c:	f000 fc86 	bl	800167c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d70:	2100      	movs	r1, #0
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_I2C1_Init+0x74>)
 8000d74:	f008 fbab 	bl	80094ce <HAL_I2CEx_ConfigDigitalFilter>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d7e:	f000 fc7d 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2001c838 	.word	0x2001c838
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	10909cec 	.word	0x10909cec

08000d94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <MX_I2C2_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <MX_I2C2_Init+0x7c>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dce:	480e      	ldr	r0, [pc, #56]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000dd0:	f007 fc8a 	bl	80086e8 <HAL_I2C_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dda:	f000 fc4f 	bl	800167c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000de2:	f008 fb29 	bl	8009438 <HAL_I2CEx_ConfigAnalogFilter>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dec:	f000 fc46 	bl	800167c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_I2C2_Init+0x74>)
 8000df4:	f008 fb6b 	bl	80094ce <HAL_I2CEx_ConfigDigitalFilter>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f000 fc3d 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2001c88c 	.word	0x2001c88c
 8000e0c:	40005800 	.word	0x40005800
 8000e10:	10909cec 	.word	0x10909cec

08000e14 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <MX_LPUART1_UART_Init+0x54>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e20:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_LPUART1_UART_Init+0x58>)
 8000e22:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_LPUART1_UART_Init+0x50>)
 8000e52:	f00d fb7a 	bl	800e54a <HAL_UART_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e5c:	f000 fc0e 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2001c8e0 	.word	0x2001c8e0
 8000e68:	40008000 	.word	0x40008000
 8000e6c:	00033324 	.word	0x00033324

08000e70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <MX_USART1_UART_Init+0x5c>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e9c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ea0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000eb6:	f00d fb48 	bl	800e54a <HAL_UART_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000ec0:	f000 fbdc 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2001c964 	.word	0x2001c964
 8000ecc:	40013800 	.word	0x40013800

08000ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <MX_USART2_UART_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f14:	f00d fb19 	bl	800e54a <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 fbad 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2001c9e8 	.word	0x2001c9e8
 8000f2c:	40004400 	.word	0x40004400

08000f30 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <MX_QUADSPI_Init+0x54>)
 8000f38:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f48:	2210      	movs	r2, #16
 8000f4a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f4e:	2217      	movs	r2, #23
 8000f50:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_QUADSPI_Init+0x50>)
 8000f6c:	f009 fd4e 	bl	800aa0c <HAL_QSPI_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f76:	f000 fb81 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2001ca6c 	.word	0x2001ca6c
 8000f84:	a0001000 	.word	0xa0001000

08000f88 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000f8e:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <MX_SAI1_Init+0x140>)
 8000f90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f92:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f98:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000f9e:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fa0:	2240      	movs	r2, #64	; 0x40
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fa4:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000faa:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000fb0:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fb6:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fc2:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fca:	4a40      	ldr	r2, [pc, #256]	; (80010cc <MX_SAI1_Init+0x144>)
 8000fcc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000fe6:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fe8:	2208      	movs	r2, #8
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ff2:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ff8:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8001000:	2200      	movs	r2, #0
 8001002:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8001006:	2200      	movs	r2, #0
 8001008:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <MX_SAI1_Init+0x13c>)
 800100c:	2200      	movs	r2, #0
 800100e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001010:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8001012:	2201      	movs	r2, #1
 8001014:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <MX_SAI1_Init+0x13c>)
 8001018:	2200      	movs	r2, #0
 800101a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800101c:	4829      	ldr	r0, [pc, #164]	; (80010c4 <MX_SAI1_Init+0x13c>)
 800101e:	f00c f881 	bl	800d124 <HAL_SAI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001028:	f000 fb28 	bl	800167c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_SAI1_Init+0x148>)
 800102e:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <MX_SAI1_Init+0x14c>)
 8001030:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001034:	2200      	movs	r2, #0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <MX_SAI1_Init+0x148>)
 800103a:	2203      	movs	r2, #3
 800103c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001040:	2240      	movs	r2, #64	; 0x40
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001046:	2200      	movs	r2, #0
 8001048:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_SAI1_Init+0x148>)
 800104c:	2200      	movs	r2, #0
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001052:	2201      	movs	r2, #1
 8001054:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_SAI1_Init+0x148>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_SAI1_Init+0x148>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001076:	2200      	movs	r2, #0
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_SAI1_Init+0x148>)
 800107c:	2208      	movs	r2, #8
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001082:	2201      	movs	r2, #1
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001088:	2200      	movs	r2, #0
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_SAI1_Init+0x148>)
 800108e:	2200      	movs	r2, #0
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_SAI1_Init+0x148>)
 8001094:	2200      	movs	r2, #0
 8001096:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <MX_SAI1_Init+0x148>)
 800109a:	2200      	movs	r2, #0
 800109c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_SAI1_Init+0x148>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_SAI1_Init+0x148>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_SAI1_Init+0x148>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_SAI1_Init+0x148>)
 80010b2:	f00c f837 	bl	800d124 <HAL_SAI_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80010bc:	f000 fade 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2001cab8 	.word	0x2001cab8
 80010c8:	40015404 	.word	0x40015404
 80010cc:	0002ee00 	.word	0x0002ee00
 80010d0:	2001cb3c 	.word	0x2001cb3c
 80010d4:	40015424 	.word	0x40015424

080010d8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <MX_SDMMC1_SD_Init+0x5c>)
 80010e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001106:	480a      	ldr	r0, [pc, #40]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 8001108:	f00c fb42 	bl	800d790 <HAL_SD_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8001112:	f000 fab3 	bl	800167c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001116:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_SDMMC1_SD_Init+0x58>)
 800111c:	f00c fdb2 	bl	800dc84 <HAL_SD_ConfigWideBusOperation>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001126:	f000 faa9 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2001cbc0 	.word	0x2001cbc0
 8001134:	40012800 	.word	0x40012800

08001138 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_SPI1_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_SPI1_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_SPI1_Init+0x74>)
 8001144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001148:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_SPI1_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_SPI1_Init+0x74>)
 8001152:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001156:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_SPI1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_SPI1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_SPI1_Init+0x74>)
 8001166:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800116a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_SPI1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_SPI1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_SPI1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_SPI1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_SPI1_Init+0x74>)
 8001186:	2207      	movs	r2, #7
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_SPI1_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_SPI1_Init+0x74>)
 8001192:	2208      	movs	r2, #8
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_SPI1_Init+0x74>)
 8001198:	f00d f8ec 	bl	800e374 <HAL_SPI_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 fa6b 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2001cc44 	.word	0x2001cc44
 80011b0:	40013000 	.word	0x40013000

080011b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_SPI2_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_SPI2_Init+0x74>)
 80011c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_SPI2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_SPI2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_SPI2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI2_Init+0x74>)
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI2_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_SPI2_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI2_Init+0x74>)
 8001202:	2207      	movs	r2, #7
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_SPI2_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI2_Init+0x74>)
 800120e:	2208      	movs	r2, #8
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_SPI2_Init+0x74>)
 8001214:	f00d f8ae 	bl	800e374 <HAL_SPI_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 fa2d 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2001cca8 	.word	0x2001cca8
 800122c:	40003800 	.word	0x40003800

08001230 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2220      	movs	r2, #32
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f012 f9e7 	bl	8013610 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001242:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <MX_FMC_Init+0x150>)
 8001244:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001248:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800124a:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <MX_FMC_Init+0x150>)
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <MX_FMC_Init+0x154>)
 800124e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <MX_FMC_Init+0x150>)
 8001252:	2202      	movs	r2, #2
 8001254:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001256:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <MX_FMC_Init+0x150>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <MX_FMC_Init+0x150>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <MX_FMC_Init+0x150>)
 8001264:	2210      	movs	r2, #16
 8001266:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001268:	4b45      	ldr	r3, [pc, #276]	; (8001380 <MX_FMC_Init+0x150>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <MX_FMC_Init+0x150>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <MX_FMC_Init+0x150>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <MX_FMC_Init+0x150>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <MX_FMC_Init+0x150>)
 8001282:	2200      	movs	r2, #0
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <MX_FMC_Init+0x150>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <MX_FMC_Init+0x150>)
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <MX_FMC_Init+0x150>)
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <MX_FMC_Init+0x150>)
 800129a:	2200      	movs	r2, #0
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <MX_FMC_Init+0x150>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <MX_FMC_Init+0x150>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80012aa:	230f      	movs	r3, #15
 80012ac:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80012ae:	230f      	movs	r3, #15
 80012b0:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80012b2:	23ff      	movs	r3, #255	; 0xff
 80012b4:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80012b6:	230f      	movs	r3, #15
 80012b8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012ba:	2310      	movs	r3, #16
 80012bc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012be:	2311      	movs	r3, #17
 80012c0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	482c      	ldr	r0, [pc, #176]	; (8001380 <MX_FMC_Init+0x150>)
 80012ce:	f00d f8f4 	bl	800e4ba <HAL_SRAM_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80012d8:	f000 f9d0 	bl	800167c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_FMC_Init+0x158>)
 80012de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012e2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <MX_FMC_Init+0x158>)
 80012e6:	4a27      	ldr	r2, [pc, #156]	; (8001384 <MX_FMC_Init+0x154>)
 80012e8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_FMC_Init+0x158>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <MX_FMC_Init+0x158>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <MX_FMC_Init+0x158>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_FMC_Init+0x158>)
 80012fe:	2210      	movs	r2, #16
 8001300:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_FMC_Init+0x158>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_FMC_Init+0x158>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_FMC_Init+0x158>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_FMC_Init+0x158>)
 8001316:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_FMC_Init+0x158>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_FMC_Init+0x158>)
 8001324:	2200      	movs	r2, #0
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_FMC_Init+0x158>)
 800132a:	2200      	movs	r2, #0
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_FMC_Init+0x158>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_FMC_Init+0x158>)
 8001336:	2200      	movs	r2, #0
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_FMC_Init+0x158>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_FMC_Init+0x158>)
 8001342:	2200      	movs	r2, #0
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001346:	230f      	movs	r3, #15
 8001348:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800134a:	230f      	movs	r3, #15
 800134c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800134e:	23ff      	movs	r3, #255	; 0xff
 8001350:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001352:	230f      	movs	r3, #15
 8001354:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001356:	2310      	movs	r3, #16
 8001358:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800135a:	2311      	movs	r3, #17
 800135c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_FMC_Init+0x158>)
 800136a:	f00d f8a6 	bl	800e4ba <HAL_SRAM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001374:	f000 f982 	bl	800167c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2001cd0c 	.word	0x2001cd0c
 8001384:	a0000104 	.word	0xa0000104
 8001388:	2001cd5c 	.word	0x2001cd5c

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013a2:	4baf      	ldr	r3, [pc, #700]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4aae      	ldr	r2, [pc, #696]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4bac      	ldr	r3, [pc, #688]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	623b      	str	r3, [r7, #32]
 80013b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4ba9      	ldr	r3, [pc, #676]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4aa8      	ldr	r2, [pc, #672]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4ba6      	ldr	r3, [pc, #664]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	4ba3      	ldr	r3, [pc, #652]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4aa2      	ldr	r2, [pc, #648]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4ba0      	ldr	r3, [pc, #640]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b9d      	ldr	r3, [pc, #628]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a9c      	ldr	r2, [pc, #624]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b9a      	ldr	r3, [pc, #616]	; (8001660 <MX_GPIO_Init+0x2d4>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b97      	ldr	r3, [pc, #604]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a96      	ldr	r2, [pc, #600]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b94      	ldr	r3, [pc, #592]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800141a:	4b91      	ldr	r3, [pc, #580]	; (8001660 <MX_GPIO_Init+0x2d4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a90      	ldr	r2, [pc, #576]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b8e      	ldr	r3, [pc, #568]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001432:	f009 fadb 	bl	800a9ec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	4b8a      	ldr	r3, [pc, #552]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a89      	ldr	r2, [pc, #548]	; (8001660 <MX_GPIO_Init+0x2d4>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b87      	ldr	r3, [pc, #540]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b84      	ldr	r3, [pc, #528]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a83      	ldr	r2, [pc, #524]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b81      	ldr	r3, [pc, #516]	; (8001660 <MX_GPIO_Init+0x2d4>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001466:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a7d      	ldr	r2, [pc, #500]	; (8001660 <MX_GPIO_Init+0x2d4>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b7b      	ldr	r3, [pc, #492]	; (8001660 <MX_GPIO_Init+0x2d4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2101      	movs	r1, #1
 8001482:	4878      	ldr	r0, [pc, #480]	; (8001664 <MX_GPIO_Init+0x2d8>)
 8001484:	f007 f918 	bl	80086b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2143      	movs	r1, #67	; 0x43
 800148c:	4876      	ldr	r0, [pc, #472]	; (8001668 <MX_GPIO_Init+0x2dc>)
 800148e:	f007 f913 	bl	80086b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2140      	movs	r1, #64	; 0x40
 8001496:	4875      	ldr	r0, [pc, #468]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001498:	f007 f90e 	bl	80086b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	4873      	ldr	r0, [pc, #460]	; (8001670 <MX_GPIO_Init+0x2e4>)
 80014a4:	f007 f908 	bl	80086b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 80014a8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4869      	ldr	r0, [pc, #420]	; (8001664 <MX_GPIO_Init+0x2d8>)
 80014be:	f006 fe77 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80014c2:	2304      	movs	r3, #4
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4864      	ldr	r0, [pc, #400]	; (8001668 <MX_GPIO_Init+0x2dc>)
 80014d8:	f006 fe6a 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80014dc:	2301      	movs	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	485c      	ldr	r0, [pc, #368]	; (8001664 <MX_GPIO_Init+0x2d8>)
 80014f4:	f006 fe5c 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80014f8:	2340      	movs	r3, #64	; 0x40
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001508:	2303      	movs	r3, #3
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	4854      	ldr	r0, [pc, #336]	; (8001664 <MX_GPIO_Init+0x2d8>)
 8001514:	f006 fe4c 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001518:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800152a:	2303      	movs	r3, #3
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	484c      	ldr	r0, [pc, #304]	; (8001668 <MX_GPIO_Init+0x2dc>)
 8001536:	f006 fe3b 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800153a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800154c:	2302      	movs	r3, #2
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4846      	ldr	r0, [pc, #280]	; (8001670 <MX_GPIO_Init+0x2e4>)
 8001558:	f006 fe2a 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	483e      	ldr	r0, [pc, #248]	; (8001668 <MX_GPIO_Init+0x2dc>)
 8001570:	f006 fe1e 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001574:	2343      	movs	r3, #67	; 0x43
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	4837      	ldr	r0, [pc, #220]	; (8001668 <MX_GPIO_Init+0x2dc>)
 800158c:	f006 fe10 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4831      	ldr	r0, [pc, #196]	; (800166c <MX_GPIO_Init+0x2e0>)
 80015a8:	f006 fe02 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80015ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	482c      	ldr	r0, [pc, #176]	; (8001674 <MX_GPIO_Init+0x2e8>)
 80015c4:	f006 fdf4 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80015c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80015da:	230e      	movs	r3, #14
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f006 fde2 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80015ec:	2320      	movs	r3, #32
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	481a      	ldr	r0, [pc, #104]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001602:	f006 fdd5 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001610:	2302      	movs	r3, #2
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4817      	ldr	r0, [pc, #92]	; (8001678 <MX_GPIO_Init+0x2ec>)
 800161c:	f006 fdc8 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001620:	2304      	movs	r3, #4
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	480f      	ldr	r0, [pc, #60]	; (8001670 <MX_GPIO_Init+0x2e4>)
 8001634:	f006 fdbc 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800163e:	2311      	movs	r3, #17
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_GPIO_Init+0x2e4>)
 8001652:	f006 fdad 	bl	80081b0 <HAL_GPIO_Init>

}
 8001656:	bf00      	nop
 8001658:	3738      	adds	r7, #56	; 0x38
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	48002000 	.word	0x48002000
 8001668:	48001c00 	.word	0x48001c00
 800166c:	48000800 	.word	0x48000800
 8001670:	48000400 	.word	0x48000400
 8001674:	48001800 	.word	0x48001800
 8001678:	48001400 	.word	0x48001400

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x44>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x44>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6613      	str	r3, [r2, #96]	; 0x60
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x44>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x44>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	; 0x38
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a59      	ldr	r2, [pc, #356]	; (8001854 <HAL_ADC_MspInit+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12d      	bne.n	800174e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80016f2:	4b59      	ldr	r3, [pc, #356]	; (8001858 <HAL_ADC_MspInit+0x188>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a57      	ldr	r2, [pc, #348]	; (8001858 <HAL_ADC_MspInit+0x188>)
 80016fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80016fc:	4b56      	ldr	r3, [pc, #344]	; (8001858 <HAL_ADC_MspInit+0x188>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10b      	bne.n	800171c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	4a54      	ldr	r2, [pc, #336]	; (800185c <HAL_ADC_MspInit+0x18c>)
 800170a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800170e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001710:	4b52      	ldr	r3, [pc, #328]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001718:	623b      	str	r3, [r7, #32]
 800171a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171c:	4b4f      	ldr	r3, [pc, #316]	; (800185c <HAL_ADC_MspInit+0x18c>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001728:	4b4c      	ldr	r3, [pc, #304]	; (800185c <HAL_ADC_MspInit+0x18c>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8001734:	2318      	movs	r3, #24
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001738:	230b      	movs	r3, #11
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4846      	ldr	r0, [pc, #280]	; (8001860 <HAL_ADC_MspInit+0x190>)
 8001748:	f006 fd32 	bl	80081b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800174c:	e07e      	b.n	800184c <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a44      	ldr	r2, [pc, #272]	; (8001864 <HAL_ADC_MspInit+0x194>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d146      	bne.n	80017e6 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001758:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_ADC_MspInit+0x188>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <HAL_ADC_MspInit+0x188>)
 8001760:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001762:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <HAL_ADC_MspInit+0x188>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10b      	bne.n	8001782 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800176a:	4b3c      	ldr	r3, [pc, #240]	; (800185c <HAL_ADC_MspInit+0x18c>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a3b      	ldr	r2, [pc, #236]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a35      	ldr	r2, [pc, #212]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_ADC_MspInit+0x18c>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a2f      	ldr	r2, [pc, #188]	; (800185c <HAL_ADC_MspInit+0x18c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_ADC_MspInit+0x18c>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80017b2:	2303      	movs	r3, #3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017b6:	230b      	movs	r3, #11
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	4826      	ldr	r0, [pc, #152]	; (8001860 <HAL_ADC_MspInit+0x190>)
 80017c6:	f006 fcf3 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 80017ca:	2312      	movs	r3, #18
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017ce:	230b      	movs	r3, #11
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e0:	f006 fce6 	bl	80081b0 <HAL_GPIO_Init>
}
 80017e4:	e032      	b.n	800184c <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_ADC_MspInit+0x198>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d12d      	bne.n	800184c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_ADC_MspInit+0x188>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_ADC_MspInit+0x188>)
 80017f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x188>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d10b      	bne.n	800181a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_ADC_MspInit+0x18c>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001820:	f043 0320 	orr.w	r3, r3, #32
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_ADC_MspInit+0x18c>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0320 	and.w	r3, r3, #32
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001838:	230b      	movs	r3, #11
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	4809      	ldr	r0, [pc, #36]	; (800186c <HAL_ADC_MspInit+0x19c>)
 8001848:	f006 fcb2 	bl	80081b0 <HAL_GPIO_Init>
}
 800184c:	bf00      	nop
 800184e:	3738      	adds	r7, #56	; 0x38
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	50040000 	.word	0x50040000
 8001858:	2001cdc4 	.word	0x2001cdc4
 800185c:	40021000 	.word	0x40021000
 8001860:	48000800 	.word	0x48000800
 8001864:	50040100 	.word	0x50040100
 8001868:	50040200 	.word	0x50040200
 800186c:	48001400 	.word	0x48001400

08001870 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a33      	ldr	r2, [pc, #204]	; (800195c <HAL_DCMI_MspInit+0xec>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d160      	bne.n	8001954 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001892:	4b33      	ldr	r3, [pc, #204]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a32      	ldr	r2, [pc, #200]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	4a26      	ldr	r2, [pc, #152]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018e0:	f043 0310 	orr.w	r3, r3, #16
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_DCMI_MspInit+0xf0>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80018f2:	f645 7320 	movw	r3, #24352	; 0x5f20
 80018f6:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001904:	230a      	movs	r3, #10
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4815      	ldr	r0, [pc, #84]	; (8001964 <HAL_DCMI_MspInit+0xf4>)
 8001910:	f006 fc4e 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001914:	23b0      	movs	r3, #176	; 0xb0
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001924:	230a      	movs	r3, #10
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	480e      	ldr	r0, [pc, #56]	; (8001968 <HAL_DCMI_MspInit+0xf8>)
 8001930:	f006 fc3e 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001934:	2320      	movs	r3, #32
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001944:	230a      	movs	r3, #10
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <HAL_DCMI_MspInit+0xfc>)
 8001950:	f006 fc2e 	bl	80081b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001954:	bf00      	nop
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	50050000 	.word	0x50050000
 8001960:	40021000 	.word	0x40021000
 8001964:	48001c00 	.word	0x48001c00
 8001968:	48002000 	.word	0x48002000
 800196c:	48001000 	.word	0x48001000

08001970 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0ae      	sub	sp, #184	; 0xb8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0318 	add.w	r3, r7, #24
 800198c:	228c      	movs	r2, #140	; 0x8c
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f011 fe3d 	bl	8013610 <memset>
  if(DFSDM1_Init == 0)
 8001996:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d163      	bne.n	8001a66 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800199e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	4618      	mov	r0, r3
 80019b0:	f009 ff2c 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80019ba:	f7ff fe5f 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001a06:	2384      	movs	r3, #132	; 0x84
 8001a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a1e:	2306      	movs	r3, #6
 8001a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4813      	ldr	r0, [pc, #76]	; (8001a78 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001a2c:	f006 fbc0 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4809      	ldr	r0, [pc, #36]	; (8001a7c <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001a58:	f006 fbaa 	bl	80081b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001a64:	6013      	str	r3, [r2, #0]
  }

}
 8001a66:	bf00      	nop
 8001a68:	37b8      	adds	r7, #184	; 0xb8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2001cdc8 	.word	0x2001cdc8
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	48000400 	.word	0x48000400

08001a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0b0      	sub	sp, #192	; 0xc0
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0320 	add.w	r3, r7, #32
 8001a9c:	228c      	movs	r2, #140	; 0x8c
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f011 fdb5 	bl	8013610 <memset>
  if(hi2c->Instance==I2C1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_I2C_MspInit+0x178>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d13c      	bne.n	8001b2a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ab0:	2340      	movs	r3, #64	; 0x40
 8001ab2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	4618      	mov	r0, r3
 8001abe:	f009 fea5 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ac8:	f7ff fdd8 	bl	800167c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad8:	4b48      	ldr	r3, [pc, #288]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001ae4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aec:	2312      	movs	r3, #18
 8001aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001afe:	2304      	movs	r3, #4
 8001b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b08:	4619      	mov	r1, r3
 8001b0a:	483d      	ldr	r0, [pc, #244]	; (8001c00 <HAL_I2C_MspInit+0x180>)
 8001b0c:	f006 fb50 	bl	80081b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b10:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	4a39      	ldr	r2, [pc, #228]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1c:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b28:	e061      	b.n	8001bee <HAL_I2C_MspInit+0x16e>
  else if(hi2c->Instance==I2C2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a35      	ldr	r2, [pc, #212]	; (8001c04 <HAL_I2C_MspInit+0x184>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d15c      	bne.n	8001bee <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	4618      	mov	r0, r3
 8001b42:	f009 fe63 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001b4c:	f7ff fd96 	bl	800167c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001b80:	2310      	movs	r3, #16
 8001b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b86:	2312      	movs	r3, #18
 8001b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4818      	ldr	r0, [pc, #96]	; (8001c08 <HAL_I2C_MspInit+0x188>)
 8001ba6:	f006 fb03 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb2:	2312      	movs	r3, #18
 8001bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <HAL_I2C_MspInit+0x180>)
 8001bd2:	f006 faed 	bl	80081b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_I2C_MspInit+0x17c>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
}
 8001bee:	bf00      	nop
 8001bf0:	37c0      	adds	r7, #192	; 0xc0
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000400 	.word	0x48000400
 8001c04:	40005800 	.word	0x40005800
 8001c08:	48001c00 	.word	0x48001c00

08001c0c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <HAL_I2C_MspDeInit+0x64>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10f      	bne.n	8001c3e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_I2C_MspDeInit+0x68>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_I2C_MspDeInit+0x68>)
 8001c24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c28:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <HAL_I2C_MspDeInit+0x6c>)
 8001c30:	f006 fc50 	bl	80084d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	4810      	ldr	r0, [pc, #64]	; (8001c78 <HAL_I2C_MspDeInit+0x6c>)
 8001c38:	f006 fc4c 	bl	80084d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001c3c:	e013      	b.n	8001c66 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <HAL_I2C_MspDeInit+0x70>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d10e      	bne.n	8001c66 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_I2C_MspDeInit+0x68>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_I2C_MspDeInit+0x68>)
 8001c4e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c52:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001c54:	2110      	movs	r1, #16
 8001c56:	480a      	ldr	r0, [pc, #40]	; (8001c80 <HAL_I2C_MspDeInit+0x74>)
 8001c58:	f006 fc3c 	bl	80084d4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <HAL_I2C_MspDeInit+0x6c>)
 8001c62:	f006 fc37 	bl	80084d4 <HAL_GPIO_DeInit>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40005400 	.word	0x40005400
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	40005800 	.word	0x40005800
 8001c80:	48001c00 	.word	0x48001c00

08001c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0b2      	sub	sp, #200	; 0xc8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca0:	228c      	movs	r2, #140	; 0x8c
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f011 fcb3 	bl	8013610 <memset>
  if(huart->Instance==LPUART1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a86      	ldr	r2, [pc, #536]	; (8001ec8 <HAL_UART_MspInit+0x244>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d13e      	bne.n	8001d32 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f009 fda3 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ccc:	f7ff fcd6 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cd0:	4b7e      	ldr	r3, [pc, #504]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	4a7d      	ldr	r2, [pc, #500]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001cdc:	4b7b      	ldr	r3, [pc, #492]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ce8:	4b78      	ldr	r3, [pc, #480]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	4a77      	ldr	r2, [pc, #476]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf4:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	623b      	str	r3, [r7, #32]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8001d00:	f008 fe74 	bl	800a9ec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001d04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d1e:	2308      	movs	r3, #8
 8001d20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4869      	ldr	r0, [pc, #420]	; (8001ed0 <HAL_UART_MspInit+0x24c>)
 8001d2c:	f006 fa40 	bl	80081b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d30:	e0c6      	b.n	8001ec0 <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <HAL_UART_MspInit+0x250>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d15f      	bne.n	8001dfc <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d40:	2300      	movs	r3, #0
 8001d42:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f009 fd5f 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001d54:	f7ff fc92 	bl	800167c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d58:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	4a5b      	ldr	r2, [pc, #364]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d62:	6613      	str	r3, [r2, #96]	; 0x60
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a55      	ldr	r2, [pc, #340]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001da0:	f008 fe24 	bl	800a9ec <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001da4:	2340      	movs	r3, #64	; 0x40
 8001da6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4843      	ldr	r0, [pc, #268]	; (8001ed8 <HAL_UART_MspInit+0x254>)
 8001dca:	f006 f9f1 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8001dce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de8:	2307      	movs	r3, #7
 8001dea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4836      	ldr	r0, [pc, #216]	; (8001ed0 <HAL_UART_MspInit+0x24c>)
 8001df6:	f006 f9db 	bl	80081b0 <HAL_GPIO_Init>
}
 8001dfa:	e061      	b.n	8001ec0 <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a36      	ldr	r2, [pc, #216]	; (8001edc <HAL_UART_MspInit+0x258>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d15c      	bne.n	8001ec0 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e06:	2302      	movs	r3, #2
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e12:	4618      	mov	r0, r3
 8001e14:	f009 fcfa 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001e1e:	f7ff fc2d 	bl	800167c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	4a29      	ldr	r2, [pc, #164]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_UART_MspInit+0x248>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001e6a:	2340      	movs	r3, #64	; 0x40
 8001e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e82:	2307      	movs	r3, #7
 8001e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0x25c>)
 8001e90:	f006 f98e 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001e94:	2304      	movs	r3, #4
 8001e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eac:	2307      	movs	r3, #7
 8001eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebc:	f006 f978 	bl	80081b0 <HAL_GPIO_Init>
}
 8001ec0:	bf00      	nop
 8001ec2:	37c8      	adds	r7, #200	; 0xc8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40008000 	.word	0x40008000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48001800 	.word	0x48001800
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	48000400 	.word	0x48000400
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	48000c00 	.word	0x48000c00

08001ee4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <HAL_QSPI_MspInit+0xb8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d145      	bne.n	8001f92 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6513      	str	r3, [r2, #80]	; 0x50
 8001f12:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_QSPI_MspInit+0xbc>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001f4e:	f640 0303 	movw	r3, #2051	; 0x803
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f60:	230a      	movs	r3, #10
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480e      	ldr	r0, [pc, #56]	; (8001fa4 <HAL_QSPI_MspInit+0xc0>)
 8001f6c:	f006 f920 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001f70:	23c8      	movs	r3, #200	; 0xc8
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f80:	230a      	movs	r3, #10
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f006 f90f 	bl	80081b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	; 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	a0001000 	.word	0xa0001000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	48000400 	.word	0x48000400

08001fa8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <HAL_SD_MspInit+0xb4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d144      	bne.n	8002054 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8001fd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_SD_MspInit+0xb8>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002012:	2304      	movs	r3, #4
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002022:	230c      	movs	r3, #12
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <HAL_SD_MspInit+0xbc>)
 800202e:	f006 f8bf 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8002032:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002036:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002044:	230c      	movs	r3, #12
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	4806      	ldr	r0, [pc, #24]	; (8002068 <HAL_SD_MspInit+0xc0>)
 8002050:	f006 f8ae 	bl	80081b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40012800 	.word	0x40012800
 8002060:	40021000 	.word	0x40021000
 8002064:	48000c00 	.word	0x48000c00
 8002068:	48000800 	.word	0x48000800

0800206c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a4b      	ldr	r2, [pc, #300]	; (80021b8 <HAL_SPI_MspInit+0x14c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d146      	bne.n	800211c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800208e:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_SPI_MspInit+0x150>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	4a4a      	ldr	r2, [pc, #296]	; (80021bc <HAL_SPI_MspInit+0x150>)
 8002094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002098:	6613      	str	r3, [r2, #96]	; 0x60
 800209a:	4b48      	ldr	r3, [pc, #288]	; (80021bc <HAL_SPI_MspInit+0x150>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	4b45      	ldr	r3, [pc, #276]	; (80021bc <HAL_SPI_MspInit+0x150>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a44      	ldr	r2, [pc, #272]	; (80021bc <HAL_SPI_MspInit+0x150>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b42      	ldr	r3, [pc, #264]	; (80021bc <HAL_SPI_MspInit+0x150>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_SPI_MspInit+0x150>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	4a3e      	ldr	r2, [pc, #248]	; (80021bc <HAL_SPI_MspInit+0x150>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ca:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_SPI_MspInit+0x150>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80020d6:	2330      	movs	r3, #48	; 0x30
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020e6:	2305      	movs	r3, #5
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	4833      	ldr	r0, [pc, #204]	; (80021c0 <HAL_SPI_MspInit+0x154>)
 80020f2:	f006 f85d 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 80020f6:	f248 0320 	movw	r3, #32800	; 0x8020
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002108:	2305      	movs	r3, #5
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f006 f84b 	bl	80081b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800211a:	e049      	b.n	80021b0 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_SPI_MspInit+0x158>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d144      	bne.n	80021b0 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002126:	4b25      	ldr	r3, [pc, #148]	; (80021bc <HAL_SPI_MspInit+0x150>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a24      	ldr	r2, [pc, #144]	; (80021bc <HAL_SPI_MspInit+0x150>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_SPI_MspInit+0x150>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <HAL_SPI_MspInit+0x150>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_SPI_MspInit+0x150>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_SPI_MspInit+0x150>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_SPI_MspInit+0x150>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_SPI_MspInit+0x150>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_SPI_MspInit+0x150>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 800216e:	2306      	movs	r3, #6
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800217e:	2305      	movs	r3, #5
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002186:	4619      	mov	r1, r3
 8002188:	480f      	ldr	r0, [pc, #60]	; (80021c8 <HAL_SPI_MspInit+0x15c>)
 800218a:	f006 f811 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800218e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021a0:	2305      	movs	r3, #5
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_SPI_MspInit+0x154>)
 80021ac:	f006 f800 	bl	80081b0 <HAL_GPIO_Init>
}
 80021b0:	bf00      	nop
 80021b2:	3738      	adds	r7, #56	; 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40013000 	.word	0x40013000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	48000400 	.word	0x48000400
 80021c4:	40003800 	.word	0x40003800
 80021c8:	48002000 	.word	0x48002000

080021cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_FMC_MspInit+0xc4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d14f      	bne.n	8002288 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_FMC_MspInit+0xc4>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80021ee:	4b29      	ldr	r3, [pc, #164]	; (8002294 <HAL_FMC_MspInit+0xc8>)
 80021f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_FMC_MspInit+0xc8>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6513      	str	r3, [r2, #80]	; 0x50
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_FMC_MspInit+0xc8>)
 80021fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8002206:	f64f 7383 	movw	r3, #65411	; 0xff83
 800220a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002218:	230c      	movs	r3, #12
 800221a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	4619      	mov	r1, r3
 8002220:	481d      	ldr	r0, [pc, #116]	; (8002298 <HAL_FMC_MspInit+0xcc>)
 8002222:	f005 ffc5 	bl	80081b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8002226:	f240 233f 	movw	r3, #575	; 0x23f
 800222a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002238:	230c      	movs	r3, #12
 800223a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4816      	ldr	r0, [pc, #88]	; (800229c <HAL_FMC_MspInit+0xd0>)
 8002242:	f005 ffb5 	bl	80081b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8002246:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800224a:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002258:	230c      	movs	r3, #12
 800225a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	4619      	mov	r1, r3
 8002260:	480f      	ldr	r0, [pc, #60]	; (80022a0 <HAL_FMC_MspInit+0xd4>)
 8002262:	f005 ffa5 	bl	80081b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8002266:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800226a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002278:	230c      	movs	r3, #12
 800227a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4619      	mov	r1, r3
 8002280:	4808      	ldr	r0, [pc, #32]	; (80022a4 <HAL_FMC_MspInit+0xd8>)
 8002282:	f005 ff95 	bl	80081b0 <HAL_GPIO_Init>
 8002286:	e000      	b.n	800228a <HAL_FMC_MspInit+0xbe>
    return;
 8002288:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2001cdcc 	.word	0x2001cdcc
 8002294:	40021000 	.word	0x40021000
 8002298:	48001000 	.word	0x48001000
 800229c:	48001800 	.word	0x48001800
 80022a0:	48000c00 	.word	0x48000c00
 80022a4:	48001400 	.word	0x48001400

080022a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80022b0:	f7ff ff8c 	bl	80021cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <NMI_Handler+0x4>

080022c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <HardFault_Handler+0x4>

080022c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <MemManage_Handler+0x4>

080022ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d2:	e7fe      	b.n	80022d2 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <UsageFault_Handler+0x4>

080022da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002308:	f004 fb12 	bl	8006930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <OTG_FS_IRQHandler+0x10>)
 8002316:	f007 fa79 	bl	800980c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2001e750 	.word	0x2001e750

08002324 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e00a      	b.n	800234c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002336:	f3af 8000 	nop.w
 800233a:	4601      	mov	r1, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	b2ca      	uxtb	r2, r1
 8002344:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf0      	blt.n	8002336 <_read+0x12>
	}

return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e009      	b.n	8002384 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf1      	blt.n	8002370 <_write+0x12>
	}
	return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_close>:

int _close(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
	return -1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023be:	605a      	str	r2, [r3, #4]
	return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_isatty>:

int _isatty(int file)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
	return 1;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
	return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f011 f8c4 	bl	80135bc <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20050000 	.word	0x20050000
 8002460:	00000400 	.word	0x00000400
 8002464:	2001cdd0 	.word	0x2001cdd0
 8002468:	2001ee90 	.word	0x2001ee90

0800246c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <SystemInit+0x20>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <SystemInit+0x20>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002494:	f7ff ffea 	bl	800246c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <LoopForever+0x6>)
  ldr r1, =_edata
 800249a:	490d      	ldr	r1, [pc, #52]	; (80024d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <LoopForever+0xe>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b0:	4c0a      	ldr	r4, [pc, #40]	; (80024dc <LoopForever+0x16>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024be:	f011 f883 	bl	80135c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c2:	f7fe f889 	bl	80005d8 <main>

080024c6 <LoopForever>:

LoopForever:
    b LoopForever
 80024c6:	e7fe      	b.n	80024c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	2001c610 	.word	0x2001c610
  ldr r2, =_sidata
 80024d4:	080174a8 	.word	0x080174a8
  ldr r2, =_sbss
 80024d8:	2001c610 	.word	0x2001c610
  ldr r4, =_ebss
 80024dc:	2001ee8c 	.word	0x2001ee8c

080024e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC1_2_IRQHandler>
	...

080024e4 <cs42l51_Init>:
  * @param Volume:     Initial output volume level (from 0 (-100dB) to 100 (0dB)).
  * @param AudioFreq:  Initial audio frequency (currently not used).
  * @retval 0 if correct communication, else wrong communication.
  */
uint32_t cs42l51_Init(uint16_t DeviceAddr, uint16_t Device, uint8_t Volume, uint32_t AudioFreq)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	4603      	mov	r3, r0
 80024ee:	81fb      	strh	r3, [r7, #14]
 80024f0:	460b      	mov	r3, r1
 80024f2:	81bb      	strh	r3, [r7, #12]
 80024f4:	4613      	mov	r3, r2
 80024f6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  uint8_t  Value;
  
  /* Check if codec is already initialized */
  if(Is_CS42L51_Initialized == 0)
 80024fc:	4bad      	ldr	r3, [pc, #692]	; (80027b4 <cs42l51_Init+0x2d0>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <cs42l51_Init+0x2c>
  {
    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init();
 8002504:	f002 fd48 	bl	8004f98 <AUDIO_IO_Init>

    Is_CS42L51_Initialized = 1;
 8002508:	4baa      	ldr	r3, [pc, #680]	; (80027b4 <cs42l51_Init+0x2d0>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e050      	b.n	80025b2 <cs42l51_Init+0xce>
  }
  else
  {
    /* Set all power down bits to 1 exept PDN to mute ADCs and DACs*/
    counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x7E);
 8002510:	89fb      	ldrh	r3, [r7, #14]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	227e      	movs	r2, #126	; 0x7e
 8002516:	2102      	movs	r1, #2
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fb49 	bl	8002bb0 <CODEC_IO_Write>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	4413      	add	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
    Value = AUDIO_IO_Read(DeviceAddr, 0x03);
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2103      	movs	r1, #3
 800252e:	4618      	mov	r0, r3
 8002530:	f002 fdff 	bl	8005132 <AUDIO_IO_Read>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]
    counter += CODEC_IO_Write(DeviceAddr, 0x03, (Value | 0x0E));
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	b2d8      	uxtb	r0, r3
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	f043 030e 	orr.w	r3, r3, #14
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	2103      	movs	r1, #3
 8002548:	f000 fb32 	bl	8002bb0 <CODEC_IO_Write>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	4413      	add	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
    
    /* Disable zero cross and soft ramp */
    Value = AUDIO_IO_Read(DeviceAddr, 0x09);
 8002556:	89fb      	ldrh	r3, [r7, #14]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2109      	movs	r1, #9
 800255c:	4618      	mov	r0, r3
 800255e:	f002 fde8 	bl	8005132 <AUDIO_IO_Read>
 8002562:	4603      	mov	r3, r0
 8002564:	74fb      	strb	r3, [r7, #19]
    counter += CODEC_IO_Write(DeviceAddr, 0x09, (Value & 0xFC));
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	b2d8      	uxtb	r0, r3
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	f023 0303 	bic.w	r3, r3, #3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	2109      	movs	r1, #9
 8002576:	f000 fb1b 	bl	8002bb0 <CODEC_IO_Write>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
    
    /* Power control : Enter standby (PDN = 1) */
    Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2102      	movs	r1, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fdd1 	bl	8005132 <AUDIO_IO_Read>
 8002590:	4603      	mov	r3, r0
 8002592:	74fb      	strb	r3, [r7, #19]
    counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value | 0x01));
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	2102      	movs	r1, #2
 80025a4:	f000 fb04 	bl	8002bb0 <CODEC_IO_Write>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4413      	add	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
  }

  /* Mic Power and Speed Control : Auto detect on, Speed mode SSM, tri state off, MCLK divide by 2 off */
  Value = AUDIO_IO_Read(DeviceAddr, 0x03);
 80025b2:	89fb      	ldrh	r3, [r7, #14]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2103      	movs	r1, #3
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 fdba 	bl	8005132 <AUDIO_IO_Read>
 80025be:	4603      	mov	r3, r0
 80025c0:	74fb      	strb	r3, [r7, #19]
  counter += CODEC_IO_Write(DeviceAddr, 0x03, ((Value & 0x0E) | 0xA0));
 80025c2:	89fb      	ldrh	r3, [r7, #14]
 80025c4:	b2d8      	uxtb	r0, r3
 80025c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80025ca:	f003 030e 	and.w	r3, r3, #14
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	2103      	movs	r1, #3
 80025dc:	f000 fae8 	bl	8002bb0 <CODEC_IO_Write>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4413      	add	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  /* Interface control : Loopback off, Slave, I2S (SDIN and SOUT), Digital mix off, Mic mix off */
  counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C);
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	220c      	movs	r2, #12
 80025f0:	2104      	movs	r1, #4
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fadc 	bl	8002bb0 <CODEC_IO_Write>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4413      	add	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
  
  /* Mic control : ADC single volume off, ADCB boost off, ADCA boost off, MicBias on AIN3B/MICIN2 pin, MicBias level 0.8xVA, MICB boost 16db, MICA boost 16dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x00);
 8002602:	89fb      	ldrh	r3, [r7, #14]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2200      	movs	r2, #0
 8002608:	2105      	movs	r1, #5
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fad0 	bl	8002bb0 <CODEC_IO_Write>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	4413      	add	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  /* ADC control : ADCB HPF off, ADCB HPF freeze off, ADCA HPF off, ADCA HPF freeze off, Soft ramp B off, Zero cross B off, Soft ramp A off, Zero cross A off */
  counter += CODEC_IO_Write(DeviceAddr, 0x06, 0x00);
 800261a:	89fb      	ldrh	r3, [r7, #14]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2200      	movs	r2, #0
 8002620:	2106      	movs	r1, #6
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fac4 	bl	8002bb0 <CODEC_IO_Write>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4413      	add	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* ADC Input Select, Invert and Mute : AIN1B to PGAB, AIN3A to PreAmp to PGAA, ADCB invert off, ADCA invert off, ADCB mute on, ADCA mute off */
  counter += CODEC_IO_Write(DeviceAddr, 0x07, 0x32);
 8002632:	89fb      	ldrh	r3, [r7, #14]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2232      	movs	r2, #50	; 0x32
 8002638:	2107      	movs	r1, #7
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fab8 	bl	8002bb0 <CODEC_IO_Write>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  
  /* DAC output control : HP Gain to 1, Single volume control off, PCM invert signals polarity off, DAC channels mute on */
  counter += CODEC_IO_Write(DeviceAddr, 0x08, 0xC3);
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	22c3      	movs	r2, #195	; 0xc3
 8002650:	2108      	movs	r1, #8
 8002652:	4618      	mov	r0, r3
 8002654:	f000 faac 	bl	8002bb0 <CODEC_IO_Write>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4413      	add	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* DAC control : Signal processing to DAC, Freeze off, De-emphasis off, Analog output auto mute off, DAC soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, 0x09, 0x42);
 8002662:	89fb      	ldrh	r3, [r7, #14]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2242      	movs	r2, #66	; 0x42
 8002668:	2109      	movs	r1, #9
 800266a:	4618      	mov	r0, r3
 800266c:	f000 faa0 	bl	8002bb0 <CODEC_IO_Write>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	4413      	add	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  /* ALCA and PGAA Control : ALCA soft ramp disable on, ALCA zero cross disable on, PGA A Gain 0dB */  
  counter += CODEC_IO_Write(DeviceAddr, 0x0A, 0xC0);
 800267a:	89fb      	ldrh	r3, [r7, #14]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	22c0      	movs	r2, #192	; 0xc0
 8002680:	210a      	movs	r1, #10
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fa94 	bl	8002bb0 <CODEC_IO_Write>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4413      	add	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* ALCB and PGAB Control : ALCB soft ramp disable on, ALCB zero cross disable on, PGA B Gain 0dB */  
  counter += CODEC_IO_Write(DeviceAddr, 0x0B, 0xC0);
 8002692:	89fb      	ldrh	r3, [r7, #14]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	22c0      	movs	r2, #192	; 0xc0
 8002698:	210b      	movs	r1, #11
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fa88 	bl	8002bb0 <CODEC_IO_Write>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	4413      	add	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
  
  /* ADCA Attenuator : 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x0C, 0x00);
 80026aa:	89fb      	ldrh	r3, [r7, #14]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2200      	movs	r2, #0
 80026b0:	210c      	movs	r1, #12
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fa7c 	bl	8002bb0 <CODEC_IO_Write>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	4413      	add	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

  /* ADCB Attenuator : 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x0D, 0x00);
 80026c2:	89fb      	ldrh	r3, [r7, #14]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2200      	movs	r2, #0
 80026c8:	210d      	movs	r1, #13
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fa70 	bl	8002bb0 <CODEC_IO_Write>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4413      	add	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* ADCA mixer volume control : ADCA mixer channel mute on, ADCA mixer volume 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x0E, 0x80);
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	210e      	movs	r1, #14
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fa64 	bl	8002bb0 <CODEC_IO_Write>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	4413      	add	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
  
  /* ADCB mixer volume control : ADCB mixer channel mute on, ADCB mixer volume 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x0F, 0x80);
 80026f2:	89fb      	ldrh	r3, [r7, #14]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	210f      	movs	r1, #15
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fa58 	bl	8002bb0 <CODEC_IO_Write>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4413      	add	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
  
  /* PCMA mixer volume control : PCMA mixer channel mute off, PCMA mixer volume 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x10, 0x00);
 800270a:	89fb      	ldrh	r3, [r7, #14]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2200      	movs	r2, #0
 8002710:	2110      	movs	r1, #16
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fa4c 	bl	8002bb0 <CODEC_IO_Write>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	4413      	add	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* PCMB mixer volume control : PCMB mixer channel mute off, PCMB mixer volume 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x11, 0x00);
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2200      	movs	r2, #0
 8002728:	2111      	movs	r1, #17
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fa40 	bl	8002bb0 <CODEC_IO_Write>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* PCM channel mixer : AOUTA Left, AOUTB Right */
  counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x00);
 800273a:	89fb      	ldrh	r3, [r7, #14]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2200      	movs	r2, #0
 8002740:	2118      	movs	r1, #24
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fa34 	bl	8002bb0 <CODEC_IO_Write>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	4413      	add	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  if(Device & OUTPUT_DEVICE_HEADPHONE)
 8002752:	89bb      	ldrh	r3, [r7, #12]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d022      	beq.n	80027a2 <cs42l51_Init+0x2be>
  {
    Value = VOLUME_CONVERT(Volume);
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	2b63      	cmp	r3, #99	; 0x63
 8002760:	d805      	bhi.n	800276e <cs42l51_Init+0x28a>
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	331c      	adds	r3, #28
 8002766:	b2db      	uxtb	r3, r3
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e000      	b.n	8002770 <cs42l51_Init+0x28c>
 800276e:	2300      	movs	r3, #0
 8002770:	74fb      	strb	r3, [r7, #19]
    /* AOUTA volume control : AOUTA volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x16, Value);
 8002772:	89fb      	ldrh	r3, [r7, #14]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	7cfa      	ldrb	r2, [r7, #19]
 8002778:	2116      	movs	r1, #22
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fa18 	bl	8002bb0 <CODEC_IO_Write>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4413      	add	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
    /* AOUTB volume control : AOUTB volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x17, Value);
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	7cfa      	ldrb	r2, [r7, #19]
 8002790:	2117      	movs	r1, #23
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fa0c 	bl	8002bb0 <CODEC_IO_Write>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4413      	add	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
  }
  
  /* Store device */
  CS42L51_Device = Device;
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <cs42l51_Init+0x2d4>)
 80027a4:	89bb      	ldrh	r3, [r7, #12]
 80027a6:	8013      	strh	r3, [r2, #0]
  
  /* Return communication control value */
  return counter;  
 80027a8:	697b      	ldr	r3, [r7, #20]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2001cdd4 	.word	0x2001cdd4
 80027b8:	2001c322 	.word	0x2001c322

080027bc <cs42l51_DeInit>:
  * @brief  Deinitialize the audio codec.
  * @param  None
  * @retval  None
  */
void cs42l51_DeInit(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80027c0:	f002 fc42 	bl	8005048 <AUDIO_IO_DeInit>
  
  Is_CS42L51_Initialized = 0;
 80027c4:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <cs42l51_DeInit+0x14>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2001cdd4 	.word	0x2001cdd4

080027d4 <cs42l51_ReadID>:
  * @brief  Get the CS42L51 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS42L51 ID 
  */
uint32_t cs42l51_ReadID(uint16_t DeviceAddr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  
  if(Is_CS42L51_Initialized == 0)
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <cs42l51_ReadID+0x58>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d110      	bne.n	8002808 <cs42l51_ReadID+0x34>
  {
    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init(); 
 80027e6:	f002 fbd7 	bl	8004f98 <AUDIO_IO_Init>
    
    Value = AUDIO_IO_Read(DeviceAddr, CS42L51_CHIPID_ADDR);
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fc9e 	bl	8005132 <AUDIO_IO_Read>
 80027f6:	4603      	mov	r3, r0
 80027f8:	73fb      	strb	r3, [r7, #15]
    Value = (Value & CS42L51_ID_MASK);
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	f023 0307 	bic.w	r3, r3, #7
 8002800:	73fb      	strb	r3, [r7, #15]

    /* Deinitialize Audio Codec interface */
    AUDIO_IO_DeInit();
 8002802:	f002 fc21 	bl	8005048 <AUDIO_IO_DeInit>
 8002806:	e00b      	b.n	8002820 <cs42l51_ReadID+0x4c>
  }
  else
  {
    Value = AUDIO_IO_Read(DeviceAddr, CS42L51_CHIPID_ADDR);
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f002 fc8f 	bl	8005132 <AUDIO_IO_Read>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]
    Value = (Value & CS42L51_ID_MASK);
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	f023 0307 	bic.w	r3, r3, #7
 800281e:	73fb      	strb	r3, [r7, #15]
  }
  
  return((uint32_t) Value);
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2001cdd4 	.word	0x2001cdd4

08002830 <cs42l51_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	80fb      	strh	r3, [r7, #6]
 800283c:	4613      	mov	r3, r2
 800283e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  uint8_t  Value;
  
  if(Is_CS42L51_Stop == 1)
 8002844:	4b44      	ldr	r3, [pc, #272]	; (8002958 <cs42l51_Play+0x128>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d17f      	bne.n	800294c <cs42l51_Play+0x11c>
  {
    /* Unmute output device */  
    counter += cs42l51_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f952 	bl	8002afa <cs42l51_SetMute>
 8002856:	4602      	mov	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

    if(CS42L51_Device & OUTPUT_DEVICE_HEADPHONE)
 800285e:	4b3f      	ldr	r3, [pc, #252]	; (800295c <cs42l51_Play+0x12c>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d022      	beq.n	80028b0 <cs42l51_Play+0x80>
    {
      /* DAC control : Signal processing to DAC, Freeze off, De-emphasis off, Analog output auto mute off, DAC soft ramp */
      counter += CODEC_IO_Write(DeviceAddr, 0x09, 0x42);
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2242      	movs	r2, #66	; 0x42
 8002870:	2109      	movs	r1, #9
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f99c 	bl	8002bb0 <CODEC_IO_Write>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

      /* Power control 1 : PDN_DACA, PDN_DACB disable. */
      Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fc52 	bl	8005132 <AUDIO_IO_Read>
 800288e:	4603      	mov	r3, r0
 8002890:	72fb      	strb	r3, [r7, #11]
      counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value & 0x9F));
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	b2d8      	uxtb	r0, r3
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	2102      	movs	r1, #2
 80028a2:	f000 f985 	bl	8002bb0 <CODEC_IO_Write>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
    }

    if(CS42L51_Device & INPUT_DEVICE_MIC1)
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <cs42l51_Play+0x12c>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02d      	beq.n	8002918 <cs42l51_Play+0xe8>
    {
      /* Power control 1 : PDN_PGAA, PDN_ADCA disable. */
      Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2102      	movs	r1, #2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fc35 	bl	8005132 <AUDIO_IO_Read>
 80028c8:	4603      	mov	r3, r0
 80028ca:	72fb      	strb	r3, [r7, #11]
      counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value & 0xF5));
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	b2d8      	uxtb	r0, r3
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	f023 030a 	bic.w	r3, r3, #10
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	2102      	movs	r1, #2
 80028dc:	f000 f968 	bl	8002bb0 <CODEC_IO_Write>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
      
      /* Mic Power and Speed Control : PDN_MICA, PDN_MIC_BIAS disable. */
      Value = AUDIO_IO_Read(DeviceAddr, 0x03);
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2103      	movs	r1, #3
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fc1e 	bl	8005132 <AUDIO_IO_Read>
 80028f6:	4603      	mov	r3, r0
 80028f8:	72fb      	strb	r3, [r7, #11]
      counter += CODEC_IO_Write(DeviceAddr, 0x03, (Value & 0xF9));
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	b2d8      	uxtb	r0, r3
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	f023 0306 	bic.w	r3, r3, #6
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	2103      	movs	r1, #3
 800290a:	f000 f951 	bl	8002bb0 <CODEC_IO_Write>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4413      	add	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
    }
    
    /* Power control : Exit standby (PDN = 0) */
    Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2102      	movs	r1, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fc07 	bl	8005132 <AUDIO_IO_Read>
 8002924:	4603      	mov	r3, r0
 8002926:	72fb      	strb	r3, [r7, #11]
    counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value & 0xFE));
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	b2d8      	uxtb	r0, r3
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	2102      	movs	r1, #2
 8002938:	f000 f93a 	bl	8002bb0 <CODEC_IO_Write>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

    Is_CS42L51_Stop = 0;
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <cs42l51_Play+0x128>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800294c:	68fb      	ldr	r3, [r7, #12]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	2001c320 	.word	0x2001c320
 800295c:	2001c322 	.word	0x2001c322

08002960 <cs42l51_Pause>:
  * @brief Pause playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Pause(uint16_t DeviceAddr)
{  
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs42l51_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f8c1 	bl	8002afa <cs42l51_SetMute>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
   
  return counter;
 8002980:	68fb      	ldr	r3, [r7, #12]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <cs42l51_Resume>:
  * @brief Resume playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Resume(uint16_t DeviceAddr)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]

  /* Unmute the output  */
  counter += cs42l51_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f8ac 	bl	8002afa <cs42l51_SetMute>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <cs42l51_Stop>:
  * @param DeviceAddr: Device address on communication Bus. 
  * @param CodecPdwnMode: selects the  power down mode (currently not used).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  uint8_t  Value;
  
  /* Set all power down bits to 1 exept PDN to mute ADCs and DACs*/
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x7E);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	227e      	movs	r2, #126	; 0x7e
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f8ef 	bl	8002bb0 <CODEC_IO_Write>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  Value = AUDIO_IO_Read(DeviceAddr, 0x03);
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2103      	movs	r1, #3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 fba5 	bl	8005132 <AUDIO_IO_Read>
 80029e8:	4603      	mov	r3, r0
 80029ea:	72fb      	strb	r3, [r7, #11]
  counter += CODEC_IO_Write(DeviceAddr, 0x03, (Value | 0x0E));
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	b2d8      	uxtb	r0, r3
 80029f0:	7afb      	ldrb	r3, [r7, #11]
 80029f2:	f043 030e 	orr.w	r3, r3, #14
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	2103      	movs	r1, #3
 80029fc:	f000 f8d8 	bl	8002bb0 <CODEC_IO_Write>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  
  /* Disable zero cross and soft ramp */
  Value = AUDIO_IO_Read(DeviceAddr, 0x09);
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2109      	movs	r1, #9
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 fb8e 	bl	8005132 <AUDIO_IO_Read>
 8002a16:	4603      	mov	r3, r0
 8002a18:	72fb      	strb	r3, [r7, #11]
  counter += CODEC_IO_Write(DeviceAddr, 0x09, (Value & 0xFC));
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	b2d8      	uxtb	r0, r3
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	f023 0303 	bic.w	r3, r3, #3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	2109      	movs	r1, #9
 8002a2a:	f000 f8c1 	bl	8002bb0 <CODEC_IO_Write>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	461a      	mov	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4413      	add	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Power control : Enter standby (PDN = 1) */
  Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 fb77 	bl	8005132 <AUDIO_IO_Read>
 8002a44:	4603      	mov	r3, r0
 8002a46:	72fb      	strb	r3, [r7, #11]
  counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value | 0x01));
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	b2d8      	uxtb	r0, r3
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	2102      	movs	r1, #2
 8002a58:	f000 f8aa 	bl	8002bb0 <CODEC_IO_Write>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  Is_CS42L51_Stop = 1;
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <cs42l51_Stop+0xc4>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
  return counter;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	2001c320 	.word	0x2001c320

08002a7c <cs42l51_SetVolume>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param Volume: output volume level (from 0 (-100dB) to 100 (0dB)).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	460a      	mov	r2, r1
 8002a86:	80fb      	strh	r3, [r7, #6]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  uint8_t  convertedvol = VOLUME_CONVERT(Volume);
 8002a90:	797b      	ldrb	r3, [r7, #5]
 8002a92:	2b63      	cmp	r3, #99	; 0x63
 8002a94:	d805      	bhi.n	8002aa2 <cs42l51_SetVolume+0x26>
 8002a96:	797b      	ldrb	r3, [r7, #5]
 8002a98:	331c      	adds	r3, #28
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e000      	b.n	8002aa4 <cs42l51_SetVolume+0x28>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	72fb      	strb	r3, [r7, #11]

  /* AOUTA volume control : AOUTA volume */
  counter += CODEC_IO_Write(DeviceAddr, 0x16, convertedvol);
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	7afa      	ldrb	r2, [r7, #11]
 8002aac:	2116      	movs	r1, #22
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f87e 	bl	8002bb0 <CODEC_IO_Write>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  /* AOUTB volume control : AOUTB volume */
  counter += CODEC_IO_Write(DeviceAddr, 0x17, convertedvol);
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	7afa      	ldrb	r2, [r7, #11]
 8002ac4:	2117      	movs	r1, #23
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f872 	bl	8002bb0 <CODEC_IO_Write>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  return counter;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <cs42l51_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	80fb      	strh	r3, [r7, #6]
  return 0;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <cs42l51_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	6039      	str	r1, [r7, #0]
 8002b04:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
  uint8_t  Value;
  
  /* Read DAC output control register */
  Value = AUDIO_IO_Read(DeviceAddr, 0x08);
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2108      	movs	r1, #8
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 fb0e 	bl	8005132 <AUDIO_IO_Read>
 8002b16:	4603      	mov	r3, r0
 8002b18:	72fb      	strb	r3, [r7, #11]

  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10f      	bne.n	8002b40 <cs42l51_SetMute+0x46>
  {
    /* Mute DAC channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x08, (Value | 0x03));
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	b2d8      	uxtb	r0, r3
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	f043 0303 	orr.w	r3, r3, #3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2108      	movs	r1, #8
 8002b30:	f000 f83e 	bl	8002bb0 <CODEC_IO_Write>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e00e      	b.n	8002b5e <cs42l51_SetMute+0x64>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    /* Unmute DAC channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x08, (Value & 0xFC));
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	b2d8      	uxtb	r0, r3
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2108      	movs	r1, #8
 8002b50:	f000 f82e 	bl	8002bb0 <CODEC_IO_Write>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <cs42l51_SetOutputMode>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param Output: specifies the audio output device target. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	460a      	mov	r2, r1
 8002b72:	80fb      	strh	r3, [r7, #6]
 8002b74:	4613      	mov	r3, r2
 8002b76:	717b      	strb	r3, [r7, #5]
  return 0;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <cs42l51_Reset>:
  * @brief Reset CS42L51 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Reset(uint16_t DeviceAddr)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
  if(Is_CS42L51_Initialized == 1)
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <cs42l51_Reset+0x24>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d103      	bne.n	8002ba2 <cs42l51_Reset+0x1a>
  {
    /* Deinitialize Audio Codec interface */
    AUDIO_IO_DeInit();
 8002b9a:	f002 fa55 	bl	8005048 <AUDIO_IO_DeInit>

    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init();
 8002b9e:	f002 f9fb 	bl	8004f98 <AUDIO_IO_Init>
  }
  return 0;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	2001cdd4 	.word	0x2001cdd4

08002bb0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	71bb      	strb	r3, [r7, #6]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8002bc6:	797a      	ldrb	r2, [r7, #5]
 8002bc8:	79b9      	ldrb	r1, [r7, #6]
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fa99 	bl	8005104 <AUDIO_IO_Write>

#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
 8002bd2:	79ba      	ldrb	r2, [r7, #6]
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 faaa 	bl	8005132 <AUDIO_IO_Read>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	797b      	ldrb	r3, [r7, #5]
 8002be4:	4293      	cmp	r3, r2
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	b2db      	uxtb	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f90d 	bl	8002e28 <ft6x06_GetInstance>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2bff      	cmp	r3, #255	; 0xff
 8002c16:	d10e      	bne.n	8002c36 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f000 f905 	bl	8002e28 <ft6x06_GetInstance>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8002c22:	7bbb      	ldrb	r3, [r7, #14]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d806      	bhi.n	8002c36 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	b2d1      	uxtb	r1, r2
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <ft6x06_Init+0x44>)
 8002c30:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8002c32:	f002 fbc7 	bl	80053c4 <TS_IO_Init>
    }
  }
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2001cdd8 	.word	0x2001cdd8

08002c44 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8002c64:	f002 fbae 	bl	80053c4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	21a8      	movs	r1, #168	; 0xa8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 fbee 	bl	8005450 <TS_IO_Read>
 8002c74:	4603      	mov	r3, r0
 8002c76:	b29b      	uxth	r3, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 f8bc 	bl	8002e0a <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 f88d 	bl	8002db4 <ft6x06_TS_DisableIT>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f002 fbc9 	bl	8005450 <TS_IO_Read>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <ft6x06_TS_DetectTouch+0x50>)
 8002ce0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <ft6x06_TS_DetectTouch+0x50>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	b2db      	uxtb	r3, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2001cddc 	.word	0x2001cddc

08002cf8 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <ft6x06_TS_GetXY+0x90>)
 8002d0c:	789a      	ldrb	r2, [r3, #2]
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <ft6x06_TS_GetXY+0x90>)
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d234      	bcs.n	8002d80 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <ft6x06_TS_GetXY+0x90>)
 8002d18:	789b      	ldrb	r3, [r3, #2]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <ft6x06_TS_GetXY+0x2c>
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d003      	beq.n	8002d2a <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8002d22:	e005      	b.n	8002d30 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8002d24:	2303      	movs	r3, #3
 8002d26:	75fb      	strb	r3, [r7, #23]
      break;
 8002d28:	e002      	b.n	8002d30 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d2e:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	b2d8      	uxtb	r0, r3
 8002d34:	f107 0210 	add.w	r2, r7, #16
 8002d38:	7df9      	ldrb	r1, [r7, #23]
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	f002 fb9e 	bl	800547c <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8002d40:	7c3b      	ldrb	r3, [r7, #16]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	7c7b      	ldrb	r3, [r7, #17]
 8002d4e:	b21b      	sxth	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002d5a:	7cbb      	ldrb	r3, [r7, #18]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d64:	b21a      	sxth	r2, r3
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <ft6x06_TS_GetXY+0x90>)
 8002d76:	789b      	ldrb	r3, [r3, #2]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <ft6x06_TS_GetXY+0x90>)
 8002d7e:	709a      	strb	r2, [r3, #2]
  }
}
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	2001cddc 	.word	0x2001cddc

08002d8c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	21a4      	movs	r1, #164	; 0xa4
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fb38 	bl	800541c <TS_IO_Write>
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	21a4      	movs	r1, #164	; 0xa4
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f002 fb24 	bl	800541c <TS_IO_Write>
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8002e18:	68fb      	ldr	r3, [r7, #12]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e00b      	b.n	8002e54 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <ft6x06_GetInstance+0x40>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d101      	bne.n	8002e4e <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	e006      	b.n	8002e5c <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	3301      	adds	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d9f0      	bls.n	8002e3c <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002e5a:	23ff      	movs	r3, #255	; 0xff
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	2001cdd8 	.word	0x2001cdd8

08002e6c <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 ffd1 	bl	8003e20 <mfxstm32l152_GetInstance>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2bff      	cmp	r3, #255	; 0xff
 8002e86:	d10e      	bne.n	8002ea6 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f000 ffc9 	bl	8003e20 <mfxstm32l152_GetInstance>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8002e92:	7bbb      	ldrb	r3, [r7, #14]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d806      	bhi.n	8002ea6 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	b2d1      	uxtb	r1, r2
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <mfxstm32l152_Init+0x58>)
 8002ea0:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8002ea2:	f001 ff79 	bl	8004d98 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f8db 	bl	8003066 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f8fc 	bl	80030b2 <mfxstm32l152_SetIrqOutPinType>
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2001cde0 	.word	0x2001cde0

08002ec8 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 ffc3 	bl	8003e60 <mfxstm32l152_ReleaseInstance>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2bff      	cmp	r3, #255	; 0xff
 8002ee2:	d001      	beq.n	8002ee8 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8002ee4:	f001 ff68 	bl	8004db8 <MFX_IO_DeInit>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 fffb 	bl	8004efc <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8002f06:	200a      	movs	r0, #10
 8002f08:	f002 f83a 	bl	8004f80 <MFX_IO_Delay>
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2240      	movs	r2, #64	; 0x40
 8002f22:	2140      	movs	r1, #64	; 0x40
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 ffe9 	bl	8004efc <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8002f2a:	f001 ffaf 	bl	8004e8c <MFX_IO_EnableWakeupPin>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 ff6c 	bl	8003e20 <mfxstm32l152_GetInstance>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2bff      	cmp	r3, #255	; 0xff
 8002f50:	d101      	bne.n	8002f56 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8002f52:	f001 ff9b 	bl	8004e8c <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8002f56:	f001 ffbd 	bl	8004ed4 <MFX_IO_Wakeup>
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	f002 f807 	bl	8004f80 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8002f72:	f001 ff11 	bl	8004d98 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 ffd2 	bl	8004f24 <MFX_IO_Read>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	b29b      	uxth	r3, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	460a      	mov	r2, r1
 8002f9a:	80fb      	strh	r3, [r7, #6]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2142      	movs	r1, #66	; 0x42
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 ffbb 	bl	8004f24 <MFX_IO_Read>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	797b      	ldrb	r3, [r7, #5]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	2142      	movs	r1, #66	; 0x42
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 ff9b 	bl	8004efc <MFX_IO_Write>
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	460a      	mov	r2, r1
 8002fd8:	80fb      	strh	r3, [r7, #6]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	2142      	movs	r1, #66	; 0x42
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 ff9c 	bl	8004f24 <MFX_IO_Read>
 8002fec:	4603      	mov	r3, r0
 8002fee:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8002ff0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	b25a      	sxtb	r2, r3
 8002ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	2142      	movs	r1, #66	; 0x42
 8003008:	4618      	mov	r0, r3
 800300a:	f001 ff77 	bl	8004efc <MFX_IO_Write>
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	460a      	mov	r2, r1
 8003020:	80fb      	strh	r3, [r7, #6]
 8003022:	4613      	mov	r3, r2
 8003024:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	2108      	movs	r1, #8
 800302a:	4618      	mov	r0, r3
 800302c:	f001 ff7a 	bl	8004f24 <MFX_IO_Read>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	797b      	ldrb	r3, [r7, #5]
 8003036:	4013      	ands	r3, r2
 8003038:	b2db      	uxtb	r3, r3
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	460a      	mov	r2, r1
 800304c:	80fb      	strh	r3, [r7, #6]
 800304e:	4613      	mov	r3, r2
 8003050:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8003052:	797a      	ldrb	r2, [r7, #5]
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	2144      	movs	r1, #68	; 0x44
 8003058:	4618      	mov	r0, r3
 800305a:	f001 ff4f 	bl	8004efc <MFX_IO_Write>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	460a      	mov	r2, r1
 8003070:	80fb      	strh	r3, [r7, #6]
 8003072:	4613      	mov	r3, r2
 8003074:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2141      	movs	r1, #65	; 0x41
 800307e:	4618      	mov	r0, r3
 8003080:	f001 ff50 	bl	8004f24 <MFX_IO_Read>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	f023 0302 	bic.w	r3, r3, #2
 800308e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	797b      	ldrb	r3, [r7, #5]
 8003094:	4313      	orrs	r3, r2
 8003096:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2141      	movs	r1, #65	; 0x41
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 ff2c 	bl	8004efc <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80030a4:	2001      	movs	r0, #1
 80030a6:	f001 ff6b 	bl	8004f80 <MFX_IO_Delay>

}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	460a      	mov	r2, r1
 80030bc:	80fb      	strh	r3, [r7, #6]
 80030be:	4613      	mov	r3, r2
 80030c0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2141      	movs	r1, #65	; 0x41
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 ff2a 	bl	8004f24 <MFX_IO_Read>
 80030d0:	4603      	mov	r3, r0
 80030d2:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	797b      	ldrb	r3, [r7, #5]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	2141      	movs	r1, #65	; 0x41
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 ff06 	bl	8004efc <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f001 ff45 	bl	8004f80 <MFX_IO_Delay>

}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	6039      	str	r1, [r7, #0]
 8003108:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	4618      	mov	r0, r3
 8003110:	f001 ff08 	bl	8004f24 <MFX_IO_Read>
 8003114:	4603      	mov	r3, r0
 8003116:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d304      	bcc.n	8003132 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	e003      	b.n	800313a <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	f023 0308 	bic.w	r3, r3, #8
 8003138:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	2140      	movs	r1, #64	; 0x40
 8003140:	4618      	mov	r0, r3
 8003142:	f001 fedb 	bl	8004efc <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003146:	2001      	movs	r0, #1
 8003148:	f001 ff1a 	bl	8004f80 <MFX_IO_Delay>
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	80fb      	strh	r3, [r7, #6]
 8003160:	4613      	mov	r3, r2
 8003162:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8003168:	797b      	ldrb	r3, [r7, #5]
 800316a:	2b17      	cmp	r3, #23
 800316c:	f200 82d4 	bhi.w	8003718 <mfxstm32l152_IO_Config+0x5c4>
 8003170:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <mfxstm32l152_IO_Config+0x24>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	08003209 	.word	0x08003209
 800317c:	08003299 	.word	0x08003299
 8003180:	08003359 	.word	0x08003359
 8003184:	08003449 	.word	0x08003449
 8003188:	08003539 	.word	0x08003539
 800318c:	08003629 	.word	0x08003629
 8003190:	080031d9 	.word	0x080031d9
 8003194:	080031d9 	.word	0x080031d9
 8003198:	08003239 	.word	0x08003239
 800319c:	08003269 	.word	0x08003269
 80031a0:	08003719 	.word	0x08003719
 80031a4:	08003329 	.word	0x08003329
 80031a8:	080032f9 	.word	0x080032f9
 80031ac:	08003719 	.word	0x08003719
 80031b0:	080032c9 	.word	0x080032c9
 80031b4:	08003299 	.word	0x08003299
 80031b8:	080033a9 	.word	0x080033a9
 80031bc:	080033f9 	.word	0x080033f9
 80031c0:	08003499 	.word	0x08003499
 80031c4:	080034e9 	.word	0x080034e9
 80031c8:	08003589 	.word	0x08003589
 80031cc:	080035d9 	.word	0x080035d9
 80031d0:	08003679 	.word	0x08003679
 80031d4:	080036c9 	.word	0x080036c9
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	6839      	ldr	r1, [r7, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fb67 	bl	80038b0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2200      	movs	r2, #0
 80031e6:	6839      	ldr	r1, [r7, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fa9d 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80031ee:	88f8      	ldrh	r0, [r7, #6]
 80031f0:	2300      	movs	r3, #0
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	2164      	movs	r1, #100	; 0x64
 80031f6:	f000 fe57 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80031fa:	88f8      	ldrh	r0, [r7, #6]
 80031fc:	2300      	movs	r3, #0
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	2168      	movs	r1, #104	; 0x68
 8003202:	f000 fe51 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003206:	e28a      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fb4f 	bl	80038b0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	2200      	movs	r2, #0
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fa85 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800321e:	88f8      	ldrh	r0, [r7, #6]
 8003220:	2300      	movs	r3, #0
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	2164      	movs	r1, #100	; 0x64
 8003226:	f000 fe3f 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800322a:	88f8      	ldrh	r0, [r7, #6]
 800322c:	2301      	movs	r3, #1
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	2168      	movs	r1, #104	; 0x68
 8003232:	f000 fe39 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003236:	e272      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fb37 	bl	80038b0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	2200      	movs	r2, #0
 8003246:	6839      	ldr	r1, [r7, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fa6d 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800324e:	88f8      	ldrh	r0, [r7, #6]
 8003250:	2301      	movs	r3, #1
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	2164      	movs	r1, #100	; 0x64
 8003256:	f000 fe27 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800325a:	88f8      	ldrh	r0, [r7, #6]
 800325c:	2301      	movs	r3, #1
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	2168      	movs	r1, #104	; 0x68
 8003262:	f000 fe21 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003266:	e25a      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fb1f 	bl	80038b0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2200      	movs	r2, #0
 8003276:	6839      	ldr	r1, [r7, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fa55 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800327e:	88f8      	ldrh	r0, [r7, #6]
 8003280:	2301      	movs	r3, #1
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	2164      	movs	r1, #100	; 0x64
 8003286:	f000 fe0f 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800328a:	88f8      	ldrh	r0, [r7, #6]
 800328c:	2300      	movs	r3, #0
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	2168      	movs	r1, #104	; 0x68
 8003292:	f000 fe09 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003296:	e242      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fb07 	bl	80038b0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	2201      	movs	r2, #1
 80032a6:	6839      	ldr	r1, [r7, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa3d 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80032ae:	88f8      	ldrh	r0, [r7, #6]
 80032b0:	2300      	movs	r3, #0
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	2164      	movs	r1, #100	; 0x64
 80032b6:	f000 fdf7 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80032ba:	88f8      	ldrh	r0, [r7, #6]
 80032bc:	2300      	movs	r3, #0
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	2168      	movs	r1, #104	; 0x68
 80032c2:	f000 fdf1 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    break;
 80032c6:	e22a      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	6839      	ldr	r1, [r7, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 faef 	bl	80038b0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	2201      	movs	r2, #1
 80032d6:	6839      	ldr	r1, [r7, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fa25 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80032de:	88f8      	ldrh	r0, [r7, #6]
 80032e0:	2300      	movs	r3, #0
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	2164      	movs	r1, #100	; 0x64
 80032e6:	f000 fddf 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80032ea:	88f8      	ldrh	r0, [r7, #6]
 80032ec:	2301      	movs	r3, #1
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	2168      	movs	r1, #104	; 0x68
 80032f2:	f000 fdd9 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    break;
 80032f6:	e212      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fad7 	bl	80038b0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2201      	movs	r2, #1
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fa0d 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800330e:	88f8      	ldrh	r0, [r7, #6]
 8003310:	2301      	movs	r3, #1
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	2164      	movs	r1, #100	; 0x64
 8003316:	f000 fdc7 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800331a:	88f8      	ldrh	r0, [r7, #6]
 800331c:	2300      	movs	r3, #0
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	2168      	movs	r1, #104	; 0x68
 8003322:	f000 fdc1 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003326:	e1fa      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fabf 	bl	80038b0 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2201      	movs	r2, #1
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f9f5 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800333e:	88f8      	ldrh	r0, [r7, #6]
 8003340:	2301      	movs	r3, #1
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	2164      	movs	r1, #100	; 0x64
 8003346:	f000 fdaf 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800334a:	88f8      	ldrh	r0, [r7, #6]
 800334c:	2301      	movs	r3, #1
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	2168      	movs	r1, #104	; 0x68
 8003352:	f000 fda9 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    break;
 8003356:	e1e2      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fa7a 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	2200      	movs	r2, #0
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f9de 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800336c:	88f8      	ldrh	r0, [r7, #6]
 800336e:	2300      	movs	r3, #0
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	f000 fd98 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003378:	88f8      	ldrh	r0, [r7, #6]
 800337a:	2301      	movs	r3, #1
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	2168      	movs	r1, #104	; 0x68
 8003380:	f000 fd92 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	2201      	movs	r2, #1
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f9de 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	2201      	movs	r2, #1
 8003394:	6839      	ldr	r1, [r7, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f9ed 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	6839      	ldr	r1, [r7, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fa75 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 80033a6:	e1ba      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fa52 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	2200      	movs	r2, #0
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f9b6 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80033bc:	88f8      	ldrh	r0, [r7, #6]
 80033be:	2301      	movs	r3, #1
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	2164      	movs	r1, #100	; 0x64
 80033c4:	f000 fd70 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80033c8:	88f8      	ldrh	r0, [r7, #6]
 80033ca:	2301      	movs	r3, #1
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	2168      	movs	r1, #104	; 0x68
 80033d0:	f000 fd6a 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	2201      	movs	r2, #1
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f9b6 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2201      	movs	r2, #1
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f9c5 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fa4d 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 80033f6:	e192      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fa2a 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	2200      	movs	r2, #0
 8003404:	6839      	ldr	r1, [r7, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f98e 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800340c:	88f8      	ldrh	r0, [r7, #6]
 800340e:	2301      	movs	r3, #1
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	2164      	movs	r1, #100	; 0x64
 8003414:	f000 fd48 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003418:	88f8      	ldrh	r0, [r7, #6]
 800341a:	2300      	movs	r3, #0
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	2168      	movs	r1, #104	; 0x68
 8003420:	f000 fd42 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	2201      	movs	r2, #1
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f98e 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2201      	movs	r2, #1
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f99d 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fa25 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003446:	e16a      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fa02 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	2200      	movs	r2, #0
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f966 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800345c:	88f8      	ldrh	r0, [r7, #6]
 800345e:	2300      	movs	r3, #0
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	2164      	movs	r1, #100	; 0x64
 8003464:	f000 fd20 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003468:	88f8      	ldrh	r0, [r7, #6]
 800346a:	2301      	movs	r3, #1
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	2168      	movs	r1, #104	; 0x68
 8003470:	f000 fd1a 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	2201      	movs	r2, #1
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f966 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	2200      	movs	r2, #0
 8003484:	6839      	ldr	r1, [r7, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f975 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f9fd 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003496:	e142      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f9da 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	2200      	movs	r2, #0
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f93e 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80034ac:	88f8      	ldrh	r0, [r7, #6]
 80034ae:	2301      	movs	r3, #1
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	2164      	movs	r1, #100	; 0x64
 80034b4:	f000 fcf8 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80034b8:	88f8      	ldrh	r0, [r7, #6]
 80034ba:	2301      	movs	r3, #1
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	2168      	movs	r1, #104	; 0x68
 80034c0:	f000 fcf2 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2201      	movs	r2, #1
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f93e 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	2200      	movs	r2, #0
 80034d4:	6839      	ldr	r1, [r7, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f94d 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	6839      	ldr	r1, [r7, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f9d5 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 80034e6:	e11a      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f9b2 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	2200      	movs	r2, #0
 80034f4:	6839      	ldr	r1, [r7, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f916 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80034fc:	88f8      	ldrh	r0, [r7, #6]
 80034fe:	2301      	movs	r3, #1
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	2164      	movs	r1, #100	; 0x64
 8003504:	f000 fcd0 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003508:	88f8      	ldrh	r0, [r7, #6]
 800350a:	2300      	movs	r3, #0
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	2168      	movs	r1, #104	; 0x68
 8003510:	f000 fcca 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	2201      	movs	r2, #1
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f916 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	2200      	movs	r2, #0
 8003524:	6839      	ldr	r1, [r7, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f925 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f9ad 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003536:	e0f2      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f98a 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	2200      	movs	r2, #0
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f8ee 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800354c:	88f8      	ldrh	r0, [r7, #6]
 800354e:	2300      	movs	r3, #0
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	2164      	movs	r1, #100	; 0x64
 8003554:	f000 fca8 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003558:	88f8      	ldrh	r0, [r7, #6]
 800355a:	2301      	movs	r3, #1
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	2168      	movs	r1, #104	; 0x68
 8003560:	f000 fca2 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2200      	movs	r2, #0
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f8ee 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2200      	movs	r2, #0
 8003574:	6839      	ldr	r1, [r7, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f8fd 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	6839      	ldr	r1, [r7, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f985 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003586:	e0ca      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f962 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2200      	movs	r2, #0
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f8c6 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800359c:	88f8      	ldrh	r0, [r7, #6]
 800359e:	2301      	movs	r3, #1
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	2164      	movs	r1, #100	; 0x64
 80035a4:	f000 fc80 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80035a8:	88f8      	ldrh	r0, [r7, #6]
 80035aa:	2301      	movs	r3, #1
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	2168      	movs	r1, #104	; 0x68
 80035b0:	f000 fc7a 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	2200      	movs	r2, #0
 80035b8:	6839      	ldr	r1, [r7, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f8c6 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	2200      	movs	r2, #0
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f8d5 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	6839      	ldr	r1, [r7, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f95d 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 80035d6:	e0a2      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f93a 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	2200      	movs	r2, #0
 80035e4:	6839      	ldr	r1, [r7, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f89e 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80035ec:	88f8      	ldrh	r0, [r7, #6]
 80035ee:	2301      	movs	r3, #1
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	2164      	movs	r1, #100	; 0x64
 80035f4:	f000 fc58 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80035f8:	88f8      	ldrh	r0, [r7, #6]
 80035fa:	2300      	movs	r3, #0
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	2168      	movs	r1, #104	; 0x68
 8003600:	f000 fc52 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	2200      	movs	r2, #0
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f89e 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	2200      	movs	r2, #0
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f8ad 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f935 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003626:	e07a      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f912 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	2200      	movs	r2, #0
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f876 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800363c:	88f8      	ldrh	r0, [r7, #6]
 800363e:	2300      	movs	r3, #0
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	2164      	movs	r1, #100	; 0x64
 8003644:	f000 fc30 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003648:	88f8      	ldrh	r0, [r7, #6]
 800364a:	2301      	movs	r3, #1
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	2168      	movs	r1, #104	; 0x68
 8003650:	f000 fc2a 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	2200      	movs	r2, #0
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f876 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2201      	movs	r2, #1
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f885 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f90d 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003676:	e052      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f8ea 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	2200      	movs	r2, #0
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f84e 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800368c:	88f8      	ldrh	r0, [r7, #6]
 800368e:	2301      	movs	r3, #1
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	2164      	movs	r1, #100	; 0x64
 8003694:	f000 fc08 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003698:	88f8      	ldrh	r0, [r7, #6]
 800369a:	2301      	movs	r3, #1
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	2168      	movs	r1, #104	; 0x68
 80036a0:	f000 fc02 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	2200      	movs	r2, #0
 80036a8:	6839      	ldr	r1, [r7, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f84e 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	2201      	movs	r2, #1
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f85d 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	6839      	ldr	r1, [r7, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f8e5 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 80036c6:	e02a      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f8c2 	bl	8003854 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	2200      	movs	r2, #0
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f826 	bl	8003728 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80036dc:	88f8      	ldrh	r0, [r7, #6]
 80036de:	2301      	movs	r3, #1
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	2164      	movs	r1, #100	; 0x64
 80036e4:	f000 fbe0 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80036e8:	88f8      	ldrh	r0, [r7, #6]
 80036ea:	2300      	movs	r3, #0
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	2168      	movs	r1, #104	; 0x68
 80036f0:	f000 fbda 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	2200      	movs	r2, #0
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f826 	bl	800374c <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	2201      	movs	r2, #1
 8003704:	6839      	ldr	r1, [r7, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f835 	bl	8003776 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f8bd 	bl	8003890 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003716:	e002      	b.n	800371e <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8003718:	797b      	ldrb	r3, [r7, #5]
 800371a:	73fb      	strb	r3, [r7, #15]
    break;
 800371c:	bf00      	nop
  }

  return error_code;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	80fb      	strh	r3, [r7, #6]
 8003734:	4613      	mov	r3, r2
 8003736:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8003738:	797b      	ldrb	r3, [r7, #5]
 800373a:	88f8      	ldrh	r0, [r7, #6]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	2160      	movs	r1, #96	; 0x60
 8003740:	f000 fbb2 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	80fb      	strh	r3, [r7, #6]
 8003758:	4613      	mov	r3, r2
 800375a:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 800375c:	797b      	ldrb	r3, [r7, #5]
 800375e:	88f8      	ldrh	r0, [r7, #6]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	214c      	movs	r1, #76	; 0x4c
 8003764:	f000 fba0 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003768:	2001      	movs	r0, #1
 800376a:	f001 fc09 	bl	8004f80 <MFX_IO_Delay>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	6039      	str	r1, [r7, #0]
 8003780:	80fb      	strh	r3, [r7, #6]
 8003782:	4613      	mov	r3, r2
 8003784:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8003786:	797b      	ldrb	r3, [r7, #5]
 8003788:	88f8      	ldrh	r0, [r7, #6]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	2150      	movs	r1, #80	; 0x50
 800378e:	f000 fb8b 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003792:	2001      	movs	r0, #1
 8003794:	f001 fbf4 	bl	8004f80 <MFX_IO_Delay>
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	80fb      	strh	r3, [r7, #6]
 80037ac:	4613      	mov	r3, r2
 80037ae:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 80037b0:	797b      	ldrb	r3, [r7, #5]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 80037b6:	88f8      	ldrh	r0, [r7, #6]
 80037b8:	2301      	movs	r3, #1
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	216c      	movs	r1, #108	; 0x6c
 80037be:	f000 fb73 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 80037c2:	e005      	b.n	80037d0 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 80037c4:	88f8      	ldrh	r0, [r7, #6]
 80037c6:	2301      	movs	r3, #1
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	2170      	movs	r1, #112	; 0x70
 80037cc:	f000 fb6c 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	2110      	movs	r1, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 fb91 	bl	8004f24 <MFX_IO_Read>
 8003802:	4603      	mov	r3, r0
 8003804:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800380c:	2b00      	cmp	r3, #0
 800380e:	d006      	beq.n	800381e <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	2111      	movs	r1, #17
 8003814:	4618      	mov	r0, r3
 8003816:	f001 fb85 	bl	8004f24 <MFX_IO_Read>
 800381a:	4603      	mov	r3, r0
 800381c:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d006      	beq.n	8003836 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	2112      	movs	r1, #18
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fb79 	bl	8004f24 <MFX_IO_Read>
 8003832:	4603      	mov	r3, r0
 8003834:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	021a      	lsls	r2, r3, #8
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	441a      	add	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	4413      	add	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4013      	ands	r3, r2
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800385e:	f001 fae7 	bl	8004e30 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fb92 	bl	8002f90 <mfxstm32l152_EnableITSource>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fba3 	bl	8002fce <mfxstm32l152_DisableITSource>
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 800389c:	88f8      	ldrh	r0, [r7, #6]
 800389e:	2301      	movs	r3, #1
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	2148      	movs	r1, #72	; 0x48
 80038a4:	f000 fb00 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 80038bc:	88f8      	ldrh	r0, [r7, #6]
 80038be:	2300      	movs	r3, #0
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	2148      	movs	r1, #72	; 0x48
 80038c4:	f000 faf0 	bl	8003ea8 <mfxstm32l152_reg24_setPinValue>
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	210c      	movs	r1, #12
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 fb15 	bl	8004f24 <MFX_IO_Read>
 80038fa:	4603      	mov	r3, r0
 80038fc:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003904:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	210d      	movs	r1, #13
 8003910:	4618      	mov	r0, r3
 8003912:	f001 fb07 	bl	8004f24 <MFX_IO_Read>
 8003916:	4603      	mov	r3, r0
 8003918:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	210e      	movs	r1, #14
 8003928:	4618      	mov	r0, r3
 800392a:	f001 fafb 	bl	8004f24 <MFX_IO_Read>
 800392e:	4603      	mov	r3, r0
 8003930:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	89bb      	ldrh	r3, [r7, #12]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	4413      	add	r3, r2
 800393a:	461a      	mov	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	041b      	lsls	r3, r3, #16
 8003940:	4413      	add	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	4013      	ands	r3, r2
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	6039      	str	r1, [r7, #0]
 800395c:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	0c1b      	lsrs	r3, r3, #16
 800396c:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2154      	movs	r1, #84	; 0x54
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fabe 	bl	8004efc <MFX_IO_Write>
  }
  if (pin_8_15)
 8003980:	7bbb      	ldrb	r3, [r7, #14]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8003986:	7bba      	ldrb	r2, [r7, #14]
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2155      	movs	r1, #85	; 0x55
 800398c:	4618      	mov	r0, r3
 800398e:	f001 fab5 	bl	8004efc <MFX_IO_Write>
  }
  if (pin_16_23)
 8003992:	7b7b      	ldrb	r3, [r7, #13]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8003998:	7b7a      	ldrb	r2, [r7, #13]
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	2156      	movs	r1, #86	; 0x56
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 faac 	bl	8004efc <MFX_IO_Write>
  }
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 faae 	bl	8004f24 <MFX_IO_Read>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	b29b      	uxth	r3, r3
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fa8c 	bl	8004efc <MFX_IO_Write>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80039ec:	b084      	sub	sp, #16
 80039ee:	b590      	push	{r4, r7, lr}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4604      	mov	r4, r0
 80039f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80039fe:	4623      	mov	r3, r4
 8003a00:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 fa86 	bl	8004f24 <MFX_IO_Read>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8003a1c:	7bbb      	ldrb	r3, [r7, #14]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8003a26:	7bbb      	ldrb	r3, [r7, #14]
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	7bba      	ldrb	r2, [r7, #14]
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fa5f 	bl	8004efc <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8003a3e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 030e 	and.w	r3, r3, #14
 8003a4a:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8003a4c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a50:	b25b      	sxtb	r3, r3
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	b25a      	sxtb	r2, r3
 8003a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	b25b      	sxtb	r3, r3
 8003a60:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8003a62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a66:	b25b      	sxtb	r3, r3
 8003a68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a6c:	b25a      	sxtb	r2, r3
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	b25b      	sxtb	r3, r3
 8003a76:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fa3a 	bl	8004efc <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003a88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a92:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8003a94:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a9e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	2181      	movs	r1, #129	; 0x81
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 fa23 	bl	8004efc <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8003ab6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	2182      	movs	r1, #130	; 0x82
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fa17 	bl	8004efc <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8003ace:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ad0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	2183      	movs	r1, #131	; 0x83
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 fa0d 	bl	8004efc <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8003ae2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	2184      	movs	r1, #132	; 0x84
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 fa01 	bl	8004efc <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8003afa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003afc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	2185      	movs	r1, #133	; 0x85
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 f9f7 	bl	8004efc <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8003b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	2186      	movs	r1, #134	; 0x86
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f9eb 	bl	8004efc <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8003b26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b28:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	2187      	movs	r1, #135	; 0x87
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 f9e1 	bl	8004efc <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8003b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	2188      	movs	r1, #136	; 0x88
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 f9d5 	bl	8004efc <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8003b52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b54:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	2189      	movs	r1, #137	; 0x89
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 f9cb 	bl	8004efc <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8003b66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	218a      	movs	r1, #138	; 0x8a
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 f9bf 	bl	8004efc <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8003b7e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003b80:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	218b      	movs	r1, #139	; 0x8b
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f001 f9b5 	bl	8004efc <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8003b92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b94:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	2190      	movs	r1, #144	; 0x90
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f9ab 	bl	8004efc <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8003ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ba8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	2191      	movs	r1, #145	; 0x91
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 f9a1 	bl	8004efc <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8003bba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bbc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	2192      	movs	r1, #146	; 0x92
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 f997 	bl	8004efc <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8003bce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003bd0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	2193      	movs	r1, #147	; 0x93
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 f98d 	bl	8004efc <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8003be2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003be4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	2194      	movs	r1, #148	; 0x94
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f983 	bl	8004efc <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8003bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	218c      	movs	r1, #140	; 0x8c
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 f977 	bl	8004efc <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8003c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c10:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	218d      	movs	r1, #141	; 0x8d
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 f96d 	bl	8004efc <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8003c22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	218e      	movs	r1, #142	; 0x8e
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 f961 	bl	8004efc <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8003c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c3c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	218f      	movs	r1, #143	; 0x8f
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 f957 	bl	8004efc <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8003c4e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003c52:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	2196      	movs	r1, #150	; 0x96
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 f94c 	bl	8004efc <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003c64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c6e:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8003c70:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003c74:	b25b      	sxtb	r3, r3
 8003c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c7a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	2197      	movs	r1, #151	; 0x97
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 f935 	bl	8004efc <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8003c92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003c96:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	2198      	movs	r1, #152	; 0x98
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 f92a 	bl	8004efc <MFX_IO_Write>
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003cb2:	b004      	add	sp, #16
 8003cb4:	4770      	bx	lr

08003cb6 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	6039      	str	r1, [r7, #0]
 8003cc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	b298      	uxth	r0, r3
 8003cc8:	f107 020c 	add.w	r2, r7, #12
 8003ccc:	2303      	movs	r3, #3
 8003cce:	2114      	movs	r1, #20
 8003cd0:	f001 f93c 	bl	8004f4c <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8003cd4:	7b3b      	ldrb	r3, [r7, #12]
 8003cd6:	041a      	lsls	r2, r3, #16
 8003cd8:	7b7b      	ldrb	r3, [r7, #13]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	7bba      	ldrb	r2, [r7, #14]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	601a      	str	r2, [r3, #0]

}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003cfa:	f001 f899 	bl	8004e30 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	2102      	movs	r1, #2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f944 	bl	8002f90 <mfxstm32l152_EnableITSource>
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff f98f 	bl	8003042 <mfxstm32l152_ClearGlobalIT>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff f96b 	bl	8003016 <mfxstm32l152_GlobalITStatus>
 8003d40:	4603      	mov	r3, r0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	4603      	mov	r3, r0
 8003d52:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2102      	movs	r1, #2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff f938 	bl	8002fce <mfxstm32l152_DisableITSource>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2103      	movs	r1, #3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 f8d3 	bl	8004f24 <MFX_IO_Read>
 8003d7e:	4603      	mov	r3, r0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2104      	movs	r1, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f8c2 	bl	8004f24 <MFX_IO_Read>
 8003da0:	4603      	mov	r3, r0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003db4:	f001 f83c 	bl	8004e30 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	2104      	movs	r1, #4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff f8e7 	bl	8002f90 <mfxstm32l152_EnableITSource>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff f932 	bl	8003042 <mfxstm32l152_ClearGlobalIT>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	2104      	movs	r1, #4
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff f90e 	bl	8003016 <mfxstm32l152_GlobalITStatus>
 8003dfa:	4603      	mov	r3, r0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2104      	movs	r1, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff f8db 	bl	8002fce <mfxstm32l152_DisableITSource>
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
 8003e2e:	e00b      	b.n	8003e48 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <mfxstm32l152_GetInstance+0x3c>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d101      	bne.n	8003e42 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	e006      	b.n	8003e50 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	3301      	adds	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d9f0      	bls.n	8003e30 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8003e4e:	23ff      	movs	r3, #255	; 0xff
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	2001cde0 	.word	0x2001cde0

08003e60 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
 8003e6e:	e00f      	b.n	8003e90 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <mfxstm32l152_ReleaseInstance+0x44>)
 8003e74:	5cd3      	ldrb	r3, [r2, r3]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d105      	bne.n	8003e8a <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <mfxstm32l152_ReleaseInstance+0x44>)
 8003e82:	2100      	movs	r1, #0
 8003e84:	54d1      	strb	r1, [r2, r3]
      return idx;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	e006      	b.n	8003e98 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d9ec      	bls.n	8003e70 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8003e96:	23ff      	movs	r3, #255	; 0xff
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	2001cde0 	.word	0x2001cde0

08003ea8 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	603a      	str	r2, [r7, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80fb      	strh	r3, [r7, #6]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	717b      	strb	r3, [r7, #5]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8003ed2:	7bbb      	ldrb	r3, [r7, #14]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01e      	beq.n	8003f16 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8003ed8:	797a      	ldrb	r2, [r7, #5]
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f820 	bl	8004f24 <MFX_IO_Read>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003ee8:	793b      	ldrb	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	7bbb      	ldrb	r3, [r7, #14]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	e008      	b.n	8003f0a <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8003ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	b25a      	sxtb	r2, r3
 8003f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f04:	4013      	ands	r3, r2
 8003f06:	b25b      	sxtb	r3, r3
 8003f08:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	7979      	ldrb	r1, [r7, #5]
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fff3 	bl	8004efc <MFX_IO_Write>
  }

  if (pin_8_15)
 8003f16:	7b7b      	ldrb	r3, [r7, #13]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d022      	beq.n	8003f62 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8003f1c:	797b      	ldrb	r3, [r7, #5]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fffc 	bl	8004f24 <MFX_IO_Read>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003f30:	793b      	ldrb	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d004      	beq.n	8003f40 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	7b7b      	ldrb	r3, [r7, #13]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	73fb      	strb	r3, [r7, #15]
 8003f3e:	e008      	b.n	8003f52 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8003f40:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	b25a      	sxtb	r2, r3
 8003f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8003f52:	797b      	ldrb	r3, [r7, #5]
 8003f54:	3301      	adds	r3, #1
 8003f56:	b2d9      	uxtb	r1, r3
 8003f58:	7bfa      	ldrb	r2, [r7, #15]
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 ffcd 	bl	8004efc <MFX_IO_Write>
  }

  if (pin_16_23)
 8003f62:	7b3b      	ldrb	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d022      	beq.n	8003fae <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8003f68:	797b      	ldrb	r3, [r7, #5]
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 ffd6 	bl	8004f24 <MFX_IO_Read>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003f7c:	793b      	ldrb	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	7b3b      	ldrb	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	73fb      	strb	r3, [r7, #15]
 8003f8a:	e008      	b.n	8003f9e <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8003f8c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	b25a      	sxtb	r2, r3
 8003f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8003f9e:	797b      	ldrb	r3, [r7, #5]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	b2d9      	uxtb	r1, r3
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 ffa7 	bl	8004efc <MFX_IO_Write>
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003fbc:	f001 f9d0 	bl	8005360 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	2010      	movs	r0, #16
 8003fc6:	f000 f9e4 	bl	8004392 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8003fca:	200a      	movs	r0, #10
 8003fcc:	f001 f9ef 	bl	80053ae <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f000 f9dc 	bl	8004392 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8003fda:	20c8      	movs	r0, #200	; 0xc8
 8003fdc:	f001 f9e7 	bl	80053ae <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	2011      	movs	r0, #17
 8003fe6:	f000 f9d4 	bl	8004392 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8003fea:	2078      	movs	r0, #120	; 0x78
 8003fec:	f001 f9df 	bl	80053ae <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	2036      	movs	r0, #54	; 0x36
 8003ffc:	f000 f9c9 	bl	8004392 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8004000:	2305      	movs	r3, #5
 8004002:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8004004:	463b      	mov	r3, r7
 8004006:	2201      	movs	r2, #1
 8004008:	4619      	mov	r1, r3
 800400a:	203a      	movs	r0, #58	; 0x3a
 800400c:	f000 f9c1 	bl	8004392 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8004010:	2200      	movs	r2, #0
 8004012:	2100      	movs	r1, #0
 8004014:	2021      	movs	r0, #33	; 0x21
 8004016:	f000 f9bc 	bl	8004392 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 800401a:	2300      	movs	r3, #0
 800401c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800401e:	2300      	movs	r3, #0
 8004020:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004022:	2300      	movs	r3, #0
 8004024:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004026:	23ef      	movs	r3, #239	; 0xef
 8004028:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 800402a:	463b      	mov	r3, r7
 800402c:	2204      	movs	r2, #4
 800402e:	4619      	mov	r1, r3
 8004030:	202a      	movs	r0, #42	; 0x2a
 8004032:	f000 f9ae 	bl	8004392 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8004036:	2300      	movs	r3, #0
 8004038:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800403a:	2300      	movs	r3, #0
 800403c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800403e:	2300      	movs	r3, #0
 8004040:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004042:	23ef      	movs	r3, #239	; 0xef
 8004044:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8004046:	463b      	mov	r3, r7
 8004048:	2204      	movs	r2, #4
 800404a:	4619      	mov	r1, r3
 800404c:	202b      	movs	r0, #43	; 0x2b
 800404e:	f000 f9a0 	bl	8004392 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8004052:	230c      	movs	r3, #12
 8004054:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8004056:	230c      	movs	r3, #12
 8004058:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800405a:	2300      	movs	r3, #0
 800405c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 800405e:	2333      	movs	r3, #51	; 0x33
 8004060:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8004062:	2333      	movs	r3, #51	; 0x33
 8004064:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8004066:	463b      	mov	r3, r7
 8004068:	2205      	movs	r2, #5
 800406a:	4619      	mov	r1, r3
 800406c:	20b2      	movs	r0, #178	; 0xb2
 800406e:	f000 f990 	bl	8004392 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8004072:	2335      	movs	r3, #53	; 0x35
 8004074:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8004076:	463b      	mov	r3, r7
 8004078:	2201      	movs	r2, #1
 800407a:	4619      	mov	r1, r3
 800407c:	20b7      	movs	r0, #183	; 0xb7
 800407e:	f000 f988 	bl	8004392 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8004082:	231f      	movs	r3, #31
 8004084:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8004086:	463b      	mov	r3, r7
 8004088:	2201      	movs	r2, #1
 800408a:	4619      	mov	r1, r3
 800408c:	20bb      	movs	r0, #187	; 0xbb
 800408e:	f000 f980 	bl	8004392 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8004092:	232c      	movs	r3, #44	; 0x2c
 8004094:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8004096:	463b      	mov	r3, r7
 8004098:	2201      	movs	r2, #1
 800409a:	4619      	mov	r1, r3
 800409c:	20c0      	movs	r0, #192	; 0xc0
 800409e:	f000 f978 	bl	8004392 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80040a2:	2301      	movs	r3, #1
 80040a4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80040a6:	23c3      	movs	r3, #195	; 0xc3
 80040a8:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80040aa:	463b      	mov	r3, r7
 80040ac:	2202      	movs	r2, #2
 80040ae:	4619      	mov	r1, r3
 80040b0:	20c2      	movs	r0, #194	; 0xc2
 80040b2:	f000 f96e 	bl	8004392 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80040b6:	2320      	movs	r3, #32
 80040b8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80040ba:	463b      	mov	r3, r7
 80040bc:	2201      	movs	r2, #1
 80040be:	4619      	mov	r1, r3
 80040c0:	20c4      	movs	r0, #196	; 0xc4
 80040c2:	f000 f966 	bl	8004392 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80040c6:	230f      	movs	r3, #15
 80040c8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80040ca:	463b      	mov	r3, r7
 80040cc:	2201      	movs	r2, #1
 80040ce:	4619      	mov	r1, r3
 80040d0:	20c6      	movs	r0, #198	; 0xc6
 80040d2:	f000 f95e 	bl	8004392 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80040d6:	23a4      	movs	r3, #164	; 0xa4
 80040d8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80040da:	23a1      	movs	r3, #161	; 0xa1
 80040dc:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 80040de:	463b      	mov	r3, r7
 80040e0:	2202      	movs	r2, #2
 80040e2:	4619      	mov	r1, r3
 80040e4:	20d0      	movs	r0, #208	; 0xd0
 80040e6:	f000 f954 	bl	8004392 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80040ea:	23d0      	movs	r3, #208	; 0xd0
 80040ec:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80040ee:	2308      	movs	r3, #8
 80040f0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80040f2:	2311      	movs	r3, #17
 80040f4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80040f6:	2308      	movs	r3, #8
 80040f8:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80040fa:	230c      	movs	r3, #12
 80040fc:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80040fe:	2315      	movs	r3, #21
 8004100:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004102:	2339      	movs	r3, #57	; 0x39
 8004104:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8004106:	2333      	movs	r3, #51	; 0x33
 8004108:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 800410a:	2350      	movs	r3, #80	; 0x50
 800410c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800410e:	2336      	movs	r3, #54	; 0x36
 8004110:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8004112:	2313      	movs	r3, #19
 8004114:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004116:	2314      	movs	r3, #20
 8004118:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 800411a:	2329      	movs	r3, #41	; 0x29
 800411c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800411e:	232d      	movs	r3, #45	; 0x2d
 8004120:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8004122:	463b      	mov	r3, r7
 8004124:	220e      	movs	r2, #14
 8004126:	4619      	mov	r1, r3
 8004128:	20e0      	movs	r0, #224	; 0xe0
 800412a:	f000 f932 	bl	8004392 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800412e:	23d0      	movs	r3, #208	; 0xd0
 8004130:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8004132:	2308      	movs	r3, #8
 8004134:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8004136:	2310      	movs	r3, #16
 8004138:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800413a:	2308      	movs	r3, #8
 800413c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 800413e:	2306      	movs	r3, #6
 8004140:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8004142:	2306      	movs	r3, #6
 8004144:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004146:	2339      	movs	r3, #57	; 0x39
 8004148:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 800414a:	2344      	movs	r3, #68	; 0x44
 800414c:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 800414e:	2351      	movs	r3, #81	; 0x51
 8004150:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8004152:	230b      	movs	r3, #11
 8004154:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8004156:	2316      	movs	r3, #22
 8004158:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800415a:	2314      	movs	r3, #20
 800415c:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 800415e:	232f      	movs	r3, #47	; 0x2f
 8004160:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8004162:	2331      	movs	r3, #49	; 0x31
 8004164:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8004166:	463b      	mov	r3, r7
 8004168:	220e      	movs	r2, #14
 800416a:	4619      	mov	r1, r3
 800416c:	20e1      	movs	r0, #225	; 0xe1
 800416e:	f000 f910 	bl	8004392 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8004172:	f000 f847 	bl	8004204 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8004176:	2300      	movs	r3, #0
 8004178:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800417a:	463b      	mov	r3, r7
 800417c:	2201      	movs	r2, #1
 800417e:	4619      	mov	r1, r3
 8004180:	2035      	movs	r0, #53	; 0x35
 8004182:	f000 f906 	bl	8004392 <ST7789H2_WriteReg>

}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d102      	bne.n	80041a2 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 800419c:	2300      	movs	r3, #0
 800419e:	723b      	strb	r3, [r7, #8]
 80041a0:	e025      	b.n	80041ee <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d120      	bne.n	80041ea <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80041a8:	2300      	movs	r3, #0
 80041aa:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80041ac:	2300      	movs	r3, #0
 80041ae:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80041b0:	2301      	movs	r3, #1
 80041b2:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80041b4:	23f0      	movs	r3, #240	; 0xf0
 80041b6:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80041b8:	2300      	movs	r3, #0
 80041ba:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80041bc:	2300      	movs	r3, #0
 80041be:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80041c0:	f107 0308 	add.w	r3, r7, #8
 80041c4:	2206      	movs	r2, #6
 80041c6:	4619      	mov	r1, r3
 80041c8:	2033      	movs	r0, #51	; 0x33
 80041ca:	f000 f8e2 	bl	8004392 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80041ce:	2300      	movs	r3, #0
 80041d0:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80041d2:	2350      	movs	r3, #80	; 0x50
 80041d4:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80041d6:	f107 0308 	add.w	r3, r7, #8
 80041da:	2202      	movs	r2, #2
 80041dc:	4619      	mov	r1, r3
 80041de:	2037      	movs	r0, #55	; 0x37
 80041e0:	f000 f8d7 	bl	8004392 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80041e4:	23c0      	movs	r3, #192	; 0xc0
 80041e6:	723b      	strb	r3, [r7, #8]
 80041e8:	e001      	b.n	80041ee <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80041ea:	2360      	movs	r3, #96	; 0x60
 80041ec:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80041ee:	f107 0308 	add.w	r3, r7, #8
 80041f2:	2201      	movs	r2, #1
 80041f4:	4619      	mov	r1, r3
 80041f6:	2036      	movs	r0, #54	; 0x36
 80041f8:	f000 f8cb 	bl	8004392 <ST7789H2_WriteReg>
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8004208:	2200      	movs	r2, #0
 800420a:	2100      	movs	r1, #0
 800420c:	2029      	movs	r0, #41	; 0x29
 800420e:	f000 f8c0 	bl	8004392 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8004212:	2200      	movs	r2, #0
 8004214:	2100      	movs	r1, #0
 8004216:	2011      	movs	r0, #17
 8004218:	f000 f8bb 	bl	8004392 <ST7789H2_WriteReg>
}
 800421c:	bf00      	nop
 800421e:	bd80      	pop	{r7, pc}

08004220 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8004226:	23fe      	movs	r3, #254	; 0xfe
 8004228:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	2201      	movs	r2, #1
 800422e:	4619      	mov	r1, r3
 8004230:	20bd      	movs	r0, #189	; 0xbd
 8004232:	f000 f8ae 	bl	8004392 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004236:	2200      	movs	r2, #0
 8004238:	2100      	movs	r1, #0
 800423a:	2010      	movs	r0, #16
 800423c:	f000 f8a9 	bl	8004392 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8004240:	200a      	movs	r0, #10
 8004242:	f001 f8b4 	bl	80053ae <LCD_IO_Delay>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8004252:	23f0      	movs	r3, #240	; 0xf0
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8004262:	23f0      	movs	r3, #240	; 0xf0
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8004272:	f001 f875 	bl	8005360 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8004276:	2004      	movs	r0, #4
 8004278:	f000 f8ae 	bl	80043d8 <ST7789H2_ReadReg>
 800427c:	4603      	mov	r3, r0
 800427e:	b29b      	uxth	r3, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}

08004284 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	460a      	mov	r2, r1
 800428e:	80fb      	strh	r3, [r7, #6]
 8004290:	4613      	mov	r3, r2
 8004292:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8004294:	2300      	movs	r3, #0
 8004296:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800429e:	2300      	movs	r3, #0
 80042a0:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3b11      	subs	r3, #17
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	2204      	movs	r2, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	202a      	movs	r0, #42	; 0x2a
 80042b6:	f000 f86c 	bl	8004392 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80042ba:	2300      	movs	r3, #0
 80042bc:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80042be:	88bb      	ldrh	r3, [r7, #4]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80042c4:	2300      	movs	r3, #0
 80042c6:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80042c8:	88bb      	ldrh	r3, [r7, #4]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3b11      	subs	r3, #17
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	2204      	movs	r2, #4
 80042d8:	4619      	mov	r1, r3
 80042da:	202b      	movs	r0, #43	; 0x2b
 80042dc:	f000 f859 	bl	8004392 <ST7789H2_WriteReg>
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
 80042f2:	460b      	mov	r3, r1
 80042f4:	80bb      	strh	r3, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80042fa:	88ba      	ldrh	r2, [r7, #4]
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ffbf 	bl	8004284 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004306:	2200      	movs	r2, #0
 8004308:	2100      	movs	r1, #0
 800430a:	202c      	movs	r0, #44	; 0x2c
 800430c:	f000 f841 	bl	8004392 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	4618      	mov	r0, r3
 8004314:	f001 f82a 	bl	800536c <LCD_IO_WriteData>
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	460a      	mov	r2, r1
 800432a:	80fb      	strh	r3, [r7, #6]
 800432c:	4613      	mov	r3, r2
 800432e:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004330:	88ba      	ldrh	r2, [r7, #4]
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff ffa4 	bl	8004284 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 800433c:	88ba      	ldrh	r2, [r7, #4]
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f9c0 	bl	80046c8 <ST7789H2_ReadPixel_rgb888>
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	733a      	strb	r2, [r7, #12]
 800434e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004352:	737a      	strb	r2, [r7, #13]
 8004354:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004358:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800435a:	7b3b      	ldrb	r3, [r7, #12]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8004360:	7b7b      	ldrb	r3, [r7, #13]
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8004366:	7bbb      	ldrb	r3, [r7, #14]
 8004368:	08db      	lsrs	r3, r3, #3
 800436a:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	b29b      	uxth	r3, r3
 8004370:	02db      	lsls	r3, r3, #11
 8004372:	b29a      	uxth	r2, r3
 8004374:	7dbb      	ldrb	r3, [r7, #22]
 8004376:	b29b      	uxth	r3, r3
 8004378:	015b      	lsls	r3, r3, #5
 800437a:	b29b      	uxth	r3, r3
 800437c:	4413      	add	r3, r2
 800437e:	b29a      	uxth	r2, r3
 8004380:	7d7b      	ldrb	r3, [r7, #21]
 8004382:	b29b      	uxth	r3, r3
 8004384:	4413      	add	r3, r2
 8004386:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8004388:	8a7b      	ldrh	r3, [r7, #18]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	6039      	str	r1, [r7, #0]
 800439c:	71fb      	strb	r3, [r7, #7]
 800439e:	4613      	mov	r3, r2
 80043a0:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 ffee 	bl	8005386 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
 80043ae:	e00a      	b.n	80043c6 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 ffd6 	bl	800536c <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	3301      	adds	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	79bb      	ldrb	r3, [r7, #6]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d3f0      	bcc.n	80043b0 <ST7789H2_WriteReg+0x1e>
  }
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 ffce 	bl	8005386 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80043ea:	f000 ffd9 	bl	80053a0 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80043ee:	f000 ffd7 	bl	80053a0 <LCD_IO_ReadData>
 80043f2:	4603      	mov	r3, r0
 80043f4:	b2db      	uxtb	r3, r3
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004400:	b490      	push	{r4, r7}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	4604      	mov	r4, r0
 8004408:	4608      	mov	r0, r1
 800440a:	4611      	mov	r1, r2
 800440c:	461a      	mov	r2, r3
 800440e:	4623      	mov	r3, r4
 8004410:	80fb      	strh	r3, [r7, #6]
 8004412:	4603      	mov	r3, r0
 8004414:	80bb      	strh	r3, [r7, #4]
 8004416:	460b      	mov	r3, r1
 8004418:	807b      	strh	r3, [r7, #2]
 800441a:	4613      	mov	r3, r2
 800441c:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2bef      	cmp	r3, #239	; 0xef
 8004422:	d803      	bhi.n	800442c <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <ST7789H2_SetDisplayWindow+0x94>)
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	8013      	strh	r3, [r2, #0]
 800442a:	e002      	b.n	8004432 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <ST7789H2_SetDisplayWindow+0x94>)
 800442e:	2200      	movs	r2, #0
 8004430:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8004432:	88bb      	ldrh	r3, [r7, #4]
 8004434:	2bef      	cmp	r3, #239	; 0xef
 8004436:	d803      	bhi.n	8004440 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8004438:	4a17      	ldr	r2, [pc, #92]	; (8004498 <ST7789H2_SetDisplayWindow+0x98>)
 800443a:	88bb      	ldrh	r3, [r7, #4]
 800443c:	8013      	strh	r3, [r2, #0]
 800443e:	e002      	b.n	8004446 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <ST7789H2_SetDisplayWindow+0x98>)
 8004442:	2200      	movs	r2, #0
 8004444:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	4413      	add	r3, r2
 800444c:	2bf0      	cmp	r3, #240	; 0xf0
 800444e:	dc08      	bgt.n	8004462 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8004450:	887a      	ldrh	r2, [r7, #2]
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	4413      	add	r3, r2
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <ST7789H2_SetDisplayWindow+0x9c>)
 800445e:	801a      	strh	r2, [r3, #0]
 8004460:	e002      	b.n	8004468 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <ST7789H2_SetDisplayWindow+0x9c>)
 8004464:	22ef      	movs	r2, #239	; 0xef
 8004466:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8004468:	883a      	ldrh	r2, [r7, #0]
 800446a:	88bb      	ldrh	r3, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	2bf0      	cmp	r3, #240	; 0xf0
 8004470:	dc08      	bgt.n	8004484 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8004472:	883a      	ldrh	r2, [r7, #0]
 8004474:	88bb      	ldrh	r3, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <ST7789H2_SetDisplayWindow+0xa0>)
 8004480:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8004482:	e002      	b.n	800448a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <ST7789H2_SetDisplayWindow+0xa0>)
 8004486:	22ef      	movs	r2, #239	; 0xef
 8004488:	801a      	strh	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bc90      	pop	{r4, r7}
 8004492:	4770      	bx	lr
 8004494:	2001cde4 	.word	0x2001cde4
 8004498:	2001cde6 	.word	0x2001cde6
 800449c:	2001c3fc 	.word	0x2001c3fc
 80044a0:	2001c3fe 	.word	0x2001c3fe

080044a4 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4604      	mov	r4, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4623      	mov	r3, r4
 80044b4:	80fb      	strh	r3, [r7, #6]
 80044b6:	4603      	mov	r3, r0
 80044b8:	80bb      	strh	r3, [r7, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	807b      	strh	r3, [r7, #2]
 80044be:	4613      	mov	r3, r2
 80044c0:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80044c2:	887a      	ldrh	r2, [r7, #2]
 80044c4:	88bb      	ldrh	r3, [r7, #4]
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fedb 	bl	8004284 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	202c      	movs	r0, #44	; 0x2c
 80044d4:	f7ff ff5d 	bl	8004392 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80044d8:	2300      	movs	r3, #0
 80044da:	81fb      	strh	r3, [r7, #14]
 80044dc:	e006      	b.n	80044ec <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 ff43 	bl	800536c <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80044e6:	89fb      	ldrh	r3, [r7, #14]
 80044e8:	3301      	adds	r3, #1
 80044ea:	81fb      	strh	r3, [r7, #14]
 80044ec:	89fa      	ldrh	r2, [r7, #14]
 80044ee:	883b      	ldrh	r3, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d3f4      	bcc.n	80044de <ST7789H2_DrawHLine+0x3a>
  }  
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd90      	pop	{r4, r7, pc}

080044fe <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80044fe:	b590      	push	{r4, r7, lr}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	4604      	mov	r4, r0
 8004506:	4608      	mov	r0, r1
 8004508:	4611      	mov	r1, r2
 800450a:	461a      	mov	r2, r3
 800450c:	4623      	mov	r3, r4
 800450e:	80fb      	strh	r3, [r7, #6]
 8004510:	4603      	mov	r3, r0
 8004512:	80bb      	strh	r3, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
 8004518:	4613      	mov	r3, r2
 800451a:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800451c:	887a      	ldrh	r2, [r7, #2]
 800451e:	88bb      	ldrh	r3, [r7, #4]
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff feae 	bl	8004284 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004528:	2200      	movs	r2, #0
 800452a:	2100      	movs	r1, #0
 800452c:	202c      	movs	r0, #44	; 0x2c
 800452e:	f7ff ff30 	bl	8004392 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8004532:	2300      	movs	r3, #0
 8004534:	81fb      	strh	r3, [r7, #14]
 8004536:	e00b      	b.n	8004550 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8004538:	887a      	ldrh	r2, [r7, #2]
 800453a:	89fb      	ldrh	r3, [r7, #14]
 800453c:	4413      	add	r3, r2
 800453e:	b299      	uxth	r1, r3
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	88bb      	ldrh	r3, [r7, #4]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fecf 	bl	80042e8 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 800454a:	89fb      	ldrh	r3, [r7, #14]
 800454c:	3301      	adds	r3, #1
 800454e:	81fb      	strh	r3, [r7, #14]
 8004550:	89fa      	ldrh	r2, [r7, #14]
 8004552:	883b      	ldrh	r3, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d3ef      	bcc.n	8004538 <ST7789H2_DrawVLine+0x3a>
  }
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bd90      	pop	{r4, r7, pc}
	...

08004564 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	603a      	str	r2, [r7, #0]
 800456e:	80fb      	strh	r3, [r7, #6]
 8004570:	460b      	mov	r3, r1
 8004572:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8004580:	4b30      	ldr	r3, [pc, #192]	; (8004644 <ST7789H2_DrawBitmap+0xe0>)
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	4b30      	ldr	r3, [pc, #192]	; (8004648 <ST7789H2_DrawBitmap+0xe4>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	b29b      	uxth	r3, r3
 800458c:	3301      	adds	r3, #1
 800458e:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8004590:	4b2e      	ldr	r3, [pc, #184]	; (800464c <ST7789H2_DrawBitmap+0xe8>)
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <ST7789H2_DrawBitmap+0xec>)
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	b29b      	uxth	r3, r3
 800459c:	3301      	adds	r3, #1
 800459e:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	3302      	adds	r3, #2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	3304      	adds	r3, #4
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	461a      	mov	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	330a      	adds	r3, #10
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	041b      	lsls	r3, r3, #16
 80045d0:	461a      	mov	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4413      	add	r3, r2
 80045e8:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80045ea:	88ba      	ldrh	r2, [r7, #4]
 80045ec:	89bb      	ldrh	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	e01d      	b.n	8004630 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fe3f 	bl	8004284 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b299      	uxth	r1, r3
 800460e:	89fb      	ldrh	r3, [r7, #14]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	fb02 f303 	mul.w	r3, r2, r3
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	4413      	add	r3, r2
 800461c:	89fa      	ldrh	r2, [r7, #14]
 800461e:	88f8      	ldrh	r0, [r7, #6]
 8004620:	f000 f89c 	bl	800475c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	3301      	adds	r3, #1
 8004628:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3b01      	subs	r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	88bb      	ldrh	r3, [r7, #4]
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	429a      	cmp	r2, r3
 8004636:	d8dd      	bhi.n	80045f4 <ST7789H2_DrawBitmap+0x90>
  }
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	2001c3fc 	.word	0x2001c3fc
 8004648:	2001cde4 	.word	0x2001cde4
 800464c:	2001c3fe 	.word	0x2001c3fe
 8004650:	2001cde6 	.word	0x2001cde6

08004654 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8004654:	b590      	push	{r4, r7, lr}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4623      	mov	r3, r4
 8004664:	80fb      	strh	r3, [r7, #6]
 8004666:	4603      	mov	r3, r0
 8004668:	80bb      	strh	r3, [r7, #4]
 800466a:	460b      	mov	r3, r1
 800466c:	807b      	strh	r3, [r7, #2]
 800466e:	4613      	mov	r3, r2
 8004670:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8004676:	88bb      	ldrh	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e019      	b.n	80046b0 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	b29a      	uxth	r2, r3
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fdfd 	bl	8004284 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	b299      	uxth	r1, r3
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	6a3a      	ldr	r2, [r7, #32]
 800469a:	4413      	add	r3, r2
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	88f8      	ldrh	r0, [r7, #6]
 80046a0:	f000 f85c 	bl	800475c <ST7789H2_DrawRGBHLine>
    nb_line++;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	88ba      	ldrh	r2, [r7, #4]
 80046b2:	883b      	ldrh	r3, [r7, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d3de      	bcc.n	800467c <ST7789H2_DrawRGBImage+0x28>
  }
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}

080046c8 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	460a      	mov	r2, r1
 80046d2:	80fb      	strh	r3, [r7, #6]
 80046d4:	4613      	mov	r3, r2
 80046d6:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80046d8:	88ba      	ldrh	r2, [r7, #4]
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fdd0 	bl	8004284 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80046e4:	2200      	movs	r2, #0
 80046e6:	2100      	movs	r1, #0
 80046e8:	202e      	movs	r0, #46	; 0x2e
 80046ea:	f7ff fe52 	bl	8004392 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80046ee:	f000 fe57 	bl	80053a0 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80046f2:	f000 fe55 	bl	80053a0 <LCD_IO_ReadData>
 80046f6:	4603      	mov	r3, r0
 80046f8:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80046fa:	f000 fe51 	bl	80053a0 <LCD_IO_ReadData>
 80046fe:	4603      	mov	r3, r0
 8004700:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8004702:	8afb      	ldrh	r3, [r7, #22]
 8004704:	121b      	asrs	r3, r3, #8
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f023 0303 	bic.w	r3, r3, #3
 800470c:	b2db      	uxtb	r3, r3
 800470e:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8004710:	8afb      	ldrh	r3, [r7, #22]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f023 0303 	bic.w	r3, r3, #3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 800471c:	8abb      	ldrh	r3, [r7, #20]
 800471e:	121b      	asrs	r3, r3, #8
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800472a:	f107 0310 	add.w	r3, r7, #16
 800472e:	f107 020c 	add.w	r2, r7, #12
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	4611      	mov	r1, r2
 8004736:	8019      	strh	r1, [r3, #0]
 8004738:	3302      	adds	r3, #2
 800473a:	0c12      	lsrs	r2, r2, #16
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	7c3a      	ldrb	r2, [r7, #16]
 8004742:	f362 0307 	bfi	r3, r2, #0, #8
 8004746:	7c7a      	ldrb	r2, [r7, #17]
 8004748:	f362 230f 	bfi	r3, r2, #8, #8
 800474c:	7cba      	ldrb	r2, [r7, #18]
 800474e:	f362 4317 	bfi	r3, r2, #16, #8
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	4603      	mov	r3, r0
 8004766:	81fb      	strh	r3, [r7, #14]
 8004768:	460b      	mov	r3, r1
 800476a:	81bb      	strh	r3, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004778:	2200      	movs	r2, #0
 800477a:	2100      	movs	r1, #0
 800477c:	202c      	movs	r0, #44	; 0x2c
 800477e:	f7ff fe08 	bl	8004392 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004782:	89fb      	ldrh	r3, [r7, #14]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	e029      	b.n	80047dc <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <ST7789H2_DrawRGBHLine+0x98>)
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	4293      	cmp	r3, r2
 8004792:	d320      	bcc.n	80047d6 <ST7789H2_DrawRGBHLine+0x7a>
 8004794:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <ST7789H2_DrawRGBHLine+0x9c>)
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	89ba      	ldrh	r2, [r7, #12]
 800479a:	429a      	cmp	r2, r3
 800479c:	d31b      	bcc.n	80047d6 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800479e:	4b17      	ldr	r3, [pc, #92]	; (80047fc <ST7789H2_DrawRGBHLine+0xa0>)
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d815      	bhi.n	80047d6 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <ST7789H2_DrawRGBHLine+0xa4>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	89ba      	ldrh	r2, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d810      	bhi.n	80047d6 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 80047b4:	897a      	ldrh	r2, [r7, #10]
 80047b6:	89fb      	ldrh	r3, [r7, #14]
 80047b8:	441a      	add	r2, r3
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d007      	beq.n	80047d0 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fdce 	bl	800536c <LCD_IO_WriteData>
      }      
      i++;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	3301      	adds	r3, #1
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	897a      	ldrh	r2, [r7, #10]
 80047de:	89fb      	ldrh	r3, [r7, #14]
 80047e0:	4413      	add	r3, r2
 80047e2:	461a      	mov	r2, r3
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d3ce      	bcc.n	8004788 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	2001cde4 	.word	0x2001cde4
 80047f8:	2001cde6 	.word	0x2001cde6
 80047fc:	2001c3fc 	.word	0x2001c3fc
 8004800:	2001c3fe 	.word	0x2001c3fe

08004804 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  while (1);
 8004808:	e7fe      	b.n	8004808 <BSP_ErrorHandler+0x4>
	...

0800480c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8004810:	4812      	ldr	r0, [pc, #72]	; (800485c <I2C2_Init+0x50>)
 8004812:	f004 fb5c 	bl	8008ece <HAL_I2C_GetState>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11d      	bne.n	8004858 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 800481c:	4b0f      	ldr	r3, [pc, #60]	; (800485c <I2C2_Init+0x50>)
 800481e:	4a10      	ldr	r2, [pc, #64]	; (8004860 <I2C2_Init+0x54>)
 8004820:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8004822:	4b0e      	ldr	r3, [pc, #56]	; (800485c <I2C2_Init+0x50>)
 8004824:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <I2C2_Init+0x58>)
 8004826:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <I2C2_Init+0x50>)
 800482a:	2270      	movs	r2, #112	; 0x70
 800482c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <I2C2_Init+0x50>)
 8004830:	2201      	movs	r2, #1
 8004832:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <I2C2_Init+0x50>)
 8004836:	2200      	movs	r2, #0
 8004838:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <I2C2_Init+0x50>)
 800483c:	22ff      	movs	r2, #255	; 0xff
 800483e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <I2C2_Init+0x50>)
 8004842:	2200      	movs	r2, #0
 8004844:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <I2C2_Init+0x50>)
 8004848:	2200      	movs	r2, #0
 800484a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 800484c:	4803      	ldr	r0, [pc, #12]	; (800485c <I2C2_Init+0x50>)
 800484e:	f000 f80b 	bl	8004868 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8004852:	4802      	ldr	r0, [pc, #8]	; (800485c <I2C2_Init+0x50>)
 8004854:	f003 ff48 	bl	80086e8 <HAL_I2C_Init>
  }
}
 8004858:	bf00      	nop
 800485a:	bd80      	pop	{r7, pc}
 800485c:	2001cdec 	.word	0x2001cdec
 8004860:	40005800 	.word	0x40005800
 8004864:	40403e5d 	.word	0x40403e5d

08004868 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b0ae      	sub	sp, #184	; 0xb8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a37      	ldr	r2, [pc, #220]	; (8004954 <I2C2_MspInit+0xec>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d168      	bne.n	800494c <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800487e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004882:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8004884:	f107 0318 	add.w	r3, r7, #24
 8004888:	4618      	mov	r0, r3
 800488a:	f006 ffbf 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800488e:	4b32      	ldr	r3, [pc, #200]	; (8004958 <I2C2_MspInit+0xf0>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	4a31      	ldr	r2, [pc, #196]	; (8004958 <I2C2_MspInit+0xf0>)
 8004894:	f043 0302 	orr.w	r3, r3, #2
 8004898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800489a:	4b2f      	ldr	r3, [pc, #188]	; (8004958 <I2C2_MspInit+0xf0>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <I2C2_MspInit+0xf0>)
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	4a2b      	ldr	r2, [pc, #172]	; (8004958 <I2C2_MspInit+0xf0>)
 80048ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <I2C2_MspInit+0xf0>)
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 80048be:	2310      	movs	r3, #16
 80048c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 80048c4:	2312      	movs	r3, #18
 80048c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 80048d0:	2303      	movs	r3, #3
 80048d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 80048d6:	2304      	movs	r3, #4
 80048d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 80048dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80048e0:	4619      	mov	r1, r3
 80048e2:	481e      	ldr	r0, [pc, #120]	; (800495c <I2C2_MspInit+0xf4>)
 80048e4:	f003 fc64 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 80048e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 80048f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80048f4:	4619      	mov	r1, r3
 80048f6:	481a      	ldr	r0, [pc, #104]	; (8004960 <I2C2_MspInit+0xf8>)
 80048f8:	f003 fc5a 	bl	80081b0 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 80048fc:	4b16      	ldr	r3, [pc, #88]	; (8004958 <I2C2_MspInit+0xf0>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a15      	ldr	r2, [pc, #84]	; (8004958 <I2C2_MspInit+0xf0>)
 8004902:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <I2C2_MspInit+0xf0>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8004914:	4b10      	ldr	r3, [pc, #64]	; (8004958 <I2C2_MspInit+0xf0>)
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <I2C2_MspInit+0xf0>)
 800491a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800491e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8004920:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <I2C2_MspInit+0xf0>)
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <I2C2_MspInit+0xf0>)
 8004926:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800492a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 800492c:	2200      	movs	r2, #0
 800492e:	2100      	movs	r1, #0
 8004930:	2021      	movs	r0, #33	; 0x21
 8004932:	f003 f91c 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8004936:	2021      	movs	r0, #33	; 0x21
 8004938:	f003 f935 	bl	8007ba6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 800493c:	2200      	movs	r2, #0
 800493e:	2100      	movs	r1, #0
 8004940:	2022      	movs	r0, #34	; 0x22
 8004942:	f003 f914 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8004946:	2022      	movs	r0, #34	; 0x22
 8004948:	f003 f92d 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
  }
}
 800494c:	bf00      	nop
 800494e:	37b8      	adds	r7, #184	; 0xb8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40005800 	.word	0x40005800
 8004958:	40021000 	.word	0x40021000
 800495c:	48001c00 	.word	0x48001c00
 8004960:	48000400 	.word	0x48000400

08004964 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8004968:	4806      	ldr	r0, [pc, #24]	; (8004984 <I2C2_DeInit+0x20>)
 800496a:	f004 fab0 	bl	8008ece <HAL_I2C_GetState>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8004974:	4803      	ldr	r0, [pc, #12]	; (8004984 <I2C2_DeInit+0x20>)
 8004976:	f003 ff46 	bl	8008806 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 800497a:	4802      	ldr	r0, [pc, #8]	; (8004984 <I2C2_DeInit+0x20>)
 800497c:	f000 f804 	bl	8004988 <I2C2_MspDeInit>
  }
}
 8004980:	bf00      	nop
 8004982:	bd80      	pop	{r7, pc}
 8004984:	2001cdec 	.word	0x2001cdec

08004988 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <I2C2_MspDeInit+0x8c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d138      	bne.n	8004a0c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <I2C2_MspDeInit+0x90>)
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049a0:	f043 0302 	orr.w	r3, r3, #2
 80049a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049a6:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80049b2:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049be:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 80049ca:	2110      	movs	r1, #16
 80049cc:	4813      	ldr	r0, [pc, #76]	; (8004a1c <I2C2_MspDeInit+0x94>)
 80049ce:	f003 fd81 	bl	80084d4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 80049d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049d6:	4812      	ldr	r0, [pc, #72]	; (8004a20 <I2C2_MspDeInit+0x98>)
 80049d8:	f003 fd7c 	bl	80084d4 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	4a0d      	ldr	r2, [pc, #52]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049e6:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049ee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80049f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <I2C2_MspDeInit+0x90>)
 80049fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80049fe:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8004a00:	2021      	movs	r0, #33	; 0x21
 8004a02:	f003 f8de 	bl	8007bc2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8004a06:	2022      	movs	r0, #34	; 0x22
 8004a08:	f003 f8db 	bl	8007bc2 <HAL_NVIC_DisableIRQ>
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40005800 	.word	0x40005800
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	48001c00 	.word	0x48001c00
 8004a20:	48000400 	.word	0x48000400

08004a24 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8004a24:	b590      	push	{r4, r7, lr}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af04      	add	r7, sp, #16
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	4623      	mov	r3, r4
 8004a34:	80fb      	strh	r3, [r7, #6]
 8004a36:	4603      	mov	r3, r0
 8004a38:	80bb      	strh	r3, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	807b      	strh	r3, [r7, #2]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a46:	b672      	cpsid	i
}
 8004a48:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <I2C2_WriteData+0x5c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	8878      	ldrh	r0, [r7, #2]
 8004a50:	88ba      	ldrh	r2, [r7, #4]
 8004a52:	88f9      	ldrh	r1, [r7, #6]
 8004a54:	9302      	str	r3, [sp, #8]
 8004a56:	2301      	movs	r3, #1
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	1c7b      	adds	r3, r7, #1
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4808      	ldr	r0, [pc, #32]	; (8004a84 <I2C2_WriteData+0x60>)
 8004a62:	f003 feff 	bl	8008864 <HAL_I2C_Mem_Write>
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a6a:	b662      	cpsie	i
}
 8004a6c:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004a74:	f000 f8be 	bl	8004bf4 <I2C2_Error>
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}
 8004a80:	2001c400 	.word	0x2001c400
 8004a84:	2001cdec 	.word	0x2001cdec

08004a88 <I2C2_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C2_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af04      	add	r7, sp, #16
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	4603      	mov	r3, r0
 8004a92:	81fb      	strh	r3, [r7, #14]
 8004a94:	460b      	mov	r3, r1
 8004a96:	81bb      	strh	r3, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8004aa0:	b672      	cpsid	i
}
 8004aa2:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <I2C2_WriteBuffer+0x54>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	8978      	ldrh	r0, [r7, #10]
 8004aaa:	89ba      	ldrh	r2, [r7, #12]
 8004aac:	89f9      	ldrh	r1, [r7, #14]
 8004aae:	9302      	str	r3, [sp, #8]
 8004ab0:	8c3b      	ldrh	r3, [r7, #32]
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4809      	ldr	r0, [pc, #36]	; (8004ae0 <I2C2_WriteBuffer+0x58>)
 8004abc:	f003 fed2 	bl	8008864 <HAL_I2C_Mem_Write>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ac4:	b662      	cpsie	i
}
 8004ac6:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C2_WriteBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004ace:	f000 f891 	bl	8004bf4 <I2C2_Error>
  }

  return status;
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	2001c400 	.word	0x2001c400
 8004ae0:	2001cdec 	.word	0x2001cdec

08004ae4 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af04      	add	r7, sp, #16
 8004aea:	4603      	mov	r3, r0
 8004aec:	80fb      	strh	r3, [r7, #6]
 8004aee:	460b      	mov	r3, r1
 8004af0:	80bb      	strh	r3, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8004afe:	b672      	cpsid	i
}
 8004b00:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <I2C2_ReadData+0x60>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	8878      	ldrh	r0, [r7, #2]
 8004b08:	88ba      	ldrh	r2, [r7, #4]
 8004b0a:	88f9      	ldrh	r1, [r7, #6]
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	2301      	movs	r3, #1
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	f107 030e 	add.w	r3, r7, #14
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4603      	mov	r3, r0
 8004b1a:	480b      	ldr	r0, [pc, #44]	; (8004b48 <I2C2_ReadData+0x64>)
 8004b1c:	f003 ffb6 	bl	8008a8c <HAL_I2C_Mem_Read>
 8004b20:	4603      	mov	r3, r0
 8004b22:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b24:	b662      	cpsie	i
}
 8004b26:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004b2e:	f000 f861 	bl	8004bf4 <I2C2_Error>
    HAL_Delay(200);
 8004b32:	20c8      	movs	r0, #200	; 0xc8
 8004b34:	f001 ff1c 	bl	8006970 <HAL_Delay>
  }

  return value;
 8004b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	2001c400 	.word	0x2001c400
 8004b48:	2001cdec 	.word	0x2001cdec

08004b4c <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b60:	b672      	cpsid	i
}
 8004b62:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8004b64:	88f9      	ldrh	r1, [r7, #6]
 8004b66:	2332      	movs	r3, #50	; 0x32
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	480a      	ldr	r0, [pc, #40]	; (8004b94 <I2C2_isDeviceReady+0x48>)
 8004b6c:	f004 f8a8 	bl	8008cc0 <HAL_I2C_IsDeviceReady>
 8004b70:	4603      	mov	r3, r0
 8004b72:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b74:	b662      	cpsie	i
}
 8004b76:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004b7e:	f000 f839 	bl	8004bf4 <I2C2_Error>
    HAL_Delay(200);
 8004b82:	20c8      	movs	r0, #200	; 0xc8
 8004b84:	f001 fef4 	bl	8006970 <HAL_Delay>
  }

  return value;
 8004b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	2001cdec 	.word	0x2001cdec

08004b98 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af04      	add	r7, sp, #16
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	81fb      	strh	r3, [r7, #14]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	81bb      	strh	r3, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bb0:	b672      	cpsid	i
}
 8004bb2:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <I2C2_ReadBuffer+0x54>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	8978      	ldrh	r0, [r7, #10]
 8004bba:	89ba      	ldrh	r2, [r7, #12]
 8004bbc:	89f9      	ldrh	r1, [r7, #14]
 8004bbe:	9302      	str	r3, [sp, #8]
 8004bc0:	8c3b      	ldrh	r3, [r7, #32]
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4809      	ldr	r0, [pc, #36]	; (8004bf0 <I2C2_ReadBuffer+0x58>)
 8004bcc:	f003 ff5e 	bl	8008a8c <HAL_I2C_Mem_Read>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bd4:	b662      	cpsie	i
}
 8004bd6:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004bde:	f000 f809 	bl	8004bf4 <I2C2_Error>
  }

  return status;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	2001c400 	.word	0x2001c400
 8004bf0:	2001cdec 	.word	0x2001cdec

08004bf4 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8004bf8:	f7ff fe04 	bl	8004804 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8004bfc:	4803      	ldr	r0, [pc, #12]	; (8004c0c <I2C2_Error+0x18>)
 8004bfe:	f003 fe02 	bl	8008806 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8004c02:	f7ff fe03 	bl	800480c <I2C2_Init>
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2001cdec 	.word	0x2001cdec

08004c10 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f004 f958 	bl	8008ece <HAL_I2C_GetState>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d132      	bne.n	8004c8a <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <I2Cx_Init+0x84>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d103      	bne.n	8004c34 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a1a      	ldr	r2, [pc, #104]	; (8004c98 <I2Cx_Init+0x88>)
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e012      	b.n	8004c5a <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <I2Cx_Init+0x8c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d103      	bne.n	8004c44 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <I2Cx_Init+0x90>)
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e00a      	b.n	8004c5a <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <I2Cx_Init+0x94>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d103      	bne.n	8004c54 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <I2Cx_Init+0x88>)
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e002      	b.n	8004c5a <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <I2Cx_Init+0x88>)
 8004c58:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <I2Cx_Init+0x98>)
 8004c5e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2270      	movs	r2, #112	; 0x70
 8004c64:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f003 fd2f 	bl	80086e8 <HAL_I2C_Init>

  }

}
 8004c8a:	bf00      	nop
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	2001ce40 	.word	0x2001ce40
 8004c98:	40005800 	.word	0x40005800
 8004c9c:	2001ce94 	.word	0x2001ce94
 8004ca0:	40005400 	.word	0x40005400
 8004ca4:	2001cee8 	.word	0x2001cee8
 8004ca8:	90112626 	.word	0x90112626

08004cac <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af04      	add	r7, sp, #16
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	72fb      	strb	r3, [r7, #11]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	813b      	strh	r3, [r7, #8]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004cca:	7afb      	ldrb	r3, [r7, #11]
 8004ccc:	b299      	uxth	r1, r3
 8004cce:	88f8      	ldrh	r0, [r7, #6]
 8004cd0:	893a      	ldrh	r2, [r7, #8]
 8004cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cd6:	9302      	str	r3, [sp, #8]
 8004cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f003 fed2 	bl	8008a8c <HAL_I2C_Mem_Read>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004cf2:	7afb      	ldrb	r3, [r7, #11]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f832 	bl	8004d60 <I2Cx_Error>
  }
  return status;
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b08a      	sub	sp, #40	; 0x28
 8004d0a:	af04      	add	r7, sp, #16
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	4608      	mov	r0, r1
 8004d10:	4611      	mov	r1, r2
 8004d12:	461a      	mov	r2, r3
 8004d14:	4603      	mov	r3, r0
 8004d16:	72fb      	strb	r3, [r7, #11]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	813b      	strh	r3, [r7, #8]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004d24:	7afb      	ldrb	r3, [r7, #11]
 8004d26:	b299      	uxth	r1, r3
 8004d28:	88f8      	ldrh	r0, [r7, #6]
 8004d2a:	893a      	ldrh	r2, [r7, #8]
 8004d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d30:	9302      	str	r3, [sp, #8]
 8004d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f003 fd91 	bl	8008864 <HAL_I2C_Mem_Write>
 8004d42:	4603      	mov	r3, r0
 8004d44:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d004      	beq.n	8004d56 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f805 	bl	8004d60 <I2Cx_Error>
  }
  return status;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 8004d6c:	f7ff fd4a 	bl	8004804 <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <I2Cx_Error+0x34>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d102      	bne.n	8004d7e <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 8004d78:	f7ff fdf4 	bl	8004964 <I2C2_DeInit>
 8004d7c:	e002      	b.n	8004d84 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f003 fd41 	bl	8008806 <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff43 	bl	8004c10 <I2Cx_Init>
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	2001ce40 	.word	0x2001ce40

08004d98 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8004d9c:	f7ff fd36 	bl	800480c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8004da0:	2104      	movs	r1, #4
 8004da2:	2084      	movs	r0, #132	; 0x84
 8004da4:	f7ff fed2 	bl	8004b4c <I2C2_isDeviceReady>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8004dae:	f7ff fd29 	bl	8004804 <BSP_ErrorHandler>
  }
}
 8004db2:	bf00      	nop
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <MFX_IO_DeInit+0x6c>)
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <MFX_IO_DeInit+0x6c>)
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <MFX_IO_DeInit+0x6c>)
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8004dd6:	2340      	movs	r3, #64	; 0x40
 8004dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8004de2:	2302      	movs	r3, #2
 8004de4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8004de6:	f107 030c 	add.w	r3, r7, #12
 8004dea:	4619      	mov	r1, r3
 8004dec:	480e      	ldr	r0, [pc, #56]	; (8004e28 <MFX_IO_DeInit+0x70>)
 8004dee:	f003 f9df 	bl	80081b0 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8004df2:	2017      	movs	r0, #23
 8004df4:	f002 fee5 	bl	8007bc2 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <MFX_IO_DeInit+0x6c>)
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfc:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <MFX_IO_DeInit+0x6c>)
 8004dfe:	f043 0304 	orr.w	r3, r3, #4
 8004e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <MFX_IO_DeInit+0x6c>)
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8004e10:	2120      	movs	r1, #32
 8004e12:	4806      	ldr	r0, [pc, #24]	; (8004e2c <MFX_IO_DeInit+0x74>)
 8004e14:	f003 fb5e 	bl	80084d4 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8004e18:	f7ff fda4 	bl	8004964 <I2C2_DeInit>
}
 8004e1c:	bf00      	nop
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	48001c00 	.word	0x48001c00
 8004e2c:	48000800 	.word	0x48000800

08004e30 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8004e36:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <MFX_IO_ITConfig+0x54>)
 8004e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <MFX_IO_ITConfig+0x54>)
 8004e3c:	f043 0304 	orr.w	r3, r3, #4
 8004e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <MFX_IO_ITConfig+0x54>)
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8004e4e:	2320      	movs	r3, #32
 8004e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8004e5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004e5e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8004e60:	1d3b      	adds	r3, r7, #4
 8004e62:	4619      	mov	r1, r3
 8004e64:	4808      	ldr	r0, [pc, #32]	; (8004e88 <MFX_IO_ITConfig+0x58>)
 8004e66:	f003 f9a3 	bl	80081b0 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8004e6a:	220f      	movs	r2, #15
 8004e6c:	210f      	movs	r1, #15
 8004e6e:	2017      	movs	r0, #23
 8004e70:	f002 fe7d 	bl	8007b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8004e74:	2017      	movs	r0, #23
 8004e76:	f002 fe96 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
}
 8004e7a:	bf00      	nop
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	48000800 	.word	0x48000800

08004e8c <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <MFX_IO_EnableWakeupPin+0x40>)
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <MFX_IO_EnableWakeupPin+0x40>)
 8004e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <MFX_IO_EnableWakeupPin+0x40>)
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8004eaa:	2340      	movs	r3, #64	; 0x40
 8004eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4804      	ldr	r0, [pc, #16]	; (8004ed0 <MFX_IO_EnableWakeupPin+0x44>)
 8004ec0:	f003 f976 	bl	80081b0 <HAL_GPIO_Init>
}
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	48001c00 	.word	0x48001c00

08004ed4 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2140      	movs	r1, #64	; 0x40
 8004edc:	4806      	ldr	r0, [pc, #24]	; (8004ef8 <MFX_IO_Wakeup+0x24>)
 8004ede:	f003 fbeb 	bl	80086b8 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	f001 fd44 	bl	8006970 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2140      	movs	r1, #64	; 0x40
 8004eec:	4802      	ldr	r0, [pc, #8]	; (8004ef8 <MFX_IO_Wakeup+0x24>)
 8004eee:	f003 fbe3 	bl	80086b8 <HAL_GPIO_WritePin>
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	48001c00 	.word	0x48001c00

08004efc <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	80fb      	strh	r3, [r7, #6]
 8004f06:	460b      	mov	r3, r1
 8004f08:	717b      	strb	r3, [r7, #5]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8004f0e:	797b      	ldrb	r3, [r7, #5]
 8004f10:	b299      	uxth	r1, r3
 8004f12:	793b      	ldrb	r3, [r7, #4]
 8004f14:	88f8      	ldrh	r0, [r7, #6]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f7ff fd84 	bl	8004a24 <I2C2_WriteData>
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	80fb      	strh	r3, [r7, #6]
 8004f30:	4613      	mov	r3, r2
 8004f32:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8004f34:	797b      	ldrb	r3, [r7, #5]
 8004f36:	b299      	uxth	r1, r3
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fdd1 	bl	8004ae4 <I2C2_ReadData>
 8004f42:	4603      	mov	r3, r0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60ba      	str	r2, [r7, #8]
 8004f54:	461a      	mov	r2, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	81fb      	strh	r3, [r7, #14]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	737b      	strb	r3, [r7, #13]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004f62:	7b7b      	ldrb	r3, [r7, #13]
 8004f64:	b299      	uxth	r1, r3
 8004f66:	89f8      	ldrh	r0, [r7, #14]
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f7ff fe12 	bl	8004b98 <I2C2_ReadBuffer>
 8004f74:	4603      	mov	r3, r0
 8004f76:	b29b      	uxth	r3, r3
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f001 fcf1 	bl	8006970 <HAL_Delay>
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  uint8_t Value;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8004f9e:	4b28      	ldr	r3, [pc, #160]	; (8005040 <AUDIO_IO_Init+0xa8>)
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa2:	4a27      	ldr	r2, [pc, #156]	; (8005040 <AUDIO_IO_Init+0xa8>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004faa:	4b25      	ldr	r3, [pc, #148]	; (8005040 <AUDIO_IO_Init+0xa8>)
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin   = AUDIO_RESET_PIN;
 8004fb6:	2340      	movs	r3, #64	; 0x40
 8004fb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4619      	mov	r1, r3
 8004fcc:	481d      	ldr	r0, [pc, #116]	; (8005044 <AUDIO_IO_Init+0xac>)
 8004fce:	f003 f8ef 	bl	80081b0 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C2_Init();
 8004fd2:	f7ff fc1b 	bl	800480c <I2C2_Init>

  /* Power off the codec */
  CODEC_AUDIO_POWER_OFF();
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2140      	movs	r1, #64	; 0x40
 8004fda:	481a      	ldr	r0, [pc, #104]	; (8005044 <AUDIO_IO_Init+0xac>)
 8004fdc:	f003 fb6c 	bl	80086b8 <HAL_GPIO_WritePin>

  /* wait until power supplies are stable */
  HAL_Delay(10);
 8004fe0:	200a      	movs	r0, #10
 8004fe2:	f001 fcc5 	bl	8006970 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	2140      	movs	r1, #64	; 0x40
 8004fea:	4816      	ldr	r0, [pc, #88]	; (8005044 <AUDIO_IO_Init+0xac>)
 8004fec:	f003 fb64 	bl	80086b8 <HAL_GPIO_WritePin>

  /* Set the device in standby mode */
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x02);
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	2094      	movs	r0, #148	; 0x94
 8004ff4:	f000 f89d 	bl	8005132 <AUDIO_IO_Read>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	77fb      	strb	r3, [r7, #31]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x02, (Value | 0x01));
 8004ffc:	7ffb      	ldrb	r3, [r7, #31]
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	2102      	movs	r1, #2
 8005008:	2094      	movs	r0, #148	; 0x94
 800500a:	f000 f87b 	bl	8005104 <AUDIO_IO_Write>

  /* Set all power down bits to 1 */
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x02, 0x7F);
 800500e:	227f      	movs	r2, #127	; 0x7f
 8005010:	2102      	movs	r1, #2
 8005012:	2094      	movs	r0, #148	; 0x94
 8005014:	f000 f876 	bl	8005104 <AUDIO_IO_Write>
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x03);
 8005018:	2103      	movs	r1, #3
 800501a:	2094      	movs	r0, #148	; 0x94
 800501c:	f000 f889 	bl	8005132 <AUDIO_IO_Read>
 8005020:	4603      	mov	r3, r0
 8005022:	77fb      	strb	r3, [r7, #31]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x03, (Value | 0x0E));
 8005024:	7ffb      	ldrb	r3, [r7, #31]
 8005026:	f043 030e 	orr.w	r3, r3, #14
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	2103      	movs	r1, #3
 8005030:	2094      	movs	r0, #148	; 0x94
 8005032:	f000 f867 	bl	8005104 <AUDIO_IO_Write>
}
 8005036:	bf00      	nop
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
 8005044:	48000800 	.word	0x48000800

08005048 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
  uint8_t Value;

  /* Mute DAC and ADC */
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x08);
 800504e:	2108      	movs	r1, #8
 8005050:	2094      	movs	r0, #148	; 0x94
 8005052:	f000 f86e 	bl	8005132 <AUDIO_IO_Read>
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x08, (Value | 0x03));
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	f043 0303 	orr.w	r3, r3, #3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	2108      	movs	r1, #8
 8005066:	2094      	movs	r0, #148	; 0x94
 8005068:	f000 f84c 	bl	8005104 <AUDIO_IO_Write>
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x07);
 800506c:	2107      	movs	r1, #7
 800506e:	2094      	movs	r0, #148	; 0x94
 8005070:	f000 f85f 	bl	8005132 <AUDIO_IO_Read>
 8005074:	4603      	mov	r3, r0
 8005076:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x07, (Value | 0x03));
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	f043 0303 	orr.w	r3, r3, #3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	2107      	movs	r1, #7
 8005084:	2094      	movs	r0, #148	; 0x94
 8005086:	f000 f83d 	bl	8005104 <AUDIO_IO_Write>

  /* Disable soft ramp and zero cross */
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x06);
 800508a:	2106      	movs	r1, #6
 800508c:	2094      	movs	r0, #148	; 0x94
 800508e:	f000 f850 	bl	8005132 <AUDIO_IO_Read>
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x06, (Value & 0xF0));
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	f023 030f 	bic.w	r3, r3, #15
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	2106      	movs	r1, #6
 80050a2:	2094      	movs	r0, #148	; 0x94
 80050a4:	f000 f82e 	bl	8005104 <AUDIO_IO_Write>

  /* Set PDN to 1 */
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x02);
 80050a8:	2102      	movs	r1, #2
 80050aa:	2094      	movs	r0, #148	; 0x94
 80050ac:	f000 f841 	bl	8005132 <AUDIO_IO_Read>
 80050b0:	4603      	mov	r3, r0
 80050b2:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x02, (Value | 0x01));
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	2102      	movs	r1, #2
 80050c0:	2094      	movs	r0, #148	; 0x94
 80050c2:	f000 f81f 	bl	8005104 <AUDIO_IO_Write>

  /* Set all power down bits to 1 */
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x02, 0x7F);
 80050c6:	227f      	movs	r2, #127	; 0x7f
 80050c8:	2102      	movs	r1, #2
 80050ca:	2094      	movs	r0, #148	; 0x94
 80050cc:	f000 f81a 	bl	8005104 <AUDIO_IO_Write>
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x03);
 80050d0:	2103      	movs	r1, #3
 80050d2:	2094      	movs	r0, #148	; 0x94
 80050d4:	f000 f82d 	bl	8005132 <AUDIO_IO_Read>
 80050d8:	4603      	mov	r3, r0
 80050da:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x03, (Value | 0x0E));
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	f043 030e 	orr.w	r3, r3, #14
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	2103      	movs	r1, #3
 80050e8:	2094      	movs	r0, #148	; 0x94
 80050ea:	f000 f80b 	bl	8005104 <AUDIO_IO_Write>

  /* Power off the codec */
  CODEC_AUDIO_POWER_OFF();
 80050ee:	2200      	movs	r2, #0
 80050f0:	2140      	movs	r1, #64	; 0x40
 80050f2:	4803      	ldr	r0, [pc, #12]	; (8005100 <AUDIO_IO_DeInit+0xb8>)
 80050f4:	f003 fae0 	bl	80086b8 <HAL_GPIO_WritePin>

}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	48000800 	.word	0x48000800

08005104 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af02      	add	r7, sp, #8
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
 800510e:	460b      	mov	r3, r1
 8005110:	71bb      	strb	r3, [r7, #6]
 8005112:	4613      	mov	r3, r2
 8005114:	717b      	strb	r3, [r7, #5]
  I2C2_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	b298      	uxth	r0, r3
 800511a:	79bb      	ldrb	r3, [r7, #6]
 800511c:	b299      	uxth	r1, r3
 800511e:	1d7b      	adds	r3, r7, #5
 8005120:	2201      	movs	r2, #1
 8005122:	9200      	str	r2, [sp, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	f7ff fcaf 	bl	8004a88 <I2C2_WriteBuffer>
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af02      	add	r7, sp, #8
 8005138:	4603      	mov	r3, r0
 800513a:	460a      	mov	r2, r1
 800513c:	71fb      	strb	r3, [r7, #7]
 800513e:	4613      	mov	r3, r2
 8005140:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]

  I2C2_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	b298      	uxth	r0, r3
 800514a:	79bb      	ldrb	r3, [r7, #6]
 800514c:	b299      	uxth	r1, r3
 800514e:	f107 030f 	add.w	r3, r7, #15
 8005152:	2201      	movs	r2, #1
 8005154:	9200      	str	r2, [sp, #0]
 8005156:	2201      	movs	r2, #1
 8005158:	f7ff fd1e 	bl	8004b98 <I2C2_ReadBuffer>

  return Read_Value;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	; 0x30
 800516c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800516e:	4b38      	ldr	r3, [pc, #224]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 8005170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005172:	4a37      	ldr	r2, [pc, #220]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6513      	str	r3, [r2, #80]	; 0x50
 800517a:	4b35      	ldr	r3, [pc, #212]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 800517c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005186:	4b32      	ldr	r3, [pc, #200]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	4a31      	ldr	r2, [pc, #196]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 800518c:	f043 0308 	orr.w	r3, r3, #8
 8005190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005192:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 8005194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800519e:	4b2c      	ldr	r3, [pc, #176]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a2:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051a4:	f043 0310 	orr.w	r3, r3, #16
 80051a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051aa:	4b29      	ldr	r3, [pc, #164]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ba:	4a25      	ldr	r2, [pc, #148]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051bc:	f043 0320 	orr.w	r3, r3, #32
 80051c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051c2:	4b23      	ldr	r3, [pc, #140]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80051ce:	4b20      	ldr	r3, [pc, #128]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	4a19      	ldr	r2, [pc, #100]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6593      	str	r3, [r2, #88]	; 0x58
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <FMC_BANK1_MspInit+0xe8>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80051fe:	f005 fbf5 	bl	800a9ec <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8005202:	2302      	movs	r3, #2
 8005204:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8005206:	2301      	movs	r3, #1
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800520a:	2303      	movs	r3, #3
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 800520e:	230c      	movs	r3, #12
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 8005212:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8005216:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8005218:	f107 031c 	add.w	r3, r7, #28
 800521c:	4619      	mov	r1, r3
 800521e:	480d      	ldr	r0, [pc, #52]	; (8005254 <FMC_BANK1_MspInit+0xec>)
 8005220:	f002 ffc6 	bl	80081b0 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 8005224:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005228:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800522a:	f107 031c 	add.w	r3, r7, #28
 800522e:	4619      	mov	r1, r3
 8005230:	4809      	ldr	r0, [pc, #36]	; (8005258 <FMC_BANK1_MspInit+0xf0>)
 8005232:	f002 ffbd 	bl	80081b0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 8005236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800523a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800523c:	f107 031c 	add.w	r3, r7, #28
 8005240:	4619      	mov	r1, r3
 8005242:	4804      	ldr	r0, [pc, #16]	; (8005254 <FMC_BANK1_MspInit+0xec>)
 8005244:	f002 ffb4 	bl	80081b0 <HAL_GPIO_Init>

}
 8005248:	bf00      	nop
 800524a:	3730      	adds	r7, #48	; 0x30
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	48000c00 	.word	0x48000c00
 8005258:	48001000 	.word	0x48001000

0800525c <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b0a4      	sub	sp, #144	; 0x90
 8005260:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8005262:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005266:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8005268:	4b26      	ldr	r3, [pc, #152]	; (8005304 <FMC_BANK1_Init+0xa8>)
 800526a:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 800526c:	2301      	movs	r3, #1
 800526e:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 8005270:	2301      	movs	r3, #1
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 8005274:	2301      	movs	r3, #1
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 800527c:	2302      	movs	r3, #2
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 8005280:	2302      	movs	r3, #2
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 8005284:	2300      	movs	r3, #0
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 8005288:	2305      	movs	r3, #5
 800528a:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 800528c:	2301      	movs	r3, #1
 800528e:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 8005290:	2303      	movs	r3, #3
 8005292:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 8005294:	2302      	movs	r3, #2
 8005296:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 8005298:	2302      	movs	r3, #2
 800529a:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 800529c:	2302      	movs	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 80052a4:	2300      	movs	r3, #0
 80052a6:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 80052ac:	2300      	movs	r3, #0
 80052ae:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80052b0:	2310      	movs	r3, #16
 80052b2:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80052b8:	2300      	movs	r3, #0
 80052ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 80052bc:	2300      	movs	r3, #0
 80052be:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 80052c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c4:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 80052dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80052e2:	2300      	movs	r3, #0
 80052e4:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 80052e6:	f7ff ff3f 	bl	8005168 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 80052ea:	463a      	mov	r2, r7
 80052ec:	f107 0120 	add.w	r1, r7, #32
 80052f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052f4:	4618      	mov	r0, r3
 80052f6:	f009 f8e0 	bl	800e4ba <HAL_SRAM_Init>

}
 80052fa:	bf00      	nop
 80052fc:	3790      	adds	r7, #144	; 0x90
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	a0000104 	.word	0xa0000104

08005308 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 8005312:	4a04      	ldr	r2, [pc, #16]	; (8005324 <FMC_BANK1_WriteData+0x1c>)
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	8013      	strh	r3, [r2, #0]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	60080000 	.word	0x60080000

08005328 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 8005332:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005336:	79fa      	ldrb	r2, [r7, #7]
 8005338:	b292      	uxth	r2, r2
 800533a:	801a      	strh	r2, [r3, #0]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <FMC_BANK1_ReadData+0x14>)
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	60080000 	.word	0x60080000

08005360 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8005364:	f7ff ff7a 	bl	800525c <FMC_BANK1_Init>
}
 8005368:	bf00      	nop
 800536a:	bd80      	pop	{r7, pc}

0800536c <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff ffc5 	bl	8005308 <FMC_BANK1_WriteData>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	4603      	mov	r3, r0
 800538e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff ffc8 	bl	8005328 <FMC_BANK1_WriteReg>
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 80053a4:	f7ff ffd0 	bl	8005348 <FMC_BANK1_ReadData>
 80053a8:	4603      	mov	r3, r0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	bd80      	pop	{r7, pc}

080053ae <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 fada 	bl	8006970 <HAL_Delay>
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 80053c8:	4812      	ldr	r0, [pc, #72]	; (8005414 <TS_IO_Init+0x50>)
 80053ca:	f7ff fc21 	bl	8004c10 <I2Cx_Init>

  if (ts_io_init == 0)
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <TS_IO_Init+0x54>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11b      	bne.n	800540e <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 80053d6:	f000 fcb7 	bl	8005d48 <BSP_LCD_Init>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 80053e0:	f7ff fa10 	bl	8004804 <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 80053e4:	2101      	movs	r1, #1
 80053e6:	2002      	movs	r0, #2
 80053e8:	f000 fc76 	bl	8005cd8 <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 80053ec:	2100      	movs	r1, #0
 80053ee:	2002      	movs	r0, #2
 80053f0:	f000 fc8e 	bl	8005d10 <BSP_IO_WritePin>
    HAL_Delay(10);
 80053f4:	200a      	movs	r0, #10
 80053f6:	f001 fabb 	bl	8006970 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 80053fa:	2101      	movs	r1, #1
 80053fc:	2002      	movs	r0, #2
 80053fe:	f000 fc87 	bl	8005d10 <BSP_IO_WritePin>
    HAL_Delay(200);
 8005402:	20c8      	movs	r0, #200	; 0xc8
 8005404:	f001 fab4 	bl	8006970 <HAL_Delay>

    ts_io_init = 1;
 8005408:	4b03      	ldr	r3, [pc, #12]	; (8005418 <TS_IO_Init+0x54>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]
  }
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	2001ce40 	.word	0x2001ce40
 8005418:	2001cde8 	.word	0x2001cde8

0800541c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af02      	add	r7, sp, #8
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
 8005426:	460b      	mov	r3, r1
 8005428:	71bb      	strb	r3, [r7, #6]
 800542a:	4613      	mov	r3, r2
 800542c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 800542e:	79bb      	ldrb	r3, [r7, #6]
 8005430:	b29a      	uxth	r2, r3
 8005432:	79f9      	ldrb	r1, [r7, #7]
 8005434:	2301      	movs	r3, #1
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	1d7b      	adds	r3, r7, #5
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	2301      	movs	r3, #1
 800543e:	4803      	ldr	r0, [pc, #12]	; (800544c <TS_IO_Write+0x30>)
 8005440:	f7ff fc61 	bl	8004d06 <I2Cx_WriteMultiple>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	2001ce40 	.word	0x2001ce40

08005450 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	460a      	mov	r2, r1
 800545a:	71fb      	strb	r3, [r7, #7]
 800545c:	4613      	mov	r3, r2
 800545e:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	b29b      	uxth	r3, r3
 8005464:	79ba      	ldrb	r2, [r7, #6]
 8005466:	b291      	uxth	r1, r2
 8005468:	2201      	movs	r2, #1
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fb3a 	bl	8004ae4 <I2C2_ReadData>
 8005470:	4603      	mov	r3, r0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af02      	add	r7, sp, #8
 8005482:	603a      	str	r2, [r7, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
 800548a:	460b      	mov	r3, r1
 800548c:	71bb      	strb	r3, [r7, #6]
 800548e:	4613      	mov	r3, r2
 8005490:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005492:	79bb      	ldrb	r3, [r7, #6]
 8005494:	b29a      	uxth	r2, r3
 8005496:	79f9      	ldrb	r1, [r7, #7]
 8005498:	88bb      	ldrh	r3, [r7, #4]
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	2301      	movs	r3, #1
 80054a2:	4804      	ldr	r0, [pc, #16]	; (80054b4 <TS_IO_ReadMultiple+0x38>)
 80054a4:	f7ff fc02 	bl	8004cac <I2Cx_ReadMultiple>
 80054a8:	4603      	mov	r3, r0
 80054aa:	b29b      	uxth	r3, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2001ce40 	.word	0x2001ce40

080054b8 <BSP_AUDIO_OUT_Init>:
  *         the SAI PLL input clock runs at 8 MHz.
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice,
                           uint8_t  Volume,
                           uint32_t AudioFreq)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	603a      	str	r2, [r7, #0]
 80054c2:	80fb      	strh	r3, [r7, #6]
 80054c4:	460b      	mov	r3, r1
 80054c6:	717b      	strb	r3, [r7, #5]
  /* Initialize the audio output context */
  hAudioOut.AudioDrv           = &cs42l51_drv;
 80054c8:	4b28      	ldr	r3, [pc, #160]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 80054ca:	4a29      	ldr	r2, [pc, #164]	; (8005570 <BSP_AUDIO_OUT_Init+0xb8>)
 80054cc:	601a      	str	r2, [r3, #0]
  hAudioOut.OutputDevice       = OutputDevice;
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	4a26      	ldr	r2, [pc, #152]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 80054d2:	6053      	str	r3, [r2, #4]
  hAudioOut.Frequency          = AudioFreq;
 80054d4:	4a25      	ldr	r2, [pc, #148]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6093      	str	r3, [r2, #8]
  hAudioOut.Volume             = Volume;
 80054da:	797b      	ldrb	r3, [r7, #5]
 80054dc:	4a23      	ldr	r2, [pc, #140]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 80054de:	60d3      	str	r3, [r2, #12]
  hAudioOut.CbError            = (Audio_CallbackTypeDef)NULL;
 80054e0:	4b22      	ldr	r3, [pc, #136]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	611a      	str	r2, [r3, #16]
  hAudioOut.CbHalfTransfer     = (Audio_CallbackTypeDef)NULL;
 80054e6:	4b21      	ldr	r3, [pc, #132]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	615a      	str	r2, [r3, #20]
  hAudioOut.CbTransferComplete = (Audio_CallbackTypeDef)NULL;
 80054ec:	4b1f      	ldr	r3, [pc, #124]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	619a      	str	r2, [r3, #24]

  /* Check if input device is currently used */
  if (hAudioIn.InputDevice != 0)
 80054f2:	4b20      	ldr	r3, [pc, #128]	; (8005574 <BSP_AUDIO_OUT_Init+0xbc>)
 80054f4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <BSP_AUDIO_OUT_Init+0x56>
  {
    /* If input device is currently used, SAI PLL is already initialized */
    /* Check that AudioFreq for record and playback is the same */
    if (hAudioIn.Frequency != hAudioOut.Frequency)
 80054fc:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <BSP_AUDIO_OUT_Init+0xbc>)
 80054fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8005502:	4b1a      	ldr	r3, [pc, #104]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	d009      	beq.n	800551e <BSP_AUDIO_OUT_Init+0x66>
    {
      return AUDIO_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e02a      	b.n	8005564 <BSP_AUDIO_OUT_Init+0xac>
    }
  }
  else
  {
    /* Configure the SAI PLL according to the requested audio frequency */
    if (AUDIO_SAIPLLConfig(AudioFreq) != AUDIO_OK)
 800550e:	6838      	ldr	r0, [r7, #0]
 8005510:	f000 fb5c 	bl	8005bcc <AUDIO_SAIPLLConfig>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <BSP_AUDIO_OUT_Init+0x66>
    {
      return AUDIO_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e022      	b.n	8005564 <BSP_AUDIO_OUT_Init+0xac>
    }
  }

  /* If input device is analogic mic, SAI is already initialized */
  if (hAudioIn.InputDevice != INPUT_DEVICE_ANALOG_MIC)
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <BSP_AUDIO_OUT_Init+0xbc>)
 8005520:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005524:	2b10      	cmp	r3, #16
 8005526:	d007      	beq.n	8005538 <BSP_AUDIO_OUT_Init+0x80>
  {
    /* SAI data transfer preparation: prepare the Media to be used for the audio
    transfer from memory to SAI peripheral. */
    if (AUDIO_SAIx_Init(AudioFreq) != AUDIO_OK)
 8005528:	6838      	ldr	r0, [r7, #0]
 800552a:	f000 f909 	bl	8005740 <AUDIO_SAIx_Init>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <BSP_AUDIO_OUT_Init+0x80>
    {
      return AUDIO_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e015      	b.n	8005564 <BSP_AUDIO_OUT_Init+0xac>
    }
  }

  /* Initialize the audio codec internal registers */
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 8005538:	4b0c      	ldr	r3, [pc, #48]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681c      	ldr	r4, [r3, #0]
                               (hAudioOut.OutputDevice | hAudioIn.InputDevice),
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <BSP_AUDIO_OUT_Init+0xb4>)
 8005540:	685b      	ldr	r3, [r3, #4]
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 8005542:	b29a      	uxth	r2, r3
                               (hAudioOut.OutputDevice | hAudioIn.InputDevice),
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <BSP_AUDIO_OUT_Init+0xbc>)
 8005546:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 800554a:	b29b      	uxth	r3, r3
 800554c:	4313      	orrs	r3, r2
 800554e:	b299      	uxth	r1, r3
 8005550:	797a      	ldrb	r2, [r7, #5]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2094      	movs	r0, #148	; 0x94
 8005556:	47a0      	blx	r4
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <BSP_AUDIO_OUT_Init+0xaa>
                               Volume,
                               AudioFreq) != 0)
  {
    return AUDIO_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <BSP_AUDIO_OUT_Init+0xac>
  }

  return AUDIO_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}
 800556c:	2001cf3c 	.word	0x2001cf3c
 8005570:	2001c2f0 	.word	0x2001c2f0
 8005574:	2001cf58 	.word	0x2001cf58

08005578 <BSP_AUDIO_OUT_Play>:
  * @param  pData: pointer on PCM samples buffer
  * @param  Size: Number of audio data HALF WORD.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pData, uint32_t Size)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
//  {
//    return AUDIO_ERROR;
//  }

	// EK_edits
	if (HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, (uint8_t *)pData, Size, 5000) != HAL_OK)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	b29a      	uxth	r2, r3
 8005586:	f241 3388 	movw	r3, #5000	; 0x1388
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	480e      	ldr	r0, [pc, #56]	; (80055c8 <BSP_AUDIO_OUT_Play+0x50>)
 800558e:	f007 ff3b 	bl	800d408 <HAL_SAI_Transmit>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <BSP_AUDIO_OUT_Play+0x24>
	{
		return AUDIO_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e011      	b.n	80055c0 <BSP_AUDIO_OUT_Play+0x48>
	}

	int a = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  /* Call the audio Codec Play function */
  if (hAudioOut.AudioDrv->Play(AUDIO_I2C_ADDRESS, pData, Size) != 0)
 80055a0:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <BSP_AUDIO_OUT_Play+0x54>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	b292      	uxth	r2, r2
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	2094      	movs	r0, #148	; 0x94
 80055ae:	4798      	blx	r3
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <BSP_AUDIO_OUT_Play+0x42>
  {
    return AUDIO_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e002      	b.n	80055c0 <BSP_AUDIO_OUT_Play+0x48>
  }

  a = 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]

  return AUDIO_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	2001d118 	.word	0x2001d118
 80055cc:	2001cf3c 	.word	0x2001cf3c

080055d0 <BSP_AUDIO_OUT_SetMute>:
  * @param  Cmd: Could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to
  *         unmute the codec and restore previous volume level.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_SetMute(uint32_t Cmd)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Call the Codec Mute function */
  if (hAudioOut.AudioDrv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0)
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <BSP_AUDIO_OUT_SetMute+0x28>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	2094      	movs	r0, #148	; 0x94
 80055e2:	4798      	blx	r3
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <BSP_AUDIO_OUT_SetMute+0x1e>
  {
    return AUDIO_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <BSP_AUDIO_OUT_SetMute+0x20>
  }

  return AUDIO_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	2001cf3c 	.word	0x2001cf3c

080055fc <BSP_AUDIO_OUT_SetOutputMode>:
  * @param  Output: The audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE or OUTPUT_DEVICE_BOTH
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_SetOutputMode(uint8_t Output)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
  /* Call the Codec output device function */
  if (hAudioOut.AudioDrv->SetOutputMode(AUDIO_I2C_ADDRESS, Output) != 0)
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <BSP_AUDIO_OUT_SetOutputMode+0x2c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	79fa      	ldrb	r2, [r7, #7]
 800560e:	4611      	mov	r1, r2
 8005610:	2094      	movs	r0, #148	; 0x94
 8005612:	4798      	blx	r3
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <BSP_AUDIO_OUT_SetOutputMode+0x22>
  {
    return AUDIO_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <BSP_AUDIO_OUT_SetOutputMode+0x24>
  }

  return AUDIO_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	2001cf3c 	.word	0x2001cf3c

0800562c <BSP_AUDIO_OUT_ChangeAudioConfig>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio out configuration.
  * @retval None
  */
void BSP_AUDIO_OUT_ChangeAudioConfig(uint32_t AudioOutOption)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint8_t TxData[2] = {0x00, 0x00};
 8005634:	2300      	movs	r3, #0
 8005636:	81bb      	strh	r3, [r7, #12]

  /********** Playback Buffer circular/normal mode **********/
  if (AudioOutOption & BSP_AUDIO_OUT_CIRCULARMODE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00e      	beq.n	8005660 <BSP_AUDIO_OUT_ChangeAudioConfig+0x34>
  {
    /* Deinitialize the Stream to update DMA mode */
    HAL_DMA_DeInit(BSP_AUDIO_hSai_Tx.hdmatx);
 8005642:	4b32      	ldr	r3, [pc, #200]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005646:	4618      	mov	r0, r3
 8005648:	f002 fd20 	bl	800808c <HAL_DMA_DeInit>

    /* Update the SAI audio Transfer DMA mode */
    BSP_AUDIO_hSai_Tx.hdmatx->Init.Mode = DMA_CIRCULAR;
 800564c:	4b2f      	ldr	r3, [pc, #188]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800564e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005650:	2220      	movs	r2, #32
 8005652:	61da      	str	r2, [r3, #28]

    /* Configure the DMA Stream with new Transfer DMA mode */
    HAL_DMA_Init(BSP_AUDIO_hSai_Tx.hdmatx);
 8005654:	4b2d      	ldr	r3, [pc, #180]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005658:	4618      	mov	r0, r3
 800565a:	f002 fc5f 	bl	8007f1c <HAL_DMA_Init>
 800565e:	e00d      	b.n	800567c <BSP_AUDIO_OUT_ChangeAudioConfig+0x50>
  }
  else /* BSP_AUDIO_OUT_NORMALMODE */
  {
    /* Deinitialize the Stream to update DMA mode */
    HAL_DMA_DeInit(BSP_AUDIO_hSai_Tx.hdmatx);
 8005660:	4b2a      	ldr	r3, [pc, #168]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005664:	4618      	mov	r0, r3
 8005666:	f002 fd11 	bl	800808c <HAL_DMA_DeInit>

    /* Update the SAI audio Transfer DMA mode */
    BSP_AUDIO_hSai_Tx.hdmatx->Init.Mode = DMA_NORMAL;
 800566a:	4b28      	ldr	r3, [pc, #160]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800566c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566e:	2200      	movs	r2, #0
 8005670:	61da      	str	r2, [r3, #28]

    /* Configure the DMA Stream with new Transfer DMA mode */
    HAL_DMA_Init(BSP_AUDIO_hSai_Tx.hdmatx);
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005676:	4618      	mov	r0, r3
 8005678:	f002 fc50 	bl	8007f1c <HAL_DMA_Init>
  }

  /********** Playback Buffer stereo/mono mode **********/
  if (AudioOutOption & BSP_AUDIO_OUT_STEREOMODE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01e      	beq.n	80056c4 <BSP_AUDIO_OUT_ChangeAudioConfig+0x98>
  {
    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&BSP_AUDIO_hSai_Tx);
 8005686:	4b21      	ldr	r3, [pc, #132]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b1f      	ldr	r3, [pc, #124]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005694:	601a      	str	r2, [r3, #0]

    /* Update the SAI audio frame slot configuration */
    BSP_AUDIO_hSai_Tx.Init.MonoStereoMode = SAI_STEREOMODE;
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005698:	2200      	movs	r2, #0
 800569a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_SAI_Init(&BSP_AUDIO_hSai_Tx);
 800569c:	481b      	ldr	r0, [pc, #108]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800569e:	f007 fd41 	bl	800d124 <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&BSP_AUDIO_hSai_Tx);
 80056a2:	4b1a      	ldr	r3, [pc, #104]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b18      	ldr	r3, [pc, #96]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056b0:	601a      	str	r2, [r3, #0]
    /* Transmit one byte to start FS generation */
    HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, TxData, 2, 1000);
 80056b2:	f107 010c 	add.w	r1, r7, #12
 80056b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056ba:	2202      	movs	r2, #2
 80056bc:	4813      	ldr	r0, [pc, #76]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056be:	f007 fea3 	bl	800d408 <HAL_SAI_Transmit>
    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&BSP_AUDIO_hSai_Tx);
    /* Transmit one byte to start FS generation */
    HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, TxData, 2, 1000);
  }
}
 80056c2:	e01e      	b.n	8005702 <BSP_AUDIO_OUT_ChangeAudioConfig+0xd6>
    __HAL_SAI_DISABLE(&BSP_AUDIO_hSai_Tx);
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056d2:	601a      	str	r2, [r3, #0]
    BSP_AUDIO_hSai_Tx.Init.MonoStereoMode = SAI_MONOMODE;
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_SAI_Init(&BSP_AUDIO_hSai_Tx);
 80056dc:	480b      	ldr	r0, [pc, #44]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056de:	f007 fd21 	bl	800d124 <HAL_SAI_Init>
    __HAL_SAI_ENABLE(&BSP_AUDIO_hSai_Tx);
 80056e2:	4b0a      	ldr	r3, [pc, #40]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b08      	ldr	r3, [pc, #32]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056f0:	601a      	str	r2, [r3, #0]
    HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, TxData, 2, 1000);
 80056f2:	f107 010c 	add.w	r1, r7, #12
 80056f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056fa:	2202      	movs	r2, #2
 80056fc:	4803      	ldr	r0, [pc, #12]	; (800570c <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056fe:	f007 fe83 	bl	800d408 <HAL_SAI_Transmit>
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2001d118 	.word	0x2001d118

08005710 <BSP_AUDIO_OUT_RegisterCallbacks>:
  * @retval None
  */
void BSP_AUDIO_OUT_RegisterCallbacks(Audio_CallbackTypeDef ErrorCallback,
                                     Audio_CallbackTypeDef HalfTransferCallback,
                                     Audio_CallbackTypeDef TransferCompleteCallback)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  hAudioOut.CbError            = ErrorCallback;
 800571c:	4a07      	ldr	r2, [pc, #28]	; (800573c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6113      	str	r3, [r2, #16]
  hAudioOut.CbHalfTransfer     = HalfTransferCallback;
 8005722:	4a06      	ldr	r2, [pc, #24]	; (800573c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6153      	str	r3, [r2, #20]
  hAudioOut.CbTransferComplete = TransferCompleteCallback;
 8005728:	4a04      	ldr	r2, [pc, #16]	; (800573c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6193      	str	r3, [r2, #24]
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	2001cf3c 	.word	0x2001cf3c

08005740 <AUDIO_SAIx_Init>:
  * @brief  Initializes the Audio Codec audio interface (SAI).
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval BSP AUDIO status
  */
static uint8_t AUDIO_SAIx_Init(uint32_t AudioFreq)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint8_t TxData[2] = {0x00, 0x00};
 8005748:	2300      	movs	r3, #0
 800574a:	81bb      	strh	r3, [r7, #12]

  /* Initialize the BSP_AUDIO_hSai_Xx instances parameter */
  BSP_AUDIO_hSai_Tx.Instance = SAI1_Block_A;
 800574c:	4b99      	ldr	r3, [pc, #612]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800574e:	4a9a      	ldr	r2, [pc, #616]	; (80059b8 <AUDIO_SAIx_Init+0x278>)
 8005750:	601a      	str	r2, [r3, #0]
  BSP_AUDIO_hSai_Rx.Instance = SAI1_Block_B;
 8005752:	4b9a      	ldr	r3, [pc, #616]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005754:	4a9a      	ldr	r2, [pc, #616]	; (80059c0 <AUDIO_SAIx_Init+0x280>)
 8005756:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai_Tx);
 8005758:	4b96      	ldr	r3, [pc, #600]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b95      	ldr	r3, [pc, #596]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005766:	601a      	str	r2, [r3, #0]
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai_Rx);
 8005768:	4b94      	ldr	r3, [pc, #592]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b93      	ldr	r3, [pc, #588]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005776:	601a      	str	r2, [r3, #0]
  /* SAI block used for playback */
  /*******************************/
  /* Configure SAI_Block_x used for transmit
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai_Tx.Init.AudioMode      = SAI_MODEMASTER_TX;
 8005778:	4b8e      	ldr	r3, [pc, #568]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai_Tx.Init.Synchro        = SAI_ASYNCHRONOUS;
 800577e:	4b8d      	ldr	r3, [pc, #564]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai_Tx.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8005784:	4b8b      	ldr	r3, [pc, #556]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai_Tx.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800578a:	4b8a      	ldr	r3, [pc, #552]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800578c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005790:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai_Tx.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8005792:	4b88      	ldr	r3, [pc, #544]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005794:	2200      	movs	r2, #0
 8005796:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai_Tx.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8005798:	4b86      	ldr	r3, [pc, #536]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800579a:	2201      	movs	r2, #1
 800579c:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai_Tx.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 800579e:	4b85      	ldr	r3, [pc, #532]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai_Tx.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80057aa:	d029      	beq.n	8005800 <AUDIO_SAIx_Init+0xc0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f642 3211 	movw	r2, #11025	; 0x2b11
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d022      	beq.n	80057fc <AUDIO_SAIx_Init+0xbc>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80057bc:	d01c      	beq.n	80057f8 <AUDIO_SAIx_Init+0xb8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f245 6222 	movw	r2, #22050	; 0x5622
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d015      	beq.n	80057f4 <AUDIO_SAIx_Init+0xb4>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80057ce:	d00f      	beq.n	80057f0 <AUDIO_SAIx_Init+0xb0>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d008      	beq.n	80057ec <AUDIO_SAIx_Init+0xac>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d101      	bne.n	80057e8 <AUDIO_SAIx_Init+0xa8>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e00c      	b.n	8005802 <AUDIO_SAIx_Init+0xc2>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e00a      	b.n	8005802 <AUDIO_SAIx_Init+0xc2>
 80057ec:	2300      	movs	r3, #0
 80057ee:	e008      	b.n	8005802 <AUDIO_SAIx_Init+0xc2>
 80057f0:	2303      	movs	r3, #3
 80057f2:	e006      	b.n	8005802 <AUDIO_SAIx_Init+0xc2>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e004      	b.n	8005802 <AUDIO_SAIx_Init+0xc2>
 80057f8:	2306      	movs	r3, #6
 80057fa:	e002      	b.n	8005802 <AUDIO_SAIx_Init+0xc2>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e000      	b.n	8005802 <AUDIO_SAIx_Init+0xc2>
 8005800:	230c      	movs	r3, #12
 8005802:	4a6c      	ldr	r2, [pc, #432]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005804:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai_Tx.Init.MonoStereoMode = SAI_STEREOMODE;
 8005806:	4b6b      	ldr	r3, [pc, #428]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005808:	2200      	movs	r2, #0
 800580a:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai_Tx.Init.CompandingMode = SAI_NOCOMPANDING;
 800580c:	4b69      	ldr	r3, [pc, #420]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai_Tx.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8005812:	4b68      	ldr	r3, [pc, #416]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005814:	2200      	movs	r2, #0
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai_Tx.Init.Protocol       = SAI_FREE_PROTOCOL;
 8005818:	4b66      	ldr	r3, [pc, #408]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800581a:	2200      	movs	r2, #0
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai_Tx.Init.DataSize       = SAI_DATASIZE_16;
 800581e:	4b65      	ldr	r3, [pc, #404]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005820:	2280      	movs	r2, #128	; 0x80
 8005822:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai_Tx.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8005824:	4b63      	ldr	r3, [pc, #396]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005826:	2200      	movs	r2, #0
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai_Tx.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800582a:	4b62      	ldr	r3, [pc, #392]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800582c:	2200      	movs	r2, #0
 800582e:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai_Tx.FrameInit.FrameLength = 32;
 8005830:	4b60      	ldr	r3, [pc, #384]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005832:	2220      	movs	r2, #32
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai_Tx.FrameInit.ActiveFrameLength = 16;
 8005836:	4b5f      	ldr	r3, [pc, #380]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005838:	2210      	movs	r2, #16
 800583a:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai_Tx.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800583c:	4b5d      	ldr	r3, [pc, #372]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800583e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005842:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai_Tx.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005844:	4b5b      	ldr	r3, [pc, #364]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005846:	2200      	movs	r2, #0
 8005848:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai_Tx.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800584a:	4b5a      	ldr	r3, [pc, #360]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800584c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005850:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai_Tx.SlotInit.FirstBitOffset = 0;
 8005852:	4b58      	ldr	r3, [pc, #352]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005854:	2200      	movs	r2, #0
 8005856:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai_Tx.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005858:	4b56      	ldr	r3, [pc, #344]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800585a:	2200      	movs	r2, #0
 800585c:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai_Tx.SlotInit.SlotNumber = 2;
 800585e:	4b55      	ldr	r3, [pc, #340]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005860:	2202      	movs	r2, #2
 8005862:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai_Tx.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8005864:	4b53      	ldr	r3, [pc, #332]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005866:	2203      	movs	r2, #3
 8005868:	661a      	str	r2, [r3, #96]	; 0x60
  /* SAI block used for record */
  /*****************************/
  /* Configure SAI_Block_x used for receive
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai_Rx.Init.AudioMode      = SAI_MODESLAVE_RX;
 800586a:	4b54      	ldr	r3, [pc, #336]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800586c:	2203      	movs	r2, #3
 800586e:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai_Rx.Init.Synchro        = SAI_SYNCHRONOUS;
 8005870:	4b52      	ldr	r3, [pc, #328]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005872:	2201      	movs	r2, #1
 8005874:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai_Rx.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8005876:	4b51      	ldr	r3, [pc, #324]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005878:	2200      	movs	r2, #0
 800587a:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai_Rx.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800587c:	4b4f      	ldr	r3, [pc, #316]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800587e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005882:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai_Rx.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8005884:	4b4d      	ldr	r3, [pc, #308]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005886:	2200      	movs	r2, #0
 8005888:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai_Rx.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800588a:	4b4c      	ldr	r3, [pc, #304]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800588c:	2201      	movs	r2, #1
 800588e:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai_Rx.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8005890:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005892:	2200      	movs	r2, #0
 8005894:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai_Rx.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800589c:	d029      	beq.n	80058f2 <AUDIO_SAIx_Init+0x1b2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <AUDIO_SAIx_Init+0x1ae>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80058ae:	d01c      	beq.n	80058ea <AUDIO_SAIx_Init+0x1aa>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f245 6222 	movw	r2, #22050	; 0x5622
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d015      	beq.n	80058e6 <AUDIO_SAIx_Init+0x1a6>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80058c0:	d00f      	beq.n	80058e2 <AUDIO_SAIx_Init+0x1a2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d008      	beq.n	80058de <AUDIO_SAIx_Init+0x19e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <AUDIO_SAIx_Init+0x19a>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e00c      	b.n	80058f4 <AUDIO_SAIx_Init+0x1b4>
 80058da:	2301      	movs	r3, #1
 80058dc:	e00a      	b.n	80058f4 <AUDIO_SAIx_Init+0x1b4>
 80058de:	2300      	movs	r3, #0
 80058e0:	e008      	b.n	80058f4 <AUDIO_SAIx_Init+0x1b4>
 80058e2:	2303      	movs	r3, #3
 80058e4:	e006      	b.n	80058f4 <AUDIO_SAIx_Init+0x1b4>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e004      	b.n	80058f4 <AUDIO_SAIx_Init+0x1b4>
 80058ea:	2306      	movs	r3, #6
 80058ec:	e002      	b.n	80058f4 <AUDIO_SAIx_Init+0x1b4>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e000      	b.n	80058f4 <AUDIO_SAIx_Init+0x1b4>
 80058f2:	230c      	movs	r3, #12
 80058f4:	4a31      	ldr	r2, [pc, #196]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 80058f6:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai_Rx.Init.MonoStereoMode = SAI_MONOMODE;
 80058f8:	4b30      	ldr	r3, [pc, #192]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 80058fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai_Rx.Init.CompandingMode = SAI_NOCOMPANDING;
 8005900:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005902:	2200      	movs	r2, #0
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai_Rx.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005908:	2200      	movs	r2, #0
 800590a:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai_Rx.Init.Protocol       = SAI_FREE_PROTOCOL;
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai_Rx.Init.DataSize       = SAI_DATASIZE_16;
 8005912:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005914:	2280      	movs	r2, #128	; 0x80
 8005916:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai_Rx.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800591a:	2200      	movs	r2, #0
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai_Rx.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800591e:	4b27      	ldr	r3, [pc, #156]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005920:	2200      	movs	r2, #0
 8005922:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai_Rx.FrameInit.FrameLength = 32;
 8005924:	4b25      	ldr	r3, [pc, #148]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005926:	2220      	movs	r2, #32
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai_Rx.FrameInit.ActiveFrameLength = 16;
 800592a:	4b24      	ldr	r3, [pc, #144]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800592c:	2210      	movs	r2, #16
 800592e:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai_Rx.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005930:	4b22      	ldr	r3, [pc, #136]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005932:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005936:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai_Rx.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005938:	4b20      	ldr	r3, [pc, #128]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800593a:	2200      	movs	r2, #0
 800593c:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai_Rx.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800593e:	4b1f      	ldr	r3, [pc, #124]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005940:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005944:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai_Rx.SlotInit.FirstBitOffset = 0;
 8005946:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005948:	2200      	movs	r2, #0
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai_Rx.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800594e:	2200      	movs	r2, #0
 8005950:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai_Rx.SlotInit.SlotNumber = 2;
 8005952:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005954:	2202      	movs	r2, #2
 8005956:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai_Rx.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8005958:	4b18      	ldr	r3, [pc, #96]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 800595a:	2203      	movs	r2, #3
 800595c:	661a      	str	r2, [r3, #96]	; 0x60

  /*********************************/
  /* Initializes the SAI peripheral*/
  /*********************************/
  if (HAL_SAI_Init(&BSP_AUDIO_hSai_Tx) != HAL_OK)
 800595e:	4815      	ldr	r0, [pc, #84]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005960:	f007 fbe0 	bl	800d124 <HAL_SAI_Init>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <AUDIO_SAIx_Init+0x22e>
  {
    return AUDIO_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e01d      	b.n	80059aa <AUDIO_SAIx_Init+0x26a>
  }
  if (HAL_SAI_Init(&BSP_AUDIO_hSai_Rx) != HAL_OK)
 800596e:	4813      	ldr	r0, [pc, #76]	; (80059bc <AUDIO_SAIx_Init+0x27c>)
 8005970:	f007 fbd8 	bl	800d124 <HAL_SAI_Init>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <AUDIO_SAIx_Init+0x23e>
  {
    return AUDIO_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e015      	b.n	80059aa <AUDIO_SAIx_Init+0x26a>
  }

  /******************************************/
  /* Enable SAI peripheral to generate MCLK */
  /******************************************/
  __HAL_SAI_ENABLE(&BSP_AUDIO_hSai_Tx);
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800598c:	601a      	str	r2, [r3, #0]
  /* Transmit one byte to start FS generation */
  if (HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, TxData, 2, 1000) != HAL_OK)
 800598e:	f107 010c 	add.w	r1, r7, #12
 8005992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005996:	2202      	movs	r2, #2
 8005998:	4806      	ldr	r0, [pc, #24]	; (80059b4 <AUDIO_SAIx_Init+0x274>)
 800599a:	f007 fd35 	bl	800d408 <HAL_SAI_Transmit>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <AUDIO_SAIx_Init+0x268>
  {
    return AUDIO_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <AUDIO_SAIx_Init+0x26a>
  }

  return AUDIO_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	2001d118 	.word	0x2001d118
 80059b8:	40015404 	.word	0x40015404
 80059bc:	2001d19c 	.word	0x2001d19c
 80059c0:	40015424 	.word	0x40015424

080059c4 <HAL_SAI_MspInit>:
  * @brief  SAI MSP Init
  * @param  hsai : pointer to a SAI_HandleTypeDef structure
  * @retval None
  */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	; 0x38
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable SAI clock */
  __HAL_RCC_SAI1_CLK_ENABLE();
 80059cc:	4b77      	ldr	r3, [pc, #476]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 80059ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d0:	4a76      	ldr	r2, [pc, #472]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 80059d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059d6:	6613      	str	r3, [r2, #96]	; 0x60
 80059d8:	4b74      	ldr	r3, [pc, #464]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 80059da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e0:	623b      	str	r3, [r7, #32]
 80059e2:	6a3b      	ldr	r3, [r7, #32]

  if (hsai->Instance == SAI1_Block_A)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a71      	ldr	r2, [pc, #452]	; (8005bb0 <HAL_SAI_MspInit+0x1ec>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d17f      	bne.n	8005aee <HAL_SAI_MspInit+0x12a>
  {
    /* SAI pins configuration: FS, SCK, MCLK and SD pins */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ee:	4b6f      	ldr	r3, [pc, #444]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	4a6e      	ldr	r2, [pc, #440]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059fa:	4b6c      	ldr	r3, [pc, #432]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 80059fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a06:	4b69      	ldr	r3, [pc, #420]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0a:	4a68      	ldr	r2, [pc, #416]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005a0c:	f043 0310 	orr.w	r3, r3, #16
 8005a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a12:	4b66      	ldr	r3, [pc, #408]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a26:	2303      	movs	r3, #3
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8005a2a:	230d      	movs	r3, #13
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8005a2e:	2304      	movs	r3, #4
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); /* SAI1_MCLK_A */
 8005a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a36:	4619      	mov	r1, r3
 8005a38:	485e      	ldr	r0, [pc, #376]	; (8005bb4 <HAL_SAI_MspInit+0x1f0>)
 8005a3a:	f002 fbb9 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin       = GPIO_PIN_4;
 8005a3e:	2310      	movs	r3, #16
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); /* SAI1_FS_A */
 8005a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a46:	4619      	mov	r1, r3
 8005a48:	485a      	ldr	r0, [pc, #360]	; (8005bb4 <HAL_SAI_MspInit+0x1f0>)
 8005a4a:	f002 fbb1 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin       = GPIO_PIN_10;
 8005a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); /* SAI1_SCK_A */
 8005a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4857      	ldr	r0, [pc, #348]	; (8005bb8 <HAL_SAI_MspInit+0x1f4>)
 8005a5c:	f002 fba8 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8005a60:	2340      	movs	r3, #64	; 0x40
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); /* SAI1_SD_A */
 8005a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4852      	ldr	r0, [pc, #328]	; (8005bb4 <HAL_SAI_MspInit+0x1f0>)
 8005a6c:	f002 fba0 	bl	80081b0 <HAL_GPIO_Init>

    /* Configure the hDmaSaiTx handle parameters */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8005a70:	4b4e      	ldr	r3, [pc, #312]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a74:	4a4d      	ldr	r2, [pc, #308]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005a76:	f043 0302 	orr.w	r3, r3, #2
 8005a7a:	6493      	str	r3, [r2, #72]	; 0x48
 8005a7c:	4b4b      	ldr	r3, [pc, #300]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	697b      	ldr	r3, [r7, #20]
    hDmaSaiTx.Init.Request             = DMA_REQUEST_1;
 8005a88:	4b4c      	ldr	r3, [pc, #304]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	605a      	str	r2, [r3, #4]
    hDmaSaiTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005a8e:	4b4b      	ldr	r3, [pc, #300]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005a90:	2210      	movs	r2, #16
 8005a92:	609a      	str	r2, [r3, #8]
    hDmaSaiTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005a94:	4b49      	ldr	r3, [pc, #292]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	60da      	str	r2, [r3, #12]
    hDmaSaiTx.Init.MemInc              = DMA_MINC_ENABLE;
 8005a9a:	4b48      	ldr	r3, [pc, #288]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	611a      	str	r2, [r3, #16]
    hDmaSaiTx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005aa0:	4b46      	ldr	r3, [pc, #280]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa6:	615a      	str	r2, [r3, #20]
    hDmaSaiTx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8005aa8:	4b44      	ldr	r3, [pc, #272]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aae:	619a      	str	r2, [r3, #24]
    hDmaSaiTx.Init.Mode                = DMA_CIRCULAR;
 8005ab0:	4b42      	ldr	r3, [pc, #264]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	61da      	str	r2, [r3, #28]
    hDmaSaiTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005ab6:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005abc:	621a      	str	r2, [r3, #32]
    hDmaSaiTx.Instance                 = DMA2_Channel1;
 8005abe:	4b3f      	ldr	r3, [pc, #252]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005ac0:	4a3f      	ldr	r2, [pc, #252]	; (8005bc0 <HAL_SAI_MspInit+0x1fc>)
 8005ac2:	601a      	str	r2, [r3, #0]
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hDmaSaiTx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3d      	ldr	r2, [pc, #244]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005ac8:	66da      	str	r2, [r3, #108]	; 0x6c
 8005aca:	4a3c      	ldr	r2, [pc, #240]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6293      	str	r3, [r2, #40]	; 0x28
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hDmaSaiTx);
 8005ad0:	483a      	ldr	r0, [pc, #232]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005ad2:	f002 fadb 	bl	800808c <HAL_DMA_DeInit>
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hDmaSaiTx);
 8005ad6:	4839      	ldr	r0, [pc, #228]	; (8005bbc <HAL_SAI_MspInit+0x1f8>)
 8005ad8:	f002 fa20 	bl	8007f1c <HAL_DMA_Init>
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8005adc:	2200      	movs	r2, #0
 8005ade:	2105      	movs	r1, #5
 8005ae0:	2038      	movs	r0, #56	; 0x38
 8005ae2:	f002 f844 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005ae6:	2038      	movs	r0, #56	; 0x38
 8005ae8:	f002 f85d 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
    HAL_DMA_Init(&hDmaSaiRx);
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
  }
}
 8005aec:	e059      	b.n	8005ba2 <HAL_SAI_MspInit+0x1de>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005aee:	4b2f      	ldr	r3, [pc, #188]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af2:	4a2e      	ldr	r2, [pc, #184]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005af4:	f043 0310 	orr.w	r3, r3, #16
 8005af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005afa:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005b06:	2302      	movs	r3, #2
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8005b12:	230d      	movs	r3, #13
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8005b16:	2308      	movs	r3, #8
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); /* SAI1_SD_B */
 8005b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4824      	ldr	r0, [pc, #144]	; (8005bb4 <HAL_SAI_MspInit+0x1f0>)
 8005b22:	f002 fb45 	bl	80081b0 <HAL_GPIO_Init>
    __HAL_RCC_DMA2_CLK_ENABLE();
 8005b26:	4b21      	ldr	r3, [pc, #132]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2a:	4a20      	ldr	r2, [pc, #128]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	6493      	str	r3, [r2, #72]	; 0x48
 8005b32:	4b1e      	ldr	r3, [pc, #120]	; (8005bac <HAL_SAI_MspInit+0x1e8>)
 8005b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
    hDmaSaiRx.Init.Request             = DMA_REQUEST_1;
 8005b3e:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	605a      	str	r2, [r3, #4]
    hDmaSaiRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005b44:	4b1f      	ldr	r3, [pc, #124]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
    hDmaSaiRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005b4a:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	60da      	str	r2, [r3, #12]
    hDmaSaiRx.Init.MemInc              = DMA_MINC_ENABLE;
 8005b50:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b52:	2280      	movs	r2, #128	; 0x80
 8005b54:	611a      	str	r2, [r3, #16]
    hDmaSaiRx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5c:	615a      	str	r2, [r3, #20]
    hDmaSaiRx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8005b5e:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b64:	619a      	str	r2, [r3, #24]
    hDmaSaiRx.Init.Mode                = DMA_CIRCULAR;
 8005b66:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b68:	2220      	movs	r2, #32
 8005b6a:	61da      	str	r2, [r3, #28]
    hDmaSaiRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005b6c:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b72:	621a      	str	r2, [r3, #32]
    hDmaSaiRx.Instance                 = DMA2_Channel2;
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b76:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <HAL_SAI_MspInit+0x204>)
 8005b78:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(hsai, hdmarx, hDmaSaiRx);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a11      	ldr	r2, [pc, #68]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b7e:	671a      	str	r2, [r3, #112]	; 0x70
 8005b80:	4a10      	ldr	r2, [pc, #64]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_DMA_DeInit(&hDmaSaiRx);
 8005b86:	480f      	ldr	r0, [pc, #60]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b88:	f002 fa80 	bl	800808c <HAL_DMA_DeInit>
    HAL_DMA_Init(&hDmaSaiRx);
 8005b8c:	480d      	ldr	r0, [pc, #52]	; (8005bc4 <HAL_SAI_MspInit+0x200>)
 8005b8e:	f002 f9c5 	bl	8007f1c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8005b92:	2200      	movs	r2, #0
 8005b94:	2105      	movs	r1, #5
 8005b96:	2039      	movs	r0, #57	; 0x39
 8005b98:	f001 ffe9 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8005b9c:	2039      	movs	r0, #57	; 0x39
 8005b9e:	f002 f802 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
}
 8005ba2:	bf00      	nop
 8005ba4:	3738      	adds	r7, #56	; 0x38
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40015404 	.word	0x40015404
 8005bb4:	48001000 	.word	0x48001000
 8005bb8:	48000400 	.word	0x48000400
 8005bbc:	2001d088 	.word	0x2001d088
 8005bc0:	40020408 	.word	0x40020408
 8005bc4:	2001d0d0 	.word	0x2001d0d0
 8005bc8:	4002041c 	.word	0x4002041c

08005bcc <AUDIO_SAIPLLConfig>:
  * @note   The SAI PLL input clock must be configured in the user application.
  *         The SAI PLL configuration done within this function assumes that
  *         the SAI PLL input clock runs at 8 MHz.
  */
static uint8_t AUDIO_SAIPLLConfig(uint32_t Frequency)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b0a6      	sub	sp, #152	; 0x98
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  /* Retrieve actual RCC configuration */
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 8005bd4:	f107 030c 	add.w	r3, r7, #12
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f006 f913 	bl	800be04 <HAL_RCCEx_GetPeriphCLKConfig>

  if ((Frequency == AUDIO_FREQUENCY_11K)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_22K)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f245 6222 	movw	r2, #22050	; 0x5622
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_44K))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d10d      	bne.n	8005c18 <AUDIO_SAIPLLConfig+0x4c>
  {
    /* Configure PLLSAI prescalers */
    /* SAI clock config
    PLLSAI2_VCO= 8 Mhz * PLLSAI1N = 8 * 24 = VCO_192M
    SAI_CK_x = PLLSAI2_VCO/PLLSAI1P = 192/17 = 11.294 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8005bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c00:	60fb      	str	r3, [r7, #12]
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2N        = 24;
 8005c02:	2318      	movs	r3, #24
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2P        = 17;
 8005c06:	2311      	movs	r3, #17
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8005c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI2;
 8005c10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c14:	677b      	str	r3, [r7, #116]	; 0x74
 8005c16:	e00c      	b.n	8005c32 <AUDIO_SAIPLLConfig+0x66>
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    /* SAI clock config
    PLLSAI2_VCO= 8 Mhz * PLLSAI1N = 8 * 43 = VCO_344M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI2P = 344/7 = 49.142 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8005c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c1c:	60fb      	str	r3, [r7, #12]
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2N        = 43;
 8005c1e:	232b      	movs	r3, #43	; 0x2b
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2P        = 7;
 8005c22:	2307      	movs	r3, #7
 8005c24:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8005c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c2a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI2;
 8005c2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c30:	677b      	str	r3, [r7, #116]	; 0x74
  }

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 8005c32:	f107 030c 	add.w	r3, r7, #12
 8005c36:	4618      	mov	r0, r3
 8005c38:	f005 fde8 	bl	800b80c <HAL_RCCEx_PeriphCLKConfig>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <AUDIO_SAIPLLConfig+0x7a>
  {
    return AUDIO_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <AUDIO_SAIPLLConfig+0x7c>
  }

  return AUDIO_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3798      	adds	r7, #152	; 0x98
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8005c5e:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <BSP_IO_Init+0x78>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d128      	bne.n	8005cb8 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <BSP_IO_Init+0x7c>)
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2084      	movs	r0, #132	; 0x84
 8005c6c:	4798      	blx	r3

    HAL_Delay(10);
 8005c6e:	200a      	movs	r0, #10
 8005c70:	f000 fe7e 	bl	8006970 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8005c74:	4b16      	ldr	r3, [pc, #88]	; (8005cd0 <BSP_IO_Init+0x80>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2084      	movs	r0, #132	; 0x84
 8005c7a:	4798      	blx	r3
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8005c80:	79bb      	ldrb	r3, [r7, #6]
 8005c82:	2b7b      	cmp	r3, #123	; 0x7b
 8005c84:	d002      	beq.n	8005c8c <BSP_IO_Init+0x3c>
 8005c86:	79bb      	ldrb	r3, [r7, #6]
 8005c88:	2b79      	cmp	r3, #121	; 0x79
 8005c8a:	d117      	bne.n	8005cbc <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <BSP_IO_Init+0x78>)
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <BSP_IO_Init+0x80>)
 8005c90:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8005c92:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <BSP_IO_Init+0x78>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00f      	beq.n	8005cbc <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <BSP_IO_Init+0x78>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2084      	movs	r0, #132	; 0x84
 8005ca4:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <BSP_IO_Init+0x78>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4909      	ldr	r1, [pc, #36]	; (8005cd4 <BSP_IO_Init+0x84>)
 8005cae:	2084      	movs	r0, #132	; 0x84
 8005cb0:	4798      	blx	r3

        ret = IO_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	71fb      	strb	r3, [r7, #7]
 8005cb6:	e001      	b.n	8005cbc <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	2001d220 	.word	0x2001d220
 8005ccc:	2001c378 	.word	0x2001c378
 8005cd0:	2001c34c 	.word	0x2001c34c
 8005cd4:	000301ff 	.word	0x000301ff

08005cd8 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <BSP_IO_ConfigPin+0x30>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <BSP_IO_ConfigPin+0x34>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	2084      	movs	r0, #132	; 0x84
 8005cfc:	4798      	blx	r3

  return IO_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	000301ff 	.word	0x000301ff
 8005d0c:	2001d220 	.word	0x2001d220

08005d10 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <BSP_IO_WritePin+0x30>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8005d28:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <BSP_IO_WritePin+0x34>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	68f9      	ldr	r1, [r7, #12]
 8005d32:	2084      	movs	r0, #132	; 0x84
 8005d34:	4798      	blx	r3

}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	000301ff 	.word	0x000301ff
 8005d44:	2001d220 	.word	0x2001d220

08005d48 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	f000 f803 	bl	8005d58 <BSP_LCD_InitEx>
 8005d52:	4603      	mov	r3, r0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8005d68:	4b33      	ldr	r3, [pc, #204]	; (8005e38 <BSP_LCD_InitEx+0xe0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d102      	bne.n	8005d76 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	73fb      	strb	r3, [r7, #15]
 8005d74:	e05b      	b.n	8005e2e <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 8005d76:	f7ff ff6b 	bl	8005c50 <BSP_IO_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 8005d80:	f7fe fd40 	bl	8004804 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8005d84:	f000 fb20 	bl	80063c8 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	482b      	ldr	r0, [pc, #172]	; (8005e3c <BSP_LCD_InitEx+0xe4>)
 8005d8e:	f002 fc93 	bl	80086b8 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8005d92:	4b2b      	ldr	r3, [pc, #172]	; (8005e40 <BSP_LCD_InitEx+0xe8>)
 8005d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d98:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8005d9a:	4b29      	ldr	r3, [pc, #164]	; (8005e40 <BSP_LCD_InitEx+0xe8>)
 8005d9c:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <BSP_LCD_InitEx+0xec>)
 8005d9e:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8005da0:	4b27      	ldr	r3, [pc, #156]	; (8005e40 <BSP_LCD_InitEx+0xe8>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8005da6:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <BSP_LCD_InitEx+0xf0>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d108      	bne.n	8005dc0 <BSP_LCD_InitEx+0x68>
 8005dae:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <BSP_LCD_InitEx+0xf4>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005db6:	2201      	movs	r2, #1
 8005db8:	2101      	movs	r1, #1
 8005dba:	4825      	ldr	r0, [pc, #148]	; (8005e50 <BSP_LCD_InitEx+0xf8>)
 8005dbc:	f002 fc7c 	bl	80086b8 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8005dc0:	f000 f850 	bl	8005e64 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8005dc4:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <BSP_LCD_InitEx+0xfc>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4798      	blx	r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b85      	cmp	r3, #133	; 0x85
 8005dce:	d12e      	bne.n	8005e2e <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 8005dd0:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <BSP_LCD_InitEx+0x100>)
 8005dd2:	4a20      	ldr	r2, [pc, #128]	; (8005e54 <BSP_LCD_InitEx+0xfc>)
 8005dd4:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8005dd6:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <BSP_LCD_InitEx+0x100>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8005dde:	2200      	movs	r2, #0
 8005de0:	2100      	movs	r1, #0
 8005de2:	202c      	movs	r0, #44	; 0x2c
 8005de4:	f7fe fad5 	bl	8004392 <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8005de8:	2300      	movs	r3, #0
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	e006      	b.n	8005dfc <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8005dee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005df2:	f7ff fabb 	bl	800536c <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8005e02:	d3f4      	bcc.n	8005dee <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	f7fe f9bf 	bl	800418e <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 8005e10:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <BSP_LCD_InitEx+0x104>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	e002      	b.n	8005e1e <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8005e18:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <BSP_LCD_InitEx+0x104>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005e1e:	4810      	ldr	r0, [pc, #64]	; (8005e60 <BSP_LCD_InitEx+0x108>)
 8005e20:	f000 f868 	bl	8005ef4 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8005e24:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <BSP_LCD_InitEx+0xe0>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	2001d224 	.word	0x2001d224
 8005e3c:	48001c00 	.word	0x48001c00
 8005e40:	2001d22c 	.word	0x2001d22c
 8005e44:	2001c404 	.word	0x2001c404
 8005e48:	2001d228 	.word	0x2001d228
 8005e4c:	2001d229 	.word	0x2001d229
 8005e50:	48002000 	.word	0x48002000
 8005e54:	2001c3c4 	.word	0x2001c3c4
 8005e58:	2001d238 	.word	0x2001d238
 8005e5c:	2001c41c 	.word	0x2001c41c
 8005e60:	2001c414 	.word	0x2001c414

08005e64 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8005e68:	2100      	movs	r1, #0
 8005e6a:	2004      	movs	r0, #4
 8005e6c:	f7ff ff50 	bl	8005d10 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8005e70:	2005      	movs	r0, #5
 8005e72:	f000 fd7d 	bl	8006970 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8005e76:	2101      	movs	r1, #1
 8005e78:	2004      	movs	r0, #4
 8005e7a:	f7ff ff49 	bl	8005d10 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8005e7e:	200a      	movs	r0, #10
 8005e80:	f000 fd76 	bl	8006970 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8005e84:	2100      	movs	r1, #0
 8005e86:	2004      	movs	r0, #4
 8005e88:	f7ff ff42 	bl	8005d10 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8005e8c:	2014      	movs	r0, #20
 8005e8e:	f000 fd6f 	bl	8006970 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8005e92:	2101      	movs	r1, #1
 8005e94:	2004      	movs	r0, #4
 8005e96:	f7ff ff3b 	bl	8005d10 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8005e9a:	200a      	movs	r0, #10
 8005e9c:	f000 fd68 	bl	8006970 <HAL_Delay>
}
 8005ea0:	bf00      	nop
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8005ea8:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <BSP_LCD_GetXSize+0x14>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	4798      	blx	r3
 8005eb0:	4603      	mov	r3, r0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2001d238 	.word	0x2001d238

08005ebc <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 8005ec0:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <BSP_LCD_GetYSize+0x14>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	4798      	blx	r3
 8005ec8:	4603      	mov	r3, r0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	2001d238 	.word	0x2001d238

08005ed4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	4a03      	ldr	r2, [pc, #12]	; (8005ef0 <BSP_LCD_SetTextColor+0x1c>)
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	2001d22c 	.word	0x2001d22c

08005ef4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <BSP_LCD_SetFont+0x1c>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6093      	str	r3, [r2, #8]
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	2001d22c 	.word	0x2001d22c

08005f14 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	80fb      	strh	r3, [r7, #6]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	80bb      	strh	r3, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005f26:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <BSP_LCD_DisplayChar+0x50>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8005f30:	490c      	ldr	r1, [pc, #48]	; (8005f64 <BSP_LCD_DisplayChar+0x50>)
 8005f32:	6889      	ldr	r1, [r1, #8]
 8005f34:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005f36:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8005f3a:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <BSP_LCD_DisplayChar+0x50>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	889b      	ldrh	r3, [r3, #4]
 8005f40:	3307      	adds	r3, #7
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da00      	bge.n	8005f48 <BSP_LCD_DisplayChar+0x34>
 8005f46:	3307      	adds	r3, #7
 8005f48:	10db      	asrs	r3, r3, #3
 8005f4a:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005f4e:	441a      	add	r2, r3
 8005f50:	88b9      	ldrh	r1, [r7, #4]
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fa93 	bl	8006480 <DrawChar>
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	2001d22c 	.word	0x2001d22c

08005f68 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60ba      	str	r2, [r7, #8]
 8005f70:	461a      	mov	r2, r3
 8005f72:	4603      	mov	r3, r0
 8005f74:	81fb      	strh	r3, [r7, #14]
 8005f76:	460b      	mov	r3, r1
 8005f78:	81bb      	strh	r3, [r7, #12]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	83fb      	strh	r3, [r7, #30]
 8005f82:	2300      	movs	r3, #0
 8005f84:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 8005f92:	e002      	b.n	8005f9a <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	3301      	adds	r3, #1
 8005f98:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	617a      	str	r2, [r7, #20]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f6      	bne.n	8005f94 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 8005fa6:	f7ff ff7d 	bl	8005ea4 <BSP_LCD_GetXSize>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4b33      	ldr	r3, [pc, #204]	; (800607c <BSP_LCD_DisplayStringAt+0x114>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	889b      	ldrh	r3, [r3, #4]
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d014      	beq.n	8005fe8 <BSP_LCD_DisplayStringAt+0x80>
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	dc23      	bgt.n	800600a <BSP_LCD_DisplayStringAt+0xa2>
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d002      	beq.n	8005fcc <BSP_LCD_DisplayStringAt+0x64>
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d011      	beq.n	8005fee <BSP_LCD_DisplayStringAt+0x86>
 8005fca:	e01e      	b.n	800600a <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	; (800607c <BSP_LCD_DisplayStringAt+0x114>)
 8005fd4:	6892      	ldr	r2, [r2, #8]
 8005fd6:	8892      	ldrh	r2, [r2, #4]
 8005fd8:	fb02 f303 	mul.w	r3, r2, r3
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	89fb      	ldrh	r3, [r7, #14]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	83fb      	strh	r3, [r7, #30]
      break;
 8005fe6:	e013      	b.n	8006010 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 8005fe8:	89fb      	ldrh	r3, [r7, #14]
 8005fea:	83fb      	strh	r3, [r7, #30]
      break;
 8005fec:	e010      	b.n	8006010 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	4b21      	ldr	r3, [pc, #132]	; (800607c <BSP_LCD_DisplayStringAt+0x114>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	889b      	ldrh	r3, [r3, #4]
 8005ffc:	fb12 f303 	smulbb	r3, r2, r3
 8006000:	b29a      	uxth	r2, r3
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	83fb      	strh	r3, [r7, #30]
      break;
 8006008:	e002      	b.n	8006010 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800600a:	89fb      	ldrh	r3, [r7, #14]
 800600c:	83fb      	strh	r3, [r7, #30]
      break;
 800600e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8006010:	8bfb      	ldrh	r3, [r7, #30]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <BSP_LCD_DisplayStringAt+0xb6>
 8006016:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800601a:	2b00      	cmp	r3, #0
 800601c:	da15      	bge.n	800604a <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800601e:	2301      	movs	r3, #1
 8006020:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8006022:	e012      	b.n	800604a <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	781a      	ldrb	r2, [r3, #0]
 8006028:	89b9      	ldrh	r1, [r7, #12]
 800602a:	8bfb      	ldrh	r3, [r7, #30]
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ff71 	bl	8005f14 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <BSP_LCD_DisplayStringAt+0x114>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	889a      	ldrh	r2, [r3, #4]
 8006038:	8bfb      	ldrh	r3, [r7, #30]
 800603a:	4413      	add	r3, r2
 800603c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3301      	adds	r3, #1
 8006042:	60bb      	str	r3, [r7, #8]
    i++;
 8006044:	8bbb      	ldrh	r3, [r7, #28]
 8006046:	3301      	adds	r3, #1
 8006048:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00f      	beq.n	8006072 <BSP_LCD_DisplayStringAt+0x10a>
 8006052:	f7ff ff27 	bl	8005ea4 <BSP_LCD_GetXSize>
 8006056:	4601      	mov	r1, r0
 8006058:	8bbb      	ldrh	r3, [r7, #28]
 800605a:	4a08      	ldr	r2, [pc, #32]	; (800607c <BSP_LCD_DisplayStringAt+0x114>)
 800605c:	6892      	ldr	r2, [r2, #8]
 800605e:	8892      	ldrh	r2, [r2, #4]
 8006060:	fb02 f303 	mul.w	r3, r2, r3
 8006064:	1acb      	subs	r3, r1, r3
 8006066:	b29b      	uxth	r3, r3
 8006068:	4a04      	ldr	r2, [pc, #16]	; (800607c <BSP_LCD_DisplayStringAt+0x114>)
 800606a:	6892      	ldr	r2, [r2, #8]
 800606c:	8892      	ldrh	r2, [r2, #4]
 800606e:	4293      	cmp	r3, r2
 8006070:	d2d8      	bcs.n	8006024 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8006072:	bf00      	nop
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	2001d22c 	.word	0x2001d22c

08006080 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	80fb      	strh	r3, [r7, #6]
 800608a:	460b      	mov	r3, r1
 800608c:	80bb      	strh	r3, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <BSP_LCD_DrawPixel+0x34>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d006      	beq.n	80060aa <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <BSP_LCD_DrawPixel+0x34>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	887a      	ldrh	r2, [r7, #2]
 80060a4:	88b9      	ldrh	r1, [r7, #4]
 80060a6:	88f8      	ldrh	r0, [r7, #6]
 80060a8:	4798      	blx	r3
  }
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	2001d238 	.word	0x2001d238

080060b8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	80fb      	strh	r3, [r7, #6]
 80060c2:	460b      	mov	r3, r1
 80060c4:	80bb      	strh	r3, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 80060ce:	4b15      	ldr	r3, [pc, #84]	; (8006124 <BSP_LCD_DrawHLine+0x6c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80060d8:	4b12      	ldr	r3, [pc, #72]	; (8006124 <BSP_LCD_DrawHLine+0x6c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a1c      	ldr	r4, [r3, #32]
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <BSP_LCD_DrawHLine+0x70>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	b298      	uxth	r0, r3
 80060e4:	887b      	ldrh	r3, [r7, #2]
 80060e6:	88ba      	ldrh	r2, [r7, #4]
 80060e8:	88f9      	ldrh	r1, [r7, #6]
 80060ea:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80060ec:	e015      	b.n	800611a <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e00e      	b.n	8006112 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	4413      	add	r3, r2
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <BSP_LCD_DrawHLine+0x70>)
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	b292      	uxth	r2, r2
 8006104:	88b9      	ldrh	r1, [r7, #4]
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff ffba 	bl	8006080 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3301      	adds	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	887b      	ldrh	r3, [r7, #2]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	429a      	cmp	r2, r3
 8006118:	d3ec      	bcc.n	80060f4 <BSP_LCD_DrawHLine+0x3c>
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bd90      	pop	{r4, r7, pc}
 8006122:	bf00      	nop
 8006124:	2001d238 	.word	0x2001d238
 8006128:	2001d22c 	.word	0x2001d22c

0800612c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	80fb      	strh	r3, [r7, #6]
 8006136:	460b      	mov	r3, r1
 8006138:	80bb      	strh	r3, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800613e:	887b      	ldrh	r3, [r7, #2]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	f1c3 0303 	rsb	r3, r3, #3
 8006146:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800614c:	887b      	ldrh	r3, [r7, #2]
 800614e:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 8006150:	e09a      	b.n	8006288 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	b29a      	uxth	r2, r3
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	4413      	add	r3, r2
 800615a:	b298      	uxth	r0, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	b29b      	uxth	r3, r3
 8006160:	88ba      	ldrh	r2, [r7, #4]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	b29b      	uxth	r3, r3
 8006166:	4a4d      	ldr	r2, [pc, #308]	; (800629c <BSP_LCD_DrawCircle+0x170>)
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	b292      	uxth	r2, r2
 800616c:	4619      	mov	r1, r3
 800616e:	f7ff ff87 	bl	8006080 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	b29b      	uxth	r3, r3
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	b298      	uxth	r0, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	b29b      	uxth	r3, r3
 8006180:	88ba      	ldrh	r2, [r7, #4]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	b29b      	uxth	r3, r3
 8006186:	4a45      	ldr	r2, [pc, #276]	; (800629c <BSP_LCD_DrawCircle+0x170>)
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	b292      	uxth	r2, r2
 800618c:	4619      	mov	r1, r3
 800618e:	f7ff ff77 	bl	8006080 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	b29a      	uxth	r2, r3
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	4413      	add	r3, r2
 800619a:	b298      	uxth	r0, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	88ba      	ldrh	r2, [r7, #4]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4a3d      	ldr	r2, [pc, #244]	; (800629c <BSP_LCD_DrawCircle+0x170>)
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	b292      	uxth	r2, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7ff ff67 	bl	8006080 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	b298      	uxth	r0, r3
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	88ba      	ldrh	r2, [r7, #4]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4a35      	ldr	r2, [pc, #212]	; (800629c <BSP_LCD_DrawCircle+0x170>)
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	b292      	uxth	r2, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	f7ff ff57 	bl	8006080 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	4413      	add	r3, r2
 80061da:	b298      	uxth	r0, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	88bb      	ldrh	r3, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4a2d      	ldr	r2, [pc, #180]	; (800629c <BSP_LCD_DrawCircle+0x170>)
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	b292      	uxth	r2, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	f7ff ff47 	bl	8006080 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	b298      	uxth	r0, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	88bb      	ldrh	r3, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	b29b      	uxth	r3, r3
 8006206:	4a25      	ldr	r2, [pc, #148]	; (800629c <BSP_LCD_DrawCircle+0x170>)
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	b292      	uxth	r2, r2
 800620c:	4619      	mov	r1, r3
 800620e:	f7ff ff37 	bl	8006080 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	b29a      	uxth	r2, r3
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	4413      	add	r3, r2
 800621a:	b298      	uxth	r0, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	b29a      	uxth	r2, r3
 8006220:	88bb      	ldrh	r3, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	b29b      	uxth	r3, r3
 8006226:	4a1d      	ldr	r2, [pc, #116]	; (800629c <BSP_LCD_DrawCircle+0x170>)
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	b292      	uxth	r2, r2
 800622c:	4619      	mov	r1, r3
 800622e:	f7ff ff27 	bl	8006080 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	b29b      	uxth	r3, r3
 8006236:	88fa      	ldrh	r2, [r7, #6]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	b298      	uxth	r0, r3
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	b29a      	uxth	r2, r3
 8006240:	88bb      	ldrh	r3, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	4a15      	ldr	r2, [pc, #84]	; (800629c <BSP_LCD_DrawCircle+0x170>)
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	b292      	uxth	r2, r2
 800624c:	4619      	mov	r1, r3
 800624e:	f7ff ff17 	bl	8006080 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006252:	4813      	ldr	r0, [pc, #76]	; (80062a0 <BSP_LCD_DrawCircle+0x174>)
 8006254:	f7ff fe4e 	bl	8005ef4 <BSP_LCD_SetFont>

    if (decision < 0)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	da06      	bge.n	800626c <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	009a      	lsls	r2, r3, #2
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	4413      	add	r3, r2
 8006266:	3306      	adds	r3, #6
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	e00a      	b.n	8006282 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	009a      	lsls	r2, r3, #2
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	330a      	adds	r3, #10
 800627a:	617b      	str	r3, [r7, #20]
      current_y--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3b01      	subs	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	3301      	adds	r3, #1
 8006286:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	429a      	cmp	r2, r3
 800628e:	f67f af60 	bls.w	8006152 <BSP_LCD_DrawCircle+0x26>
  }
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	2001d22c 	.word	0x2001d22c
 80062a0:	2001c414 	.word	0x2001c414

080062a4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	80fb      	strh	r3, [r7, #6]
 80062ae:	460b      	mov	r3, r1
 80062b0:	80bb      	strh	r3, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 80062b6:	887b      	ldrh	r3, [r7, #2]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	f1c3 0303 	rsb	r3, r3, #3
 80062be:	617b      	str	r3, [r7, #20]

  current_x = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80062c4:	887b      	ldrh	r3, [r7, #2]
 80062c6:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80062c8:	4b3e      	ldr	r3, [pc, #248]	; (80063c4 <BSP_LCD_FillCircle+0x120>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fe00 	bl	8005ed4 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 80062d4:	e061      	b.n	800639a <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d021      	beq.n	8006320 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	b298      	uxth	r0, r3
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	88bb      	ldrh	r3, [r7, #4]
 80062ec:	4413      	add	r3, r2
 80062ee:	b299      	uxth	r1, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	f7ff fedd 	bl	80060b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	b29b      	uxth	r3, r3
 8006302:	88fa      	ldrh	r2, [r7, #6]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	b298      	uxth	r0, r3
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	b29b      	uxth	r3, r3
 800630c:	88ba      	ldrh	r2, [r7, #4]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	b299      	uxth	r1, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	b29b      	uxth	r3, r3
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	b29b      	uxth	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	f7ff fecc 	bl	80060b8 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d021      	beq.n	800636a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	b29b      	uxth	r3, r3
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	b298      	uxth	r0, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	b29b      	uxth	r3, r3
 8006334:	88ba      	ldrh	r2, [r7, #4]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	b299      	uxth	r1, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	b29b      	uxth	r3, r3
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	b29b      	uxth	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	f7ff feb8 	bl	80060b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	b29b      	uxth	r3, r3
 800634c:	88fa      	ldrh	r2, [r7, #6]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	b298      	uxth	r0, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	b29a      	uxth	r2, r3
 8006356:	88bb      	ldrh	r3, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	b299      	uxth	r1, r3
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	b29b      	uxth	r3, r3
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	f7ff fea7 	bl	80060b8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	da06      	bge.n	800637e <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	009a      	lsls	r2, r3, #2
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	4413      	add	r3, r2
 8006378:	3306      	adds	r3, #6
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e00a      	b.n	8006394 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	009a      	lsls	r2, r3, #2
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	330a      	adds	r3, #10
 800638c:	617b      	str	r3, [r7, #20]
      current_y--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b01      	subs	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3301      	adds	r3, #1
 8006398:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d999      	bls.n	80062d6 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <BSP_LCD_FillCircle+0x120>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fd93 	bl	8005ed4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80063ae:	887a      	ldrh	r2, [r7, #2]
 80063b0:	88b9      	ldrh	r1, [r7, #4]
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff feb9 	bl	800612c <BSP_LCD_DrawCircle>
}
 80063ba:	bf00      	nop
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	2001d22c 	.word	0x2001d22c

080063c8 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 80063ce:	4b29      	ldr	r3, [pc, #164]	; (8006474 <BSP_LCD_MspInit+0xac>)
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	4a28      	ldr	r2, [pc, #160]	; (8006474 <BSP_LCD_MspInit+0xac>)
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063da:	4b26      	ldr	r3, [pc, #152]	; (8006474 <BSP_LCD_MspInit+0xac>)
 80063dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	60bb      	str	r3, [r7, #8]
 80063e4:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80063e6:	4b23      	ldr	r3, [pc, #140]	; (8006474 <BSP_LCD_MspInit+0xac>)
 80063e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ea:	4a22      	ldr	r2, [pc, #136]	; (8006474 <BSP_LCD_MspInit+0xac>)
 80063ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063f2:	4b20      	ldr	r3, [pc, #128]	; (8006474 <BSP_LCD_MspInit+0xac>)
 80063f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	607b      	str	r3, [r7, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <BSP_LCD_MspInit+0xac>)
 8006400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006402:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <BSP_LCD_MspInit+0xac>)
 8006404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800640a:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <BSP_LCD_MspInit+0xac>)
 800640c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8006416:	f7ff fc1b 	bl	8005c50 <BSP_IO_Init>
 800641a:	4603      	mov	r3, r0
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 8006420:	f7fe f9f0 	bl	8004804 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8006424:	2101      	movs	r1, #1
 8006426:	2004      	movs	r0, #4
 8006428:	f7ff fc56 	bl	8005cd8 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800642c:	2301      	movs	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006430:	2301      	movs	r3, #1
 8006432:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800643c:	2300      	movs	r3, #0
 800643e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8006440:	f107 030c 	add.w	r3, r7, #12
 8006444:	4619      	mov	r1, r3
 8006446:	480c      	ldr	r0, [pc, #48]	; (8006478 <BSP_LCD_MspInit+0xb0>)
 8006448:	f001 feb2 	bl	80081b0 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800644c:	2301      	movs	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 8006450:	2301      	movs	r3, #1
 8006452:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800645c:	2300      	movs	r3, #0
 800645e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8006460:	f107 030c 	add.w	r3, r7, #12
 8006464:	4619      	mov	r1, r3
 8006466:	4805      	ldr	r0, [pc, #20]	; (800647c <BSP_LCD_MspInit+0xb4>)
 8006468:	f001 fea2 	bl	80081b0 <HAL_GPIO_Init>
}
 800646c:	bf00      	nop
 800646e:	3720      	adds	r7, #32
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40021000 	.word	0x40021000
 8006478:	48002000 	.word	0x48002000
 800647c:	48001c00 	.word	0x48001c00

08006480 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	603a      	str	r2, [r7, #0]
 800648a:	80fb      	strh	r3, [r7, #6]
 800648c:	460b      	mov	r3, r1
 800648e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	2300      	movs	r3, #0
 8006496:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 8006498:	4b45      	ldr	r3, [pc, #276]	; (80065b0 <DrawChar+0x130>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	88db      	ldrh	r3, [r3, #6]
 800649e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 80064a0:	4b43      	ldr	r3, [pc, #268]	; (80065b0 <DrawChar+0x130>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	889b      	ldrh	r3, [r3, #4]
 80064a6:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 80064a8:	8a3b      	ldrh	r3, [r7, #16]
 80064aa:	3307      	adds	r3, #7
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da00      	bge.n	80064b2 <DrawChar+0x32>
 80064b0:	3307      	adds	r3, #7
 80064b2:	10db      	asrs	r3, r3, #3
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	8a3b      	ldrh	r3, [r7, #16]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e069      	b.n	800659c <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80064c8:	8a3b      	ldrh	r3, [r7, #16]
 80064ca:	3307      	adds	r3, #7
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da00      	bge.n	80064d2 <DrawChar+0x52>
 80064d0:	3307      	adds	r3, #7
 80064d2:	10db      	asrs	r3, r3, #3
 80064d4:	461a      	mov	r2, r3
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	4413      	add	r3, r2
 80064e0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80064e2:	8a3b      	ldrh	r3, [r7, #16]
 80064e4:	3307      	adds	r3, #7
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da00      	bge.n	80064ec <DrawChar+0x6c>
 80064ea:	3307      	adds	r3, #7
 80064ec:	10db      	asrs	r3, r3, #3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d002      	beq.n	80064f8 <DrawChar+0x78>
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d004      	beq.n	8006500 <DrawChar+0x80>
 80064f6:	e00c      	b.n	8006512 <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	617b      	str	r3, [r7, #20]
        break;
 80064fe:	e016      	b.n	800652e <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	3201      	adds	r2, #1
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
        break;
 8006510:	e00d      	b.n	800652e <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	041a      	lsls	r2, r3, #16
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	3301      	adds	r3, #1
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	4313      	orrs	r3, r2
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	3202      	adds	r2, #2
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
        break;
 800652c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800652e:	2300      	movs	r3, #0
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e029      	b.n	8006588 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 8006534:	8a3a      	ldrh	r2, [r7, #16]
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	4413      	add	r3, r2
 800653e:	3b01      	subs	r3, #1
 8006540:	2201      	movs	r2, #1
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	461a      	mov	r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00c      	beq.n	800656a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	b29a      	uxth	r2, r3
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	4413      	add	r3, r2
 8006558:	b29b      	uxth	r3, r3
 800655a:	4a15      	ldr	r2, [pc, #84]	; (80065b0 <DrawChar+0x130>)
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	b292      	uxth	r2, r2
 8006560:	88b9      	ldrh	r1, [r7, #4]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fd8c 	bl	8006080 <BSP_LCD_DrawPixel>
 8006568:	e00b      	b.n	8006582 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	b29a      	uxth	r2, r3
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	4413      	add	r3, r2
 8006572:	b29b      	uxth	r3, r3
 8006574:	4a0e      	ldr	r2, [pc, #56]	; (80065b0 <DrawChar+0x130>)
 8006576:	6852      	ldr	r2, [r2, #4]
 8006578:	b292      	uxth	r2, r2
 800657a:	88b9      	ldrh	r1, [r7, #4]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff fd7f 	bl	8006080 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	3301      	adds	r3, #1
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	8a3b      	ldrh	r3, [r7, #16]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	429a      	cmp	r2, r3
 800658e:	d3d1      	bcc.n	8006534 <DrawChar+0xb4>
      }
    }
    Ypos++;
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	3301      	adds	r3, #1
 8006594:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	3301      	adds	r3, #1
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	8a7b      	ldrh	r3, [r7, #18]
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d391      	bcc.n	80064c8 <DrawChar+0x48>
  }
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2001d22c 	.word	0x2001d22c

080065b4 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	80fb      	strh	r3, [r7, #6]
 80065be:	460b      	mov	r3, r1
 80065c0:	80bb      	strh	r3, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80065ce:	4b20      	ldr	r3, [pc, #128]	; (8006650 <BSP_TS_InitEx+0x9c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a20      	ldr	r2, [pc, #128]	; (8006654 <BSP_TS_InitEx+0xa0>)
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	b292      	uxth	r2, r2
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80065dc:	4b1c      	ldr	r3, [pc, #112]	; (8006650 <BSP_TS_InitEx+0x9c>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2070      	movs	r0, #112	; 0x70
 80065e2:	4798      	blx	r3
 80065e4:	4603      	mov	r3, r0
 80065e6:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 80065e8:	89bb      	ldrh	r3, [r7, #12]
 80065ea:	2bcd      	cmp	r3, #205	; 0xcd
 80065ec:	d12a      	bne.n	8006644 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 80065ee:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <BSP_TS_InitEx+0xa4>)
 80065f0:	4a17      	ldr	r2, [pc, #92]	; (8006650 <BSP_TS_InitEx+0x9c>)
 80065f2:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <BSP_TS_InitEx+0xa0>)
 80065f6:	2270      	movs	r2, #112	; 0x70
 80065f8:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 8006600:	4b16      	ldr	r3, [pc, #88]	; (800665c <BSP_TS_InitEx+0xa8>)
 8006602:	2206      	movs	r2, #6
 8006604:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 8006606:	4b16      	ldr	r3, [pc, #88]	; (8006660 <BSP_TS_InitEx+0xac>)
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e005      	b.n	800661a <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <BSP_TS_InitEx+0xa8>)
 8006610:	220c      	movs	r2, #12
 8006612:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 8006614:	4b12      	ldr	r3, [pc, #72]	; (8006660 <BSP_TS_InitEx+0xac>)
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d111      	bne.n	8006644 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 8006620:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <BSP_TS_InitEx+0xa4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	4a0b      	ldr	r2, [pc, #44]	; (8006654 <BSP_TS_InitEx+0xa0>)
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	b292      	uxth	r2, r2
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 8006630:	4b09      	ldr	r3, [pc, #36]	; (8006658 <BSP_TS_InitEx+0xa4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a07      	ldr	r2, [pc, #28]	; (8006654 <BSP_TS_InitEx+0xa0>)
 8006638:	7812      	ldrb	r2, [r2, #0]
 800663a:	b292      	uxth	r2, r2
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3

      return TS_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 8006644:	2303      	movs	r3, #3


}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	2001c324 	.word	0x2001c324
 8006654:	2001d240 	.word	0x2001d240
 8006658:	2001d23c 	.word	0x2001d23c
 800665c:	2001c41d 	.word	0x2001c41d
 8006660:	2001c41e 	.word	0x2001c41e

08006664 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8006664:	b590      	push	{r4, r7, lr}
 8006666:	b089      	sub	sp, #36	; 0x24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 8006670:	4b80      	ldr	r3, [pc, #512]	; (8006874 <BSP_TS_GetState+0x210>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	4a80      	ldr	r2, [pc, #512]	; (8006878 <BSP_TS_GetState+0x214>)
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	b292      	uxth	r2, r2
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80ec 	beq.w	800686a <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	e0e1      	b.n	800685c <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8006698:	4b76      	ldr	r3, [pc, #472]	; (8006874 <BSP_TS_GetState+0x210>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	4a76      	ldr	r2, [pc, #472]	; (8006878 <BSP_TS_GetState+0x214>)
 80066a0:	7812      	ldrb	r2, [r2, #0]
 80066a2:	b290      	uxth	r0, r2
 80066a4:	f107 0110 	add.w	r1, r7, #16
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	0052      	lsls	r2, r2, #1
 80066ac:	188c      	adds	r4, r1, r2
 80066ae:	f107 010c 	add.w	r1, r7, #12
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	0052      	lsls	r2, r2, #1
 80066b6:	440a      	add	r2, r1
 80066b8:	4621      	mov	r1, r4
 80066ba:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 80066bc:	4b6f      	ldr	r3, [pc, #444]	; (800687c <BSP_TS_GetState+0x218>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d019      	beq.n	80066fc <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	3320      	adds	r3, #32
 80066ce:	443b      	add	r3, r7
 80066d0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80066d4:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	3320      	adds	r3, #32
 80066dc:	443b      	add	r3, r7
 80066de:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	3320      	adds	r3, #32
 80066e8:	443b      	add	r3, r7
 80066ea:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	3320      	adds	r3, #32
 80066f4:	443b      	add	r3, r7
 80066f6:	8b3a      	ldrh	r2, [r7, #24]
 80066f8:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 80066fc:	4b5f      	ldr	r3, [pc, #380]	; (800687c <BSP_TS_GetState+0x218>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	3320      	adds	r3, #32
 800670e:	443b      	add	r3, r7
 8006710:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006714:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006718:	b29a      	uxth	r2, r3
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	3320      	adds	r3, #32
 8006720:	443b      	add	r3, r7
 8006722:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 8006726:	4b55      	ldr	r3, [pc, #340]	; (800687c <BSP_TS_GetState+0x218>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00e      	beq.n	8006750 <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	3320      	adds	r3, #32
 8006738:	443b      	add	r3, r7
 800673a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800673e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006742:	b29a      	uxth	r2, r3
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	3320      	adds	r3, #32
 800674a:	443b      	add	r3, r7
 800674c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	3320      	adds	r3, #32
 8006756:	443b      	add	r3, r7
 8006758:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800675c:	4619      	mov	r1, r3
 800675e:	4a48      	ldr	r2, [pc, #288]	; (8006880 <BSP_TS_GetState+0x21c>)
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006766:	4299      	cmp	r1, r3
 8006768:	d90d      	bls.n	8006786 <BSP_TS_GetState+0x122>
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	3320      	adds	r3, #32
 8006770:	443b      	add	r3, r7
 8006772:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8006776:	4942      	ldr	r1, [pc, #264]	; (8006880 <BSP_TS_GetState+0x21c>)
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800677e:	b29b      	uxth	r3, r3
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	b29b      	uxth	r3, r3
 8006784:	e00c      	b.n	80067a0 <BSP_TS_GetState+0x13c>
 8006786:	4a3e      	ldr	r2, [pc, #248]	; (8006880 <BSP_TS_GetState+0x21c>)
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800678e:	b29a      	uxth	r2, r3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	3320      	adds	r3, #32
 8006796:	443b      	add	r3, r7
 8006798:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	b29b      	uxth	r3, r3
 80067a0:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	3320      	adds	r3, #32
 80067a8:	443b      	add	r3, r7
 80067aa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80067ae:	4619      	mov	r1, r3
 80067b0:	4a34      	ldr	r2, [pc, #208]	; (8006884 <BSP_TS_GetState+0x220>)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b8:	4299      	cmp	r1, r3
 80067ba:	d90d      	bls.n	80067d8 <BSP_TS_GetState+0x174>
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	3320      	adds	r3, #32
 80067c2:	443b      	add	r3, r7
 80067c4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80067c8:	492e      	ldr	r1, [pc, #184]	; (8006884 <BSP_TS_GetState+0x220>)
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	e00c      	b.n	80067f2 <BSP_TS_GetState+0x18e>
 80067d8:	4a2a      	ldr	r2, [pc, #168]	; (8006884 <BSP_TS_GetState+0x220>)
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	3320      	adds	r3, #32
 80067e8:	443b      	add	r3, r7
 80067ea:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80067f4:	8afa      	ldrh	r2, [r7, #22]
 80067f6:	8abb      	ldrh	r3, [r7, #20]
 80067f8:	4413      	add	r3, r2
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	dd15      	ble.n	800682a <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	3320      	adds	r3, #32
 8006804:	443b      	add	r3, r7
 8006806:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800680a:	4619      	mov	r1, r3
 800680c:	4a1c      	ldr	r2, [pc, #112]	; (8006880 <BSP_TS_GetState+0x21c>)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	3320      	adds	r3, #32
 800681a:	443b      	add	r3, r7
 800681c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006820:	4619      	mov	r1, r3
 8006822:	4a18      	ldr	r2, [pc, #96]	; (8006884 <BSP_TS_GetState+0x220>)
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <BSP_TS_GetState+0x21c>)
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006832:	b299      	uxth	r1, r3
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	4413      	add	r3, r2
 800683c:	460a      	mov	r2, r1
 800683e:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8006840:	4a10      	ldr	r2, [pc, #64]	; (8006884 <BSP_TS_GetState+0x220>)
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006848:	b299      	uxth	r1, r3
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	4413      	add	r3, r2
 8006852:	460a      	mov	r2, r1
 8006854:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	3301      	adds	r3, #1
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4293      	cmp	r3, r2
 8006866:	f4ff af17 	bcc.w	8006698 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800686a:	7efb      	ldrb	r3, [r7, #27]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3724      	adds	r7, #36	; 0x24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd90      	pop	{r4, r7, pc}
 8006874:	2001d23c 	.word	0x2001d23c
 8006878:	2001d240 	.word	0x2001d240
 800687c:	2001c41d 	.word	0x2001c41d
 8006880:	2001d244 	.word	0x2001d244
 8006884:	2001d24c 	.word	0x2001d24c

08006888 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006892:	2003      	movs	r0, #3
 8006894:	f001 f960 	bl	8007b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006898:	2000      	movs	r0, #0
 800689a:	f000 f80d 	bl	80068b8 <HAL_InitTick>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	71fb      	strb	r3, [r7, #7]
 80068a8:	e001      	b.n	80068ae <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068aa:	f7fa feed 	bl	8001688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068ae:	79fb      	ldrb	r3, [r7, #7]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80068c4:	4b17      	ldr	r3, [pc, #92]	; (8006924 <HAL_InitTick+0x6c>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d023      	beq.n	8006914 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80068cc:	4b16      	ldr	r3, [pc, #88]	; (8006928 <HAL_InitTick+0x70>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	4b14      	ldr	r3, [pc, #80]	; (8006924 <HAL_InitTick+0x6c>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	4619      	mov	r1, r3
 80068d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068da:	fbb3 f3f1 	udiv	r3, r3, r1
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 f97b 	bl	8007bde <HAL_SYSTICK_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10f      	bne.n	800690e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b0f      	cmp	r3, #15
 80068f2:	d809      	bhi.n	8006908 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068f4:	2200      	movs	r2, #0
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068fc:	f001 f937 	bl	8007b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006900:	4a0a      	ldr	r2, [pc, #40]	; (800692c <HAL_InitTick+0x74>)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e007      	b.n	8006918 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
 800690c:	e004      	b.n	8006918 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
 8006912:	e001      	b.n	8006918 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	2001c424 	.word	0x2001c424
 8006928:	2001c2ec 	.word	0x2001c2ec
 800692c:	2001c420 	.word	0x2001c420

08006930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <HAL_IncTick+0x20>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	4b06      	ldr	r3, [pc, #24]	; (8006954 <HAL_IncTick+0x24>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4413      	add	r3, r2
 8006940:	4a04      	ldr	r2, [pc, #16]	; (8006954 <HAL_IncTick+0x24>)
 8006942:	6013      	str	r3, [r2, #0]
}
 8006944:	bf00      	nop
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2001c424 	.word	0x2001c424
 8006954:	2001d254 	.word	0x2001d254

08006958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  return uwTick;
 800695c:	4b03      	ldr	r3, [pc, #12]	; (800696c <HAL_GetTick+0x14>)
 800695e:	681b      	ldr	r3, [r3, #0]
}
 8006960:	4618      	mov	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	2001d254 	.word	0x2001d254

08006970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006978:	f7ff ffee 	bl	8006958 <HAL_GetTick>
 800697c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006988:	d005      	beq.n	8006996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <HAL_Delay+0x44>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006996:	bf00      	nop
 8006998:	f7ff ffde 	bl	8006958 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d8f7      	bhi.n	8006998 <HAL_Delay+0x28>
  {
  }
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	2001c424 	.word	0x2001c424

080069b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	609a      	str	r2, [r3, #8]
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3360      	adds	r3, #96	; 0x60
 8006a32:	461a      	mov	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <LL_ADC_SetOffset+0x44>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	03fff000 	.word	0x03fff000

08006a68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3360      	adds	r3, #96	; 0x60
 8006a76:	461a      	mov	r2, r3
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3360      	adds	r3, #96	; 0x60
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	615a      	str	r2, [r3, #20]
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3330      	adds	r3, #48	; 0x30
 8006b00:	461a      	mov	r2, r3
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	0a1b      	lsrs	r3, r3, #8
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	4413      	add	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	211f      	movs	r1, #31
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	0e9b      	lsrs	r3, r3, #26
 8006b28:	f003 011f 	and.w	r1, r3, #31
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	fa01 f303 	lsl.w	r3, r1, r3
 8006b36:	431a      	orrs	r2, r3
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3314      	adds	r3, #20
 8006b58:	461a      	mov	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	0e5b      	lsrs	r3, r3, #25
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	4413      	add	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	0d1b      	lsrs	r3, r3, #20
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	2107      	movs	r1, #7
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	401a      	ands	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	0d1b      	lsrs	r3, r3, #20
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	401a      	ands	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f003 0318 	and.w	r3, r3, #24
 8006bc2:	4908      	ldr	r1, [pc, #32]	; (8006be4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006bc4:	40d9      	lsrs	r1, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	400b      	ands	r3, r1
 8006bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	0007ffff 	.word	0x0007ffff

08006be8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006bf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6093      	str	r3, [r2, #8]
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c20:	d101      	bne.n	8006c26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006c44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c70:	d101      	bne.n	8006c76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <LL_ADC_IsEnabled+0x18>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <LL_ADC_IsEnabled+0x1a>
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d101      	bne.n	8006cc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d101      	bne.n	8006ce8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
	...

08006cf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b089      	sub	sp, #36	; 0x24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e139      	b.n	8006f86 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fa fcd5 	bl	80016d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff ff67 	bl	8006c0c <LL_ADC_IsDeepPowerDownEnabled>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d004      	beq.n	8006d4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff ff4d 	bl	8006be8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff ff82 	bl	8006c5c <LL_ADC_IsInternalRegulatorEnabled>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d115      	bne.n	8006d8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff ff66 	bl	8006c34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d68:	4b89      	ldr	r3, [pc, #548]	; (8006f90 <HAL_ADC_Init+0x298>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	099b      	lsrs	r3, r3, #6
 8006d6e:	4a89      	ldr	r2, [pc, #548]	; (8006f94 <HAL_ADC_Init+0x29c>)
 8006d70:	fba2 2303 	umull	r2, r3, r2, r3
 8006d74:	099b      	lsrs	r3, r3, #6
 8006d76:	3301      	adds	r3, #1
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006d7c:	e002      	b.n	8006d84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f9      	bne.n	8006d7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff ff64 	bl	8006c5c <LL_ADC_IsInternalRegulatorEnabled>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10d      	bne.n	8006db6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9e:	f043 0210 	orr.w	r2, r3, #16
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006daa:	f043 0201 	orr.w	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ff75 	bl	8006caa <LL_ADC_REG_IsConversionOngoing>
 8006dc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 80d2 	bne.w	8006f74 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 80ce 	bne.w	8006f74 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ddc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006de0:	f043 0202 	orr.w	r2, r3, #2
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff ff49 	bl	8006c84 <LL_ADC_IsEnabled>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d115      	bne.n	8006e24 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006df8:	4867      	ldr	r0, [pc, #412]	; (8006f98 <HAL_ADC_Init+0x2a0>)
 8006dfa:	f7ff ff43 	bl	8006c84 <LL_ADC_IsEnabled>
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4866      	ldr	r0, [pc, #408]	; (8006f9c <HAL_ADC_Init+0x2a4>)
 8006e02:	f7ff ff3f 	bl	8006c84 <LL_ADC_IsEnabled>
 8006e06:	4603      	mov	r3, r0
 8006e08:	431c      	orrs	r4, r3
 8006e0a:	4865      	ldr	r0, [pc, #404]	; (8006fa0 <HAL_ADC_Init+0x2a8>)
 8006e0c:	f7ff ff3a 	bl	8006c84 <LL_ADC_IsEnabled>
 8006e10:	4603      	mov	r3, r0
 8006e12:	4323      	orrs	r3, r4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4861      	ldr	r0, [pc, #388]	; (8006fa4 <HAL_ADC_Init+0x2ac>)
 8006e20:	f7ff fdca 	bl	80069b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7e5b      	ldrb	r3, [r3, #25]
 8006e28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006e34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006e3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e44:	4313      	orrs	r3, r2
 8006e46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d106      	bne.n	8006e60 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	3b01      	subs	r3, #1
 8006e58:	045b      	lsls	r3, r3, #17
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	4b49      	ldr	r3, [pc, #292]	; (8006fa8 <HAL_ADC_Init+0x2b0>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	69b9      	ldr	r1, [r7, #24]
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ff08 	bl	8006caa <LL_ADC_REG_IsConversionOngoing>
 8006e9a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff ff15 	bl	8006cd0 <LL_ADC_INJ_IsConversionOngoing>
 8006ea6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d140      	bne.n	8006f30 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d13d      	bne.n	8006f30 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	7e1b      	ldrb	r3, [r3, #24]
 8006ebc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006ebe:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ec6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed6:	f023 0306 	bic.w	r3, r3, #6
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	69b9      	ldr	r1, [r7, #24]
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d118      	bne.n	8006f20 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ef8:	f023 0304 	bic.w	r3, r3, #4
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f04:	4311      	orrs	r1, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006f0a:	4311      	orrs	r1, r2
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f10:	430a      	orrs	r2, r1
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0201 	orr.w	r2, r2, #1
 8006f1c:	611a      	str	r2, [r3, #16]
 8006f1e:	e007      	b.n	8006f30 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d10c      	bne.n	8006f52 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	f023 010f 	bic.w	r1, r3, #15
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	1e5a      	subs	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f50:	e007      	b.n	8006f62 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 020f 	bic.w	r2, r2, #15
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f66:	f023 0303 	bic.w	r3, r3, #3
 8006f6a:	f043 0201 	orr.w	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	659a      	str	r2, [r3, #88]	; 0x58
 8006f72:	e007      	b.n	8006f84 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f78:	f043 0210 	orr.w	r2, r3, #16
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3724      	adds	r7, #36	; 0x24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd90      	pop	{r4, r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	2001c2ec 	.word	0x2001c2ec
 8006f94:	053e2d63 	.word	0x053e2d63
 8006f98:	50040000 	.word	0x50040000
 8006f9c:	50040100 	.word	0x50040100
 8006fa0:	50040200 	.word	0x50040200
 8006fa4:	50040300 	.word	0x50040300
 8006fa8:	fff0c007 	.word	0xfff0c007

08006fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b0b6      	sub	sp, #216	; 0xd8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <HAL_ADC_ConfigChannel+0x22>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e3e3      	b.n	8007796 <HAL_ADC_ConfigChannel+0x7ea>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff fe65 	bl	8006caa <LL_ADC_REG_IsConversionOngoing>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f040 83c4 	bne.w	8007770 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b05      	cmp	r3, #5
 8006fee:	d824      	bhi.n	800703a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	3b02      	subs	r3, #2
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d81b      	bhi.n	8007032 <HAL_ADC_ConfigChannel+0x86>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <HAL_ADC_ConfigChannel+0x54>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007011 	.word	0x08007011
 8007004:	08007019 	.word	0x08007019
 8007008:	08007021 	.word	0x08007021
 800700c:	08007029 	.word	0x08007029
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	220c      	movs	r2, #12
 8007014:	605a      	str	r2, [r3, #4]
          break;
 8007016:	e011      	b.n	800703c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2212      	movs	r2, #18
 800701c:	605a      	str	r2, [r3, #4]
          break;
 800701e:	e00d      	b.n	800703c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2218      	movs	r2, #24
 8007024:	605a      	str	r2, [r3, #4]
          break;
 8007026:	e009      	b.n	800703c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800702e:	605a      	str	r2, [r3, #4]
          break;
 8007030:	e004      	b.n	800703c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2206      	movs	r2, #6
 8007036:	605a      	str	r2, [r3, #4]
          break;
 8007038:	e000      	b.n	800703c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800703a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	6859      	ldr	r1, [r3, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	f7ff fd51 	bl	8006af0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fe29 	bl	8006caa <LL_ADC_REG_IsConversionOngoing>
 8007058:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fe35 	bl	8006cd0 <LL_ADC_INJ_IsConversionOngoing>
 8007066:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800706a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 81c1 	bne.w	80073f6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 81bc 	bne.w	80073f6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007086:	d10f      	bne.n	80070a8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2200      	movs	r2, #0
 8007092:	4619      	mov	r1, r3
 8007094:	f7ff fd58 	bl	8006b48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fd12 	bl	8006aca <LL_ADC_SetSamplingTimeCommonConfig>
 80070a6:	e00e      	b.n	80070c6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	6819      	ldr	r1, [r3, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	461a      	mov	r2, r3
 80070b6:	f7ff fd47 	bl	8006b48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2100      	movs	r1, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fd02 	bl	8006aca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	695a      	ldr	r2, [r3, #20]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	08db      	lsrs	r3, r3, #3
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d00a      	beq.n	80070fe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	6919      	ldr	r1, [r3, #16]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070f8:	f7ff fc92 	bl	8006a20 <LL_ADC_SetOffset>
 80070fc:	e17b      	b.n	80073f6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff fcaf 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 800710a:	4603      	mov	r3, r0
 800710c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <HAL_ADC_ConfigChannel+0x17e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fca4 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 8007120:	4603      	mov	r3, r0
 8007122:	0e9b      	lsrs	r3, r3, #26
 8007124:	f003 021f 	and.w	r2, r3, #31
 8007128:	e01e      	b.n	8007168 <HAL_ADC_ConfigChannel+0x1bc>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff fc99 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 8007136:	4603      	mov	r3, r0
 8007138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007140:	fa93 f3a3 	rbit	r3, r3
 8007144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007148:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800714c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8007158:	2320      	movs	r3, #32
 800715a:	e004      	b.n	8007166 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800715c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007160:	fab3 f383 	clz	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <HAL_ADC_ConfigChannel+0x1d4>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	0e9b      	lsrs	r3, r3, #26
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	e018      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x206>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800718c:	fa93 f3a3 	rbit	r3, r3
 8007190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800719c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80071a4:	2320      	movs	r3, #32
 80071a6:	e004      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80071a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071ac:	fab3 f383 	clz	r3, r3
 80071b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d106      	bne.n	80071c4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fc68 	bl	8006a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2101      	movs	r1, #1
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fc4c 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <HAL_ADC_ConfigChannel+0x244>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2101      	movs	r1, #1
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fc41 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 80071e6:	4603      	mov	r3, r0
 80071e8:	0e9b      	lsrs	r3, r3, #26
 80071ea:	f003 021f 	and.w	r2, r3, #31
 80071ee:	e01e      	b.n	800722e <HAL_ADC_ConfigChannel+0x282>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2101      	movs	r1, #1
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fc36 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007206:	fa93 f3a3 	rbit	r3, r3
 800720a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800720e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800721e:	2320      	movs	r3, #32
 8007220:	e004      	b.n	800722c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8007222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007226:	fab3 f383 	clz	r3, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x29a>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	0e9b      	lsrs	r3, r3, #26
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	e018      	b.n	8007278 <HAL_ADC_ConfigChannel+0x2cc>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007252:	fa93 f3a3 	rbit	r3, r3
 8007256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800725a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800725e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800726a:	2320      	movs	r3, #32
 800726c:	e004      	b.n	8007278 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800726e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007272:	fab3 f383 	clz	r3, r3
 8007276:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007278:	429a      	cmp	r2, r3
 800727a:	d106      	bne.n	800728a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2200      	movs	r2, #0
 8007282:	2101      	movs	r1, #1
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fc05 	bl	8006a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2102      	movs	r1, #2
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff fbe9 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 8007296:	4603      	mov	r3, r0
 8007298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <HAL_ADC_ConfigChannel+0x30a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2102      	movs	r1, #2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fbde 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 80072ac:	4603      	mov	r3, r0
 80072ae:	0e9b      	lsrs	r3, r3, #26
 80072b0:	f003 021f 	and.w	r2, r3, #31
 80072b4:	e01e      	b.n	80072f4 <HAL_ADC_ConfigChannel+0x348>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2102      	movs	r1, #2
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff fbd3 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072cc:	fa93 f3a3 	rbit	r3, r3
 80072d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80072d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80072dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80072e4:	2320      	movs	r3, #32
 80072e6:	e004      	b.n	80072f2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80072e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072ec:	fab3 f383 	clz	r3, r3
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <HAL_ADC_ConfigChannel+0x360>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	0e9b      	lsrs	r3, r3, #26
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	e016      	b.n	800733a <HAL_ADC_ConfigChannel+0x38e>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007318:	fa93 f3a3 	rbit	r3, r3
 800731c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800731e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800732c:	2320      	movs	r3, #32
 800732e:	e004      	b.n	800733a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8007330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007334:	fab3 f383 	clz	r3, r3
 8007338:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800733a:	429a      	cmp	r2, r3
 800733c:	d106      	bne.n	800734c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2200      	movs	r2, #0
 8007344:	2102      	movs	r1, #2
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff fba4 	bl	8006a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2103      	movs	r1, #3
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fb88 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 8007358:	4603      	mov	r3, r0
 800735a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <HAL_ADC_ConfigChannel+0x3cc>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2103      	movs	r1, #3
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff fb7d 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 800736e:	4603      	mov	r3, r0
 8007370:	0e9b      	lsrs	r3, r3, #26
 8007372:	f003 021f 	and.w	r2, r3, #31
 8007376:	e017      	b.n	80073a8 <HAL_ADC_ConfigChannel+0x3fc>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2103      	movs	r1, #3
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fb72 	bl	8006a68 <LL_ADC_GetOffsetChannel>
 8007384:	4603      	mov	r3, r0
 8007386:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738a:	fa93 f3a3 	rbit	r3, r3
 800738e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007392:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800739a:	2320      	movs	r3, #32
 800739c:	e003      	b.n	80073a6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800739e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a0:	fab3 f383 	clz	r3, r3
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d105      	bne.n	80073c0 <HAL_ADC_ConfigChannel+0x414>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	0e9b      	lsrs	r3, r3, #26
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	e011      	b.n	80073e4 <HAL_ADC_ConfigChannel+0x438>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c8:	fa93 f3a3 	rbit	r3, r3
 80073cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80073ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80073d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80073d8:	2320      	movs	r3, #32
 80073da:	e003      	b.n	80073e4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80073dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073de:	fab3 f383 	clz	r3, r3
 80073e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d106      	bne.n	80073f6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2200      	movs	r2, #0
 80073ee:	2103      	movs	r1, #3
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fb4f 	bl	8006a94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fc42 	bl	8006c84 <LL_ADC_IsEnabled>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 8140 	bne.w	8007688 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	461a      	mov	r2, r3
 8007416:	f7ff fbc3 	bl	8006ba0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	4a8f      	ldr	r2, [pc, #572]	; (800765c <HAL_ADC_ConfigChannel+0x6b0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	f040 8131 	bne.w	8007688 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10b      	bne.n	800744e <HAL_ADC_ConfigChannel+0x4a2>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	0e9b      	lsrs	r3, r3, #26
 800743c:	3301      	adds	r3, #1
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	2b09      	cmp	r3, #9
 8007444:	bf94      	ite	ls
 8007446:	2301      	movls	r3, #1
 8007448:	2300      	movhi	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	e019      	b.n	8007482 <HAL_ADC_ConfigChannel+0x4d6>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007456:	fa93 f3a3 	rbit	r3, r3
 800745a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800745c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800745e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8007466:	2320      	movs	r3, #32
 8007468:	e003      	b.n	8007472 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800746a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800746c:	fab3 f383 	clz	r3, r3
 8007470:	b2db      	uxtb	r3, r3
 8007472:	3301      	adds	r3, #1
 8007474:	f003 031f 	and.w	r3, r3, #31
 8007478:	2b09      	cmp	r3, #9
 800747a:	bf94      	ite	ls
 800747c:	2301      	movls	r3, #1
 800747e:	2300      	movhi	r3, #0
 8007480:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007482:	2b00      	cmp	r3, #0
 8007484:	d079      	beq.n	800757a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800748e:	2b00      	cmp	r3, #0
 8007490:	d107      	bne.n	80074a2 <HAL_ADC_ConfigChannel+0x4f6>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	0e9b      	lsrs	r3, r3, #26
 8007498:	3301      	adds	r3, #1
 800749a:	069b      	lsls	r3, r3, #26
 800749c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074a0:	e015      	b.n	80074ce <HAL_ADC_ConfigChannel+0x522>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074aa:	fa93 f3a3 	rbit	r3, r3
 80074ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80074b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80074b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80074ba:	2320      	movs	r3, #32
 80074bc:	e003      	b.n	80074c6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80074be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074c0:	fab3 f383 	clz	r3, r3
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	3301      	adds	r3, #1
 80074c8:	069b      	lsls	r3, r3, #26
 80074ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <HAL_ADC_ConfigChannel+0x542>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	0e9b      	lsrs	r3, r3, #26
 80074e0:	3301      	adds	r3, #1
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	2101      	movs	r1, #1
 80074e8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ec:	e017      	b.n	800751e <HAL_ADC_ConfigChannel+0x572>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f6:	fa93 f3a3 	rbit	r3, r3
 80074fa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80074fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8007506:	2320      	movs	r3, #32
 8007508:	e003      	b.n	8007512 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800750a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750c:	fab3 f383 	clz	r3, r3
 8007510:	b2db      	uxtb	r3, r3
 8007512:	3301      	adds	r3, #1
 8007514:	f003 031f 	and.w	r3, r3, #31
 8007518:	2101      	movs	r1, #1
 800751a:	fa01 f303 	lsl.w	r3, r1, r3
 800751e:	ea42 0103 	orr.w	r1, r2, r3
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <HAL_ADC_ConfigChannel+0x598>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	0e9b      	lsrs	r3, r3, #26
 8007534:	3301      	adds	r3, #1
 8007536:	f003 021f 	and.w	r2, r3, #31
 800753a:	4613      	mov	r3, r2
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	4413      	add	r3, r2
 8007540:	051b      	lsls	r3, r3, #20
 8007542:	e018      	b.n	8007576 <HAL_ADC_ConfigChannel+0x5ca>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	fa93 f3a3 	rbit	r3, r3
 8007550:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007554:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800755c:	2320      	movs	r3, #32
 800755e:	e003      	b.n	8007568 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8007560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007562:	fab3 f383 	clz	r3, r3
 8007566:	b2db      	uxtb	r3, r3
 8007568:	3301      	adds	r3, #1
 800756a:	f003 021f 	and.w	r2, r3, #31
 800756e:	4613      	mov	r3, r2
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	4413      	add	r3, r2
 8007574:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007576:	430b      	orrs	r3, r1
 8007578:	e081      	b.n	800767e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <HAL_ADC_ConfigChannel+0x5ea>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	0e9b      	lsrs	r3, r3, #26
 800758c:	3301      	adds	r3, #1
 800758e:	069b      	lsls	r3, r3, #26
 8007590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007594:	e015      	b.n	80075c2 <HAL_ADC_ConfigChannel+0x616>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	fa93 f3a3 	rbit	r3, r3
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80075ae:	2320      	movs	r3, #32
 80075b0:	e003      	b.n	80075ba <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	fab3 f383 	clz	r3, r3
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	3301      	adds	r3, #1
 80075bc:	069b      	lsls	r3, r3, #26
 80075be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <HAL_ADC_ConfigChannel+0x636>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	0e9b      	lsrs	r3, r3, #26
 80075d4:	3301      	adds	r3, #1
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	2101      	movs	r1, #1
 80075dc:	fa01 f303 	lsl.w	r3, r1, r3
 80075e0:	e017      	b.n	8007612 <HAL_ADC_ConfigChannel+0x666>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	fa93 f3a3 	rbit	r3, r3
 80075ee:	61fb      	str	r3, [r7, #28]
  return result;
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80075fa:	2320      	movs	r3, #32
 80075fc:	e003      	b.n	8007606 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	fab3 f383 	clz	r3, r3
 8007604:	b2db      	uxtb	r3, r3
 8007606:	3301      	adds	r3, #1
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	2101      	movs	r1, #1
 800760e:	fa01 f303 	lsl.w	r3, r1, r3
 8007612:	ea42 0103 	orr.w	r1, r2, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10d      	bne.n	800763e <HAL_ADC_ConfigChannel+0x692>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	0e9b      	lsrs	r3, r3, #26
 8007628:	3301      	adds	r3, #1
 800762a:	f003 021f 	and.w	r2, r3, #31
 800762e:	4613      	mov	r3, r2
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	4413      	add	r3, r2
 8007634:	3b1e      	subs	r3, #30
 8007636:	051b      	lsls	r3, r3, #20
 8007638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800763c:	e01e      	b.n	800767c <HAL_ADC_ConfigChannel+0x6d0>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	fa93 f3a3 	rbit	r3, r3
 800764a:	613b      	str	r3, [r7, #16]
  return result;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8007656:	2320      	movs	r3, #32
 8007658:	e006      	b.n	8007668 <HAL_ADC_ConfigChannel+0x6bc>
 800765a:	bf00      	nop
 800765c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	fab3 f383 	clz	r3, r3
 8007666:	b2db      	uxtb	r3, r3
 8007668:	3301      	adds	r3, #1
 800766a:	f003 021f 	and.w	r2, r3, #31
 800766e:	4613      	mov	r3, r2
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	4413      	add	r3, r2
 8007674:	3b1e      	subs	r3, #30
 8007676:	051b      	lsls	r3, r3, #20
 8007678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800767c:	430b      	orrs	r3, r1
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	6892      	ldr	r2, [r2, #8]
 8007682:	4619      	mov	r1, r3
 8007684:	f7ff fa60 	bl	8006b48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	4b44      	ldr	r3, [pc, #272]	; (80077a0 <HAL_ADC_ConfigChannel+0x7f4>)
 800768e:	4013      	ands	r3, r2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d07a      	beq.n	800778a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007694:	4843      	ldr	r0, [pc, #268]	; (80077a4 <HAL_ADC_ConfigChannel+0x7f8>)
 8007696:	f7ff f9b5 	bl	8006a04 <LL_ADC_GetCommonPathInternalCh>
 800769a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a41      	ldr	r2, [pc, #260]	; (80077a8 <HAL_ADC_ConfigChannel+0x7fc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d12c      	bne.n	8007702 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80076a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d126      	bne.n	8007702 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a3c      	ldr	r2, [pc, #240]	; (80077ac <HAL_ADC_ConfigChannel+0x800>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <HAL_ADC_ConfigChannel+0x71c>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a3b      	ldr	r2, [pc, #236]	; (80077b0 <HAL_ADC_ConfigChannel+0x804>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d15d      	bne.n	8007784 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076d0:	4619      	mov	r1, r3
 80076d2:	4834      	ldr	r0, [pc, #208]	; (80077a4 <HAL_ADC_ConfigChannel+0x7f8>)
 80076d4:	f7ff f983 	bl	80069de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80076d8:	4b36      	ldr	r3, [pc, #216]	; (80077b4 <HAL_ADC_ConfigChannel+0x808>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	099b      	lsrs	r3, r3, #6
 80076de:	4a36      	ldr	r2, [pc, #216]	; (80077b8 <HAL_ADC_ConfigChannel+0x80c>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	099b      	lsrs	r3, r3, #6
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	4613      	mov	r3, r2
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80076f2:	e002      	b.n	80076fa <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f9      	bne.n	80076f4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007700:	e040      	b.n	8007784 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a2d      	ldr	r2, [pc, #180]	; (80077bc <HAL_ADC_ConfigChannel+0x810>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d118      	bne.n	800773e <HAL_ADC_ConfigChannel+0x792>
 800770c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d112      	bne.n	800773e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a23      	ldr	r2, [pc, #140]	; (80077ac <HAL_ADC_ConfigChannel+0x800>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_ADC_ConfigChannel+0x780>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <HAL_ADC_ConfigChannel+0x804>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d12d      	bne.n	8007788 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800772c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007734:	4619      	mov	r1, r3
 8007736:	481b      	ldr	r0, [pc, #108]	; (80077a4 <HAL_ADC_ConfigChannel+0x7f8>)
 8007738:	f7ff f951 	bl	80069de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800773c:	e024      	b.n	8007788 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <HAL_ADC_ConfigChannel+0x814>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d120      	bne.n	800778a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800774c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11a      	bne.n	800778a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a14      	ldr	r2, [pc, #80]	; (80077ac <HAL_ADC_ConfigChannel+0x800>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d115      	bne.n	800778a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800775e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007766:	4619      	mov	r1, r3
 8007768:	480e      	ldr	r0, [pc, #56]	; (80077a4 <HAL_ADC_ConfigChannel+0x7f8>)
 800776a:	f7ff f938 	bl	80069de <LL_ADC_SetCommonPathInternalCh>
 800776e:	e00c      	b.n	800778a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007774:	f043 0220 	orr.w	r2, r3, #32
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007782:	e002      	b.n	800778a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007784:	bf00      	nop
 8007786:	e000      	b.n	800778a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007788:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007792:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007796:	4618      	mov	r0, r3
 8007798:	37d8      	adds	r7, #216	; 0xd8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	80080000 	.word	0x80080000
 80077a4:	50040300 	.word	0x50040300
 80077a8:	c7520000 	.word	0xc7520000
 80077ac:	50040000 	.word	0x50040000
 80077b0:	50040200 	.word	0x50040200
 80077b4:	2001c2ec 	.word	0x2001c2ec
 80077b8:	053e2d63 	.word	0x053e2d63
 80077bc:	cb840000 	.word	0xcb840000
 80077c0:	80000001 	.word	0x80000001

080077c4 <LL_ADC_IsEnabled>:
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <LL_ADC_IsEnabled+0x18>
 80077d8:	2301      	movs	r3, #1
 80077da:	e000      	b.n	80077de <LL_ADC_IsEnabled+0x1a>
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <LL_ADC_REG_IsConversionOngoing>:
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d101      	bne.n	8007802 <LL_ADC_REG_IsConversionOngoing+0x18>
 80077fe:	2301      	movs	r3, #1
 8007800:	e000      	b.n	8007804 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b0a1      	sub	sp, #132	; 0x84
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800782a:	2302      	movs	r3, #2
 800782c:	e093      	b.n	8007956 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007836:	2300      	movs	r3, #0
 8007838:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800783a:	2300      	movs	r3, #0
 800783c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a47      	ldr	r2, [pc, #284]	; (8007960 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d102      	bne.n	800784e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007848:	4b46      	ldr	r3, [pc, #280]	; (8007964 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10b      	bne.n	8007870 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e072      	b.n	8007956 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff ffb9 	bl	80077ea <LL_ADC_REG_IsConversionOngoing>
 8007878:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff ffb3 	bl	80077ea <LL_ADC_REG_IsConversionOngoing>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d154      	bne.n	8007934 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800788a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788c:	2b00      	cmp	r3, #0
 800788e:	d151      	bne.n	8007934 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007890:	4b35      	ldr	r3, [pc, #212]	; (8007968 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8007892:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d02c      	beq.n	80078f6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800789c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	6859      	ldr	r1, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078ae:	035b      	lsls	r3, r3, #13
 80078b0:	430b      	orrs	r3, r1
 80078b2:	431a      	orrs	r2, r3
 80078b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078b8:	4829      	ldr	r0, [pc, #164]	; (8007960 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80078ba:	f7ff ff83 	bl	80077c4 <LL_ADC_IsEnabled>
 80078be:	4604      	mov	r4, r0
 80078c0:	4828      	ldr	r0, [pc, #160]	; (8007964 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80078c2:	f7ff ff7f 	bl	80077c4 <LL_ADC_IsEnabled>
 80078c6:	4603      	mov	r3, r0
 80078c8:	431c      	orrs	r4, r3
 80078ca:	4828      	ldr	r0, [pc, #160]	; (800796c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80078cc:	f7ff ff7a 	bl	80077c4 <LL_ADC_IsEnabled>
 80078d0:	4603      	mov	r3, r0
 80078d2:	4323      	orrs	r3, r4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d137      	bne.n	8007948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80078d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80078e0:	f023 030f 	bic.w	r3, r3, #15
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	6811      	ldr	r1, [r2, #0]
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	6892      	ldr	r2, [r2, #8]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	431a      	orrs	r2, r3
 80078f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80078f4:	e028      	b.n	8007948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80078f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007900:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007902:	4817      	ldr	r0, [pc, #92]	; (8007960 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8007904:	f7ff ff5e 	bl	80077c4 <LL_ADC_IsEnabled>
 8007908:	4604      	mov	r4, r0
 800790a:	4816      	ldr	r0, [pc, #88]	; (8007964 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800790c:	f7ff ff5a 	bl	80077c4 <LL_ADC_IsEnabled>
 8007910:	4603      	mov	r3, r0
 8007912:	431c      	orrs	r4, r3
 8007914:	4815      	ldr	r0, [pc, #84]	; (800796c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8007916:	f7ff ff55 	bl	80077c4 <LL_ADC_IsEnabled>
 800791a:	4603      	mov	r3, r0
 800791c:	4323      	orrs	r3, r4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d112      	bne.n	8007948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800792a:	f023 030f 	bic.w	r3, r3, #15
 800792e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007930:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007932:	e009      	b.n	8007948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007938:	f043 0220 	orr.w	r2, r3, #32
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007946:	e000      	b.n	800794a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007948:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007952:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007956:	4618      	mov	r0, r3
 8007958:	3784      	adds	r7, #132	; 0x84
 800795a:	46bd      	mov	sp, r7
 800795c:	bd90      	pop	{r4, r7, pc}
 800795e:	bf00      	nop
 8007960:	50040000 	.word	0x50040000
 8007964:	50040100 	.word	0x50040100
 8007968:	50040300 	.word	0x50040300
 800796c:	50040200 	.word	0x50040200

08007970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <__NVIC_SetPriorityGrouping+0x44>)
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800798c:	4013      	ands	r3, r2
 800798e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800799c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079a2:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <__NVIC_SetPriorityGrouping+0x44>)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	60d3      	str	r3, [r2, #12]
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	e000ed00 	.word	0xe000ed00

080079b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079bc:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <__NVIC_GetPriorityGrouping+0x18>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	0a1b      	lsrs	r3, r3, #8
 80079c2:	f003 0307 	and.w	r3, r3, #7
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	e000ed00 	.word	0xe000ed00

080079d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	db0b      	blt.n	80079fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	f003 021f 	and.w	r2, r3, #31
 80079ec:	4907      	ldr	r1, [pc, #28]	; (8007a0c <__NVIC_EnableIRQ+0x38>)
 80079ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	2001      	movs	r0, #1
 80079f6:	fa00 f202 	lsl.w	r2, r0, r2
 80079fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	e000e100 	.word	0xe000e100

08007a10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	db12      	blt.n	8007a48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	f003 021f 	and.w	r2, r3, #31
 8007a28:	490a      	ldr	r1, [pc, #40]	; (8007a54 <__NVIC_DisableIRQ+0x44>)
 8007a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	2001      	movs	r0, #1
 8007a32:	fa00 f202 	lsl.w	r2, r0, r2
 8007a36:	3320      	adds	r3, #32
 8007a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a3c:	f3bf 8f4f 	dsb	sy
}
 8007a40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a42:	f3bf 8f6f 	isb	sy
}
 8007a46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	e000e100 	.word	0xe000e100

08007a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	db0a      	blt.n	8007a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	490c      	ldr	r1, [pc, #48]	; (8007aa4 <__NVIC_SetPriority+0x4c>)
 8007a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a76:	0112      	lsls	r2, r2, #4
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a80:	e00a      	b.n	8007a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	4908      	ldr	r1, [pc, #32]	; (8007aa8 <__NVIC_SetPriority+0x50>)
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	3b04      	subs	r3, #4
 8007a90:	0112      	lsls	r2, r2, #4
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	440b      	add	r3, r1
 8007a96:	761a      	strb	r2, [r3, #24]
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	e000e100 	.word	0xe000e100
 8007aa8:	e000ed00 	.word	0xe000ed00

08007aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b089      	sub	sp, #36	; 0x24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f1c3 0307 	rsb	r3, r3, #7
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	bf28      	it	cs
 8007aca:	2304      	movcs	r3, #4
 8007acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	2b06      	cmp	r3, #6
 8007ad4:	d902      	bls.n	8007adc <NVIC_EncodePriority+0x30>
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3b03      	subs	r3, #3
 8007ada:	e000      	b.n	8007ade <NVIC_EncodePriority+0x32>
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	43da      	mvns	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	401a      	ands	r2, r3
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	fa01 f303 	lsl.w	r3, r1, r3
 8007afe:	43d9      	mvns	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b04:	4313      	orrs	r3, r2
         );
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3724      	adds	r7, #36	; 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b24:	d301      	bcc.n	8007b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b26:	2301      	movs	r3, #1
 8007b28:	e00f      	b.n	8007b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b2a:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <SysTick_Config+0x40>)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b32:	210f      	movs	r1, #15
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b38:	f7ff ff8e 	bl	8007a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <SysTick_Config+0x40>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b42:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <SysTick_Config+0x40>)
 8007b44:	2207      	movs	r2, #7
 8007b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	e000e010 	.word	0xe000e010

08007b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ff05 	bl	8007970 <__NVIC_SetPriorityGrouping>
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b086      	sub	sp, #24
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	4603      	mov	r3, r0
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b80:	f7ff ff1a 	bl	80079b8 <__NVIC_GetPriorityGrouping>
 8007b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	6978      	ldr	r0, [r7, #20]
 8007b8c:	f7ff ff8e 	bl	8007aac <NVIC_EncodePriority>
 8007b90:	4602      	mov	r2, r0
 8007b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff5d 	bl	8007a58 <__NVIC_SetPriority>
}
 8007b9e:	bf00      	nop
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	4603      	mov	r3, r0
 8007bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff ff0d 	bl	80079d4 <__NVIC_EnableIRQ>
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	4603      	mov	r3, r0
 8007bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff ff1d 	bl	8007a10 <__NVIC_DisableIRQ>
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff ff94 	bl	8007b14 <SysTick_Config>
 8007bec:	4603      	mov	r3, r0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e075      	b.n	8007cf6 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7f9 fe26 	bl	8001870 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c3a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	4b2a      	ldr	r3, [pc, #168]	; (8007d00 <HAL_DCMI_Init+0x108>)
 8007c56:	400b      	ands	r3, r1
 8007c58:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8007c6e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8007c7a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8007c86:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007c92:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8007c9e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	d112      	bne.n	8007cd6 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7f1b      	ldrb	r3, [r3, #28]
 8007cb4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7f5b      	ldrb	r3, [r3, #29]
 8007cba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007cbc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	7f9b      	ldrb	r3, [r3, #30]
 8007cc2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8007cc4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	7fdb      	ldrb	r3, [r3, #31]
 8007ccc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8007cd2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007cd4:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 021f 	orr.w	r2, r2, #31
 8007ce4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	ffe0f007 	.word	0xffe0f007

08007d04 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e0ac      	b.n	8007e70 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 f8b2 	bl	8007e84 <DFSDM_GetChannelFromInstance>
 8007d20:	4603      	mov	r3, r0
 8007d22:	4a55      	ldr	r2, [pc, #340]	; (8007e78 <HAL_DFSDM_ChannelInit+0x174>)
 8007d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e09f      	b.n	8007e70 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7f9 fe1d 	bl	8001970 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8007d36:	4b51      	ldr	r3, [pc, #324]	; (8007e7c <HAL_DFSDM_ChannelInit+0x178>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	4a4f      	ldr	r2, [pc, #316]	; (8007e7c <HAL_DFSDM_ChannelInit+0x178>)
 8007d3e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8007d40:	4b4e      	ldr	r3, [pc, #312]	; (8007e7c <HAL_DFSDM_ChannelInit+0x178>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d125      	bne.n	8007d94 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007d48:	4b4d      	ldr	r3, [pc, #308]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a4c      	ldr	r2, [pc, #304]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d52:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007d54:	4b4a      	ldr	r3, [pc, #296]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	4948      	ldr	r1, [pc, #288]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007d62:	4b47      	ldr	r3, [pc, #284]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a46      	ldr	r2, [pc, #280]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d68:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8007d6c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	791b      	ldrb	r3, [r3, #4]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d108      	bne.n	8007d88 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8007d76:	4b42      	ldr	r3, [pc, #264]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	041b      	lsls	r3, r3, #16
 8007d82:	493f      	ldr	r1, [pc, #252]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007d88:	4b3d      	ldr	r3, [pc, #244]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a3c      	ldr	r2, [pc, #240]	; (8007e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d92:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007da2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007db2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007db8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 020f 	bic.w	r2, r2, #15
 8007dd0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6819      	ldr	r1, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8007df8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6899      	ldr	r1, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f002 0207 	and.w	r2, r2, #7
 8007e24:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6859      	ldr	r1, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e50:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f810 	bl	8007e84 <DFSDM_GetChannelFromInstance>
 8007e64:	4602      	mov	r2, r0
 8007e66:	4904      	ldr	r1, [pc, #16]	; (8007e78 <HAL_DFSDM_ChannelInit+0x174>)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	2001d25c 	.word	0x2001d25c
 8007e7c:	2001d258 	.word	0x2001d258
 8007e80:	40016000 	.word	0x40016000

08007e84 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	; (8007f00 <DFSDM_GetChannelFromInstance+0x7c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d102      	bne.n	8007e9a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	e02b      	b.n	8007ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a19      	ldr	r2, [pc, #100]	; (8007f04 <DFSDM_GetChannelFromInstance+0x80>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d102      	bne.n	8007ea8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	e024      	b.n	8007ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <DFSDM_GetChannelFromInstance+0x84>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d102      	bne.n	8007eb6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e01d      	b.n	8007ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a14      	ldr	r2, [pc, #80]	; (8007f0c <DFSDM_GetChannelFromInstance+0x88>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d102      	bne.n	8007ec4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e016      	b.n	8007ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <DFSDM_GetChannelFromInstance+0x8c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d102      	bne.n	8007ed2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8007ecc:	2305      	movs	r3, #5
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e00f      	b.n	8007ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a0f      	ldr	r2, [pc, #60]	; (8007f14 <DFSDM_GetChannelFromInstance+0x90>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d102      	bne.n	8007ee0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8007eda:	2306      	movs	r3, #6
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e008      	b.n	8007ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a0d      	ldr	r2, [pc, #52]	; (8007f18 <DFSDM_GetChannelFromInstance+0x94>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d102      	bne.n	8007eee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8007ee8:	2307      	movs	r3, #7
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	e001      	b.n	8007ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	40016000 	.word	0x40016000
 8007f04:	40016020 	.word	0x40016020
 8007f08:	40016040 	.word	0x40016040
 8007f0c:	40016080 	.word	0x40016080
 8007f10:	400160a0 	.word	0x400160a0
 8007f14:	400160c0 	.word	0x400160c0
 8007f18:	400160e0 	.word	0x400160e0

08007f1c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e098      	b.n	8008060 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	4b4d      	ldr	r3, [pc, #308]	; (800806c <HAL_DMA_Init+0x150>)
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d80f      	bhi.n	8007f5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4b4b      	ldr	r3, [pc, #300]	; (8008070 <HAL_DMA_Init+0x154>)
 8007f42:	4413      	add	r3, r2
 8007f44:	4a4b      	ldr	r2, [pc, #300]	; (8008074 <HAL_DMA_Init+0x158>)
 8007f46:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4a:	091b      	lsrs	r3, r3, #4
 8007f4c:	009a      	lsls	r2, r3, #2
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a48      	ldr	r2, [pc, #288]	; (8008078 <HAL_DMA_Init+0x15c>)
 8007f56:	641a      	str	r2, [r3, #64]	; 0x40
 8007f58:	e00e      	b.n	8007f78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4b46      	ldr	r3, [pc, #280]	; (800807c <HAL_DMA_Init+0x160>)
 8007f62:	4413      	add	r3, r2
 8007f64:	4a43      	ldr	r2, [pc, #268]	; (8008074 <HAL_DMA_Init+0x158>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	091b      	lsrs	r3, r3, #4
 8007f6c:	009a      	lsls	r2, r3, #2
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a42      	ldr	r2, [pc, #264]	; (8008080 <HAL_DMA_Init+0x164>)
 8007f76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fd2:	d039      	beq.n	8008048 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	4a27      	ldr	r2, [pc, #156]	; (8008078 <HAL_DMA_Init+0x15c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d11a      	bne.n	8008014 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007fde:	4b29      	ldr	r3, [pc, #164]	; (8008084 <HAL_DMA_Init+0x168>)
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe6:	f003 031c 	and.w	r3, r3, #28
 8007fea:	210f      	movs	r1, #15
 8007fec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	4924      	ldr	r1, [pc, #144]	; (8008084 <HAL_DMA_Init+0x168>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007ff8:	4b22      	ldr	r3, [pc, #136]	; (8008084 <HAL_DMA_Init+0x168>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6859      	ldr	r1, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008004:	f003 031c 	and.w	r3, r3, #28
 8008008:	fa01 f303 	lsl.w	r3, r1, r3
 800800c:	491d      	ldr	r1, [pc, #116]	; (8008084 <HAL_DMA_Init+0x168>)
 800800e:	4313      	orrs	r3, r2
 8008010:	600b      	str	r3, [r1, #0]
 8008012:	e019      	b.n	8008048 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008014:	4b1c      	ldr	r3, [pc, #112]	; (8008088 <HAL_DMA_Init+0x16c>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801c:	f003 031c 	and.w	r3, r3, #28
 8008020:	210f      	movs	r1, #15
 8008022:	fa01 f303 	lsl.w	r3, r1, r3
 8008026:	43db      	mvns	r3, r3
 8008028:	4917      	ldr	r1, [pc, #92]	; (8008088 <HAL_DMA_Init+0x16c>)
 800802a:	4013      	ands	r3, r2
 800802c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800802e:	4b16      	ldr	r3, [pc, #88]	; (8008088 <HAL_DMA_Init+0x16c>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6859      	ldr	r1, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803a:	f003 031c 	and.w	r3, r3, #28
 800803e:	fa01 f303 	lsl.w	r3, r1, r3
 8008042:	4911      	ldr	r1, [pc, #68]	; (8008088 <HAL_DMA_Init+0x16c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	40020407 	.word	0x40020407
 8008070:	bffdfff8 	.word	0xbffdfff8
 8008074:	cccccccd 	.word	0xcccccccd
 8008078:	40020000 	.word	0x40020000
 800807c:	bffdfbf8 	.word	0xbffdfbf8
 8008080:	40020400 	.word	0x40020400
 8008084:	400200a8 	.word	0x400200a8
 8008088:	400204a8 	.word	0x400204a8

0800808c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e072      	b.n	8008184 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0201 	bic.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	4b36      	ldr	r3, [pc, #216]	; (8008190 <HAL_DMA_DeInit+0x104>)
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d80f      	bhi.n	80080da <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	4b34      	ldr	r3, [pc, #208]	; (8008194 <HAL_DMA_DeInit+0x108>)
 80080c2:	4413      	add	r3, r2
 80080c4:	4a34      	ldr	r2, [pc, #208]	; (8008198 <HAL_DMA_DeInit+0x10c>)
 80080c6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ca:	091b      	lsrs	r3, r3, #4
 80080cc:	009a      	lsls	r2, r3, #2
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a31      	ldr	r2, [pc, #196]	; (800819c <HAL_DMA_DeInit+0x110>)
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40
 80080d8:	e00e      	b.n	80080f8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	4b2f      	ldr	r3, [pc, #188]	; (80081a0 <HAL_DMA_DeInit+0x114>)
 80080e2:	4413      	add	r3, r2
 80080e4:	4a2c      	ldr	r2, [pc, #176]	; (8008198 <HAL_DMA_DeInit+0x10c>)
 80080e6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	009a      	lsls	r2, r3, #2
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a2b      	ldr	r2, [pc, #172]	; (80081a4 <HAL_DMA_DeInit+0x118>)
 80080f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008104:	f003 021c 	and.w	r2, r3, #28
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f202 	lsl.w	r2, r1, r2
 8008112:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	4a20      	ldr	r2, [pc, #128]	; (800819c <HAL_DMA_DeInit+0x110>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d10d      	bne.n	800813a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800811e:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <HAL_DMA_DeInit+0x11c>)
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	f003 031c 	and.w	r3, r3, #28
 800812a:	210f      	movs	r1, #15
 800812c:	fa01 f303 	lsl.w	r3, r1, r3
 8008130:	43db      	mvns	r3, r3
 8008132:	491d      	ldr	r1, [pc, #116]	; (80081a8 <HAL_DMA_DeInit+0x11c>)
 8008134:	4013      	ands	r3, r2
 8008136:	600b      	str	r3, [r1, #0]
 8008138:	e00c      	b.n	8008154 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800813a:	4b1c      	ldr	r3, [pc, #112]	; (80081ac <HAL_DMA_DeInit+0x120>)
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008142:	f003 031c 	and.w	r3, r3, #28
 8008146:	210f      	movs	r1, #15
 8008148:	fa01 f303 	lsl.w	r3, r1, r3
 800814c:	43db      	mvns	r3, r3
 800814e:	4917      	ldr	r1, [pc, #92]	; (80081ac <HAL_DMA_DeInit+0x120>)
 8008150:	4013      	ands	r3, r2
 8008152:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	40020407 	.word	0x40020407
 8008194:	bffdfff8 	.word	0xbffdfff8
 8008198:	cccccccd 	.word	0xcccccccd
 800819c:	40020000 	.word	0x40020000
 80081a0:	bffdfbf8 	.word	0xbffdfbf8
 80081a4:	40020400 	.word	0x40020400
 80081a8:	400200a8 	.word	0x400200a8
 80081ac:	400204a8 	.word	0x400204a8

080081b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081be:	e166      	b.n	800848e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	2101      	movs	r1, #1
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	fa01 f303 	lsl.w	r3, r1, r3
 80081cc:	4013      	ands	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 8158 	beq.w	8008488 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d005      	beq.n	80081f0 <HAL_GPIO_Init+0x40>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f003 0303 	and.w	r3, r3, #3
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d130      	bne.n	8008252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	2203      	movs	r2, #3
 80081fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008200:	43db      	mvns	r3, r3
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4013      	ands	r3, r2
 8008206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008226:	2201      	movs	r2, #1
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	43db      	mvns	r3, r3
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4013      	ands	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	091b      	lsrs	r3, r3, #4
 800823c:	f003 0201 	and.w	r2, r3, #1
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	fa02 f303 	lsl.w	r3, r2, r3
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	2b03      	cmp	r3, #3
 800825c:	d017      	beq.n	800828e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	2203      	movs	r2, #3
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	43db      	mvns	r3, r3
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4013      	ands	r3, r2
 8008274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	fa02 f303 	lsl.w	r3, r2, r3
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d123      	bne.n	80082e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	08da      	lsrs	r2, r3, #3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3208      	adds	r2, #8
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	220f      	movs	r2, #15
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	43db      	mvns	r3, r3
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	4013      	ands	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	08da      	lsrs	r2, r3, #3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3208      	adds	r2, #8
 80082dc:	6939      	ldr	r1, [r7, #16]
 80082de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	2203      	movs	r2, #3
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4013      	ands	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f003 0203 	and.w	r2, r3, #3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	fa02 f303 	lsl.w	r3, r2, r3
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 80b2 	beq.w	8008488 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008324:	4b61      	ldr	r3, [pc, #388]	; (80084ac <HAL_GPIO_Init+0x2fc>)
 8008326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008328:	4a60      	ldr	r2, [pc, #384]	; (80084ac <HAL_GPIO_Init+0x2fc>)
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6613      	str	r3, [r2, #96]	; 0x60
 8008330:	4b5e      	ldr	r3, [pc, #376]	; (80084ac <HAL_GPIO_Init+0x2fc>)
 8008332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	60bb      	str	r3, [r7, #8]
 800833a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800833c:	4a5c      	ldr	r2, [pc, #368]	; (80084b0 <HAL_GPIO_Init+0x300>)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	089b      	lsrs	r3, r3, #2
 8008342:	3302      	adds	r3, #2
 8008344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	220f      	movs	r2, #15
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	43db      	mvns	r3, r3
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4013      	ands	r3, r2
 800835e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008366:	d02b      	beq.n	80083c0 <HAL_GPIO_Init+0x210>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a52      	ldr	r2, [pc, #328]	; (80084b4 <HAL_GPIO_Init+0x304>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d025      	beq.n	80083bc <HAL_GPIO_Init+0x20c>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a51      	ldr	r2, [pc, #324]	; (80084b8 <HAL_GPIO_Init+0x308>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d01f      	beq.n	80083b8 <HAL_GPIO_Init+0x208>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a50      	ldr	r2, [pc, #320]	; (80084bc <HAL_GPIO_Init+0x30c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d019      	beq.n	80083b4 <HAL_GPIO_Init+0x204>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a4f      	ldr	r2, [pc, #316]	; (80084c0 <HAL_GPIO_Init+0x310>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d013      	beq.n	80083b0 <HAL_GPIO_Init+0x200>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a4e      	ldr	r2, [pc, #312]	; (80084c4 <HAL_GPIO_Init+0x314>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00d      	beq.n	80083ac <HAL_GPIO_Init+0x1fc>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a4d      	ldr	r2, [pc, #308]	; (80084c8 <HAL_GPIO_Init+0x318>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d007      	beq.n	80083a8 <HAL_GPIO_Init+0x1f8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a4c      	ldr	r2, [pc, #304]	; (80084cc <HAL_GPIO_Init+0x31c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d101      	bne.n	80083a4 <HAL_GPIO_Init+0x1f4>
 80083a0:	2307      	movs	r3, #7
 80083a2:	e00e      	b.n	80083c2 <HAL_GPIO_Init+0x212>
 80083a4:	2308      	movs	r3, #8
 80083a6:	e00c      	b.n	80083c2 <HAL_GPIO_Init+0x212>
 80083a8:	2306      	movs	r3, #6
 80083aa:	e00a      	b.n	80083c2 <HAL_GPIO_Init+0x212>
 80083ac:	2305      	movs	r3, #5
 80083ae:	e008      	b.n	80083c2 <HAL_GPIO_Init+0x212>
 80083b0:	2304      	movs	r3, #4
 80083b2:	e006      	b.n	80083c2 <HAL_GPIO_Init+0x212>
 80083b4:	2303      	movs	r3, #3
 80083b6:	e004      	b.n	80083c2 <HAL_GPIO_Init+0x212>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e002      	b.n	80083c2 <HAL_GPIO_Init+0x212>
 80083bc:	2301      	movs	r3, #1
 80083be:	e000      	b.n	80083c2 <HAL_GPIO_Init+0x212>
 80083c0:	2300      	movs	r3, #0
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	f002 0203 	and.w	r2, r2, #3
 80083c8:	0092      	lsls	r2, r2, #2
 80083ca:	4093      	lsls	r3, r2
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80083d2:	4937      	ldr	r1, [pc, #220]	; (80084b0 <HAL_GPIO_Init+0x300>)
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	089b      	lsrs	r3, r3, #2
 80083d8:	3302      	adds	r3, #2
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083e0:	4b3b      	ldr	r3, [pc, #236]	; (80084d0 <HAL_GPIO_Init+0x320>)
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4013      	ands	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008404:	4a32      	ldr	r2, [pc, #200]	; (80084d0 <HAL_GPIO_Init+0x320>)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800840a:	4b31      	ldr	r3, [pc, #196]	; (80084d0 <HAL_GPIO_Init+0x320>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	43db      	mvns	r3, r3
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	4013      	ands	r3, r2
 8008418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4313      	orrs	r3, r2
 800842c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800842e:	4a28      	ldr	r2, [pc, #160]	; (80084d0 <HAL_GPIO_Init+0x320>)
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008434:	4b26      	ldr	r3, [pc, #152]	; (80084d0 <HAL_GPIO_Init+0x320>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	43db      	mvns	r3, r3
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4013      	ands	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008458:	4a1d      	ldr	r2, [pc, #116]	; (80084d0 <HAL_GPIO_Init+0x320>)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800845e:	4b1c      	ldr	r3, [pc, #112]	; (80084d0 <HAL_GPIO_Init+0x320>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	43db      	mvns	r3, r3
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4013      	ands	r3, r2
 800846c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008482:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <HAL_GPIO_Init+0x320>)
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	3301      	adds	r3, #1
 800848c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	f47f ae91 	bne.w	80081c0 <HAL_GPIO_Init+0x10>
  }
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	371c      	adds	r7, #28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	40021000 	.word	0x40021000
 80084b0:	40010000 	.word	0x40010000
 80084b4:	48000400 	.word	0x48000400
 80084b8:	48000800 	.word	0x48000800
 80084bc:	48000c00 	.word	0x48000c00
 80084c0:	48001000 	.word	0x48001000
 80084c4:	48001400 	.word	0x48001400
 80084c8:	48001800 	.word	0x48001800
 80084cc:	48001c00 	.word	0x48001c00
 80084d0:	40010400 	.word	0x40010400

080084d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80084de:	2300      	movs	r3, #0
 80084e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80084e2:	e0c9      	b.n	8008678 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80084e4:	2201      	movs	r2, #1
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	4013      	ands	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80bc 	beq.w	8008672 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80084fa:	4a66      	ldr	r2, [pc, #408]	; (8008694 <HAL_GPIO_DeInit+0x1c0>)
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	089b      	lsrs	r3, r3, #2
 8008500:	3302      	adds	r3, #2
 8008502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008506:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	220f      	movs	r2, #15
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4013      	ands	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008522:	d02b      	beq.n	800857c <HAL_GPIO_DeInit+0xa8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a5c      	ldr	r2, [pc, #368]	; (8008698 <HAL_GPIO_DeInit+0x1c4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d025      	beq.n	8008578 <HAL_GPIO_DeInit+0xa4>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a5b      	ldr	r2, [pc, #364]	; (800869c <HAL_GPIO_DeInit+0x1c8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d01f      	beq.n	8008574 <HAL_GPIO_DeInit+0xa0>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a5a      	ldr	r2, [pc, #360]	; (80086a0 <HAL_GPIO_DeInit+0x1cc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d019      	beq.n	8008570 <HAL_GPIO_DeInit+0x9c>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a59      	ldr	r2, [pc, #356]	; (80086a4 <HAL_GPIO_DeInit+0x1d0>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d013      	beq.n	800856c <HAL_GPIO_DeInit+0x98>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a58      	ldr	r2, [pc, #352]	; (80086a8 <HAL_GPIO_DeInit+0x1d4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00d      	beq.n	8008568 <HAL_GPIO_DeInit+0x94>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a57      	ldr	r2, [pc, #348]	; (80086ac <HAL_GPIO_DeInit+0x1d8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d007      	beq.n	8008564 <HAL_GPIO_DeInit+0x90>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a56      	ldr	r2, [pc, #344]	; (80086b0 <HAL_GPIO_DeInit+0x1dc>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d101      	bne.n	8008560 <HAL_GPIO_DeInit+0x8c>
 800855c:	2307      	movs	r3, #7
 800855e:	e00e      	b.n	800857e <HAL_GPIO_DeInit+0xaa>
 8008560:	2308      	movs	r3, #8
 8008562:	e00c      	b.n	800857e <HAL_GPIO_DeInit+0xaa>
 8008564:	2306      	movs	r3, #6
 8008566:	e00a      	b.n	800857e <HAL_GPIO_DeInit+0xaa>
 8008568:	2305      	movs	r3, #5
 800856a:	e008      	b.n	800857e <HAL_GPIO_DeInit+0xaa>
 800856c:	2304      	movs	r3, #4
 800856e:	e006      	b.n	800857e <HAL_GPIO_DeInit+0xaa>
 8008570:	2303      	movs	r3, #3
 8008572:	e004      	b.n	800857e <HAL_GPIO_DeInit+0xaa>
 8008574:	2302      	movs	r3, #2
 8008576:	e002      	b.n	800857e <HAL_GPIO_DeInit+0xaa>
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <HAL_GPIO_DeInit+0xaa>
 800857c:	2300      	movs	r3, #0
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	f002 0203 	and.w	r2, r2, #3
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	4093      	lsls	r3, r2
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	429a      	cmp	r2, r3
 800858c:	d132      	bne.n	80085f4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800858e:	4b49      	ldr	r3, [pc, #292]	; (80086b4 <HAL_GPIO_DeInit+0x1e0>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	43db      	mvns	r3, r3
 8008596:	4947      	ldr	r1, [pc, #284]	; (80086b4 <HAL_GPIO_DeInit+0x1e0>)
 8008598:	4013      	ands	r3, r2
 800859a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800859c:	4b45      	ldr	r3, [pc, #276]	; (80086b4 <HAL_GPIO_DeInit+0x1e0>)
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	43db      	mvns	r3, r3
 80085a4:	4943      	ldr	r1, [pc, #268]	; (80086b4 <HAL_GPIO_DeInit+0x1e0>)
 80085a6:	4013      	ands	r3, r2
 80085a8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80085aa:	4b42      	ldr	r3, [pc, #264]	; (80086b4 <HAL_GPIO_DeInit+0x1e0>)
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	43db      	mvns	r3, r3
 80085b2:	4940      	ldr	r1, [pc, #256]	; (80086b4 <HAL_GPIO_DeInit+0x1e0>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80085b8:	4b3e      	ldr	r3, [pc, #248]	; (80086b4 <HAL_GPIO_DeInit+0x1e0>)
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	43db      	mvns	r3, r3
 80085c0:	493c      	ldr	r1, [pc, #240]	; (80086b4 <HAL_GPIO_DeInit+0x1e0>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	220f      	movs	r2, #15
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80085d6:	4a2f      	ldr	r2, [pc, #188]	; (8008694 <HAL_GPIO_DeInit+0x1c0>)
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	089b      	lsrs	r3, r3, #2
 80085dc:	3302      	adds	r3, #2
 80085de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	43da      	mvns	r2, r3
 80085e6:	482b      	ldr	r0, [pc, #172]	; (8008694 <HAL_GPIO_DeInit+0x1c0>)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	089b      	lsrs	r3, r3, #2
 80085ec:	400a      	ands	r2, r1
 80085ee:	3302      	adds	r3, #2
 80085f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	2103      	movs	r1, #3
 80085fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	08da      	lsrs	r2, r3, #3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	3208      	adds	r2, #8
 8008610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	220f      	movs	r2, #15
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	43db      	mvns	r3, r3
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	08d2      	lsrs	r2, r2, #3
 8008628:	4019      	ands	r1, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3208      	adds	r2, #8
 800862e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	2103      	movs	r1, #3
 800863c:	fa01 f303 	lsl.w	r3, r1, r3
 8008640:	43db      	mvns	r3, r3
 8008642:	401a      	ands	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	2101      	movs	r1, #1
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	fa01 f303 	lsl.w	r3, r1, r3
 8008654:	43db      	mvns	r3, r3
 8008656:	401a      	ands	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	2103      	movs	r1, #3
 8008666:	fa01 f303 	lsl.w	r3, r1, r3
 800866a:	43db      	mvns	r3, r3
 800866c:	401a      	ands	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	3301      	adds	r3, #1
 8008676:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	fa22 f303 	lsr.w	r3, r2, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	f47f af2f 	bne.w	80084e4 <HAL_GPIO_DeInit+0x10>
  }
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	40010000 	.word	0x40010000
 8008698:	48000400 	.word	0x48000400
 800869c:	48000800 	.word	0x48000800
 80086a0:	48000c00 	.word	0x48000c00
 80086a4:	48001000 	.word	0x48001000
 80086a8:	48001400 	.word	0x48001400
 80086ac:	48001800 	.word	0x48001800
 80086b0:	48001c00 	.word	0x48001c00
 80086b4:	40010400 	.word	0x40010400

080086b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	807b      	strh	r3, [r7, #2]
 80086c4:	4613      	mov	r3, r2
 80086c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086c8:	787b      	ldrb	r3, [r7, #1]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086ce:	887a      	ldrh	r2, [r7, #2]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80086d4:	e002      	b.n	80086dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80086d6:	887a      	ldrh	r2, [r7, #2]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e081      	b.n	80087fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d106      	bne.n	8008714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7f9 f9b6 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2224      	movs	r2, #36	; 0x24
 8008718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0201 	bic.w	r2, r2, #1
 800872a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008738:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008748:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d107      	bne.n	8008762 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800875e:	609a      	str	r2, [r3, #8]
 8008760:	e006      	b.n	8008770 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800876e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d104      	bne.n	8008782 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	69d9      	ldr	r1, [r3, #28]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a1a      	ldr	r2, [r3, #32]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e021      	b.n	800885c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2224      	movs	r2, #36	; 0x24
 800881c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0201 	bic.w	r2, r2, #1
 800882e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7f9 f9eb 	bl	8001c0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af02      	add	r7, sp, #8
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	4608      	mov	r0, r1
 800886e:	4611      	mov	r1, r2
 8008870:	461a      	mov	r2, r3
 8008872:	4603      	mov	r3, r0
 8008874:	817b      	strh	r3, [r7, #10]
 8008876:	460b      	mov	r3, r1
 8008878:	813b      	strh	r3, [r7, #8]
 800887a:	4613      	mov	r3, r2
 800887c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b20      	cmp	r3, #32
 8008888:	f040 80f9 	bne.w	8008a7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <HAL_I2C_Mem_Write+0x34>
 8008892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d105      	bne.n	80088a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800889e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e0ed      	b.n	8008a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_I2C_Mem_Write+0x4e>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e0e6      	b.n	8008a80 <HAL_I2C_Mem_Write+0x21c>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088ba:	f7fe f84d 	bl	8006958 <HAL_GetTick>
 80088be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	2319      	movs	r3, #25
 80088c6:	2201      	movs	r2, #1
 80088c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fbd9 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e0d1      	b.n	8008a80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2221      	movs	r2, #33	; 0x21
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2240      	movs	r2, #64	; 0x40
 80088e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a3a      	ldr	r2, [r7, #32]
 80088f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008904:	88f8      	ldrh	r0, [r7, #6]
 8008906:	893a      	ldrh	r2, [r7, #8]
 8008908:	8979      	ldrh	r1, [r7, #10]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4603      	mov	r3, r0
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 fae9 	bl	8008eec <I2C_RequestMemoryWrite>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e0a9      	b.n	8008a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008930:	b29b      	uxth	r3, r3
 8008932:	2bff      	cmp	r3, #255	; 0xff
 8008934:	d90e      	bls.n	8008954 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	22ff      	movs	r2, #255	; 0xff
 800893a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008940:	b2da      	uxtb	r2, r3
 8008942:	8979      	ldrh	r1, [r7, #10]
 8008944:	2300      	movs	r3, #0
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fd41 	bl	80093d4 <I2C_TransferConfig>
 8008952:	e00f      	b.n	8008974 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008958:	b29a      	uxth	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008962:	b2da      	uxtb	r2, r3
 8008964:	8979      	ldrh	r1, [r7, #10]
 8008966:	2300      	movs	r3, #0
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 fd30 	bl	80093d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 fbc3 	bl	8009104 <I2C_WaitOnTXISFlagUntilTimeout>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e07b      	b.n	8008a80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	781a      	ldrb	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d034      	beq.n	8008a2c <HAL_I2C_Mem_Write+0x1c8>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d130      	bne.n	8008a2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	2200      	movs	r2, #0
 80089d2:	2180      	movs	r1, #128	; 0x80
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 fb55 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e04d      	b.n	8008a80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2bff      	cmp	r3, #255	; 0xff
 80089ec:	d90e      	bls.n	8008a0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	22ff      	movs	r2, #255	; 0xff
 80089f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	8979      	ldrh	r1, [r7, #10]
 80089fc:	2300      	movs	r3, #0
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fce5 	bl	80093d4 <I2C_TransferConfig>
 8008a0a:	e00f      	b.n	8008a2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	8979      	ldrh	r1, [r7, #10]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fcd4 	bl	80093d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d19e      	bne.n	8008974 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fba2 	bl	8009184 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e01a      	b.n	8008a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6859      	ldr	r1, [r3, #4]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	; (8008a88 <HAL_I2C_Mem_Write+0x224>)
 8008a5e:	400b      	ands	r3, r1
 8008a60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e000      	b.n	8008a80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008a7e:	2302      	movs	r3, #2
  }
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	fe00e800 	.word	0xfe00e800

08008a8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	4608      	mov	r0, r1
 8008a96:	4611      	mov	r1, r2
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	817b      	strh	r3, [r7, #10]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	813b      	strh	r3, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b20      	cmp	r3, #32
 8008ab0:	f040 80fd 	bne.w	8008cae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <HAL_I2C_Mem_Read+0x34>
 8008aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ac6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e0f1      	b.n	8008cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_I2C_Mem_Read+0x4e>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e0ea      	b.n	8008cb0 <HAL_I2C_Mem_Read+0x224>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ae2:	f7fd ff39 	bl	8006958 <HAL_GetTick>
 8008ae6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	2319      	movs	r3, #25
 8008aee:	2201      	movs	r2, #1
 8008af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 fac5 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e0d5      	b.n	8008cb0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2222      	movs	r2, #34	; 0x22
 8008b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2240      	movs	r2, #64	; 0x40
 8008b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a3a      	ldr	r2, [r7, #32]
 8008b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b2c:	88f8      	ldrh	r0, [r7, #6]
 8008b2e:	893a      	ldrh	r2, [r7, #8]
 8008b30:	8979      	ldrh	r1, [r7, #10]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	9301      	str	r3, [sp, #4]
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fa29 	bl	8008f94 <I2C_RequestMemoryRead>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e0ad      	b.n	8008cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	2bff      	cmp	r3, #255	; 0xff
 8008b5c:	d90e      	bls.n	8008b7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	22ff      	movs	r2, #255	; 0xff
 8008b62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	8979      	ldrh	r1, [r7, #10]
 8008b6c:	4b52      	ldr	r3, [pc, #328]	; (8008cb8 <HAL_I2C_Mem_Read+0x22c>)
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fc2d 	bl	80093d4 <I2C_TransferConfig>
 8008b7a:	e00f      	b.n	8008b9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	8979      	ldrh	r1, [r7, #10]
 8008b8e:	4b4a      	ldr	r3, [pc, #296]	; (8008cb8 <HAL_I2C_Mem_Read+0x22c>)
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fc1c 	bl	80093d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2104      	movs	r1, #4
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 fa6c 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e07c      	b.n	8008cb0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d034      	beq.n	8008c5c <HAL_I2C_Mem_Read+0x1d0>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d130      	bne.n	8008c5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	2200      	movs	r2, #0
 8008c02:	2180      	movs	r1, #128	; 0x80
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 fa3d 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e04d      	b.n	8008cb0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2bff      	cmp	r3, #255	; 0xff
 8008c1c:	d90e      	bls.n	8008c3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	22ff      	movs	r2, #255	; 0xff
 8008c22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	8979      	ldrh	r1, [r7, #10]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fbcd 	bl	80093d4 <I2C_TransferConfig>
 8008c3a:	e00f      	b.n	8008c5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	8979      	ldrh	r1, [r7, #10]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fbbc 	bl	80093d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d19a      	bne.n	8008b9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 fa8a 	bl	8009184 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e01a      	b.n	8008cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <HAL_I2C_Mem_Read+0x230>)
 8008c8e:	400b      	ands	r3, r1
 8008c90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	e000      	b.n	8008cb0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008cae:	2302      	movs	r3, #2
  }
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	80002400 	.word	0x80002400
 8008cbc:	fe00e800 	.word	0xfe00e800

08008cc0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	; 0x28
 8008cc4:	af02      	add	r7, sp, #8
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	603b      	str	r3, [r7, #0]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	f040 80f1 	bne.w	8008ec4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf0:	d101      	bne.n	8008cf6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	e0e7      	b.n	8008ec6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d101      	bne.n	8008d04 <HAL_I2C_IsDeviceReady+0x44>
 8008d00:	2302      	movs	r3, #2
 8008d02:	e0e0      	b.n	8008ec6 <HAL_I2C_IsDeviceReady+0x206>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2224      	movs	r2, #36	; 0x24
 8008d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d107      	bne.n	8008d32 <HAL_I2C_IsDeviceReady+0x72>
 8008d22:	897b      	ldrh	r3, [r7, #10]
 8008d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d30:	e004      	b.n	8008d3c <HAL_I2C_IsDeviceReady+0x7c>
 8008d32:	897b      	ldrh	r3, [r7, #10]
 8008d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d38:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	6812      	ldr	r2, [r2, #0]
 8008d40:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008d42:	f7fd fe09 	bl	8006958 <HAL_GetTick>
 8008d46:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	f003 0320 	and.w	r3, r3, #32
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	bf0c      	ite	eq
 8008d56:	2301      	moveq	r3, #1
 8008d58:	2300      	movne	r3, #0
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b10      	cmp	r3, #16
 8008d6a:	bf0c      	ite	eq
 8008d6c:	2301      	moveq	r3, #1
 8008d6e:	2300      	movne	r3, #0
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008d74:	e034      	b.n	8008de0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d7c:	d01a      	beq.n	8008db4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d7e:	f7fd fdeb 	bl	8006958 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d302      	bcc.n	8008d94 <HAL_I2C_IsDeviceReady+0xd4>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10f      	bne.n	8008db4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da0:	f043 0220 	orr.w	r2, r3, #32
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e088      	b.n	8008ec6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	bf0c      	ite	eq
 8008dc2:	2301      	moveq	r3, #1
 8008dc4:	2300      	movne	r3, #0
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f003 0310 	and.w	r3, r3, #16
 8008dd4:	2b10      	cmp	r3, #16
 8008dd6:	bf0c      	ite	eq
 8008dd8:	2301      	moveq	r3, #1
 8008dda:	2300      	movne	r3, #0
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008de0:	7ffb      	ldrb	r3, [r7, #31]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <HAL_I2C_IsDeviceReady+0x12c>
 8008de6:	7fbb      	ldrb	r3, [r7, #30]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d0c4      	beq.n	8008d76 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f003 0310 	and.w	r3, r3, #16
 8008df6:	2b10      	cmp	r3, #16
 8008df8:	d01a      	beq.n	8008e30 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2200      	movs	r2, #0
 8008e02:	2120      	movs	r1, #32
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 f93d 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e058      	b.n	8008ec6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e04a      	b.n	8008ec6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2200      	movs	r2, #0
 8008e38:	2120      	movs	r1, #32
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f922 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e03d      	b.n	8008ec6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2220      	movs	r2, #32
 8008e58:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d118      	bne.n	8008e94 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e70:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2120      	movs	r1, #32
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 f901 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e01c      	b.n	8008ec6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2220      	movs	r2, #32
 8008e92:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	3301      	adds	r3, #1
 8008e98:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	f63f af3b 	bhi.w	8008d1a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb0:	f043 0220 	orr.w	r2, r3, #32
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e000      	b.n	8008ec6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008ec4:	2302      	movs	r3, #2
  }
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008edc:	b2db      	uxtb	r3, r3
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af02      	add	r7, sp, #8
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	817b      	strh	r3, [r7, #10]
 8008efe:	460b      	mov	r3, r1
 8008f00:	813b      	strh	r3, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	8979      	ldrh	r1, [r7, #10]
 8008f0c:	4b20      	ldr	r3, [pc, #128]	; (8008f90 <I2C_RequestMemoryWrite+0xa4>)
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 fa5d 	bl	80093d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	69b9      	ldr	r1, [r7, #24]
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 f8f0 	bl	8009104 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e02c      	b.n	8008f88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f2e:	88fb      	ldrh	r3, [r7, #6]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d105      	bne.n	8008f40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f34:	893b      	ldrh	r3, [r7, #8]
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	629a      	str	r2, [r3, #40]	; 0x28
 8008f3e:	e015      	b.n	8008f6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008f40:	893b      	ldrh	r3, [r7, #8]
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	69b9      	ldr	r1, [r7, #24]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 f8d6 	bl	8009104 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e012      	b.n	8008f88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f62:	893b      	ldrh	r3, [r7, #8]
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2200      	movs	r2, #0
 8008f74:	2180      	movs	r1, #128	; 0x80
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 f884 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e000      	b.n	8008f88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	80002000 	.word	0x80002000

08008f94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af02      	add	r7, sp, #8
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	817b      	strh	r3, [r7, #10]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	813b      	strh	r3, [r7, #8]
 8008faa:	4613      	mov	r3, r2
 8008fac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008fae:	88fb      	ldrh	r3, [r7, #6]
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	8979      	ldrh	r1, [r7, #10]
 8008fb4:	4b20      	ldr	r3, [pc, #128]	; (8009038 <I2C_RequestMemoryRead+0xa4>)
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fa0a 	bl	80093d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	69b9      	ldr	r1, [r7, #24]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 f89d 	bl	8009104 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e02c      	b.n	800902e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d105      	bne.n	8008fe6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fda:	893b      	ldrh	r3, [r7, #8]
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8008fe4:	e015      	b.n	8009012 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008fe6:	893b      	ldrh	r3, [r7, #8]
 8008fe8:	0a1b      	lsrs	r3, r3, #8
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ff4:	69fa      	ldr	r2, [r7, #28]
 8008ff6:	69b9      	ldr	r1, [r7, #24]
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 f883 	bl	8009104 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e012      	b.n	800902e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009008:	893b      	ldrh	r3, [r7, #8]
 800900a:	b2da      	uxtb	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2200      	movs	r2, #0
 800901a:	2140      	movs	r1, #64	; 0x40
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f831 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	80002000 	.word	0x80002000

0800903c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b02      	cmp	r3, #2
 8009050:	d103      	bne.n	800905a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2200      	movs	r2, #0
 8009058:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b01      	cmp	r3, #1
 8009066:	d007      	beq.n	8009078 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0201 	orr.w	r2, r2, #1
 8009076:	619a      	str	r2, [r3, #24]
  }
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	4613      	mov	r3, r2
 8009092:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009094:	e022      	b.n	80090dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800909c:	d01e      	beq.n	80090dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800909e:	f7fd fc5b 	bl	8006958 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d302      	bcc.n	80090b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d113      	bne.n	80090dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b8:	f043 0220 	orr.w	r2, r3, #32
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e00f      	b.n	80090fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4013      	ands	r3, r2
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	bf0c      	ite	eq
 80090ec:	2301      	moveq	r3, #1
 80090ee:	2300      	movne	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	461a      	mov	r2, r3
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d0cd      	beq.n	8009096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009110:	e02c      	b.n	800916c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68b9      	ldr	r1, [r7, #8]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 f870 	bl	80091fc <I2C_IsErrorOccurred>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e02a      	b.n	800917c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800912c:	d01e      	beq.n	800916c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912e:	f7fd fc13 	bl	8006958 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	d302      	bcc.n	8009144 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d113      	bne.n	800916c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009148:	f043 0220 	orr.w	r2, r3, #32
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e007      	b.n	800917c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b02      	cmp	r3, #2
 8009178:	d1cb      	bne.n	8009112 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009190:	e028      	b.n	80091e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f830 	bl	80091fc <I2C_IsErrorOccurred>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e026      	b.n	80091f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a6:	f7fd fbd7 	bl	8006958 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d302      	bcc.n	80091bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d113      	bne.n	80091e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c0:	f043 0220 	orr.w	r2, r3, #32
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e007      	b.n	80091f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d1cf      	bne.n	8009192 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	; 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	2b00      	cmp	r3, #0
 8009226:	d075      	beq.n	8009314 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2210      	movs	r2, #16
 800922e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009230:	e056      	b.n	80092e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009238:	d052      	beq.n	80092e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800923a:	f7fd fb8d 	bl	8006958 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	429a      	cmp	r2, r3
 8009248:	d302      	bcc.n	8009250 <I2C_IsErrorOccurred+0x54>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d147      	bne.n	80092e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800925a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009262:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800926e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009272:	d12e      	bne.n	80092d2 <I2C_IsErrorOccurred+0xd6>
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800927a:	d02a      	beq.n	80092d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800927c:	7cfb      	ldrb	r3, [r7, #19]
 800927e:	2b20      	cmp	r3, #32
 8009280:	d027      	beq.n	80092d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009290:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009292:	f7fd fb61 	bl	8006958 <HAL_GetTick>
 8009296:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009298:	e01b      	b.n	80092d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800929a:	f7fd fb5d 	bl	8006958 <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	2b19      	cmp	r3, #25
 80092a6:	d914      	bls.n	80092d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ac:	f043 0220 	orr.w	r2, r3, #32
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b20      	cmp	r3, #32
 80092de:	d1dc      	bne.n	800929a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	d003      	beq.n	80092f6 <I2C_IsErrorOccurred+0xfa>
 80092ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d09d      	beq.n	8009232 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80092f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2220      	movs	r2, #32
 8009304:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	f043 0304 	orr.w	r3, r3, #4
 800930c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	f043 0301 	orr.w	r3, r3, #1
 800932c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009336:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	f043 0308 	orr.w	r3, r3, #8
 800934e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009358:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800937a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009386:	2b00      	cmp	r3, #0
 8009388:	d01c      	beq.n	80093c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff fe56 	bl	800903c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6859      	ldr	r1, [r3, #4]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	4b0d      	ldr	r3, [pc, #52]	; (80093d0 <I2C_IsErrorOccurred+0x1d4>)
 800939c:	400b      	ands	r3, r1
 800939e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	431a      	orrs	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2220      	movs	r2, #32
 80093b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80093c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3728      	adds	r7, #40	; 0x28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	fe00e800 	.word	0xfe00e800

080093d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	817b      	strh	r3, [r7, #10]
 80093e2:	4613      	mov	r3, r2
 80093e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093e6:	897b      	ldrh	r3, [r7, #10]
 80093e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093ec:	7a7b      	ldrb	r3, [r7, #9]
 80093ee:	041b      	lsls	r3, r3, #16
 80093f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009402:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	0d5b      	lsrs	r3, r3, #21
 800940e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009412:	4b08      	ldr	r3, [pc, #32]	; (8009434 <I2C_TransferConfig+0x60>)
 8009414:	430b      	orrs	r3, r1
 8009416:	43db      	mvns	r3, r3
 8009418:	ea02 0103 	and.w	r1, r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	430a      	orrs	r2, r1
 8009424:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009426:	bf00      	nop
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	03ff63ff 	.word	0x03ff63ff

08009438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b20      	cmp	r3, #32
 800944c:	d138      	bne.n	80094c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009454:	2b01      	cmp	r3, #1
 8009456:	d101      	bne.n	800945c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009458:	2302      	movs	r3, #2
 800945a:	e032      	b.n	80094c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2224      	movs	r2, #36	; 0x24
 8009468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0201 	bic.w	r2, r2, #1
 800947a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800948a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6819      	ldr	r1, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	430a      	orrs	r2, r1
 800949a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f042 0201 	orr.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	e000      	b.n	80094c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094c0:	2302      	movs	r3, #2
  }
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b085      	sub	sp, #20
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d139      	bne.n	8009558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e033      	b.n	800955a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2224      	movs	r2, #36	; 0x24
 80094fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0201 	bic.w	r2, r2, #1
 8009510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	021b      	lsls	r3, r3, #8
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2220      	movs	r2, #32
 8009548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	e000      	b.n	800955a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009558:	2302      	movs	r3, #2
  }
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009568:	b08f      	sub	sp, #60	; 0x3c
 800956a:	af0a      	add	r7, sp, #40	; 0x28
 800956c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e116      	b.n	80097a6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f009 fbfa 	bl	8012d8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2203      	movs	r2, #3
 800959c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d102      	bne.n	80095b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f006 fb09 	bl	800fbce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	603b      	str	r3, [r7, #0]
 80095c2:	687e      	ldr	r6, [r7, #4]
 80095c4:	466d      	mov	r5, sp
 80095c6:	f106 0410 	add.w	r4, r6, #16
 80095ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80095da:	1d33      	adds	r3, r6, #4
 80095dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095de:	6838      	ldr	r0, [r7, #0]
 80095e0:	f006 fa1c 	bl	800fa1c <USB_CoreInit>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d005      	beq.n	80095f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2202      	movs	r2, #2
 80095ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e0d7      	b.n	80097a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2100      	movs	r1, #0
 80095fc:	4618      	mov	r0, r3
 80095fe:	f006 faf7 	bl	800fbf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
 8009606:	e04a      	b.n	800969e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009608:	7bfa      	ldrb	r2, [r7, #15]
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4613      	mov	r3, r2
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	333d      	adds	r3, #61	; 0x3d
 8009618:	2201      	movs	r2, #1
 800961a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800961c:	7bfa      	ldrb	r2, [r7, #15]
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	4613      	mov	r3, r2
 8009622:	00db      	lsls	r3, r3, #3
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	333c      	adds	r3, #60	; 0x3c
 800962c:	7bfa      	ldrb	r2, [r7, #15]
 800962e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009630:	7bfa      	ldrb	r2, [r7, #15]
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	b298      	uxth	r0, r3
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4613      	mov	r3, r2
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	3344      	adds	r3, #68	; 0x44
 8009644:	4602      	mov	r2, r0
 8009646:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009648:	7bfa      	ldrb	r2, [r7, #15]
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	4613      	mov	r3, r2
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	440b      	add	r3, r1
 8009656:	3340      	adds	r3, #64	; 0x40
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800965c:	7bfa      	ldrb	r2, [r7, #15]
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4613      	mov	r3, r2
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	3348      	adds	r3, #72	; 0x48
 800966c:	2200      	movs	r2, #0
 800966e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009670:	7bfa      	ldrb	r2, [r7, #15]
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	4613      	mov	r3, r2
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	440b      	add	r3, r1
 800967e:	334c      	adds	r3, #76	; 0x4c
 8009680:	2200      	movs	r2, #0
 8009682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009684:	7bfa      	ldrb	r2, [r7, #15]
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	4613      	mov	r3, r2
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	4413      	add	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	440b      	add	r3, r1
 8009692:	3354      	adds	r3, #84	; 0x54
 8009694:	2200      	movs	r2, #0
 8009696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	3301      	adds	r3, #1
 800969c:	73fb      	strb	r3, [r7, #15]
 800969e:	7bfa      	ldrb	r2, [r7, #15]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d3af      	bcc.n	8009608 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]
 80096ac:	e044      	b.n	8009738 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80096ae:	7bfa      	ldrb	r2, [r7, #15]
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80096c0:	2200      	movs	r2, #0
 80096c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80096c4:	7bfa      	ldrb	r2, [r7, #15]
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4613      	mov	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	440b      	add	r3, r1
 80096d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80096d6:	7bfa      	ldrb	r2, [r7, #15]
 80096d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096da:	7bfa      	ldrb	r2, [r7, #15]
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80096ec:	2200      	movs	r2, #0
 80096ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80096f0:	7bfa      	ldrb	r2, [r7, #15]
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	4613      	mov	r3, r2
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	440b      	add	r3, r1
 80096fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009702:	2200      	movs	r2, #0
 8009704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009706:	7bfa      	ldrb	r2, [r7, #15]
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	4613      	mov	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800971c:	7bfa      	ldrb	r2, [r7, #15]
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	4613      	mov	r3, r2
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	3301      	adds	r3, #1
 8009736:	73fb      	strb	r3, [r7, #15]
 8009738:	7bfa      	ldrb	r2, [r7, #15]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	429a      	cmp	r2, r3
 8009740:	d3b5      	bcc.n	80096ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	687e      	ldr	r6, [r7, #4]
 800974a:	466d      	mov	r5, sp
 800974c:	f106 0410 	add.w	r4, r6, #16
 8009750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800975c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009760:	1d33      	adds	r3, r6, #4
 8009762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009764:	6838      	ldr	r0, [r7, #0]
 8009766:	f006 fa8f 	bl	800fc88 <USB_DevInit>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2202      	movs	r2, #2
 8009774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e014      	b.n	80097a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	2b01      	cmp	r3, #1
 8009792:	d102      	bne.n	800979a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 f881 	bl	800a89c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f007 fb17 	bl	8010dd2 <USB_DevDisconnect>

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d101      	bne.n	80097ca <HAL_PCD_Start+0x1c>
 80097c6:	2302      	movs	r3, #2
 80097c8:	e01c      	b.n	8009804 <HAL_PCD_Start+0x56>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d105      	bne.n	80097e6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f006 f9de 	bl	800fbac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f007 facb 	bl	8010d90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800980c:	b590      	push	{r4, r7, lr}
 800980e:	b08d      	sub	sp, #52	; 0x34
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4618      	mov	r0, r3
 8009824:	f007 fb89 	bl	8010f3a <USB_GetMode>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 847e 	bne.w	800a12c <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4618      	mov	r0, r3
 8009836:	f007 faed 	bl	8010e14 <USB_ReadInterrupts>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 8474 	beq.w	800a12a <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	0a1b      	lsrs	r3, r3, #8
 800984c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4618      	mov	r0, r3
 800985c:	f007 fada 	bl	8010e14 <USB_ReadInterrupts>
 8009860:	4603      	mov	r3, r0
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b02      	cmp	r3, #2
 8009868:	d107      	bne.n	800987a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	695a      	ldr	r2, [r3, #20]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f002 0202 	and.w	r2, r2, #2
 8009878:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f007 fac8 	bl	8010e14 <USB_ReadInterrupts>
 8009884:	4603      	mov	r3, r0
 8009886:	f003 0310 	and.w	r3, r3, #16
 800988a:	2b10      	cmp	r3, #16
 800988c:	d161      	bne.n	8009952 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	699a      	ldr	r2, [r3, #24]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 0210 	bic.w	r2, r2, #16
 800989c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	f003 020f 	and.w	r2, r3, #15
 80098aa:	4613      	mov	r3, r2
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	3304      	adds	r3, #4
 80098bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	0c5b      	lsrs	r3, r3, #17
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d124      	bne.n	8009914 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80098d0:	4013      	ands	r3, r2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d035      	beq.n	8009942 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	091b      	lsrs	r3, r3, #4
 80098de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	461a      	mov	r2, r3
 80098e8:	6a38      	ldr	r0, [r7, #32]
 80098ea:	f007 f8ff 	bl	8010aec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	091b      	lsrs	r3, r3, #4
 80098f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098fa:	441a      	add	r2, r3
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	6a1a      	ldr	r2, [r3, #32]
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	091b      	lsrs	r3, r3, #4
 8009908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800990c:	441a      	add	r2, r3
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	621a      	str	r2, [r3, #32]
 8009912:	e016      	b.n	8009942 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	0c5b      	lsrs	r3, r3, #17
 8009918:	f003 030f 	and.w	r3, r3, #15
 800991c:	2b06      	cmp	r3, #6
 800991e:	d110      	bne.n	8009942 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009926:	2208      	movs	r2, #8
 8009928:	4619      	mov	r1, r3
 800992a:	6a38      	ldr	r0, [r7, #32]
 800992c:	f007 f8de 	bl	8010aec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	6a1a      	ldr	r2, [r3, #32]
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	091b      	lsrs	r3, r3, #4
 8009938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800993c:	441a      	add	r2, r3
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0210 	orr.w	r2, r2, #16
 8009950:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4618      	mov	r0, r3
 8009958:	f007 fa5c 	bl	8010e14 <USB_ReadInterrupts>
 800995c:	4603      	mov	r3, r0
 800995e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009962:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009966:	f040 80a7 	bne.w	8009ab8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f007 fa61 	bl	8010e3a <USB_ReadDevAllOutEpInterrupt>
 8009978:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800997a:	e099      	b.n	8009ab0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 808e 	beq.w	8009aa4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f007 fa85 	bl	8010ea2 <USB_ReadDevOutEPInterrupt>
 8009998:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00c      	beq.n	80099be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b0:	461a      	mov	r2, r3
 80099b2:	2301      	movs	r3, #1
 80099b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80099b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fe95 	bl	800a6e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00c      	beq.n	80099e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d4:	461a      	mov	r2, r3
 80099d6:	2308      	movs	r3, #8
 80099d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80099da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fed1 	bl	800a784 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f003 0310 	and.w	r3, r3, #16
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d008      	beq.n	80099fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f8:	461a      	mov	r2, r3
 80099fa:	2310      	movs	r3, #16
 80099fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d030      	beq.n	8009a6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a10:	2b80      	cmp	r3, #128	; 0x80
 8009a12:	d109      	bne.n	8009a28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	4413      	add	r3, r2
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	78db      	ldrb	r3, [r3, #3]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d108      	bne.n	8009a58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f009 fac2 	bl	8012fdc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a64:	461a      	mov	r2, r3
 8009a66:	2302      	movs	r3, #2
 8009a68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f003 0320 	and.w	r3, r3, #32
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d008      	beq.n	8009a86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a80:	461a      	mov	r2, r3
 8009a82:	2320      	movs	r3, #32
 8009a84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d009      	beq.n	8009aa4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aa2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	085b      	lsrs	r3, r3, #1
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f47f af62 	bne.w	800997c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f007 f9a9 	bl	8010e14 <USB_ReadInterrupts>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009acc:	f040 80a4 	bne.w	8009c18 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f007 f9ca 	bl	8010e6e <USB_ReadDevAllInEpInterrupt>
 8009ada:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009ae0:	e096      	b.n	8009c10 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 808b 	beq.w	8009c04 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f007 f9f0 	bl	8010ede <USB_ReadDevInEPInterrupt>
 8009afe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d020      	beq.n	8009b4c <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	f003 030f 	and.w	r3, r3, #15
 8009b10:	2201      	movs	r2, #1
 8009b12:	fa02 f303 	lsl.w	r3, r2, r3
 8009b16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	43db      	mvns	r3, r3
 8009b24:	69f9      	ldr	r1, [r7, #28]
 8009b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f009 f9b3 	bl	8012eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f003 0308 	and.w	r3, r3, #8
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d008      	beq.n	8009b68 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b62:	461a      	mov	r2, r3
 8009b64:	2308      	movs	r3, #8
 8009b66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f003 0310 	and.w	r3, r3, #16
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d008      	beq.n	8009b84 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7e:	461a      	mov	r2, r3
 8009b80:	2310      	movs	r3, #16
 8009b82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d008      	beq.n	8009ba0 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	2340      	movs	r3, #64	; 0x40
 8009b9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d023      	beq.n	8009bf2 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bac:	6a38      	ldr	r0, [r7, #32]
 8009bae:	f006 f9b7 	bl	800ff20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	3338      	adds	r3, #56	; 0x38
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	78db      	ldrb	r3, [r3, #3]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d108      	bne.n	8009be0 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f009 fa10 	bl	8013000 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bec:	461a      	mov	r2, r3
 8009bee:	2302      	movs	r3, #2
 8009bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fcea 	bl	800a5d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	3301      	adds	r3, #1
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	085b      	lsrs	r3, r3, #1
 8009c0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f47f af65 	bne.w	8009ae2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f007 f8f9 	bl	8010e14 <USB_ReadInterrupts>
 8009c22:	4603      	mov	r3, r0
 8009c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c2c:	d122      	bne.n	8009c74 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c3c:	f023 0301 	bic.w	r3, r3, #1
 8009c40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d108      	bne.n	8009c5e <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009c54:	2100      	movs	r1, #0
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f009 fc44 	bl	80134e4 <HAL_PCDEx_LPM_Callback>
 8009c5c:	e002      	b.n	8009c64 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f009 f994 	bl	8012f8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	695a      	ldr	r2, [r3, #20]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f007 f8cb 	bl	8010e14 <USB_ReadInterrupts>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c88:	d112      	bne.n	8009cb0 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d102      	bne.n	8009ca0 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f009 f950 	bl	8012f40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	695a      	ldr	r2, [r3, #20]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f007 f8ad 	bl	8010e14 <USB_ReadInterrupts>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cc4:	d121      	bne.n	8009d0a <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	695a      	ldr	r2, [r3, #20]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009cd4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d111      	bne.n	8009d04 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	089b      	lsrs	r3, r3, #2
 8009cf0:	f003 020f 	and.w	r2, r3, #15
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f009 fbf1 	bl	80134e4 <HAL_PCDEx_LPM_Callback>
 8009d02:	e002      	b.n	8009d0a <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f009 f91b 	bl	8012f40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f007 f880 	bl	8010e14 <USB_ReadInterrupts>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d1e:	f040 80b5 	bne.w	8009e8c <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d30:	f023 0301 	bic.w	r3, r3, #1
 8009d34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2110      	movs	r1, #16
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f006 f8ef 	bl	800ff20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d42:	2300      	movs	r3, #0
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d46:	e046      	b.n	8009dd6 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d54:	461a      	mov	r2, r3
 8009d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d6c:	0151      	lsls	r1, r2, #5
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	440a      	add	r2, r1
 8009d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d88:	461a      	mov	r2, r3
 8009d8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009da0:	0151      	lsls	r1, r2, #5
 8009da2:	69fa      	ldr	r2, [r7, #28]
 8009da4:	440a      	add	r2, r1
 8009da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009daa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	69fa      	ldr	r2, [r7, #28]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d3b3      	bcc.n	8009d48 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	69fa      	ldr	r2, [r7, #28]
 8009dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009df2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d016      	beq.n	8009e2a <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e06:	69fa      	ldr	r2, [r7, #28]
 8009e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e0c:	f043 030b 	orr.w	r3, r3, #11
 8009e10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1c:	69fa      	ldr	r2, [r7, #28]
 8009e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e22:	f043 030b 	orr.w	r3, r3, #11
 8009e26:	6453      	str	r3, [r2, #68]	; 0x44
 8009e28:	e015      	b.n	8009e56 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e3c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009e40:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e50:	f043 030b 	orr.w	r3, r3, #11
 8009e54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f007 f890 	bl	8010f9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	695a      	ldr	r2, [r3, #20]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f006 ffbf 	bl	8010e14 <USB_ReadInterrupts>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ea0:	d124      	bne.n	8009eec <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f007 f855 	bl	8010f56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f006 f8b2 	bl	801001a <USB_GetDevSpeed>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	461a      	mov	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681c      	ldr	r4, [r3, #0]
 8009ec2:	f001 fc0b 	bl	800b6dc <HAL_RCC_GetHCLKFreq>
 8009ec6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f005 fdcf 	bl	800fa74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f009 f813 	bl	8012f02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	695a      	ldr	r2, [r3, #20]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f006 ff8f 	bl	8010e14 <USB_ReadInterrupts>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f003 0308 	and.w	r3, r3, #8
 8009efc:	2b08      	cmp	r3, #8
 8009efe:	d10a      	bne.n	8009f16 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f008 fff0 	bl	8012ee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	695a      	ldr	r2, [r3, #20]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f002 0208 	and.w	r2, r2, #8
 8009f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f006 ff7a 	bl	8010e14 <USB_ReadInterrupts>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f26:	2b80      	cmp	r3, #128	; 0x80
 8009f28:	d122      	bne.n	8009f70 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f36:	2301      	movs	r3, #1
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
 8009f3a:	e014      	b.n	8009f66 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f40:	4613      	mov	r3, r2
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d105      	bne.n	8009f60 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb0b 	bl	800a576 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	3301      	adds	r3, #1
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d3e5      	bcc.n	8009f3c <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f006 ff4d 	bl	8010e14 <USB_ReadInterrupts>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f84:	d13b      	bne.n	8009ffe <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f86:	2301      	movs	r3, #1
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
 8009f8a:	e02b      	b.n	8009fe4 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	440b      	add	r3, r1
 8009faa:	3340      	adds	r3, #64	; 0x40
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d115      	bne.n	8009fde <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009fb2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	da12      	bge.n	8009fde <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	333f      	adds	r3, #63	; 0x3f
 8009fc8:	2201      	movs	r2, #1
 8009fca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 facc 	bl	800a576 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d3ce      	bcc.n	8009f8c <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	695a      	ldr	r2, [r3, #20]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4618      	mov	r0, r3
 800a004:	f006 ff06 	bl	8010e14 <USB_ReadInterrupts>
 800a008:	4603      	mov	r3, r0
 800a00a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a00e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a012:	d155      	bne.n	800a0c0 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a014:	2301      	movs	r3, #1
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
 800a018:	e045      	b.n	800a0a6 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02e:	4613      	mov	r3, r2
 800a030:	00db      	lsls	r3, r3, #3
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	440b      	add	r3, r1
 800a038:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d12e      	bne.n	800a0a0 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a042:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a044:	2b00      	cmp	r3, #0
 800a046:	da2b      	bge.n	800a0a0 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a054:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a058:	429a      	cmp	r2, r3
 800a05a:	d121      	bne.n	800a0a0 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a060:	4613      	mov	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a06e:	2201      	movs	r2, #1
 800a070:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10a      	bne.n	800a0a0 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	69fa      	ldr	r2, [r7, #28]
 800a094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a09c:	6053      	str	r3, [r2, #4]
            break;
 800a09e:	e007      	b.n	800a0b0 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d3b4      	bcc.n	800a01a <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	695a      	ldr	r2, [r3, #20]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a0be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f006 fea5 	bl	8010e14 <USB_ReadInterrupts>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d4:	d10a      	bne.n	800a0ec <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f008 ffa4 	bl	8013024 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	695a      	ldr	r2, [r3, #20]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a0ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f006 fe8f 	bl	8010e14 <USB_ReadInterrupts>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b04      	cmp	r3, #4
 800a0fe:	d115      	bne.n	800a12c <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	f003 0304 	and.w	r3, r3, #4
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f008 ff94 	bl	8013040 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6859      	ldr	r1, [r3, #4]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	430a      	orrs	r2, r1
 800a126:	605a      	str	r2, [r3, #4]
 800a128:	e000      	b.n	800a12c <HAL_PCD_IRQHandler+0x920>
      return;
 800a12a:	bf00      	nop
    }
  }
}
 800a12c:	3734      	adds	r7, #52	; 0x34
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd90      	pop	{r4, r7, pc}

0800a132 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	460b      	mov	r3, r1
 800a13c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a144:	2b01      	cmp	r3, #1
 800a146:	d101      	bne.n	800a14c <HAL_PCD_SetAddress+0x1a>
 800a148:	2302      	movs	r3, #2
 800a14a:	e013      	b.n	800a174 <HAL_PCD_SetAddress+0x42>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	78fa      	ldrb	r2, [r7, #3]
 800a162:	4611      	mov	r1, r2
 800a164:	4618      	mov	r0, r3
 800a166:	f006 fded 	bl	8010d44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	4608      	mov	r0, r1
 800a186:	4611      	mov	r1, r2
 800a188:	461a      	mov	r2, r3
 800a18a:	4603      	mov	r3, r0
 800a18c:	70fb      	strb	r3, [r7, #3]
 800a18e:	460b      	mov	r3, r1
 800a190:	803b      	strh	r3, [r7, #0]
 800a192:	4613      	mov	r3, r2
 800a194:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a19a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	da0f      	bge.n	800a1c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1a2:	78fb      	ldrb	r3, [r7, #3]
 800a1a4:	f003 020f 	and.w	r2, r3, #15
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	3338      	adds	r3, #56	; 0x38
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	705a      	strb	r2, [r3, #1]
 800a1c0:	e00f      	b.n	800a1e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	f003 020f 	and.w	r2, r3, #15
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	3304      	adds	r3, #4
 800a1da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	f003 030f 	and.w	r3, r3, #15
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a1ee:	883a      	ldrh	r2, [r7, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	78ba      	ldrb	r2, [r7, #2]
 800a1f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	b29a      	uxth	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a20c:	78bb      	ldrb	r3, [r7, #2]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d102      	bne.n	800a218 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <HAL_PCD_EP_Open+0xaa>
 800a222:	2302      	movs	r3, #2
 800a224:	e00e      	b.n	800a244 <HAL_PCD_EP_Open+0xc8>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68f9      	ldr	r1, [r7, #12]
 800a234:	4618      	mov	r0, r3
 800a236:	f005 ff0f 	bl	8010058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a242:	7afb      	ldrb	r3, [r7, #11]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	da0f      	bge.n	800a280 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	f003 020f 	and.w	r2, r3, #15
 800a266:	4613      	mov	r3, r2
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	4413      	add	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	3338      	adds	r3, #56	; 0x38
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	4413      	add	r3, r2
 800a274:	3304      	adds	r3, #4
 800a276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2201      	movs	r2, #1
 800a27c:	705a      	strb	r2, [r3, #1]
 800a27e:	e00f      	b.n	800a2a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	f003 020f 	and.w	r2, r3, #15
 800a286:	4613      	mov	r3, r2
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4413      	add	r3, r2
 800a296:	3304      	adds	r3, #4
 800a298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	f003 030f 	and.w	r3, r3, #15
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d101      	bne.n	800a2ba <HAL_PCD_EP_Close+0x6e>
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	e00e      	b.n	800a2d8 <HAL_PCD_EP_Close+0x8c>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68f9      	ldr	r1, [r7, #12]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f005 ff4d 	bl	8010168 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	607a      	str	r2, [r7, #4]
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2f0:	7afb      	ldrb	r3, [r7, #11]
 800a2f2:	f003 020f 	and.w	r2, r3, #15
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	4413      	add	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	4413      	add	r3, r2
 800a306:	3304      	adds	r3, #4
 800a308:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2200      	movs	r2, #0
 800a31a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2200      	movs	r2, #0
 800a320:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	f003 030f 	and.w	r3, r3, #15
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	f003 030f 	and.w	r3, r3, #15
 800a334:	2b00      	cmp	r3, #0
 800a336:	d106      	bne.n	800a346 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6979      	ldr	r1, [r7, #20]
 800a33e:	4618      	mov	r0, r3
 800a340:	f006 f9ce 	bl	80106e0 <USB_EP0StartXfer>
 800a344:	e005      	b.n	800a352 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6979      	ldr	r1, [r7, #20]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f005 ffe7 	bl	8010320 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	f003 020f 	and.w	r2, r3, #15
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	4613      	mov	r3, r2
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	440b      	add	r3, r1
 800a37a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a37e:	681b      	ldr	r3, [r3, #0]
}
 800a380:	4618      	mov	r0, r3
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	607a      	str	r2, [r7, #4]
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	460b      	mov	r3, r1
 800a39a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a39c:	7afb      	ldrb	r3, [r7, #11]
 800a39e:	f003 020f 	and.w	r2, r3, #15
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	3338      	adds	r3, #56	; 0x38
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3cc:	7afb      	ldrb	r3, [r7, #11]
 800a3ce:	f003 030f 	and.w	r3, r3, #15
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a3d8:	7afb      	ldrb	r3, [r7, #11]
 800a3da:	f003 030f 	and.w	r3, r3, #15
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6979      	ldr	r1, [r7, #20]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f006 f979 	bl	80106e0 <USB_EP0StartXfer>
 800a3ee:	e005      	b.n	800a3fc <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6979      	ldr	r1, [r7, #20]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f005 ff92 	bl	8010320 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a412:	78fb      	ldrb	r3, [r7, #3]
 800a414:	f003 020f 	and.w	r2, r3, #15
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d901      	bls.n	800a424 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e04e      	b.n	800a4c2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	da0f      	bge.n	800a44c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	f003 020f 	and.w	r2, r3, #15
 800a432:	4613      	mov	r3, r2
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	4413      	add	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	3338      	adds	r3, #56	; 0x38
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	4413      	add	r3, r2
 800a440:	3304      	adds	r3, #4
 800a442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	705a      	strb	r2, [r3, #1]
 800a44a:	e00d      	b.n	800a468 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a44c:	78fa      	ldrb	r2, [r7, #3]
 800a44e:	4613      	mov	r3, r2
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	4413      	add	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	4413      	add	r3, r2
 800a45e:	3304      	adds	r3, #4
 800a460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	f003 030f 	and.w	r3, r3, #15
 800a474:	b2da      	uxtb	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a480:	2b01      	cmp	r3, #1
 800a482:	d101      	bne.n	800a488 <HAL_PCD_EP_SetStall+0x82>
 800a484:	2302      	movs	r3, #2
 800a486:	e01c      	b.n	800a4c2 <HAL_PCD_EP_SetStall+0xbc>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68f9      	ldr	r1, [r7, #12]
 800a496:	4618      	mov	r0, r3
 800a498:	f006 fb80 	bl	8010b9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d108      	bne.n	800a4b8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4610      	mov	r0, r2
 800a4b4:	f006 fd72 	bl	8010f9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a4d6:	78fb      	ldrb	r3, [r7, #3]
 800a4d8:	f003 020f 	and.w	r2, r3, #15
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d901      	bls.n	800a4e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e042      	b.n	800a56e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a4e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	da0f      	bge.n	800a510 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	f003 020f 	and.w	r2, r3, #15
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	00db      	lsls	r3, r3, #3
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	3338      	adds	r3, #56	; 0x38
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	4413      	add	r3, r2
 800a504:	3304      	adds	r3, #4
 800a506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2201      	movs	r2, #1
 800a50c:	705a      	strb	r2, [r3, #1]
 800a50e:	e00f      	b.n	800a530 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	f003 020f 	and.w	r2, r3, #15
 800a516:	4613      	mov	r3, r2
 800a518:	00db      	lsls	r3, r3, #3
 800a51a:	4413      	add	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	4413      	add	r3, r2
 800a526:	3304      	adds	r3, #4
 800a528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a536:	78fb      	ldrb	r3, [r7, #3]
 800a538:	f003 030f 	and.w	r3, r3, #15
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d101      	bne.n	800a550 <HAL_PCD_EP_ClrStall+0x86>
 800a54c:	2302      	movs	r3, #2
 800a54e:	e00e      	b.n	800a56e <HAL_PCD_EP_ClrStall+0xa4>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68f9      	ldr	r1, [r7, #12]
 800a55e:	4618      	mov	r0, r3
 800a560:	f006 fb8a 	bl	8010c78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a586:	2b00      	cmp	r3, #0
 800a588:	da0c      	bge.n	800a5a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	f003 020f 	and.w	r2, r3, #15
 800a590:	4613      	mov	r3, r2
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	4413      	add	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	3338      	adds	r3, #56	; 0x38
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	4413      	add	r3, r2
 800a59e:	3304      	adds	r3, #4
 800a5a0:	60fb      	str	r3, [r7, #12]
 800a5a2:	e00c      	b.n	800a5be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	f003 020f 	and.w	r2, r3, #15
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	00db      	lsls	r3, r3, #3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68f9      	ldr	r1, [r7, #12]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f006 f9ad 	bl	8010924 <USB_EPStopXfer>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	3338      	adds	r3, #56	; 0x38
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6a1a      	ldr	r2, [r3, #32]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d901      	bls.n	800a610 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e067      	b.n	800a6e0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	699a      	ldr	r2, [r3, #24]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6a1b      	ldr	r3, [r3, #32]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	429a      	cmp	r2, r3
 800a624:	d902      	bls.n	800a62c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	3303      	adds	r3, #3
 800a630:	089b      	lsrs	r3, r3, #2
 800a632:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a634:	e026      	b.n	800a684 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	69fa      	ldr	r2, [r7, #28]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d902      	bls.n	800a652 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	3303      	adds	r3, #3
 800a656:	089b      	lsrs	r3, r3, #2
 800a658:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6919      	ldr	r1, [r3, #16]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	b2da      	uxtb	r2, r3
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	b29b      	uxth	r3, r3
 800a666:	6978      	ldr	r0, [r7, #20]
 800a668:	f006 fa06 	bl	8010a78 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	691a      	ldr	r2, [r3, #16]
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	441a      	add	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a1a      	ldr	r2, [r3, #32]
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	441a      	add	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	b29b      	uxth	r3, r3
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	429a      	cmp	r2, r3
 800a698:	d809      	bhi.n	800a6ae <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6a1a      	ldr	r2, [r3, #32]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d203      	bcs.n	800a6ae <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1c3      	bne.n	800a636 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	699a      	ldr	r2, [r3, #24]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d811      	bhi.n	800a6de <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	f003 030f 	and.w	r3, r3, #15
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	6939      	ldr	r1, [r7, #16]
 800a6d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6da:	4013      	ands	r3, r2
 800a6dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3720      	adds	r7, #32
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	333c      	adds	r3, #60	; 0x3c
 800a700:	3304      	adds	r3, #4
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4a19      	ldr	r2, [pc, #100]	; (800a780 <PCD_EP_OutXfrComplete_int+0x98>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d124      	bne.n	800a768 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00a      	beq.n	800a73e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a734:	461a      	mov	r2, r3
 800a736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a73a:	6093      	str	r3, [r2, #8]
 800a73c:	e01a      	b.n	800a774 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f003 0320 	and.w	r3, r3, #32
 800a744:	2b00      	cmp	r3, #0
 800a746:	d008      	beq.n	800a75a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a754:	461a      	mov	r2, r3
 800a756:	2320      	movs	r3, #32
 800a758:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f008 fb8b 	bl	8012e7c <HAL_PCD_DataOutStageCallback>
 800a766:	e005      	b.n	800a774 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f008 fb84 	bl	8012e7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	4f54310a 	.word	0x4f54310a

0800a784 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	333c      	adds	r3, #60	; 0x3c
 800a79c:	3304      	adds	r3, #4
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4a0c      	ldr	r2, [pc, #48]	; (800a7e8 <PCD_EP_OutSetupPacket_int+0x64>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d90e      	bls.n	800a7d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d009      	beq.n	800a7d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f008 fb3d 	bl	8012e58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	4f54300a 	.word	0x4f54300a

0800a7ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	70fb      	strb	r3, [r7, #3]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d107      	bne.n	800a81a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a80a:	883b      	ldrh	r3, [r7, #0]
 800a80c:	0419      	lsls	r1, r3, #16
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	430a      	orrs	r2, r1
 800a816:	629a      	str	r2, [r3, #40]	; 0x28
 800a818:	e028      	b.n	800a86c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a820:	0c1b      	lsrs	r3, r3, #16
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	4413      	add	r3, r2
 800a826:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a828:	2300      	movs	r3, #0
 800a82a:	73fb      	strb	r3, [r7, #15]
 800a82c:	e00d      	b.n	800a84a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	3340      	adds	r3, #64	; 0x40
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	0c1b      	lsrs	r3, r3, #16
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	4413      	add	r3, r2
 800a842:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	3301      	adds	r3, #1
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	7bfa      	ldrb	r2, [r7, #15]
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	3b01      	subs	r3, #1
 800a850:	429a      	cmp	r2, r3
 800a852:	d3ec      	bcc.n	800a82e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a854:	883b      	ldrh	r3, [r7, #0]
 800a856:	0418      	lsls	r0, r3, #16
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6819      	ldr	r1, [r3, #0]
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	3b01      	subs	r3, #1
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	4302      	orrs	r2, r0
 800a864:	3340      	adds	r3, #64	; 0x40
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	440b      	add	r3, r1
 800a86a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	887a      	ldrh	r2, [r7, #2]
 800a88c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ce:	f043 0303 	orr.w	r3, r3, #3
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a8e8:	4b05      	ldr	r3, [pc, #20]	; (800a900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a04      	ldr	r2, [pc, #16]	; (800a900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a8ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8f2:	6013      	str	r3, [r2, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	40007000 	.word	0x40007000

0800a904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a908:	4b04      	ldr	r3, [pc, #16]	; (800a91c <HAL_PWREx_GetVoltageRange+0x18>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a910:	4618      	mov	r0, r3
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	40007000 	.word	0x40007000

0800a920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a92e:	d130      	bne.n	800a992 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a930:	4b23      	ldr	r3, [pc, #140]	; (800a9c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a93c:	d038      	beq.n	800a9b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a93e:	4b20      	ldr	r3, [pc, #128]	; (800a9c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a946:	4a1e      	ldr	r2, [pc, #120]	; (800a9c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a94c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a94e:	4b1d      	ldr	r3, [pc, #116]	; (800a9c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2232      	movs	r2, #50	; 0x32
 800a954:	fb02 f303 	mul.w	r3, r2, r3
 800a958:	4a1b      	ldr	r2, [pc, #108]	; (800a9c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a95a:	fba2 2303 	umull	r2, r3, r2, r3
 800a95e:	0c9b      	lsrs	r3, r3, #18
 800a960:	3301      	adds	r3, #1
 800a962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a964:	e002      	b.n	800a96c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3b01      	subs	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a96c:	4b14      	ldr	r3, [pc, #80]	; (800a9c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a978:	d102      	bne.n	800a980 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1f2      	bne.n	800a966 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a980:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a98c:	d110      	bne.n	800a9b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e00f      	b.n	800a9b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a992:	4b0b      	ldr	r3, [pc, #44]	; (800a9c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a99a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a99e:	d007      	beq.n	800a9b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a9a8:	4a05      	ldr	r2, [pc, #20]	; (800a9c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a9aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	40007000 	.word	0x40007000
 800a9c4:	2001c2ec 	.word	0x2001c2ec
 800a9c8:	431bde83 	.word	0x431bde83

0800a9cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	4a04      	ldr	r2, [pc, #16]	; (800a9e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a9d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9da:	6053      	str	r3, [r2, #4]
}
 800a9dc:	bf00      	nop
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40007000 	.word	0x40007000

0800a9ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800a9f0:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4a04      	ldr	r2, [pc, #16]	; (800aa08 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a9f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9fa:	6053      	str	r3, [r2, #4]
}
 800a9fc:	bf00      	nop
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	40007000 	.word	0x40007000

0800aa0c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af02      	add	r7, sp, #8
 800aa12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800aa14:	f7fb ffa0 	bl	8006958 <HAL_GetTick>
 800aa18:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	e069      	b.n	800aaf8 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10b      	bne.n	800aa48 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7f7 fa53 	bl	8001ee4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800aa3e:	f241 3188 	movw	r1, #5000	; 0x1388
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f85e 	bl	800ab04 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	021a      	lsls	r2, r3, #8
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2120      	movs	r1, #32
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f856 	bl	800ab20 <QSPI_WaitFlagStateUntilTimeout>
 800aa74:	4603      	mov	r3, r0
 800aa76:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d137      	bne.n	800aaee <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa88:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6852      	ldr	r2, [r2, #4]
 800aa90:	0611      	lsls	r1, r2, #24
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	68d2      	ldr	r2, [r2, #12]
 800aa96:	4311      	orrs	r1, r2
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	69d2      	ldr	r2, [r2, #28]
 800aa9c:	4311      	orrs	r1, r2
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	6a12      	ldr	r2, [r2, #32]
 800aaa2:	4311      	orrs	r1, r2
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6812      	ldr	r2, [r2, #0]
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <HAL_QSPI_Init+0xf4>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6912      	ldr	r2, [r2, #16]
 800aaba:	0411      	lsls	r1, r2, #16
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6952      	ldr	r2, [r2, #20]
 800aac0:	4311      	orrs	r1, r2
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	6992      	ldr	r2, [r2, #24]
 800aac6:	4311      	orrs	r1, r2
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	6812      	ldr	r2, [r2, #0]
 800aacc:	430b      	orrs	r3, r1
 800aace:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0201 	orr.w	r2, r2, #1
 800aade:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800aaf6:	7afb      	ldrb	r3, [r7, #11]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	ffe0f8fe 	.word	0xffe0f8fe

0800ab04 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	603b      	str	r3, [r7, #0]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ab30:	e01a      	b.n	800ab68 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab38:	d016      	beq.n	800ab68 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab3a:	f7fb ff0d 	bl	8006958 <HAL_GetTick>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d302      	bcc.n	800ab50 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10b      	bne.n	800ab68 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2204      	movs	r2, #4
 800ab54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab5c:	f043 0201 	orr.w	r2, r3, #1
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e00e      	b.n	800ab86 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689a      	ldr	r2, [r3, #8]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	4013      	ands	r3, r2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	bf14      	ite	ne
 800ab76:	2301      	movne	r3, #1
 800ab78:	2300      	moveq	r3, #0
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d1d6      	bne.n	800ab32 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	f000 bc08 	b.w	800b3b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aba4:	4b96      	ldr	r3, [pc, #600]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	f003 030c 	and.w	r3, r3, #12
 800abac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abae:	4b94      	ldr	r3, [pc, #592]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	f003 0303 	and.w	r3, r3, #3
 800abb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0310 	and.w	r3, r3, #16
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 80e4 	beq.w	800ad8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d007      	beq.n	800abdc <HAL_RCC_OscConfig+0x4c>
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	2b0c      	cmp	r3, #12
 800abd0:	f040 808b 	bne.w	800acea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	f040 8087 	bne.w	800acea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800abdc:	4b88      	ldr	r3, [pc, #544]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <HAL_RCC_OscConfig+0x64>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e3df      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a1a      	ldr	r2, [r3, #32]
 800abf8:	4b81      	ldr	r3, [pc, #516]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0308 	and.w	r3, r3, #8
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <HAL_RCC_OscConfig+0x7e>
 800ac04:	4b7e      	ldr	r3, [pc, #504]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac0c:	e005      	b.n	800ac1a <HAL_RCC_OscConfig+0x8a>
 800ac0e:	4b7c      	ldr	r3, [pc, #496]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac14:	091b      	lsrs	r3, r3, #4
 800ac16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d223      	bcs.n	800ac66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 fd92 	bl	800b74c <RCC_SetFlashLatencyFromMSIRange>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e3c0      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ac32:	4b73      	ldr	r3, [pc, #460]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a72      	ldr	r2, [pc, #456]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac38:	f043 0308 	orr.w	r3, r3, #8
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	4b70      	ldr	r3, [pc, #448]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	496d      	ldr	r1, [pc, #436]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ac50:	4b6b      	ldr	r3, [pc, #428]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	4968      	ldr	r1, [pc, #416]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	604b      	str	r3, [r1, #4]
 800ac64:	e025      	b.n	800acb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ac66:	4b66      	ldr	r3, [pc, #408]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a65      	ldr	r2, [pc, #404]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac6c:	f043 0308 	orr.w	r3, r3, #8
 800ac70:	6013      	str	r3, [r2, #0]
 800ac72:	4b63      	ldr	r3, [pc, #396]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	4960      	ldr	r1, [pc, #384]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac80:	4313      	orrs	r3, r2
 800ac82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ac84:	4b5e      	ldr	r3, [pc, #376]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	495b      	ldr	r1, [pc, #364]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ac94:	4313      	orrs	r3, r2
 800ac96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d109      	bne.n	800acb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 fd52 	bl	800b74c <RCC_SetFlashLatencyFromMSIRange>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e380      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800acb2:	f000 fc87 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800acb6:	4602      	mov	r2, r0
 800acb8:	4b51      	ldr	r3, [pc, #324]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	091b      	lsrs	r3, r3, #4
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	4950      	ldr	r1, [pc, #320]	; (800ae04 <HAL_RCC_OscConfig+0x274>)
 800acc4:	5ccb      	ldrb	r3, [r1, r3]
 800acc6:	f003 031f 	and.w	r3, r3, #31
 800acca:	fa22 f303 	lsr.w	r3, r2, r3
 800acce:	4a4e      	ldr	r2, [pc, #312]	; (800ae08 <HAL_RCC_OscConfig+0x278>)
 800acd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800acd2:	4b4e      	ldr	r3, [pc, #312]	; (800ae0c <HAL_RCC_OscConfig+0x27c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fb fdee 	bl	80068b8 <HAL_InitTick>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d052      	beq.n	800ad8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	e364      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d032      	beq.n	800ad58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800acf2:	4b43      	ldr	r3, [pc, #268]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a42      	ldr	r2, [pc, #264]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800acf8:	f043 0301 	orr.w	r3, r3, #1
 800acfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800acfe:	f7fb fe2b 	bl	8006958 <HAL_GetTick>
 800ad02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ad04:	e008      	b.n	800ad18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ad06:	f7fb fe27 	bl	8006958 <HAL_GetTick>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d901      	bls.n	800ad18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	e34d      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ad18:	4b39      	ldr	r3, [pc, #228]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0302 	and.w	r3, r3, #2
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0f0      	beq.n	800ad06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad24:	4b36      	ldr	r3, [pc, #216]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a35      	ldr	r2, [pc, #212]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad2a:	f043 0308 	orr.w	r3, r3, #8
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	4b33      	ldr	r3, [pc, #204]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	4930      	ldr	r1, [pc, #192]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad42:	4b2f      	ldr	r3, [pc, #188]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	021b      	lsls	r3, r3, #8
 800ad50:	492b      	ldr	r1, [pc, #172]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	604b      	str	r3, [r1, #4]
 800ad56:	e01a      	b.n	800ad8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ad58:	4b29      	ldr	r3, [pc, #164]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a28      	ldr	r2, [pc, #160]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad5e:	f023 0301 	bic.w	r3, r3, #1
 800ad62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ad64:	f7fb fdf8 	bl	8006958 <HAL_GetTick>
 800ad68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ad6a:	e008      	b.n	800ad7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ad6c:	f7fb fdf4 	bl	8006958 <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d901      	bls.n	800ad7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e31a      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ad7e:	4b20      	ldr	r3, [pc, #128]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0302 	and.w	r3, r3, #2
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1f0      	bne.n	800ad6c <HAL_RCC_OscConfig+0x1dc>
 800ad8a:	e000      	b.n	800ad8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ad8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d073      	beq.n	800ae82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b08      	cmp	r3, #8
 800ad9e:	d005      	beq.n	800adac <HAL_RCC_OscConfig+0x21c>
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	2b0c      	cmp	r3, #12
 800ada4:	d10e      	bne.n	800adc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2b03      	cmp	r3, #3
 800adaa:	d10b      	bne.n	800adc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adac:	4b14      	ldr	r3, [pc, #80]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d063      	beq.n	800ae80 <HAL_RCC_OscConfig+0x2f0>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d15f      	bne.n	800ae80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e2f7      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adcc:	d106      	bne.n	800addc <HAL_RCC_OscConfig+0x24c>
 800adce:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a0b      	ldr	r2, [pc, #44]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800add4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	e025      	b.n	800ae28 <HAL_RCC_OscConfig+0x298>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ade4:	d114      	bne.n	800ae10 <HAL_RCC_OscConfig+0x280>
 800ade6:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a05      	ldr	r2, [pc, #20]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800adec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	4b03      	ldr	r3, [pc, #12]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a02      	ldr	r2, [pc, #8]	; (800ae00 <HAL_RCC_OscConfig+0x270>)
 800adf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	e013      	b.n	800ae28 <HAL_RCC_OscConfig+0x298>
 800ae00:	40021000 	.word	0x40021000
 800ae04:	080145b4 	.word	0x080145b4
 800ae08:	2001c2ec 	.word	0x2001c2ec
 800ae0c:	2001c420 	.word	0x2001c420
 800ae10:	4ba0      	ldr	r3, [pc, #640]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a9f      	ldr	r2, [pc, #636]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800ae16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	4b9d      	ldr	r3, [pc, #628]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a9c      	ldr	r2, [pc, #624]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800ae22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d013      	beq.n	800ae58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae30:	f7fb fd92 	bl	8006958 <HAL_GetTick>
 800ae34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae36:	e008      	b.n	800ae4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae38:	f7fb fd8e 	bl	8006958 <HAL_GetTick>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	2b64      	cmp	r3, #100	; 0x64
 800ae44:	d901      	bls.n	800ae4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e2b4      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae4a:	4b92      	ldr	r3, [pc, #584]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d0f0      	beq.n	800ae38 <HAL_RCC_OscConfig+0x2a8>
 800ae56:	e014      	b.n	800ae82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae58:	f7fb fd7e 	bl	8006958 <HAL_GetTick>
 800ae5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ae5e:	e008      	b.n	800ae72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae60:	f7fb fd7a 	bl	8006958 <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	2b64      	cmp	r3, #100	; 0x64
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e2a0      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ae72:	4b88      	ldr	r3, [pc, #544]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1f0      	bne.n	800ae60 <HAL_RCC_OscConfig+0x2d0>
 800ae7e:	e000      	b.n	800ae82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 0302 	and.w	r3, r3, #2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d060      	beq.n	800af50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d005      	beq.n	800aea0 <HAL_RCC_OscConfig+0x310>
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	2b0c      	cmp	r3, #12
 800ae98:	d119      	bne.n	800aece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d116      	bne.n	800aece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aea0:	4b7c      	ldr	r3, [pc, #496]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d005      	beq.n	800aeb8 <HAL_RCC_OscConfig+0x328>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e27d      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aeb8:	4b76      	ldr	r3, [pc, #472]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	061b      	lsls	r3, r3, #24
 800aec6:	4973      	ldr	r1, [pc, #460]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aecc:	e040      	b.n	800af50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d023      	beq.n	800af1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aed6:	4b6f      	ldr	r3, [pc, #444]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a6e      	ldr	r2, [pc, #440]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800aedc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee2:	f7fb fd39 	bl	8006958 <HAL_GetTick>
 800aee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aee8:	e008      	b.n	800aefc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aeea:	f7fb fd35 	bl	8006958 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d901      	bls.n	800aefc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e25b      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aefc:	4b65      	ldr	r3, [pc, #404]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0f0      	beq.n	800aeea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af08:	4b62      	ldr	r3, [pc, #392]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	061b      	lsls	r3, r3, #24
 800af16:	495f      	ldr	r1, [pc, #380]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	604b      	str	r3, [r1, #4]
 800af1c:	e018      	b.n	800af50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af1e:	4b5d      	ldr	r3, [pc, #372]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a5c      	ldr	r2, [pc, #368]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800af24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af2a:	f7fb fd15 	bl	8006958 <HAL_GetTick>
 800af2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800af30:	e008      	b.n	800af44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af32:	f7fb fd11 	bl	8006958 <HAL_GetTick>
 800af36:	4602      	mov	r2, r0
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d901      	bls.n	800af44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e237      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800af44:	4b53      	ldr	r3, [pc, #332]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1f0      	bne.n	800af32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0308 	and.w	r3, r3, #8
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d03c      	beq.n	800afd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d01c      	beq.n	800af9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af64:	4b4b      	ldr	r3, [pc, #300]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800af66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af6a:	4a4a      	ldr	r2, [pc, #296]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800af6c:	f043 0301 	orr.w	r3, r3, #1
 800af70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af74:	f7fb fcf0 	bl	8006958 <HAL_GetTick>
 800af78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800af7a:	e008      	b.n	800af8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af7c:	f7fb fcec 	bl	8006958 <HAL_GetTick>
 800af80:	4602      	mov	r2, r0
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d901      	bls.n	800af8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e212      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800af8e:	4b41      	ldr	r3, [pc, #260]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800af90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af94:	f003 0302 	and.w	r3, r3, #2
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0ef      	beq.n	800af7c <HAL_RCC_OscConfig+0x3ec>
 800af9c:	e01b      	b.n	800afd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af9e:	4b3d      	ldr	r3, [pc, #244]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800afa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afa4:	4a3b      	ldr	r2, [pc, #236]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800afa6:	f023 0301 	bic.w	r3, r3, #1
 800afaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afae:	f7fb fcd3 	bl	8006958 <HAL_GetTick>
 800afb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800afb4:	e008      	b.n	800afc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afb6:	f7fb fccf 	bl	8006958 <HAL_GetTick>
 800afba:	4602      	mov	r2, r0
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d901      	bls.n	800afc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e1f5      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800afc8:	4b32      	ldr	r3, [pc, #200]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800afca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afce:	f003 0302 	and.w	r3, r3, #2
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1ef      	bne.n	800afb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0304 	and.w	r3, r3, #4
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 80a6 	beq.w	800b130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afe4:	2300      	movs	r3, #0
 800afe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800afe8:	4b2a      	ldr	r3, [pc, #168]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800afea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10d      	bne.n	800b010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aff4:	4b27      	ldr	r3, [pc, #156]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800aff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff8:	4a26      	ldr	r2, [pc, #152]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800affa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800affe:	6593      	str	r3, [r2, #88]	; 0x58
 800b000:	4b24      	ldr	r3, [pc, #144]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800b002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b008:	60bb      	str	r3, [r7, #8]
 800b00a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b00c:	2301      	movs	r3, #1
 800b00e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b010:	4b21      	ldr	r3, [pc, #132]	; (800b098 <HAL_RCC_OscConfig+0x508>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d118      	bne.n	800b04e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b01c:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <HAL_RCC_OscConfig+0x508>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a1d      	ldr	r2, [pc, #116]	; (800b098 <HAL_RCC_OscConfig+0x508>)
 800b022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b028:	f7fb fc96 	bl	8006958 <HAL_GetTick>
 800b02c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b02e:	e008      	b.n	800b042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b030:	f7fb fc92 	bl	8006958 <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d901      	bls.n	800b042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e1b8      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b042:	4b15      	ldr	r3, [pc, #84]	; (800b098 <HAL_RCC_OscConfig+0x508>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0f0      	beq.n	800b030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d108      	bne.n	800b068 <HAL_RCC_OscConfig+0x4d8>
 800b056:	4b0f      	ldr	r3, [pc, #60]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800b058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b05c:	4a0d      	ldr	r2, [pc, #52]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800b05e:	f043 0301 	orr.w	r3, r3, #1
 800b062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b066:	e029      	b.n	800b0bc <HAL_RCC_OscConfig+0x52c>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	2b05      	cmp	r3, #5
 800b06e:	d115      	bne.n	800b09c <HAL_RCC_OscConfig+0x50c>
 800b070:	4b08      	ldr	r3, [pc, #32]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800b072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b076:	4a07      	ldr	r2, [pc, #28]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800b078:	f043 0304 	orr.w	r3, r3, #4
 800b07c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b080:	4b04      	ldr	r3, [pc, #16]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800b082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b086:	4a03      	ldr	r2, [pc, #12]	; (800b094 <HAL_RCC_OscConfig+0x504>)
 800b088:	f043 0301 	orr.w	r3, r3, #1
 800b08c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b090:	e014      	b.n	800b0bc <HAL_RCC_OscConfig+0x52c>
 800b092:	bf00      	nop
 800b094:	40021000 	.word	0x40021000
 800b098:	40007000 	.word	0x40007000
 800b09c:	4b9d      	ldr	r3, [pc, #628]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0a2:	4a9c      	ldr	r2, [pc, #624]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b0a4:	f023 0301 	bic.w	r3, r3, #1
 800b0a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b0ac:	4b99      	ldr	r3, [pc, #612]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b2:	4a98      	ldr	r2, [pc, #608]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b0b4:	f023 0304 	bic.w	r3, r3, #4
 800b0b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d016      	beq.n	800b0f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0c4:	f7fb fc48 	bl	8006958 <HAL_GetTick>
 800b0c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0ca:	e00a      	b.n	800b0e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0cc:	f7fb fc44 	bl	8006958 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e168      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0e2:	4b8c      	ldr	r3, [pc, #560]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0e8:	f003 0302 	and.w	r3, r3, #2
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0ed      	beq.n	800b0cc <HAL_RCC_OscConfig+0x53c>
 800b0f0:	e015      	b.n	800b11e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0f2:	f7fb fc31 	bl	8006958 <HAL_GetTick>
 800b0f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b0f8:	e00a      	b.n	800b110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0fa:	f7fb fc2d 	bl	8006958 <HAL_GetTick>
 800b0fe:	4602      	mov	r2, r0
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	f241 3288 	movw	r2, #5000	; 0x1388
 800b108:	4293      	cmp	r3, r2
 800b10a:	d901      	bls.n	800b110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e151      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b110:	4b80      	ldr	r3, [pc, #512]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b116:	f003 0302 	and.w	r3, r3, #2
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1ed      	bne.n	800b0fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b11e:	7ffb      	ldrb	r3, [r7, #31]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d105      	bne.n	800b130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b124:	4b7b      	ldr	r3, [pc, #492]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b128:	4a7a      	ldr	r2, [pc, #488]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b12a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b12e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0320 	and.w	r3, r3, #32
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d03c      	beq.n	800b1b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b140:	2b00      	cmp	r3, #0
 800b142:	d01c      	beq.n	800b17e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b144:	4b73      	ldr	r3, [pc, #460]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b14a:	4a72      	ldr	r2, [pc, #456]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b14c:	f043 0301 	orr.w	r3, r3, #1
 800b150:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b154:	f7fb fc00 	bl	8006958 <HAL_GetTick>
 800b158:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b15a:	e008      	b.n	800b16e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b15c:	f7fb fbfc 	bl	8006958 <HAL_GetTick>
 800b160:	4602      	mov	r2, r0
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	2b02      	cmp	r3, #2
 800b168:	d901      	bls.n	800b16e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e122      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b16e:	4b69      	ldr	r3, [pc, #420]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b174:	f003 0302 	and.w	r3, r3, #2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0ef      	beq.n	800b15c <HAL_RCC_OscConfig+0x5cc>
 800b17c:	e01b      	b.n	800b1b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b17e:	4b65      	ldr	r3, [pc, #404]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b184:	4a63      	ldr	r2, [pc, #396]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b186:	f023 0301 	bic.w	r3, r3, #1
 800b18a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b18e:	f7fb fbe3 	bl	8006958 <HAL_GetTick>
 800b192:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b194:	e008      	b.n	800b1a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b196:	f7fb fbdf 	bl	8006958 <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d901      	bls.n	800b1a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e105      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b1a8:	4b5a      	ldr	r3, [pc, #360]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b1aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1ae:	f003 0302 	and.w	r3, r3, #2
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1ef      	bne.n	800b196 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f000 80f9 	beq.w	800b3b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	f040 80cf 	bne.w	800b368 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b1ca:	4b52      	ldr	r3, [pc, #328]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	f003 0203 	and.w	r2, r3, #3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d12c      	bne.n	800b238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d123      	bne.n	800b238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d11b      	bne.n	800b238 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d113      	bne.n	800b238 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b21a:	085b      	lsrs	r3, r3, #1
 800b21c:	3b01      	subs	r3, #1
 800b21e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b220:	429a      	cmp	r2, r3
 800b222:	d109      	bne.n	800b238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22e:	085b      	lsrs	r3, r3, #1
 800b230:	3b01      	subs	r3, #1
 800b232:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b234:	429a      	cmp	r2, r3
 800b236:	d071      	beq.n	800b31c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	2b0c      	cmp	r3, #12
 800b23c:	d068      	beq.n	800b310 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b23e:	4b35      	ldr	r3, [pc, #212]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d105      	bne.n	800b256 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b24a:	4b32      	ldr	r3, [pc, #200]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e0ac      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b25a:	4b2e      	ldr	r3, [pc, #184]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a2d      	ldr	r2, [pc, #180]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b264:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b266:	f7fb fb77 	bl	8006958 <HAL_GetTick>
 800b26a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b26c:	e008      	b.n	800b280 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b26e:	f7fb fb73 	bl	8006958 <HAL_GetTick>
 800b272:	4602      	mov	r2, r0
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d901      	bls.n	800b280 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e099      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b280:	4b24      	ldr	r3, [pc, #144]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1f0      	bne.n	800b26e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b28c:	4b21      	ldr	r3, [pc, #132]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b28e:	68da      	ldr	r2, [r3, #12]
 800b290:	4b21      	ldr	r3, [pc, #132]	; (800b318 <HAL_RCC_OscConfig+0x788>)
 800b292:	4013      	ands	r3, r2
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b29c:	3a01      	subs	r2, #1
 800b29e:	0112      	lsls	r2, r2, #4
 800b2a0:	4311      	orrs	r1, r2
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b2a6:	0212      	lsls	r2, r2, #8
 800b2a8:	4311      	orrs	r1, r2
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b2ae:	0852      	lsrs	r2, r2, #1
 800b2b0:	3a01      	subs	r2, #1
 800b2b2:	0552      	lsls	r2, r2, #21
 800b2b4:	4311      	orrs	r1, r2
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b2ba:	0852      	lsrs	r2, r2, #1
 800b2bc:	3a01      	subs	r2, #1
 800b2be:	0652      	lsls	r2, r2, #25
 800b2c0:	4311      	orrs	r1, r2
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b2c6:	06d2      	lsls	r2, r2, #27
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	4912      	ldr	r1, [pc, #72]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b2d0:	4b10      	ldr	r3, [pc, #64]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a0f      	ldr	r2, [pc, #60]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b2d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b2dc:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	4a0c      	ldr	r2, [pc, #48]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b2e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b2e8:	f7fb fb36 	bl	8006958 <HAL_GetTick>
 800b2ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2ee:	e008      	b.n	800b302 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2f0:	f7fb fb32 	bl	8006958 <HAL_GetTick>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d901      	bls.n	800b302 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e058      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b302:	4b04      	ldr	r3, [pc, #16]	; (800b314 <HAL_RCC_OscConfig+0x784>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0f0      	beq.n	800b2f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b30e:	e050      	b.n	800b3b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e04f      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
 800b314:	40021000 	.word	0x40021000
 800b318:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b31c:	4b27      	ldr	r3, [pc, #156]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d144      	bne.n	800b3b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b328:	4b24      	ldr	r3, [pc, #144]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a23      	ldr	r2, [pc, #140]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b32e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b332:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b334:	4b21      	ldr	r3, [pc, #132]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	4a20      	ldr	r2, [pc, #128]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b33a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b33e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b340:	f7fb fb0a 	bl	8006958 <HAL_GetTick>
 800b344:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b346:	e008      	b.n	800b35a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b348:	f7fb fb06 	bl	8006958 <HAL_GetTick>
 800b34c:	4602      	mov	r2, r0
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d901      	bls.n	800b35a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e02c      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b35a:	4b18      	ldr	r3, [pc, #96]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0f0      	beq.n	800b348 <HAL_RCC_OscConfig+0x7b8>
 800b366:	e024      	b.n	800b3b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	2b0c      	cmp	r3, #12
 800b36c:	d01f      	beq.n	800b3ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b36e:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a12      	ldr	r2, [pc, #72]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b37a:	f7fb faed 	bl	8006958 <HAL_GetTick>
 800b37e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b380:	e008      	b.n	800b394 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b382:	f7fb fae9 	bl	8006958 <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d901      	bls.n	800b394 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e00f      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b394:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1f0      	bne.n	800b382 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b3a0:	4b06      	ldr	r3, [pc, #24]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	4905      	ldr	r1, [pc, #20]	; (800b3bc <HAL_RCC_OscConfig+0x82c>)
 800b3a6:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <HAL_RCC_OscConfig+0x830>)
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	60cb      	str	r3, [r1, #12]
 800b3ac:	e001      	b.n	800b3b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e000      	b.n	800b3b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3720      	adds	r7, #32
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	40021000 	.word	0x40021000
 800b3c0:	feeefffc 	.word	0xfeeefffc

0800b3c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e0e7      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3d8:	4b75      	ldr	r3, [pc, #468]	; (800b5b0 <HAL_RCC_ClockConfig+0x1ec>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 0307 	and.w	r3, r3, #7
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d910      	bls.n	800b408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3e6:	4b72      	ldr	r3, [pc, #456]	; (800b5b0 <HAL_RCC_ClockConfig+0x1ec>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f023 0207 	bic.w	r2, r3, #7
 800b3ee:	4970      	ldr	r1, [pc, #448]	; (800b5b0 <HAL_RCC_ClockConfig+0x1ec>)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3f6:	4b6e      	ldr	r3, [pc, #440]	; (800b5b0 <HAL_RCC_ClockConfig+0x1ec>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	429a      	cmp	r2, r3
 800b402:	d001      	beq.n	800b408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e0cf      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d010      	beq.n	800b436 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	4b66      	ldr	r3, [pc, #408]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b420:	429a      	cmp	r2, r3
 800b422:	d908      	bls.n	800b436 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b424:	4b63      	ldr	r3, [pc, #396]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	4960      	ldr	r1, [pc, #384]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b432:	4313      	orrs	r3, r2
 800b434:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d04c      	beq.n	800b4dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b03      	cmp	r3, #3
 800b448:	d107      	bne.n	800b45a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b44a:	4b5a      	ldr	r3, [pc, #360]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d121      	bne.n	800b49a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e0a6      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d107      	bne.n	800b472 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b462:	4b54      	ldr	r3, [pc, #336]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d115      	bne.n	800b49a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e09a      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d107      	bne.n	800b48a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b47a:	4b4e      	ldr	r3, [pc, #312]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b00      	cmp	r3, #0
 800b484:	d109      	bne.n	800b49a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e08e      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b48a:	4b4a      	ldr	r3, [pc, #296]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e086      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b49a:	4b46      	ldr	r3, [pc, #280]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f023 0203 	bic.w	r2, r3, #3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	4943      	ldr	r1, [pc, #268]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ac:	f7fb fa54 	bl	8006958 <HAL_GetTick>
 800b4b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4b2:	e00a      	b.n	800b4ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4b4:	f7fb fa50 	bl	8006958 <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d901      	bls.n	800b4ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e06e      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4ca:	4b3a      	ldr	r3, [pc, #232]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f003 020c 	and.w	r2, r3, #12
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d1eb      	bne.n	800b4b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0302 	and.w	r3, r3, #2
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d010      	beq.n	800b50a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	4b31      	ldr	r3, [pc, #196]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d208      	bcs.n	800b50a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4f8:	4b2e      	ldr	r3, [pc, #184]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	492b      	ldr	r1, [pc, #172]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b506:	4313      	orrs	r3, r2
 800b508:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b50a:	4b29      	ldr	r3, [pc, #164]	; (800b5b0 <HAL_RCC_ClockConfig+0x1ec>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0307 	and.w	r3, r3, #7
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d210      	bcs.n	800b53a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b518:	4b25      	ldr	r3, [pc, #148]	; (800b5b0 <HAL_RCC_ClockConfig+0x1ec>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f023 0207 	bic.w	r2, r3, #7
 800b520:	4923      	ldr	r1, [pc, #140]	; (800b5b0 <HAL_RCC_ClockConfig+0x1ec>)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	4313      	orrs	r3, r2
 800b526:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b528:	4b21      	ldr	r3, [pc, #132]	; (800b5b0 <HAL_RCC_ClockConfig+0x1ec>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0307 	and.w	r3, r3, #7
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	429a      	cmp	r2, r3
 800b534:	d001      	beq.n	800b53a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e036      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0304 	and.w	r3, r3, #4
 800b542:	2b00      	cmp	r3, #0
 800b544:	d008      	beq.n	800b558 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b546:	4b1b      	ldr	r3, [pc, #108]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	4918      	ldr	r1, [pc, #96]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b554:	4313      	orrs	r3, r2
 800b556:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0308 	and.w	r3, r3, #8
 800b560:	2b00      	cmp	r3, #0
 800b562:	d009      	beq.n	800b578 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b564:	4b13      	ldr	r3, [pc, #76]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	4910      	ldr	r1, [pc, #64]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b574:	4313      	orrs	r3, r2
 800b576:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b578:	f000 f824 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800b57c:	4602      	mov	r2, r0
 800b57e:	4b0d      	ldr	r3, [pc, #52]	; (800b5b4 <HAL_RCC_ClockConfig+0x1f0>)
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	091b      	lsrs	r3, r3, #4
 800b584:	f003 030f 	and.w	r3, r3, #15
 800b588:	490b      	ldr	r1, [pc, #44]	; (800b5b8 <HAL_RCC_ClockConfig+0x1f4>)
 800b58a:	5ccb      	ldrb	r3, [r1, r3]
 800b58c:	f003 031f 	and.w	r3, r3, #31
 800b590:	fa22 f303 	lsr.w	r3, r2, r3
 800b594:	4a09      	ldr	r2, [pc, #36]	; (800b5bc <HAL_RCC_ClockConfig+0x1f8>)
 800b596:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b598:	4b09      	ldr	r3, [pc, #36]	; (800b5c0 <HAL_RCC_ClockConfig+0x1fc>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fb f98b 	bl	80068b8 <HAL_InitTick>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	72fb      	strb	r3, [r7, #11]

  return status;
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	40022000 	.word	0x40022000
 800b5b4:	40021000 	.word	0x40021000
 800b5b8:	080145b4 	.word	0x080145b4
 800b5bc:	2001c2ec 	.word	0x2001c2ec
 800b5c0:	2001c420 	.word	0x2001c420

0800b5c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b089      	sub	sp, #36	; 0x24
 800b5c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61fb      	str	r3, [r7, #28]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5d2:	4b3e      	ldr	r3, [pc, #248]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f003 030c 	and.w	r3, r3, #12
 800b5da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b5dc:	4b3b      	ldr	r3, [pc, #236]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	f003 0303 	and.w	r3, r3, #3
 800b5e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <HAL_RCC_GetSysClockFreq+0x34>
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b0c      	cmp	r3, #12
 800b5f0:	d121      	bne.n	800b636 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d11e      	bne.n	800b636 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b5f8:	4b34      	ldr	r3, [pc, #208]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0308 	and.w	r3, r3, #8
 800b600:	2b00      	cmp	r3, #0
 800b602:	d107      	bne.n	800b614 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b604:	4b31      	ldr	r3, [pc, #196]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b60a:	0a1b      	lsrs	r3, r3, #8
 800b60c:	f003 030f 	and.w	r3, r3, #15
 800b610:	61fb      	str	r3, [r7, #28]
 800b612:	e005      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b614:	4b2d      	ldr	r3, [pc, #180]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	091b      	lsrs	r3, r3, #4
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b620:	4a2b      	ldr	r2, [pc, #172]	; (800b6d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b628:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10d      	bne.n	800b64c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b634:	e00a      	b.n	800b64c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	2b04      	cmp	r3, #4
 800b63a:	d102      	bne.n	800b642 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b63c:	4b25      	ldr	r3, [pc, #148]	; (800b6d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800b63e:	61bb      	str	r3, [r7, #24]
 800b640:	e004      	b.n	800b64c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	2b08      	cmp	r3, #8
 800b646:	d101      	bne.n	800b64c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b648:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800b64a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	2b0c      	cmp	r3, #12
 800b650:	d134      	bne.n	800b6bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b652:	4b1e      	ldr	r3, [pc, #120]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	f003 0303 	and.w	r3, r3, #3
 800b65a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d003      	beq.n	800b66a <HAL_RCC_GetSysClockFreq+0xa6>
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2b03      	cmp	r3, #3
 800b666:	d003      	beq.n	800b670 <HAL_RCC_GetSysClockFreq+0xac>
 800b668:	e005      	b.n	800b676 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b66a:	4b1a      	ldr	r3, [pc, #104]	; (800b6d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800b66c:	617b      	str	r3, [r7, #20]
      break;
 800b66e:	e005      	b.n	800b67c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b670:	4b19      	ldr	r3, [pc, #100]	; (800b6d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800b672:	617b      	str	r3, [r7, #20]
      break;
 800b674:	e002      	b.n	800b67c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	617b      	str	r3, [r7, #20]
      break;
 800b67a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b67c:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	091b      	lsrs	r3, r3, #4
 800b682:	f003 0307 	and.w	r3, r3, #7
 800b686:	3301      	adds	r3, #1
 800b688:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b68a:	4b10      	ldr	r3, [pc, #64]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	0a1b      	lsrs	r3, r3, #8
 800b690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	fb03 f202 	mul.w	r2, r3, r2
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x108>)
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	0e5b      	lsrs	r3, r3, #25
 800b6a8:	f003 0303 	and.w	r3, r3, #3
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b6bc:	69bb      	ldr	r3, [r7, #24]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3724      	adds	r7, #36	; 0x24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	40021000 	.word	0x40021000
 800b6d0:	080145cc 	.word	0x080145cc
 800b6d4:	00f42400 	.word	0x00f42400
 800b6d8:	007a1200 	.word	0x007a1200

0800b6dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6e0:	4b03      	ldr	r3, [pc, #12]	; (800b6f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	2001c2ec 	.word	0x2001c2ec

0800b6f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b6f8:	f7ff fff0 	bl	800b6dc <HAL_RCC_GetHCLKFreq>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	4b06      	ldr	r3, [pc, #24]	; (800b718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	0a1b      	lsrs	r3, r3, #8
 800b704:	f003 0307 	and.w	r3, r3, #7
 800b708:	4904      	ldr	r1, [pc, #16]	; (800b71c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b70a:	5ccb      	ldrb	r3, [r1, r3]
 800b70c:	f003 031f 	and.w	r3, r3, #31
 800b710:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b714:	4618      	mov	r0, r3
 800b716:	bd80      	pop	{r7, pc}
 800b718:	40021000 	.word	0x40021000
 800b71c:	080145c4 	.word	0x080145c4

0800b720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b724:	f7ff ffda 	bl	800b6dc <HAL_RCC_GetHCLKFreq>
 800b728:	4602      	mov	r2, r0
 800b72a:	4b06      	ldr	r3, [pc, #24]	; (800b744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	0adb      	lsrs	r3, r3, #11
 800b730:	f003 0307 	and.w	r3, r3, #7
 800b734:	4904      	ldr	r1, [pc, #16]	; (800b748 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b736:	5ccb      	ldrb	r3, [r1, r3]
 800b738:	f003 031f 	and.w	r3, r3, #31
 800b73c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b740:	4618      	mov	r0, r3
 800b742:	bd80      	pop	{r7, pc}
 800b744:	40021000 	.word	0x40021000
 800b748:	080145c4 	.word	0x080145c4

0800b74c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b754:	2300      	movs	r3, #0
 800b756:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b758:	4b2a      	ldr	r3, [pc, #168]	; (800b804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b75c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b764:	f7ff f8ce 	bl	800a904 <HAL_PWREx_GetVoltageRange>
 800b768:	6178      	str	r0, [r7, #20]
 800b76a:	e014      	b.n	800b796 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b76c:	4b25      	ldr	r3, [pc, #148]	; (800b804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b770:	4a24      	ldr	r2, [pc, #144]	; (800b804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b776:	6593      	str	r3, [r2, #88]	; 0x58
 800b778:	4b22      	ldr	r3, [pc, #136]	; (800b804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b77c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b784:	f7ff f8be 	bl	800a904 <HAL_PWREx_GetVoltageRange>
 800b788:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b78a:	4b1e      	ldr	r3, [pc, #120]	; (800b804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b78e:	4a1d      	ldr	r2, [pc, #116]	; (800b804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b794:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b79c:	d10b      	bne.n	800b7b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b80      	cmp	r3, #128	; 0x80
 800b7a2:	d919      	bls.n	800b7d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2ba0      	cmp	r3, #160	; 0xa0
 800b7a8:	d902      	bls.n	800b7b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	613b      	str	r3, [r7, #16]
 800b7ae:	e013      	b.n	800b7d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	e010      	b.n	800b7d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b80      	cmp	r3, #128	; 0x80
 800b7ba:	d902      	bls.n	800b7c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b7bc:	2303      	movs	r3, #3
 800b7be:	613b      	str	r3, [r7, #16]
 800b7c0:	e00a      	b.n	800b7d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b80      	cmp	r3, #128	; 0x80
 800b7c6:	d102      	bne.n	800b7ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	613b      	str	r3, [r7, #16]
 800b7cc:	e004      	b.n	800b7d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b70      	cmp	r3, #112	; 0x70
 800b7d2:	d101      	bne.n	800b7d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b7d8:	4b0b      	ldr	r3, [pc, #44]	; (800b808 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f023 0207 	bic.w	r2, r3, #7
 800b7e0:	4909      	ldr	r1, [pc, #36]	; (800b808 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b7e8:	4b07      	ldr	r3, [pc, #28]	; (800b808 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0307 	and.w	r3, r3, #7
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d001      	beq.n	800b7fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e000      	b.n	800b7fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3718      	adds	r7, #24
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	40021000 	.word	0x40021000
 800b808:	40022000 	.word	0x40022000

0800b80c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b814:	2300      	movs	r3, #0
 800b816:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b818:	2300      	movs	r3, #0
 800b81a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b824:	2b00      	cmp	r3, #0
 800b826:	d041      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b82c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b830:	d02a      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b832:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b836:	d824      	bhi.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b83c:	d008      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b83e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b842:	d81e      	bhi.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00a      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b84c:	d010      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b84e:	e018      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b850:	4b86      	ldr	r3, [pc, #536]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	4a85      	ldr	r2, [pc, #532]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b85a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b85c:	e015      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3304      	adds	r3, #4
 800b862:	2100      	movs	r1, #0
 800b864:	4618      	mov	r0, r3
 800b866:	f001 f98d 	bl	800cb84 <RCCEx_PLLSAI1_Config>
 800b86a:	4603      	mov	r3, r0
 800b86c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b86e:	e00c      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3320      	adds	r3, #32
 800b874:	2100      	movs	r1, #0
 800b876:	4618      	mov	r0, r3
 800b878:	f001 fa76 	bl	800cd68 <RCCEx_PLLSAI2_Config>
 800b87c:	4603      	mov	r3, r0
 800b87e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b880:	e003      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	74fb      	strb	r3, [r7, #19]
      break;
 800b886:	e000      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b88a:	7cfb      	ldrb	r3, [r7, #19]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10b      	bne.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b890:	4b76      	ldr	r3, [pc, #472]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b896:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b89e:	4973      	ldr	r1, [pc, #460]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b8a6:	e001      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a8:	7cfb      	ldrb	r3, [r7, #19]
 800b8aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d041      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8c0:	d02a      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b8c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8c6:	d824      	bhi.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b8c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8cc:	d008      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b8ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8d2:	d81e      	bhi.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00a      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b8d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b8dc:	d010      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b8de:	e018      	b.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b8e0:	4b62      	ldr	r3, [pc, #392]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	4a61      	ldr	r2, [pc, #388]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b8e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b8ec:	e015      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f001 f945 	bl	800cb84 <RCCEx_PLLSAI1_Config>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b8fe:	e00c      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3320      	adds	r3, #32
 800b904:	2100      	movs	r1, #0
 800b906:	4618      	mov	r0, r3
 800b908:	f001 fa2e 	bl	800cd68 <RCCEx_PLLSAI2_Config>
 800b90c:	4603      	mov	r3, r0
 800b90e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b910:	e003      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	74fb      	strb	r3, [r7, #19]
      break;
 800b916:	e000      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b91a:	7cfb      	ldrb	r3, [r7, #19]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10b      	bne.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b920:	4b52      	ldr	r3, [pc, #328]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b926:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b92e:	494f      	ldr	r1, [pc, #316]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b930:	4313      	orrs	r3, r2
 800b932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b936:	e001      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b938:	7cfb      	ldrb	r3, [r7, #19]
 800b93a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 80a0 	beq.w	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b94a:	2300      	movs	r3, #0
 800b94c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b94e:	4b47      	ldr	r3, [pc, #284]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b95e:	2300      	movs	r3, #0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00d      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b964:	4b41      	ldr	r3, [pc, #260]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b968:	4a40      	ldr	r2, [pc, #256]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b96a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b96e:	6593      	str	r3, [r2, #88]	; 0x58
 800b970:	4b3e      	ldr	r3, [pc, #248]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b978:	60bb      	str	r3, [r7, #8]
 800b97a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b97c:	2301      	movs	r3, #1
 800b97e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b980:	4b3b      	ldr	r3, [pc, #236]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a3a      	ldr	r2, [pc, #232]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b98a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b98c:	f7fa ffe4 	bl	8006958 <HAL_GetTick>
 800b990:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b992:	e009      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b994:	f7fa ffe0 	bl	8006958 <HAL_GetTick>
 800b998:	4602      	mov	r2, r0
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d902      	bls.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	74fb      	strb	r3, [r7, #19]
        break;
 800b9a6:	e005      	b.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b9a8:	4b31      	ldr	r3, [pc, #196]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d0ef      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b9b4:	7cfb      	ldrb	r3, [r7, #19]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d15c      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b9ba:	4b2c      	ldr	r3, [pc, #176]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d01f      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d019      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b9d8:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b9e4:	4b21      	ldr	r3, [pc, #132]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ea:	4a20      	ldr	r2, [pc, #128]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b9f4:	4b1d      	ldr	r3, [pc, #116]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9fa:	4a1c      	ldr	r2, [pc, #112]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ba04:	4a19      	ldr	r2, [pc, #100]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d016      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba16:	f7fa ff9f 	bl	8006958 <HAL_GetTick>
 800ba1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba1c:	e00b      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba1e:	f7fa ff9b 	bl	8006958 <HAL_GetTick>
 800ba22:	4602      	mov	r2, r0
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d902      	bls.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	74fb      	strb	r3, [r7, #19]
            break;
 800ba34:	e006      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba36:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d0ec      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800ba44:	7cfb      	ldrb	r3, [r7, #19]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10c      	bne.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba4a:	4b08      	ldr	r3, [pc, #32]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba5a:	4904      	ldr	r1, [pc, #16]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ba62:	e009      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba64:	7cfb      	ldrb	r3, [r7, #19]
 800ba66:	74bb      	strb	r3, [r7, #18]
 800ba68:	e006      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800ba6a:	bf00      	nop
 800ba6c:	40021000 	.word	0x40021000
 800ba70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	7cfb      	ldrb	r3, [r7, #19]
 800ba76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ba78:	7c7b      	ldrb	r3, [r7, #17]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d105      	bne.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba7e:	4ba6      	ldr	r3, [pc, #664]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ba80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba82:	4aa5      	ldr	r2, [pc, #660]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ba84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00a      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba96:	4ba0      	ldr	r3, [pc, #640]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ba98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba9c:	f023 0203 	bic.w	r2, r3, #3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	499c      	ldr	r1, [pc, #624]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800baa6:	4313      	orrs	r3, r2
 800baa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 0302 	and.w	r3, r3, #2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00a      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bab8:	4b97      	ldr	r3, [pc, #604]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800baba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800babe:	f023 020c 	bic.w	r2, r3, #12
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac6:	4994      	ldr	r1, [pc, #592]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bac8:	4313      	orrs	r3, r2
 800baca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 0304 	and.w	r3, r3, #4
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bada:	4b8f      	ldr	r3, [pc, #572]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800badc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae8:	498b      	ldr	r1, [pc, #556]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800baea:	4313      	orrs	r3, r2
 800baec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f003 0308 	and.w	r3, r3, #8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bafc:	4b86      	ldr	r3, [pc, #536]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb0a:	4983      	ldr	r1, [pc, #524]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 0310 	and.w	r3, r3, #16
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bb1e:	4b7e      	ldr	r3, [pc, #504]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb2c:	497a      	ldr	r1, [pc, #488]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00a      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb40:	4b75      	ldr	r3, [pc, #468]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb4e:	4972      	ldr	r1, [pc, #456]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00a      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb62:	4b6d      	ldr	r3, [pc, #436]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb70:	4969      	ldr	r1, [pc, #420]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb72:	4313      	orrs	r3, r2
 800bb74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00a      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bb84:	4b64      	ldr	r3, [pc, #400]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb92:	4961      	ldr	r1, [pc, #388]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00a      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bba6:	4b5c      	ldr	r3, [pc, #368]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb4:	4958      	ldr	r1, [pc, #352]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00a      	beq.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bbc8:	4b53      	ldr	r3, [pc, #332]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd6:	4950      	ldr	r1, [pc, #320]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00a      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bbea:	4b4b      	ldr	r3, [pc, #300]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf8:	4947      	ldr	r1, [pc, #284]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00a      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc0c:	4b42      	ldr	r3, [pc, #264]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc12:	f023 0203 	bic.w	r2, r3, #3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc1a:	493f      	ldr	r1, [pc, #252]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d028      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc2e:	4b3a      	ldr	r3, [pc, #232]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc3c:	4936      	ldr	r1, [pc, #216]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc4c:	d106      	bne.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc4e:	4b32      	ldr	r3, [pc, #200]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	4a31      	ldr	r2, [pc, #196]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc58:	60d3      	str	r3, [r2, #12]
 800bc5a:	e011      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc64:	d10c      	bne.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 ff89 	bl	800cb84 <RCCEx_PLLSAI1_Config>
 800bc72:	4603      	mov	r3, r0
 800bc74:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bc76:	7cfb      	ldrb	r3, [r7, #19]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800bc7c:	7cfb      	ldrb	r3, [r7, #19]
 800bc7e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d028      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bc8c:	4b22      	ldr	r3, [pc, #136]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc9a:	491f      	ldr	r1, [pc, #124]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcaa:	d106      	bne.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bcac:	4b1a      	ldr	r3, [pc, #104]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	4a19      	ldr	r2, [pc, #100]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcb6:	60d3      	str	r3, [r2, #12]
 800bcb8:	e011      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcc2:	d10c      	bne.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	2101      	movs	r1, #1
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 ff5a 	bl	800cb84 <RCCEx_PLLSAI1_Config>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bcd4:	7cfb      	ldrb	r3, [r7, #19]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800bcda:	7cfb      	ldrb	r3, [r7, #19]
 800bcdc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d02a      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bcea:	4b0b      	ldr	r3, [pc, #44]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcf8:	4907      	ldr	r1, [pc, #28]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd08:	d108      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd0a:	4b03      	ldr	r3, [pc, #12]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	4a02      	ldr	r2, [pc, #8]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd14:	60d3      	str	r3, [r2, #12]
 800bd16:	e013      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800bd18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd24:	d10c      	bne.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 ff29 	bl	800cb84 <RCCEx_PLLSAI1_Config>
 800bd32:	4603      	mov	r3, r0
 800bd34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bd36:	7cfb      	ldrb	r3, [r7, #19]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800bd3c:	7cfb      	ldrb	r3, [r7, #19]
 800bd3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d02f      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd4c:	4b2c      	ldr	r3, [pc, #176]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bd4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd5a:	4929      	ldr	r1, [pc, #164]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd6a:	d10d      	bne.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	2102      	movs	r1, #2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 ff06 	bl	800cb84 <RCCEx_PLLSAI1_Config>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bd7c:	7cfb      	ldrb	r3, [r7, #19]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d014      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800bd82:	7cfb      	ldrb	r3, [r7, #19]
 800bd84:	74bb      	strb	r3, [r7, #18]
 800bd86:	e011      	b.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd90:	d10c      	bne.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3320      	adds	r3, #32
 800bd96:	2102      	movs	r1, #2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 ffe5 	bl	800cd68 <RCCEx_PLLSAI2_Config>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bda2:	7cfb      	ldrb	r3, [r7, #19]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d001      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800bda8:	7cfb      	ldrb	r3, [r7, #19]
 800bdaa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00b      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bdb8:	4b11      	ldr	r3, [pc, #68]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdbe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdc8:	490d      	ldr	r1, [pc, #52]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00b      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bddc:	4b08      	ldr	r3, [pc, #32]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdec:	4904      	ldr	r1, [pc, #16]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bdf4:	7cbb      	ldrb	r3, [r7, #18]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	40021000 	.word	0x40021000

0800be04 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a77      	ldr	r2, [pc, #476]	; (800bfec <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 800be10:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800be12:	4b77      	ldr	r3, [pc, #476]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	f003 0203 	and.w	r2, r3, #3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800be1e:	4b74      	ldr	r3, [pc, #464]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	091b      	lsrs	r3, r3, #4
 800be24:	f003 0307 	and.w	r3, r3, #7
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800be2e:	4b70      	ldr	r3, [pc, #448]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	0a1b      	lsrs	r3, r3, #8
 800be34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 800be3c:	4b6c      	ldr	r3, [pc, #432]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	0c5b      	lsrs	r3, r3, #17
 800be42:	011b      	lsls	r3, r3, #4
 800be44:	f003 0310 	and.w	r3, r3, #16
 800be48:	1dda      	adds	r2, r3, #7
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800be4e:	4b68      	ldr	r3, [pc, #416]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	0d5b      	lsrs	r3, r3, #21
 800be54:	f003 0303 	and.w	r3, r3, #3
 800be58:	3301      	adds	r3, #1
 800be5a:	005a      	lsls	r2, r3, #1
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800be60:	4b63      	ldr	r3, [pc, #396]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	0e5b      	lsrs	r3, r3, #25
 800be66:	f003 0303 	and.w	r3, r3, #3
 800be6a:	3301      	adds	r3, #1
 800be6c:	005a      	lsls	r2, r3, #1
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685a      	ldr	r2, [r3, #4]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689a      	ldr	r2, [r3, #8]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800be82:	4b5b      	ldr	r3, [pc, #364]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	0a1b      	lsrs	r3, r3, #8
 800be88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 800be90:	4b57      	ldr	r3, [pc, #348]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	0c5b      	lsrs	r3, r3, #17
 800be96:	011b      	lsls	r3, r3, #4
 800be98:	f003 0310 	and.w	r3, r3, #16
 800be9c:	1dda      	adds	r2, r3, #7
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800bea2:	4b53      	ldr	r3, [pc, #332]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	0e5b      	lsrs	r3, r3, #25
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	3301      	adds	r3, #1
 800beae:	005a      	lsls	r2, r3, #1
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 800beb4:	4b4e      	ldr	r3, [pc, #312]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800beb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beba:	f003 0203 	and.w	r2, r3, #3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800bec2:	4b4b      	ldr	r3, [pc, #300]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bec8:	f003 020c 	and.w	r2, r3, #12
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 800bed0:	4b47      	ldr	r3, [pc, #284]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bed6:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 800bede:	4b44      	ldr	r3, [pc, #272]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bee4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 800beec:	4b40      	ldr	r3, [pc, #256]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800beee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 800befa:	4b3d      	ldr	r3, [pc, #244]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800befc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf00:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 800bf08:	4b39      	ldr	r3, [pc, #228]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 800bf16:	4b36      	ldr	r3, [pc, #216]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf1c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 800bf24:	4b32      	ldr	r3, [pc, #200]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 800bf32:	4b2f      	ldr	r3, [pc, #188]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf38:	f003 0203 	and.w	r2, r3, #3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bf40:	4b2b      	ldr	r3, [pc, #172]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf46:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bf4e:	4b28      	ldr	r3, [pc, #160]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf54:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800bf5c:	4b24      	ldr	r3, [pc, #144]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf62:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800bf6a:	4b21      	ldr	r3, [pc, #132]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf70:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 800bf78:	4b1d      	ldr	r3, [pc, #116]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf7e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 800bf88:	4b19      	ldr	r3, [pc, #100]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf8e:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 800bf96:	4b16      	ldr	r3, [pc, #88]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bf98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf9c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800bfa4:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bfa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfaa:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 800bfb2:	4b0f      	ldr	r3, [pc, #60]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bfb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb8:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 800bfc0:	4b0b      	ldr	r3, [pc, #44]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bfc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfc6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800bfd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfd6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	001fffff 	.word	0x001fffff
 800bff0:	40021000 	.word	0x40021000

0800bff4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b088      	sub	sp, #32
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800bffc:	2300      	movs	r3, #0
 800bffe:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c006:	d13e      	bne.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c008:	4bb4      	ldr	r3, [pc, #720]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c00e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c012:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c01a:	d028      	beq.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c022:	f200 858c 	bhi.w	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c02c:	d005      	beq.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c034:	d00e      	beq.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800c036:	f000 bd82 	b.w	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c03a:	4ba8      	ldr	r3, [pc, #672]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c040:	f003 0302 	and.w	r3, r3, #2
 800c044:	2b02      	cmp	r3, #2
 800c046:	f040 857c 	bne.w	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 800c04a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c04e:	61fb      	str	r3, [r7, #28]
      break;
 800c050:	f000 bd77 	b.w	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c054:	4ba1      	ldr	r3, [pc, #644]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b02      	cmp	r3, #2
 800c060:	f040 8571 	bne.w	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 800c064:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c068:	61fb      	str	r3, [r7, #28]
      break;
 800c06a:	f000 bd6c 	b.w	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c06e:	4b9b      	ldr	r3, [pc, #620]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c07a:	f040 8566 	bne.w	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800c07e:	4b98      	ldr	r3, [pc, #608]	; (800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800c080:	61fb      	str	r3, [r7, #28]
      break;
 800c082:	f000 bd62 	b.w	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c086:	4b95      	ldr	r3, [pc, #596]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	f003 0303 	and.w	r3, r3, #3
 800c08e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2b03      	cmp	r3, #3
 800c094:	d036      	beq.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d840      	bhi.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d003      	beq.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d020      	beq.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800c0a8:	e039      	b.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c0aa:	4b8c      	ldr	r3, [pc, #560]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 0302 	and.w	r3, r3, #2
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d116      	bne.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c0b6:	4b89      	ldr	r3, [pc, #548]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0308 	and.w	r3, r3, #8
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d005      	beq.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800c0c2:	4b86      	ldr	r3, [pc, #536]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	091b      	lsrs	r3, r3, #4
 800c0c8:	f003 030f 	and.w	r3, r3, #15
 800c0cc:	e005      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800c0ce:	4b83      	ldr	r3, [pc, #524]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c0d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0d4:	0a1b      	lsrs	r3, r3, #8
 800c0d6:	f003 030f 	and.w	r3, r3, #15
 800c0da:	4a82      	ldr	r2, [pc, #520]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c0e2:	e01f      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61bb      	str	r3, [r7, #24]
      break;
 800c0e8:	e01c      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0ea:	4b7c      	ldr	r3, [pc, #496]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0f6:	d102      	bne.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800c0f8:	4b7b      	ldr	r3, [pc, #492]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800c0fa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c0fc:	e012      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c0fe:	2300      	movs	r3, #0
 800c100:	61bb      	str	r3, [r7, #24]
      break;
 800c102:	e00f      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c104:	4b75      	ldr	r3, [pc, #468]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c10c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c110:	d102      	bne.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800c112:	4b76      	ldr	r3, [pc, #472]	; (800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800c114:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c116:	e005      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c118:	2300      	movs	r3, #0
 800c11a:	61bb      	str	r3, [r7, #24]
      break;
 800c11c:	e002      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	61bb      	str	r3, [r7, #24]
      break;
 800c122:	bf00      	nop
    }

    switch(PeriphClk)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c12a:	f000 842a 	beq.w	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c134:	f200 850b 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c13e:	f000 80df 	beq.w	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c148:	f200 8501 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c152:	f000 80d5 	beq.w	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c15c:	f200 84f7 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c166:	f000 8377 	beq.w	800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c170:	f200 84ed 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c17a:	f000 84c3 	beq.w	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c184:	f200 84e3 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c18e:	f000 82e6 	beq.w	800c75e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c198:	f200 84d9 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1a2:	f000 80ad 	beq.w	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1ac:	f200 84cf 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1b6:	f000 809b 	beq.w	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1c0:	f200 84c5 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1ca:	d07f      	beq.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1d2:	f200 84bc 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1dc:	f000 8448 	beq.w	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1e6:	f200 84b2 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1f0:	f000 83f0 	beq.w	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1fa:	f200 84a8 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c204:	f000 8391 	beq.w	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c20e:	f200 849e 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b80      	cmp	r3, #128	; 0x80
 800c216:	f000 835c 	beq.w	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b80      	cmp	r3, #128	; 0x80
 800c21e:	f200 8496 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b20      	cmp	r3, #32
 800c226:	d84b      	bhi.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f000 848f 	beq.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	3b01      	subs	r3, #1
 800c234:	2b1f      	cmp	r3, #31
 800c236:	f200 848a 	bhi.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c23a:	a201      	add	r2, pc, #4	; (adr r2, 800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c240:	0800c457 	.word	0x0800c457
 800c244:	0800c4c7 	.word	0x0800c4c7
 800c248:	0800cb4f 	.word	0x0800cb4f
 800c24c:	0800c55b 	.word	0x0800c55b
 800c250:	0800cb4f 	.word	0x0800cb4f
 800c254:	0800cb4f 	.word	0x0800cb4f
 800c258:	0800cb4f 	.word	0x0800cb4f
 800c25c:	0800c5e3 	.word	0x0800c5e3
 800c260:	0800cb4f 	.word	0x0800cb4f
 800c264:	0800cb4f 	.word	0x0800cb4f
 800c268:	0800cb4f 	.word	0x0800cb4f
 800c26c:	0800cb4f 	.word	0x0800cb4f
 800c270:	0800cb4f 	.word	0x0800cb4f
 800c274:	0800cb4f 	.word	0x0800cb4f
 800c278:	0800cb4f 	.word	0x0800cb4f
 800c27c:	0800c65b 	.word	0x0800c65b
 800c280:	0800cb4f 	.word	0x0800cb4f
 800c284:	0800cb4f 	.word	0x0800cb4f
 800c288:	0800cb4f 	.word	0x0800cb4f
 800c28c:	0800cb4f 	.word	0x0800cb4f
 800c290:	0800cb4f 	.word	0x0800cb4f
 800c294:	0800cb4f 	.word	0x0800cb4f
 800c298:	0800cb4f 	.word	0x0800cb4f
 800c29c:	0800cb4f 	.word	0x0800cb4f
 800c2a0:	0800cb4f 	.word	0x0800cb4f
 800c2a4:	0800cb4f 	.word	0x0800cb4f
 800c2a8:	0800cb4f 	.word	0x0800cb4f
 800c2ac:	0800cb4f 	.word	0x0800cb4f
 800c2b0:	0800cb4f 	.word	0x0800cb4f
 800c2b4:	0800cb4f 	.word	0x0800cb4f
 800c2b8:	0800cb4f 	.word	0x0800cb4f
 800c2bc:	0800c6dd 	.word	0x0800c6dd
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b40      	cmp	r3, #64	; 0x40
 800c2c4:	f000 82d9 	beq.w	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800c2c8:	f000 bc41 	b.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c2cc:	69b9      	ldr	r1, [r7, #24]
 800c2ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c2d2:	f000 fe25 	bl	800cf20 <RCCEx_GetSAIxPeriphCLKFreq>
 800c2d6:	61f8      	str	r0, [r7, #28]
      break;
 800c2d8:	f000 bc3a 	b.w	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800c2dc:	40021000 	.word	0x40021000
 800c2e0:	0003d090 	.word	0x0003d090
 800c2e4:	080145cc 	.word	0x080145cc
 800c2e8:	00f42400 	.word	0x00f42400
 800c2ec:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800c2f0:	69b9      	ldr	r1, [r7, #24]
 800c2f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c2f6:	f000 fe13 	bl	800cf20 <RCCEx_GetSAIxPeriphCLKFreq>
 800c2fa:	61f8      	str	r0, [r7, #28]
      break;
 800c2fc:	f000 bc28 	b.w	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c300:	4ba6      	ldr	r3, [pc, #664]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c306:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c30a:	613b      	str	r3, [r7, #16]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c312:	d015      	beq.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c31a:	f200 8092 	bhi.w	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c324:	d029      	beq.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c32c:	f200 8089 	bhi.w	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d07b      	beq.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c33c:	d04a      	beq.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800c33e:	e080      	b.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c340:	4b96      	ldr	r3, [pc, #600]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d17c      	bne.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c34c:	4b93      	ldr	r3, [pc, #588]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0308 	and.w	r3, r3, #8
 800c354:	2b00      	cmp	r3, #0
 800c356:	d005      	beq.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800c358:	4b90      	ldr	r3, [pc, #576]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	091b      	lsrs	r3, r3, #4
 800c35e:	f003 030f 	and.w	r3, r3, #15
 800c362:	e005      	b.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c364:	4b8d      	ldr	r3, [pc, #564]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c36a:	0a1b      	lsrs	r3, r3, #8
 800c36c:	f003 030f 	and.w	r3, r3, #15
 800c370:	4a8b      	ldr	r2, [pc, #556]	; (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800c372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c376:	61fb      	str	r3, [r7, #28]
          break;
 800c378:	e065      	b.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c37a:	4b88      	ldr	r3, [pc, #544]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c386:	d160      	bne.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c388:	4b84      	ldr	r3, [pc, #528]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c394:	d159      	bne.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c396:	4b81      	ldr	r3, [pc, #516]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	0a1b      	lsrs	r3, r3, #8
 800c39c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3a0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	fb03 f202 	mul.w	r2, r3, r2
 800c3aa:	4b7c      	ldr	r3, [pc, #496]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	091b      	lsrs	r3, r3, #4
 800c3b0:	f003 0307 	and.w	r3, r3, #7
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c3bc:	4b77      	ldr	r3, [pc, #476]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	0d5b      	lsrs	r3, r3, #21
 800c3c2:	f003 0303 	and.w	r3, r3, #3
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	69ba      	ldr	r2, [r7, #24]
 800c3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3d0:	61fb      	str	r3, [r7, #28]
          break;
 800c3d2:	e03a      	b.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c3d4:	4b71      	ldr	r3, [pc, #452]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3e0:	d135      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c3e2:	4b6e      	ldr	r3, [pc, #440]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ee:	d12e      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c3f0:	4b6a      	ldr	r3, [pc, #424]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	0a1b      	lsrs	r3, r3, #8
 800c3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3fa:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	fb03 f202 	mul.w	r2, r3, r2
 800c404:	4b65      	ldr	r3, [pc, #404]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	091b      	lsrs	r3, r3, #4
 800c40a:	f003 0307 	and.w	r3, r3, #7
 800c40e:	3301      	adds	r3, #1
 800c410:	fbb2 f3f3 	udiv	r3, r2, r3
 800c414:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c416:	4b61      	ldr	r3, [pc, #388]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	0d5b      	lsrs	r3, r3, #21
 800c41c:	f003 0303 	and.w	r3, r3, #3
 800c420:	3301      	adds	r3, #1
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	fbb2 f3f3 	udiv	r3, r2, r3
 800c42a:	61fb      	str	r3, [r7, #28]
          break;
 800c42c:	e00f      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c42e:	4b5b      	ldr	r3, [pc, #364]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c434:	f003 0302 	and.w	r3, r3, #2
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d10a      	bne.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800c43c:	4b59      	ldr	r3, [pc, #356]	; (800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800c43e:	61fb      	str	r3, [r7, #28]
          break;
 800c440:	e007      	b.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800c442:	bf00      	nop
 800c444:	e384      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c446:	bf00      	nop
 800c448:	e382      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c44a:	bf00      	nop
 800c44c:	e380      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c44e:	bf00      	nop
 800c450:	e37e      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c452:	bf00      	nop
        break;
 800c454:	e37c      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c456:	4b51      	ldr	r3, [pc, #324]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c45c:	f003 0303 	and.w	r3, r3, #3
 800c460:	613b      	str	r3, [r7, #16]
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	2b03      	cmp	r3, #3
 800c466:	d828      	bhi.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800c468:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800c46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46e:	bf00      	nop
 800c470:	0800c481 	.word	0x0800c481
 800c474:	0800c489 	.word	0x0800c489
 800c478:	0800c491 	.word	0x0800c491
 800c47c:	0800c4a5 	.word	0x0800c4a5
          frequency = HAL_RCC_GetPCLK2Freq();
 800c480:	f7ff f94e 	bl	800b720 <HAL_RCC_GetPCLK2Freq>
 800c484:	61f8      	str	r0, [r7, #28]
          break;
 800c486:	e01d      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c488:	f7ff f89c 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c48c:	61f8      	str	r0, [r7, #28]
          break;
 800c48e:	e019      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c490:	4b42      	ldr	r3, [pc, #264]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c49c:	d10f      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800c49e:	4b42      	ldr	r3, [pc, #264]	; (800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800c4a0:	61fb      	str	r3, [r7, #28]
          break;
 800c4a2:	e00c      	b.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c4a4:	4b3d      	ldr	r3, [pc, #244]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4aa:	f003 0302 	and.w	r3, r3, #2
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d107      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800c4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4b6:	61fb      	str	r3, [r7, #28]
          break;
 800c4b8:	e003      	b.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800c4ba:	bf00      	nop
 800c4bc:	e348      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c4be:	bf00      	nop
 800c4c0:	e346      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c4c2:	bf00      	nop
        break;
 800c4c4:	e344      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c4c6:	4b35      	ldr	r3, [pc, #212]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4cc:	f003 030c 	and.w	r3, r3, #12
 800c4d0:	613b      	str	r3, [r7, #16]
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	2b0c      	cmp	r3, #12
 800c4d6:	d83a      	bhi.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800c4d8:	a201      	add	r2, pc, #4	; (adr r2, 800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4de:	bf00      	nop
 800c4e0:	0800c515 	.word	0x0800c515
 800c4e4:	0800c54f 	.word	0x0800c54f
 800c4e8:	0800c54f 	.word	0x0800c54f
 800c4ec:	0800c54f 	.word	0x0800c54f
 800c4f0:	0800c51d 	.word	0x0800c51d
 800c4f4:	0800c54f 	.word	0x0800c54f
 800c4f8:	0800c54f 	.word	0x0800c54f
 800c4fc:	0800c54f 	.word	0x0800c54f
 800c500:	0800c525 	.word	0x0800c525
 800c504:	0800c54f 	.word	0x0800c54f
 800c508:	0800c54f 	.word	0x0800c54f
 800c50c:	0800c54f 	.word	0x0800c54f
 800c510:	0800c539 	.word	0x0800c539
          frequency = HAL_RCC_GetPCLK1Freq();
 800c514:	f7ff f8ee 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c518:	61f8      	str	r0, [r7, #28]
          break;
 800c51a:	e01d      	b.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800c51c:	f7ff f852 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c520:	61f8      	str	r0, [r7, #28]
          break;
 800c522:	e019      	b.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c524:	4b1d      	ldr	r3, [pc, #116]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c52c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c530:	d10f      	bne.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800c532:	4b1d      	ldr	r3, [pc, #116]	; (800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800c534:	61fb      	str	r3, [r7, #28]
          break;
 800c536:	e00c      	b.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c538:	4b18      	ldr	r3, [pc, #96]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c53e:	f003 0302 	and.w	r3, r3, #2
 800c542:	2b02      	cmp	r3, #2
 800c544:	d107      	bne.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800c546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c54a:	61fb      	str	r3, [r7, #28]
          break;
 800c54c:	e003      	b.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800c54e:	bf00      	nop
 800c550:	e2fe      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c552:	bf00      	nop
 800c554:	e2fc      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c556:	bf00      	nop
        break;
 800c558:	e2fa      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c55a:	4b10      	ldr	r3, [pc, #64]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c560:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c564:	613b      	str	r3, [r7, #16]
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	2b30      	cmp	r3, #48	; 0x30
 800c56a:	d029      	beq.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	2b30      	cmp	r3, #48	; 0x30
 800c570:	d831      	bhi.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	2b20      	cmp	r3, #32
 800c576:	d019      	beq.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	d82b      	bhi.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d003      	beq.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	2b10      	cmp	r3, #16
 800c588:	d004      	beq.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 800c58a:	e024      	b.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c58c:	f7ff f8b2 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c590:	61f8      	str	r0, [r7, #28]
          break;
 800c592:	e025      	b.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800c594:	f7ff f816 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c598:	61f8      	str	r0, [r7, #28]
          break;
 800c59a:	e021      	b.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800c59c:	40021000 	.word	0x40021000
 800c5a0:	080145cc 	.word	0x080145cc
 800c5a4:	02dc6c00 	.word	0x02dc6c00
 800c5a8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5ac:	4b8f      	ldr	r3, [pc, #572]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5b8:	d10f      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 800c5ba:	4b8d      	ldr	r3, [pc, #564]	; (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c5bc:	61fb      	str	r3, [r7, #28]
          break;
 800c5be:	e00c      	b.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c5c0:	4b8a      	ldr	r3, [pc, #552]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5c6:	f003 0302 	and.w	r3, r3, #2
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	d107      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 800c5ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5d2:	61fb      	str	r3, [r7, #28]
          break;
 800c5d4:	e003      	b.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800c5d6:	bf00      	nop
 800c5d8:	e2ba      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c5da:	bf00      	nop
 800c5dc:	e2b8      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c5de:	bf00      	nop
        break;
 800c5e0:	e2b6      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c5e2:	4b82      	ldr	r3, [pc, #520]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c5ec:	613b      	str	r3, [r7, #16]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	2bc0      	cmp	r3, #192	; 0xc0
 800c5f2:	d021      	beq.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	2bc0      	cmp	r3, #192	; 0xc0
 800c5f8:	d829      	bhi.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	2b80      	cmp	r3, #128	; 0x80
 800c5fe:	d011      	beq.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	2b80      	cmp	r3, #128	; 0x80
 800c604:	d823      	bhi.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	2b40      	cmp	r3, #64	; 0x40
 800c610:	d004      	beq.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 800c612:	e01c      	b.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c614:	f7ff f86e 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c618:	61f8      	str	r0, [r7, #28]
          break;
 800c61a:	e01d      	b.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 800c61c:	f7fe ffd2 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c620:	61f8      	str	r0, [r7, #28]
          break;
 800c622:	e019      	b.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c624:	4b71      	ldr	r3, [pc, #452]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c62c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c630:	d10f      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 800c632:	4b6f      	ldr	r3, [pc, #444]	; (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c634:	61fb      	str	r3, [r7, #28]
          break;
 800c636:	e00c      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c638:	4b6c      	ldr	r3, [pc, #432]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c63e:	f003 0302 	and.w	r3, r3, #2
 800c642:	2b02      	cmp	r3, #2
 800c644:	d107      	bne.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 800c646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c64a:	61fb      	str	r3, [r7, #28]
          break;
 800c64c:	e003      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 800c64e:	bf00      	nop
 800c650:	e27e      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c652:	bf00      	nop
 800c654:	e27c      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c656:	bf00      	nop
        break;
 800c658:	e27a      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c65a:	4b64      	ldr	r3, [pc, #400]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c664:	613b      	str	r3, [r7, #16]
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c66c:	d025      	beq.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c674:	d82c      	bhi.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c67c:	d013      	beq.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c684:	d824      	bhi.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d004      	beq.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c692:	d004      	beq.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 800c694:	e01c      	b.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c696:	f7ff f82d 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c69a:	61f8      	str	r0, [r7, #28]
          break;
 800c69c:	e01d      	b.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 800c69e:	f7fe ff91 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c6a2:	61f8      	str	r0, [r7, #28]
          break;
 800c6a4:	e019      	b.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6a6:	4b51      	ldr	r3, [pc, #324]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6b2:	d10f      	bne.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 800c6b4:	4b4e      	ldr	r3, [pc, #312]	; (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c6b6:	61fb      	str	r3, [r7, #28]
          break;
 800c6b8:	e00c      	b.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c6ba:	4b4c      	ldr	r3, [pc, #304]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d107      	bne.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 800c6c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6cc:	61fb      	str	r3, [r7, #28]
          break;
 800c6ce:	e003      	b.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 800c6d0:	bf00      	nop
 800c6d2:	e23d      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c6d4:	bf00      	nop
 800c6d6:	e23b      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c6d8:	bf00      	nop
        break;
 800c6da:	e239      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c6dc:	4b43      	ldr	r3, [pc, #268]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c6e6:	613b      	str	r3, [r7, #16]
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6ee:	d025      	beq.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6f6:	d82c      	bhi.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6fe:	d013      	beq.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c706:	d824      	bhi.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d004      	beq.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c714:	d004      	beq.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 800c716:	e01c      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c718:	f7fe ffec 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c71c:	61f8      	str	r0, [r7, #28]
          break;
 800c71e:	e01d      	b.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 800c720:	f7fe ff50 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c724:	61f8      	str	r0, [r7, #28]
          break;
 800c726:	e019      	b.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c728:	4b30      	ldr	r3, [pc, #192]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c734:	d10f      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 800c736:	4b2e      	ldr	r3, [pc, #184]	; (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c738:	61fb      	str	r3, [r7, #28]
          break;
 800c73a:	e00c      	b.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c73c:	4b2b      	ldr	r3, [pc, #172]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c742:	f003 0302 	and.w	r3, r3, #2
 800c746:	2b02      	cmp	r3, #2
 800c748:	d107      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 800c74a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c74e:	61fb      	str	r3, [r7, #28]
          break;
 800c750:	e003      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800c752:	bf00      	nop
 800c754:	e1fc      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c756:	bf00      	nop
 800c758:	e1fa      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c75a:	bf00      	nop
        break;
 800c75c:	e1f8      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c75e:	4b23      	ldr	r3, [pc, #140]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c768:	613b      	str	r3, [r7, #16]
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c770:	d00c      	beq.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c778:	d868      	bhi.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c780:	d008      	beq.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c788:	d034      	beq.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 800c78a:	e05f      	b.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 800c78c:	f7fe ff1a 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c790:	61f8      	str	r0, [r7, #28]
          break;
 800c792:	e060      	b.n	800c856 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800c794:	4b15      	ldr	r3, [pc, #84]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c79c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7a0:	d156      	bne.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800c7a2:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d050      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c7ae:	4b0f      	ldr	r3, [pc, #60]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	0a1b      	lsrs	r3, r3, #8
 800c7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7b8:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	fb03 f202 	mul.w	r2, r3, r2
 800c7c2:	4b0a      	ldr	r3, [pc, #40]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	091b      	lsrs	r3, r3, #4
 800c7c8:	f003 0307 	and.w	r3, r3, #7
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d2:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800c7d4:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	0e5b      	lsrs	r3, r3, #25
 800c7da:	f003 0303 	and.w	r3, r3, #3
 800c7de:	3301      	adds	r3, #1
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	69ba      	ldr	r2, [r7, #24]
 800c7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7e8:	61fb      	str	r3, [r7, #28]
          break;
 800c7ea:	e031      	b.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800c7ec:	40021000 	.word	0x40021000
 800c7f0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800c7f4:	4b9c      	ldr	r3, [pc, #624]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c800:	d128      	bne.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800c802:	4b99      	ldr	r3, [pc, #612]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d022      	beq.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800c80e:	4b96      	ldr	r3, [pc, #600]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	0a1b      	lsrs	r3, r3, #8
 800c814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c818:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	fb03 f202 	mul.w	r2, r3, r2
 800c822:	4b91      	ldr	r3, [pc, #580]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	091b      	lsrs	r3, r3, #4
 800c828:	f003 0307 	and.w	r3, r3, #7
 800c82c:	3301      	adds	r3, #1
 800c82e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c832:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800c834:	4b8c      	ldr	r3, [pc, #560]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	0e5b      	lsrs	r3, r3, #25
 800c83a:	f003 0303 	and.w	r3, r3, #3
 800c83e:	3301      	adds	r3, #1
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	fbb2 f3f3 	udiv	r3, r2, r3
 800c848:	61fb      	str	r3, [r7, #28]
          break;
 800c84a:	e003      	b.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800c84c:	bf00      	nop
 800c84e:	e17f      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c850:	bf00      	nop
 800c852:	e17d      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c854:	bf00      	nop
        break;
 800c856:	e17b      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800c858:	4b83      	ldr	r3, [pc, #524]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c85a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c85e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c862:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d103      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 800c86a:	f7fe ff59 	bl	800b720 <HAL_RCC_GetPCLK2Freq>
 800c86e:	61f8      	str	r0, [r7, #28]
        break;
 800c870:	e16e      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800c872:	f7fe fea7 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c876:	61f8      	str	r0, [r7, #28]
        break;
 800c878:	e16a      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c87a:	4b7b      	ldr	r3, [pc, #492]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c880:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c884:	613b      	str	r3, [r7, #16]
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c88c:	d013      	beq.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c894:	d819      	bhi.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8a2:	d004      	beq.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800c8a4:	e011      	b.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c8a6:	f7fe ff25 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c8aa:	61f8      	str	r0, [r7, #28]
          break;
 800c8ac:	e010      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800c8ae:	f7fe fe89 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c8b2:	61f8      	str	r0, [r7, #28]
          break;
 800c8b4:	e00c      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8b6:	4b6c      	ldr	r3, [pc, #432]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8c2:	d104      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800c8c4:	4b69      	ldr	r3, [pc, #420]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c8c6:	61fb      	str	r3, [r7, #28]
          break;
 800c8c8:	e001      	b.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 800c8ca:	bf00      	nop
 800c8cc:	e140      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c8ce:	bf00      	nop
        break;
 800c8d0:	e13e      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c8d2:	4b65      	ldr	r3, [pc, #404]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c8dc:	613b      	str	r3, [r7, #16]
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8e4:	d013      	beq.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8ec:	d819      	bhi.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d004      	beq.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8fa:	d004      	beq.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 800c8fc:	e011      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c8fe:	f7fe fef9 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c902:	61f8      	str	r0, [r7, #28]
          break;
 800c904:	e010      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 800c906:	f7fe fe5d 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c90a:	61f8      	str	r0, [r7, #28]
          break;
 800c90c:	e00c      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c90e:	4b56      	ldr	r3, [pc, #344]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c91a:	d104      	bne.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 800c91c:	4b53      	ldr	r3, [pc, #332]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c91e:	61fb      	str	r3, [r7, #28]
          break;
 800c920:	e001      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800c922:	bf00      	nop
 800c924:	e114      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c926:	bf00      	nop
        break;
 800c928:	e112      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c92a:	4b4f      	ldr	r3, [pc, #316]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c934:	613b      	str	r3, [r7, #16]
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c93c:	d013      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c944:	d819      	bhi.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d004      	beq.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c952:	d004      	beq.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 800c954:	e011      	b.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c956:	f7fe fecd 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c95a:	61f8      	str	r0, [r7, #28]
          break;
 800c95c:	e010      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800c95e:	f7fe fe31 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c962:	61f8      	str	r0, [r7, #28]
          break;
 800c964:	e00c      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c966:	4b40      	ldr	r3, [pc, #256]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c96e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c972:	d104      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 800c974:	4b3d      	ldr	r3, [pc, #244]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c976:	61fb      	str	r3, [r7, #28]
          break;
 800c978:	e001      	b.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 800c97a:	bf00      	nop
 800c97c:	e0e8      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c97e:	bf00      	nop
        break;
 800c980:	e0e6      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c982:	4b39      	ldr	r3, [pc, #228]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c984:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c988:	f003 0303 	and.w	r3, r3, #3
 800c98c:	613b      	str	r3, [r7, #16]
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	2b02      	cmp	r3, #2
 800c992:	d011      	beq.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	2b02      	cmp	r3, #2
 800c998:	d818      	bhi.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d003      	beq.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d004      	beq.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800c9a6:	e011      	b.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c9a8:	f7fe fea4 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800c9ac:	61f8      	str	r0, [r7, #28]
          break;
 800c9ae:	e010      	b.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800c9b0:	f7fe fe08 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800c9b4:	61f8      	str	r0, [r7, #28]
          break;
 800c9b6:	e00c      	b.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9b8:	4b2b      	ldr	r3, [pc, #172]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9c4:	d104      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800c9c6:	4b29      	ldr	r3, [pc, #164]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800c9c8:	61fb      	str	r3, [r7, #28]
          break;
 800c9ca:	e001      	b.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800c9cc:	bf00      	nop
 800c9ce:	e0bf      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c9d0:	bf00      	nop
        break;
 800c9d2:	e0bd      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c9d4:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9da:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c9de:	613b      	str	r3, [r7, #16]
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c9e6:	d02c      	beq.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c9ee:	d833      	bhi.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c9f6:	d01a      	beq.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c9fe:	d82b      	bhi.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d004      	beq.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca0c:	d004      	beq.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800ca0e:	e023      	b.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ca10:	f7fe fe70 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800ca14:	61f8      	str	r0, [r7, #28]
          break;
 800ca16:	e026      	b.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ca18:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca1e:	f003 0302 	and.w	r3, r3, #2
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d11a      	bne.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800ca26:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ca2a:	61fb      	str	r3, [r7, #28]
          break;
 800ca2c:	e016      	b.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca2e:	4b0e      	ldr	r3, [pc, #56]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca3a:	d111      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800ca3c:	4b0b      	ldr	r3, [pc, #44]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800ca3e:	61fb      	str	r3, [r7, #28]
          break;
 800ca40:	e00e      	b.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ca42:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca48:	f003 0302 	and.w	r3, r3, #2
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	d109      	bne.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800ca50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca54:	61fb      	str	r3, [r7, #28]
          break;
 800ca56:	e005      	b.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800ca58:	bf00      	nop
 800ca5a:	e079      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca5c:	bf00      	nop
 800ca5e:	e077      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca60:	bf00      	nop
 800ca62:	e075      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca64:	bf00      	nop
        break;
 800ca66:	e073      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800ca68:	40021000 	.word	0x40021000
 800ca6c:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ca70:	4b3a      	ldr	r3, [pc, #232]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ca72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ca7a:	613b      	str	r3, [r7, #16]
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca82:	d02c      	beq.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca8a:	d833      	bhi.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca92:	d01a      	beq.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca9a:	d82b      	bhi.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d004      	beq.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caa8:	d004      	beq.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800caaa:	e023      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800caac:	f7fe fe22 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800cab0:	61f8      	str	r0, [r7, #28]
          break;
 800cab2:	e026      	b.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cab4:	4b29      	ldr	r3, [pc, #164]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800caba:	f003 0302 	and.w	r3, r3, #2
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d11a      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800cac2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cac6:	61fb      	str	r3, [r7, #28]
          break;
 800cac8:	e016      	b.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800caca:	4b24      	ldr	r3, [pc, #144]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cad6:	d111      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 800cad8:	4b21      	ldr	r3, [pc, #132]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800cada:	61fb      	str	r3, [r7, #28]
          break;
 800cadc:	e00e      	b.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cade:	4b1f      	ldr	r3, [pc, #124]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cae4:	f003 0302 	and.w	r3, r3, #2
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d109      	bne.n	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 800caec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caf0:	61fb      	str	r3, [r7, #28]
          break;
 800caf2:	e005      	b.n	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800caf4:	bf00      	nop
 800caf6:	e02b      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800caf8:	bf00      	nop
 800cafa:	e029      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cafc:	bf00      	nop
 800cafe:	e027      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cb00:	bf00      	nop
        break;
 800cb02:	e025      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800cb04:	4b15      	ldr	r3, [pc, #84]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb0e:	613b      	str	r3, [r7, #16]
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d004      	beq.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb1c:	d004      	beq.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 800cb1e:	e00d      	b.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cb20:	f7fe fde8 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800cb24:	61f8      	str	r0, [r7, #28]
          break;
 800cb26:	e009      	b.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb28:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb34:	d101      	bne.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 800cb36:	4b0a      	ldr	r3, [pc, #40]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800cb38:	61fb      	str	r3, [r7, #28]
          break;
 800cb3a:	bf00      	nop
        break;
 800cb3c:	e008      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cb3e:	bf00      	nop
 800cb40:	e006      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cb42:	bf00      	nop
 800cb44:	e004      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cb46:	bf00      	nop
 800cb48:	e002      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cb4a:	bf00      	nop
 800cb4c:	e000      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cb4e:	bf00      	nop
    }
  }

  return(frequency);
 800cb50:	69fb      	ldr	r3, [r7, #28]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3720      	adds	r7, #32
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	40021000 	.word	0x40021000
 800cb60:	00f42400 	.word	0x00f42400

0800cb64 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800cb64:	b480      	push	{r7}
 800cb66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800cb68:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a04      	ldr	r2, [pc, #16]	; (800cb80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cb6e:	f043 0304 	orr.w	r3, r3, #4
 800cb72:	6013      	str	r3, [r2, #0]
}
 800cb74:	bf00      	nop
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	40021000 	.word	0x40021000

0800cb84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cb92:	4b74      	ldr	r3, [pc, #464]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	f003 0303 	and.w	r3, r3, #3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d018      	beq.n	800cbd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cb9e:	4b71      	ldr	r3, [pc, #452]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f003 0203 	and.w	r2, r3, #3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d10d      	bne.n	800cbca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
       ||
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d009      	beq.n	800cbca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cbb6:	4b6b      	ldr	r3, [pc, #428]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	091b      	lsrs	r3, r3, #4
 800cbbc:	f003 0307 	and.w	r3, r3, #7
 800cbc0:	1c5a      	adds	r2, r3, #1
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
       ||
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d047      	beq.n	800cc5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	73fb      	strb	r3, [r7, #15]
 800cbce:	e044      	b.n	800cc5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d018      	beq.n	800cc0a <RCCEx_PLLSAI1_Config+0x86>
 800cbd8:	2b03      	cmp	r3, #3
 800cbda:	d825      	bhi.n	800cc28 <RCCEx_PLLSAI1_Config+0xa4>
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d002      	beq.n	800cbe6 <RCCEx_PLLSAI1_Config+0x62>
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d009      	beq.n	800cbf8 <RCCEx_PLLSAI1_Config+0x74>
 800cbe4:	e020      	b.n	800cc28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cbe6:	4b5f      	ldr	r3, [pc, #380]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f003 0302 	and.w	r3, r3, #2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d11d      	bne.n	800cc2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbf6:	e01a      	b.n	800cc2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cbf8:	4b5a      	ldr	r3, [pc, #360]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d116      	bne.n	800cc32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc08:	e013      	b.n	800cc32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cc0a:	4b56      	ldr	r3, [pc, #344]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10f      	bne.n	800cc36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cc16:	4b53      	ldr	r3, [pc, #332]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d109      	bne.n	800cc36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc26:	e006      	b.n	800cc36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc2c:	e004      	b.n	800cc38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc2e:	bf00      	nop
 800cc30:	e002      	b.n	800cc38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc32:	bf00      	nop
 800cc34:	e000      	b.n	800cc38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc36:	bf00      	nop
    }

    if(status == HAL_OK)
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10d      	bne.n	800cc5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cc3e:	4b49      	ldr	r3, [pc, #292]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6819      	ldr	r1, [r3, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	430b      	orrs	r3, r1
 800cc54:	4943      	ldr	r1, [pc, #268]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d17c      	bne.n	800cd5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cc60:	4b40      	ldr	r3, [pc, #256]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a3f      	ldr	r2, [pc, #252]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc6c:	f7f9 fe74 	bl	8006958 <HAL_GetTick>
 800cc70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc72:	e009      	b.n	800cc88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cc74:	f7f9 fe70 	bl	8006958 <HAL_GetTick>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	d902      	bls.n	800cc88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cc82:	2303      	movs	r3, #3
 800cc84:	73fb      	strb	r3, [r7, #15]
        break;
 800cc86:	e005      	b.n	800cc94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc88:	4b36      	ldr	r3, [pc, #216]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1ef      	bne.n	800cc74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d15f      	bne.n	800cd5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d110      	bne.n	800ccc2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cca0:	4b30      	ldr	r3, [pc, #192]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800cca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	6892      	ldr	r2, [r2, #8]
 800ccb0:	0211      	lsls	r1, r2, #8
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	68d2      	ldr	r2, [r2, #12]
 800ccb6:	06d2      	lsls	r2, r2, #27
 800ccb8:	430a      	orrs	r2, r1
 800ccba:	492a      	ldr	r1, [pc, #168]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	610b      	str	r3, [r1, #16]
 800ccc0:	e027      	b.n	800cd12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d112      	bne.n	800ccee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ccc8:	4b26      	ldr	r3, [pc, #152]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ccd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	6892      	ldr	r2, [r2, #8]
 800ccd8:	0211      	lsls	r1, r2, #8
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	6912      	ldr	r2, [r2, #16]
 800ccde:	0852      	lsrs	r2, r2, #1
 800cce0:	3a01      	subs	r2, #1
 800cce2:	0552      	lsls	r2, r2, #21
 800cce4:	430a      	orrs	r2, r1
 800cce6:	491f      	ldr	r1, [pc, #124]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cce8:	4313      	orrs	r3, r2
 800ccea:	610b      	str	r3, [r1, #16]
 800ccec:	e011      	b.n	800cd12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ccee:	4b1d      	ldr	r3, [pc, #116]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ccf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	6892      	ldr	r2, [r2, #8]
 800ccfe:	0211      	lsls	r1, r2, #8
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	6952      	ldr	r2, [r2, #20]
 800cd04:	0852      	lsrs	r2, r2, #1
 800cd06:	3a01      	subs	r2, #1
 800cd08:	0652      	lsls	r2, r2, #25
 800cd0a:	430a      	orrs	r2, r1
 800cd0c:	4915      	ldr	r1, [pc, #84]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cd12:	4b14      	ldr	r3, [pc, #80]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a13      	ldr	r2, [pc, #76]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd1e:	f7f9 fe1b 	bl	8006958 <HAL_GetTick>
 800cd22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cd24:	e009      	b.n	800cd3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd26:	f7f9 fe17 	bl	8006958 <HAL_GetTick>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	d902      	bls.n	800cd3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cd34:	2303      	movs	r3, #3
 800cd36:	73fb      	strb	r3, [r7, #15]
          break;
 800cd38:	e005      	b.n	800cd46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cd3a:	4b0a      	ldr	r3, [pc, #40]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d0ef      	beq.n	800cd26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d106      	bne.n	800cd5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cd4c:	4b05      	ldr	r3, [pc, #20]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd4e:	691a      	ldr	r2, [r3, #16]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	699b      	ldr	r3, [r3, #24]
 800cd54:	4903      	ldr	r1, [pc, #12]	; (800cd64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd56:	4313      	orrs	r3, r2
 800cd58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	40021000 	.word	0x40021000

0800cd68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cd76:	4b69      	ldr	r3, [pc, #420]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d018      	beq.n	800cdb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cd82:	4b66      	ldr	r3, [pc, #408]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	f003 0203 	and.w	r2, r3, #3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d10d      	bne.n	800cdae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
       ||
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d009      	beq.n	800cdae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800cd9a:	4b60      	ldr	r3, [pc, #384]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	091b      	lsrs	r3, r3, #4
 800cda0:	f003 0307 	and.w	r3, r3, #7
 800cda4:	1c5a      	adds	r2, r3, #1
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	685b      	ldr	r3, [r3, #4]
       ||
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d047      	beq.n	800ce3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	73fb      	strb	r3, [r7, #15]
 800cdb2:	e044      	b.n	800ce3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b03      	cmp	r3, #3
 800cdba:	d018      	beq.n	800cdee <RCCEx_PLLSAI2_Config+0x86>
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d825      	bhi.n	800ce0c <RCCEx_PLLSAI2_Config+0xa4>
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d002      	beq.n	800cdca <RCCEx_PLLSAI2_Config+0x62>
 800cdc4:	2b02      	cmp	r3, #2
 800cdc6:	d009      	beq.n	800cddc <RCCEx_PLLSAI2_Config+0x74>
 800cdc8:	e020      	b.n	800ce0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cdca:	4b54      	ldr	r3, [pc, #336]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0302 	and.w	r3, r3, #2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d11d      	bne.n	800ce12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdda:	e01a      	b.n	800ce12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cddc:	4b4f      	ldr	r3, [pc, #316]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d116      	bne.n	800ce16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
 800cdea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdec:	e013      	b.n	800ce16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cdee:	4b4b      	ldr	r3, [pc, #300]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10f      	bne.n	800ce1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cdfa:	4b48      	ldr	r3, [pc, #288]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d109      	bne.n	800ce1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ce0a:	e006      	b.n	800ce1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce10:	e004      	b.n	800ce1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ce12:	bf00      	nop
 800ce14:	e002      	b.n	800ce1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ce16:	bf00      	nop
 800ce18:	e000      	b.n	800ce1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ce1a:	bf00      	nop
    }

    if(status == HAL_OK)
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10d      	bne.n	800ce3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ce22:	4b3e      	ldr	r3, [pc, #248]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6819      	ldr	r1, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	430b      	orrs	r3, r1
 800ce38:	4938      	ldr	r1, [pc, #224]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ce3e:	7bfb      	ldrb	r3, [r7, #15]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d166      	bne.n	800cf12 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ce44:	4b35      	ldr	r3, [pc, #212]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a34      	ldr	r2, [pc, #208]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce50:	f7f9 fd82 	bl	8006958 <HAL_GetTick>
 800ce54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ce56:	e009      	b.n	800ce6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ce58:	f7f9 fd7e 	bl	8006958 <HAL_GetTick>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d902      	bls.n	800ce6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ce66:	2303      	movs	r3, #3
 800ce68:	73fb      	strb	r3, [r7, #15]
        break;
 800ce6a:	e005      	b.n	800ce78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ce6c:	4b2b      	ldr	r3, [pc, #172]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1ef      	bne.n	800ce58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d149      	bne.n	800cf12 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d110      	bne.n	800cea6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ce84:	4b25      	ldr	r3, [pc, #148]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ce86:	695b      	ldr	r3, [r3, #20]
 800ce88:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ce8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	6892      	ldr	r2, [r2, #8]
 800ce94:	0211      	lsls	r1, r2, #8
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	68d2      	ldr	r2, [r2, #12]
 800ce9a:	06d2      	lsls	r2, r2, #27
 800ce9c:	430a      	orrs	r2, r1
 800ce9e:	491f      	ldr	r1, [pc, #124]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cea0:	4313      	orrs	r3, r2
 800cea2:	614b      	str	r3, [r1, #20]
 800cea4:	e011      	b.n	800ceca <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800cea6:	4b1d      	ldr	r3, [pc, #116]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cea8:	695b      	ldr	r3, [r3, #20]
 800ceaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ceae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	6892      	ldr	r2, [r2, #8]
 800ceb6:	0211      	lsls	r1, r2, #8
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	6912      	ldr	r2, [r2, #16]
 800cebc:	0852      	lsrs	r2, r2, #1
 800cebe:	3a01      	subs	r2, #1
 800cec0:	0652      	lsls	r2, r2, #25
 800cec2:	430a      	orrs	r2, r1
 800cec4:	4915      	ldr	r1, [pc, #84]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cec6:	4313      	orrs	r3, r2
 800cec8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ceca:	4b14      	ldr	r3, [pc, #80]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a13      	ldr	r2, [pc, #76]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800ced0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ced4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ced6:	f7f9 fd3f 	bl	8006958 <HAL_GetTick>
 800ceda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cedc:	e009      	b.n	800cef2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800cede:	f7f9 fd3b 	bl	8006958 <HAL_GetTick>
 800cee2:	4602      	mov	r2, r0
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	1ad3      	subs	r3, r2, r3
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d902      	bls.n	800cef2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800ceec:	2303      	movs	r3, #3
 800ceee:	73fb      	strb	r3, [r7, #15]
          break;
 800cef0:	e005      	b.n	800cefe <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cef2:	4b0a      	ldr	r3, [pc, #40]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0ef      	beq.n	800cede <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d106      	bne.n	800cf12 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800cf04:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf06:	695a      	ldr	r2, [r3, #20]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	4903      	ldr	r1, [pc, #12]	; (800cf1c <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	40021000 	.word	0x40021000

0800cf20 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b089      	sub	sp, #36	; 0x24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800cf32:	2300      	movs	r3, #0
 800cf34:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf3c:	d10c      	bne.n	800cf58 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800cf3e:	4b77      	ldr	r3, [pc, #476]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf44:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800cf48:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cf50:	d112      	bne.n	800cf78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf52:	4b73      	ldr	r3, [pc, #460]	; (800d120 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800cf54:	61fb      	str	r3, [r7, #28]
 800cf56:	e00f      	b.n	800cf78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf5e:	d10b      	bne.n	800cf78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800cf60:	4b6e      	ldr	r3, [pc, #440]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf66:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800cf6a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf72:	d101      	bne.n	800cf78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800cf74:	4b6a      	ldr	r3, [pc, #424]	; (800d120 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800cf76:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f040 80c6 	bne.w	800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf8a:	d003      	beq.n	800cf94 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf92:	d13b      	bne.n	800d00c <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800cf94:	4b61      	ldr	r3, [pc, #388]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfa0:	f040 80b3 	bne.w	800d10a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800cfa4:	4b5d      	ldr	r3, [pc, #372]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f000 80ac 	beq.w	800d10a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800cfb2:	4b5a      	ldr	r3, [pc, #360]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	091b      	lsrs	r3, r3, #4
 800cfb8:	f003 0307 	and.w	r3, r3, #7
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	693a      	ldr	r2, [r7, #16]
 800cfc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800cfc6:	4b55      	ldr	r3, [pc, #340]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	0a1b      	lsrs	r3, r3, #8
 800cfcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800cfd2:	4b52      	ldr	r3, [pc, #328]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	0edb      	lsrs	r3, r3, #27
 800cfd8:	f003 031f 	and.w	r3, r3, #31
 800cfdc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10a      	bne.n	800cffa <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800cfe4:	4b4d      	ldr	r3, [pc, #308]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800cff0:	2311      	movs	r3, #17
 800cff2:	617b      	str	r3, [r7, #20]
 800cff4:	e001      	b.n	800cffa <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800cff6:	2307      	movs	r3, #7
 800cff8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	fb03 f202 	mul.w	r2, r3, r2
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	fbb2 f3f3 	udiv	r3, r2, r3
 800d008:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d00a:	e07e      	b.n	800d10a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d139      	bne.n	800d086 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800d012:	4b42      	ldr	r3, [pc, #264]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d01a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d01e:	d175      	bne.n	800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800d020:	4b3e      	ldr	r3, [pc, #248]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d06f      	beq.n	800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d02c:	4b3b      	ldr	r3, [pc, #236]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	091b      	lsrs	r3, r3, #4
 800d032:	f003 0307 	and.w	r3, r3, #7
 800d036:	3301      	adds	r3, #1
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d03e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d040:	4b36      	ldr	r3, [pc, #216]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d042:	691b      	ldr	r3, [r3, #16]
 800d044:	0a1b      	lsrs	r3, r3, #8
 800d046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d04a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800d04c:	4b33      	ldr	r3, [pc, #204]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	0edb      	lsrs	r3, r3, #27
 800d052:	f003 031f 	and.w	r3, r3, #31
 800d056:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10a      	bne.n	800d074 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800d05e:	4b2f      	ldr	r3, [pc, #188]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800d06a:	2311      	movs	r3, #17
 800d06c:	617b      	str	r3, [r7, #20]
 800d06e:	e001      	b.n	800d074 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800d070:	2307      	movs	r3, #7
 800d072:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	fb03 f202 	mul.w	r2, r3, r2
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d082:	61fb      	str	r3, [r7, #28]
 800d084:	e042      	b.n	800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d08c:	d003      	beq.n	800d096 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d094:	d13a      	bne.n	800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800d096:	4b21      	ldr	r3, [pc, #132]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d09e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0a2:	d133      	bne.n	800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800d0a4:	4b1d      	ldr	r3, [pc, #116]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d02d      	beq.n	800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d0b0:	4b1a      	ldr	r3, [pc, #104]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	091b      	lsrs	r3, r3, #4
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	693a      	ldr	r2, [r7, #16]
 800d0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d0c4:	4b15      	ldr	r3, [pc, #84]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d0c6:	695b      	ldr	r3, [r3, #20]
 800d0c8:	0a1b      	lsrs	r3, r3, #8
 800d0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ce:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800d0d0:	4b12      	ldr	r3, [pc, #72]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d0d2:	695b      	ldr	r3, [r3, #20]
 800d0d4:	0edb      	lsrs	r3, r3, #27
 800d0d6:	f003 031f 	and.w	r3, r3, #31
 800d0da:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10a      	bne.n	800d0f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800d0e2:	4b0e      	ldr	r3, [pc, #56]	; (800d11c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d002      	beq.n	800d0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800d0ee:	2311      	movs	r3, #17
 800d0f0:	617b      	str	r3, [r7, #20]
 800d0f2:	e001      	b.n	800d0f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800d0f4:	2307      	movs	r3, #7
 800d0f6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	fb03 f202 	mul.w	r2, r3, r2
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	fbb2 f3f3 	udiv	r3, r2, r3
 800d106:	61fb      	str	r3, [r7, #28]
 800d108:	e000      	b.n	800d10c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d10a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800d10c:	69fb      	ldr	r3, [r7, #28]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3724      	adds	r7, #36	; 0x24
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	40021000 	.word	0x40021000
 800d120:	001fff68 	.word	0x001fff68

0800d124 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e155      	b.n	800d3e2 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d106      	bne.n	800d150 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7f8 fc3a 	bl	80059c4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fae3 	bl	800d71c <SAI_Disable>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d001      	beq.n	800d160 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e140      	b.n	800d3e2 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2202      	movs	r2, #2
 800d164:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d00c      	beq.n	800d18a <HAL_SAI_Init+0x66>
 800d170:	2b02      	cmp	r3, #2
 800d172:	d80d      	bhi.n	800d190 <HAL_SAI_Init+0x6c>
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <HAL_SAI_Init+0x5a>
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d003      	beq.n	800d184 <HAL_SAI_Init+0x60>
 800d17c:	e008      	b.n	800d190 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	61fb      	str	r3, [r7, #28]
      break;
 800d182:	e008      	b.n	800d196 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d184:	2310      	movs	r3, #16
 800d186:	61fb      	str	r3, [r7, #28]
      break;
 800d188:	e005      	b.n	800d196 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d18a:	2320      	movs	r3, #32
 800d18c:	61fb      	str	r3, [r7, #28]
      break;
 800d18e:	e002      	b.n	800d196 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800d190:	2300      	movs	r3, #0
 800d192:	61fb      	str	r3, [r7, #28]
      break;
 800d194:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	2b03      	cmp	r3, #3
 800d19c:	d81d      	bhi.n	800d1da <HAL_SAI_Init+0xb6>
 800d19e:	a201      	add	r2, pc, #4	; (adr r2, 800d1a4 <HAL_SAI_Init+0x80>)
 800d1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a4:	0800d1b5 	.word	0x0800d1b5
 800d1a8:	0800d1bb 	.word	0x0800d1bb
 800d1ac:	0800d1c3 	.word	0x0800d1c3
 800d1b0:	0800d1cb 	.word	0x0800d1cb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	617b      	str	r3, [r7, #20]
      break;
 800d1b8:	e012      	b.n	800d1e0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d1ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1be:	617b      	str	r3, [r7, #20]
      break;
 800d1c0:	e00e      	b.n	800d1e0 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d1c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1c6:	617b      	str	r3, [r7, #20]
      break;
 800d1c8:	e00a      	b.n	800d1e0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d1ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1ce:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	f043 0301 	orr.w	r3, r3, #1
 800d1d6:	61fb      	str	r3, [r7, #28]
      break;
 800d1d8:	e002      	b.n	800d1e0 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	617b      	str	r3, [r7, #20]
      break;
 800d1de:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a81      	ldr	r2, [pc, #516]	; (800d3ec <HAL_SAI_Init+0x2c8>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d004      	beq.n	800d1f4 <HAL_SAI_Init+0xd0>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a80      	ldr	r2, [pc, #512]	; (800d3f0 <HAL_SAI_Init+0x2cc>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d103      	bne.n	800d1fc <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800d1f4:	4a7f      	ldr	r2, [pc, #508]	; (800d3f4 <HAL_SAI_Init+0x2d0>)
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	6013      	str	r3, [r2, #0]
 800d1fa:	e002      	b.n	800d202 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d1fc:	4a7e      	ldr	r2, [pc, #504]	; (800d3f8 <HAL_SAI_Init+0x2d4>)
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d041      	beq.n	800d28e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a77      	ldr	r2, [pc, #476]	; (800d3ec <HAL_SAI_Init+0x2c8>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d004      	beq.n	800d21e <HAL_SAI_Init+0xfa>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a75      	ldr	r2, [pc, #468]	; (800d3f0 <HAL_SAI_Init+0x2cc>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d105      	bne.n	800d22a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d21e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d222:	f7fe fee7 	bl	800bff4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d226:	6138      	str	r0, [r7, #16]
 800d228:	e004      	b.n	800d234 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d22a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d22e:	f7fe fee1 	bl	800bff4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d232:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800d234:	693a      	ldr	r2, [r7, #16]
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	461a      	mov	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	69db      	ldr	r3, [r3, #28]
 800d244:	025b      	lsls	r3, r3, #9
 800d246:	fbb2 f3f3 	udiv	r3, r2, r3
 800d24a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4a6b      	ldr	r2, [pc, #428]	; (800d3fc <HAL_SAI_Init+0x2d8>)
 800d250:	fba2 2303 	umull	r2, r3, r2, r3
 800d254:	08da      	lsrs	r2, r3, #3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d25a:	68f9      	ldr	r1, [r7, #12]
 800d25c:	4b67      	ldr	r3, [pc, #412]	; (800d3fc <HAL_SAI_Init+0x2d8>)
 800d25e:	fba3 2301 	umull	r2, r3, r3, r1
 800d262:	08da      	lsrs	r2, r3, #3
 800d264:	4613      	mov	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	005b      	lsls	r3, r3, #1
 800d26c:	1aca      	subs	r2, r1, r3
 800d26e:	2a08      	cmp	r2, #8
 800d270:	d904      	bls.n	800d27c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a1b      	ldr	r3, [r3, #32]
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d280:	2b04      	cmp	r3, #4
 800d282:	d104      	bne.n	800d28e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a1b      	ldr	r3, [r3, #32]
 800d288:	085a      	lsrs	r2, r3, #1
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d003      	beq.n	800d29e <HAL_SAI_Init+0x17a>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d109      	bne.n	800d2b2 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d101      	bne.n	800d2aa <HAL_SAI_Init+0x186>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e001      	b.n	800d2ae <HAL_SAI_Init+0x18a>
 800d2aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2ae:	61bb      	str	r3, [r7, #24]
 800d2b0:	e008      	b.n	800d2c4 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d102      	bne.n	800d2c0 <HAL_SAI_Init+0x19c>
 800d2ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2be:	e000      	b.n	800d2c2 <HAL_SAI_Init+0x19e>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6819      	ldr	r1, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	4b4c      	ldr	r3, [pc, #304]	; (800d400 <HAL_SAI_Init+0x2dc>)
 800d2d0:	400b      	ands	r3, r1
 800d2d2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6819      	ldr	r1, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2e8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ee:	431a      	orrs	r2, r3
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800d2fc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d308:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	051b      	lsls	r3, r3, #20
 800d310:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	430a      	orrs	r2, r1
 800d318:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	6812      	ldr	r2, [r2, #0]
 800d324:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d328:	f023 030f 	bic.w	r3, r3, #15
 800d32c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6859      	ldr	r1, [r3, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	699a      	ldr	r2, [r3, #24]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d33c:	431a      	orrs	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d342:	431a      	orrs	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	430a      	orrs	r2, r1
 800d34a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6899      	ldr	r1, [r3, #8]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <HAL_SAI_Init+0x2e0>)
 800d358:	400b      	ands	r3, r1
 800d35a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6899      	ldr	r1, [r3, #8]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d366:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d36c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d372:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d378:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d37e:	3b01      	subs	r3, #1
 800d380:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d382:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	430a      	orrs	r2, r1
 800d38a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68d9      	ldr	r1, [r3, #12]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d39a:	400b      	ands	r3, r1
 800d39c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68d9      	ldr	r1, [r3, #12]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3ac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3b2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d3b4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	430a      	orrs	r2, r1
 800d3c6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3720      	adds	r7, #32
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	40015404 	.word	0x40015404
 800d3f0:	40015424 	.word	0x40015424
 800d3f4:	40015400 	.word	0x40015400
 800d3f8:	40015800 	.word	0x40015800
 800d3fc:	cccccccd 	.word	0xcccccccd
 800d400:	ff05c010 	.word	0xff05c010
 800d404:	fff88000 	.word	0xfff88000

0800d408 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	603b      	str	r3, [r7, #0]
 800d414:	4613      	mov	r3, r2
 800d416:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d418:	f7f9 fa9e 	bl	8006958 <HAL_GetTick>
 800d41c:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <HAL_SAI_Transmit+0x22>
 800d424:	88fb      	ldrh	r3, [r7, #6]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e0ee      	b.n	800d60c <HAL_SAI_Transmit+0x204>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b01      	cmp	r3, #1
 800d438:	f040 80e7 	bne.w	800d60a <HAL_SAI_Transmit+0x202>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d442:	2b01      	cmp	r3, #1
 800d444:	d101      	bne.n	800d44a <HAL_SAI_Transmit+0x42>
 800d446:	2302      	movs	r3, #2
 800d448:	e0e0      	b.n	800d60c <HAL_SAI_Transmit+0x204>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2201      	movs	r2, #1
 800d44e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	88fa      	ldrh	r2, [r7, #6]
 800d456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	88fa      	ldrh	r2, [r7, #6]
 800d45e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2212      	movs	r2, #18
 800d46c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d482:	2b00      	cmp	r3, #0
 800d484:	f040 80b1 	bne.w	800d5ea <HAL_SAI_Transmit+0x1e2>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f000 f8c3 	bl	800d614 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d49c:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0U)
 800d49e:	e0a4      	b.n	800d5ea <HAL_SAI_Transmit+0x1e2>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d4aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d4ae:	d06b      	beq.n	800d588 <HAL_SAI_Transmit+0x180>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b4:	2b40      	cmp	r3, #64	; 0x40
 800d4b6:	d10f      	bne.n	800d4d8 <HAL_SAI_Transmit+0xd0>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10b      	bne.n	800d4d8 <HAL_SAI_Transmit+0xd0>
        {
          hsai->Instance->DR = *hsai->pBuffPtr;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4c4:	781a      	ldrb	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr++;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	665a      	str	r2, [r3, #100]	; 0x64
 800d4d6:	e04e      	b.n	800d576 <HAL_SAI_Transmit+0x16e>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4dc:	2b80      	cmp	r3, #128	; 0x80
 800d4de:	d819      	bhi.n	800d514 <HAL_SAI_Transmit+0x10c>
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4ec:	1c5a      	adds	r2, r3, #1
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	021b      	lsls	r3, r3, #8
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d504:	1c5a      	adds	r2, r3, #1
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	665a      	str	r2, [r3, #100]	; 0x64
          hsai->Instance->DR = temp;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	61da      	str	r2, [r3, #28]
 800d512:	e030      	b.n	800d576 <HAL_SAI_Transmit+0x16e>
        }
        else
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d520:	1c5a      	adds	r2, r3, #1
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	021b      	lsls	r3, r3, #8
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	4313      	orrs	r3, r2
 800d532:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d538:	1c5a      	adds	r2, r3, #1
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	041b      	lsls	r3, r3, #16
 800d546:	693a      	ldr	r2, [r7, #16]
 800d548:	4313      	orrs	r3, r2
 800d54a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	061b      	lsls	r3, r3, #24
 800d55e:	693a      	ldr	r2, [r7, #16]
 800d560:	4313      	orrs	r3, r2
 800d562:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	665a      	str	r2, [r3, #100]	; 0x64
          hsai->Instance->DR = temp;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	693a      	ldr	r2, [r7, #16]
 800d574:	61da      	str	r2, [r3, #28]
        }
        hsai->XferCount--;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d57c:	3b01      	subs	r3, #1
 800d57e:	b29a      	uxth	r2, r3
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d586:	e030      	b.n	800d5ea <HAL_SAI_Transmit+0x1e2>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 800d588:	f7f9 f9e6 	bl	8006958 <HAL_GetTick>
 800d58c:	4602      	mov	r2, r0
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	683a      	ldr	r2, [r7, #0]
 800d594:	429a      	cmp	r2, r3
 800d596:	d302      	bcc.n	800d59e <HAL_SAI_Transmit+0x196>
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d125      	bne.n	800d5ea <HAL_SAI_Transmit+0x1e2>
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5a4:	d021      	beq.n	800d5ea <HAL_SAI_Transmit+0x1e2>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5be:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f000 f8ab 	bl	800d71c <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f042 0208 	orr.w	r2, r2, #8
 800d5d4:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e010      	b.n	800d60c <HAL_SAI_Transmit+0x204>
    while (hsai->XferCount > 0U)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f47f af55 	bne.w	800d4a0 <HAL_SAI_Transmit+0x98>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d606:	2300      	movs	r3, #0
 800d608:	e000      	b.n	800d60c <HAL_SAI_Transmit+0x204>
  }
  else
  {
    return HAL_BUSY;
 800d60a:	2302      	movs	r3, #2
  }
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800d61c:	e06a      	b.n	800d6f4 <SAI_FillFifo+0xe0>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d622:	2b40      	cmp	r3, #64	; 0x40
 800d624:	d10f      	bne.n	800d646 <SAI_FillFifo+0x32>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10b      	bne.n	800d646 <SAI_FillFifo+0x32>
    {
      hsai->Instance->DR = *hsai->pBuffPtr;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d632:	781a      	ldrb	r2, [r3, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr++;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d63e:	1c5a      	adds	r2, r3, #1
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	665a      	str	r2, [r3, #100]	; 0x64
 800d644:	e04e      	b.n	800d6e4 <SAI_FillFifo+0xd0>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d64a:	2b80      	cmp	r3, #128	; 0x80
 800d64c:	d819      	bhi.n	800d682 <SAI_FillFifo+0x6e>
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	021b      	lsls	r3, r3, #8
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	665a      	str	r2, [r3, #100]	; 0x64
      hsai->Instance->DR = temp;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	61da      	str	r2, [r3, #28]
 800d680:	e030      	b.n	800d6e4 <SAI_FillFifo+0xd0>
    }
    else
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d68e:	1c5a      	adds	r2, r3, #1
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	021b      	lsls	r3, r3, #8
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6a6:	1c5a      	adds	r2, r3, #1
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	041b      	lsls	r3, r3, #16
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	061b      	lsls	r3, r3, #24
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	665a      	str	r2, [r3, #100]	; 0x64
      hsai->Instance->DR = temp;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	61da      	str	r2, [r3, #28]
    }
    hsai->XferCount--;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d6fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d702:	d004      	beq.n	800d70e <SAI_FillFifo+0xfa>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d187      	bne.n	800d61e <SAI_FillFifo+0xa>
  }
}
 800d70e:	bf00      	nop
 800d710:	3714      	adds	r7, #20
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
	...

0800d71c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d724:	4b18      	ldr	r3, [pc, #96]	; (800d788 <SAI_Disable+0x6c>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a18      	ldr	r2, [pc, #96]	; (800d78c <SAI_Disable+0x70>)
 800d72a:	fba2 2303 	umull	r2, r3, r2, r3
 800d72e:	0b1b      	lsrs	r3, r3, #12
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d734:	2300      	movs	r3, #0
 800d736:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d746:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10a      	bne.n	800d764 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d75e:	2303      	movs	r3, #3
 800d760:	72fb      	strb	r3, [r7, #11]
      break;
 800d762:	e009      	b.n	800d778 <SAI_Disable+0x5c>
    }
    count--;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3b01      	subs	r3, #1
 800d768:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1e7      	bne.n	800d748 <SAI_Disable+0x2c>

  return status;
 800d778:	7afb      	ldrb	r3, [r7, #11]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3714      	adds	r7, #20
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	2001c2ec 	.word	0x2001c2ec
 800d78c:	95cbec1b 	.word	0x95cbec1b

0800d790 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d101      	bne.n	800d7a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e022      	b.n	800d7e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d105      	bne.n	800d7ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7f4 fbf7 	bl	8001fa8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2203      	movs	r2, #3
 800d7be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 f814 	bl	800d7f0 <HAL_SD_InitCard>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e00a      	b.n	800d7e8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d7f0:	b5b0      	push	{r4, r5, r7, lr}
 800d7f2:	b08e      	sub	sp, #56	; 0x38
 800d7f4:	af04      	add	r7, sp, #16
 800d7f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d800:	2300      	movs	r3, #0
 800d802:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d804:	2300      	movs	r3, #0
 800d806:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d808:	2300      	movs	r3, #0
 800d80a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800d80c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d810:	f7fe fbf0 	bl	800bff4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d814:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d109      	bne.n	800d830 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d82a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e07b      	b.n	800d928 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	09db      	lsrs	r3, r3, #7
 800d834:	4a3e      	ldr	r2, [pc, #248]	; (800d930 <HAL_SD_InitCard+0x140>)
 800d836:	fba2 2303 	umull	r2, r3, r2, r3
 800d83a:	091b      	lsrs	r3, r3, #4
 800d83c:	3b02      	subs	r3, #2
 800d83e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681d      	ldr	r5, [r3, #0]
 800d844:	466c      	mov	r4, sp
 800d846:	f107 0314 	add.w	r3, r7, #20
 800d84a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d84e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d852:	f107 0308 	add.w	r3, r7, #8
 800d856:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d858:	4628      	mov	r0, r5
 800d85a:	f001 fc45 	bl	800f0e8 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d86c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4618      	mov	r0, r3
 800d874:	f001 fc72 	bl	800f15c <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d886:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	3302      	adds	r3, #2
 800d88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d892:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800d894:	4a27      	ldr	r2, [pc, #156]	; (800d934 <HAL_SD_InitCard+0x144>)
 800d896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d898:	fbb2 f3f3 	udiv	r3, r2, r3
 800d89c:	3301      	adds	r3, #1
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7f9 f866 	bl	8006970 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 fb77 	bl	800df98 <SD_PowerON>
 800d8aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00b      	beq.n	800d8ca <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	431a      	orrs	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e02e      	b.n	800d928 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 fa96 	bl	800ddfc <SD_InitCard>
 800d8d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00b      	beq.n	800d8f0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	431a      	orrs	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e01b      	b.n	800d928 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f001 fcc2 	bl	800f282 <SDMMC_CmdBlockLength>
 800d8fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d900:	6a3b      	ldr	r3, [r7, #32]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00f      	beq.n	800d926 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a0b      	ldr	r2, [pc, #44]	; (800d938 <HAL_SD_InitCard+0x148>)
 800d90c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	431a      	orrs	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2201      	movs	r2, #1
 800d91e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e000      	b.n	800d928 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3728      	adds	r7, #40	; 0x28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bdb0      	pop	{r4, r5, r7, pc}
 800d930:	014f8b59 	.word	0x014f8b59
 800d934:	00012110 	.word	0x00012110
 800d938:	004005ff 	.word	0x004005ff

0800d93c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d94a:	0f9b      	lsrs	r3, r3, #30
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d956:	0e9b      	lsrs	r3, r3, #26
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	f003 030f 	and.w	r3, r3, #15
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d968:	0e1b      	lsrs	r3, r3, #24
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	f003 0303 	and.w	r3, r3, #3
 800d970:	b2da      	uxtb	r2, r3
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d97a:	0c1b      	lsrs	r3, r3, #16
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d986:	0a1b      	lsrs	r3, r3, #8
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d992:	b2da      	uxtb	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d99c:	0d1b      	lsrs	r3, r3, #20
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9a8:	0c1b      	lsrs	r3, r3, #16
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 030f 	and.w	r3, r3, #15
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ba:	0bdb      	lsrs	r3, r3, #15
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9cc:	0b9b      	lsrs	r3, r3, #14
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	f003 0301 	and.w	r3, r3, #1
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9de:	0b5b      	lsrs	r3, r3, #13
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f0:	0b1b      	lsrs	r3, r3, #12
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	f003 0301 	and.w	r3, r3, #1
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2200      	movs	r2, #0
 800da02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d163      	bne.n	800dad4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da10:	009a      	lsls	r2, r3, #2
 800da12:	f640 73fc 	movw	r3, #4092	; 0xffc
 800da16:	4013      	ands	r3, r2
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800da1c:	0f92      	lsrs	r2, r2, #30
 800da1e:	431a      	orrs	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da28:	0edb      	lsrs	r3, r3, #27
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 0307 	and.w	r3, r3, #7
 800da30:	b2da      	uxtb	r2, r3
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da3a:	0e1b      	lsrs	r3, r3, #24
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 0307 	and.w	r3, r3, #7
 800da42:	b2da      	uxtb	r2, r3
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da4c:	0d5b      	lsrs	r3, r3, #21
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 0307 	and.w	r3, r3, #7
 800da54:	b2da      	uxtb	r2, r3
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da5e:	0c9b      	lsrs	r3, r3, #18
 800da60:	b2db      	uxtb	r3, r3
 800da62:	f003 0307 	and.w	r3, r3, #7
 800da66:	b2da      	uxtb	r2, r3
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da70:	0bdb      	lsrs	r3, r3, #15
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0307 	and.w	r3, r3, #7
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	7e1b      	ldrb	r3, [r3, #24]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	f003 0307 	and.w	r3, r3, #7
 800da92:	3302      	adds	r3, #2
 800da94:	2201      	movs	r2, #1
 800da96:	fa02 f303 	lsl.w	r3, r2, r3
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800da9e:	fb03 f202 	mul.w	r2, r3, r2
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	7a1b      	ldrb	r3, [r3, #8]
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	f003 030f 	and.w	r3, r3, #15
 800dab0:	2201      	movs	r2, #1
 800dab2:	409a      	lsls	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800dac0:	0a52      	lsrs	r2, r2, #9
 800dac2:	fb03 f202 	mul.w	r2, r3, r2
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dad0:	661a      	str	r2, [r3, #96]	; 0x60
 800dad2:	e031      	b.n	800db38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d11d      	bne.n	800db18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dae0:	041b      	lsls	r3, r3, #16
 800dae2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daea:	0c1b      	lsrs	r3, r3, #16
 800daec:	431a      	orrs	r2, r3
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	3301      	adds	r3, #1
 800daf8:	029a      	lsls	r2, r3, #10
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db0c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	661a      	str	r2, [r3, #96]	; 0x60
 800db16:	e00f      	b.n	800db38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a58      	ldr	r2, [pc, #352]	; (800dc80 <HAL_SD_GetCardCSD+0x344>)
 800db1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	e09d      	b.n	800dc74 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db3c:	0b9b      	lsrs	r3, r3, #14
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	f003 0301 	and.w	r3, r3, #1
 800db44:	b2da      	uxtb	r2, r3
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db4e:	09db      	lsrs	r3, r3, #7
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db60:	b2db      	uxtb	r3, r3
 800db62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db66:	b2da      	uxtb	r2, r3
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db70:	0fdb      	lsrs	r3, r3, #31
 800db72:	b2da      	uxtb	r2, r3
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db7c:	0f5b      	lsrs	r3, r3, #29
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	f003 0303 	and.w	r3, r3, #3
 800db84:	b2da      	uxtb	r2, r3
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db8e:	0e9b      	lsrs	r3, r3, #26
 800db90:	b2db      	uxtb	r3, r3
 800db92:	f003 0307 	and.w	r3, r3, #7
 800db96:	b2da      	uxtb	r2, r3
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba0:	0d9b      	lsrs	r3, r3, #22
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	f003 030f 	and.w	r3, r3, #15
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb2:	0d5b      	lsrs	r3, r3, #21
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbce:	0c1b      	lsrs	r3, r3, #16
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	f003 0301 	and.w	r3, r3, #1
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbe2:	0bdb      	lsrs	r3, r3, #15
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbf6:	0b9b      	lsrs	r3, r3, #14
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc0a:	0b5b      	lsrs	r3, r3, #13
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	f003 0301 	and.w	r3, r3, #1
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc1e:	0b1b      	lsrs	r3, r3, #12
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc32:	0a9b      	lsrs	r3, r3, #10
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	f003 0303 	and.w	r3, r3, #3
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc46:	0a1b      	lsrs	r3, r3, #8
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	f003 0303 	and.w	r3, r3, #3
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc5a:	085b      	lsrs	r3, r3, #1
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc62:	b2da      	uxtb	r2, r3
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	004005ff 	.word	0x004005ff

0800dc84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc84:	b5b0      	push	{r4, r5, r7, lr}
 800dc86:	b090      	sub	sp, #64	; 0x40
 800dc88:	af04      	add	r7, sp, #16
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2203      	movs	r2, #3
 800dc98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d02e      	beq.n	800dd02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcaa:	d106      	bne.n	800dcba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	639a      	str	r2, [r3, #56]	; 0x38
 800dcb8:	e029      	b.n	800dd0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcc0:	d10a      	bne.n	800dcd8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 f9f6 	bl	800e0b4 <SD_WideBus_Enable>
 800dcc8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd0:	431a      	orrs	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	639a      	str	r2, [r3, #56]	; 0x38
 800dcd6:	e01a      	b.n	800dd0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10a      	bne.n	800dcf4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fa33 	bl	800e14a <SD_WideBus_Disable>
 800dce4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcec:	431a      	orrs	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38
 800dcf2:	e00c      	b.n	800dd0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	639a      	str	r2, [r3, #56]	; 0x38
 800dd00:	e005      	b.n	800dd0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d007      	beq.n	800dd26 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a35      	ldr	r2, [pc, #212]	; (800ddf0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800dd1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dd24:	e042      	b.n	800ddac <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800dd26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800dd2a:	f7fe f963 	bl	800bff4 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd2e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d031      	beq.n	800dd9a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	695b      	ldr	r3, [r3, #20]
 800dd50:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	3302      	adds	r3, #2
 800dd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd5e:	4a25      	ldr	r2, [pc, #148]	; (800ddf4 <HAL_SD_ConfigWideBusOperation+0x170>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d907      	bls.n	800dd74 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	4a24      	ldr	r2, [pc, #144]	; (800ddf8 <HAL_SD_ConfigWideBusOperation+0x174>)
 800dd68:	fba2 2303 	umull	r2, r3, r2, r3
 800dd6c:	0ddb      	lsrs	r3, r3, #23
 800dd6e:	3b02      	subs	r3, #2
 800dd70:	623b      	str	r3, [r7, #32]
 800dd72:	e002      	b.n	800dd7a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	699b      	ldr	r3, [r3, #24]
 800dd78:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681d      	ldr	r5, [r3, #0]
 800dd7e:	466c      	mov	r4, sp
 800dd80:	f107 0318 	add.w	r3, r7, #24
 800dd84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd8c:	f107 030c 	add.w	r3, r7, #12
 800dd90:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd92:	4628      	mov	r0, r5
 800dd94:	f001 f9a8 	bl	800f0e8 <SDMMC_Init>
 800dd98:	e008      	b.n	800ddac <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f001 fa64 	bl	800f282 <SDMMC_CmdBlockLength>
 800ddba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00c      	beq.n	800dddc <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a0a      	ldr	r2, [pc, #40]	; (800ddf0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800ddc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd0:	431a      	orrs	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2201      	movs	r2, #1
 800dde0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800dde4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3730      	adds	r7, #48	; 0x30
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bdb0      	pop	{r4, r5, r7, pc}
 800ddf0:	004005ff 	.word	0x004005ff
 800ddf4:	017d7840 	.word	0x017d7840
 800ddf8:	55e63b89 	.word	0x55e63b89

0800ddfc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ddfc:	b5b0      	push	{r4, r5, r7, lr}
 800ddfe:	b094      	sub	sp, #80	; 0x50
 800de00:	af04      	add	r7, sp, #16
 800de02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800de04:	2301      	movs	r3, #1
 800de06:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f001 f9b4 	bl	800f17a <SDMMC_GetPowerState>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800de1c:	e0b8      	b.n	800df90 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de22:	2b03      	cmp	r3, #3
 800de24:	d02f      	beq.n	800de86 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f001 fb33 	bl	800f496 <SDMMC_CmdSendCID>
 800de30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <SD_InitCard+0x40>
    {
      return errorstate;
 800de38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3a:	e0a9      	b.n	800df90 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2100      	movs	r1, #0
 800de42:	4618      	mov	r0, r3
 800de44:	f001 f9de 	bl	800f204 <SDMMC_GetResponse>
 800de48:	4602      	mov	r2, r0
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2104      	movs	r1, #4
 800de54:	4618      	mov	r0, r3
 800de56:	f001 f9d5 	bl	800f204 <SDMMC_GetResponse>
 800de5a:	4602      	mov	r2, r0
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2108      	movs	r1, #8
 800de66:	4618      	mov	r0, r3
 800de68:	f001 f9cc 	bl	800f204 <SDMMC_GetResponse>
 800de6c:	4602      	mov	r2, r0
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	210c      	movs	r1, #12
 800de78:	4618      	mov	r0, r3
 800de7a:	f001 f9c3 	bl	800f204 <SDMMC_GetResponse>
 800de7e:	4602      	mov	r2, r0
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de8a:	2b03      	cmp	r3, #3
 800de8c:	d00d      	beq.n	800deaa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f107 020e 	add.w	r2, r7, #14
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f001 fb39 	bl	800f510 <SDMMC_CmdSetRelAdd>
 800de9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <SD_InitCard+0xae>
    {
      return errorstate;
 800dea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea8:	e072      	b.n	800df90 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deae:	2b03      	cmp	r3, #3
 800deb0:	d036      	beq.n	800df20 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800deb2:	89fb      	ldrh	r3, [r7, #14]
 800deb4:	461a      	mov	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dec2:	041b      	lsls	r3, r3, #16
 800dec4:	4619      	mov	r1, r3
 800dec6:	4610      	mov	r0, r2
 800dec8:	f001 fb03 	bl	800f4d2 <SDMMC_CmdSendCSD>
 800decc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ded4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded6:	e05b      	b.n	800df90 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2100      	movs	r1, #0
 800dede:	4618      	mov	r0, r3
 800dee0:	f001 f990 	bl	800f204 <SDMMC_GetResponse>
 800dee4:	4602      	mov	r2, r0
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2104      	movs	r1, #4
 800def0:	4618      	mov	r0, r3
 800def2:	f001 f987 	bl	800f204 <SDMMC_GetResponse>
 800def6:	4602      	mov	r2, r0
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2108      	movs	r1, #8
 800df02:	4618      	mov	r0, r3
 800df04:	f001 f97e 	bl	800f204 <SDMMC_GetResponse>
 800df08:	4602      	mov	r2, r0
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	210c      	movs	r1, #12
 800df14:	4618      	mov	r0, r3
 800df16:	f001 f975 	bl	800f204 <SDMMC_GetResponse>
 800df1a:	4602      	mov	r2, r0
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2104      	movs	r1, #4
 800df26:	4618      	mov	r0, r3
 800df28:	f001 f96c 	bl	800f204 <SDMMC_GetResponse>
 800df2c:	4603      	mov	r3, r0
 800df2e:	0d1a      	lsrs	r2, r3, #20
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800df34:	f107 0310 	add.w	r3, r7, #16
 800df38:	4619      	mov	r1, r3
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff fcfe 	bl	800d93c <HAL_SD_GetCardCSD>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df4a:	e021      	b.n	800df90 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6819      	ldr	r1, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df54:	041b      	lsls	r3, r3, #16
 800df56:	2200      	movs	r2, #0
 800df58:	461c      	mov	r4, r3
 800df5a:	4615      	mov	r5, r2
 800df5c:	4622      	mov	r2, r4
 800df5e:	462b      	mov	r3, r5
 800df60:	4608      	mov	r0, r1
 800df62:	f001 f9b0 	bl	800f2c6 <SDMMC_CmdSelDesel>
 800df66:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800df68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <SD_InitCard+0x176>
  {
    return errorstate;
 800df6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df70:	e00e      	b.n	800df90 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681d      	ldr	r5, [r3, #0]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	466c      	mov	r4, sp
 800df7a:	f103 0210 	add.w	r2, r3, #16
 800df7e:	ca07      	ldmia	r2, {r0, r1, r2}
 800df80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df84:	3304      	adds	r3, #4
 800df86:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df88:	4628      	mov	r0, r5
 800df8a:	f001 f8ad 	bl	800f0e8 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800df8e:	2300      	movs	r3, #0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3740      	adds	r7, #64	; 0x40
 800df94:	46bd      	mov	sp, r7
 800df96:	bdb0      	pop	{r4, r5, r7, pc}

0800df98 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f001 f9ab 	bl	800f30c <SDMMC_CmdGoIdleState>
 800dfb6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	e072      	b.n	800e0a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f001 f9be 	bl	800f348 <SDMMC_CmdOperCond>
 800dfcc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00d      	beq.n	800dff0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f001 f994 	bl	800f30c <SDMMC_CmdGoIdleState>
 800dfe4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d004      	beq.n	800dff6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	e05b      	b.n	800e0a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d137      	bne.n	800e06e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2100      	movs	r1, #0
 800e004:	4618      	mov	r0, r3
 800e006:	f001 f9be 	bl	800f386 <SDMMC_CmdAppCommand>
 800e00a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d02d      	beq.n	800e06e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e012:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e016:	e047      	b.n	800e0a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2100      	movs	r1, #0
 800e01e:	4618      	mov	r0, r3
 800e020:	f001 f9b1 	bl	800f386 <SDMMC_CmdAppCommand>
 800e024:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <SD_PowerON+0x98>
    {
      return errorstate;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	e03b      	b.n	800e0a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	491e      	ldr	r1, [pc, #120]	; (800e0b0 <SD_PowerON+0x118>)
 800e036:	4618      	mov	r0, r3
 800e038:	f001 f9c7 	bl	800f3ca <SDMMC_CmdAppOperCommand>
 800e03c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e048:	e02e      	b.n	800e0a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2100      	movs	r1, #0
 800e050:	4618      	mov	r0, r3
 800e052:	f001 f8d7 	bl	800f204 <SDMMC_GetResponse>
 800e056:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	0fdb      	lsrs	r3, r3, #31
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d101      	bne.n	800e064 <SD_PowerON+0xcc>
 800e060:	2301      	movs	r3, #1
 800e062:	e000      	b.n	800e066 <SD_PowerON+0xce>
 800e064:	2300      	movs	r3, #0
 800e066:	613b      	str	r3, [r7, #16]

    count++;
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	3301      	adds	r3, #1
 800e06c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e074:	4293      	cmp	r3, r2
 800e076:	d802      	bhi.n	800e07e <SD_PowerON+0xe6>
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d0cc      	beq.n	800e018 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e084:	4293      	cmp	r3, r2
 800e086:	d902      	bls.n	800e08e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e08c:	e00c      	b.n	800e0a8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d003      	beq.n	800e0a0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	645a      	str	r2, [r3, #68]	; 0x44
 800e09e:	e002      	b.n	800e0a6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	c1100000 	.word	0xc1100000

0800e0b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f001 f89a 	bl	800f204 <SDMMC_GetResponse>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0da:	d102      	bne.n	800e0e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e0dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0e0:	e02f      	b.n	800e142 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e0e2:	f107 030c 	add.w	r3, r7, #12
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 f879 	bl	800e1e0 <SD_FindSCR>
 800e0ee:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	e023      	b.n	800e142 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e100:	2b00      	cmp	r3, #0
 800e102:	d01c      	beq.n	800e13e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e10c:	041b      	lsls	r3, r3, #16
 800e10e:	4619      	mov	r1, r3
 800e110:	4610      	mov	r0, r2
 800e112:	f001 f938 	bl	800f386 <SDMMC_CmdAppCommand>
 800e116:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	e00f      	b.n	800e142 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2102      	movs	r1, #2
 800e128:	4618      	mov	r0, r3
 800e12a:	f001 f971 	bl	800f410 <SDMMC_CmdBusWidth>
 800e12e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	e003      	b.n	800e142 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e13a:	2300      	movs	r3, #0
 800e13c:	e001      	b.n	800e142 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e13e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e142:	4618      	mov	r0, r3
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b086      	sub	sp, #24
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e152:	2300      	movs	r3, #0
 800e154:	60fb      	str	r3, [r7, #12]
 800e156:	2300      	movs	r3, #0
 800e158:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2100      	movs	r1, #0
 800e160:	4618      	mov	r0, r3
 800e162:	f001 f84f 	bl	800f204 <SDMMC_GetResponse>
 800e166:	4603      	mov	r3, r0
 800e168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e16c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e170:	d102      	bne.n	800e178 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e172:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e176:	e02f      	b.n	800e1d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e178:	f107 030c 	add.w	r3, r7, #12
 800e17c:	4619      	mov	r1, r3
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 f82e 	bl	800e1e0 <SD_FindSCR>
 800e184:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	e023      	b.n	800e1d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e196:	2b00      	cmp	r3, #0
 800e198:	d01c      	beq.n	800e1d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1a2:	041b      	lsls	r3, r3, #16
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	f001 f8ed 	bl	800f386 <SDMMC_CmdAppCommand>
 800e1ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d001      	beq.n	800e1b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	e00f      	b.n	800e1d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2100      	movs	r1, #0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f001 f926 	bl	800f410 <SDMMC_CmdBusWidth>
 800e1c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	e003      	b.n	800e1d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e001      	b.n	800e1d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e1d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3718      	adds	r7, #24
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e1e0:	b590      	push	{r4, r7, lr}
 800e1e2:	b08f      	sub	sp, #60	; 0x3c
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e1ea:	f7f8 fbb5 	bl	8006958 <HAL_GetTick>
 800e1ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	60bb      	str	r3, [r7, #8]
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2108      	movs	r1, #8
 800e206:	4618      	mov	r0, r3
 800e208:	f001 f83b 	bl	800f282 <SDMMC_CmdBlockLength>
 800e20c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e210:	2b00      	cmp	r3, #0
 800e212:	d001      	beq.n	800e218 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	e0a9      	b.n	800e36c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e220:	041b      	lsls	r3, r3, #16
 800e222:	4619      	mov	r1, r3
 800e224:	4610      	mov	r0, r2
 800e226:	f001 f8ae 	bl	800f386 <SDMMC_CmdAppCommand>
 800e22a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e234:	e09a      	b.n	800e36c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e23a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e23c:	2308      	movs	r3, #8
 800e23e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e240:	2330      	movs	r3, #48	; 0x30
 800e242:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e244:	2302      	movs	r3, #2
 800e246:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e248:	2300      	movs	r3, #0
 800e24a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e24c:	2301      	movs	r3, #1
 800e24e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f107 0210 	add.w	r2, r7, #16
 800e258:	4611      	mov	r1, r2
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 ffe5 	bl	800f22a <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4618      	mov	r0, r3
 800e266:	f001 f8f5 	bl	800f454 <SDMMC_CmdSendSCR>
 800e26a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d022      	beq.n	800e2b8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e274:	e07a      	b.n	800e36c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00e      	beq.n	800e2a2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6819      	ldr	r1, [r3, #0]
 800e288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	f107 0208 	add.w	r2, r7, #8
 800e290:	18d4      	adds	r4, r2, r3
 800e292:	4608      	mov	r0, r1
 800e294:	f000 ff55 	bl	800f142 <SDMMC_ReadFIFO>
 800e298:	4603      	mov	r3, r0
 800e29a:	6023      	str	r3, [r4, #0]
      index++;
 800e29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e29e:	3301      	adds	r3, #1
 800e2a0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2a2:	f7f8 fb59 	bl	8006958 <HAL_GetTick>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2b0:	d102      	bne.n	800e2b8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e2b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2b6:	e059      	b.n	800e36c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2be:	f240 432a 	movw	r3, #1066	; 0x42a
 800e2c2:	4013      	ands	r3, r2
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d0d6      	beq.n	800e276 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ce:	f003 0308 	and.w	r3, r3, #8
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d005      	beq.n	800e2e2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2208      	movs	r2, #8
 800e2dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e2de:	2308      	movs	r3, #8
 800e2e0:	e044      	b.n	800e36c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e8:	f003 0302 	and.w	r3, r3, #2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d005      	beq.n	800e2fc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	e037      	b.n	800e36c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e302:	f003 0320 	and.w	r3, r3, #32
 800e306:	2b00      	cmp	r3, #0
 800e308:	d005      	beq.n	800e316 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2220      	movs	r2, #32
 800e310:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e312:	2320      	movs	r3, #32
 800e314:	e02a      	b.n	800e36c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f240 523a 	movw	r2, #1338	; 0x53a
 800e31e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	061a      	lsls	r2, r3, #24
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	021b      	lsls	r3, r3, #8
 800e328:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e32c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	0a1b      	lsrs	r3, r3, #8
 800e332:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e336:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	0e1b      	lsrs	r3, r3, #24
 800e33c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	601a      	str	r2, [r3, #0]
    scr++;
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	3304      	adds	r3, #4
 800e346:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	061a      	lsls	r2, r3, #24
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	021b      	lsls	r3, r3, #8
 800e350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e354:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	0a1b      	lsrs	r3, r3, #8
 800e35a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e35e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	0e1b      	lsrs	r3, r3, #24
 800e364:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e368:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	373c      	adds	r7, #60	; 0x3c
 800e370:	46bd      	mov	sp, r7
 800e372:	bd90      	pop	{r4, r7, pc}

0800e374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	e095      	b.n	800e4b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d108      	bne.n	800e3a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e396:	d009      	beq.n	800e3ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2200      	movs	r2, #0
 800e39c:	61da      	str	r2, [r3, #28]
 800e39e:	e005      	b.n	800e3ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7f3 fe50 	bl	800206c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2202      	movs	r2, #2
 800e3d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e3ec:	d902      	bls.n	800e3f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	60fb      	str	r3, [r7, #12]
 800e3f2:	e002      	b.n	800e3fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e3f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e402:	d007      	beq.n	800e414 <HAL_SPI_Init+0xa0>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e40c:	d002      	beq.n	800e414 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e424:	431a      	orrs	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	691b      	ldr	r3, [r3, #16]
 800e42a:	f003 0302 	and.w	r3, r3, #2
 800e42e:	431a      	orrs	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	695b      	ldr	r3, [r3, #20]
 800e434:	f003 0301 	and.w	r3, r3, #1
 800e438:	431a      	orrs	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	699b      	ldr	r3, [r3, #24]
 800e43e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e442:	431a      	orrs	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	69db      	ldr	r3, [r3, #28]
 800e448:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e44c:	431a      	orrs	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6a1b      	ldr	r3, [r3, #32]
 800e452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e456:	ea42 0103 	orr.w	r1, r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e45e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	430a      	orrs	r2, r1
 800e468:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	699b      	ldr	r3, [r3, #24]
 800e46e:	0c1b      	lsrs	r3, r3, #16
 800e470:	f003 0204 	and.w	r2, r3, #4
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e478:	f003 0310 	and.w	r3, r3, #16
 800e47c:	431a      	orrs	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e482:	f003 0308 	and.w	r3, r3, #8
 800e486:	431a      	orrs	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e490:	ea42 0103 	orr.w	r1, r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b084      	sub	sp, #16
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	60f8      	str	r0, [r7, #12]
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e038      	b.n	800e542 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d106      	bne.n	800e4ea <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f7f3 fedf 	bl	80022a8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	f000 fcdf 	bl	800eeb8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6818      	ldr	r0, [r3, #0]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	461a      	mov	r2, r3
 800e504:	68b9      	ldr	r1, [r7, #8]
 800e506:	f000 fd67 	bl	800efd8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	6858      	ldr	r0, [r3, #4]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	689a      	ldr	r2, [r3, #8]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e516:	6879      	ldr	r1, [r7, #4]
 800e518:	f000 fdae 	bl	800f078 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	6892      	ldr	r2, [r2, #8]
 800e524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	6892      	ldr	r2, [r2, #8]
 800e530:	f041 0101 	orr.w	r1, r1, #1
 800e534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b082      	sub	sp, #8
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d101      	bne.n	800e55c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e558:	2301      	movs	r3, #1
 800e55a:	e040      	b.n	800e5de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e560:	2b00      	cmp	r3, #0
 800e562:	d106      	bne.n	800e572 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7f3 fb89 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2224      	movs	r2, #36	; 0x24
 800e576:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f022 0201 	bic.w	r2, r2, #1
 800e586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f82d 	bl	800e5e8 <UART_SetConfig>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b01      	cmp	r3, #1
 800e592:	d101      	bne.n	800e598 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	e022      	b.n	800e5de <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d002      	beq.n	800e5a6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 fad9 	bl	800eb58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e5b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	689a      	ldr	r2, [r3, #8]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e5c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f042 0201 	orr.w	r2, r2, #1
 800e5d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fb60 	bl	800ec9c <UART_CheckIdleState>
 800e5dc:	4603      	mov	r3, r0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
	...

0800e5e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5ec:	b08a      	sub	sp, #40	; 0x28
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	689a      	ldr	r2, [r3, #8]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	431a      	orrs	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	695b      	ldr	r3, [r3, #20]
 800e606:	431a      	orrs	r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	69db      	ldr	r3, [r3, #28]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	4ba4      	ldr	r3, [pc, #656]	; (800e8a8 <UART_SetConfig+0x2c0>)
 800e618:	4013      	ands	r3, r2
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	6812      	ldr	r2, [r2, #0]
 800e61e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e620:	430b      	orrs	r3, r1
 800e622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	68da      	ldr	r2, [r3, #12]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	430a      	orrs	r2, r1
 800e638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	699b      	ldr	r3, [r3, #24]
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a99      	ldr	r2, [pc, #612]	; (800e8ac <UART_SetConfig+0x2c4>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d004      	beq.n	800e654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e650:	4313      	orrs	r3, r2
 800e652:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e664:	430a      	orrs	r2, r1
 800e666:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a90      	ldr	r2, [pc, #576]	; (800e8b0 <UART_SetConfig+0x2c8>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d126      	bne.n	800e6c0 <UART_SetConfig+0xd8>
 800e672:	4b90      	ldr	r3, [pc, #576]	; (800e8b4 <UART_SetConfig+0x2cc>)
 800e674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e678:	f003 0303 	and.w	r3, r3, #3
 800e67c:	2b03      	cmp	r3, #3
 800e67e:	d81b      	bhi.n	800e6b8 <UART_SetConfig+0xd0>
 800e680:	a201      	add	r2, pc, #4	; (adr r2, 800e688 <UART_SetConfig+0xa0>)
 800e682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e686:	bf00      	nop
 800e688:	0800e699 	.word	0x0800e699
 800e68c:	0800e6a9 	.word	0x0800e6a9
 800e690:	0800e6a1 	.word	0x0800e6a1
 800e694:	0800e6b1 	.word	0x0800e6b1
 800e698:	2301      	movs	r3, #1
 800e69a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e69e:	e116      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e6a6:	e112      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e6a8:	2304      	movs	r3, #4
 800e6aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e6ae:	e10e      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e6b0:	2308      	movs	r3, #8
 800e6b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e6b6:	e10a      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e6b8:	2310      	movs	r3, #16
 800e6ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e6be:	e106      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a7c      	ldr	r2, [pc, #496]	; (800e8b8 <UART_SetConfig+0x2d0>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d138      	bne.n	800e73c <UART_SetConfig+0x154>
 800e6ca:	4b7a      	ldr	r3, [pc, #488]	; (800e8b4 <UART_SetConfig+0x2cc>)
 800e6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6d0:	f003 030c 	and.w	r3, r3, #12
 800e6d4:	2b0c      	cmp	r3, #12
 800e6d6:	d82d      	bhi.n	800e734 <UART_SetConfig+0x14c>
 800e6d8:	a201      	add	r2, pc, #4	; (adr r2, 800e6e0 <UART_SetConfig+0xf8>)
 800e6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6de:	bf00      	nop
 800e6e0:	0800e715 	.word	0x0800e715
 800e6e4:	0800e735 	.word	0x0800e735
 800e6e8:	0800e735 	.word	0x0800e735
 800e6ec:	0800e735 	.word	0x0800e735
 800e6f0:	0800e725 	.word	0x0800e725
 800e6f4:	0800e735 	.word	0x0800e735
 800e6f8:	0800e735 	.word	0x0800e735
 800e6fc:	0800e735 	.word	0x0800e735
 800e700:	0800e71d 	.word	0x0800e71d
 800e704:	0800e735 	.word	0x0800e735
 800e708:	0800e735 	.word	0x0800e735
 800e70c:	0800e735 	.word	0x0800e735
 800e710:	0800e72d 	.word	0x0800e72d
 800e714:	2300      	movs	r3, #0
 800e716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e71a:	e0d8      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e71c:	2302      	movs	r3, #2
 800e71e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e722:	e0d4      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e724:	2304      	movs	r3, #4
 800e726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e72a:	e0d0      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e72c:	2308      	movs	r3, #8
 800e72e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e732:	e0cc      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e734:	2310      	movs	r3, #16
 800e736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e73a:	e0c8      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a5e      	ldr	r2, [pc, #376]	; (800e8bc <UART_SetConfig+0x2d4>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d125      	bne.n	800e792 <UART_SetConfig+0x1aa>
 800e746:	4b5b      	ldr	r3, [pc, #364]	; (800e8b4 <UART_SetConfig+0x2cc>)
 800e748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e74c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e750:	2b30      	cmp	r3, #48	; 0x30
 800e752:	d016      	beq.n	800e782 <UART_SetConfig+0x19a>
 800e754:	2b30      	cmp	r3, #48	; 0x30
 800e756:	d818      	bhi.n	800e78a <UART_SetConfig+0x1a2>
 800e758:	2b20      	cmp	r3, #32
 800e75a:	d00a      	beq.n	800e772 <UART_SetConfig+0x18a>
 800e75c:	2b20      	cmp	r3, #32
 800e75e:	d814      	bhi.n	800e78a <UART_SetConfig+0x1a2>
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <UART_SetConfig+0x182>
 800e764:	2b10      	cmp	r3, #16
 800e766:	d008      	beq.n	800e77a <UART_SetConfig+0x192>
 800e768:	e00f      	b.n	800e78a <UART_SetConfig+0x1a2>
 800e76a:	2300      	movs	r3, #0
 800e76c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e770:	e0ad      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e772:	2302      	movs	r3, #2
 800e774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e778:	e0a9      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e77a:	2304      	movs	r3, #4
 800e77c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e780:	e0a5      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e782:	2308      	movs	r3, #8
 800e784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e788:	e0a1      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e78a:	2310      	movs	r3, #16
 800e78c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e790:	e09d      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a4a      	ldr	r2, [pc, #296]	; (800e8c0 <UART_SetConfig+0x2d8>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d125      	bne.n	800e7e8 <UART_SetConfig+0x200>
 800e79c:	4b45      	ldr	r3, [pc, #276]	; (800e8b4 <UART_SetConfig+0x2cc>)
 800e79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e7a6:	2bc0      	cmp	r3, #192	; 0xc0
 800e7a8:	d016      	beq.n	800e7d8 <UART_SetConfig+0x1f0>
 800e7aa:	2bc0      	cmp	r3, #192	; 0xc0
 800e7ac:	d818      	bhi.n	800e7e0 <UART_SetConfig+0x1f8>
 800e7ae:	2b80      	cmp	r3, #128	; 0x80
 800e7b0:	d00a      	beq.n	800e7c8 <UART_SetConfig+0x1e0>
 800e7b2:	2b80      	cmp	r3, #128	; 0x80
 800e7b4:	d814      	bhi.n	800e7e0 <UART_SetConfig+0x1f8>
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d002      	beq.n	800e7c0 <UART_SetConfig+0x1d8>
 800e7ba:	2b40      	cmp	r3, #64	; 0x40
 800e7bc:	d008      	beq.n	800e7d0 <UART_SetConfig+0x1e8>
 800e7be:	e00f      	b.n	800e7e0 <UART_SetConfig+0x1f8>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e7c6:	e082      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e7ce:	e07e      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e7d0:	2304      	movs	r3, #4
 800e7d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e7d6:	e07a      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e7d8:	2308      	movs	r3, #8
 800e7da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e7de:	e076      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e7e0:	2310      	movs	r3, #16
 800e7e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e7e6:	e072      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a35      	ldr	r2, [pc, #212]	; (800e8c4 <UART_SetConfig+0x2dc>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d12a      	bne.n	800e848 <UART_SetConfig+0x260>
 800e7f2:	4b30      	ldr	r3, [pc, #192]	; (800e8b4 <UART_SetConfig+0x2cc>)
 800e7f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e800:	d01a      	beq.n	800e838 <UART_SetConfig+0x250>
 800e802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e806:	d81b      	bhi.n	800e840 <UART_SetConfig+0x258>
 800e808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e80c:	d00c      	beq.n	800e828 <UART_SetConfig+0x240>
 800e80e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e812:	d815      	bhi.n	800e840 <UART_SetConfig+0x258>
 800e814:	2b00      	cmp	r3, #0
 800e816:	d003      	beq.n	800e820 <UART_SetConfig+0x238>
 800e818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e81c:	d008      	beq.n	800e830 <UART_SetConfig+0x248>
 800e81e:	e00f      	b.n	800e840 <UART_SetConfig+0x258>
 800e820:	2300      	movs	r3, #0
 800e822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e826:	e052      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e828:	2302      	movs	r3, #2
 800e82a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e82e:	e04e      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e830:	2304      	movs	r3, #4
 800e832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e836:	e04a      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e838:	2308      	movs	r3, #8
 800e83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e83e:	e046      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e840:	2310      	movs	r3, #16
 800e842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e846:	e042      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a17      	ldr	r2, [pc, #92]	; (800e8ac <UART_SetConfig+0x2c4>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d13a      	bne.n	800e8c8 <UART_SetConfig+0x2e0>
 800e852:	4b18      	ldr	r3, [pc, #96]	; (800e8b4 <UART_SetConfig+0x2cc>)
 800e854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e858:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e85c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e860:	d01a      	beq.n	800e898 <UART_SetConfig+0x2b0>
 800e862:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e866:	d81b      	bhi.n	800e8a0 <UART_SetConfig+0x2b8>
 800e868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e86c:	d00c      	beq.n	800e888 <UART_SetConfig+0x2a0>
 800e86e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e872:	d815      	bhi.n	800e8a0 <UART_SetConfig+0x2b8>
 800e874:	2b00      	cmp	r3, #0
 800e876:	d003      	beq.n	800e880 <UART_SetConfig+0x298>
 800e878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e87c:	d008      	beq.n	800e890 <UART_SetConfig+0x2a8>
 800e87e:	e00f      	b.n	800e8a0 <UART_SetConfig+0x2b8>
 800e880:	2300      	movs	r3, #0
 800e882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e886:	e022      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e888:	2302      	movs	r3, #2
 800e88a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e88e:	e01e      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e890:	2304      	movs	r3, #4
 800e892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e896:	e01a      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e898:	2308      	movs	r3, #8
 800e89a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e89e:	e016      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e8a0:	2310      	movs	r3, #16
 800e8a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8a6:	e012      	b.n	800e8ce <UART_SetConfig+0x2e6>
 800e8a8:	efff69f3 	.word	0xefff69f3
 800e8ac:	40008000 	.word	0x40008000
 800e8b0:	40013800 	.word	0x40013800
 800e8b4:	40021000 	.word	0x40021000
 800e8b8:	40004400 	.word	0x40004400
 800e8bc:	40004800 	.word	0x40004800
 800e8c0:	40004c00 	.word	0x40004c00
 800e8c4:	40005000 	.word	0x40005000
 800e8c8:	2310      	movs	r3, #16
 800e8ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4a9f      	ldr	r2, [pc, #636]	; (800eb50 <UART_SetConfig+0x568>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d17a      	bne.n	800e9ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e8d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8dc:	2b08      	cmp	r3, #8
 800e8de:	d824      	bhi.n	800e92a <UART_SetConfig+0x342>
 800e8e0:	a201      	add	r2, pc, #4	; (adr r2, 800e8e8 <UART_SetConfig+0x300>)
 800e8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e6:	bf00      	nop
 800e8e8:	0800e90d 	.word	0x0800e90d
 800e8ec:	0800e92b 	.word	0x0800e92b
 800e8f0:	0800e915 	.word	0x0800e915
 800e8f4:	0800e92b 	.word	0x0800e92b
 800e8f8:	0800e91b 	.word	0x0800e91b
 800e8fc:	0800e92b 	.word	0x0800e92b
 800e900:	0800e92b 	.word	0x0800e92b
 800e904:	0800e92b 	.word	0x0800e92b
 800e908:	0800e923 	.word	0x0800e923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e90c:	f7fc fef2 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800e910:	61f8      	str	r0, [r7, #28]
        break;
 800e912:	e010      	b.n	800e936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e914:	4b8f      	ldr	r3, [pc, #572]	; (800eb54 <UART_SetConfig+0x56c>)
 800e916:	61fb      	str	r3, [r7, #28]
        break;
 800e918:	e00d      	b.n	800e936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e91a:	f7fc fe53 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800e91e:	61f8      	str	r0, [r7, #28]
        break;
 800e920:	e009      	b.n	800e936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e926:	61fb      	str	r3, [r7, #28]
        break;
 800e928:	e005      	b.n	800e936 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800e92a:	2300      	movs	r3, #0
 800e92c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e92e:	2301      	movs	r3, #1
 800e930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e934:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	f000 80fb 	beq.w	800eb34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	4613      	mov	r3, r2
 800e944:	005b      	lsls	r3, r3, #1
 800e946:	4413      	add	r3, r2
 800e948:	69fa      	ldr	r2, [r7, #28]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d305      	bcc.n	800e95a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e954:	69fa      	ldr	r2, [r7, #28]
 800e956:	429a      	cmp	r2, r3
 800e958:	d903      	bls.n	800e962 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e960:	e0e8      	b.n	800eb34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	2200      	movs	r2, #0
 800e966:	461c      	mov	r4, r3
 800e968:	4615      	mov	r5, r2
 800e96a:	f04f 0200 	mov.w	r2, #0
 800e96e:	f04f 0300 	mov.w	r3, #0
 800e972:	022b      	lsls	r3, r5, #8
 800e974:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e978:	0222      	lsls	r2, r4, #8
 800e97a:	68f9      	ldr	r1, [r7, #12]
 800e97c:	6849      	ldr	r1, [r1, #4]
 800e97e:	0849      	lsrs	r1, r1, #1
 800e980:	2000      	movs	r0, #0
 800e982:	4688      	mov	r8, r1
 800e984:	4681      	mov	r9, r0
 800e986:	eb12 0a08 	adds.w	sl, r2, r8
 800e98a:	eb43 0b09 	adc.w	fp, r3, r9
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	2200      	movs	r2, #0
 800e994:	603b      	str	r3, [r7, #0]
 800e996:	607a      	str	r2, [r7, #4]
 800e998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e99c:	4650      	mov	r0, sl
 800e99e:	4659      	mov	r1, fp
 800e9a0:	f7f1 fc76 	bl	8000290 <__aeabi_uldivmod>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9b2:	d308      	bcc.n	800e9c6 <UART_SetConfig+0x3de>
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9ba:	d204      	bcs.n	800e9c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	69ba      	ldr	r2, [r7, #24]
 800e9c2:	60da      	str	r2, [r3, #12]
 800e9c4:	e0b6      	b.n	800eb34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e9cc:	e0b2      	b.n	800eb34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	69db      	ldr	r3, [r3, #28]
 800e9d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9d6:	d15e      	bne.n	800ea96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800e9d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9dc:	2b08      	cmp	r3, #8
 800e9de:	d828      	bhi.n	800ea32 <UART_SetConfig+0x44a>
 800e9e0:	a201      	add	r2, pc, #4	; (adr r2, 800e9e8 <UART_SetConfig+0x400>)
 800e9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e6:	bf00      	nop
 800e9e8:	0800ea0d 	.word	0x0800ea0d
 800e9ec:	0800ea15 	.word	0x0800ea15
 800e9f0:	0800ea1d 	.word	0x0800ea1d
 800e9f4:	0800ea33 	.word	0x0800ea33
 800e9f8:	0800ea23 	.word	0x0800ea23
 800e9fc:	0800ea33 	.word	0x0800ea33
 800ea00:	0800ea33 	.word	0x0800ea33
 800ea04:	0800ea33 	.word	0x0800ea33
 800ea08:	0800ea2b 	.word	0x0800ea2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea0c:	f7fc fe72 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800ea10:	61f8      	str	r0, [r7, #28]
        break;
 800ea12:	e014      	b.n	800ea3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea14:	f7fc fe84 	bl	800b720 <HAL_RCC_GetPCLK2Freq>
 800ea18:	61f8      	str	r0, [r7, #28]
        break;
 800ea1a:	e010      	b.n	800ea3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea1c:	4b4d      	ldr	r3, [pc, #308]	; (800eb54 <UART_SetConfig+0x56c>)
 800ea1e:	61fb      	str	r3, [r7, #28]
        break;
 800ea20:	e00d      	b.n	800ea3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea22:	f7fc fdcf 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800ea26:	61f8      	str	r0, [r7, #28]
        break;
 800ea28:	e009      	b.n	800ea3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea2e:	61fb      	str	r3, [r7, #28]
        break;
 800ea30:	e005      	b.n	800ea3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ea32:	2300      	movs	r3, #0
 800ea34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ea36:	2301      	movs	r3, #1
 800ea38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ea3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d077      	beq.n	800eb34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	005a      	lsls	r2, r3, #1
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	085b      	lsrs	r3, r3, #1
 800ea4e:	441a      	add	r2, r3
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	2b0f      	cmp	r3, #15
 800ea5e:	d916      	bls.n	800ea8e <UART_SetConfig+0x4a6>
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea66:	d212      	bcs.n	800ea8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	f023 030f 	bic.w	r3, r3, #15
 800ea70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	085b      	lsrs	r3, r3, #1
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	f003 0307 	and.w	r3, r3, #7
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	8afb      	ldrh	r3, [r7, #22]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	8afa      	ldrh	r2, [r7, #22]
 800ea8a:	60da      	str	r2, [r3, #12]
 800ea8c:	e052      	b.n	800eb34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ea94:	e04e      	b.n	800eb34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea9a:	2b08      	cmp	r3, #8
 800ea9c:	d827      	bhi.n	800eaee <UART_SetConfig+0x506>
 800ea9e:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <UART_SetConfig+0x4bc>)
 800eaa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa4:	0800eac9 	.word	0x0800eac9
 800eaa8:	0800ead1 	.word	0x0800ead1
 800eaac:	0800ead9 	.word	0x0800ead9
 800eab0:	0800eaef 	.word	0x0800eaef
 800eab4:	0800eadf 	.word	0x0800eadf
 800eab8:	0800eaef 	.word	0x0800eaef
 800eabc:	0800eaef 	.word	0x0800eaef
 800eac0:	0800eaef 	.word	0x0800eaef
 800eac4:	0800eae7 	.word	0x0800eae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eac8:	f7fc fe14 	bl	800b6f4 <HAL_RCC_GetPCLK1Freq>
 800eacc:	61f8      	str	r0, [r7, #28]
        break;
 800eace:	e014      	b.n	800eafa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ead0:	f7fc fe26 	bl	800b720 <HAL_RCC_GetPCLK2Freq>
 800ead4:	61f8      	str	r0, [r7, #28]
        break;
 800ead6:	e010      	b.n	800eafa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ead8:	4b1e      	ldr	r3, [pc, #120]	; (800eb54 <UART_SetConfig+0x56c>)
 800eada:	61fb      	str	r3, [r7, #28]
        break;
 800eadc:	e00d      	b.n	800eafa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eade:	f7fc fd71 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800eae2:	61f8      	str	r0, [r7, #28]
        break;
 800eae4:	e009      	b.n	800eafa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaea:	61fb      	str	r3, [r7, #28]
        break;
 800eaec:	e005      	b.n	800eafa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800eaf8:	bf00      	nop
    }

    if (pclk != 0U)
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d019      	beq.n	800eb34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	085a      	lsrs	r2, r3, #1
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	441a      	add	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb14:	69bb      	ldr	r3, [r7, #24]
 800eb16:	2b0f      	cmp	r3, #15
 800eb18:	d909      	bls.n	800eb2e <UART_SetConfig+0x546>
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb20:	d205      	bcs.n	800eb2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60da      	str	r2, [r3, #12]
 800eb2c:	e002      	b.n	800eb34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2200      	movs	r2, #0
 800eb38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800eb40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3728      	adds	r7, #40	; 0x28
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb4e:	bf00      	nop
 800eb50:	40008000 	.word	0x40008000
 800eb54:	00f42400 	.word	0x00f42400

0800eb58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb64:	f003 0301 	and.w	r3, r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00a      	beq.n	800eb82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	430a      	orrs	r2, r1
 800eb80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb86:	f003 0302 	and.w	r3, r3, #2
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d00a      	beq.n	800eba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	430a      	orrs	r2, r1
 800eba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba8:	f003 0304 	and.w	r3, r3, #4
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00a      	beq.n	800ebc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	430a      	orrs	r2, r1
 800ebc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebca:	f003 0308 	and.w	r3, r3, #8
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00a      	beq.n	800ebe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	430a      	orrs	r2, r1
 800ebe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebec:	f003 0310 	and.w	r3, r3, #16
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d00a      	beq.n	800ec0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	430a      	orrs	r2, r1
 800ec08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0e:	f003 0320 	and.w	r3, r3, #32
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00a      	beq.n	800ec2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	430a      	orrs	r2, r1
 800ec2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d01a      	beq.n	800ec6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	430a      	orrs	r2, r1
 800ec4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec56:	d10a      	bne.n	800ec6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	430a      	orrs	r2, r1
 800ec6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00a      	beq.n	800ec90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	430a      	orrs	r2, r1
 800ec8e:	605a      	str	r2, [r3, #4]
  }
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b086      	sub	sp, #24
 800eca0:	af02      	add	r7, sp, #8
 800eca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ecac:	f7f7 fe54 	bl	8006958 <HAL_GetTick>
 800ecb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f003 0308 	and.w	r3, r3, #8
 800ecbc:	2b08      	cmp	r3, #8
 800ecbe:	d10e      	bne.n	800ecde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f82d 	bl	800ed2e <UART_WaitOnFlagUntilTimeout>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecda:	2303      	movs	r3, #3
 800ecdc:	e023      	b.n	800ed26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f003 0304 	and.w	r3, r3, #4
 800ece8:	2b04      	cmp	r3, #4
 800ecea:	d10e      	bne.n	800ed0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 f817 	bl	800ed2e <UART_WaitOnFlagUntilTimeout>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d001      	beq.n	800ed0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e00d      	b.n	800ed26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2220      	movs	r2, #32
 800ed0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2220      	movs	r2, #32
 800ed14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b09c      	sub	sp, #112	; 0x70
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	60f8      	str	r0, [r7, #12]
 800ed36:	60b9      	str	r1, [r7, #8]
 800ed38:	603b      	str	r3, [r7, #0]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed3e:	e0a5      	b.n	800ee8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed46:	f000 80a1 	beq.w	800ee8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed4a:	f7f7 fe05 	bl	8006958 <HAL_GetTick>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d302      	bcc.n	800ed60 <UART_WaitOnFlagUntilTimeout+0x32>
 800ed5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d13e      	bne.n	800edde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed68:	e853 3f00 	ldrex	r3, [r3]
 800ed6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ed6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ed74:	667b      	str	r3, [r7, #100]	; 0x64
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed86:	e841 2300 	strex	r3, r2, [r1]
 800ed8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ed8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1e6      	bne.n	800ed60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3308      	adds	r3, #8
 800ed98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed9c:	e853 3f00 	ldrex	r3, [r3]
 800eda0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda4:	f023 0301 	bic.w	r3, r3, #1
 800eda8:	663b      	str	r3, [r7, #96]	; 0x60
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	3308      	adds	r3, #8
 800edb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800edb2:	64ba      	str	r2, [r7, #72]	; 0x48
 800edb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edba:	e841 2300 	strex	r3, r2, [r1]
 800edbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800edc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1e5      	bne.n	800ed92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2220      	movs	r2, #32
 800edca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2220      	movs	r2, #32
 800edd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800edda:	2303      	movs	r3, #3
 800eddc:	e067      	b.n	800eeae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f003 0304 	and.w	r3, r3, #4
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d04f      	beq.n	800ee8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	69db      	ldr	r3, [r3, #28]
 800edf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edfa:	d147      	bne.n	800ee8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0e:	e853 3f00 	ldrex	r3, [r3]
 800ee12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ee1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	461a      	mov	r2, r3
 800ee22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee24:	637b      	str	r3, [r7, #52]	; 0x34
 800ee26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee2c:	e841 2300 	strex	r3, r2, [r1]
 800ee30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ee32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d1e6      	bne.n	800ee06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	e853 3f00 	ldrex	r3, [r3]
 800ee46:	613b      	str	r3, [r7, #16]
   return(result);
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	f023 0301 	bic.w	r3, r3, #1
 800ee4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	3308      	adds	r3, #8
 800ee56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee58:	623a      	str	r2, [r7, #32]
 800ee5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5c:	69f9      	ldr	r1, [r7, #28]
 800ee5e:	6a3a      	ldr	r2, [r7, #32]
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1e5      	bne.n	800ee38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2220      	movs	r2, #32
 800ee70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2220      	movs	r2, #32
 800ee76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2220      	movs	r2, #32
 800ee7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ee88:	2303      	movs	r3, #3
 800ee8a:	e010      	b.n	800eeae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	69da      	ldr	r2, [r3, #28]
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	4013      	ands	r3, r2
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	bf0c      	ite	eq
 800ee9c:	2301      	moveq	r3, #1
 800ee9e:	2300      	movne	r3, #0
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	461a      	mov	r2, r3
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	f43f af4a 	beq.w	800ed40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3770      	adds	r7, #112	; 0x70
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
	...

0800eeb8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b087      	sub	sp, #28
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	6812      	ldr	r2, [r2, #0]
 800eed0:	f023 0101 	bic.w	r1, r3, #1
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	2b08      	cmp	r3, #8
 800eee0:	d102      	bne.n	800eee8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800eee2:	2340      	movs	r3, #64	; 0x40
 800eee4:	617b      	str	r3, [r7, #20]
 800eee6:	e001      	b.n	800eeec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800eee8:	2300      	movs	r3, #0
 800eeea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800eef8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800eefe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800ef04:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800ef0a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800ef10:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800ef16:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800ef1c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800ef22:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800ef28:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	4313      	orrs	r3, r2
 800ef44:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef4a:	693a      	ldr	r2, [r7, #16]
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800ef50:	4b20      	ldr	r3, [pc, #128]	; (800efd4 <FMC_NORSRAM_Init+0x11c>)
 800ef52:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef5a:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ef62:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800ef6a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	43db      	mvns	r3, r3
 800ef7a:	ea02 0103 	and.w	r1, r2, r3
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	4319      	orrs	r1, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef94:	d10c      	bne.n	800efb0 <FMC_NORSRAM_Init+0xf8>
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d008      	beq.n	800efb0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efaa:	431a      	orrs	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d006      	beq.n	800efc6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efc0:	431a      	orrs	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	371c      	adds	r7, #28
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	0008fb7f 	.word	0x0008fb7f

0800efd8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800efd8:	b480      	push	{r7}
 800efda:	b087      	sub	sp, #28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	1c5a      	adds	r2, r3, #1
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	011b      	lsls	r3, r3, #4
 800effc:	431a      	orrs	r2, r3
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	689b      	ldr	r3, [r3, #8]
 800f002:	021b      	lsls	r3, r3, #8
 800f004:	431a      	orrs	r2, r3
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	691b      	ldr	r3, [r3, #16]
 800f00a:	041b      	lsls	r3, r3, #16
 800f00c:	431a      	orrs	r2, r3
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	695b      	ldr	r3, [r3, #20]
 800f012:	3b01      	subs	r3, #1
 800f014:	051b      	lsls	r3, r3, #20
 800f016:	431a      	orrs	r2, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	699b      	ldr	r3, [r3, #24]
 800f01c:	3b02      	subs	r3, #2
 800f01e:	061b      	lsls	r3, r3, #24
 800f020:	431a      	orrs	r2, r3
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	69db      	ldr	r3, [r3, #28]
 800f026:	4313      	orrs	r3, r2
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	3201      	adds	r2, #1
 800f02c:	4319      	orrs	r1, r3
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f03c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f040:	d113      	bne.n	800f06a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f04a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	3b01      	subs	r3, #1
 800f052:	051b      	lsls	r3, r3, #20
 800f054:	697a      	ldr	r2, [r7, #20]
 800f056:	4313      	orrs	r3, r2
 800f058:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	431a      	orrs	r2, r3
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	371c      	adds	r7, #28
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f078:	b480      	push	{r7}
 800f07a:	b085      	sub	sp, #20
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
 800f084:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f08c:	d11d      	bne.n	800f0ca <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f096:	4b13      	ldr	r3, [pc, #76]	; (800f0e4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800f098:	4013      	ands	r3, r2
 800f09a:	68ba      	ldr	r2, [r7, #8]
 800f09c:	6811      	ldr	r1, [r2, #0]
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	6852      	ldr	r2, [r2, #4]
 800f0a2:	0112      	lsls	r2, r2, #4
 800f0a4:	4311      	orrs	r1, r2
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	6892      	ldr	r2, [r2, #8]
 800f0aa:	0212      	lsls	r2, r2, #8
 800f0ac:	4311      	orrs	r1, r2
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	69d2      	ldr	r2, [r2, #28]
 800f0b2:	4311      	orrs	r1, r2
 800f0b4:	68ba      	ldr	r2, [r7, #8]
 800f0b6:	6912      	ldr	r2, [r2, #16]
 800f0b8:	0412      	lsls	r2, r2, #16
 800f0ba:	430a      	orrs	r2, r1
 800f0bc:	ea43 0102 	orr.w	r1, r3, r2
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f0c8:	e005      	b.n	800f0d6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f0d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f0d6:	2300      	movs	r3, #0
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3714      	adds	r7, #20
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	cff00000 	.word	0xcff00000

0800f0e8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	b480      	push	{r7}
 800f0ec:	b085      	sub	sp, #20
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
 800f0f2:	f107 001c 	add.w	r0, r7, #28
 800f0f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800f0fe:	6a3b      	ldr	r3, [r7, #32]
 800f100:	68fa      	ldr	r2, [r7, #12]
 800f102:	4313      	orrs	r3, r2
 800f104:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800f106:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800f10a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f10e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f112:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f116:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	4313      	orrs	r3, r2
 800f11c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f126:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	431a      	orrs	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3714      	adds	r7, #20
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	b004      	add	sp, #16
 800f140:	4770      	bx	lr

0800f142 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f142:	b480      	push	{r7}
 800f144:	b083      	sub	sp, #12
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f150:	4618      	mov	r0, r3
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2203      	movs	r2, #3
 800f168:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f16a:	2002      	movs	r0, #2
 800f16c:	f7f7 fc00 	bl	8006970 <HAL_Delay>

  return HAL_OK;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}

0800f17a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f17a:	b480      	push	{r7}
 800f17c:	b083      	sub	sp, #12
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f003 0303 	and.w	r3, r3, #3
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	370c      	adds	r7, #12
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr

0800f196 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f196:	b480      	push	{r7}
 800f198:	b085      	sub	sp, #20
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
 800f19e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f1b4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f1ba:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f1c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f1d0:	f023 030f 	bic.w	r3, r3, #15
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	431a      	orrs	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3714      	adds	r7, #20
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b083      	sub	sp, #12
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	691b      	ldr	r3, [r3, #16]
 800f1f6:	b2db      	uxtb	r3, r3
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	3314      	adds	r3, #20
 800f212:	461a      	mov	r2, r3
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	4413      	add	r3, r2
 800f218:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3714      	adds	r7, #20
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f22a:	b480      	push	{r7}
 800f22c:	b085      	sub	sp, #20
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f234:	2300      	movs	r3, #0
 800f236:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	685a      	ldr	r2, [r3, #4]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f250:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f256:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f25c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	4313      	orrs	r3, r2
 800f262:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f268:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	431a      	orrs	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f274:	2300      	movs	r3, #0

}
 800f276:	4618      	mov	r0, r3
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr

0800f282 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b088      	sub	sp, #32
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
 800f28a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f290:	2310      	movs	r3, #16
 800f292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f294:	2340      	movs	r3, #64	; 0x40
 800f296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f298:	2300      	movs	r3, #0
 800f29a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f29c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2a2:	f107 0308 	add.w	r3, r7, #8
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7ff ff74 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2b2:	2110      	movs	r1, #16
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f94d 	bl	800f554 <SDMMC_GetCmdResp1>
 800f2ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2bc:	69fb      	ldr	r3, [r7, #28]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3720      	adds	r7, #32
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f2c6:	b580      	push	{r7, lr}
 800f2c8:	b08a      	sub	sp, #40	; 0x28
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	60f8      	str	r0, [r7, #12]
 800f2ce:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f2d6:	2307      	movs	r3, #7
 800f2d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2da:	2340      	movs	r3, #64	; 0x40
 800f2dc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2e6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2e8:	f107 0310 	add.w	r3, r7, #16
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7ff ff51 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f2f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2f8:	2107      	movs	r1, #7
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f000 f92a 	bl	800f554 <SDMMC_GetCmdResp1>
 800f300:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f304:	4618      	mov	r0, r3
 800f306:	3728      	adds	r7, #40	; 0x28
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b088      	sub	sp, #32
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f314:	2300      	movs	r3, #0
 800f316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f318:	2300      	movs	r3, #0
 800f31a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f31c:	2300      	movs	r3, #0
 800f31e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f320:	2300      	movs	r3, #0
 800f322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f328:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f32a:	f107 0308 	add.w	r3, r7, #8
 800f32e:	4619      	mov	r1, r3
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7ff ff30 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fb44 	bl	800f9c4 <SDMMC_GetCmdError>
 800f33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f33e:	69fb      	ldr	r3, [r7, #28]
}
 800f340:	4618      	mov	r0, r3
 800f342:	3720      	adds	r7, #32
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b088      	sub	sp, #32
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f350:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f356:	2308      	movs	r3, #8
 800f358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f35a:	2340      	movs	r3, #64	; 0x40
 800f35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f35e:	2300      	movs	r3, #0
 800f360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f368:	f107 0308 	add.w	r3, r7, #8
 800f36c:	4619      	mov	r1, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff ff11 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 fad7 	bl	800f928 <SDMMC_GetCmdResp7>
 800f37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f37c:	69fb      	ldr	r3, [r7, #28]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3720      	adds	r7, #32
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b088      	sub	sp, #32
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
 800f38e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f394:	2337      	movs	r3, #55	; 0x37
 800f396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f398:	2340      	movs	r3, #64	; 0x40
 800f39a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f39c:	2300      	movs	r3, #0
 800f39e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3a6:	f107 0308 	add.w	r3, r7, #8
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f7ff fef2 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f3b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3b6:	2137      	movs	r1, #55	; 0x37
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 f8cb 	bl	800f554 <SDMMC_GetCmdResp1>
 800f3be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3c0:	69fb      	ldr	r3, [r7, #28]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3720      	adds	r7, #32
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b088      	sub	sp, #32
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
 800f3d2:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f3da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f3de:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f3e0:	2329      	movs	r3, #41	; 0x29
 800f3e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3e4:	2340      	movs	r3, #64	; 0x40
 800f3e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3f2:	f107 0308 	add.w	r3, r7, #8
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7ff fecc 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f9de 	bl	800f7c0 <SDMMC_GetCmdResp3>
 800f404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f406:	69fb      	ldr	r3, [r7, #28]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3720      	adds	r7, #32
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f41e:	2306      	movs	r3, #6
 800f420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f422:	2340      	movs	r3, #64	; 0x40
 800f424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f426:	2300      	movs	r3, #0
 800f428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f42e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f430:	f107 0308 	add.w	r3, r7, #8
 800f434:	4619      	mov	r1, r3
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff fead 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f43c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f440:	2106      	movs	r1, #6
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 f886 	bl	800f554 <SDMMC_GetCmdResp1>
 800f448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f44a:	69fb      	ldr	r3, [r7, #28]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3720      	adds	r7, #32
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b088      	sub	sp, #32
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f45c:	2300      	movs	r3, #0
 800f45e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f460:	2333      	movs	r3, #51	; 0x33
 800f462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f464:	2340      	movs	r3, #64	; 0x40
 800f466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f468:	2300      	movs	r3, #0
 800f46a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f46c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f470:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f472:	f107 0308 	add.w	r3, r7, #8
 800f476:	4619      	mov	r1, r3
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7ff fe8c 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f47e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f482:	2133      	movs	r1, #51	; 0x33
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 f865 	bl	800f554 <SDMMC_GetCmdResp1>
 800f48a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f48c:	69fb      	ldr	r3, [r7, #28]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3720      	adds	r7, #32
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b088      	sub	sp, #32
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f4a2:	2302      	movs	r3, #2
 800f4a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f4a6:	23c0      	movs	r3, #192	; 0xc0
 800f4a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4b4:	f107 0308 	add.w	r3, r7, #8
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7ff fe6b 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f935 	bl	800f730 <SDMMC_GetCmdResp2>
 800f4c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4c8:	69fb      	ldr	r3, [r7, #28]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3720      	adds	r7, #32
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b088      	sub	sp, #32
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f4e0:	2309      	movs	r3, #9
 800f4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f4e4:	23c0      	movs	r3, #192	; 0xc0
 800f4e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4f2:	f107 0308 	add.w	r3, r7, #8
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff fe4c 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 f916 	bl	800f730 <SDMMC_GetCmdResp2>
 800f504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f506:	69fb      	ldr	r3, [r7, #28]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3720      	adds	r7, #32
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b088      	sub	sp, #32
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f51a:	2300      	movs	r3, #0
 800f51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f51e:	2303      	movs	r3, #3
 800f520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f522:	2340      	movs	r3, #64	; 0x40
 800f524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f526:	2300      	movs	r3, #0
 800f528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f52a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f52e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f530:	f107 0308 	add.w	r3, r7, #8
 800f534:	4619      	mov	r1, r3
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff fe2d 	bl	800f196 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	2103      	movs	r1, #3
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 f97b 	bl	800f83c <SDMMC_GetCmdResp6>
 800f546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f548:	69fb      	ldr	r3, [r7, #28]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3720      	adds	r7, #32
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b088      	sub	sp, #32
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	460b      	mov	r3, r1
 800f55e:	607a      	str	r2, [r7, #4]
 800f560:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f562:	4b70      	ldr	r3, [pc, #448]	; (800f724 <SDMMC_GetCmdResp1+0x1d0>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4a70      	ldr	r2, [pc, #448]	; (800f728 <SDMMC_GetCmdResp1+0x1d4>)
 800f568:	fba2 2303 	umull	r2, r3, r2, r3
 800f56c:	0a5a      	lsrs	r2, r3, #9
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	fb02 f303 	mul.w	r3, r2, r3
 800f574:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f576:	69fb      	ldr	r3, [r7, #28]
 800f578:	1e5a      	subs	r2, r3, #1
 800f57a:	61fa      	str	r2, [r7, #28]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d102      	bne.n	800f586 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f584:	e0c9      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f58a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f592:	2b00      	cmp	r3, #0
 800f594:	d0ef      	beq.n	800f576 <SDMMC_GetCmdResp1+0x22>
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1ea      	bne.n	800f576 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5a4:	f003 0304 	and.w	r3, r3, #4
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d004      	beq.n	800f5b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2204      	movs	r2, #4
 800f5b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5b2:	2304      	movs	r3, #4
 800f5b4:	e0b1      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ba:	f003 0301 	and.w	r3, r3, #1
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d004      	beq.n	800f5cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e0a6      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	22c5      	movs	r2, #197	; 0xc5
 800f5d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f7ff fe09 	bl	800f1ea <SDMMC_GetCommandResponse>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	461a      	mov	r2, r3
 800f5dc:	7afb      	ldrb	r3, [r7, #11]
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d001      	beq.n	800f5e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e099      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f7ff fe0b 	bl	800f204 <SDMMC_GetResponse>
 800f5ee:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f5f0:	697a      	ldr	r2, [r7, #20]
 800f5f2:	4b4e      	ldr	r3, [pc, #312]	; (800f72c <SDMMC_GetCmdResp1+0x1d8>)
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d101      	bne.n	800f5fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	e08d      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	2b00      	cmp	r3, #0
 800f602:	da02      	bge.n	800f60a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f608:	e087      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f614:	2340      	movs	r3, #64	; 0x40
 800f616:	e080      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f622:	2380      	movs	r3, #128	; 0x80
 800f624:	e079      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d002      	beq.n	800f636 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f630:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f634:	e071      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d002      	beq.n	800f646 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f640:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f644:	e069      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d002      	beq.n	800f656 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f654:	e061      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d002      	beq.n	800f666 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f664:	e059      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d002      	beq.n	800f676 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f674:	e051      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d002      	beq.n	800f686 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f684:	e049      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d002      	beq.n	800f696 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f694:	e041      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d002      	beq.n	800f6a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f6a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6a4:	e039      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d002      	beq.n	800f6b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f6b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f6b4:	e031      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d002      	beq.n	800f6c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f6c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f6c4:	e029      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d002      	beq.n	800f6d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f6d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f6d4:	e021      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d002      	beq.n	800f6e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f6e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f6e4:	e019      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d002      	beq.n	800f6f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f6f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f6f4:	e011      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f704:	e009      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	f003 0308 	and.w	r3, r3, #8
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d002      	beq.n	800f716 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f710:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f714:	e001      	b.n	800f71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3720      	adds	r7, #32
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	2001c2ec 	.word	0x2001c2ec
 800f728:	10624dd3 	.word	0x10624dd3
 800f72c:	fdffe008 	.word	0xfdffe008

0800f730 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f738:	4b1f      	ldr	r3, [pc, #124]	; (800f7b8 <SDMMC_GetCmdResp2+0x88>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a1f      	ldr	r2, [pc, #124]	; (800f7bc <SDMMC_GetCmdResp2+0x8c>)
 800f73e:	fba2 2303 	umull	r2, r3, r2, r3
 800f742:	0a5b      	lsrs	r3, r3, #9
 800f744:	f241 3288 	movw	r2, #5000	; 0x1388
 800f748:	fb02 f303 	mul.w	r3, r2, r3
 800f74c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	1e5a      	subs	r2, r3, #1
 800f752:	60fa      	str	r2, [r7, #12]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d102      	bne.n	800f75e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f75c:	e026      	b.n	800f7ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f762:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d0ef      	beq.n	800f74e <SDMMC_GetCmdResp2+0x1e>
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f774:	2b00      	cmp	r3, #0
 800f776:	d1ea      	bne.n	800f74e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f77c:	f003 0304 	and.w	r3, r3, #4
 800f780:	2b00      	cmp	r3, #0
 800f782:	d004      	beq.n	800f78e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2204      	movs	r2, #4
 800f788:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f78a:	2304      	movs	r3, #4
 800f78c:	e00e      	b.n	800f7ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f792:	f003 0301 	and.w	r3, r3, #1
 800f796:	2b00      	cmp	r3, #0
 800f798:	d004      	beq.n	800f7a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2201      	movs	r2, #1
 800f79e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	e003      	b.n	800f7ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	22c5      	movs	r2, #197	; 0xc5
 800f7a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f7aa:	2300      	movs	r3, #0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3714      	adds	r7, #20
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr
 800f7b8:	2001c2ec 	.word	0x2001c2ec
 800f7bc:	10624dd3 	.word	0x10624dd3

0800f7c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f7c8:	4b1a      	ldr	r3, [pc, #104]	; (800f834 <SDMMC_GetCmdResp3+0x74>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a1a      	ldr	r2, [pc, #104]	; (800f838 <SDMMC_GetCmdResp3+0x78>)
 800f7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800f7d2:	0a5b      	lsrs	r3, r3, #9
 800f7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7d8:	fb02 f303 	mul.w	r3, r2, r3
 800f7dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	1e5a      	subs	r2, r3, #1
 800f7e2:	60fa      	str	r2, [r7, #12]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d102      	bne.n	800f7ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f7e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f7ec:	e01b      	b.n	800f826 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d0ef      	beq.n	800f7de <SDMMC_GetCmdResp3+0x1e>
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1ea      	bne.n	800f7de <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f80c:	f003 0304 	and.w	r3, r3, #4
 800f810:	2b00      	cmp	r3, #0
 800f812:	d004      	beq.n	800f81e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2204      	movs	r2, #4
 800f818:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f81a:	2304      	movs	r3, #4
 800f81c:	e003      	b.n	800f826 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	22c5      	movs	r2, #197	; 0xc5
 800f822:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3714      	adds	r7, #20
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop
 800f834:	2001c2ec 	.word	0x2001c2ec
 800f838:	10624dd3 	.word	0x10624dd3

0800f83c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b088      	sub	sp, #32
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	460b      	mov	r3, r1
 800f846:	607a      	str	r2, [r7, #4]
 800f848:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f84a:	4b35      	ldr	r3, [pc, #212]	; (800f920 <SDMMC_GetCmdResp6+0xe4>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	4a35      	ldr	r2, [pc, #212]	; (800f924 <SDMMC_GetCmdResp6+0xe8>)
 800f850:	fba2 2303 	umull	r2, r3, r2, r3
 800f854:	0a5b      	lsrs	r3, r3, #9
 800f856:	f241 3288 	movw	r2, #5000	; 0x1388
 800f85a:	fb02 f303 	mul.w	r3, r2, r3
 800f85e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	1e5a      	subs	r2, r3, #1
 800f864:	61fa      	str	r2, [r7, #28]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d102      	bne.n	800f870 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f86a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f86e:	e052      	b.n	800f916 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f874:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d0ef      	beq.n	800f860 <SDMMC_GetCmdResp6+0x24>
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1ea      	bne.n	800f860 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f88e:	f003 0304 	and.w	r3, r3, #4
 800f892:	2b00      	cmp	r3, #0
 800f894:	d004      	beq.n	800f8a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2204      	movs	r2, #4
 800f89a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f89c:	2304      	movs	r3, #4
 800f89e:	e03a      	b.n	800f916 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8a4:	f003 0301 	and.w	r3, r3, #1
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d004      	beq.n	800f8b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e02f      	b.n	800f916 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	f7ff fc97 	bl	800f1ea <SDMMC_GetCommandResponse>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	461a      	mov	r2, r3
 800f8c0:	7afb      	ldrb	r3, [r7, #11]
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d001      	beq.n	800f8ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e025      	b.n	800f916 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	22c5      	movs	r2, #197	; 0xc5
 800f8ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f7ff fc96 	bl	800f204 <SDMMC_GetResponse>
 800f8d8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d106      	bne.n	800f8f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	0c1b      	lsrs	r3, r3, #16
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	e011      	b.n	800f916 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d002      	beq.n	800f902 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f8fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f900:	e009      	b.n	800f916 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f90c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f910:	e001      	b.n	800f916 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f916:	4618      	mov	r0, r3
 800f918:	3720      	adds	r7, #32
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	2001c2ec 	.word	0x2001c2ec
 800f924:	10624dd3 	.word	0x10624dd3

0800f928 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f928:	b480      	push	{r7}
 800f92a:	b085      	sub	sp, #20
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f930:	4b22      	ldr	r3, [pc, #136]	; (800f9bc <SDMMC_GetCmdResp7+0x94>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4a22      	ldr	r2, [pc, #136]	; (800f9c0 <SDMMC_GetCmdResp7+0x98>)
 800f936:	fba2 2303 	umull	r2, r3, r2, r3
 800f93a:	0a5b      	lsrs	r3, r3, #9
 800f93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f940:	fb02 f303 	mul.w	r3, r2, r3
 800f944:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	1e5a      	subs	r2, r3, #1
 800f94a:	60fa      	str	r2, [r7, #12]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d102      	bne.n	800f956 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f950:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f954:	e02c      	b.n	800f9b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f95a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f962:	2b00      	cmp	r3, #0
 800f964:	d0ef      	beq.n	800f946 <SDMMC_GetCmdResp7+0x1e>
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1ea      	bne.n	800f946 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d004      	beq.n	800f986 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2204      	movs	r2, #4
 800f980:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f982:	2304      	movs	r3, #4
 800f984:	e014      	b.n	800f9b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98a:	f003 0301 	and.w	r3, r3, #1
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f998:	2301      	movs	r3, #1
 800f99a:	e009      	b.n	800f9b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d002      	beq.n	800f9ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2240      	movs	r2, #64	; 0x40
 800f9ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f9ae:	2300      	movs	r3, #0

}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3714      	adds	r7, #20
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	2001c2ec 	.word	0x2001c2ec
 800f9c0:	10624dd3 	.word	0x10624dd3

0800f9c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f9cc:	4b11      	ldr	r3, [pc, #68]	; (800fa14 <SDMMC_GetCmdError+0x50>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4a11      	ldr	r2, [pc, #68]	; (800fa18 <SDMMC_GetCmdError+0x54>)
 800f9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9d6:	0a5b      	lsrs	r3, r3, #9
 800f9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9dc:	fb02 f303 	mul.w	r3, r2, r3
 800f9e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	1e5a      	subs	r2, r3, #1
 800f9e6:	60fa      	str	r2, [r7, #12]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d102      	bne.n	800f9f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f9ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f9f0:	e009      	b.n	800fa06 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d0f1      	beq.n	800f9e2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	22c5      	movs	r2, #197	; 0xc5
 800fa02:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3714      	adds	r7, #20
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop
 800fa14:	2001c2ec 	.word	0x2001c2ec
 800fa18:	10624dd3 	.word	0x10624dd3

0800fa1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	b580      	push	{r7, lr}
 800fa20:	b084      	sub	sp, #16
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	f107 001c 	add.w	r0, r7, #28
 800fa2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f001 faf6 	bl	801102c <USB_CoreReset>
 800fa40:	4603      	mov	r3, r0
 800fa42:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800fa44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d106      	bne.n	800fa58 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	639a      	str	r2, [r3, #56]	; 0x38
 800fa56:	e005      	b.n	800fa64 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800fa64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa70:	b004      	add	sp, #16
 800fa72:	4770      	bx	lr

0800fa74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b087      	sub	sp, #28
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fa82:	79fb      	ldrb	r3, [r7, #7]
 800fa84:	2b02      	cmp	r3, #2
 800fa86:	d165      	bne.n	800fb54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	4a3e      	ldr	r2, [pc, #248]	; (800fb84 <USB_SetTurnaroundTime+0x110>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d906      	bls.n	800fa9e <USB_SetTurnaroundTime+0x2a>
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	4a3d      	ldr	r2, [pc, #244]	; (800fb88 <USB_SetTurnaroundTime+0x114>)
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d202      	bcs.n	800fa9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fa98:	230f      	movs	r3, #15
 800fa9a:	617b      	str	r3, [r7, #20]
 800fa9c:	e05c      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	4a39      	ldr	r2, [pc, #228]	; (800fb88 <USB_SetTurnaroundTime+0x114>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d306      	bcc.n	800fab4 <USB_SetTurnaroundTime+0x40>
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	4a38      	ldr	r2, [pc, #224]	; (800fb8c <USB_SetTurnaroundTime+0x118>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d202      	bcs.n	800fab4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800faae:	230e      	movs	r3, #14
 800fab0:	617b      	str	r3, [r7, #20]
 800fab2:	e051      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	4a35      	ldr	r2, [pc, #212]	; (800fb8c <USB_SetTurnaroundTime+0x118>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d306      	bcc.n	800faca <USB_SetTurnaroundTime+0x56>
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	4a34      	ldr	r2, [pc, #208]	; (800fb90 <USB_SetTurnaroundTime+0x11c>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d202      	bcs.n	800faca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fac4:	230d      	movs	r3, #13
 800fac6:	617b      	str	r3, [r7, #20]
 800fac8:	e046      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	4a30      	ldr	r2, [pc, #192]	; (800fb90 <USB_SetTurnaroundTime+0x11c>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d306      	bcc.n	800fae0 <USB_SetTurnaroundTime+0x6c>
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	4a2f      	ldr	r2, [pc, #188]	; (800fb94 <USB_SetTurnaroundTime+0x120>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d802      	bhi.n	800fae0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fada:	230c      	movs	r3, #12
 800fadc:	617b      	str	r3, [r7, #20]
 800fade:	e03b      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	4a2c      	ldr	r2, [pc, #176]	; (800fb94 <USB_SetTurnaroundTime+0x120>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d906      	bls.n	800faf6 <USB_SetTurnaroundTime+0x82>
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	4a2b      	ldr	r2, [pc, #172]	; (800fb98 <USB_SetTurnaroundTime+0x124>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d802      	bhi.n	800faf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800faf0:	230b      	movs	r3, #11
 800faf2:	617b      	str	r3, [r7, #20]
 800faf4:	e030      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	4a27      	ldr	r2, [pc, #156]	; (800fb98 <USB_SetTurnaroundTime+0x124>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d906      	bls.n	800fb0c <USB_SetTurnaroundTime+0x98>
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	4a26      	ldr	r2, [pc, #152]	; (800fb9c <USB_SetTurnaroundTime+0x128>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d802      	bhi.n	800fb0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fb06:	230a      	movs	r3, #10
 800fb08:	617b      	str	r3, [r7, #20]
 800fb0a:	e025      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	4a23      	ldr	r2, [pc, #140]	; (800fb9c <USB_SetTurnaroundTime+0x128>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d906      	bls.n	800fb22 <USB_SetTurnaroundTime+0xae>
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	4a22      	ldr	r2, [pc, #136]	; (800fba0 <USB_SetTurnaroundTime+0x12c>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d202      	bcs.n	800fb22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fb1c:	2309      	movs	r3, #9
 800fb1e:	617b      	str	r3, [r7, #20]
 800fb20:	e01a      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	4a1e      	ldr	r2, [pc, #120]	; (800fba0 <USB_SetTurnaroundTime+0x12c>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d306      	bcc.n	800fb38 <USB_SetTurnaroundTime+0xc4>
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	4a1d      	ldr	r2, [pc, #116]	; (800fba4 <USB_SetTurnaroundTime+0x130>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d802      	bhi.n	800fb38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fb32:	2308      	movs	r3, #8
 800fb34:	617b      	str	r3, [r7, #20]
 800fb36:	e00f      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	4a1a      	ldr	r2, [pc, #104]	; (800fba4 <USB_SetTurnaroundTime+0x130>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d906      	bls.n	800fb4e <USB_SetTurnaroundTime+0xda>
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	4a19      	ldr	r2, [pc, #100]	; (800fba8 <USB_SetTurnaroundTime+0x134>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d202      	bcs.n	800fb4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fb48:	2307      	movs	r3, #7
 800fb4a:	617b      	str	r3, [r7, #20]
 800fb4c:	e004      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fb4e:	2306      	movs	r3, #6
 800fb50:	617b      	str	r3, [r7, #20]
 800fb52:	e001      	b.n	800fb58 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fb54:	2309      	movs	r3, #9
 800fb56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	68da      	ldr	r2, [r3, #12]
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	029b      	lsls	r3, r3, #10
 800fb6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fb70:	431a      	orrs	r2, r3
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb76:	2300      	movs	r3, #0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	371c      	adds	r7, #28
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr
 800fb84:	00d8acbf 	.word	0x00d8acbf
 800fb88:	00e4e1c0 	.word	0x00e4e1c0
 800fb8c:	00f42400 	.word	0x00f42400
 800fb90:	01067380 	.word	0x01067380
 800fb94:	011a499f 	.word	0x011a499f
 800fb98:	01312cff 	.word	0x01312cff
 800fb9c:	014ca43f 	.word	0x014ca43f
 800fba0:	016e3600 	.word	0x016e3600
 800fba4:	01a6ab1f 	.word	0x01a6ab1f
 800fba8:	01e84800 	.word	0x01e84800

0800fbac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	f043 0201 	orr.w	r2, r3, #1
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fbc0:	2300      	movs	r3, #0
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	370c      	adds	r7, #12
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr

0800fbce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fbce:	b480      	push	{r7}
 800fbd0:	b083      	sub	sp, #12
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	689b      	ldr	r3, [r3, #8]
 800fbda:	f023 0201 	bic.w	r2, r3, #1
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fc0c:	78fb      	ldrb	r3, [r7, #3]
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d115      	bne.n	800fc3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fc1e:	2001      	movs	r0, #1
 800fc20:	f7f6 fea6 	bl	8006970 <HAL_Delay>
      ms++;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	3301      	adds	r3, #1
 800fc28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f001 f985 	bl	8010f3a <USB_GetMode>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d01e      	beq.n	800fc74 <USB_SetCurrentMode+0x84>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2b31      	cmp	r3, #49	; 0x31
 800fc3a:	d9f0      	bls.n	800fc1e <USB_SetCurrentMode+0x2e>
 800fc3c:	e01a      	b.n	800fc74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fc3e:	78fb      	ldrb	r3, [r7, #3]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d115      	bne.n	800fc70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fc50:	2001      	movs	r0, #1
 800fc52:	f7f6 fe8d 	bl	8006970 <HAL_Delay>
      ms++;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f001 f96c 	bl	8010f3a <USB_GetMode>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d005      	beq.n	800fc74 <USB_SetCurrentMode+0x84>
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b31      	cmp	r3, #49	; 0x31
 800fc6c:	d9f0      	bls.n	800fc50 <USB_SetCurrentMode+0x60>
 800fc6e:	e001      	b.n	800fc74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fc70:	2301      	movs	r3, #1
 800fc72:	e005      	b.n	800fc80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2b32      	cmp	r3, #50	; 0x32
 800fc78:	d101      	bne.n	800fc7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e000      	b.n	800fc80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc88:	b084      	sub	sp, #16
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b086      	sub	sp, #24
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
 800fc92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fc96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fca2:	2300      	movs	r3, #0
 800fca4:	613b      	str	r3, [r7, #16]
 800fca6:	e009      	b.n	800fcbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	3340      	adds	r3, #64	; 0x40
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	4413      	add	r3, r2
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	613b      	str	r3, [r7, #16]
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	2b0e      	cmp	r3, #14
 800fcc0:	d9f2      	bls.n	800fca8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d11c      	bne.n	800fd02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	68fa      	ldr	r2, [r7, #12]
 800fcd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcd6:	f043 0302 	orr.w	r3, r3, #2
 800fcda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	601a      	str	r2, [r3, #0]
 800fd00:	e005      	b.n	800fd0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd14:	461a      	mov	r2, r3
 800fd16:	2300      	movs	r3, #0
 800fd18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd20:	4619      	mov	r1, r3
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd28:	461a      	mov	r2, r3
 800fd2a:	680b      	ldr	r3, [r1, #0]
 800fd2c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fd2e:	2103      	movs	r1, #3
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f000 f959 	bl	800ffe8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fd36:	2110      	movs	r1, #16
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f8f1 	bl	800ff20 <USB_FlushTxFifo>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d001      	beq.n	800fd48 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800fd44:	2301      	movs	r3, #1
 800fd46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 f91d 	bl	800ff88 <USB_FlushRxFifo>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d001      	beq.n	800fd58 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800fd54:	2301      	movs	r3, #1
 800fd56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd5e:	461a      	mov	r2, r3
 800fd60:	2300      	movs	r3, #0
 800fd62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd76:	461a      	mov	r2, r3
 800fd78:	2300      	movs	r3, #0
 800fd7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	613b      	str	r3, [r7, #16]
 800fd80:	e043      	b.n	800fe0a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	015a      	lsls	r2, r3, #5
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	4413      	add	r3, r2
 800fd8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd98:	d118      	bne.n	800fdcc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d10a      	bne.n	800fdb6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	015a      	lsls	r2, r3, #5
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	4413      	add	r3, r2
 800fda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdac:	461a      	mov	r2, r3
 800fdae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fdb2:	6013      	str	r3, [r2, #0]
 800fdb4:	e013      	b.n	800fdde <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	015a      	lsls	r2, r3, #5
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fdc8:	6013      	str	r3, [r2, #0]
 800fdca:	e008      	b.n	800fdde <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	015a      	lsls	r2, r3, #5
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	4413      	add	r3, r2
 800fdd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd8:	461a      	mov	r2, r3
 800fdda:	2300      	movs	r3, #0
 800fddc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	015a      	lsls	r2, r3, #5
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	4413      	add	r3, r2
 800fde6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdea:	461a      	mov	r2, r3
 800fdec:	2300      	movs	r3, #0
 800fdee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	015a      	lsls	r2, r3, #5
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	4413      	add	r3, r2
 800fdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fe02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	3301      	adds	r3, #1
 800fe08:	613b      	str	r3, [r7, #16]
 800fe0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0c:	693a      	ldr	r2, [r7, #16]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d3b7      	bcc.n	800fd82 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe12:	2300      	movs	r3, #0
 800fe14:	613b      	str	r3, [r7, #16]
 800fe16:	e043      	b.n	800fea0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	015a      	lsls	r2, r3, #5
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	4413      	add	r3, r2
 800fe20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe2e:	d118      	bne.n	800fe62 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d10a      	bne.n	800fe4c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	015a      	lsls	r2, r3, #5
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe42:	461a      	mov	r2, r3
 800fe44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fe48:	6013      	str	r3, [r2, #0]
 800fe4a:	e013      	b.n	800fe74 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	015a      	lsls	r2, r3, #5
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4413      	add	r3, r2
 800fe54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe58:	461a      	mov	r2, r3
 800fe5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fe5e:	6013      	str	r3, [r2, #0]
 800fe60:	e008      	b.n	800fe74 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	015a      	lsls	r2, r3, #5
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	4413      	add	r3, r2
 800fe6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe6e:	461a      	mov	r2, r3
 800fe70:	2300      	movs	r3, #0
 800fe72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	015a      	lsls	r2, r3, #5
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe80:	461a      	mov	r2, r3
 800fe82:	2300      	movs	r3, #0
 800fe84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	015a      	lsls	r2, r3, #5
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe92:	461a      	mov	r2, r3
 800fe94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fe98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	613b      	str	r3, [r7, #16]
 800fea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea2:	693a      	ldr	r2, [r7, #16]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d3b7      	bcc.n	800fe18 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800feb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800feba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fec8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	699b      	ldr	r3, [r3, #24]
 800fece:	f043 0210 	orr.w	r2, r3, #16
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	699a      	ldr	r2, [r3, #24]
 800feda:	4b10      	ldr	r3, [pc, #64]	; (800ff1c <USB_DevInit+0x294>)
 800fedc:	4313      	orrs	r3, r2
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d005      	beq.n	800fef4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	699b      	ldr	r3, [r3, #24]
 800feec:	f043 0208 	orr.w	r2, r3, #8
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d107      	bne.n	800ff0a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	699b      	ldr	r3, [r3, #24]
 800fefe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff02:	f043 0304 	orr.w	r3, r3, #4
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ff0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3718      	adds	r7, #24
 800ff10:	46bd      	mov	sp, r7
 800ff12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff16:	b004      	add	sp, #16
 800ff18:	4770      	bx	lr
 800ff1a:	bf00      	nop
 800ff1c:	803c3800 	.word	0x803c3800

0800ff20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	3301      	adds	r3, #1
 800ff32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	4a13      	ldr	r2, [pc, #76]	; (800ff84 <USB_FlushTxFifo+0x64>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d901      	bls.n	800ff40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ff3c:	2303      	movs	r3, #3
 800ff3e:	e01b      	b.n	800ff78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	691b      	ldr	r3, [r3, #16]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	daf2      	bge.n	800ff2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	019b      	lsls	r3, r3, #6
 800ff50:	f043 0220 	orr.w	r2, r3, #32
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	4a08      	ldr	r2, [pc, #32]	; (800ff84 <USB_FlushTxFifo+0x64>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d901      	bls.n	800ff6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ff66:	2303      	movs	r3, #3
 800ff68:	e006      	b.n	800ff78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	691b      	ldr	r3, [r3, #16]
 800ff6e:	f003 0320 	and.w	r3, r3, #32
 800ff72:	2b20      	cmp	r3, #32
 800ff74:	d0f0      	beq.n	800ff58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ff76:	2300      	movs	r3, #0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3714      	adds	r7, #20
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	00030d40 	.word	0x00030d40

0800ff88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ff90:	2300      	movs	r3, #0
 800ff92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	3301      	adds	r3, #1
 800ff98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	4a11      	ldr	r2, [pc, #68]	; (800ffe4 <USB_FlushRxFifo+0x5c>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d901      	bls.n	800ffa6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ffa2:	2303      	movs	r3, #3
 800ffa4:	e018      	b.n	800ffd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	691b      	ldr	r3, [r3, #16]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	daf2      	bge.n	800ff94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2210      	movs	r2, #16
 800ffb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	4a08      	ldr	r2, [pc, #32]	; (800ffe4 <USB_FlushRxFifo+0x5c>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d901      	bls.n	800ffca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ffc6:	2303      	movs	r3, #3
 800ffc8:	e006      	b.n	800ffd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	f003 0310 	and.w	r3, r3, #16
 800ffd2:	2b10      	cmp	r3, #16
 800ffd4:	d0f0      	beq.n	800ffb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3714      	adds	r7, #20
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr
 800ffe4:	00030d40 	.word	0x00030d40

0800ffe8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	460b      	mov	r3, r1
 800fff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	68f9      	ldr	r1, [r7, #12]
 8010004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010008:	4313      	orrs	r3, r2
 801000a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801000c:	2300      	movs	r3, #0
}
 801000e:	4618      	mov	r0, r3
 8010010:	3714      	adds	r7, #20
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr

0801001a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801001a:	b480      	push	{r7}
 801001c:	b087      	sub	sp, #28
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f003 0306 	and.w	r3, r3, #6
 8010032:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2b02      	cmp	r3, #2
 8010038:	d002      	beq.n	8010040 <USB_GetDevSpeed+0x26>
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2b06      	cmp	r3, #6
 801003e:	d102      	bne.n	8010046 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010040:	2302      	movs	r3, #2
 8010042:	75fb      	strb	r3, [r7, #23]
 8010044:	e001      	b.n	801004a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8010046:	230f      	movs	r3, #15
 8010048:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801004a:	7dfb      	ldrb	r3, [r7, #23]
}
 801004c:	4618      	mov	r0, r3
 801004e:	371c      	adds	r7, #28
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	785b      	ldrb	r3, [r3, #1]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d13a      	bne.n	80100ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801007a:	69da      	ldr	r2, [r3, #28]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	f003 030f 	and.w	r3, r3, #15
 8010084:	2101      	movs	r1, #1
 8010086:	fa01 f303 	lsl.w	r3, r1, r3
 801008a:	b29b      	uxth	r3, r3
 801008c:	68f9      	ldr	r1, [r7, #12]
 801008e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010092:	4313      	orrs	r3, r2
 8010094:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	015a      	lsls	r2, r3, #5
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	4413      	add	r3, r2
 801009e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d155      	bne.n	8010158 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	015a      	lsls	r2, r3, #5
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	4413      	add	r3, r2
 80100b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	791b      	ldrb	r3, [r3, #4]
 80100c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	059b      	lsls	r3, r3, #22
 80100ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100d0:	4313      	orrs	r3, r2
 80100d2:	68ba      	ldr	r2, [r7, #8]
 80100d4:	0151      	lsls	r1, r2, #5
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	440a      	add	r2, r1
 80100da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100e6:	6013      	str	r3, [r2, #0]
 80100e8:	e036      	b.n	8010158 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100f0:	69da      	ldr	r2, [r3, #28]
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	f003 030f 	and.w	r3, r3, #15
 80100fa:	2101      	movs	r1, #1
 80100fc:	fa01 f303 	lsl.w	r3, r1, r3
 8010100:	041b      	lsls	r3, r3, #16
 8010102:	68f9      	ldr	r1, [r7, #12]
 8010104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010108:	4313      	orrs	r3, r2
 801010a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	015a      	lsls	r2, r3, #5
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	4413      	add	r3, r2
 8010114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801011e:	2b00      	cmp	r3, #0
 8010120:	d11a      	bne.n	8010158 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	015a      	lsls	r2, r3, #5
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	4413      	add	r3, r2
 801012a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	791b      	ldrb	r3, [r3, #4]
 801013c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801013e:	430b      	orrs	r3, r1
 8010140:	4313      	orrs	r3, r2
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	0151      	lsls	r1, r2, #5
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	440a      	add	r2, r1
 801014a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801014e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010156:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3714      	adds	r7, #20
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
	...

08010168 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010168:	b480      	push	{r7}
 801016a:	b085      	sub	sp, #20
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	785b      	ldrb	r3, [r3, #1]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d161      	bne.n	8010248 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	015a      	lsls	r2, r3, #5
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	4413      	add	r3, r2
 801018c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801019a:	d11f      	bne.n	80101dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	015a      	lsls	r2, r3, #5
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	4413      	add	r3, r2
 80101a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	0151      	lsls	r1, r2, #5
 80101ae:	68fa      	ldr	r2, [r7, #12]
 80101b0:	440a      	add	r2, r1
 80101b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80101ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	015a      	lsls	r2, r3, #5
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	4413      	add	r3, r2
 80101c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	0151      	lsls	r1, r2, #5
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	440a      	add	r2, r1
 80101d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	f003 030f 	and.w	r3, r3, #15
 80101ec:	2101      	movs	r1, #1
 80101ee:	fa01 f303 	lsl.w	r3, r1, r3
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	43db      	mvns	r3, r3
 80101f6:	68f9      	ldr	r1, [r7, #12]
 80101f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101fc:	4013      	ands	r3, r2
 80101fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010206:	69da      	ldr	r2, [r3, #28]
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	f003 030f 	and.w	r3, r3, #15
 8010210:	2101      	movs	r1, #1
 8010212:	fa01 f303 	lsl.w	r3, r1, r3
 8010216:	b29b      	uxth	r3, r3
 8010218:	43db      	mvns	r3, r3
 801021a:	68f9      	ldr	r1, [r7, #12]
 801021c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010220:	4013      	ands	r3, r2
 8010222:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	015a      	lsls	r2, r3, #5
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	4413      	add	r3, r2
 801022c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	0159      	lsls	r1, r3, #5
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	440b      	add	r3, r1
 801023a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801023e:	4619      	mov	r1, r3
 8010240:	4b35      	ldr	r3, [pc, #212]	; (8010318 <USB_DeactivateEndpoint+0x1b0>)
 8010242:	4013      	ands	r3, r2
 8010244:	600b      	str	r3, [r1, #0]
 8010246:	e060      	b.n	801030a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	015a      	lsls	r2, r3, #5
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	4413      	add	r3, r2
 8010250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801025a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801025e:	d11f      	bne.n	80102a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	015a      	lsls	r2, r3, #5
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	4413      	add	r3, r2
 8010268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	68ba      	ldr	r2, [r7, #8]
 8010270:	0151      	lsls	r1, r2, #5
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	440a      	add	r2, r1
 8010276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801027a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801027e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	015a      	lsls	r2, r3, #5
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	4413      	add	r3, r2
 8010288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	68ba      	ldr	r2, [r7, #8]
 8010290:	0151      	lsls	r1, r2, #5
 8010292:	68fa      	ldr	r2, [r7, #12]
 8010294:	440a      	add	r2, r1
 8010296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801029a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801029e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	f003 030f 	and.w	r3, r3, #15
 80102b0:	2101      	movs	r1, #1
 80102b2:	fa01 f303 	lsl.w	r3, r1, r3
 80102b6:	041b      	lsls	r3, r3, #16
 80102b8:	43db      	mvns	r3, r3
 80102ba:	68f9      	ldr	r1, [r7, #12]
 80102bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102c0:	4013      	ands	r3, r2
 80102c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ca:	69da      	ldr	r2, [r3, #28]
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	f003 030f 	and.w	r3, r3, #15
 80102d4:	2101      	movs	r1, #1
 80102d6:	fa01 f303 	lsl.w	r3, r1, r3
 80102da:	041b      	lsls	r3, r3, #16
 80102dc:	43db      	mvns	r3, r3
 80102de:	68f9      	ldr	r1, [r7, #12]
 80102e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102e4:	4013      	ands	r3, r2
 80102e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	015a      	lsls	r2, r3, #5
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4413      	add	r3, r2
 80102f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	0159      	lsls	r1, r3, #5
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	440b      	add	r3, r1
 80102fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010302:	4619      	mov	r1, r3
 8010304:	4b05      	ldr	r3, [pc, #20]	; (801031c <USB_DeactivateEndpoint+0x1b4>)
 8010306:	4013      	ands	r3, r2
 8010308:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	3714      	adds	r7, #20
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr
 8010318:	ec337800 	.word	0xec337800
 801031c:	eff37800 	.word	0xeff37800

08010320 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	785b      	ldrb	r3, [r3, #1]
 8010338:	2b01      	cmp	r3, #1
 801033a:	f040 810a 	bne.w	8010552 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	699b      	ldr	r3, [r3, #24]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d132      	bne.n	80103ac <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	015a      	lsls	r2, r3, #5
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	4413      	add	r3, r2
 801034e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010352:	691b      	ldr	r3, [r3, #16]
 8010354:	693a      	ldr	r2, [r7, #16]
 8010356:	0151      	lsls	r1, r2, #5
 8010358:	697a      	ldr	r2, [r7, #20]
 801035a:	440a      	add	r2, r1
 801035c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	015a      	lsls	r2, r3, #5
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	4413      	add	r3, r2
 8010372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	693a      	ldr	r2, [r7, #16]
 801037a:	0151      	lsls	r1, r2, #5
 801037c:	697a      	ldr	r2, [r7, #20]
 801037e:	440a      	add	r2, r1
 8010380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	015a      	lsls	r2, r3, #5
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	4413      	add	r3, r2
 8010392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010396:	691b      	ldr	r3, [r3, #16]
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	0151      	lsls	r1, r2, #5
 801039c:	697a      	ldr	r2, [r7, #20]
 801039e:	440a      	add	r2, r1
 80103a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103a4:	0cdb      	lsrs	r3, r3, #19
 80103a6:	04db      	lsls	r3, r3, #19
 80103a8:	6113      	str	r3, [r2, #16]
 80103aa:	e074      	b.n	8010496 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	015a      	lsls	r2, r3, #5
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	4413      	add	r3, r2
 80103b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103b8:	691b      	ldr	r3, [r3, #16]
 80103ba:	693a      	ldr	r2, [r7, #16]
 80103bc:	0151      	lsls	r1, r2, #5
 80103be:	697a      	ldr	r2, [r7, #20]
 80103c0:	440a      	add	r2, r1
 80103c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103c6:	0cdb      	lsrs	r3, r3, #19
 80103c8:	04db      	lsls	r3, r3, #19
 80103ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	015a      	lsls	r2, r3, #5
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	4413      	add	r3, r2
 80103d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103d8:	691b      	ldr	r3, [r3, #16]
 80103da:	693a      	ldr	r2, [r7, #16]
 80103dc:	0151      	lsls	r1, r2, #5
 80103de:	697a      	ldr	r2, [r7, #20]
 80103e0:	440a      	add	r2, r1
 80103e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80103ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80103ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	015a      	lsls	r2, r3, #5
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	4413      	add	r3, r2
 80103f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	6999      	ldr	r1, [r3, #24]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	440b      	add	r3, r1
 8010408:	1e59      	subs	r1, r3, #1
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010412:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010414:	4b9e      	ldr	r3, [pc, #632]	; (8010690 <USB_EPStartXfer+0x370>)
 8010416:	400b      	ands	r3, r1
 8010418:	6939      	ldr	r1, [r7, #16]
 801041a:	0148      	lsls	r0, r1, #5
 801041c:	6979      	ldr	r1, [r7, #20]
 801041e:	4401      	add	r1, r0
 8010420:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010424:	4313      	orrs	r3, r2
 8010426:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	015a      	lsls	r2, r3, #5
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	4413      	add	r3, r2
 8010430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010434:	691a      	ldr	r2, [r3, #16]
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801043e:	6939      	ldr	r1, [r7, #16]
 8010440:	0148      	lsls	r0, r1, #5
 8010442:	6979      	ldr	r1, [r7, #20]
 8010444:	4401      	add	r1, r0
 8010446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801044a:	4313      	orrs	r3, r2
 801044c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	791b      	ldrb	r3, [r3, #4]
 8010452:	2b01      	cmp	r3, #1
 8010454:	d11f      	bne.n	8010496 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	015a      	lsls	r2, r3, #5
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	4413      	add	r3, r2
 801045e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010462:	691b      	ldr	r3, [r3, #16]
 8010464:	693a      	ldr	r2, [r7, #16]
 8010466:	0151      	lsls	r1, r2, #5
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	440a      	add	r2, r1
 801046c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010470:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010474:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	015a      	lsls	r2, r3, #5
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	4413      	add	r3, r2
 801047e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	693a      	ldr	r2, [r7, #16]
 8010486:	0151      	lsls	r1, r2, #5
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	440a      	add	r2, r1
 801048c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010494:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	015a      	lsls	r2, r3, #5
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	4413      	add	r3, r2
 801049e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	693a      	ldr	r2, [r7, #16]
 80104a6:	0151      	lsls	r1, r2, #5
 80104a8:	697a      	ldr	r2, [r7, #20]
 80104aa:	440a      	add	r2, r1
 80104ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104b4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	791b      	ldrb	r3, [r3, #4]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d015      	beq.n	80104ea <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	699b      	ldr	r3, [r3, #24]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	f000 8106 	beq.w	80106d4 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	f003 030f 	and.w	r3, r3, #15
 80104d8:	2101      	movs	r1, #1
 80104da:	fa01 f303 	lsl.w	r3, r1, r3
 80104de:	6979      	ldr	r1, [r7, #20]
 80104e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104e4:	4313      	orrs	r3, r2
 80104e6:	634b      	str	r3, [r1, #52]	; 0x34
 80104e8:	e0f4      	b.n	80106d4 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d110      	bne.n	801051c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	015a      	lsls	r2, r3, #5
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	4413      	add	r3, r2
 8010502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	693a      	ldr	r2, [r7, #16]
 801050a:	0151      	lsls	r1, r2, #5
 801050c:	697a      	ldr	r2, [r7, #20]
 801050e:	440a      	add	r2, r1
 8010510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010518:	6013      	str	r3, [r2, #0]
 801051a:	e00f      	b.n	801053c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	015a      	lsls	r2, r3, #5
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	4413      	add	r3, r2
 8010524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	693a      	ldr	r2, [r7, #16]
 801052c:	0151      	lsls	r1, r2, #5
 801052e:	697a      	ldr	r2, [r7, #20]
 8010530:	440a      	add	r2, r1
 8010532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801053a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	6919      	ldr	r1, [r3, #16]
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	781a      	ldrb	r2, [r3, #0]
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	699b      	ldr	r3, [r3, #24]
 8010548:	b29b      	uxth	r3, r3
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 fa94 	bl	8010a78 <USB_WritePacket>
 8010550:	e0c0      	b.n	80106d4 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	015a      	lsls	r2, r3, #5
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	4413      	add	r3, r2
 801055a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801055e:	691b      	ldr	r3, [r3, #16]
 8010560:	693a      	ldr	r2, [r7, #16]
 8010562:	0151      	lsls	r1, r2, #5
 8010564:	697a      	ldr	r2, [r7, #20]
 8010566:	440a      	add	r2, r1
 8010568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801056c:	0cdb      	lsrs	r3, r3, #19
 801056e:	04db      	lsls	r3, r3, #19
 8010570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	015a      	lsls	r2, r3, #5
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	4413      	add	r3, r2
 801057a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801057e:	691b      	ldr	r3, [r3, #16]
 8010580:	693a      	ldr	r2, [r7, #16]
 8010582:	0151      	lsls	r1, r2, #5
 8010584:	697a      	ldr	r2, [r7, #20]
 8010586:	440a      	add	r2, r1
 8010588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801058c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010590:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010594:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	699b      	ldr	r3, [r3, #24]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d123      	bne.n	80105e6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	015a      	lsls	r2, r3, #5
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	4413      	add	r3, r2
 80105a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105aa:	691a      	ldr	r2, [r3, #16]
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105b4:	6939      	ldr	r1, [r7, #16]
 80105b6:	0148      	lsls	r0, r1, #5
 80105b8:	6979      	ldr	r1, [r7, #20]
 80105ba:	4401      	add	r1, r0
 80105bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105c0:	4313      	orrs	r3, r2
 80105c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	015a      	lsls	r2, r3, #5
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	4413      	add	r3, r2
 80105cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105d0:	691b      	ldr	r3, [r3, #16]
 80105d2:	693a      	ldr	r2, [r7, #16]
 80105d4:	0151      	lsls	r1, r2, #5
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	440a      	add	r2, r1
 80105da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80105e2:	6113      	str	r3, [r2, #16]
 80105e4:	e037      	b.n	8010656 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	699a      	ldr	r2, [r3, #24]
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	4413      	add	r3, r2
 80105f0:	1e5a      	subs	r2, r3, #1
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80105fa:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	89fa      	ldrh	r2, [r7, #14]
 8010602:	fb03 f202 	mul.w	r2, r3, r2
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	015a      	lsls	r2, r3, #5
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	4413      	add	r3, r2
 8010612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010616:	691a      	ldr	r2, [r3, #16]
 8010618:	89fb      	ldrh	r3, [r7, #14]
 801061a:	04d9      	lsls	r1, r3, #19
 801061c:	4b1c      	ldr	r3, [pc, #112]	; (8010690 <USB_EPStartXfer+0x370>)
 801061e:	400b      	ands	r3, r1
 8010620:	6939      	ldr	r1, [r7, #16]
 8010622:	0148      	lsls	r0, r1, #5
 8010624:	6979      	ldr	r1, [r7, #20]
 8010626:	4401      	add	r1, r0
 8010628:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801062c:	4313      	orrs	r3, r2
 801062e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	015a      	lsls	r2, r3, #5
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	4413      	add	r3, r2
 8010638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801063c:	691a      	ldr	r2, [r3, #16]
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	69db      	ldr	r3, [r3, #28]
 8010642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010646:	6939      	ldr	r1, [r7, #16]
 8010648:	0148      	lsls	r0, r1, #5
 801064a:	6979      	ldr	r1, [r7, #20]
 801064c:	4401      	add	r1, r0
 801064e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010652:	4313      	orrs	r3, r2
 8010654:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	791b      	ldrb	r3, [r3, #4]
 801065a:	2b01      	cmp	r3, #1
 801065c:	d12a      	bne.n	80106b4 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010664:	689b      	ldr	r3, [r3, #8]
 8010666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801066a:	2b00      	cmp	r3, #0
 801066c:	d112      	bne.n	8010694 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	015a      	lsls	r2, r3, #5
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	4413      	add	r3, r2
 8010676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	693a      	ldr	r2, [r7, #16]
 801067e:	0151      	lsls	r1, r2, #5
 8010680:	697a      	ldr	r2, [r7, #20]
 8010682:	440a      	add	r2, r1
 8010684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801068c:	6013      	str	r3, [r2, #0]
 801068e:	e011      	b.n	80106b4 <USB_EPStartXfer+0x394>
 8010690:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	015a      	lsls	r2, r3, #5
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	4413      	add	r3, r2
 801069c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	0151      	lsls	r1, r2, #5
 80106a6:	697a      	ldr	r2, [r7, #20]
 80106a8:	440a      	add	r2, r1
 80106aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	015a      	lsls	r2, r3, #5
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	4413      	add	r3, r2
 80106bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	693a      	ldr	r2, [r7, #16]
 80106c4:	0151      	lsls	r1, r2, #5
 80106c6:	697a      	ldr	r2, [r7, #20]
 80106c8:	440a      	add	r2, r1
 80106ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80106d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3718      	adds	r7, #24
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop

080106e0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b085      	sub	sp, #20
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	785b      	ldrb	r3, [r3, #1]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	f040 80ab 	bne.w	8010854 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	699b      	ldr	r3, [r3, #24]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d132      	bne.n	801076c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	015a      	lsls	r2, r3, #5
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	4413      	add	r3, r2
 801070e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010712:	691b      	ldr	r3, [r3, #16]
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	0151      	lsls	r1, r2, #5
 8010718:	68fa      	ldr	r2, [r7, #12]
 801071a:	440a      	add	r2, r1
 801071c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	015a      	lsls	r2, r3, #5
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	4413      	add	r3, r2
 8010732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010736:	691b      	ldr	r3, [r3, #16]
 8010738:	68ba      	ldr	r2, [r7, #8]
 801073a:	0151      	lsls	r1, r2, #5
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	440a      	add	r2, r1
 8010740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	015a      	lsls	r2, r3, #5
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	4413      	add	r3, r2
 8010752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	68ba      	ldr	r2, [r7, #8]
 801075a:	0151      	lsls	r1, r2, #5
 801075c:	68fa      	ldr	r2, [r7, #12]
 801075e:	440a      	add	r2, r1
 8010760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010764:	0cdb      	lsrs	r3, r3, #19
 8010766:	04db      	lsls	r3, r3, #19
 8010768:	6113      	str	r3, [r2, #16]
 801076a:	e04e      	b.n	801080a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	015a      	lsls	r2, r3, #5
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	4413      	add	r3, r2
 8010774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010778:	691b      	ldr	r3, [r3, #16]
 801077a:	68ba      	ldr	r2, [r7, #8]
 801077c:	0151      	lsls	r1, r2, #5
 801077e:	68fa      	ldr	r2, [r7, #12]
 8010780:	440a      	add	r2, r1
 8010782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010786:	0cdb      	lsrs	r3, r3, #19
 8010788:	04db      	lsls	r3, r3, #19
 801078a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	015a      	lsls	r2, r3, #5
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	4413      	add	r3, r2
 8010794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010798:	691b      	ldr	r3, [r3, #16]
 801079a:	68ba      	ldr	r2, [r7, #8]
 801079c:	0151      	lsls	r1, r2, #5
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	440a      	add	r2, r1
 80107a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80107aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80107ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	699a      	ldr	r2, [r3, #24]
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d903      	bls.n	80107c4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	68da      	ldr	r2, [r3, #12]
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	015a      	lsls	r2, r3, #5
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	4413      	add	r3, r2
 80107cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107d0:	691b      	ldr	r3, [r3, #16]
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	0151      	lsls	r1, r2, #5
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	440a      	add	r2, r1
 80107da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	015a      	lsls	r2, r3, #5
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	4413      	add	r3, r2
 80107ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107f0:	691a      	ldr	r2, [r3, #16]
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	699b      	ldr	r3, [r3, #24]
 80107f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107fa:	68b9      	ldr	r1, [r7, #8]
 80107fc:	0148      	lsls	r0, r1, #5
 80107fe:	68f9      	ldr	r1, [r7, #12]
 8010800:	4401      	add	r1, r0
 8010802:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010806:	4313      	orrs	r3, r2
 8010808:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	015a      	lsls	r2, r3, #5
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	4413      	add	r3, r2
 8010812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	0151      	lsls	r1, r2, #5
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	440a      	add	r2, r1
 8010820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010824:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010828:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	699b      	ldr	r3, [r3, #24]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d071      	beq.n	8010916 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	f003 030f 	and.w	r3, r3, #15
 8010842:	2101      	movs	r1, #1
 8010844:	fa01 f303 	lsl.w	r3, r1, r3
 8010848:	68f9      	ldr	r1, [r7, #12]
 801084a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801084e:	4313      	orrs	r3, r2
 8010850:	634b      	str	r3, [r1, #52]	; 0x34
 8010852:	e060      	b.n	8010916 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	015a      	lsls	r2, r3, #5
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	4413      	add	r3, r2
 801085c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010860:	691b      	ldr	r3, [r3, #16]
 8010862:	68ba      	ldr	r2, [r7, #8]
 8010864:	0151      	lsls	r1, r2, #5
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	440a      	add	r2, r1
 801086a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801086e:	0cdb      	lsrs	r3, r3, #19
 8010870:	04db      	lsls	r3, r3, #19
 8010872:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	015a      	lsls	r2, r3, #5
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	4413      	add	r3, r2
 801087c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010880:	691b      	ldr	r3, [r3, #16]
 8010882:	68ba      	ldr	r2, [r7, #8]
 8010884:	0151      	lsls	r1, r2, #5
 8010886:	68fa      	ldr	r2, [r7, #12]
 8010888:	440a      	add	r2, r1
 801088a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801088e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010892:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010896:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	699b      	ldr	r3, [r3, #24]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d003      	beq.n	80108a8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	68da      	ldr	r2, [r3, #12]
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	68da      	ldr	r2, [r3, #12]
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	015a      	lsls	r2, r3, #5
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	4413      	add	r3, r2
 80108b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108bc:	691b      	ldr	r3, [r3, #16]
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	0151      	lsls	r1, r2, #5
 80108c2:	68fa      	ldr	r2, [r7, #12]
 80108c4:	440a      	add	r2, r1
 80108c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	015a      	lsls	r2, r3, #5
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	4413      	add	r3, r2
 80108d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108dc:	691a      	ldr	r2, [r3, #16]
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	69db      	ldr	r3, [r3, #28]
 80108e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108e6:	68b9      	ldr	r1, [r7, #8]
 80108e8:	0148      	lsls	r0, r1, #5
 80108ea:	68f9      	ldr	r1, [r7, #12]
 80108ec:	4401      	add	r1, r0
 80108ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80108f2:	4313      	orrs	r3, r2
 80108f4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	015a      	lsls	r2, r3, #5
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	4413      	add	r3, r2
 80108fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	0151      	lsls	r1, r2, #5
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	440a      	add	r2, r1
 801090c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010914:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	3714      	adds	r7, #20
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010924:	b480      	push	{r7}
 8010926:	b087      	sub	sp, #28
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801092e:	2300      	movs	r3, #0
 8010930:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010932:	2300      	movs	r3, #0
 8010934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	785b      	ldrb	r3, [r3, #1]
 801093e:	2b01      	cmp	r3, #1
 8010940:	d14a      	bne.n	80109d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	015a      	lsls	r2, r3, #5
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	4413      	add	r3, r2
 801094c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801095a:	f040 8086 	bne.w	8010a6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	015a      	lsls	r2, r3, #5
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	4413      	add	r3, r2
 8010968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	683a      	ldr	r2, [r7, #0]
 8010970:	7812      	ldrb	r2, [r2, #0]
 8010972:	0151      	lsls	r1, r2, #5
 8010974:	693a      	ldr	r2, [r7, #16]
 8010976:	440a      	add	r2, r1
 8010978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801097c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010980:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	015a      	lsls	r2, r3, #5
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	4413      	add	r3, r2
 801098c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	683a      	ldr	r2, [r7, #0]
 8010994:	7812      	ldrb	r2, [r2, #0]
 8010996:	0151      	lsls	r1, r2, #5
 8010998:	693a      	ldr	r2, [r7, #16]
 801099a:	440a      	add	r2, r1
 801099c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	3301      	adds	r3, #1
 80109aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d902      	bls.n	80109bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80109b6:	2301      	movs	r3, #1
 80109b8:	75fb      	strb	r3, [r7, #23]
          break;
 80109ba:	e056      	b.n	8010a6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	015a      	lsls	r2, r3, #5
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	4413      	add	r3, r2
 80109c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80109d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80109d4:	d0e7      	beq.n	80109a6 <USB_EPStopXfer+0x82>
 80109d6:	e048      	b.n	8010a6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	015a      	lsls	r2, r3, #5
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	4413      	add	r3, r2
 80109e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80109ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80109f0:	d13b      	bne.n	8010a6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	015a      	lsls	r2, r3, #5
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	4413      	add	r3, r2
 80109fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	683a      	ldr	r2, [r7, #0]
 8010a04:	7812      	ldrb	r2, [r2, #0]
 8010a06:	0151      	lsls	r1, r2, #5
 8010a08:	693a      	ldr	r2, [r7, #16]
 8010a0a:	440a      	add	r2, r1
 8010a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010a14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	015a      	lsls	r2, r3, #5
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	4413      	add	r3, r2
 8010a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	683a      	ldr	r2, [r7, #0]
 8010a28:	7812      	ldrb	r2, [r2, #0]
 8010a2a:	0151      	lsls	r1, r2, #5
 8010a2c:	693a      	ldr	r2, [r7, #16]
 8010a2e:	440a      	add	r2, r1
 8010a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010a38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	f242 7210 	movw	r2, #10000	; 0x2710
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d902      	bls.n	8010a50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	75fb      	strb	r3, [r7, #23]
          break;
 8010a4e:	e00c      	b.n	8010a6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	015a      	lsls	r2, r3, #5
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	4413      	add	r3, r2
 8010a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010a68:	d0e7      	beq.n	8010a3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	371c      	adds	r7, #28
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b089      	sub	sp, #36	; 0x24
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	4611      	mov	r1, r2
 8010a84:	461a      	mov	r2, r3
 8010a86:	460b      	mov	r3, r1
 8010a88:	71fb      	strb	r3, [r7, #7]
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8010a96:	88bb      	ldrh	r3, [r7, #4]
 8010a98:	3303      	adds	r3, #3
 8010a9a:	089b      	lsrs	r3, r3, #2
 8010a9c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	61bb      	str	r3, [r7, #24]
 8010aa2:	e018      	b.n	8010ad6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010aa4:	79fb      	ldrb	r3, [r7, #7]
 8010aa6:	031a      	lsls	r2, r3, #12
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	4413      	add	r3, r2
 8010aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	3301      	adds	r3, #1
 8010abc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	3301      	adds	r3, #1
 8010ace:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	61bb      	str	r3, [r7, #24]
 8010ad6:	69ba      	ldr	r2, [r7, #24]
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d3e2      	bcc.n	8010aa4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8010ade:	2300      	movs	r3, #0
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3724      	adds	r7, #36	; 0x24
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aea:	4770      	bx	lr

08010aec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b08b      	sub	sp, #44	; 0x2c
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	60b9      	str	r1, [r7, #8]
 8010af6:	4613      	mov	r3, r2
 8010af8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010b02:	88fb      	ldrh	r3, [r7, #6]
 8010b04:	089b      	lsrs	r3, r3, #2
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010b0a:	88fb      	ldrh	r3, [r7, #6]
 8010b0c:	f003 0303 	and.w	r3, r3, #3
 8010b10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010b12:	2300      	movs	r3, #0
 8010b14:	623b      	str	r3, [r7, #32]
 8010b16:	e014      	b.n	8010b42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010b18:	69bb      	ldr	r3, [r7, #24]
 8010b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b22:	601a      	str	r2, [r3, #0]
    pDest++;
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	3301      	adds	r3, #1
 8010b28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b32:	3301      	adds	r3, #1
 8010b34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	3301      	adds	r3, #1
 8010b3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010b3c:	6a3b      	ldr	r3, [r7, #32]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	623b      	str	r3, [r7, #32]
 8010b42:	6a3a      	ldr	r2, [r7, #32]
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d3e6      	bcc.n	8010b18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010b4a:	8bfb      	ldrh	r3, [r7, #30]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d01e      	beq.n	8010b8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010b50:	2300      	movs	r3, #0
 8010b52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	f107 0310 	add.w	r3, r7, #16
 8010b60:	6812      	ldr	r2, [r2, #0]
 8010b62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010b64:	693a      	ldr	r2, [r7, #16]
 8010b66:	6a3b      	ldr	r3, [r7, #32]
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	00db      	lsls	r3, r3, #3
 8010b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b74:	701a      	strb	r2, [r3, #0]
      i++;
 8010b76:	6a3b      	ldr	r3, [r7, #32]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8010b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7e:	3301      	adds	r3, #1
 8010b80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010b82:	8bfb      	ldrh	r3, [r7, #30]
 8010b84:	3b01      	subs	r3, #1
 8010b86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010b88:	8bfb      	ldrh	r3, [r7, #30]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1ea      	bne.n	8010b64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	372c      	adds	r7, #44	; 0x2c
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	785b      	ldrb	r3, [r3, #1]
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d12c      	bne.n	8010c12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	015a      	lsls	r2, r3, #5
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	db12      	blt.n	8010bf0 <USB_EPSetStall+0x54>
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d00f      	beq.n	8010bf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	015a      	lsls	r2, r3, #5
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	68ba      	ldr	r2, [r7, #8]
 8010be0:	0151      	lsls	r1, r2, #5
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	440a      	add	r2, r1
 8010be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010bee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	015a      	lsls	r2, r3, #5
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	68ba      	ldr	r2, [r7, #8]
 8010c00:	0151      	lsls	r1, r2, #5
 8010c02:	68fa      	ldr	r2, [r7, #12]
 8010c04:	440a      	add	r2, r1
 8010c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010c0e:	6013      	str	r3, [r2, #0]
 8010c10:	e02b      	b.n	8010c6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	015a      	lsls	r2, r3, #5
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	4413      	add	r3, r2
 8010c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	db12      	blt.n	8010c4a <USB_EPSetStall+0xae>
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d00f      	beq.n	8010c4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	015a      	lsls	r2, r3, #5
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	4413      	add	r3, r2
 8010c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68ba      	ldr	r2, [r7, #8]
 8010c3a:	0151      	lsls	r1, r2, #5
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	440a      	add	r2, r1
 8010c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010c48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	015a      	lsls	r2, r3, #5
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	4413      	add	r3, r2
 8010c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	0151      	lsls	r1, r2, #5
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	440a      	add	r2, r1
 8010c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010c68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b085      	sub	sp, #20
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	785b      	ldrb	r3, [r3, #1]
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d128      	bne.n	8010ce6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	015a      	lsls	r2, r3, #5
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	4413      	add	r3, r2
 8010c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	68ba      	ldr	r2, [r7, #8]
 8010ca4:	0151      	lsls	r1, r2, #5
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	440a      	add	r2, r1
 8010caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	791b      	ldrb	r3, [r3, #4]
 8010cb8:	2b03      	cmp	r3, #3
 8010cba:	d003      	beq.n	8010cc4 <USB_EPClearStall+0x4c>
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	791b      	ldrb	r3, [r3, #4]
 8010cc0:	2b02      	cmp	r3, #2
 8010cc2:	d138      	bne.n	8010d36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	015a      	lsls	r2, r3, #5
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	4413      	add	r3, r2
 8010ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	0151      	lsls	r1, r2, #5
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	440a      	add	r2, r1
 8010cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ce2:	6013      	str	r3, [r2, #0]
 8010ce4:	e027      	b.n	8010d36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	015a      	lsls	r2, r3, #5
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	4413      	add	r3, r2
 8010cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	68ba      	ldr	r2, [r7, #8]
 8010cf6:	0151      	lsls	r1, r2, #5
 8010cf8:	68fa      	ldr	r2, [r7, #12]
 8010cfa:	440a      	add	r2, r1
 8010cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010d04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	791b      	ldrb	r3, [r3, #4]
 8010d0a:	2b03      	cmp	r3, #3
 8010d0c:	d003      	beq.n	8010d16 <USB_EPClearStall+0x9e>
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	791b      	ldrb	r3, [r3, #4]
 8010d12:	2b02      	cmp	r3, #2
 8010d14:	d10f      	bne.n	8010d36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	015a      	lsls	r2, r3, #5
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	4413      	add	r3, r2
 8010d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	68ba      	ldr	r2, [r7, #8]
 8010d26:	0151      	lsls	r1, r2, #5
 8010d28:	68fa      	ldr	r2, [r7, #12]
 8010d2a:	440a      	add	r2, r1
 8010d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010d36:	2300      	movs	r3, #0
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3714      	adds	r7, #20
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b085      	sub	sp, #20
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	68fa      	ldr	r2, [r7, #12]
 8010d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010d66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d6e:	681a      	ldr	r2, [r3, #0]
 8010d70:	78fb      	ldrb	r3, [r7, #3]
 8010d72:	011b      	lsls	r3, r3, #4
 8010d74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010d78:	68f9      	ldr	r1, [r7, #12]
 8010d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010d82:	2300      	movs	r3, #0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3714      	adds	r7, #20
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b085      	sub	sp, #20
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010daa:	f023 0303 	bic.w	r3, r3, #3
 8010dae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	68fa      	ldr	r2, [r7, #12]
 8010dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010dbe:	f023 0302 	bic.w	r3, r3, #2
 8010dc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3714      	adds	r7, #20
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr

08010dd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010dd2:	b480      	push	{r7}
 8010dd4:	b085      	sub	sp, #20
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010dec:	f023 0303 	bic.w	r3, r3, #3
 8010df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	68fa      	ldr	r2, [r7, #12]
 8010dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e00:	f043 0302 	orr.w	r3, r3, #2
 8010e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e06:	2300      	movs	r3, #0
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3714      	adds	r7, #20
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b085      	sub	sp, #20
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	695b      	ldr	r3, [r3, #20]
 8010e20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	699b      	ldr	r3, [r3, #24]
 8010e26:	68fa      	ldr	r2, [r7, #12]
 8010e28:	4013      	ands	r3, r2
 8010e2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3714      	adds	r7, #20
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr

08010e3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010e3a:	b480      	push	{r7}
 8010e3c:	b085      	sub	sp, #20
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e4c:	699b      	ldr	r3, [r3, #24]
 8010e4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e56:	69db      	ldr	r3, [r3, #28]
 8010e58:	68ba      	ldr	r2, [r7, #8]
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	0c1b      	lsrs	r3, r3, #16
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3714      	adds	r7, #20
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr

08010e6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010e6e:	b480      	push	{r7}
 8010e70:	b085      	sub	sp, #20
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e80:	699b      	ldr	r3, [r3, #24]
 8010e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e8a:	69db      	ldr	r3, [r3, #28]
 8010e8c:	68ba      	ldr	r2, [r7, #8]
 8010e8e:	4013      	ands	r3, r2
 8010e90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	b29b      	uxth	r3, r3
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3714      	adds	r7, #20
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr

08010ea2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010ea2:	b480      	push	{r7}
 8010ea4:	b085      	sub	sp, #20
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	460b      	mov	r3, r1
 8010eac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010eb2:	78fb      	ldrb	r3, [r7, #3]
 8010eb4:	015a      	lsls	r2, r3, #5
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	4413      	add	r3, r2
 8010eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ebe:	689b      	ldr	r3, [r3, #8]
 8010ec0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ec8:	695b      	ldr	r3, [r3, #20]
 8010eca:	68ba      	ldr	r2, [r7, #8]
 8010ecc:	4013      	ands	r3, r2
 8010ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ed0:	68bb      	ldr	r3, [r7, #8]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3714      	adds	r7, #20
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010ede:	b480      	push	{r7}
 8010ee0:	b087      	sub	sp, #28
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ef4:	691b      	ldr	r3, [r3, #16]
 8010ef6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010f02:	78fb      	ldrb	r3, [r7, #3]
 8010f04:	f003 030f 	and.w	r3, r3, #15
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8010f0e:	01db      	lsls	r3, r3, #7
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	693a      	ldr	r2, [r7, #16]
 8010f14:	4313      	orrs	r3, r2
 8010f16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010f18:	78fb      	ldrb	r3, [r7, #3]
 8010f1a:	015a      	lsls	r2, r3, #5
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	4413      	add	r3, r2
 8010f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f24:	689b      	ldr	r3, [r3, #8]
 8010f26:	693a      	ldr	r2, [r7, #16]
 8010f28:	4013      	ands	r3, r2
 8010f2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010f2c:	68bb      	ldr	r3, [r7, #8]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	371c      	adds	r7, #28
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr

08010f3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010f3a:	b480      	push	{r7}
 8010f3c:	b083      	sub	sp, #12
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	695b      	ldr	r3, [r3, #20]
 8010f46:	f003 0301 	and.w	r3, r3, #1
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010f56:	b480      	push	{r7}
 8010f58:	b085      	sub	sp, #20
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68fa      	ldr	r2, [r7, #12]
 8010f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010f74:	f023 0307 	bic.w	r3, r3, #7
 8010f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b085      	sub	sp, #20
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	333c      	adds	r3, #60	; 0x3c
 8010fae:	3304      	adds	r3, #4
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	4a1c      	ldr	r2, [pc, #112]	; (8011028 <USB_EP0_OutStart+0x8c>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d90a      	bls.n	8010fd2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fcc:	d101      	bne.n	8010fd2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	e024      	b.n	801101c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fd8:	461a      	mov	r2, r3
 8010fda:	2300      	movs	r3, #0
 8010fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fe4:	691b      	ldr	r3, [r3, #16]
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ff8:	691b      	ldr	r3, [r3, #16]
 8010ffa:	68fa      	ldr	r2, [r7, #12]
 8010ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011000:	f043 0318 	orr.w	r3, r3, #24
 8011004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801100c:	691b      	ldr	r3, [r3, #16]
 801100e:	68fa      	ldr	r2, [r7, #12]
 8011010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011014:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011018:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 801101a:	2300      	movs	r3, #0
}
 801101c:	4618      	mov	r0, r3
 801101e:	3714      	adds	r7, #20
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	4f54300a 	.word	0x4f54300a

0801102c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011034:	2300      	movs	r3, #0
 8011036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	3301      	adds	r3, #1
 801103c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	4a13      	ldr	r2, [pc, #76]	; (8011090 <USB_CoreReset+0x64>)
 8011042:	4293      	cmp	r3, r2
 8011044:	d901      	bls.n	801104a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011046:	2303      	movs	r3, #3
 8011048:	e01b      	b.n	8011082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	691b      	ldr	r3, [r3, #16]
 801104e:	2b00      	cmp	r3, #0
 8011050:	daf2      	bge.n	8011038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011052:	2300      	movs	r3, #0
 8011054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	f043 0201 	orr.w	r2, r3, #1
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	3301      	adds	r3, #1
 8011066:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	4a09      	ldr	r2, [pc, #36]	; (8011090 <USB_CoreReset+0x64>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d901      	bls.n	8011074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011070:	2303      	movs	r3, #3
 8011072:	e006      	b.n	8011082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	691b      	ldr	r3, [r3, #16]
 8011078:	f003 0301 	and.w	r3, r3, #1
 801107c:	2b01      	cmp	r3, #1
 801107e:	d0f0      	beq.n	8011062 <USB_CoreReset+0x36>

  return HAL_OK;
 8011080:	2300      	movs	r3, #0
}
 8011082:	4618      	mov	r0, r3
 8011084:	3714      	adds	r7, #20
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	00030d40 	.word	0x00030d40

08011094 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	460b      	mov	r3, r1
 801109e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80110a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80110a4:	f002 fa6c 	bl	8013580 <USBD_static_malloc>
 80110a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d105      	bne.n	80110bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2200      	movs	r2, #0
 80110b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80110b8:	2302      	movs	r3, #2
 80110ba:	e066      	b.n	801118a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	68fa      	ldr	r2, [r7, #12]
 80110c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	7c1b      	ldrb	r3, [r3, #16]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d119      	bne.n	8011100 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80110cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110d0:	2202      	movs	r2, #2
 80110d2:	2181      	movs	r1, #129	; 0x81
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f002 f83f 	bl	8013158 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2201      	movs	r2, #1
 80110de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80110e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110e4:	2202      	movs	r2, #2
 80110e6:	2101      	movs	r1, #1
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f002 f835 	bl	8013158 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2201      	movs	r2, #1
 80110f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2210      	movs	r2, #16
 80110fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80110fe:	e016      	b.n	801112e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011100:	2340      	movs	r3, #64	; 0x40
 8011102:	2202      	movs	r2, #2
 8011104:	2181      	movs	r1, #129	; 0x81
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f002 f826 	bl	8013158 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2201      	movs	r2, #1
 8011110:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011112:	2340      	movs	r3, #64	; 0x40
 8011114:	2202      	movs	r2, #2
 8011116:	2101      	movs	r1, #1
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f002 f81d 	bl	8013158 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2201      	movs	r2, #1
 8011122:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2210      	movs	r2, #16
 801112a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801112e:	2308      	movs	r3, #8
 8011130:	2203      	movs	r2, #3
 8011132:	2182      	movs	r1, #130	; 0x82
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f002 f80f 	bl	8013158 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2201      	movs	r2, #1
 801113e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2200      	movs	r2, #0
 8011150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2200      	movs	r2, #0
 8011158:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	7c1b      	ldrb	r3, [r3, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d109      	bne.n	8011178 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801116a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801116e:	2101      	movs	r1, #1
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f002 f96b 	bl	801344c <USBD_LL_PrepareReceive>
 8011176:	e007      	b.n	8011188 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801117e:	2340      	movs	r3, #64	; 0x40
 8011180:	2101      	movs	r1, #1
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f002 f962 	bl	801344c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011188:	2300      	movs	r3, #0
}
 801118a:	4618      	mov	r0, r3
 801118c:	3710      	adds	r7, #16
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}

08011192 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011192:	b580      	push	{r7, lr}
 8011194:	b082      	sub	sp, #8
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
 801119a:	460b      	mov	r3, r1
 801119c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801119e:	2181      	movs	r1, #129	; 0x81
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f002 f817 	bl	80131d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80111ac:	2101      	movs	r1, #1
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f002 f810 	bl	80131d4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2200      	movs	r2, #0
 80111b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80111bc:	2182      	movs	r1, #130	; 0x82
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f002 f808 	bl	80131d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00e      	beq.n	80111fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111ee:	4618      	mov	r0, r3
 80111f0:	f002 f9d4 	bl	801359c <USBD_static_free>
    pdev->pClassData = NULL;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2200      	movs	r2, #0
 80111f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3708      	adds	r7, #8
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
	...

08011208 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b086      	sub	sp, #24
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011218:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801121a:	2300      	movs	r3, #0
 801121c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801121e:	2300      	movs	r3, #0
 8011220:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011222:	2300      	movs	r3, #0
 8011224:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d101      	bne.n	8011230 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801122c:	2303      	movs	r3, #3
 801122e:	e0af      	b.n	8011390 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011238:	2b00      	cmp	r3, #0
 801123a:	d03f      	beq.n	80112bc <USBD_CDC_Setup+0xb4>
 801123c:	2b20      	cmp	r3, #32
 801123e:	f040 809f 	bne.w	8011380 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	88db      	ldrh	r3, [r3, #6]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d02e      	beq.n	80112a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	b25b      	sxtb	r3, r3
 8011250:	2b00      	cmp	r3, #0
 8011252:	da16      	bge.n	8011282 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	683a      	ldr	r2, [r7, #0]
 801125e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011260:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011262:	683a      	ldr	r2, [r7, #0]
 8011264:	88d2      	ldrh	r2, [r2, #6]
 8011266:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	88db      	ldrh	r3, [r3, #6]
 801126c:	2b07      	cmp	r3, #7
 801126e:	bf28      	it	cs
 8011270:	2307      	movcs	r3, #7
 8011272:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	89fa      	ldrh	r2, [r7, #14]
 8011278:	4619      	mov	r1, r3
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f001 fb13 	bl	80128a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011280:	e085      	b.n	801138e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	785a      	ldrb	r2, [r3, #1]
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	88db      	ldrh	r3, [r3, #6]
 8011290:	b2da      	uxtb	r2, r3
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011298:	6939      	ldr	r1, [r7, #16]
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	88db      	ldrh	r3, [r3, #6]
 801129e:	461a      	mov	r2, r3
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f001 fb2c 	bl	80128fe <USBD_CtlPrepareRx>
      break;
 80112a6:	e072      	b.n	801138e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112ae:	689b      	ldr	r3, [r3, #8]
 80112b0:	683a      	ldr	r2, [r7, #0]
 80112b2:	7850      	ldrb	r0, [r2, #1]
 80112b4:	2200      	movs	r2, #0
 80112b6:	6839      	ldr	r1, [r7, #0]
 80112b8:	4798      	blx	r3
      break;
 80112ba:	e068      	b.n	801138e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	785b      	ldrb	r3, [r3, #1]
 80112c0:	2b0b      	cmp	r3, #11
 80112c2:	d852      	bhi.n	801136a <USBD_CDC_Setup+0x162>
 80112c4:	a201      	add	r2, pc, #4	; (adr r2, 80112cc <USBD_CDC_Setup+0xc4>)
 80112c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ca:	bf00      	nop
 80112cc:	080112fd 	.word	0x080112fd
 80112d0:	08011379 	.word	0x08011379
 80112d4:	0801136b 	.word	0x0801136b
 80112d8:	0801136b 	.word	0x0801136b
 80112dc:	0801136b 	.word	0x0801136b
 80112e0:	0801136b 	.word	0x0801136b
 80112e4:	0801136b 	.word	0x0801136b
 80112e8:	0801136b 	.word	0x0801136b
 80112ec:	0801136b 	.word	0x0801136b
 80112f0:	0801136b 	.word	0x0801136b
 80112f4:	08011327 	.word	0x08011327
 80112f8:	08011351 	.word	0x08011351
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011302:	b2db      	uxtb	r3, r3
 8011304:	2b03      	cmp	r3, #3
 8011306:	d107      	bne.n	8011318 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011308:	f107 030a 	add.w	r3, r7, #10
 801130c:	2202      	movs	r2, #2
 801130e:	4619      	mov	r1, r3
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f001 fac8 	bl	80128a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011316:	e032      	b.n	801137e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011318:	6839      	ldr	r1, [r7, #0]
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f001 fa52 	bl	80127c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8011320:	2303      	movs	r3, #3
 8011322:	75fb      	strb	r3, [r7, #23]
          break;
 8011324:	e02b      	b.n	801137e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801132c:	b2db      	uxtb	r3, r3
 801132e:	2b03      	cmp	r3, #3
 8011330:	d107      	bne.n	8011342 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011332:	f107 030d 	add.w	r3, r7, #13
 8011336:	2201      	movs	r2, #1
 8011338:	4619      	mov	r1, r3
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f001 fab3 	bl	80128a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011340:	e01d      	b.n	801137e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011342:	6839      	ldr	r1, [r7, #0]
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f001 fa3d 	bl	80127c4 <USBD_CtlError>
            ret = USBD_FAIL;
 801134a:	2303      	movs	r3, #3
 801134c:	75fb      	strb	r3, [r7, #23]
          break;
 801134e:	e016      	b.n	801137e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b03      	cmp	r3, #3
 801135a:	d00f      	beq.n	801137c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801135c:	6839      	ldr	r1, [r7, #0]
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f001 fa30 	bl	80127c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8011364:	2303      	movs	r3, #3
 8011366:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011368:	e008      	b.n	801137c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801136a:	6839      	ldr	r1, [r7, #0]
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f001 fa29 	bl	80127c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8011372:	2303      	movs	r3, #3
 8011374:	75fb      	strb	r3, [r7, #23]
          break;
 8011376:	e002      	b.n	801137e <USBD_CDC_Setup+0x176>
          break;
 8011378:	bf00      	nop
 801137a:	e008      	b.n	801138e <USBD_CDC_Setup+0x186>
          break;
 801137c:	bf00      	nop
      }
      break;
 801137e:	e006      	b.n	801138e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011380:	6839      	ldr	r1, [r7, #0]
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f001 fa1e 	bl	80127c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8011388:	2303      	movs	r3, #3
 801138a:	75fb      	strb	r3, [r7, #23]
      break;
 801138c:	bf00      	nop
  }

  return (uint8_t)ret;
 801138e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011390:	4618      	mov	r0, r3
 8011392:	3718      	adds	r7, #24
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	460b      	mov	r3, r1
 80113a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d101      	bne.n	80113ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80113b6:	2303      	movs	r3, #3
 80113b8:	e04f      	b.n	801145a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80113c2:	78fa      	ldrb	r2, [r7, #3]
 80113c4:	6879      	ldr	r1, [r7, #4]
 80113c6:	4613      	mov	r3, r2
 80113c8:	009b      	lsls	r3, r3, #2
 80113ca:	4413      	add	r3, r2
 80113cc:	009b      	lsls	r3, r3, #2
 80113ce:	440b      	add	r3, r1
 80113d0:	3318      	adds	r3, #24
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d029      	beq.n	801142c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80113d8:	78fa      	ldrb	r2, [r7, #3]
 80113da:	6879      	ldr	r1, [r7, #4]
 80113dc:	4613      	mov	r3, r2
 80113de:	009b      	lsls	r3, r3, #2
 80113e0:	4413      	add	r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	440b      	add	r3, r1
 80113e6:	3318      	adds	r3, #24
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	78f9      	ldrb	r1, [r7, #3]
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	460b      	mov	r3, r1
 80113f0:	00db      	lsls	r3, r3, #3
 80113f2:	440b      	add	r3, r1
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	4403      	add	r3, r0
 80113f8:	3348      	adds	r3, #72	; 0x48
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8011400:	fb01 f303 	mul.w	r3, r1, r3
 8011404:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011406:	2b00      	cmp	r3, #0
 8011408:	d110      	bne.n	801142c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801140a:	78fa      	ldrb	r2, [r7, #3]
 801140c:	6879      	ldr	r1, [r7, #4]
 801140e:	4613      	mov	r3, r2
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	4413      	add	r3, r2
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	440b      	add	r3, r1
 8011418:	3318      	adds	r3, #24
 801141a:	2200      	movs	r2, #0
 801141c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801141e:	78f9      	ldrb	r1, [r7, #3]
 8011420:	2300      	movs	r3, #0
 8011422:	2200      	movs	r2, #0
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f001 ffd9 	bl	80133dc <USBD_LL_Transmit>
 801142a:	e015      	b.n	8011458 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	2200      	movs	r2, #0
 8011430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801143a:	691b      	ldr	r3, [r3, #16]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d00b      	beq.n	8011458 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011446:	691b      	ldr	r3, [r3, #16]
 8011448:	68ba      	ldr	r2, [r7, #8]
 801144a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011454:	78fa      	ldrb	r2, [r7, #3]
 8011456:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011458:	2300      	movs	r3, #0
}
 801145a:	4618      	mov	r0, r3
 801145c:	3710      	adds	r7, #16
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011462:	b580      	push	{r7, lr}
 8011464:	b084      	sub	sp, #16
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
 801146a:	460b      	mov	r3, r1
 801146c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011474:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801147c:	2b00      	cmp	r3, #0
 801147e:	d101      	bne.n	8011484 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011480:	2303      	movs	r3, #3
 8011482:	e015      	b.n	80114b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011484:	78fb      	ldrb	r3, [r7, #3]
 8011486:	4619      	mov	r1, r3
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f002 f817 	bl	80134bc <USBD_LL_GetRxDataSize>
 801148e:	4602      	mov	r2, r0
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	68fa      	ldr	r2, [r7, #12]
 80114a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80114a4:	68fa      	ldr	r2, [r7, #12]
 80114a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80114aa:	4611      	mov	r1, r2
 80114ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80114ae:	2300      	movs	r3, #0
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3710      	adds	r7, #16
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d101      	bne.n	80114d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80114ce:	2303      	movs	r3, #3
 80114d0:	e01b      	b.n	801150a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d015      	beq.n	8011508 <USBD_CDC_EP0_RxReady+0x50>
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80114e2:	2bff      	cmp	r3, #255	; 0xff
 80114e4:	d010      	beq.n	8011508 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114ec:	689b      	ldr	r3, [r3, #8]
 80114ee:	68fa      	ldr	r2, [r7, #12]
 80114f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80114f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80114fc:	b292      	uxth	r2, r2
 80114fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	22ff      	movs	r2, #255	; 0xff
 8011504:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011508:	2300      	movs	r3, #0
}
 801150a:	4618      	mov	r0, r3
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
	...

08011514 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011514:	b480      	push	{r7}
 8011516:	b083      	sub	sp, #12
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2243      	movs	r2, #67	; 0x43
 8011520:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011522:	4b03      	ldr	r3, [pc, #12]	; (8011530 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011524:	4618      	mov	r0, r3
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr
 8011530:	2001c4b0 	.word	0x2001c4b0

08011534 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2243      	movs	r2, #67	; 0x43
 8011540:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011542:	4b03      	ldr	r3, [pc, #12]	; (8011550 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011544:	4618      	mov	r0, r3
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr
 8011550:	2001c46c 	.word	0x2001c46c

08011554 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2243      	movs	r2, #67	; 0x43
 8011560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011562:	4b03      	ldr	r3, [pc, #12]	; (8011570 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr
 8011570:	2001c4f4 	.word	0x2001c4f4

08011574 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	220a      	movs	r2, #10
 8011580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011582:	4b03      	ldr	r3, [pc, #12]	; (8011590 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011584:	4618      	mov	r0, r3
 8011586:	370c      	adds	r7, #12
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr
 8011590:	2001c428 	.word	0x2001c428

08011594 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d101      	bne.n	80115a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80115a4:	2303      	movs	r3, #3
 80115a6:	e004      	b.n	80115b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	683a      	ldr	r2, [r7, #0]
 80115ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80115b0:	2300      	movs	r3, #0
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	370c      	adds	r7, #12
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80115be:	b480      	push	{r7}
 80115c0:	b087      	sub	sp, #28
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	60f8      	str	r0, [r7, #12]
 80115c6:	60b9      	str	r1, [r7, #8]
 80115c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80115d8:	2303      	movs	r3, #3
 80115da:	e008      	b.n	80115ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	68ba      	ldr	r2, [r7, #8]
 80115e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80115ec:	2300      	movs	r3, #0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	371c      	adds	r7, #28
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr

080115fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80115fa:	b480      	push	{r7}
 80115fc:	b085      	sub	sp, #20
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
 8011602:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801160a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d101      	bne.n	8011616 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011612:	2303      	movs	r3, #3
 8011614:	e004      	b.n	8011620 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	683a      	ldr	r2, [r7, #0]
 801161a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801161e:	2300      	movs	r3, #0
}
 8011620:	4618      	mov	r0, r3
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801163a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011642:	2b00      	cmp	r3, #0
 8011644:	d101      	bne.n	801164a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011646:	2303      	movs	r3, #3
 8011648:	e016      	b.n	8011678 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	7c1b      	ldrb	r3, [r3, #16]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d109      	bne.n	8011666 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011658:	f44f 7300 	mov.w	r3, #512	; 0x200
 801165c:	2101      	movs	r1, #1
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f001 fef4 	bl	801344c <USBD_LL_PrepareReceive>
 8011664:	e007      	b.n	8011676 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801166c:	2340      	movs	r3, #64	; 0x40
 801166e:	2101      	movs	r1, #1
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f001 feeb 	bl	801344c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011676:	2300      	movs	r3, #0
}
 8011678:	4618      	mov	r0, r3
 801167a:	3710      	adds	r7, #16
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	4613      	mov	r3, r2
 801168c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d101      	bne.n	8011698 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011694:	2303      	movs	r3, #3
 8011696:	e01f      	b.n	80116d8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2200      	movs	r2, #0
 801169c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2200      	movs	r2, #0
 80116ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d003      	beq.n	80116be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2201      	movs	r2, #1
 80116c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	79fa      	ldrb	r2, [r7, #7]
 80116ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f001 fcc5 	bl	801305c <USBD_LL_Init>
 80116d2:	4603      	mov	r3, r0
 80116d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80116d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3718      	adds	r7, #24
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80116ea:	2300      	movs	r3, #0
 80116ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d101      	bne.n	80116f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80116f4:	2303      	movs	r3, #3
 80116f6:	e016      	b.n	8011726 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	683a      	ldr	r2, [r7, #0]
 80116fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011708:	2b00      	cmp	r3, #0
 801170a:	d00b      	beq.n	8011724 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011714:	f107 020e 	add.w	r2, r7, #14
 8011718:	4610      	mov	r0, r2
 801171a:	4798      	blx	r3
 801171c:	4602      	mov	r2, r0
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}

0801172e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801172e:	b580      	push	{r7, lr}
 8011730:	b082      	sub	sp, #8
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f001 fcdc 	bl	80130f4 <USBD_LL_Start>
 801173c:	4603      	mov	r3, r0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011746:	b480      	push	{r7}
 8011748:	b083      	sub	sp, #12
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801174e:	2300      	movs	r3, #0
}
 8011750:	4618      	mov	r0, r3
 8011752:	370c      	adds	r7, #12
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr

0801175c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	460b      	mov	r3, r1
 8011766:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011768:	2303      	movs	r3, #3
 801176a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011772:	2b00      	cmp	r3, #0
 8011774:	d009      	beq.n	801178a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	78fa      	ldrb	r2, [r7, #3]
 8011780:	4611      	mov	r1, r2
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	4798      	blx	r3
 8011786:	4603      	mov	r3, r0
 8011788:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801178a:	7bfb      	ldrb	r3, [r7, #15]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}

08011794 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	460b      	mov	r3, r1
 801179e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d007      	beq.n	80117ba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	78fa      	ldrb	r2, [r7, #3]
 80117b4:	4611      	mov	r1, r2
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	4798      	blx	r3
  }

  return USBD_OK;
 80117ba:	2300      	movs	r3, #0
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80117d4:	6839      	ldr	r1, [r7, #0]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f000 ffba 	bl	8012750 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2201      	movs	r2, #1
 80117e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80117ea:	461a      	mov	r2, r3
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80117f8:	f003 031f 	and.w	r3, r3, #31
 80117fc:	2b02      	cmp	r3, #2
 80117fe:	d01a      	beq.n	8011836 <USBD_LL_SetupStage+0x72>
 8011800:	2b02      	cmp	r3, #2
 8011802:	d822      	bhi.n	801184a <USBD_LL_SetupStage+0x86>
 8011804:	2b00      	cmp	r3, #0
 8011806:	d002      	beq.n	801180e <USBD_LL_SetupStage+0x4a>
 8011808:	2b01      	cmp	r3, #1
 801180a:	d00a      	beq.n	8011822 <USBD_LL_SetupStage+0x5e>
 801180c:	e01d      	b.n	801184a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011814:	4619      	mov	r1, r3
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 fa62 	bl	8011ce0 <USBD_StdDevReq>
 801181c:	4603      	mov	r3, r0
 801181e:	73fb      	strb	r3, [r7, #15]
      break;
 8011820:	e020      	b.n	8011864 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011828:	4619      	mov	r1, r3
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f000 fac6 	bl	8011dbc <USBD_StdItfReq>
 8011830:	4603      	mov	r3, r0
 8011832:	73fb      	strb	r3, [r7, #15]
      break;
 8011834:	e016      	b.n	8011864 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801183c:	4619      	mov	r1, r3
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f000 fb05 	bl	8011e4e <USBD_StdEPReq>
 8011844:	4603      	mov	r3, r0
 8011846:	73fb      	strb	r3, [r7, #15]
      break;
 8011848:	e00c      	b.n	8011864 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011854:	b2db      	uxtb	r3, r3
 8011856:	4619      	mov	r1, r3
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f001 fcf1 	bl	8013240 <USBD_LL_StallEP>
 801185e:	4603      	mov	r3, r0
 8011860:	73fb      	strb	r3, [r7, #15]
      break;
 8011862:	bf00      	nop
  }

  return ret;
 8011864:	7bfb      	ldrb	r3, [r7, #15]
}
 8011866:	4618      	mov	r0, r3
 8011868:	3710      	adds	r7, #16
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801186e:	b580      	push	{r7, lr}
 8011870:	b086      	sub	sp, #24
 8011872:	af00      	add	r7, sp, #0
 8011874:	60f8      	str	r0, [r7, #12]
 8011876:	460b      	mov	r3, r1
 8011878:	607a      	str	r2, [r7, #4]
 801187a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801187c:	7afb      	ldrb	r3, [r7, #11]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d138      	bne.n	80118f4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011888:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011890:	2b03      	cmp	r3, #3
 8011892:	d14a      	bne.n	801192a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	689a      	ldr	r2, [r3, #8]
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	429a      	cmp	r2, r3
 801189e:	d913      	bls.n	80118c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	689a      	ldr	r2, [r3, #8]
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	1ad2      	subs	r2, r2, r3
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	68da      	ldr	r2, [r3, #12]
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	689b      	ldr	r3, [r3, #8]
 80118b6:	4293      	cmp	r3, r2
 80118b8:	bf28      	it	cs
 80118ba:	4613      	movcs	r3, r2
 80118bc:	461a      	mov	r2, r3
 80118be:	6879      	ldr	r1, [r7, #4]
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f001 f839 	bl	8012938 <USBD_CtlContinueRx>
 80118c6:	e030      	b.n	801192a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	2b03      	cmp	r3, #3
 80118d2:	d10b      	bne.n	80118ec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118da:	691b      	ldr	r3, [r3, #16]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d005      	beq.n	80118ec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118e6:	691b      	ldr	r3, [r3, #16]
 80118e8:	68f8      	ldr	r0, [r7, #12]
 80118ea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80118ec:	68f8      	ldr	r0, [r7, #12]
 80118ee:	f001 f834 	bl	801295a <USBD_CtlSendStatus>
 80118f2:	e01a      	b.n	801192a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	2b03      	cmp	r3, #3
 80118fe:	d114      	bne.n	801192a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011906:	699b      	ldr	r3, [r3, #24]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00e      	beq.n	801192a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011912:	699b      	ldr	r3, [r3, #24]
 8011914:	7afa      	ldrb	r2, [r7, #11]
 8011916:	4611      	mov	r1, r2
 8011918:	68f8      	ldr	r0, [r7, #12]
 801191a:	4798      	blx	r3
 801191c:	4603      	mov	r3, r0
 801191e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011920:	7dfb      	ldrb	r3, [r7, #23]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d001      	beq.n	801192a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011926:	7dfb      	ldrb	r3, [r7, #23]
 8011928:	e000      	b.n	801192c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801192a:	2300      	movs	r3, #0
}
 801192c:	4618      	mov	r0, r3
 801192e:	3718      	adds	r7, #24
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b086      	sub	sp, #24
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	460b      	mov	r3, r1
 801193e:	607a      	str	r2, [r7, #4]
 8011940:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011942:	7afb      	ldrb	r3, [r7, #11]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d16b      	bne.n	8011a20 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	3314      	adds	r3, #20
 801194c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011954:	2b02      	cmp	r3, #2
 8011956:	d156      	bne.n	8011a06 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	689a      	ldr	r2, [r3, #8]
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	429a      	cmp	r2, r3
 8011962:	d914      	bls.n	801198e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	689a      	ldr	r2, [r3, #8]
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	1ad2      	subs	r2, r2, r3
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	461a      	mov	r2, r3
 8011978:	6879      	ldr	r1, [r7, #4]
 801197a:	68f8      	ldr	r0, [r7, #12]
 801197c:	f000 ffae 	bl	80128dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011980:	2300      	movs	r3, #0
 8011982:	2200      	movs	r2, #0
 8011984:	2100      	movs	r1, #0
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	f001 fd60 	bl	801344c <USBD_LL_PrepareReceive>
 801198c:	e03b      	b.n	8011a06 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	68da      	ldr	r2, [r3, #12]
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	689b      	ldr	r3, [r3, #8]
 8011996:	429a      	cmp	r2, r3
 8011998:	d11c      	bne.n	80119d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	685a      	ldr	r2, [r3, #4]
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d316      	bcc.n	80119d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	685a      	ldr	r2, [r3, #4]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d20f      	bcs.n	80119d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80119b4:	2200      	movs	r2, #0
 80119b6:	2100      	movs	r1, #0
 80119b8:	68f8      	ldr	r0, [r7, #12]
 80119ba:	f000 ff8f 	bl	80128dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2200      	movs	r2, #0
 80119c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80119c6:	2300      	movs	r3, #0
 80119c8:	2200      	movs	r2, #0
 80119ca:	2100      	movs	r1, #0
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f001 fd3d 	bl	801344c <USBD_LL_PrepareReceive>
 80119d2:	e018      	b.n	8011a06 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	2b03      	cmp	r3, #3
 80119de:	d10b      	bne.n	80119f8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d005      	beq.n	80119f8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119f8:	2180      	movs	r1, #128	; 0x80
 80119fa:	68f8      	ldr	r0, [r7, #12]
 80119fc:	f001 fc20 	bl	8013240 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	f000 ffbd 	bl	8012980 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d122      	bne.n	8011a56 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f7ff fe98 	bl	8011746 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011a1e:	e01a      	b.n	8011a56 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	2b03      	cmp	r3, #3
 8011a2a:	d114      	bne.n	8011a56 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a32:	695b      	ldr	r3, [r3, #20]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d00e      	beq.n	8011a56 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a3e:	695b      	ldr	r3, [r3, #20]
 8011a40:	7afa      	ldrb	r2, [r7, #11]
 8011a42:	4611      	mov	r1, r2
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	4798      	blx	r3
 8011a48:	4603      	mov	r3, r0
 8011a4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011a4c:	7dfb      	ldrb	r3, [r7, #23]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d001      	beq.n	8011a56 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	e000      	b.n	8011a58 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011a56:	2300      	movs	r3, #0
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3718      	adds	r7, #24
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011a90:	2303      	movs	r3, #3
 8011a92:	e02f      	b.n	8011af4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d00f      	beq.n	8011abe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d009      	beq.n	8011abe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	6852      	ldr	r2, [r2, #4]
 8011ab6:	b2d2      	uxtb	r2, r2
 8011ab8:	4611      	mov	r1, r2
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011abe:	2340      	movs	r3, #64	; 0x40
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f001 fb47 	bl	8013158 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2201      	movs	r2, #1
 8011ace:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2240      	movs	r2, #64	; 0x40
 8011ad6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ada:	2340      	movs	r3, #64	; 0x40
 8011adc:	2200      	movs	r2, #0
 8011ade:	2180      	movs	r1, #128	; 0x80
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f001 fb39 	bl	8013158 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2201      	movs	r2, #1
 8011aea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2240      	movs	r2, #64	; 0x40
 8011af0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b083      	sub	sp, #12
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	460b      	mov	r3, r1
 8011b06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	78fa      	ldrb	r2, [r7, #3]
 8011b0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	370c      	adds	r7, #12
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr

08011b1c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b2a:	b2da      	uxtb	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2204      	movs	r2, #4
 8011b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011b3a:	2300      	movs	r3, #0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr

08011b48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b083      	sub	sp, #12
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	2b04      	cmp	r3, #4
 8011b5a:	d106      	bne.n	8011b6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	370c      	adds	r7, #12
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr

08011b78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d101      	bne.n	8011b8e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	e012      	b.n	8011bb4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	2b03      	cmp	r3, #3
 8011b98:	d10b      	bne.n	8011bb2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ba0:	69db      	ldr	r3, [r3, #28]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d005      	beq.n	8011bb2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bac:	69db      	ldr	r3, [r3, #28]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011bb2:	2300      	movs	r3, #0
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3708      	adds	r7, #8
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d101      	bne.n	8011bd6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011bd2:	2303      	movs	r3, #3
 8011bd4:	e014      	b.n	8011c00 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	2b03      	cmp	r3, #3
 8011be0:	d10d      	bne.n	8011bfe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011be8:	6a1b      	ldr	r3, [r3, #32]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d007      	beq.n	8011bfe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bf4:	6a1b      	ldr	r3, [r3, #32]
 8011bf6:	78fa      	ldrb	r2, [r7, #3]
 8011bf8:	4611      	mov	r1, r2
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011bfe:	2300      	movs	r3, #0
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3708      	adds	r7, #8
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}

08011c08 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	460b      	mov	r3, r1
 8011c12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d101      	bne.n	8011c22 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011c1e:	2303      	movs	r3, #3
 8011c20:	e014      	b.n	8011c4c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	2b03      	cmp	r3, #3
 8011c2c:	d10d      	bne.n	8011c4a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d007      	beq.n	8011c4a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c42:	78fa      	ldrb	r2, [r7, #3]
 8011c44:	4611      	mov	r1, r2
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	370c      	adds	r7, #12
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr

08011c6a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b082      	sub	sp, #8
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2201      	movs	r2, #1
 8011c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d009      	beq.n	8011c98 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	6852      	ldr	r2, [r2, #4]
 8011c90:	b2d2      	uxtb	r2, r2
 8011c92:	4611      	mov	r1, r2
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	4798      	blx	r3
  }

  return USBD_OK;
 8011c98:	2300      	movs	r3, #0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011ca2:	b480      	push	{r7}
 8011ca4:	b087      	sub	sp, #28
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011cc0:	8a3b      	ldrh	r3, [r7, #16]
 8011cc2:	021b      	lsls	r3, r3, #8
 8011cc4:	b21a      	sxth	r2, r3
 8011cc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011cca:	4313      	orrs	r3, r2
 8011ccc:	b21b      	sxth	r3, r3
 8011cce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011cd0:	89fb      	ldrh	r3, [r7, #14]
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	371c      	adds	r7, #28
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr
	...

08011ce0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011cea:	2300      	movs	r3, #0
 8011cec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011cf6:	2b40      	cmp	r3, #64	; 0x40
 8011cf8:	d005      	beq.n	8011d06 <USBD_StdDevReq+0x26>
 8011cfa:	2b40      	cmp	r3, #64	; 0x40
 8011cfc:	d853      	bhi.n	8011da6 <USBD_StdDevReq+0xc6>
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00b      	beq.n	8011d1a <USBD_StdDevReq+0x3a>
 8011d02:	2b20      	cmp	r3, #32
 8011d04:	d14f      	bne.n	8011da6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d0c:	689b      	ldr	r3, [r3, #8]
 8011d0e:	6839      	ldr	r1, [r7, #0]
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	4798      	blx	r3
 8011d14:	4603      	mov	r3, r0
 8011d16:	73fb      	strb	r3, [r7, #15]
      break;
 8011d18:	e04a      	b.n	8011db0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	785b      	ldrb	r3, [r3, #1]
 8011d1e:	2b09      	cmp	r3, #9
 8011d20:	d83b      	bhi.n	8011d9a <USBD_StdDevReq+0xba>
 8011d22:	a201      	add	r2, pc, #4	; (adr r2, 8011d28 <USBD_StdDevReq+0x48>)
 8011d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d28:	08011d7d 	.word	0x08011d7d
 8011d2c:	08011d91 	.word	0x08011d91
 8011d30:	08011d9b 	.word	0x08011d9b
 8011d34:	08011d87 	.word	0x08011d87
 8011d38:	08011d9b 	.word	0x08011d9b
 8011d3c:	08011d5b 	.word	0x08011d5b
 8011d40:	08011d51 	.word	0x08011d51
 8011d44:	08011d9b 	.word	0x08011d9b
 8011d48:	08011d73 	.word	0x08011d73
 8011d4c:	08011d65 	.word	0x08011d65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011d50:	6839      	ldr	r1, [r7, #0]
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 f9de 	bl	8012114 <USBD_GetDescriptor>
          break;
 8011d58:	e024      	b.n	8011da4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011d5a:	6839      	ldr	r1, [r7, #0]
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 fb6d 	bl	801243c <USBD_SetAddress>
          break;
 8011d62:	e01f      	b.n	8011da4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011d64:	6839      	ldr	r1, [r7, #0]
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 fbac 	bl	80124c4 <USBD_SetConfig>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	73fb      	strb	r3, [r7, #15]
          break;
 8011d70:	e018      	b.n	8011da4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011d72:	6839      	ldr	r1, [r7, #0]
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f000 fc4b 	bl	8012610 <USBD_GetConfig>
          break;
 8011d7a:	e013      	b.n	8011da4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011d7c:	6839      	ldr	r1, [r7, #0]
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 fc7c 	bl	801267c <USBD_GetStatus>
          break;
 8011d84:	e00e      	b.n	8011da4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011d86:	6839      	ldr	r1, [r7, #0]
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f000 fcab 	bl	80126e4 <USBD_SetFeature>
          break;
 8011d8e:	e009      	b.n	8011da4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011d90:	6839      	ldr	r1, [r7, #0]
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f000 fcba 	bl	801270c <USBD_ClrFeature>
          break;
 8011d98:	e004      	b.n	8011da4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011d9a:	6839      	ldr	r1, [r7, #0]
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f000 fd11 	bl	80127c4 <USBD_CtlError>
          break;
 8011da2:	bf00      	nop
      }
      break;
 8011da4:	e004      	b.n	8011db0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011da6:	6839      	ldr	r1, [r7, #0]
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f000 fd0b 	bl	80127c4 <USBD_CtlError>
      break;
 8011dae:	bf00      	nop
  }

  return ret;
 8011db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop

08011dbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b084      	sub	sp, #16
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011dd2:	2b40      	cmp	r3, #64	; 0x40
 8011dd4:	d005      	beq.n	8011de2 <USBD_StdItfReq+0x26>
 8011dd6:	2b40      	cmp	r3, #64	; 0x40
 8011dd8:	d82f      	bhi.n	8011e3a <USBD_StdItfReq+0x7e>
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d001      	beq.n	8011de2 <USBD_StdItfReq+0x26>
 8011dde:	2b20      	cmp	r3, #32
 8011de0:	d12b      	bne.n	8011e3a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	3b01      	subs	r3, #1
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	d81d      	bhi.n	8011e2c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	889b      	ldrh	r3, [r3, #4]
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d813      	bhi.n	8011e22 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e00:	689b      	ldr	r3, [r3, #8]
 8011e02:	6839      	ldr	r1, [r7, #0]
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	4798      	blx	r3
 8011e08:	4603      	mov	r3, r0
 8011e0a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	88db      	ldrh	r3, [r3, #6]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d110      	bne.n	8011e36 <USBD_StdItfReq+0x7a>
 8011e14:	7bfb      	ldrb	r3, [r7, #15]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d10d      	bne.n	8011e36 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 fd9d 	bl	801295a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011e20:	e009      	b.n	8011e36 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011e22:	6839      	ldr	r1, [r7, #0]
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f000 fccd 	bl	80127c4 <USBD_CtlError>
          break;
 8011e2a:	e004      	b.n	8011e36 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f000 fcc8 	bl	80127c4 <USBD_CtlError>
          break;
 8011e34:	e000      	b.n	8011e38 <USBD_StdItfReq+0x7c>
          break;
 8011e36:	bf00      	nop
      }
      break;
 8011e38:	e004      	b.n	8011e44 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011e3a:	6839      	ldr	r1, [r7, #0]
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 fcc1 	bl	80127c4 <USBD_CtlError>
      break;
 8011e42:	bf00      	nop
  }

  return ret;
 8011e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3710      	adds	r7, #16
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b084      	sub	sp, #16
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	889b      	ldrh	r3, [r3, #4]
 8011e60:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e6a:	2b40      	cmp	r3, #64	; 0x40
 8011e6c:	d007      	beq.n	8011e7e <USBD_StdEPReq+0x30>
 8011e6e:	2b40      	cmp	r3, #64	; 0x40
 8011e70:	f200 8145 	bhi.w	80120fe <USBD_StdEPReq+0x2b0>
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d00c      	beq.n	8011e92 <USBD_StdEPReq+0x44>
 8011e78:	2b20      	cmp	r3, #32
 8011e7a:	f040 8140 	bne.w	80120fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e84:	689b      	ldr	r3, [r3, #8]
 8011e86:	6839      	ldr	r1, [r7, #0]
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	4798      	blx	r3
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8011e90:	e13a      	b.n	8012108 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	785b      	ldrb	r3, [r3, #1]
 8011e96:	2b03      	cmp	r3, #3
 8011e98:	d007      	beq.n	8011eaa <USBD_StdEPReq+0x5c>
 8011e9a:	2b03      	cmp	r3, #3
 8011e9c:	f300 8129 	bgt.w	80120f2 <USBD_StdEPReq+0x2a4>
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d07f      	beq.n	8011fa4 <USBD_StdEPReq+0x156>
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d03c      	beq.n	8011f22 <USBD_StdEPReq+0xd4>
 8011ea8:	e123      	b.n	80120f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	2b02      	cmp	r3, #2
 8011eb4:	d002      	beq.n	8011ebc <USBD_StdEPReq+0x6e>
 8011eb6:	2b03      	cmp	r3, #3
 8011eb8:	d016      	beq.n	8011ee8 <USBD_StdEPReq+0x9a>
 8011eba:	e02c      	b.n	8011f16 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ebc:	7bbb      	ldrb	r3, [r7, #14]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d00d      	beq.n	8011ede <USBD_StdEPReq+0x90>
 8011ec2:	7bbb      	ldrb	r3, [r7, #14]
 8011ec4:	2b80      	cmp	r3, #128	; 0x80
 8011ec6:	d00a      	beq.n	8011ede <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ec8:	7bbb      	ldrb	r3, [r7, #14]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f001 f9b7 	bl	8013240 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ed2:	2180      	movs	r1, #128	; 0x80
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f001 f9b3 	bl	8013240 <USBD_LL_StallEP>
 8011eda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011edc:	e020      	b.n	8011f20 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8011ede:	6839      	ldr	r1, [r7, #0]
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 fc6f 	bl	80127c4 <USBD_CtlError>
              break;
 8011ee6:	e01b      	b.n	8011f20 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	885b      	ldrh	r3, [r3, #2]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10e      	bne.n	8011f0e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ef0:	7bbb      	ldrb	r3, [r7, #14]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d00b      	beq.n	8011f0e <USBD_StdEPReq+0xc0>
 8011ef6:	7bbb      	ldrb	r3, [r7, #14]
 8011ef8:	2b80      	cmp	r3, #128	; 0x80
 8011efa:	d008      	beq.n	8011f0e <USBD_StdEPReq+0xc0>
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	88db      	ldrh	r3, [r3, #6]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d104      	bne.n	8011f0e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f04:	7bbb      	ldrb	r3, [r7, #14]
 8011f06:	4619      	mov	r1, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f001 f999 	bl	8013240 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 fd23 	bl	801295a <USBD_CtlSendStatus>

              break;
 8011f14:	e004      	b.n	8011f20 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011f16:	6839      	ldr	r1, [r7, #0]
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f000 fc53 	bl	80127c4 <USBD_CtlError>
              break;
 8011f1e:	bf00      	nop
          }
          break;
 8011f20:	e0ec      	b.n	80120fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	2b02      	cmp	r3, #2
 8011f2c:	d002      	beq.n	8011f34 <USBD_StdEPReq+0xe6>
 8011f2e:	2b03      	cmp	r3, #3
 8011f30:	d016      	beq.n	8011f60 <USBD_StdEPReq+0x112>
 8011f32:	e030      	b.n	8011f96 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f34:	7bbb      	ldrb	r3, [r7, #14]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00d      	beq.n	8011f56 <USBD_StdEPReq+0x108>
 8011f3a:	7bbb      	ldrb	r3, [r7, #14]
 8011f3c:	2b80      	cmp	r3, #128	; 0x80
 8011f3e:	d00a      	beq.n	8011f56 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f40:	7bbb      	ldrb	r3, [r7, #14]
 8011f42:	4619      	mov	r1, r3
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f001 f97b 	bl	8013240 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f4a:	2180      	movs	r1, #128	; 0x80
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f001 f977 	bl	8013240 <USBD_LL_StallEP>
 8011f52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011f54:	e025      	b.n	8011fa2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011f56:	6839      	ldr	r1, [r7, #0]
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 fc33 	bl	80127c4 <USBD_CtlError>
              break;
 8011f5e:	e020      	b.n	8011fa2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	885b      	ldrh	r3, [r3, #2]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d11b      	bne.n	8011fa0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011f68:	7bbb      	ldrb	r3, [r7, #14]
 8011f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d004      	beq.n	8011f7c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011f72:	7bbb      	ldrb	r3, [r7, #14]
 8011f74:	4619      	mov	r1, r3
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f001 f998 	bl	80132ac <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 fcec 	bl	801295a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	6839      	ldr	r1, [r7, #0]
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	4798      	blx	r3
 8011f90:	4603      	mov	r3, r0
 8011f92:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011f94:	e004      	b.n	8011fa0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011f96:	6839      	ldr	r1, [r7, #0]
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f000 fc13 	bl	80127c4 <USBD_CtlError>
              break;
 8011f9e:	e000      	b.n	8011fa2 <USBD_StdEPReq+0x154>
              break;
 8011fa0:	bf00      	nop
          }
          break;
 8011fa2:	e0ab      	b.n	80120fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	2b02      	cmp	r3, #2
 8011fae:	d002      	beq.n	8011fb6 <USBD_StdEPReq+0x168>
 8011fb0:	2b03      	cmp	r3, #3
 8011fb2:	d032      	beq.n	801201a <USBD_StdEPReq+0x1cc>
 8011fb4:	e097      	b.n	80120e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fb6:	7bbb      	ldrb	r3, [r7, #14]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d007      	beq.n	8011fcc <USBD_StdEPReq+0x17e>
 8011fbc:	7bbb      	ldrb	r3, [r7, #14]
 8011fbe:	2b80      	cmp	r3, #128	; 0x80
 8011fc0:	d004      	beq.n	8011fcc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8011fc2:	6839      	ldr	r1, [r7, #0]
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 fbfd 	bl	80127c4 <USBD_CtlError>
                break;
 8011fca:	e091      	b.n	80120f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	da0b      	bge.n	8011fec <USBD_StdEPReq+0x19e>
 8011fd4:	7bbb      	ldrb	r3, [r7, #14]
 8011fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fda:	4613      	mov	r3, r2
 8011fdc:	009b      	lsls	r3, r3, #2
 8011fde:	4413      	add	r3, r2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	3310      	adds	r3, #16
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	3304      	adds	r3, #4
 8011fea:	e00b      	b.n	8012004 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011fec:	7bbb      	ldrb	r3, [r7, #14]
 8011fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	009b      	lsls	r3, r3, #2
 8011ff6:	4413      	add	r3, r2
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	4413      	add	r3, r2
 8012002:	3304      	adds	r3, #4
 8012004:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	2200      	movs	r2, #0
 801200a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	2202      	movs	r2, #2
 8012010:	4619      	mov	r1, r3
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f000 fc47 	bl	80128a6 <USBD_CtlSendData>
              break;
 8012018:	e06a      	b.n	80120f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801201a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801201e:	2b00      	cmp	r3, #0
 8012020:	da11      	bge.n	8012046 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012022:	7bbb      	ldrb	r3, [r7, #14]
 8012024:	f003 020f 	and.w	r2, r3, #15
 8012028:	6879      	ldr	r1, [r7, #4]
 801202a:	4613      	mov	r3, r2
 801202c:	009b      	lsls	r3, r3, #2
 801202e:	4413      	add	r3, r2
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	440b      	add	r3, r1
 8012034:	3324      	adds	r3, #36	; 0x24
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d117      	bne.n	801206c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801203c:	6839      	ldr	r1, [r7, #0]
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f000 fbc0 	bl	80127c4 <USBD_CtlError>
                  break;
 8012044:	e054      	b.n	80120f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012046:	7bbb      	ldrb	r3, [r7, #14]
 8012048:	f003 020f 	and.w	r2, r3, #15
 801204c:	6879      	ldr	r1, [r7, #4]
 801204e:	4613      	mov	r3, r2
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	4413      	add	r3, r2
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	440b      	add	r3, r1
 8012058:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801205c:	881b      	ldrh	r3, [r3, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d104      	bne.n	801206c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012062:	6839      	ldr	r1, [r7, #0]
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f000 fbad 	bl	80127c4 <USBD_CtlError>
                  break;
 801206a:	e041      	b.n	80120f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801206c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012070:	2b00      	cmp	r3, #0
 8012072:	da0b      	bge.n	801208c <USBD_StdEPReq+0x23e>
 8012074:	7bbb      	ldrb	r3, [r7, #14]
 8012076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801207a:	4613      	mov	r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	4413      	add	r3, r2
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	3310      	adds	r3, #16
 8012084:	687a      	ldr	r2, [r7, #4]
 8012086:	4413      	add	r3, r2
 8012088:	3304      	adds	r3, #4
 801208a:	e00b      	b.n	80120a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801208c:	7bbb      	ldrb	r3, [r7, #14]
 801208e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012092:	4613      	mov	r3, r2
 8012094:	009b      	lsls	r3, r3, #2
 8012096:	4413      	add	r3, r2
 8012098:	009b      	lsls	r3, r3, #2
 801209a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	4413      	add	r3, r2
 80120a2:	3304      	adds	r3, #4
 80120a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80120a6:	7bbb      	ldrb	r3, [r7, #14]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d002      	beq.n	80120b2 <USBD_StdEPReq+0x264>
 80120ac:	7bbb      	ldrb	r3, [r7, #14]
 80120ae:	2b80      	cmp	r3, #128	; 0x80
 80120b0:	d103      	bne.n	80120ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	2200      	movs	r2, #0
 80120b6:	601a      	str	r2, [r3, #0]
 80120b8:	e00e      	b.n	80120d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80120ba:	7bbb      	ldrb	r3, [r7, #14]
 80120bc:	4619      	mov	r1, r3
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f001 f92a 	bl	8013318 <USBD_LL_IsStallEP>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d003      	beq.n	80120d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2201      	movs	r2, #1
 80120ce:	601a      	str	r2, [r3, #0]
 80120d0:	e002      	b.n	80120d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	2200      	movs	r2, #0
 80120d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	2202      	movs	r2, #2
 80120dc:	4619      	mov	r1, r3
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f000 fbe1 	bl	80128a6 <USBD_CtlSendData>
              break;
 80120e4:	e004      	b.n	80120f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80120e6:	6839      	ldr	r1, [r7, #0]
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 fb6b 	bl	80127c4 <USBD_CtlError>
              break;
 80120ee:	bf00      	nop
          }
          break;
 80120f0:	e004      	b.n	80120fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80120f2:	6839      	ldr	r1, [r7, #0]
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f000 fb65 	bl	80127c4 <USBD_CtlError>
          break;
 80120fa:	bf00      	nop
      }
      break;
 80120fc:	e004      	b.n	8012108 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80120fe:	6839      	ldr	r1, [r7, #0]
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 fb5f 	bl	80127c4 <USBD_CtlError>
      break;
 8012106:	bf00      	nop
  }

  return ret;
 8012108:	7bfb      	ldrb	r3, [r7, #15]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
	...

08012114 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801211e:	2300      	movs	r3, #0
 8012120:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012122:	2300      	movs	r3, #0
 8012124:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012126:	2300      	movs	r3, #0
 8012128:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	885b      	ldrh	r3, [r3, #2]
 801212e:	0a1b      	lsrs	r3, r3, #8
 8012130:	b29b      	uxth	r3, r3
 8012132:	3b01      	subs	r3, #1
 8012134:	2b0e      	cmp	r3, #14
 8012136:	f200 8152 	bhi.w	80123de <USBD_GetDescriptor+0x2ca>
 801213a:	a201      	add	r2, pc, #4	; (adr r2, 8012140 <USBD_GetDescriptor+0x2c>)
 801213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012140:	080121b1 	.word	0x080121b1
 8012144:	080121c9 	.word	0x080121c9
 8012148:	08012209 	.word	0x08012209
 801214c:	080123df 	.word	0x080123df
 8012150:	080123df 	.word	0x080123df
 8012154:	0801237f 	.word	0x0801237f
 8012158:	080123ab 	.word	0x080123ab
 801215c:	080123df 	.word	0x080123df
 8012160:	080123df 	.word	0x080123df
 8012164:	080123df 	.word	0x080123df
 8012168:	080123df 	.word	0x080123df
 801216c:	080123df 	.word	0x080123df
 8012170:	080123df 	.word	0x080123df
 8012174:	080123df 	.word	0x080123df
 8012178:	0801217d 	.word	0x0801217d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012182:	69db      	ldr	r3, [r3, #28]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d00b      	beq.n	80121a0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801218e:	69db      	ldr	r3, [r3, #28]
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	7c12      	ldrb	r2, [r2, #16]
 8012194:	f107 0108 	add.w	r1, r7, #8
 8012198:	4610      	mov	r0, r2
 801219a:	4798      	blx	r3
 801219c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801219e:	e126      	b.n	80123ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80121a0:	6839      	ldr	r1, [r7, #0]
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 fb0e 	bl	80127c4 <USBD_CtlError>
        err++;
 80121a8:	7afb      	ldrb	r3, [r7, #11]
 80121aa:	3301      	adds	r3, #1
 80121ac:	72fb      	strb	r3, [r7, #11]
      break;
 80121ae:	e11e      	b.n	80123ee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	7c12      	ldrb	r2, [r2, #16]
 80121bc:	f107 0108 	add.w	r1, r7, #8
 80121c0:	4610      	mov	r0, r2
 80121c2:	4798      	blx	r3
 80121c4:	60f8      	str	r0, [r7, #12]
      break;
 80121c6:	e112      	b.n	80123ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	7c1b      	ldrb	r3, [r3, #16]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d10d      	bne.n	80121ec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121d8:	f107 0208 	add.w	r2, r7, #8
 80121dc:	4610      	mov	r0, r2
 80121de:	4798      	blx	r3
 80121e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	3301      	adds	r3, #1
 80121e6:	2202      	movs	r2, #2
 80121e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80121ea:	e100      	b.n	80123ee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f4:	f107 0208 	add.w	r2, r7, #8
 80121f8:	4610      	mov	r0, r2
 80121fa:	4798      	blx	r3
 80121fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	3301      	adds	r3, #1
 8012202:	2202      	movs	r2, #2
 8012204:	701a      	strb	r2, [r3, #0]
      break;
 8012206:	e0f2      	b.n	80123ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	885b      	ldrh	r3, [r3, #2]
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2b05      	cmp	r3, #5
 8012210:	f200 80ac 	bhi.w	801236c <USBD_GetDescriptor+0x258>
 8012214:	a201      	add	r2, pc, #4	; (adr r2, 801221c <USBD_GetDescriptor+0x108>)
 8012216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801221a:	bf00      	nop
 801221c:	08012235 	.word	0x08012235
 8012220:	08012269 	.word	0x08012269
 8012224:	0801229d 	.word	0x0801229d
 8012228:	080122d1 	.word	0x080122d1
 801222c:	08012305 	.word	0x08012305
 8012230:	08012339 	.word	0x08012339
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d00b      	beq.n	8012258 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	7c12      	ldrb	r2, [r2, #16]
 801224c:	f107 0108 	add.w	r1, r7, #8
 8012250:	4610      	mov	r0, r2
 8012252:	4798      	blx	r3
 8012254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012256:	e091      	b.n	801237c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012258:	6839      	ldr	r1, [r7, #0]
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 fab2 	bl	80127c4 <USBD_CtlError>
            err++;
 8012260:	7afb      	ldrb	r3, [r7, #11]
 8012262:	3301      	adds	r3, #1
 8012264:	72fb      	strb	r3, [r7, #11]
          break;
 8012266:	e089      	b.n	801237c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801226e:	689b      	ldr	r3, [r3, #8]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d00b      	beq.n	801228c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	687a      	ldr	r2, [r7, #4]
 801227e:	7c12      	ldrb	r2, [r2, #16]
 8012280:	f107 0108 	add.w	r1, r7, #8
 8012284:	4610      	mov	r0, r2
 8012286:	4798      	blx	r3
 8012288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801228a:	e077      	b.n	801237c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 fa98 	bl	80127c4 <USBD_CtlError>
            err++;
 8012294:	7afb      	ldrb	r3, [r7, #11]
 8012296:	3301      	adds	r3, #1
 8012298:	72fb      	strb	r3, [r7, #11]
          break;
 801229a:	e06f      	b.n	801237c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d00b      	beq.n	80122c0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	7c12      	ldrb	r2, [r2, #16]
 80122b4:	f107 0108 	add.w	r1, r7, #8
 80122b8:	4610      	mov	r0, r2
 80122ba:	4798      	blx	r3
 80122bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122be:	e05d      	b.n	801237c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80122c0:	6839      	ldr	r1, [r7, #0]
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 fa7e 	bl	80127c4 <USBD_CtlError>
            err++;
 80122c8:	7afb      	ldrb	r3, [r7, #11]
 80122ca:	3301      	adds	r3, #1
 80122cc:	72fb      	strb	r3, [r7, #11]
          break;
 80122ce:	e055      	b.n	801237c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122d6:	691b      	ldr	r3, [r3, #16]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d00b      	beq.n	80122f4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	7c12      	ldrb	r2, [r2, #16]
 80122e8:	f107 0108 	add.w	r1, r7, #8
 80122ec:	4610      	mov	r0, r2
 80122ee:	4798      	blx	r3
 80122f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122f2:	e043      	b.n	801237c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80122f4:	6839      	ldr	r1, [r7, #0]
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fa64 	bl	80127c4 <USBD_CtlError>
            err++;
 80122fc:	7afb      	ldrb	r3, [r7, #11]
 80122fe:	3301      	adds	r3, #1
 8012300:	72fb      	strb	r3, [r7, #11]
          break;
 8012302:	e03b      	b.n	801237c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801230a:	695b      	ldr	r3, [r3, #20]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00b      	beq.n	8012328 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012316:	695b      	ldr	r3, [r3, #20]
 8012318:	687a      	ldr	r2, [r7, #4]
 801231a:	7c12      	ldrb	r2, [r2, #16]
 801231c:	f107 0108 	add.w	r1, r7, #8
 8012320:	4610      	mov	r0, r2
 8012322:	4798      	blx	r3
 8012324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012326:	e029      	b.n	801237c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012328:	6839      	ldr	r1, [r7, #0]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 fa4a 	bl	80127c4 <USBD_CtlError>
            err++;
 8012330:	7afb      	ldrb	r3, [r7, #11]
 8012332:	3301      	adds	r3, #1
 8012334:	72fb      	strb	r3, [r7, #11]
          break;
 8012336:	e021      	b.n	801237c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801233e:	699b      	ldr	r3, [r3, #24]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00b      	beq.n	801235c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801234a:	699b      	ldr	r3, [r3, #24]
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	7c12      	ldrb	r2, [r2, #16]
 8012350:	f107 0108 	add.w	r1, r7, #8
 8012354:	4610      	mov	r0, r2
 8012356:	4798      	blx	r3
 8012358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801235a:	e00f      	b.n	801237c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801235c:	6839      	ldr	r1, [r7, #0]
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 fa30 	bl	80127c4 <USBD_CtlError>
            err++;
 8012364:	7afb      	ldrb	r3, [r7, #11]
 8012366:	3301      	adds	r3, #1
 8012368:	72fb      	strb	r3, [r7, #11]
          break;
 801236a:	e007      	b.n	801237c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801236c:	6839      	ldr	r1, [r7, #0]
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 fa28 	bl	80127c4 <USBD_CtlError>
          err++;
 8012374:	7afb      	ldrb	r3, [r7, #11]
 8012376:	3301      	adds	r3, #1
 8012378:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801237a:	bf00      	nop
      }
      break;
 801237c:	e037      	b.n	80123ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	7c1b      	ldrb	r3, [r3, #16]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d109      	bne.n	801239a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801238e:	f107 0208 	add.w	r2, r7, #8
 8012392:	4610      	mov	r0, r2
 8012394:	4798      	blx	r3
 8012396:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012398:	e029      	b.n	80123ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801239a:	6839      	ldr	r1, [r7, #0]
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 fa11 	bl	80127c4 <USBD_CtlError>
        err++;
 80123a2:	7afb      	ldrb	r3, [r7, #11]
 80123a4:	3301      	adds	r3, #1
 80123a6:	72fb      	strb	r3, [r7, #11]
      break;
 80123a8:	e021      	b.n	80123ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	7c1b      	ldrb	r3, [r3, #16]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10d      	bne.n	80123ce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123ba:	f107 0208 	add.w	r2, r7, #8
 80123be:	4610      	mov	r0, r2
 80123c0:	4798      	blx	r3
 80123c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	3301      	adds	r3, #1
 80123c8:	2207      	movs	r2, #7
 80123ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123cc:	e00f      	b.n	80123ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80123ce:	6839      	ldr	r1, [r7, #0]
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 f9f7 	bl	80127c4 <USBD_CtlError>
        err++;
 80123d6:	7afb      	ldrb	r3, [r7, #11]
 80123d8:	3301      	adds	r3, #1
 80123da:	72fb      	strb	r3, [r7, #11]
      break;
 80123dc:	e007      	b.n	80123ee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80123de:	6839      	ldr	r1, [r7, #0]
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 f9ef 	bl	80127c4 <USBD_CtlError>
      err++;
 80123e6:	7afb      	ldrb	r3, [r7, #11]
 80123e8:	3301      	adds	r3, #1
 80123ea:	72fb      	strb	r3, [r7, #11]
      break;
 80123ec:	bf00      	nop
  }

  if (err != 0U)
 80123ee:	7afb      	ldrb	r3, [r7, #11]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d11e      	bne.n	8012432 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	88db      	ldrh	r3, [r3, #6]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d016      	beq.n	801242a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80123fc:	893b      	ldrh	r3, [r7, #8]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d00e      	beq.n	8012420 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	88da      	ldrh	r2, [r3, #6]
 8012406:	893b      	ldrh	r3, [r7, #8]
 8012408:	4293      	cmp	r3, r2
 801240a:	bf28      	it	cs
 801240c:	4613      	movcs	r3, r2
 801240e:	b29b      	uxth	r3, r3
 8012410:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012412:	893b      	ldrh	r3, [r7, #8]
 8012414:	461a      	mov	r2, r3
 8012416:	68f9      	ldr	r1, [r7, #12]
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f000 fa44 	bl	80128a6 <USBD_CtlSendData>
 801241e:	e009      	b.n	8012434 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012420:	6839      	ldr	r1, [r7, #0]
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 f9ce 	bl	80127c4 <USBD_CtlError>
 8012428:	e004      	b.n	8012434 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f000 fa95 	bl	801295a <USBD_CtlSendStatus>
 8012430:	e000      	b.n	8012434 <USBD_GetDescriptor+0x320>
    return;
 8012432:	bf00      	nop
  }
}
 8012434:	3710      	adds	r7, #16
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop

0801243c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	889b      	ldrh	r3, [r3, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d131      	bne.n	80124b2 <USBD_SetAddress+0x76>
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	88db      	ldrh	r3, [r3, #6]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d12d      	bne.n	80124b2 <USBD_SetAddress+0x76>
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	885b      	ldrh	r3, [r3, #2]
 801245a:	2b7f      	cmp	r3, #127	; 0x7f
 801245c:	d829      	bhi.n	80124b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	885b      	ldrh	r3, [r3, #2]
 8012462:	b2db      	uxtb	r3, r3
 8012464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012468:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012470:	b2db      	uxtb	r3, r3
 8012472:	2b03      	cmp	r3, #3
 8012474:	d104      	bne.n	8012480 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012476:	6839      	ldr	r1, [r7, #0]
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 f9a3 	bl	80127c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801247e:	e01d      	b.n	80124bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	7bfa      	ldrb	r2, [r7, #15]
 8012484:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012488:	7bfb      	ldrb	r3, [r7, #15]
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 ff6f 	bl	8013370 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 fa61 	bl	801295a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012498:	7bfb      	ldrb	r3, [r7, #15]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d004      	beq.n	80124a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2202      	movs	r2, #2
 80124a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124a6:	e009      	b.n	80124bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2201      	movs	r2, #1
 80124ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124b0:	e004      	b.n	80124bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80124b2:	6839      	ldr	r1, [r7, #0]
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 f985 	bl	80127c4 <USBD_CtlError>
  }
}
 80124ba:	bf00      	nop
 80124bc:	bf00      	nop
 80124be:	3710      	adds	r7, #16
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}

080124c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80124ce:	2300      	movs	r3, #0
 80124d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	885b      	ldrh	r3, [r3, #2]
 80124d6:	b2da      	uxtb	r2, r3
 80124d8:	4b4c      	ldr	r3, [pc, #304]	; (801260c <USBD_SetConfig+0x148>)
 80124da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80124dc:	4b4b      	ldr	r3, [pc, #300]	; (801260c <USBD_SetConfig+0x148>)
 80124de:	781b      	ldrb	r3, [r3, #0]
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	d905      	bls.n	80124f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80124e4:	6839      	ldr	r1, [r7, #0]
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 f96c 	bl	80127c4 <USBD_CtlError>
    return USBD_FAIL;
 80124ec:	2303      	movs	r3, #3
 80124ee:	e088      	b.n	8012602 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d002      	beq.n	8012502 <USBD_SetConfig+0x3e>
 80124fc:	2b03      	cmp	r3, #3
 80124fe:	d025      	beq.n	801254c <USBD_SetConfig+0x88>
 8012500:	e071      	b.n	80125e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012502:	4b42      	ldr	r3, [pc, #264]	; (801260c <USBD_SetConfig+0x148>)
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d01c      	beq.n	8012544 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801250a:	4b40      	ldr	r3, [pc, #256]	; (801260c <USBD_SetConfig+0x148>)
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	461a      	mov	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012514:	4b3d      	ldr	r3, [pc, #244]	; (801260c <USBD_SetConfig+0x148>)
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	4619      	mov	r1, r3
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff f91e 	bl	801175c <USBD_SetClassConfig>
 8012520:	4603      	mov	r3, r0
 8012522:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012524:	7bfb      	ldrb	r3, [r7, #15]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d004      	beq.n	8012534 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801252a:	6839      	ldr	r1, [r7, #0]
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f000 f949 	bl	80127c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012532:	e065      	b.n	8012600 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 fa10 	bl	801295a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2203      	movs	r2, #3
 801253e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012542:	e05d      	b.n	8012600 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f000 fa08 	bl	801295a <USBD_CtlSendStatus>
      break;
 801254a:	e059      	b.n	8012600 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801254c:	4b2f      	ldr	r3, [pc, #188]	; (801260c <USBD_SetConfig+0x148>)
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d112      	bne.n	801257a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2202      	movs	r2, #2
 8012558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801255c:	4b2b      	ldr	r3, [pc, #172]	; (801260c <USBD_SetConfig+0x148>)
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	461a      	mov	r2, r3
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012566:	4b29      	ldr	r3, [pc, #164]	; (801260c <USBD_SetConfig+0x148>)
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	4619      	mov	r1, r3
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f7ff f911 	bl	8011794 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f000 f9f1 	bl	801295a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012578:	e042      	b.n	8012600 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801257a:	4b24      	ldr	r3, [pc, #144]	; (801260c <USBD_SetConfig+0x148>)
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	461a      	mov	r2, r3
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	429a      	cmp	r2, r3
 8012586:	d02a      	beq.n	80125de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	b2db      	uxtb	r3, r3
 801258e:	4619      	mov	r1, r3
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f7ff f8ff 	bl	8011794 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012596:	4b1d      	ldr	r3, [pc, #116]	; (801260c <USBD_SetConfig+0x148>)
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	461a      	mov	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80125a0:	4b1a      	ldr	r3, [pc, #104]	; (801260c <USBD_SetConfig+0x148>)
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	4619      	mov	r1, r3
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f7ff f8d8 	bl	801175c <USBD_SetClassConfig>
 80125ac:	4603      	mov	r3, r0
 80125ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80125b0:	7bfb      	ldrb	r3, [r7, #15]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00f      	beq.n	80125d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80125b6:	6839      	ldr	r1, [r7, #0]
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 f903 	bl	80127c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	4619      	mov	r1, r3
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f7ff f8e4 	bl	8011794 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2202      	movs	r2, #2
 80125d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80125d4:	e014      	b.n	8012600 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 f9bf 	bl	801295a <USBD_CtlSendStatus>
      break;
 80125dc:	e010      	b.n	8012600 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f000 f9bb 	bl	801295a <USBD_CtlSendStatus>
      break;
 80125e4:	e00c      	b.n	8012600 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 f8eb 	bl	80127c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80125ee:	4b07      	ldr	r3, [pc, #28]	; (801260c <USBD_SetConfig+0x148>)
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	4619      	mov	r1, r3
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f7ff f8cd 	bl	8011794 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80125fa:	2303      	movs	r3, #3
 80125fc:	73fb      	strb	r3, [r7, #15]
      break;
 80125fe:	bf00      	nop
  }

  return ret;
 8012600:	7bfb      	ldrb	r3, [r7, #15]
}
 8012602:	4618      	mov	r0, r3
 8012604:	3710      	adds	r7, #16
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	2001d27c 	.word	0x2001d27c

08012610 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	88db      	ldrh	r3, [r3, #6]
 801261e:	2b01      	cmp	r3, #1
 8012620:	d004      	beq.n	801262c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012622:	6839      	ldr	r1, [r7, #0]
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f000 f8cd 	bl	80127c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801262a:	e023      	b.n	8012674 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012632:	b2db      	uxtb	r3, r3
 8012634:	2b02      	cmp	r3, #2
 8012636:	dc02      	bgt.n	801263e <USBD_GetConfig+0x2e>
 8012638:	2b00      	cmp	r3, #0
 801263a:	dc03      	bgt.n	8012644 <USBD_GetConfig+0x34>
 801263c:	e015      	b.n	801266a <USBD_GetConfig+0x5a>
 801263e:	2b03      	cmp	r3, #3
 8012640:	d00b      	beq.n	801265a <USBD_GetConfig+0x4a>
 8012642:	e012      	b.n	801266a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2200      	movs	r2, #0
 8012648:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	3308      	adds	r3, #8
 801264e:	2201      	movs	r2, #1
 8012650:	4619      	mov	r1, r3
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 f927 	bl	80128a6 <USBD_CtlSendData>
        break;
 8012658:	e00c      	b.n	8012674 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	3304      	adds	r3, #4
 801265e:	2201      	movs	r2, #1
 8012660:	4619      	mov	r1, r3
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 f91f 	bl	80128a6 <USBD_CtlSendData>
        break;
 8012668:	e004      	b.n	8012674 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801266a:	6839      	ldr	r1, [r7, #0]
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f000 f8a9 	bl	80127c4 <USBD_CtlError>
        break;
 8012672:	bf00      	nop
}
 8012674:	bf00      	nop
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b082      	sub	sp, #8
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801268c:	b2db      	uxtb	r3, r3
 801268e:	3b01      	subs	r3, #1
 8012690:	2b02      	cmp	r3, #2
 8012692:	d81e      	bhi.n	80126d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	88db      	ldrh	r3, [r3, #6]
 8012698:	2b02      	cmp	r3, #2
 801269a:	d004      	beq.n	80126a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801269c:	6839      	ldr	r1, [r7, #0]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 f890 	bl	80127c4 <USBD_CtlError>
        break;
 80126a4:	e01a      	b.n	80126dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2201      	movs	r2, #1
 80126aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d005      	beq.n	80126c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	68db      	ldr	r3, [r3, #12]
 80126ba:	f043 0202 	orr.w	r2, r3, #2
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	330c      	adds	r3, #12
 80126c6:	2202      	movs	r2, #2
 80126c8:	4619      	mov	r1, r3
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f000 f8eb 	bl	80128a6 <USBD_CtlSendData>
      break;
 80126d0:	e004      	b.n	80126dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80126d2:	6839      	ldr	r1, [r7, #0]
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 f875 	bl	80127c4 <USBD_CtlError>
      break;
 80126da:	bf00      	nop
  }
}
 80126dc:	bf00      	nop
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	885b      	ldrh	r3, [r3, #2]
 80126f2:	2b01      	cmp	r3, #1
 80126f4:	d106      	bne.n	8012704 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2201      	movs	r2, #1
 80126fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f000 f92b 	bl	801295a <USBD_CtlSendStatus>
  }
}
 8012704:	bf00      	nop
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801271c:	b2db      	uxtb	r3, r3
 801271e:	3b01      	subs	r3, #1
 8012720:	2b02      	cmp	r3, #2
 8012722:	d80b      	bhi.n	801273c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	885b      	ldrh	r3, [r3, #2]
 8012728:	2b01      	cmp	r3, #1
 801272a:	d10c      	bne.n	8012746 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f000 f910 	bl	801295a <USBD_CtlSendStatus>
      }
      break;
 801273a:	e004      	b.n	8012746 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 f840 	bl	80127c4 <USBD_CtlError>
      break;
 8012744:	e000      	b.n	8012748 <USBD_ClrFeature+0x3c>
      break;
 8012746:	bf00      	nop
  }
}
 8012748:	bf00      	nop
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	781a      	ldrb	r2, [r3, #0]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	3301      	adds	r3, #1
 801276a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	781a      	ldrb	r2, [r3, #0]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	3301      	adds	r3, #1
 8012778:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801277a:	68f8      	ldr	r0, [r7, #12]
 801277c:	f7ff fa91 	bl	8011ca2 <SWAPBYTE>
 8012780:	4603      	mov	r3, r0
 8012782:	461a      	mov	r2, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	3301      	adds	r3, #1
 801278c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	3301      	adds	r3, #1
 8012792:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012794:	68f8      	ldr	r0, [r7, #12]
 8012796:	f7ff fa84 	bl	8011ca2 <SWAPBYTE>
 801279a:	4603      	mov	r3, r0
 801279c:	461a      	mov	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	3301      	adds	r3, #1
 80127a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	3301      	adds	r3, #1
 80127ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80127ae:	68f8      	ldr	r0, [r7, #12]
 80127b0:	f7ff fa77 	bl	8011ca2 <SWAPBYTE>
 80127b4:	4603      	mov	r3, r0
 80127b6:	461a      	mov	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	80da      	strh	r2, [r3, #6]
}
 80127bc:	bf00      	nop
 80127be:	3710      	adds	r7, #16
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}

080127c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b082      	sub	sp, #8
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80127ce:	2180      	movs	r1, #128	; 0x80
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f000 fd35 	bl	8013240 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80127d6:	2100      	movs	r1, #0
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f000 fd31 	bl	8013240 <USBD_LL_StallEP>
}
 80127de:	bf00      	nop
 80127e0:	3708      	adds	r7, #8
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}

080127e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80127e6:	b580      	push	{r7, lr}
 80127e8:	b086      	sub	sp, #24
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	60f8      	str	r0, [r7, #12]
 80127ee:	60b9      	str	r1, [r7, #8]
 80127f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80127f2:	2300      	movs	r3, #0
 80127f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d036      	beq.n	801286a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012800:	6938      	ldr	r0, [r7, #16]
 8012802:	f000 f836 	bl	8012872 <USBD_GetLen>
 8012806:	4603      	mov	r3, r0
 8012808:	3301      	adds	r3, #1
 801280a:	b29b      	uxth	r3, r3
 801280c:	005b      	lsls	r3, r3, #1
 801280e:	b29a      	uxth	r2, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012814:	7dfb      	ldrb	r3, [r7, #23]
 8012816:	68ba      	ldr	r2, [r7, #8]
 8012818:	4413      	add	r3, r2
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	7812      	ldrb	r2, [r2, #0]
 801281e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012820:	7dfb      	ldrb	r3, [r7, #23]
 8012822:	3301      	adds	r3, #1
 8012824:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012826:	7dfb      	ldrb	r3, [r7, #23]
 8012828:	68ba      	ldr	r2, [r7, #8]
 801282a:	4413      	add	r3, r2
 801282c:	2203      	movs	r2, #3
 801282e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012830:	7dfb      	ldrb	r3, [r7, #23]
 8012832:	3301      	adds	r3, #1
 8012834:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012836:	e013      	b.n	8012860 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012838:	7dfb      	ldrb	r3, [r7, #23]
 801283a:	68ba      	ldr	r2, [r7, #8]
 801283c:	4413      	add	r3, r2
 801283e:	693a      	ldr	r2, [r7, #16]
 8012840:	7812      	ldrb	r2, [r2, #0]
 8012842:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	3301      	adds	r3, #1
 8012848:	613b      	str	r3, [r7, #16]
    idx++;
 801284a:	7dfb      	ldrb	r3, [r7, #23]
 801284c:	3301      	adds	r3, #1
 801284e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012850:	7dfb      	ldrb	r3, [r7, #23]
 8012852:	68ba      	ldr	r2, [r7, #8]
 8012854:	4413      	add	r3, r2
 8012856:	2200      	movs	r2, #0
 8012858:	701a      	strb	r2, [r3, #0]
    idx++;
 801285a:	7dfb      	ldrb	r3, [r7, #23]
 801285c:	3301      	adds	r3, #1
 801285e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d1e7      	bne.n	8012838 <USBD_GetString+0x52>
 8012868:	e000      	b.n	801286c <USBD_GetString+0x86>
    return;
 801286a:	bf00      	nop
  }
}
 801286c:	3718      	adds	r7, #24
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012872:	b480      	push	{r7}
 8012874:	b085      	sub	sp, #20
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801287a:	2300      	movs	r3, #0
 801287c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012882:	e005      	b.n	8012890 <USBD_GetLen+0x1e>
  {
    len++;
 8012884:	7bfb      	ldrb	r3, [r7, #15]
 8012886:	3301      	adds	r3, #1
 8012888:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	3301      	adds	r3, #1
 801288e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d1f5      	bne.n	8012884 <USBD_GetLen+0x12>
  }

  return len;
 8012898:	7bfb      	ldrb	r3, [r7, #15]
}
 801289a:	4618      	mov	r0, r3
 801289c:	3714      	adds	r7, #20
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr

080128a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b084      	sub	sp, #16
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	60f8      	str	r0, [r7, #12]
 80128ae:	60b9      	str	r1, [r7, #8]
 80128b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2202      	movs	r2, #2
 80128b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	68ba      	ldr	r2, [r7, #8]
 80128ca:	2100      	movs	r1, #0
 80128cc:	68f8      	ldr	r0, [r7, #12]
 80128ce:	f000 fd85 	bl	80133dc <USBD_LL_Transmit>

  return USBD_OK;
 80128d2:	2300      	movs	r3, #0
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3710      	adds	r7, #16
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	68ba      	ldr	r2, [r7, #8]
 80128ec:	2100      	movs	r1, #0
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	f000 fd74 	bl	80133dc <USBD_LL_Transmit>

  return USBD_OK;
 80128f4:	2300      	movs	r3, #0
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}

080128fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80128fe:	b580      	push	{r7, lr}
 8012900:	b084      	sub	sp, #16
 8012902:	af00      	add	r7, sp, #0
 8012904:	60f8      	str	r0, [r7, #12]
 8012906:	60b9      	str	r1, [r7, #8]
 8012908:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2203      	movs	r2, #3
 801290e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	687a      	ldr	r2, [r7, #4]
 801291e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	68ba      	ldr	r2, [r7, #8]
 8012926:	2100      	movs	r1, #0
 8012928:	68f8      	ldr	r0, [r7, #12]
 801292a:	f000 fd8f 	bl	801344c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3710      	adds	r7, #16
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	68ba      	ldr	r2, [r7, #8]
 8012948:	2100      	movs	r1, #0
 801294a:	68f8      	ldr	r0, [r7, #12]
 801294c:	f000 fd7e 	bl	801344c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012950:	2300      	movs	r3, #0
}
 8012952:	4618      	mov	r0, r3
 8012954:	3710      	adds	r7, #16
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801295a:	b580      	push	{r7, lr}
 801295c:	b082      	sub	sp, #8
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2204      	movs	r2, #4
 8012966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801296a:	2300      	movs	r3, #0
 801296c:	2200      	movs	r2, #0
 801296e:	2100      	movs	r1, #0
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f000 fd33 	bl	80133dc <USBD_LL_Transmit>

  return USBD_OK;
 8012976:	2300      	movs	r3, #0
}
 8012978:	4618      	mov	r0, r3
 801297a:	3708      	adds	r7, #8
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2205      	movs	r2, #5
 801298c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012990:	2300      	movs	r3, #0
 8012992:	2200      	movs	r2, #0
 8012994:	2100      	movs	r1, #0
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f000 fd58 	bl	801344c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801299c:	2300      	movs	r3, #0
}
 801299e:	4618      	mov	r0, r3
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
	...

080129a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80129ac:	2200      	movs	r2, #0
 80129ae:	4912      	ldr	r1, [pc, #72]	; (80129f8 <MX_USB_DEVICE_Init+0x50>)
 80129b0:	4812      	ldr	r0, [pc, #72]	; (80129fc <MX_USB_DEVICE_Init+0x54>)
 80129b2:	f7fe fe65 	bl	8011680 <USBD_Init>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d001      	beq.n	80129c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80129bc:	f7ee fe5e 	bl	800167c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80129c0:	490f      	ldr	r1, [pc, #60]	; (8012a00 <MX_USB_DEVICE_Init+0x58>)
 80129c2:	480e      	ldr	r0, [pc, #56]	; (80129fc <MX_USB_DEVICE_Init+0x54>)
 80129c4:	f7fe fe8c 	bl	80116e0 <USBD_RegisterClass>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d001      	beq.n	80129d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80129ce:	f7ee fe55 	bl	800167c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80129d2:	490c      	ldr	r1, [pc, #48]	; (8012a04 <MX_USB_DEVICE_Init+0x5c>)
 80129d4:	4809      	ldr	r0, [pc, #36]	; (80129fc <MX_USB_DEVICE_Init+0x54>)
 80129d6:	f7fe fddd 	bl	8011594 <USBD_CDC_RegisterInterface>
 80129da:	4603      	mov	r3, r0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d001      	beq.n	80129e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80129e0:	f7ee fe4c 	bl	800167c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80129e4:	4805      	ldr	r0, [pc, #20]	; (80129fc <MX_USB_DEVICE_Init+0x54>)
 80129e6:	f7fe fea2 	bl	801172e <USBD_Start>
 80129ea:	4603      	mov	r3, r0
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d001      	beq.n	80129f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80129f0:	f7ee fe44 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80129f4:	bf00      	nop
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	2001c54c 	.word	0x2001c54c
 80129fc:	2001d280 	.word	0x2001d280
 8012a00:	2001c434 	.word	0x2001c434
 8012a04:	2001c538 	.word	0x2001c538

08012a08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	4905      	ldr	r1, [pc, #20]	; (8012a24 <CDC_Init_FS+0x1c>)
 8012a10:	4805      	ldr	r0, [pc, #20]	; (8012a28 <CDC_Init_FS+0x20>)
 8012a12:	f7fe fdd4 	bl	80115be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012a16:	4905      	ldr	r1, [pc, #20]	; (8012a2c <CDC_Init_FS+0x24>)
 8012a18:	4803      	ldr	r0, [pc, #12]	; (8012a28 <CDC_Init_FS+0x20>)
 8012a1a:	f7fe fdee 	bl	80115fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	2001dd50 	.word	0x2001dd50
 8012a28:	2001d280 	.word	0x2001d280
 8012a2c:	2001d550 	.word	0x2001d550

08012a30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012a30:	b480      	push	{r7}
 8012a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012a34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	6039      	str	r1, [r7, #0]
 8012a4a:	71fb      	strb	r3, [r7, #7]
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012a50:	79fb      	ldrb	r3, [r7, #7]
 8012a52:	2b23      	cmp	r3, #35	; 0x23
 8012a54:	d84a      	bhi.n	8012aec <CDC_Control_FS+0xac>
 8012a56:	a201      	add	r2, pc, #4	; (adr r2, 8012a5c <CDC_Control_FS+0x1c>)
 8012a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a5c:	08012aed 	.word	0x08012aed
 8012a60:	08012aed 	.word	0x08012aed
 8012a64:	08012aed 	.word	0x08012aed
 8012a68:	08012aed 	.word	0x08012aed
 8012a6c:	08012aed 	.word	0x08012aed
 8012a70:	08012aed 	.word	0x08012aed
 8012a74:	08012aed 	.word	0x08012aed
 8012a78:	08012aed 	.word	0x08012aed
 8012a7c:	08012aed 	.word	0x08012aed
 8012a80:	08012aed 	.word	0x08012aed
 8012a84:	08012aed 	.word	0x08012aed
 8012a88:	08012aed 	.word	0x08012aed
 8012a8c:	08012aed 	.word	0x08012aed
 8012a90:	08012aed 	.word	0x08012aed
 8012a94:	08012aed 	.word	0x08012aed
 8012a98:	08012aed 	.word	0x08012aed
 8012a9c:	08012aed 	.word	0x08012aed
 8012aa0:	08012aed 	.word	0x08012aed
 8012aa4:	08012aed 	.word	0x08012aed
 8012aa8:	08012aed 	.word	0x08012aed
 8012aac:	08012aed 	.word	0x08012aed
 8012ab0:	08012aed 	.word	0x08012aed
 8012ab4:	08012aed 	.word	0x08012aed
 8012ab8:	08012aed 	.word	0x08012aed
 8012abc:	08012aed 	.word	0x08012aed
 8012ac0:	08012aed 	.word	0x08012aed
 8012ac4:	08012aed 	.word	0x08012aed
 8012ac8:	08012aed 	.word	0x08012aed
 8012acc:	08012aed 	.word	0x08012aed
 8012ad0:	08012aed 	.word	0x08012aed
 8012ad4:	08012aed 	.word	0x08012aed
 8012ad8:	08012aed 	.word	0x08012aed
 8012adc:	08012aed 	.word	0x08012aed
 8012ae0:	08012aed 	.word	0x08012aed
 8012ae4:	08012aed 	.word	0x08012aed
 8012ae8:	08012aed 	.word	0x08012aed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012aec:	bf00      	nop
  }

  return (USBD_OK);
 8012aee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	370c      	adds	r7, #12
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr

08012afc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012b06:	6879      	ldr	r1, [r7, #4]
 8012b08:	4805      	ldr	r0, [pc, #20]	; (8012b20 <CDC_Receive_FS+0x24>)
 8012b0a:	f7fe fd76 	bl	80115fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012b0e:	4804      	ldr	r0, [pc, #16]	; (8012b20 <CDC_Receive_FS+0x24>)
 8012b10:	f7fe fd8c 	bl	801162c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012b14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	2001d280 	.word	0x2001d280

08012b24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012b24:	b480      	push	{r7}
 8012b26:	b087      	sub	sp, #28
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	60f8      	str	r0, [r7, #12]
 8012b2c:	60b9      	str	r1, [r7, #8]
 8012b2e:	4613      	mov	r3, r2
 8012b30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012b32:	2300      	movs	r3, #0
 8012b34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	371c      	adds	r7, #28
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr
	...

08012b48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	4603      	mov	r3, r0
 8012b50:	6039      	str	r1, [r7, #0]
 8012b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	2212      	movs	r2, #18
 8012b58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012b5a:	4b03      	ldr	r3, [pc, #12]	; (8012b68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	370c      	adds	r7, #12
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr
 8012b68:	2001c56c 	.word	0x2001c56c

08012b6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	4603      	mov	r3, r0
 8012b74:	6039      	str	r1, [r7, #0]
 8012b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	2204      	movs	r2, #4
 8012b7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012b7e:	4b03      	ldr	r3, [pc, #12]	; (8012b8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	370c      	adds	r7, #12
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr
 8012b8c:	2001c58c 	.word	0x2001c58c

08012b90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	4603      	mov	r3, r0
 8012b98:	6039      	str	r1, [r7, #0]
 8012b9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012b9c:	79fb      	ldrb	r3, [r7, #7]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d105      	bne.n	8012bae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012ba2:	683a      	ldr	r2, [r7, #0]
 8012ba4:	4907      	ldr	r1, [pc, #28]	; (8012bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012ba6:	4808      	ldr	r0, [pc, #32]	; (8012bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012ba8:	f7ff fe1d 	bl	80127e6 <USBD_GetString>
 8012bac:	e004      	b.n	8012bb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012bae:	683a      	ldr	r2, [r7, #0]
 8012bb0:	4904      	ldr	r1, [pc, #16]	; (8012bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012bb2:	4805      	ldr	r0, [pc, #20]	; (8012bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012bb4:	f7ff fe17 	bl	80127e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012bb8:	4b02      	ldr	r3, [pc, #8]	; (8012bc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	2001e550 	.word	0x2001e550
 8012bc8:	0801456c 	.word	0x0801456c

08012bcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	6039      	str	r1, [r7, #0]
 8012bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012bd8:	683a      	ldr	r2, [r7, #0]
 8012bda:	4904      	ldr	r1, [pc, #16]	; (8012bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012bdc:	4804      	ldr	r0, [pc, #16]	; (8012bf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012bde:	f7ff fe02 	bl	80127e6 <USBD_GetString>
  return USBD_StrDesc;
 8012be2:	4b02      	ldr	r3, [pc, #8]	; (8012bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3708      	adds	r7, #8
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}
 8012bec:	2001e550 	.word	0x2001e550
 8012bf0:	08014584 	.word	0x08014584

08012bf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	6039      	str	r1, [r7, #0]
 8012bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	221a      	movs	r2, #26
 8012c04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012c06:	f000 f855 	bl	8012cb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012c0a:	4b02      	ldr	r3, [pc, #8]	; (8012c14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	2001c590 	.word	0x2001c590

08012c18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	4603      	mov	r3, r0
 8012c20:	6039      	str	r1, [r7, #0]
 8012c22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012c24:	79fb      	ldrb	r3, [r7, #7]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d105      	bne.n	8012c36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c2a:	683a      	ldr	r2, [r7, #0]
 8012c2c:	4907      	ldr	r1, [pc, #28]	; (8012c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c2e:	4808      	ldr	r0, [pc, #32]	; (8012c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c30:	f7ff fdd9 	bl	80127e6 <USBD_GetString>
 8012c34:	e004      	b.n	8012c40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c36:	683a      	ldr	r2, [r7, #0]
 8012c38:	4904      	ldr	r1, [pc, #16]	; (8012c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c3a:	4805      	ldr	r0, [pc, #20]	; (8012c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c3c:	f7ff fdd3 	bl	80127e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c40:	4b02      	ldr	r3, [pc, #8]	; (8012c4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3708      	adds	r7, #8
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	2001e550 	.word	0x2001e550
 8012c50:	08014598 	.word	0x08014598

08012c54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	6039      	str	r1, [r7, #0]
 8012c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c60:	79fb      	ldrb	r3, [r7, #7]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d105      	bne.n	8012c72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012c66:	683a      	ldr	r2, [r7, #0]
 8012c68:	4907      	ldr	r1, [pc, #28]	; (8012c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012c6a:	4808      	ldr	r0, [pc, #32]	; (8012c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012c6c:	f7ff fdbb 	bl	80127e6 <USBD_GetString>
 8012c70:	e004      	b.n	8012c7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012c72:	683a      	ldr	r2, [r7, #0]
 8012c74:	4904      	ldr	r1, [pc, #16]	; (8012c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012c76:	4805      	ldr	r0, [pc, #20]	; (8012c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012c78:	f7ff fdb5 	bl	80127e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c7c:	4b02      	ldr	r3, [pc, #8]	; (8012c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3708      	adds	r7, #8
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	2001e550 	.word	0x2001e550
 8012c8c:	080145a4 	.word	0x080145a4

08012c90 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c90:	b480      	push	{r7}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	4603      	mov	r3, r0
 8012c98:	6039      	str	r1, [r7, #0]
 8012c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	220c      	movs	r2, #12
 8012ca0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012ca2:	4b03      	ldr	r3, [pc, #12]	; (8012cb0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	370c      	adds	r7, #12
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr
 8012cb0:	2001c580 	.word	0x2001c580

08012cb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b084      	sub	sp, #16
 8012cb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012cba:	4b0f      	ldr	r3, [pc, #60]	; (8012cf8 <Get_SerialNum+0x44>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012cc0:	4b0e      	ldr	r3, [pc, #56]	; (8012cfc <Get_SerialNum+0x48>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012cc6:	4b0e      	ldr	r3, [pc, #56]	; (8012d00 <Get_SerialNum+0x4c>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4413      	add	r3, r2
 8012cd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d009      	beq.n	8012cee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012cda:	2208      	movs	r2, #8
 8012cdc:	4909      	ldr	r1, [pc, #36]	; (8012d04 <Get_SerialNum+0x50>)
 8012cde:	68f8      	ldr	r0, [r7, #12]
 8012ce0:	f000 f814 	bl	8012d0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012ce4:	2204      	movs	r2, #4
 8012ce6:	4908      	ldr	r1, [pc, #32]	; (8012d08 <Get_SerialNum+0x54>)
 8012ce8:	68b8      	ldr	r0, [r7, #8]
 8012cea:	f000 f80f 	bl	8012d0c <IntToUnicode>
  }
}
 8012cee:	bf00      	nop
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	1fff7590 	.word	0x1fff7590
 8012cfc:	1fff7594 	.word	0x1fff7594
 8012d00:	1fff7598 	.word	0x1fff7598
 8012d04:	2001c592 	.word	0x2001c592
 8012d08:	2001c5a2 	.word	0x2001c5a2

08012d0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b087      	sub	sp, #28
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	4613      	mov	r3, r2
 8012d18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012d1e:	2300      	movs	r3, #0
 8012d20:	75fb      	strb	r3, [r7, #23]
 8012d22:	e027      	b.n	8012d74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	0f1b      	lsrs	r3, r3, #28
 8012d28:	2b09      	cmp	r3, #9
 8012d2a:	d80b      	bhi.n	8012d44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	0f1b      	lsrs	r3, r3, #28
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	7dfb      	ldrb	r3, [r7, #23]
 8012d34:	005b      	lsls	r3, r3, #1
 8012d36:	4619      	mov	r1, r3
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	440b      	add	r3, r1
 8012d3c:	3230      	adds	r2, #48	; 0x30
 8012d3e:	b2d2      	uxtb	r2, r2
 8012d40:	701a      	strb	r2, [r3, #0]
 8012d42:	e00a      	b.n	8012d5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	0f1b      	lsrs	r3, r3, #28
 8012d48:	b2da      	uxtb	r2, r3
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
 8012d4c:	005b      	lsls	r3, r3, #1
 8012d4e:	4619      	mov	r1, r3
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	440b      	add	r3, r1
 8012d54:	3237      	adds	r2, #55	; 0x37
 8012d56:	b2d2      	uxtb	r2, r2
 8012d58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	011b      	lsls	r3, r3, #4
 8012d5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012d60:	7dfb      	ldrb	r3, [r7, #23]
 8012d62:	005b      	lsls	r3, r3, #1
 8012d64:	3301      	adds	r3, #1
 8012d66:	68ba      	ldr	r2, [r7, #8]
 8012d68:	4413      	add	r3, r2
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012d6e:	7dfb      	ldrb	r3, [r7, #23]
 8012d70:	3301      	adds	r3, #1
 8012d72:	75fb      	strb	r3, [r7, #23]
 8012d74:	7dfa      	ldrb	r2, [r7, #23]
 8012d76:	79fb      	ldrb	r3, [r7, #7]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d3d3      	bcc.n	8012d24 <IntToUnicode+0x18>
  }
}
 8012d7c:	bf00      	nop
 8012d7e:	bf00      	nop
 8012d80:	371c      	adds	r7, #28
 8012d82:	46bd      	mov	sp, r7
 8012d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d88:	4770      	bx	lr
	...

08012d8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b08a      	sub	sp, #40	; 0x28
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012d94:	f107 0314 	add.w	r3, r7, #20
 8012d98:	2200      	movs	r2, #0
 8012d9a:	601a      	str	r2, [r3, #0]
 8012d9c:	605a      	str	r2, [r3, #4]
 8012d9e:	609a      	str	r2, [r3, #8]
 8012da0:	60da      	str	r2, [r3, #12]
 8012da2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012dac:	d14e      	bne.n	8012e4c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012dae:	4b29      	ldr	r3, [pc, #164]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012db2:	4a28      	ldr	r2, [pc, #160]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012db4:	f043 0301 	orr.w	r3, r3, #1
 8012db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012dba:	4b26      	ldr	r3, [pc, #152]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dbe:	f003 0301 	and.w	r3, r3, #1
 8012dc2:	613b      	str	r3, [r7, #16]
 8012dc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8012dc6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012dcc:	2302      	movs	r3, #2
 8012dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012dd4:	2303      	movs	r3, #3
 8012dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012dd8:	230a      	movs	r3, #10
 8012dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ddc:	f107 0314 	add.w	r3, r7, #20
 8012de0:	4619      	mov	r1, r3
 8012de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012de6:	f7f5 f9e3 	bl	80081b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012dea:	4b1a      	ldr	r3, [pc, #104]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dee:	4a19      	ldr	r2, [pc, #100]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012df6:	4b17      	ldr	r3, [pc, #92]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012dfe:	60fb      	str	r3, [r7, #12]
 8012e00:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012e02:	4b14      	ldr	r3, [pc, #80]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d114      	bne.n	8012e38 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012e0e:	4b11      	ldr	r3, [pc, #68]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e12:	4a10      	ldr	r2, [pc, #64]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e18:	6593      	str	r3, [r2, #88]	; 0x58
 8012e1a:	4b0e      	ldr	r3, [pc, #56]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e22:	60bb      	str	r3, [r7, #8]
 8012e24:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8012e26:	f7f7 fdd1 	bl	800a9cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012e2a:	4b0a      	ldr	r3, [pc, #40]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e2e:	4a09      	ldr	r2, [pc, #36]	; (8012e54 <HAL_PCD_MspInit+0xc8>)
 8012e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012e34:	6593      	str	r3, [r2, #88]	; 0x58
 8012e36:	e001      	b.n	8012e3c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012e38:	f7f7 fdc8 	bl	800a9cc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	2100      	movs	r1, #0
 8012e40:	2043      	movs	r0, #67	; 0x43
 8012e42:	f7f4 fe94 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012e46:	2043      	movs	r0, #67	; 0x43
 8012e48:	f7f4 fead 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012e4c:	bf00      	nop
 8012e4e:	3728      	adds	r7, #40	; 0x28
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	40021000 	.word	0x40021000

08012e58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	4610      	mov	r0, r2
 8012e70:	f7fe fca8 	bl	80117c4 <USBD_LL_SetupStage>
}
 8012e74:	bf00      	nop
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	460b      	mov	r3, r1
 8012e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012e8e:	78fa      	ldrb	r2, [r7, #3]
 8012e90:	6879      	ldr	r1, [r7, #4]
 8012e92:	4613      	mov	r3, r2
 8012e94:	00db      	lsls	r3, r3, #3
 8012e96:	4413      	add	r3, r2
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	440b      	add	r3, r1
 8012e9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012ea0:	681a      	ldr	r2, [r3, #0]
 8012ea2:	78fb      	ldrb	r3, [r7, #3]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	f7fe fce2 	bl	801186e <USBD_LL_DataOutStage>
}
 8012eaa:	bf00      	nop
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b082      	sub	sp, #8
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
 8012eba:	460b      	mov	r3, r1
 8012ebc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012ec4:	78fa      	ldrb	r2, [r7, #3]
 8012ec6:	6879      	ldr	r1, [r7, #4]
 8012ec8:	4613      	mov	r3, r2
 8012eca:	00db      	lsls	r3, r3, #3
 8012ecc:	4413      	add	r3, r2
 8012ece:	009b      	lsls	r3, r3, #2
 8012ed0:	440b      	add	r3, r1
 8012ed2:	334c      	adds	r3, #76	; 0x4c
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	78fb      	ldrb	r3, [r7, #3]
 8012ed8:	4619      	mov	r1, r3
 8012eda:	f7fe fd2b 	bl	8011934 <USBD_LL_DataInStage>
}
 8012ede:	bf00      	nop
 8012ee0:	3708      	adds	r7, #8
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}

08012ee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ee6:	b580      	push	{r7, lr}
 8012ee8:	b082      	sub	sp, #8
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fe fe3f 	bl	8011b78 <USBD_LL_SOF>
}
 8012efa:	bf00      	nop
 8012efc:	3708      	adds	r7, #8
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}

08012f02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f02:	b580      	push	{r7, lr}
 8012f04:	b084      	sub	sp, #16
 8012f06:	af00      	add	r7, sp, #0
 8012f08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	2b02      	cmp	r3, #2
 8012f14:	d001      	beq.n	8012f1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012f16:	f7ee fbb1 	bl	800167c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f20:	7bfa      	ldrb	r2, [r7, #15]
 8012f22:	4611      	mov	r1, r2
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fe fde9 	bl	8011afc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7fe fd95 	bl	8011a60 <USBD_LL_Reset>
}
 8012f36:	bf00      	nop
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
	...

08012f40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	6812      	ldr	r2, [r2, #0]
 8012f56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012f5a:	f043 0301 	orr.w	r3, r3, #1
 8012f5e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7fe fdd8 	bl	8011b1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6a1b      	ldr	r3, [r3, #32]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d005      	beq.n	8012f80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012f74:	4b04      	ldr	r3, [pc, #16]	; (8012f88 <HAL_PCD_SuspendCallback+0x48>)
 8012f76:	691b      	ldr	r3, [r3, #16]
 8012f78:	4a03      	ldr	r2, [pc, #12]	; (8012f88 <HAL_PCD_SuspendCallback+0x48>)
 8012f7a:	f043 0306 	orr.w	r3, r3, #6
 8012f7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012f80:	bf00      	nop
 8012f82:	3708      	adds	r7, #8
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	e000ed00 	.word	0xe000ed00

08012f8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	6812      	ldr	r2, [r2, #0]
 8012fa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012fa6:	f023 0301 	bic.w	r3, r3, #1
 8012faa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6a1b      	ldr	r3, [r3, #32]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d007      	beq.n	8012fc4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012fb4:	4b08      	ldr	r3, [pc, #32]	; (8012fd8 <HAL_PCD_ResumeCallback+0x4c>)
 8012fb6:	691b      	ldr	r3, [r3, #16]
 8012fb8:	4a07      	ldr	r2, [pc, #28]	; (8012fd8 <HAL_PCD_ResumeCallback+0x4c>)
 8012fba:	f023 0306 	bic.w	r3, r3, #6
 8012fbe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012fc0:	f000 faf6 	bl	80135b0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7fe fdbc 	bl	8011b48 <USBD_LL_Resume>
}
 8012fd0:	bf00      	nop
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	e000ed00 	.word	0xe000ed00

08012fdc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fee:	78fa      	ldrb	r2, [r7, #3]
 8012ff0:	4611      	mov	r1, r2
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fe fe08 	bl	8011c08 <USBD_LL_IsoOUTIncomplete>
}
 8012ff8:	bf00      	nop
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	460b      	mov	r3, r1
 801300a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013012:	78fa      	ldrb	r2, [r7, #3]
 8013014:	4611      	mov	r1, r2
 8013016:	4618      	mov	r0, r3
 8013018:	f7fe fdd0 	bl	8011bbc <USBD_LL_IsoINIncomplete>
}
 801301c:	bf00      	nop
 801301e:	3708      	adds	r7, #8
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013032:	4618      	mov	r0, r3
 8013034:	f7fe fe0e 	bl	8011c54 <USBD_LL_DevConnected>
}
 8013038:	bf00      	nop
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}

08013040 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801304e:	4618      	mov	r0, r3
 8013050:	f7fe fe0b 	bl	8011c6a <USBD_LL_DevDisconnected>
}
 8013054:	bf00      	nop
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d13c      	bne.n	80130e6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801306c:	4a20      	ldr	r2, [pc, #128]	; (80130f0 <USBD_LL_Init+0x94>)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	4a1e      	ldr	r2, [pc, #120]	; (80130f0 <USBD_LL_Init+0x94>)
 8013078:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801307c:	4b1c      	ldr	r3, [pc, #112]	; (80130f0 <USBD_LL_Init+0x94>)
 801307e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013082:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8013084:	4b1a      	ldr	r3, [pc, #104]	; (80130f0 <USBD_LL_Init+0x94>)
 8013086:	2206      	movs	r2, #6
 8013088:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801308a:	4b19      	ldr	r3, [pc, #100]	; (80130f0 <USBD_LL_Init+0x94>)
 801308c:	2202      	movs	r2, #2
 801308e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013090:	4b17      	ldr	r3, [pc, #92]	; (80130f0 <USBD_LL_Init+0x94>)
 8013092:	2202      	movs	r2, #2
 8013094:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013096:	4b16      	ldr	r3, [pc, #88]	; (80130f0 <USBD_LL_Init+0x94>)
 8013098:	2200      	movs	r2, #0
 801309a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801309c:	4b14      	ldr	r3, [pc, #80]	; (80130f0 <USBD_LL_Init+0x94>)
 801309e:	2200      	movs	r2, #0
 80130a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80130a2:	4b13      	ldr	r3, [pc, #76]	; (80130f0 <USBD_LL_Init+0x94>)
 80130a4:	2200      	movs	r2, #0
 80130a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80130a8:	4b11      	ldr	r3, [pc, #68]	; (80130f0 <USBD_LL_Init+0x94>)
 80130aa:	2200      	movs	r2, #0
 80130ac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80130ae:	4b10      	ldr	r3, [pc, #64]	; (80130f0 <USBD_LL_Init+0x94>)
 80130b0:	2200      	movs	r2, #0
 80130b2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80130b4:	4b0e      	ldr	r3, [pc, #56]	; (80130f0 <USBD_LL_Init+0x94>)
 80130b6:	2200      	movs	r2, #0
 80130b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80130ba:	480d      	ldr	r0, [pc, #52]	; (80130f0 <USBD_LL_Init+0x94>)
 80130bc:	f7f6 fa53 	bl	8009566 <HAL_PCD_Init>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d001      	beq.n	80130ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80130c6:	f7ee fad9 	bl	800167c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80130ca:	2180      	movs	r1, #128	; 0x80
 80130cc:	4808      	ldr	r0, [pc, #32]	; (80130f0 <USBD_LL_Init+0x94>)
 80130ce:	f7f7 fbd4 	bl	800a87a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80130d2:	2240      	movs	r2, #64	; 0x40
 80130d4:	2100      	movs	r1, #0
 80130d6:	4806      	ldr	r0, [pc, #24]	; (80130f0 <USBD_LL_Init+0x94>)
 80130d8:	f7f7 fb88 	bl	800a7ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80130dc:	2280      	movs	r2, #128	; 0x80
 80130de:	2101      	movs	r1, #1
 80130e0:	4803      	ldr	r0, [pc, #12]	; (80130f0 <USBD_LL_Init+0x94>)
 80130e2:	f7f7 fb83 	bl	800a7ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80130e6:	2300      	movs	r3, #0
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3708      	adds	r7, #8
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}
 80130f0:	2001e750 	.word	0x2001e750

080130f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130fc:	2300      	movs	r3, #0
 80130fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013100:	2300      	movs	r3, #0
 8013102:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801310a:	4618      	mov	r0, r3
 801310c:	f7f6 fb4f 	bl	80097ae <HAL_PCD_Start>
 8013110:	4603      	mov	r3, r0
 8013112:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013114:	7bbb      	ldrb	r3, [r7, #14]
 8013116:	2b03      	cmp	r3, #3
 8013118:	d816      	bhi.n	8013148 <USBD_LL_Start+0x54>
 801311a:	a201      	add	r2, pc, #4	; (adr r2, 8013120 <USBD_LL_Start+0x2c>)
 801311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013120:	08013131 	.word	0x08013131
 8013124:	08013137 	.word	0x08013137
 8013128:	0801313d 	.word	0x0801313d
 801312c:	08013143 	.word	0x08013143
    case HAL_OK :
      usb_status = USBD_OK;
 8013130:	2300      	movs	r3, #0
 8013132:	73fb      	strb	r3, [r7, #15]
    break;
 8013134:	e00b      	b.n	801314e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013136:	2303      	movs	r3, #3
 8013138:	73fb      	strb	r3, [r7, #15]
    break;
 801313a:	e008      	b.n	801314e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801313c:	2301      	movs	r3, #1
 801313e:	73fb      	strb	r3, [r7, #15]
    break;
 8013140:	e005      	b.n	801314e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013142:	2303      	movs	r3, #3
 8013144:	73fb      	strb	r3, [r7, #15]
    break;
 8013146:	e002      	b.n	801314e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8013148:	2303      	movs	r3, #3
 801314a:	73fb      	strb	r3, [r7, #15]
    break;
 801314c:	bf00      	nop
  }
  return usb_status;
 801314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013150:	4618      	mov	r0, r3
 8013152:	3710      	adds	r7, #16
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b084      	sub	sp, #16
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	4608      	mov	r0, r1
 8013162:	4611      	mov	r1, r2
 8013164:	461a      	mov	r2, r3
 8013166:	4603      	mov	r3, r0
 8013168:	70fb      	strb	r3, [r7, #3]
 801316a:	460b      	mov	r3, r1
 801316c:	70bb      	strb	r3, [r7, #2]
 801316e:	4613      	mov	r3, r2
 8013170:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013172:	2300      	movs	r3, #0
 8013174:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013176:	2300      	movs	r3, #0
 8013178:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013180:	78bb      	ldrb	r3, [r7, #2]
 8013182:	883a      	ldrh	r2, [r7, #0]
 8013184:	78f9      	ldrb	r1, [r7, #3]
 8013186:	f7f6 fff9 	bl	800a17c <HAL_PCD_EP_Open>
 801318a:	4603      	mov	r3, r0
 801318c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801318e:	7bbb      	ldrb	r3, [r7, #14]
 8013190:	2b03      	cmp	r3, #3
 8013192:	d817      	bhi.n	80131c4 <USBD_LL_OpenEP+0x6c>
 8013194:	a201      	add	r2, pc, #4	; (adr r2, 801319c <USBD_LL_OpenEP+0x44>)
 8013196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801319a:	bf00      	nop
 801319c:	080131ad 	.word	0x080131ad
 80131a0:	080131b3 	.word	0x080131b3
 80131a4:	080131b9 	.word	0x080131b9
 80131a8:	080131bf 	.word	0x080131bf
    case HAL_OK :
      usb_status = USBD_OK;
 80131ac:	2300      	movs	r3, #0
 80131ae:	73fb      	strb	r3, [r7, #15]
    break;
 80131b0:	e00b      	b.n	80131ca <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80131b2:	2303      	movs	r3, #3
 80131b4:	73fb      	strb	r3, [r7, #15]
    break;
 80131b6:	e008      	b.n	80131ca <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80131b8:	2301      	movs	r3, #1
 80131ba:	73fb      	strb	r3, [r7, #15]
    break;
 80131bc:	e005      	b.n	80131ca <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80131be:	2303      	movs	r3, #3
 80131c0:	73fb      	strb	r3, [r7, #15]
    break;
 80131c2:	e002      	b.n	80131ca <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80131c4:	2303      	movs	r3, #3
 80131c6:	73fb      	strb	r3, [r7, #15]
    break;
 80131c8:	bf00      	nop
  }
  return usb_status;
 80131ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3710      	adds	r7, #16
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	460b      	mov	r3, r1
 80131de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131e0:	2300      	movs	r3, #0
 80131e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131e4:	2300      	movs	r3, #0
 80131e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80131ee:	78fa      	ldrb	r2, [r7, #3]
 80131f0:	4611      	mov	r1, r2
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7f7 f82a 	bl	800a24c <HAL_PCD_EP_Close>
 80131f8:	4603      	mov	r3, r0
 80131fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80131fc:	7bbb      	ldrb	r3, [r7, #14]
 80131fe:	2b03      	cmp	r3, #3
 8013200:	d816      	bhi.n	8013230 <USBD_LL_CloseEP+0x5c>
 8013202:	a201      	add	r2, pc, #4	; (adr r2, 8013208 <USBD_LL_CloseEP+0x34>)
 8013204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013208:	08013219 	.word	0x08013219
 801320c:	0801321f 	.word	0x0801321f
 8013210:	08013225 	.word	0x08013225
 8013214:	0801322b 	.word	0x0801322b
    case HAL_OK :
      usb_status = USBD_OK;
 8013218:	2300      	movs	r3, #0
 801321a:	73fb      	strb	r3, [r7, #15]
    break;
 801321c:	e00b      	b.n	8013236 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801321e:	2303      	movs	r3, #3
 8013220:	73fb      	strb	r3, [r7, #15]
    break;
 8013222:	e008      	b.n	8013236 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013224:	2301      	movs	r3, #1
 8013226:	73fb      	strb	r3, [r7, #15]
    break;
 8013228:	e005      	b.n	8013236 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801322a:	2303      	movs	r3, #3
 801322c:	73fb      	strb	r3, [r7, #15]
    break;
 801322e:	e002      	b.n	8013236 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013230:	2303      	movs	r3, #3
 8013232:	73fb      	strb	r3, [r7, #15]
    break;
 8013234:	bf00      	nop
  }
  return usb_status;
 8013236:	7bfb      	ldrb	r3, [r7, #15]
}
 8013238:	4618      	mov	r0, r3
 801323a:	3710      	adds	r7, #16
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b084      	sub	sp, #16
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	460b      	mov	r3, r1
 801324a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801324c:	2300      	movs	r3, #0
 801324e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013250:	2300      	movs	r3, #0
 8013252:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801325a:	78fa      	ldrb	r2, [r7, #3]
 801325c:	4611      	mov	r1, r2
 801325e:	4618      	mov	r0, r3
 8013260:	f7f7 f8d1 	bl	800a406 <HAL_PCD_EP_SetStall>
 8013264:	4603      	mov	r3, r0
 8013266:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013268:	7bbb      	ldrb	r3, [r7, #14]
 801326a:	2b03      	cmp	r3, #3
 801326c:	d816      	bhi.n	801329c <USBD_LL_StallEP+0x5c>
 801326e:	a201      	add	r2, pc, #4	; (adr r2, 8013274 <USBD_LL_StallEP+0x34>)
 8013270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013274:	08013285 	.word	0x08013285
 8013278:	0801328b 	.word	0x0801328b
 801327c:	08013291 	.word	0x08013291
 8013280:	08013297 	.word	0x08013297
    case HAL_OK :
      usb_status = USBD_OK;
 8013284:	2300      	movs	r3, #0
 8013286:	73fb      	strb	r3, [r7, #15]
    break;
 8013288:	e00b      	b.n	80132a2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801328a:	2303      	movs	r3, #3
 801328c:	73fb      	strb	r3, [r7, #15]
    break;
 801328e:	e008      	b.n	80132a2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013290:	2301      	movs	r3, #1
 8013292:	73fb      	strb	r3, [r7, #15]
    break;
 8013294:	e005      	b.n	80132a2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013296:	2303      	movs	r3, #3
 8013298:	73fb      	strb	r3, [r7, #15]
    break;
 801329a:	e002      	b.n	80132a2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801329c:	2303      	movs	r3, #3
 801329e:	73fb      	strb	r3, [r7, #15]
    break;
 80132a0:	bf00      	nop
  }
  return usb_status;
 80132a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3710      	adds	r7, #16
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b084      	sub	sp, #16
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	460b      	mov	r3, r1
 80132b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132b8:	2300      	movs	r3, #0
 80132ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132bc:	2300      	movs	r3, #0
 80132be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132c6:	78fa      	ldrb	r2, [r7, #3]
 80132c8:	4611      	mov	r1, r2
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7f7 f8fd 	bl	800a4ca <HAL_PCD_EP_ClrStall>
 80132d0:	4603      	mov	r3, r0
 80132d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80132d4:	7bbb      	ldrb	r3, [r7, #14]
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d816      	bhi.n	8013308 <USBD_LL_ClearStallEP+0x5c>
 80132da:	a201      	add	r2, pc, #4	; (adr r2, 80132e0 <USBD_LL_ClearStallEP+0x34>)
 80132dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132e0:	080132f1 	.word	0x080132f1
 80132e4:	080132f7 	.word	0x080132f7
 80132e8:	080132fd 	.word	0x080132fd
 80132ec:	08013303 	.word	0x08013303
    case HAL_OK :
      usb_status = USBD_OK;
 80132f0:	2300      	movs	r3, #0
 80132f2:	73fb      	strb	r3, [r7, #15]
    break;
 80132f4:	e00b      	b.n	801330e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80132f6:	2303      	movs	r3, #3
 80132f8:	73fb      	strb	r3, [r7, #15]
    break;
 80132fa:	e008      	b.n	801330e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80132fc:	2301      	movs	r3, #1
 80132fe:	73fb      	strb	r3, [r7, #15]
    break;
 8013300:	e005      	b.n	801330e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013302:	2303      	movs	r3, #3
 8013304:	73fb      	strb	r3, [r7, #15]
    break;
 8013306:	e002      	b.n	801330e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013308:	2303      	movs	r3, #3
 801330a:	73fb      	strb	r3, [r7, #15]
    break;
 801330c:	bf00      	nop
  }
  return usb_status;
 801330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3710      	adds	r7, #16
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	460b      	mov	r3, r1
 8013322:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801332a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801332c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013330:	2b00      	cmp	r3, #0
 8013332:	da0b      	bge.n	801334c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013334:	78fb      	ldrb	r3, [r7, #3]
 8013336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801333a:	68f9      	ldr	r1, [r7, #12]
 801333c:	4613      	mov	r3, r2
 801333e:	00db      	lsls	r3, r3, #3
 8013340:	4413      	add	r3, r2
 8013342:	009b      	lsls	r3, r3, #2
 8013344:	440b      	add	r3, r1
 8013346:	333e      	adds	r3, #62	; 0x3e
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	e00b      	b.n	8013364 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801334c:	78fb      	ldrb	r3, [r7, #3]
 801334e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013352:	68f9      	ldr	r1, [r7, #12]
 8013354:	4613      	mov	r3, r2
 8013356:	00db      	lsls	r3, r3, #3
 8013358:	4413      	add	r3, r2
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	440b      	add	r3, r1
 801335e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013362:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013364:	4618      	mov	r0, r3
 8013366:	3714      	adds	r7, #20
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr

08013370 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	460b      	mov	r3, r1
 801337a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801337c:	2300      	movs	r3, #0
 801337e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013380:	2300      	movs	r3, #0
 8013382:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801338a:	78fa      	ldrb	r2, [r7, #3]
 801338c:	4611      	mov	r1, r2
 801338e:	4618      	mov	r0, r3
 8013390:	f7f6 fecf 	bl	800a132 <HAL_PCD_SetAddress>
 8013394:	4603      	mov	r3, r0
 8013396:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013398:	7bbb      	ldrb	r3, [r7, #14]
 801339a:	2b03      	cmp	r3, #3
 801339c:	d816      	bhi.n	80133cc <USBD_LL_SetUSBAddress+0x5c>
 801339e:	a201      	add	r2, pc, #4	; (adr r2, 80133a4 <USBD_LL_SetUSBAddress+0x34>)
 80133a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133a4:	080133b5 	.word	0x080133b5
 80133a8:	080133bb 	.word	0x080133bb
 80133ac:	080133c1 	.word	0x080133c1
 80133b0:	080133c7 	.word	0x080133c7
    case HAL_OK :
      usb_status = USBD_OK;
 80133b4:	2300      	movs	r3, #0
 80133b6:	73fb      	strb	r3, [r7, #15]
    break;
 80133b8:	e00b      	b.n	80133d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80133ba:	2303      	movs	r3, #3
 80133bc:	73fb      	strb	r3, [r7, #15]
    break;
 80133be:	e008      	b.n	80133d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80133c0:	2301      	movs	r3, #1
 80133c2:	73fb      	strb	r3, [r7, #15]
    break;
 80133c4:	e005      	b.n	80133d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80133c6:	2303      	movs	r3, #3
 80133c8:	73fb      	strb	r3, [r7, #15]
    break;
 80133ca:	e002      	b.n	80133d2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80133cc:	2303      	movs	r3, #3
 80133ce:	73fb      	strb	r3, [r7, #15]
    break;
 80133d0:	bf00      	nop
  }
  return usb_status;
 80133d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3710      	adds	r7, #16
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}

080133dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b086      	sub	sp, #24
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	60f8      	str	r0, [r7, #12]
 80133e4:	607a      	str	r2, [r7, #4]
 80133e6:	603b      	str	r3, [r7, #0]
 80133e8:	460b      	mov	r3, r1
 80133ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133ec:	2300      	movs	r3, #0
 80133ee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133f0:	2300      	movs	r3, #0
 80133f2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80133fa:	7af9      	ldrb	r1, [r7, #11]
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	f7f6 ffc4 	bl	800a38c <HAL_PCD_EP_Transmit>
 8013404:	4603      	mov	r3, r0
 8013406:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013408:	7dbb      	ldrb	r3, [r7, #22]
 801340a:	2b03      	cmp	r3, #3
 801340c:	d816      	bhi.n	801343c <USBD_LL_Transmit+0x60>
 801340e:	a201      	add	r2, pc, #4	; (adr r2, 8013414 <USBD_LL_Transmit+0x38>)
 8013410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013414:	08013425 	.word	0x08013425
 8013418:	0801342b 	.word	0x0801342b
 801341c:	08013431 	.word	0x08013431
 8013420:	08013437 	.word	0x08013437
    case HAL_OK :
      usb_status = USBD_OK;
 8013424:	2300      	movs	r3, #0
 8013426:	75fb      	strb	r3, [r7, #23]
    break;
 8013428:	e00b      	b.n	8013442 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801342a:	2303      	movs	r3, #3
 801342c:	75fb      	strb	r3, [r7, #23]
    break;
 801342e:	e008      	b.n	8013442 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013430:	2301      	movs	r3, #1
 8013432:	75fb      	strb	r3, [r7, #23]
    break;
 8013434:	e005      	b.n	8013442 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013436:	2303      	movs	r3, #3
 8013438:	75fb      	strb	r3, [r7, #23]
    break;
 801343a:	e002      	b.n	8013442 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801343c:	2303      	movs	r3, #3
 801343e:	75fb      	strb	r3, [r7, #23]
    break;
 8013440:	bf00      	nop
  }
  return usb_status;
 8013442:	7dfb      	ldrb	r3, [r7, #23]
}
 8013444:	4618      	mov	r0, r3
 8013446:	3718      	adds	r7, #24
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b086      	sub	sp, #24
 8013450:	af00      	add	r7, sp, #0
 8013452:	60f8      	str	r0, [r7, #12]
 8013454:	607a      	str	r2, [r7, #4]
 8013456:	603b      	str	r3, [r7, #0]
 8013458:	460b      	mov	r3, r1
 801345a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801345c:	2300      	movs	r3, #0
 801345e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013460:	2300      	movs	r3, #0
 8013462:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801346a:	7af9      	ldrb	r1, [r7, #11]
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	687a      	ldr	r2, [r7, #4]
 8013470:	f7f6 ff36 	bl	800a2e0 <HAL_PCD_EP_Receive>
 8013474:	4603      	mov	r3, r0
 8013476:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013478:	7dbb      	ldrb	r3, [r7, #22]
 801347a:	2b03      	cmp	r3, #3
 801347c:	d816      	bhi.n	80134ac <USBD_LL_PrepareReceive+0x60>
 801347e:	a201      	add	r2, pc, #4	; (adr r2, 8013484 <USBD_LL_PrepareReceive+0x38>)
 8013480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013484:	08013495 	.word	0x08013495
 8013488:	0801349b 	.word	0x0801349b
 801348c:	080134a1 	.word	0x080134a1
 8013490:	080134a7 	.word	0x080134a7
    case HAL_OK :
      usb_status = USBD_OK;
 8013494:	2300      	movs	r3, #0
 8013496:	75fb      	strb	r3, [r7, #23]
    break;
 8013498:	e00b      	b.n	80134b2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801349a:	2303      	movs	r3, #3
 801349c:	75fb      	strb	r3, [r7, #23]
    break;
 801349e:	e008      	b.n	80134b2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134a0:	2301      	movs	r3, #1
 80134a2:	75fb      	strb	r3, [r7, #23]
    break;
 80134a4:	e005      	b.n	80134b2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134a6:	2303      	movs	r3, #3
 80134a8:	75fb      	strb	r3, [r7, #23]
    break;
 80134aa:	e002      	b.n	80134b2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80134ac:	2303      	movs	r3, #3
 80134ae:	75fb      	strb	r3, [r7, #23]
    break;
 80134b0:	bf00      	nop
  }
  return usb_status;
 80134b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3718      	adds	r7, #24
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	460b      	mov	r3, r1
 80134c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134ce:	78fa      	ldrb	r2, [r7, #3]
 80134d0:	4611      	mov	r1, r2
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7f6 ff42 	bl	800a35c <HAL_PCD_EP_GetRxCount>
 80134d8:	4603      	mov	r3, r0
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
	...

080134e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	460b      	mov	r3, r1
 80134ee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80134f0:	78fb      	ldrb	r3, [r7, #3]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d002      	beq.n	80134fc <HAL_PCDEx_LPM_Callback+0x18>
 80134f6:	2b01      	cmp	r3, #1
 80134f8:	d01f      	beq.n	801353a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80134fa:	e03b      	b.n	8013574 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6a1b      	ldr	r3, [r3, #32]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d007      	beq.n	8013514 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013504:	f000 f854 	bl	80135b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013508:	4b1c      	ldr	r3, [pc, #112]	; (801357c <HAL_PCDEx_LPM_Callback+0x98>)
 801350a:	691b      	ldr	r3, [r3, #16]
 801350c:	4a1b      	ldr	r2, [pc, #108]	; (801357c <HAL_PCDEx_LPM_Callback+0x98>)
 801350e:	f023 0306 	bic.w	r3, r3, #6
 8013512:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	687a      	ldr	r2, [r7, #4]
 8013520:	6812      	ldr	r2, [r2, #0]
 8013522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013526:	f023 0301 	bic.w	r3, r3, #1
 801352a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013532:	4618      	mov	r0, r3
 8013534:	f7fe fb08 	bl	8011b48 <USBD_LL_Resume>
    break;
 8013538:	e01c      	b.n	8013574 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	6812      	ldr	r2, [r2, #0]
 8013548:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801354c:	f043 0301 	orr.w	r3, r3, #1
 8013550:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013558:	4618      	mov	r0, r3
 801355a:	f7fe fadf 	bl	8011b1c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6a1b      	ldr	r3, [r3, #32]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d005      	beq.n	8013572 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013566:	4b05      	ldr	r3, [pc, #20]	; (801357c <HAL_PCDEx_LPM_Callback+0x98>)
 8013568:	691b      	ldr	r3, [r3, #16]
 801356a:	4a04      	ldr	r2, [pc, #16]	; (801357c <HAL_PCDEx_LPM_Callback+0x98>)
 801356c:	f043 0306 	orr.w	r3, r3, #6
 8013570:	6113      	str	r3, [r2, #16]
    break;
 8013572:	bf00      	nop
}
 8013574:	bf00      	nop
 8013576:	3708      	adds	r7, #8
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}
 801357c:	e000ed00 	.word	0xe000ed00

08013580 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013580:	b480      	push	{r7}
 8013582:	b083      	sub	sp, #12
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013588:	4b03      	ldr	r3, [pc, #12]	; (8013598 <USBD_static_malloc+0x18>)
}
 801358a:	4618      	mov	r0, r3
 801358c:	370c      	adds	r7, #12
 801358e:	46bd      	mov	sp, r7
 8013590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013594:	4770      	bx	lr
 8013596:	bf00      	nop
 8013598:	2001ec5c 	.word	0x2001ec5c

0801359c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801359c:	b480      	push	{r7}
 801359e:	b083      	sub	sp, #12
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]

}
 80135a4:	bf00      	nop
 80135a6:	370c      	adds	r7, #12
 80135a8:	46bd      	mov	sp, r7
 80135aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ae:	4770      	bx	lr

080135b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80135b4:	f7ed f938 	bl	8000828 <SystemClock_Config>
}
 80135b8:	bf00      	nop
 80135ba:	bd80      	pop	{r7, pc}

080135bc <__errno>:
 80135bc:	4b01      	ldr	r3, [pc, #4]	; (80135c4 <__errno+0x8>)
 80135be:	6818      	ldr	r0, [r3, #0]
 80135c0:	4770      	bx	lr
 80135c2:	bf00      	nop
 80135c4:	2001c5ac 	.word	0x2001c5ac

080135c8 <__libc_init_array>:
 80135c8:	b570      	push	{r4, r5, r6, lr}
 80135ca:	4d0d      	ldr	r5, [pc, #52]	; (8013600 <__libc_init_array+0x38>)
 80135cc:	4c0d      	ldr	r4, [pc, #52]	; (8013604 <__libc_init_array+0x3c>)
 80135ce:	1b64      	subs	r4, r4, r5
 80135d0:	10a4      	asrs	r4, r4, #2
 80135d2:	2600      	movs	r6, #0
 80135d4:	42a6      	cmp	r6, r4
 80135d6:	d109      	bne.n	80135ec <__libc_init_array+0x24>
 80135d8:	4d0b      	ldr	r5, [pc, #44]	; (8013608 <__libc_init_array+0x40>)
 80135da:	4c0c      	ldr	r4, [pc, #48]	; (801360c <__libc_init_array+0x44>)
 80135dc:	f000 ffae 	bl	801453c <_init>
 80135e0:	1b64      	subs	r4, r4, r5
 80135e2:	10a4      	asrs	r4, r4, #2
 80135e4:	2600      	movs	r6, #0
 80135e6:	42a6      	cmp	r6, r4
 80135e8:	d105      	bne.n	80135f6 <__libc_init_array+0x2e>
 80135ea:	bd70      	pop	{r4, r5, r6, pc}
 80135ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80135f0:	4798      	blx	r3
 80135f2:	3601      	adds	r6, #1
 80135f4:	e7ee      	b.n	80135d4 <__libc_init_array+0xc>
 80135f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80135fa:	4798      	blx	r3
 80135fc:	3601      	adds	r6, #1
 80135fe:	e7f2      	b.n	80135e6 <__libc_init_array+0x1e>
 8013600:	080174a0 	.word	0x080174a0
 8013604:	080174a0 	.word	0x080174a0
 8013608:	080174a0 	.word	0x080174a0
 801360c:	080174a4 	.word	0x080174a4

08013610 <memset>:
 8013610:	4402      	add	r2, r0
 8013612:	4603      	mov	r3, r0
 8013614:	4293      	cmp	r3, r2
 8013616:	d100      	bne.n	801361a <memset+0xa>
 8013618:	4770      	bx	lr
 801361a:	f803 1b01 	strb.w	r1, [r3], #1
 801361e:	e7f9      	b.n	8013614 <memset+0x4>

08013620 <_free_r>:
 8013620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013622:	2900      	cmp	r1, #0
 8013624:	d044      	beq.n	80136b0 <_free_r+0x90>
 8013626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801362a:	9001      	str	r0, [sp, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	f1a1 0404 	sub.w	r4, r1, #4
 8013632:	bfb8      	it	lt
 8013634:	18e4      	addlt	r4, r4, r3
 8013636:	f000 f9f3 	bl	8013a20 <__malloc_lock>
 801363a:	4a1e      	ldr	r2, [pc, #120]	; (80136b4 <_free_r+0x94>)
 801363c:	9801      	ldr	r0, [sp, #4]
 801363e:	6813      	ldr	r3, [r2, #0]
 8013640:	b933      	cbnz	r3, 8013650 <_free_r+0x30>
 8013642:	6063      	str	r3, [r4, #4]
 8013644:	6014      	str	r4, [r2, #0]
 8013646:	b003      	add	sp, #12
 8013648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801364c:	f000 b9ee 	b.w	8013a2c <__malloc_unlock>
 8013650:	42a3      	cmp	r3, r4
 8013652:	d908      	bls.n	8013666 <_free_r+0x46>
 8013654:	6825      	ldr	r5, [r4, #0]
 8013656:	1961      	adds	r1, r4, r5
 8013658:	428b      	cmp	r3, r1
 801365a:	bf01      	itttt	eq
 801365c:	6819      	ldreq	r1, [r3, #0]
 801365e:	685b      	ldreq	r3, [r3, #4]
 8013660:	1949      	addeq	r1, r1, r5
 8013662:	6021      	streq	r1, [r4, #0]
 8013664:	e7ed      	b.n	8013642 <_free_r+0x22>
 8013666:	461a      	mov	r2, r3
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	b10b      	cbz	r3, 8013670 <_free_r+0x50>
 801366c:	42a3      	cmp	r3, r4
 801366e:	d9fa      	bls.n	8013666 <_free_r+0x46>
 8013670:	6811      	ldr	r1, [r2, #0]
 8013672:	1855      	adds	r5, r2, r1
 8013674:	42a5      	cmp	r5, r4
 8013676:	d10b      	bne.n	8013690 <_free_r+0x70>
 8013678:	6824      	ldr	r4, [r4, #0]
 801367a:	4421      	add	r1, r4
 801367c:	1854      	adds	r4, r2, r1
 801367e:	42a3      	cmp	r3, r4
 8013680:	6011      	str	r1, [r2, #0]
 8013682:	d1e0      	bne.n	8013646 <_free_r+0x26>
 8013684:	681c      	ldr	r4, [r3, #0]
 8013686:	685b      	ldr	r3, [r3, #4]
 8013688:	6053      	str	r3, [r2, #4]
 801368a:	4421      	add	r1, r4
 801368c:	6011      	str	r1, [r2, #0]
 801368e:	e7da      	b.n	8013646 <_free_r+0x26>
 8013690:	d902      	bls.n	8013698 <_free_r+0x78>
 8013692:	230c      	movs	r3, #12
 8013694:	6003      	str	r3, [r0, #0]
 8013696:	e7d6      	b.n	8013646 <_free_r+0x26>
 8013698:	6825      	ldr	r5, [r4, #0]
 801369a:	1961      	adds	r1, r4, r5
 801369c:	428b      	cmp	r3, r1
 801369e:	bf04      	itt	eq
 80136a0:	6819      	ldreq	r1, [r3, #0]
 80136a2:	685b      	ldreq	r3, [r3, #4]
 80136a4:	6063      	str	r3, [r4, #4]
 80136a6:	bf04      	itt	eq
 80136a8:	1949      	addeq	r1, r1, r5
 80136aa:	6021      	streq	r1, [r4, #0]
 80136ac:	6054      	str	r4, [r2, #4]
 80136ae:	e7ca      	b.n	8013646 <_free_r+0x26>
 80136b0:	b003      	add	sp, #12
 80136b2:	bd30      	pop	{r4, r5, pc}
 80136b4:	2001ee7c 	.word	0x2001ee7c

080136b8 <sbrk_aligned>:
 80136b8:	b570      	push	{r4, r5, r6, lr}
 80136ba:	4e0e      	ldr	r6, [pc, #56]	; (80136f4 <sbrk_aligned+0x3c>)
 80136bc:	460c      	mov	r4, r1
 80136be:	6831      	ldr	r1, [r6, #0]
 80136c0:	4605      	mov	r5, r0
 80136c2:	b911      	cbnz	r1, 80136ca <sbrk_aligned+0x12>
 80136c4:	f000 f8a4 	bl	8013810 <_sbrk_r>
 80136c8:	6030      	str	r0, [r6, #0]
 80136ca:	4621      	mov	r1, r4
 80136cc:	4628      	mov	r0, r5
 80136ce:	f000 f89f 	bl	8013810 <_sbrk_r>
 80136d2:	1c43      	adds	r3, r0, #1
 80136d4:	d00a      	beq.n	80136ec <sbrk_aligned+0x34>
 80136d6:	1cc4      	adds	r4, r0, #3
 80136d8:	f024 0403 	bic.w	r4, r4, #3
 80136dc:	42a0      	cmp	r0, r4
 80136de:	d007      	beq.n	80136f0 <sbrk_aligned+0x38>
 80136e0:	1a21      	subs	r1, r4, r0
 80136e2:	4628      	mov	r0, r5
 80136e4:	f000 f894 	bl	8013810 <_sbrk_r>
 80136e8:	3001      	adds	r0, #1
 80136ea:	d101      	bne.n	80136f0 <sbrk_aligned+0x38>
 80136ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80136f0:	4620      	mov	r0, r4
 80136f2:	bd70      	pop	{r4, r5, r6, pc}
 80136f4:	2001ee80 	.word	0x2001ee80

080136f8 <_malloc_r>:
 80136f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136fc:	1ccd      	adds	r5, r1, #3
 80136fe:	f025 0503 	bic.w	r5, r5, #3
 8013702:	3508      	adds	r5, #8
 8013704:	2d0c      	cmp	r5, #12
 8013706:	bf38      	it	cc
 8013708:	250c      	movcc	r5, #12
 801370a:	2d00      	cmp	r5, #0
 801370c:	4607      	mov	r7, r0
 801370e:	db01      	blt.n	8013714 <_malloc_r+0x1c>
 8013710:	42a9      	cmp	r1, r5
 8013712:	d905      	bls.n	8013720 <_malloc_r+0x28>
 8013714:	230c      	movs	r3, #12
 8013716:	603b      	str	r3, [r7, #0]
 8013718:	2600      	movs	r6, #0
 801371a:	4630      	mov	r0, r6
 801371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013720:	4e2e      	ldr	r6, [pc, #184]	; (80137dc <_malloc_r+0xe4>)
 8013722:	f000 f97d 	bl	8013a20 <__malloc_lock>
 8013726:	6833      	ldr	r3, [r6, #0]
 8013728:	461c      	mov	r4, r3
 801372a:	bb34      	cbnz	r4, 801377a <_malloc_r+0x82>
 801372c:	4629      	mov	r1, r5
 801372e:	4638      	mov	r0, r7
 8013730:	f7ff ffc2 	bl	80136b8 <sbrk_aligned>
 8013734:	1c43      	adds	r3, r0, #1
 8013736:	4604      	mov	r4, r0
 8013738:	d14d      	bne.n	80137d6 <_malloc_r+0xde>
 801373a:	6834      	ldr	r4, [r6, #0]
 801373c:	4626      	mov	r6, r4
 801373e:	2e00      	cmp	r6, #0
 8013740:	d140      	bne.n	80137c4 <_malloc_r+0xcc>
 8013742:	6823      	ldr	r3, [r4, #0]
 8013744:	4631      	mov	r1, r6
 8013746:	4638      	mov	r0, r7
 8013748:	eb04 0803 	add.w	r8, r4, r3
 801374c:	f000 f860 	bl	8013810 <_sbrk_r>
 8013750:	4580      	cmp	r8, r0
 8013752:	d13a      	bne.n	80137ca <_malloc_r+0xd2>
 8013754:	6821      	ldr	r1, [r4, #0]
 8013756:	3503      	adds	r5, #3
 8013758:	1a6d      	subs	r5, r5, r1
 801375a:	f025 0503 	bic.w	r5, r5, #3
 801375e:	3508      	adds	r5, #8
 8013760:	2d0c      	cmp	r5, #12
 8013762:	bf38      	it	cc
 8013764:	250c      	movcc	r5, #12
 8013766:	4629      	mov	r1, r5
 8013768:	4638      	mov	r0, r7
 801376a:	f7ff ffa5 	bl	80136b8 <sbrk_aligned>
 801376e:	3001      	adds	r0, #1
 8013770:	d02b      	beq.n	80137ca <_malloc_r+0xd2>
 8013772:	6823      	ldr	r3, [r4, #0]
 8013774:	442b      	add	r3, r5
 8013776:	6023      	str	r3, [r4, #0]
 8013778:	e00e      	b.n	8013798 <_malloc_r+0xa0>
 801377a:	6822      	ldr	r2, [r4, #0]
 801377c:	1b52      	subs	r2, r2, r5
 801377e:	d41e      	bmi.n	80137be <_malloc_r+0xc6>
 8013780:	2a0b      	cmp	r2, #11
 8013782:	d916      	bls.n	80137b2 <_malloc_r+0xba>
 8013784:	1961      	adds	r1, r4, r5
 8013786:	42a3      	cmp	r3, r4
 8013788:	6025      	str	r5, [r4, #0]
 801378a:	bf18      	it	ne
 801378c:	6059      	strne	r1, [r3, #4]
 801378e:	6863      	ldr	r3, [r4, #4]
 8013790:	bf08      	it	eq
 8013792:	6031      	streq	r1, [r6, #0]
 8013794:	5162      	str	r2, [r4, r5]
 8013796:	604b      	str	r3, [r1, #4]
 8013798:	4638      	mov	r0, r7
 801379a:	f104 060b 	add.w	r6, r4, #11
 801379e:	f000 f945 	bl	8013a2c <__malloc_unlock>
 80137a2:	f026 0607 	bic.w	r6, r6, #7
 80137a6:	1d23      	adds	r3, r4, #4
 80137a8:	1af2      	subs	r2, r6, r3
 80137aa:	d0b6      	beq.n	801371a <_malloc_r+0x22>
 80137ac:	1b9b      	subs	r3, r3, r6
 80137ae:	50a3      	str	r3, [r4, r2]
 80137b0:	e7b3      	b.n	801371a <_malloc_r+0x22>
 80137b2:	6862      	ldr	r2, [r4, #4]
 80137b4:	42a3      	cmp	r3, r4
 80137b6:	bf0c      	ite	eq
 80137b8:	6032      	streq	r2, [r6, #0]
 80137ba:	605a      	strne	r2, [r3, #4]
 80137bc:	e7ec      	b.n	8013798 <_malloc_r+0xa0>
 80137be:	4623      	mov	r3, r4
 80137c0:	6864      	ldr	r4, [r4, #4]
 80137c2:	e7b2      	b.n	801372a <_malloc_r+0x32>
 80137c4:	4634      	mov	r4, r6
 80137c6:	6876      	ldr	r6, [r6, #4]
 80137c8:	e7b9      	b.n	801373e <_malloc_r+0x46>
 80137ca:	230c      	movs	r3, #12
 80137cc:	603b      	str	r3, [r7, #0]
 80137ce:	4638      	mov	r0, r7
 80137d0:	f000 f92c 	bl	8013a2c <__malloc_unlock>
 80137d4:	e7a1      	b.n	801371a <_malloc_r+0x22>
 80137d6:	6025      	str	r5, [r4, #0]
 80137d8:	e7de      	b.n	8013798 <_malloc_r+0xa0>
 80137da:	bf00      	nop
 80137dc:	2001ee7c 	.word	0x2001ee7c

080137e0 <iprintf>:
 80137e0:	b40f      	push	{r0, r1, r2, r3}
 80137e2:	4b0a      	ldr	r3, [pc, #40]	; (801380c <iprintf+0x2c>)
 80137e4:	b513      	push	{r0, r1, r4, lr}
 80137e6:	681c      	ldr	r4, [r3, #0]
 80137e8:	b124      	cbz	r4, 80137f4 <iprintf+0x14>
 80137ea:	69a3      	ldr	r3, [r4, #24]
 80137ec:	b913      	cbnz	r3, 80137f4 <iprintf+0x14>
 80137ee:	4620      	mov	r0, r4
 80137f0:	f000 f876 	bl	80138e0 <__sinit>
 80137f4:	ab05      	add	r3, sp, #20
 80137f6:	9a04      	ldr	r2, [sp, #16]
 80137f8:	68a1      	ldr	r1, [r4, #8]
 80137fa:	9301      	str	r3, [sp, #4]
 80137fc:	4620      	mov	r0, r4
 80137fe:	f000 f945 	bl	8013a8c <_vfiprintf_r>
 8013802:	b002      	add	sp, #8
 8013804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013808:	b004      	add	sp, #16
 801380a:	4770      	bx	lr
 801380c:	2001c5ac 	.word	0x2001c5ac

08013810 <_sbrk_r>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	4d06      	ldr	r5, [pc, #24]	; (801382c <_sbrk_r+0x1c>)
 8013814:	2300      	movs	r3, #0
 8013816:	4604      	mov	r4, r0
 8013818:	4608      	mov	r0, r1
 801381a:	602b      	str	r3, [r5, #0]
 801381c:	f7ee fdf0 	bl	8002400 <_sbrk>
 8013820:	1c43      	adds	r3, r0, #1
 8013822:	d102      	bne.n	801382a <_sbrk_r+0x1a>
 8013824:	682b      	ldr	r3, [r5, #0]
 8013826:	b103      	cbz	r3, 801382a <_sbrk_r+0x1a>
 8013828:	6023      	str	r3, [r4, #0]
 801382a:	bd38      	pop	{r3, r4, r5, pc}
 801382c:	2001ee88 	.word	0x2001ee88

08013830 <std>:
 8013830:	2300      	movs	r3, #0
 8013832:	b510      	push	{r4, lr}
 8013834:	4604      	mov	r4, r0
 8013836:	e9c0 3300 	strd	r3, r3, [r0]
 801383a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801383e:	6083      	str	r3, [r0, #8]
 8013840:	8181      	strh	r1, [r0, #12]
 8013842:	6643      	str	r3, [r0, #100]	; 0x64
 8013844:	81c2      	strh	r2, [r0, #14]
 8013846:	6183      	str	r3, [r0, #24]
 8013848:	4619      	mov	r1, r3
 801384a:	2208      	movs	r2, #8
 801384c:	305c      	adds	r0, #92	; 0x5c
 801384e:	f7ff fedf 	bl	8013610 <memset>
 8013852:	4b05      	ldr	r3, [pc, #20]	; (8013868 <std+0x38>)
 8013854:	6263      	str	r3, [r4, #36]	; 0x24
 8013856:	4b05      	ldr	r3, [pc, #20]	; (801386c <std+0x3c>)
 8013858:	62a3      	str	r3, [r4, #40]	; 0x28
 801385a:	4b05      	ldr	r3, [pc, #20]	; (8013870 <std+0x40>)
 801385c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801385e:	4b05      	ldr	r3, [pc, #20]	; (8013874 <std+0x44>)
 8013860:	6224      	str	r4, [r4, #32]
 8013862:	6323      	str	r3, [r4, #48]	; 0x30
 8013864:	bd10      	pop	{r4, pc}
 8013866:	bf00      	nop
 8013868:	08014015 	.word	0x08014015
 801386c:	08014037 	.word	0x08014037
 8013870:	0801406f 	.word	0x0801406f
 8013874:	08014093 	.word	0x08014093

08013878 <_cleanup_r>:
 8013878:	4901      	ldr	r1, [pc, #4]	; (8013880 <_cleanup_r+0x8>)
 801387a:	f000 b8af 	b.w	80139dc <_fwalk_reent>
 801387e:	bf00      	nop
 8013880:	0801436d 	.word	0x0801436d

08013884 <__sfmoreglue>:
 8013884:	b570      	push	{r4, r5, r6, lr}
 8013886:	2268      	movs	r2, #104	; 0x68
 8013888:	1e4d      	subs	r5, r1, #1
 801388a:	4355      	muls	r5, r2
 801388c:	460e      	mov	r6, r1
 801388e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013892:	f7ff ff31 	bl	80136f8 <_malloc_r>
 8013896:	4604      	mov	r4, r0
 8013898:	b140      	cbz	r0, 80138ac <__sfmoreglue+0x28>
 801389a:	2100      	movs	r1, #0
 801389c:	e9c0 1600 	strd	r1, r6, [r0]
 80138a0:	300c      	adds	r0, #12
 80138a2:	60a0      	str	r0, [r4, #8]
 80138a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80138a8:	f7ff feb2 	bl	8013610 <memset>
 80138ac:	4620      	mov	r0, r4
 80138ae:	bd70      	pop	{r4, r5, r6, pc}

080138b0 <__sfp_lock_acquire>:
 80138b0:	4801      	ldr	r0, [pc, #4]	; (80138b8 <__sfp_lock_acquire+0x8>)
 80138b2:	f000 b8b3 	b.w	8013a1c <__retarget_lock_acquire_recursive>
 80138b6:	bf00      	nop
 80138b8:	2001ee85 	.word	0x2001ee85

080138bc <__sfp_lock_release>:
 80138bc:	4801      	ldr	r0, [pc, #4]	; (80138c4 <__sfp_lock_release+0x8>)
 80138be:	f000 b8ae 	b.w	8013a1e <__retarget_lock_release_recursive>
 80138c2:	bf00      	nop
 80138c4:	2001ee85 	.word	0x2001ee85

080138c8 <__sinit_lock_acquire>:
 80138c8:	4801      	ldr	r0, [pc, #4]	; (80138d0 <__sinit_lock_acquire+0x8>)
 80138ca:	f000 b8a7 	b.w	8013a1c <__retarget_lock_acquire_recursive>
 80138ce:	bf00      	nop
 80138d0:	2001ee86 	.word	0x2001ee86

080138d4 <__sinit_lock_release>:
 80138d4:	4801      	ldr	r0, [pc, #4]	; (80138dc <__sinit_lock_release+0x8>)
 80138d6:	f000 b8a2 	b.w	8013a1e <__retarget_lock_release_recursive>
 80138da:	bf00      	nop
 80138dc:	2001ee86 	.word	0x2001ee86

080138e0 <__sinit>:
 80138e0:	b510      	push	{r4, lr}
 80138e2:	4604      	mov	r4, r0
 80138e4:	f7ff fff0 	bl	80138c8 <__sinit_lock_acquire>
 80138e8:	69a3      	ldr	r3, [r4, #24]
 80138ea:	b11b      	cbz	r3, 80138f4 <__sinit+0x14>
 80138ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138f0:	f7ff bff0 	b.w	80138d4 <__sinit_lock_release>
 80138f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80138f8:	6523      	str	r3, [r4, #80]	; 0x50
 80138fa:	4b13      	ldr	r3, [pc, #76]	; (8013948 <__sinit+0x68>)
 80138fc:	4a13      	ldr	r2, [pc, #76]	; (801394c <__sinit+0x6c>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	62a2      	str	r2, [r4, #40]	; 0x28
 8013902:	42a3      	cmp	r3, r4
 8013904:	bf04      	itt	eq
 8013906:	2301      	moveq	r3, #1
 8013908:	61a3      	streq	r3, [r4, #24]
 801390a:	4620      	mov	r0, r4
 801390c:	f000 f820 	bl	8013950 <__sfp>
 8013910:	6060      	str	r0, [r4, #4]
 8013912:	4620      	mov	r0, r4
 8013914:	f000 f81c 	bl	8013950 <__sfp>
 8013918:	60a0      	str	r0, [r4, #8]
 801391a:	4620      	mov	r0, r4
 801391c:	f000 f818 	bl	8013950 <__sfp>
 8013920:	2200      	movs	r2, #0
 8013922:	60e0      	str	r0, [r4, #12]
 8013924:	2104      	movs	r1, #4
 8013926:	6860      	ldr	r0, [r4, #4]
 8013928:	f7ff ff82 	bl	8013830 <std>
 801392c:	68a0      	ldr	r0, [r4, #8]
 801392e:	2201      	movs	r2, #1
 8013930:	2109      	movs	r1, #9
 8013932:	f7ff ff7d 	bl	8013830 <std>
 8013936:	68e0      	ldr	r0, [r4, #12]
 8013938:	2202      	movs	r2, #2
 801393a:	2112      	movs	r1, #18
 801393c:	f7ff ff78 	bl	8013830 <std>
 8013940:	2301      	movs	r3, #1
 8013942:	61a3      	str	r3, [r4, #24]
 8013944:	e7d2      	b.n	80138ec <__sinit+0xc>
 8013946:	bf00      	nop
 8013948:	08017400 	.word	0x08017400
 801394c:	08013879 	.word	0x08013879

08013950 <__sfp>:
 8013950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013952:	4607      	mov	r7, r0
 8013954:	f7ff ffac 	bl	80138b0 <__sfp_lock_acquire>
 8013958:	4b1e      	ldr	r3, [pc, #120]	; (80139d4 <__sfp+0x84>)
 801395a:	681e      	ldr	r6, [r3, #0]
 801395c:	69b3      	ldr	r3, [r6, #24]
 801395e:	b913      	cbnz	r3, 8013966 <__sfp+0x16>
 8013960:	4630      	mov	r0, r6
 8013962:	f7ff ffbd 	bl	80138e0 <__sinit>
 8013966:	3648      	adds	r6, #72	; 0x48
 8013968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801396c:	3b01      	subs	r3, #1
 801396e:	d503      	bpl.n	8013978 <__sfp+0x28>
 8013970:	6833      	ldr	r3, [r6, #0]
 8013972:	b30b      	cbz	r3, 80139b8 <__sfp+0x68>
 8013974:	6836      	ldr	r6, [r6, #0]
 8013976:	e7f7      	b.n	8013968 <__sfp+0x18>
 8013978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801397c:	b9d5      	cbnz	r5, 80139b4 <__sfp+0x64>
 801397e:	4b16      	ldr	r3, [pc, #88]	; (80139d8 <__sfp+0x88>)
 8013980:	60e3      	str	r3, [r4, #12]
 8013982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013986:	6665      	str	r5, [r4, #100]	; 0x64
 8013988:	f000 f847 	bl	8013a1a <__retarget_lock_init_recursive>
 801398c:	f7ff ff96 	bl	80138bc <__sfp_lock_release>
 8013990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013998:	6025      	str	r5, [r4, #0]
 801399a:	61a5      	str	r5, [r4, #24]
 801399c:	2208      	movs	r2, #8
 801399e:	4629      	mov	r1, r5
 80139a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80139a4:	f7ff fe34 	bl	8013610 <memset>
 80139a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80139ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80139b0:	4620      	mov	r0, r4
 80139b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139b4:	3468      	adds	r4, #104	; 0x68
 80139b6:	e7d9      	b.n	801396c <__sfp+0x1c>
 80139b8:	2104      	movs	r1, #4
 80139ba:	4638      	mov	r0, r7
 80139bc:	f7ff ff62 	bl	8013884 <__sfmoreglue>
 80139c0:	4604      	mov	r4, r0
 80139c2:	6030      	str	r0, [r6, #0]
 80139c4:	2800      	cmp	r0, #0
 80139c6:	d1d5      	bne.n	8013974 <__sfp+0x24>
 80139c8:	f7ff ff78 	bl	80138bc <__sfp_lock_release>
 80139cc:	230c      	movs	r3, #12
 80139ce:	603b      	str	r3, [r7, #0]
 80139d0:	e7ee      	b.n	80139b0 <__sfp+0x60>
 80139d2:	bf00      	nop
 80139d4:	08017400 	.word	0x08017400
 80139d8:	ffff0001 	.word	0xffff0001

080139dc <_fwalk_reent>:
 80139dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139e0:	4606      	mov	r6, r0
 80139e2:	4688      	mov	r8, r1
 80139e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80139e8:	2700      	movs	r7, #0
 80139ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80139ee:	f1b9 0901 	subs.w	r9, r9, #1
 80139f2:	d505      	bpl.n	8013a00 <_fwalk_reent+0x24>
 80139f4:	6824      	ldr	r4, [r4, #0]
 80139f6:	2c00      	cmp	r4, #0
 80139f8:	d1f7      	bne.n	80139ea <_fwalk_reent+0xe>
 80139fa:	4638      	mov	r0, r7
 80139fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a00:	89ab      	ldrh	r3, [r5, #12]
 8013a02:	2b01      	cmp	r3, #1
 8013a04:	d907      	bls.n	8013a16 <_fwalk_reent+0x3a>
 8013a06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	d003      	beq.n	8013a16 <_fwalk_reent+0x3a>
 8013a0e:	4629      	mov	r1, r5
 8013a10:	4630      	mov	r0, r6
 8013a12:	47c0      	blx	r8
 8013a14:	4307      	orrs	r7, r0
 8013a16:	3568      	adds	r5, #104	; 0x68
 8013a18:	e7e9      	b.n	80139ee <_fwalk_reent+0x12>

08013a1a <__retarget_lock_init_recursive>:
 8013a1a:	4770      	bx	lr

08013a1c <__retarget_lock_acquire_recursive>:
 8013a1c:	4770      	bx	lr

08013a1e <__retarget_lock_release_recursive>:
 8013a1e:	4770      	bx	lr

08013a20 <__malloc_lock>:
 8013a20:	4801      	ldr	r0, [pc, #4]	; (8013a28 <__malloc_lock+0x8>)
 8013a22:	f7ff bffb 	b.w	8013a1c <__retarget_lock_acquire_recursive>
 8013a26:	bf00      	nop
 8013a28:	2001ee84 	.word	0x2001ee84

08013a2c <__malloc_unlock>:
 8013a2c:	4801      	ldr	r0, [pc, #4]	; (8013a34 <__malloc_unlock+0x8>)
 8013a2e:	f7ff bff6 	b.w	8013a1e <__retarget_lock_release_recursive>
 8013a32:	bf00      	nop
 8013a34:	2001ee84 	.word	0x2001ee84

08013a38 <__sfputc_r>:
 8013a38:	6893      	ldr	r3, [r2, #8]
 8013a3a:	3b01      	subs	r3, #1
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	b410      	push	{r4}
 8013a40:	6093      	str	r3, [r2, #8]
 8013a42:	da08      	bge.n	8013a56 <__sfputc_r+0x1e>
 8013a44:	6994      	ldr	r4, [r2, #24]
 8013a46:	42a3      	cmp	r3, r4
 8013a48:	db01      	blt.n	8013a4e <__sfputc_r+0x16>
 8013a4a:	290a      	cmp	r1, #10
 8013a4c:	d103      	bne.n	8013a56 <__sfputc_r+0x1e>
 8013a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a52:	f000 bb23 	b.w	801409c <__swbuf_r>
 8013a56:	6813      	ldr	r3, [r2, #0]
 8013a58:	1c58      	adds	r0, r3, #1
 8013a5a:	6010      	str	r0, [r2, #0]
 8013a5c:	7019      	strb	r1, [r3, #0]
 8013a5e:	4608      	mov	r0, r1
 8013a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a64:	4770      	bx	lr

08013a66 <__sfputs_r>:
 8013a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a68:	4606      	mov	r6, r0
 8013a6a:	460f      	mov	r7, r1
 8013a6c:	4614      	mov	r4, r2
 8013a6e:	18d5      	adds	r5, r2, r3
 8013a70:	42ac      	cmp	r4, r5
 8013a72:	d101      	bne.n	8013a78 <__sfputs_r+0x12>
 8013a74:	2000      	movs	r0, #0
 8013a76:	e007      	b.n	8013a88 <__sfputs_r+0x22>
 8013a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a7c:	463a      	mov	r2, r7
 8013a7e:	4630      	mov	r0, r6
 8013a80:	f7ff ffda 	bl	8013a38 <__sfputc_r>
 8013a84:	1c43      	adds	r3, r0, #1
 8013a86:	d1f3      	bne.n	8013a70 <__sfputs_r+0xa>
 8013a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013a8c <_vfiprintf_r>:
 8013a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a90:	460d      	mov	r5, r1
 8013a92:	b09d      	sub	sp, #116	; 0x74
 8013a94:	4614      	mov	r4, r2
 8013a96:	4698      	mov	r8, r3
 8013a98:	4606      	mov	r6, r0
 8013a9a:	b118      	cbz	r0, 8013aa4 <_vfiprintf_r+0x18>
 8013a9c:	6983      	ldr	r3, [r0, #24]
 8013a9e:	b90b      	cbnz	r3, 8013aa4 <_vfiprintf_r+0x18>
 8013aa0:	f7ff ff1e 	bl	80138e0 <__sinit>
 8013aa4:	4b89      	ldr	r3, [pc, #548]	; (8013ccc <_vfiprintf_r+0x240>)
 8013aa6:	429d      	cmp	r5, r3
 8013aa8:	d11b      	bne.n	8013ae2 <_vfiprintf_r+0x56>
 8013aaa:	6875      	ldr	r5, [r6, #4]
 8013aac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013aae:	07d9      	lsls	r1, r3, #31
 8013ab0:	d405      	bmi.n	8013abe <_vfiprintf_r+0x32>
 8013ab2:	89ab      	ldrh	r3, [r5, #12]
 8013ab4:	059a      	lsls	r2, r3, #22
 8013ab6:	d402      	bmi.n	8013abe <_vfiprintf_r+0x32>
 8013ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013aba:	f7ff ffaf 	bl	8013a1c <__retarget_lock_acquire_recursive>
 8013abe:	89ab      	ldrh	r3, [r5, #12]
 8013ac0:	071b      	lsls	r3, r3, #28
 8013ac2:	d501      	bpl.n	8013ac8 <_vfiprintf_r+0x3c>
 8013ac4:	692b      	ldr	r3, [r5, #16]
 8013ac6:	b9eb      	cbnz	r3, 8013b04 <_vfiprintf_r+0x78>
 8013ac8:	4629      	mov	r1, r5
 8013aca:	4630      	mov	r0, r6
 8013acc:	f000 fb4a 	bl	8014164 <__swsetup_r>
 8013ad0:	b1c0      	cbz	r0, 8013b04 <_vfiprintf_r+0x78>
 8013ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ad4:	07dc      	lsls	r4, r3, #31
 8013ad6:	d50e      	bpl.n	8013af6 <_vfiprintf_r+0x6a>
 8013ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013adc:	b01d      	add	sp, #116	; 0x74
 8013ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae2:	4b7b      	ldr	r3, [pc, #492]	; (8013cd0 <_vfiprintf_r+0x244>)
 8013ae4:	429d      	cmp	r5, r3
 8013ae6:	d101      	bne.n	8013aec <_vfiprintf_r+0x60>
 8013ae8:	68b5      	ldr	r5, [r6, #8]
 8013aea:	e7df      	b.n	8013aac <_vfiprintf_r+0x20>
 8013aec:	4b79      	ldr	r3, [pc, #484]	; (8013cd4 <_vfiprintf_r+0x248>)
 8013aee:	429d      	cmp	r5, r3
 8013af0:	bf08      	it	eq
 8013af2:	68f5      	ldreq	r5, [r6, #12]
 8013af4:	e7da      	b.n	8013aac <_vfiprintf_r+0x20>
 8013af6:	89ab      	ldrh	r3, [r5, #12]
 8013af8:	0598      	lsls	r0, r3, #22
 8013afa:	d4ed      	bmi.n	8013ad8 <_vfiprintf_r+0x4c>
 8013afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013afe:	f7ff ff8e 	bl	8013a1e <__retarget_lock_release_recursive>
 8013b02:	e7e9      	b.n	8013ad8 <_vfiprintf_r+0x4c>
 8013b04:	2300      	movs	r3, #0
 8013b06:	9309      	str	r3, [sp, #36]	; 0x24
 8013b08:	2320      	movs	r3, #32
 8013b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b12:	2330      	movs	r3, #48	; 0x30
 8013b14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013cd8 <_vfiprintf_r+0x24c>
 8013b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b1c:	f04f 0901 	mov.w	r9, #1
 8013b20:	4623      	mov	r3, r4
 8013b22:	469a      	mov	sl, r3
 8013b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b28:	b10a      	cbz	r2, 8013b2e <_vfiprintf_r+0xa2>
 8013b2a:	2a25      	cmp	r2, #37	; 0x25
 8013b2c:	d1f9      	bne.n	8013b22 <_vfiprintf_r+0x96>
 8013b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8013b32:	d00b      	beq.n	8013b4c <_vfiprintf_r+0xc0>
 8013b34:	465b      	mov	r3, fp
 8013b36:	4622      	mov	r2, r4
 8013b38:	4629      	mov	r1, r5
 8013b3a:	4630      	mov	r0, r6
 8013b3c:	f7ff ff93 	bl	8013a66 <__sfputs_r>
 8013b40:	3001      	adds	r0, #1
 8013b42:	f000 80aa 	beq.w	8013c9a <_vfiprintf_r+0x20e>
 8013b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b48:	445a      	add	r2, fp
 8013b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8013b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f000 80a2 	beq.w	8013c9a <_vfiprintf_r+0x20e>
 8013b56:	2300      	movs	r3, #0
 8013b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b60:	f10a 0a01 	add.w	sl, sl, #1
 8013b64:	9304      	str	r3, [sp, #16]
 8013b66:	9307      	str	r3, [sp, #28]
 8013b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8013b6e:	4654      	mov	r4, sl
 8013b70:	2205      	movs	r2, #5
 8013b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b76:	4858      	ldr	r0, [pc, #352]	; (8013cd8 <_vfiprintf_r+0x24c>)
 8013b78:	f7ec fb3a 	bl	80001f0 <memchr>
 8013b7c:	9a04      	ldr	r2, [sp, #16]
 8013b7e:	b9d8      	cbnz	r0, 8013bb8 <_vfiprintf_r+0x12c>
 8013b80:	06d1      	lsls	r1, r2, #27
 8013b82:	bf44      	itt	mi
 8013b84:	2320      	movmi	r3, #32
 8013b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b8a:	0713      	lsls	r3, r2, #28
 8013b8c:	bf44      	itt	mi
 8013b8e:	232b      	movmi	r3, #43	; 0x2b
 8013b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b94:	f89a 3000 	ldrb.w	r3, [sl]
 8013b98:	2b2a      	cmp	r3, #42	; 0x2a
 8013b9a:	d015      	beq.n	8013bc8 <_vfiprintf_r+0x13c>
 8013b9c:	9a07      	ldr	r2, [sp, #28]
 8013b9e:	4654      	mov	r4, sl
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	f04f 0c0a 	mov.w	ip, #10
 8013ba6:	4621      	mov	r1, r4
 8013ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bac:	3b30      	subs	r3, #48	; 0x30
 8013bae:	2b09      	cmp	r3, #9
 8013bb0:	d94e      	bls.n	8013c50 <_vfiprintf_r+0x1c4>
 8013bb2:	b1b0      	cbz	r0, 8013be2 <_vfiprintf_r+0x156>
 8013bb4:	9207      	str	r2, [sp, #28]
 8013bb6:	e014      	b.n	8013be2 <_vfiprintf_r+0x156>
 8013bb8:	eba0 0308 	sub.w	r3, r0, r8
 8013bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	9304      	str	r3, [sp, #16]
 8013bc4:	46a2      	mov	sl, r4
 8013bc6:	e7d2      	b.n	8013b6e <_vfiprintf_r+0xe2>
 8013bc8:	9b03      	ldr	r3, [sp, #12]
 8013bca:	1d19      	adds	r1, r3, #4
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	9103      	str	r1, [sp, #12]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	bfbb      	ittet	lt
 8013bd4:	425b      	neglt	r3, r3
 8013bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8013bda:	9307      	strge	r3, [sp, #28]
 8013bdc:	9307      	strlt	r3, [sp, #28]
 8013bde:	bfb8      	it	lt
 8013be0:	9204      	strlt	r2, [sp, #16]
 8013be2:	7823      	ldrb	r3, [r4, #0]
 8013be4:	2b2e      	cmp	r3, #46	; 0x2e
 8013be6:	d10c      	bne.n	8013c02 <_vfiprintf_r+0x176>
 8013be8:	7863      	ldrb	r3, [r4, #1]
 8013bea:	2b2a      	cmp	r3, #42	; 0x2a
 8013bec:	d135      	bne.n	8013c5a <_vfiprintf_r+0x1ce>
 8013bee:	9b03      	ldr	r3, [sp, #12]
 8013bf0:	1d1a      	adds	r2, r3, #4
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	9203      	str	r2, [sp, #12]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	bfb8      	it	lt
 8013bfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013bfe:	3402      	adds	r4, #2
 8013c00:	9305      	str	r3, [sp, #20]
 8013c02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013ce8 <_vfiprintf_r+0x25c>
 8013c06:	7821      	ldrb	r1, [r4, #0]
 8013c08:	2203      	movs	r2, #3
 8013c0a:	4650      	mov	r0, sl
 8013c0c:	f7ec faf0 	bl	80001f0 <memchr>
 8013c10:	b140      	cbz	r0, 8013c24 <_vfiprintf_r+0x198>
 8013c12:	2340      	movs	r3, #64	; 0x40
 8013c14:	eba0 000a 	sub.w	r0, r0, sl
 8013c18:	fa03 f000 	lsl.w	r0, r3, r0
 8013c1c:	9b04      	ldr	r3, [sp, #16]
 8013c1e:	4303      	orrs	r3, r0
 8013c20:	3401      	adds	r4, #1
 8013c22:	9304      	str	r3, [sp, #16]
 8013c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c28:	482c      	ldr	r0, [pc, #176]	; (8013cdc <_vfiprintf_r+0x250>)
 8013c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c2e:	2206      	movs	r2, #6
 8013c30:	f7ec fade 	bl	80001f0 <memchr>
 8013c34:	2800      	cmp	r0, #0
 8013c36:	d03f      	beq.n	8013cb8 <_vfiprintf_r+0x22c>
 8013c38:	4b29      	ldr	r3, [pc, #164]	; (8013ce0 <_vfiprintf_r+0x254>)
 8013c3a:	bb1b      	cbnz	r3, 8013c84 <_vfiprintf_r+0x1f8>
 8013c3c:	9b03      	ldr	r3, [sp, #12]
 8013c3e:	3307      	adds	r3, #7
 8013c40:	f023 0307 	bic.w	r3, r3, #7
 8013c44:	3308      	adds	r3, #8
 8013c46:	9303      	str	r3, [sp, #12]
 8013c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c4a:	443b      	add	r3, r7
 8013c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8013c4e:	e767      	b.n	8013b20 <_vfiprintf_r+0x94>
 8013c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c54:	460c      	mov	r4, r1
 8013c56:	2001      	movs	r0, #1
 8013c58:	e7a5      	b.n	8013ba6 <_vfiprintf_r+0x11a>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	3401      	adds	r4, #1
 8013c5e:	9305      	str	r3, [sp, #20]
 8013c60:	4619      	mov	r1, r3
 8013c62:	f04f 0c0a 	mov.w	ip, #10
 8013c66:	4620      	mov	r0, r4
 8013c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c6c:	3a30      	subs	r2, #48	; 0x30
 8013c6e:	2a09      	cmp	r2, #9
 8013c70:	d903      	bls.n	8013c7a <_vfiprintf_r+0x1ee>
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d0c5      	beq.n	8013c02 <_vfiprintf_r+0x176>
 8013c76:	9105      	str	r1, [sp, #20]
 8013c78:	e7c3      	b.n	8013c02 <_vfiprintf_r+0x176>
 8013c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c7e:	4604      	mov	r4, r0
 8013c80:	2301      	movs	r3, #1
 8013c82:	e7f0      	b.n	8013c66 <_vfiprintf_r+0x1da>
 8013c84:	ab03      	add	r3, sp, #12
 8013c86:	9300      	str	r3, [sp, #0]
 8013c88:	462a      	mov	r2, r5
 8013c8a:	4b16      	ldr	r3, [pc, #88]	; (8013ce4 <_vfiprintf_r+0x258>)
 8013c8c:	a904      	add	r1, sp, #16
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f3af 8000 	nop.w
 8013c94:	4607      	mov	r7, r0
 8013c96:	1c78      	adds	r0, r7, #1
 8013c98:	d1d6      	bne.n	8013c48 <_vfiprintf_r+0x1bc>
 8013c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c9c:	07d9      	lsls	r1, r3, #31
 8013c9e:	d405      	bmi.n	8013cac <_vfiprintf_r+0x220>
 8013ca0:	89ab      	ldrh	r3, [r5, #12]
 8013ca2:	059a      	lsls	r2, r3, #22
 8013ca4:	d402      	bmi.n	8013cac <_vfiprintf_r+0x220>
 8013ca6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ca8:	f7ff feb9 	bl	8013a1e <__retarget_lock_release_recursive>
 8013cac:	89ab      	ldrh	r3, [r5, #12]
 8013cae:	065b      	lsls	r3, r3, #25
 8013cb0:	f53f af12 	bmi.w	8013ad8 <_vfiprintf_r+0x4c>
 8013cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cb6:	e711      	b.n	8013adc <_vfiprintf_r+0x50>
 8013cb8:	ab03      	add	r3, sp, #12
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	462a      	mov	r2, r5
 8013cbe:	4b09      	ldr	r3, [pc, #36]	; (8013ce4 <_vfiprintf_r+0x258>)
 8013cc0:	a904      	add	r1, sp, #16
 8013cc2:	4630      	mov	r0, r6
 8013cc4:	f000 f880 	bl	8013dc8 <_printf_i>
 8013cc8:	e7e4      	b.n	8013c94 <_vfiprintf_r+0x208>
 8013cca:	bf00      	nop
 8013ccc:	08017424 	.word	0x08017424
 8013cd0:	08017444 	.word	0x08017444
 8013cd4:	08017404 	.word	0x08017404
 8013cd8:	08017464 	.word	0x08017464
 8013cdc:	0801746e 	.word	0x0801746e
 8013ce0:	00000000 	.word	0x00000000
 8013ce4:	08013a67 	.word	0x08013a67
 8013ce8:	0801746a 	.word	0x0801746a

08013cec <_printf_common>:
 8013cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf0:	4616      	mov	r6, r2
 8013cf2:	4699      	mov	r9, r3
 8013cf4:	688a      	ldr	r2, [r1, #8]
 8013cf6:	690b      	ldr	r3, [r1, #16]
 8013cf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	bfb8      	it	lt
 8013d00:	4613      	movlt	r3, r2
 8013d02:	6033      	str	r3, [r6, #0]
 8013d04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d08:	4607      	mov	r7, r0
 8013d0a:	460c      	mov	r4, r1
 8013d0c:	b10a      	cbz	r2, 8013d12 <_printf_common+0x26>
 8013d0e:	3301      	adds	r3, #1
 8013d10:	6033      	str	r3, [r6, #0]
 8013d12:	6823      	ldr	r3, [r4, #0]
 8013d14:	0699      	lsls	r1, r3, #26
 8013d16:	bf42      	ittt	mi
 8013d18:	6833      	ldrmi	r3, [r6, #0]
 8013d1a:	3302      	addmi	r3, #2
 8013d1c:	6033      	strmi	r3, [r6, #0]
 8013d1e:	6825      	ldr	r5, [r4, #0]
 8013d20:	f015 0506 	ands.w	r5, r5, #6
 8013d24:	d106      	bne.n	8013d34 <_printf_common+0x48>
 8013d26:	f104 0a19 	add.w	sl, r4, #25
 8013d2a:	68e3      	ldr	r3, [r4, #12]
 8013d2c:	6832      	ldr	r2, [r6, #0]
 8013d2e:	1a9b      	subs	r3, r3, r2
 8013d30:	42ab      	cmp	r3, r5
 8013d32:	dc26      	bgt.n	8013d82 <_printf_common+0x96>
 8013d34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d38:	1e13      	subs	r3, r2, #0
 8013d3a:	6822      	ldr	r2, [r4, #0]
 8013d3c:	bf18      	it	ne
 8013d3e:	2301      	movne	r3, #1
 8013d40:	0692      	lsls	r2, r2, #26
 8013d42:	d42b      	bmi.n	8013d9c <_printf_common+0xb0>
 8013d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d48:	4649      	mov	r1, r9
 8013d4a:	4638      	mov	r0, r7
 8013d4c:	47c0      	blx	r8
 8013d4e:	3001      	adds	r0, #1
 8013d50:	d01e      	beq.n	8013d90 <_printf_common+0xa4>
 8013d52:	6823      	ldr	r3, [r4, #0]
 8013d54:	68e5      	ldr	r5, [r4, #12]
 8013d56:	6832      	ldr	r2, [r6, #0]
 8013d58:	f003 0306 	and.w	r3, r3, #6
 8013d5c:	2b04      	cmp	r3, #4
 8013d5e:	bf08      	it	eq
 8013d60:	1aad      	subeq	r5, r5, r2
 8013d62:	68a3      	ldr	r3, [r4, #8]
 8013d64:	6922      	ldr	r2, [r4, #16]
 8013d66:	bf0c      	ite	eq
 8013d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d6c:	2500      	movne	r5, #0
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	bfc4      	itt	gt
 8013d72:	1a9b      	subgt	r3, r3, r2
 8013d74:	18ed      	addgt	r5, r5, r3
 8013d76:	2600      	movs	r6, #0
 8013d78:	341a      	adds	r4, #26
 8013d7a:	42b5      	cmp	r5, r6
 8013d7c:	d11a      	bne.n	8013db4 <_printf_common+0xc8>
 8013d7e:	2000      	movs	r0, #0
 8013d80:	e008      	b.n	8013d94 <_printf_common+0xa8>
 8013d82:	2301      	movs	r3, #1
 8013d84:	4652      	mov	r2, sl
 8013d86:	4649      	mov	r1, r9
 8013d88:	4638      	mov	r0, r7
 8013d8a:	47c0      	blx	r8
 8013d8c:	3001      	adds	r0, #1
 8013d8e:	d103      	bne.n	8013d98 <_printf_common+0xac>
 8013d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d98:	3501      	adds	r5, #1
 8013d9a:	e7c6      	b.n	8013d2a <_printf_common+0x3e>
 8013d9c:	18e1      	adds	r1, r4, r3
 8013d9e:	1c5a      	adds	r2, r3, #1
 8013da0:	2030      	movs	r0, #48	; 0x30
 8013da2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013da6:	4422      	add	r2, r4
 8013da8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013dac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013db0:	3302      	adds	r3, #2
 8013db2:	e7c7      	b.n	8013d44 <_printf_common+0x58>
 8013db4:	2301      	movs	r3, #1
 8013db6:	4622      	mov	r2, r4
 8013db8:	4649      	mov	r1, r9
 8013dba:	4638      	mov	r0, r7
 8013dbc:	47c0      	blx	r8
 8013dbe:	3001      	adds	r0, #1
 8013dc0:	d0e6      	beq.n	8013d90 <_printf_common+0xa4>
 8013dc2:	3601      	adds	r6, #1
 8013dc4:	e7d9      	b.n	8013d7a <_printf_common+0x8e>
	...

08013dc8 <_printf_i>:
 8013dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013dcc:	7e0f      	ldrb	r7, [r1, #24]
 8013dce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013dd0:	2f78      	cmp	r7, #120	; 0x78
 8013dd2:	4691      	mov	r9, r2
 8013dd4:	4680      	mov	r8, r0
 8013dd6:	460c      	mov	r4, r1
 8013dd8:	469a      	mov	sl, r3
 8013dda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013dde:	d807      	bhi.n	8013df0 <_printf_i+0x28>
 8013de0:	2f62      	cmp	r7, #98	; 0x62
 8013de2:	d80a      	bhi.n	8013dfa <_printf_i+0x32>
 8013de4:	2f00      	cmp	r7, #0
 8013de6:	f000 80d8 	beq.w	8013f9a <_printf_i+0x1d2>
 8013dea:	2f58      	cmp	r7, #88	; 0x58
 8013dec:	f000 80a3 	beq.w	8013f36 <_printf_i+0x16e>
 8013df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013df8:	e03a      	b.n	8013e70 <_printf_i+0xa8>
 8013dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013dfe:	2b15      	cmp	r3, #21
 8013e00:	d8f6      	bhi.n	8013df0 <_printf_i+0x28>
 8013e02:	a101      	add	r1, pc, #4	; (adr r1, 8013e08 <_printf_i+0x40>)
 8013e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e08:	08013e61 	.word	0x08013e61
 8013e0c:	08013e75 	.word	0x08013e75
 8013e10:	08013df1 	.word	0x08013df1
 8013e14:	08013df1 	.word	0x08013df1
 8013e18:	08013df1 	.word	0x08013df1
 8013e1c:	08013df1 	.word	0x08013df1
 8013e20:	08013e75 	.word	0x08013e75
 8013e24:	08013df1 	.word	0x08013df1
 8013e28:	08013df1 	.word	0x08013df1
 8013e2c:	08013df1 	.word	0x08013df1
 8013e30:	08013df1 	.word	0x08013df1
 8013e34:	08013f81 	.word	0x08013f81
 8013e38:	08013ea5 	.word	0x08013ea5
 8013e3c:	08013f63 	.word	0x08013f63
 8013e40:	08013df1 	.word	0x08013df1
 8013e44:	08013df1 	.word	0x08013df1
 8013e48:	08013fa3 	.word	0x08013fa3
 8013e4c:	08013df1 	.word	0x08013df1
 8013e50:	08013ea5 	.word	0x08013ea5
 8013e54:	08013df1 	.word	0x08013df1
 8013e58:	08013df1 	.word	0x08013df1
 8013e5c:	08013f6b 	.word	0x08013f6b
 8013e60:	682b      	ldr	r3, [r5, #0]
 8013e62:	1d1a      	adds	r2, r3, #4
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	602a      	str	r2, [r5, #0]
 8013e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e70:	2301      	movs	r3, #1
 8013e72:	e0a3      	b.n	8013fbc <_printf_i+0x1f4>
 8013e74:	6820      	ldr	r0, [r4, #0]
 8013e76:	6829      	ldr	r1, [r5, #0]
 8013e78:	0606      	lsls	r6, r0, #24
 8013e7a:	f101 0304 	add.w	r3, r1, #4
 8013e7e:	d50a      	bpl.n	8013e96 <_printf_i+0xce>
 8013e80:	680e      	ldr	r6, [r1, #0]
 8013e82:	602b      	str	r3, [r5, #0]
 8013e84:	2e00      	cmp	r6, #0
 8013e86:	da03      	bge.n	8013e90 <_printf_i+0xc8>
 8013e88:	232d      	movs	r3, #45	; 0x2d
 8013e8a:	4276      	negs	r6, r6
 8013e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e90:	485e      	ldr	r0, [pc, #376]	; (801400c <_printf_i+0x244>)
 8013e92:	230a      	movs	r3, #10
 8013e94:	e019      	b.n	8013eca <_printf_i+0x102>
 8013e96:	680e      	ldr	r6, [r1, #0]
 8013e98:	602b      	str	r3, [r5, #0]
 8013e9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013e9e:	bf18      	it	ne
 8013ea0:	b236      	sxthne	r6, r6
 8013ea2:	e7ef      	b.n	8013e84 <_printf_i+0xbc>
 8013ea4:	682b      	ldr	r3, [r5, #0]
 8013ea6:	6820      	ldr	r0, [r4, #0]
 8013ea8:	1d19      	adds	r1, r3, #4
 8013eaa:	6029      	str	r1, [r5, #0]
 8013eac:	0601      	lsls	r1, r0, #24
 8013eae:	d501      	bpl.n	8013eb4 <_printf_i+0xec>
 8013eb0:	681e      	ldr	r6, [r3, #0]
 8013eb2:	e002      	b.n	8013eba <_printf_i+0xf2>
 8013eb4:	0646      	lsls	r6, r0, #25
 8013eb6:	d5fb      	bpl.n	8013eb0 <_printf_i+0xe8>
 8013eb8:	881e      	ldrh	r6, [r3, #0]
 8013eba:	4854      	ldr	r0, [pc, #336]	; (801400c <_printf_i+0x244>)
 8013ebc:	2f6f      	cmp	r7, #111	; 0x6f
 8013ebe:	bf0c      	ite	eq
 8013ec0:	2308      	moveq	r3, #8
 8013ec2:	230a      	movne	r3, #10
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013eca:	6865      	ldr	r5, [r4, #4]
 8013ecc:	60a5      	str	r5, [r4, #8]
 8013ece:	2d00      	cmp	r5, #0
 8013ed0:	bfa2      	ittt	ge
 8013ed2:	6821      	ldrge	r1, [r4, #0]
 8013ed4:	f021 0104 	bicge.w	r1, r1, #4
 8013ed8:	6021      	strge	r1, [r4, #0]
 8013eda:	b90e      	cbnz	r6, 8013ee0 <_printf_i+0x118>
 8013edc:	2d00      	cmp	r5, #0
 8013ede:	d04d      	beq.n	8013f7c <_printf_i+0x1b4>
 8013ee0:	4615      	mov	r5, r2
 8013ee2:	fbb6 f1f3 	udiv	r1, r6, r3
 8013ee6:	fb03 6711 	mls	r7, r3, r1, r6
 8013eea:	5dc7      	ldrb	r7, [r0, r7]
 8013eec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013ef0:	4637      	mov	r7, r6
 8013ef2:	42bb      	cmp	r3, r7
 8013ef4:	460e      	mov	r6, r1
 8013ef6:	d9f4      	bls.n	8013ee2 <_printf_i+0x11a>
 8013ef8:	2b08      	cmp	r3, #8
 8013efa:	d10b      	bne.n	8013f14 <_printf_i+0x14c>
 8013efc:	6823      	ldr	r3, [r4, #0]
 8013efe:	07de      	lsls	r6, r3, #31
 8013f00:	d508      	bpl.n	8013f14 <_printf_i+0x14c>
 8013f02:	6923      	ldr	r3, [r4, #16]
 8013f04:	6861      	ldr	r1, [r4, #4]
 8013f06:	4299      	cmp	r1, r3
 8013f08:	bfde      	ittt	le
 8013f0a:	2330      	movle	r3, #48	; 0x30
 8013f0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013f14:	1b52      	subs	r2, r2, r5
 8013f16:	6122      	str	r2, [r4, #16]
 8013f18:	f8cd a000 	str.w	sl, [sp]
 8013f1c:	464b      	mov	r3, r9
 8013f1e:	aa03      	add	r2, sp, #12
 8013f20:	4621      	mov	r1, r4
 8013f22:	4640      	mov	r0, r8
 8013f24:	f7ff fee2 	bl	8013cec <_printf_common>
 8013f28:	3001      	adds	r0, #1
 8013f2a:	d14c      	bne.n	8013fc6 <_printf_i+0x1fe>
 8013f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f30:	b004      	add	sp, #16
 8013f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f36:	4835      	ldr	r0, [pc, #212]	; (801400c <_printf_i+0x244>)
 8013f38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013f3c:	6829      	ldr	r1, [r5, #0]
 8013f3e:	6823      	ldr	r3, [r4, #0]
 8013f40:	f851 6b04 	ldr.w	r6, [r1], #4
 8013f44:	6029      	str	r1, [r5, #0]
 8013f46:	061d      	lsls	r5, r3, #24
 8013f48:	d514      	bpl.n	8013f74 <_printf_i+0x1ac>
 8013f4a:	07df      	lsls	r7, r3, #31
 8013f4c:	bf44      	itt	mi
 8013f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8013f52:	6023      	strmi	r3, [r4, #0]
 8013f54:	b91e      	cbnz	r6, 8013f5e <_printf_i+0x196>
 8013f56:	6823      	ldr	r3, [r4, #0]
 8013f58:	f023 0320 	bic.w	r3, r3, #32
 8013f5c:	6023      	str	r3, [r4, #0]
 8013f5e:	2310      	movs	r3, #16
 8013f60:	e7b0      	b.n	8013ec4 <_printf_i+0xfc>
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	f043 0320 	orr.w	r3, r3, #32
 8013f68:	6023      	str	r3, [r4, #0]
 8013f6a:	2378      	movs	r3, #120	; 0x78
 8013f6c:	4828      	ldr	r0, [pc, #160]	; (8014010 <_printf_i+0x248>)
 8013f6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f72:	e7e3      	b.n	8013f3c <_printf_i+0x174>
 8013f74:	0659      	lsls	r1, r3, #25
 8013f76:	bf48      	it	mi
 8013f78:	b2b6      	uxthmi	r6, r6
 8013f7a:	e7e6      	b.n	8013f4a <_printf_i+0x182>
 8013f7c:	4615      	mov	r5, r2
 8013f7e:	e7bb      	b.n	8013ef8 <_printf_i+0x130>
 8013f80:	682b      	ldr	r3, [r5, #0]
 8013f82:	6826      	ldr	r6, [r4, #0]
 8013f84:	6961      	ldr	r1, [r4, #20]
 8013f86:	1d18      	adds	r0, r3, #4
 8013f88:	6028      	str	r0, [r5, #0]
 8013f8a:	0635      	lsls	r5, r6, #24
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	d501      	bpl.n	8013f94 <_printf_i+0x1cc>
 8013f90:	6019      	str	r1, [r3, #0]
 8013f92:	e002      	b.n	8013f9a <_printf_i+0x1d2>
 8013f94:	0670      	lsls	r0, r6, #25
 8013f96:	d5fb      	bpl.n	8013f90 <_printf_i+0x1c8>
 8013f98:	8019      	strh	r1, [r3, #0]
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	6123      	str	r3, [r4, #16]
 8013f9e:	4615      	mov	r5, r2
 8013fa0:	e7ba      	b.n	8013f18 <_printf_i+0x150>
 8013fa2:	682b      	ldr	r3, [r5, #0]
 8013fa4:	1d1a      	adds	r2, r3, #4
 8013fa6:	602a      	str	r2, [r5, #0]
 8013fa8:	681d      	ldr	r5, [r3, #0]
 8013faa:	6862      	ldr	r2, [r4, #4]
 8013fac:	2100      	movs	r1, #0
 8013fae:	4628      	mov	r0, r5
 8013fb0:	f7ec f91e 	bl	80001f0 <memchr>
 8013fb4:	b108      	cbz	r0, 8013fba <_printf_i+0x1f2>
 8013fb6:	1b40      	subs	r0, r0, r5
 8013fb8:	6060      	str	r0, [r4, #4]
 8013fba:	6863      	ldr	r3, [r4, #4]
 8013fbc:	6123      	str	r3, [r4, #16]
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fc4:	e7a8      	b.n	8013f18 <_printf_i+0x150>
 8013fc6:	6923      	ldr	r3, [r4, #16]
 8013fc8:	462a      	mov	r2, r5
 8013fca:	4649      	mov	r1, r9
 8013fcc:	4640      	mov	r0, r8
 8013fce:	47d0      	blx	sl
 8013fd0:	3001      	adds	r0, #1
 8013fd2:	d0ab      	beq.n	8013f2c <_printf_i+0x164>
 8013fd4:	6823      	ldr	r3, [r4, #0]
 8013fd6:	079b      	lsls	r3, r3, #30
 8013fd8:	d413      	bmi.n	8014002 <_printf_i+0x23a>
 8013fda:	68e0      	ldr	r0, [r4, #12]
 8013fdc:	9b03      	ldr	r3, [sp, #12]
 8013fde:	4298      	cmp	r0, r3
 8013fe0:	bfb8      	it	lt
 8013fe2:	4618      	movlt	r0, r3
 8013fe4:	e7a4      	b.n	8013f30 <_printf_i+0x168>
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	4632      	mov	r2, r6
 8013fea:	4649      	mov	r1, r9
 8013fec:	4640      	mov	r0, r8
 8013fee:	47d0      	blx	sl
 8013ff0:	3001      	adds	r0, #1
 8013ff2:	d09b      	beq.n	8013f2c <_printf_i+0x164>
 8013ff4:	3501      	adds	r5, #1
 8013ff6:	68e3      	ldr	r3, [r4, #12]
 8013ff8:	9903      	ldr	r1, [sp, #12]
 8013ffa:	1a5b      	subs	r3, r3, r1
 8013ffc:	42ab      	cmp	r3, r5
 8013ffe:	dcf2      	bgt.n	8013fe6 <_printf_i+0x21e>
 8014000:	e7eb      	b.n	8013fda <_printf_i+0x212>
 8014002:	2500      	movs	r5, #0
 8014004:	f104 0619 	add.w	r6, r4, #25
 8014008:	e7f5      	b.n	8013ff6 <_printf_i+0x22e>
 801400a:	bf00      	nop
 801400c:	08017475 	.word	0x08017475
 8014010:	08017486 	.word	0x08017486

08014014 <__sread>:
 8014014:	b510      	push	{r4, lr}
 8014016:	460c      	mov	r4, r1
 8014018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801401c:	f000 fa5a 	bl	80144d4 <_read_r>
 8014020:	2800      	cmp	r0, #0
 8014022:	bfab      	itete	ge
 8014024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014026:	89a3      	ldrhlt	r3, [r4, #12]
 8014028:	181b      	addge	r3, r3, r0
 801402a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801402e:	bfac      	ite	ge
 8014030:	6563      	strge	r3, [r4, #84]	; 0x54
 8014032:	81a3      	strhlt	r3, [r4, #12]
 8014034:	bd10      	pop	{r4, pc}

08014036 <__swrite>:
 8014036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801403a:	461f      	mov	r7, r3
 801403c:	898b      	ldrh	r3, [r1, #12]
 801403e:	05db      	lsls	r3, r3, #23
 8014040:	4605      	mov	r5, r0
 8014042:	460c      	mov	r4, r1
 8014044:	4616      	mov	r6, r2
 8014046:	d505      	bpl.n	8014054 <__swrite+0x1e>
 8014048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801404c:	2302      	movs	r3, #2
 801404e:	2200      	movs	r2, #0
 8014050:	f000 f9c8 	bl	80143e4 <_lseek_r>
 8014054:	89a3      	ldrh	r3, [r4, #12]
 8014056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801405a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801405e:	81a3      	strh	r3, [r4, #12]
 8014060:	4632      	mov	r2, r6
 8014062:	463b      	mov	r3, r7
 8014064:	4628      	mov	r0, r5
 8014066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801406a:	f000 b869 	b.w	8014140 <_write_r>

0801406e <__sseek>:
 801406e:	b510      	push	{r4, lr}
 8014070:	460c      	mov	r4, r1
 8014072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014076:	f000 f9b5 	bl	80143e4 <_lseek_r>
 801407a:	1c43      	adds	r3, r0, #1
 801407c:	89a3      	ldrh	r3, [r4, #12]
 801407e:	bf15      	itete	ne
 8014080:	6560      	strne	r0, [r4, #84]	; 0x54
 8014082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801408a:	81a3      	strheq	r3, [r4, #12]
 801408c:	bf18      	it	ne
 801408e:	81a3      	strhne	r3, [r4, #12]
 8014090:	bd10      	pop	{r4, pc}

08014092 <__sclose>:
 8014092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014096:	f000 b8d3 	b.w	8014240 <_close_r>
	...

0801409c <__swbuf_r>:
 801409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801409e:	460e      	mov	r6, r1
 80140a0:	4614      	mov	r4, r2
 80140a2:	4605      	mov	r5, r0
 80140a4:	b118      	cbz	r0, 80140ae <__swbuf_r+0x12>
 80140a6:	6983      	ldr	r3, [r0, #24]
 80140a8:	b90b      	cbnz	r3, 80140ae <__swbuf_r+0x12>
 80140aa:	f7ff fc19 	bl	80138e0 <__sinit>
 80140ae:	4b21      	ldr	r3, [pc, #132]	; (8014134 <__swbuf_r+0x98>)
 80140b0:	429c      	cmp	r4, r3
 80140b2:	d12b      	bne.n	801410c <__swbuf_r+0x70>
 80140b4:	686c      	ldr	r4, [r5, #4]
 80140b6:	69a3      	ldr	r3, [r4, #24]
 80140b8:	60a3      	str	r3, [r4, #8]
 80140ba:	89a3      	ldrh	r3, [r4, #12]
 80140bc:	071a      	lsls	r2, r3, #28
 80140be:	d52f      	bpl.n	8014120 <__swbuf_r+0x84>
 80140c0:	6923      	ldr	r3, [r4, #16]
 80140c2:	b36b      	cbz	r3, 8014120 <__swbuf_r+0x84>
 80140c4:	6923      	ldr	r3, [r4, #16]
 80140c6:	6820      	ldr	r0, [r4, #0]
 80140c8:	1ac0      	subs	r0, r0, r3
 80140ca:	6963      	ldr	r3, [r4, #20]
 80140cc:	b2f6      	uxtb	r6, r6
 80140ce:	4283      	cmp	r3, r0
 80140d0:	4637      	mov	r7, r6
 80140d2:	dc04      	bgt.n	80140de <__swbuf_r+0x42>
 80140d4:	4621      	mov	r1, r4
 80140d6:	4628      	mov	r0, r5
 80140d8:	f000 f948 	bl	801436c <_fflush_r>
 80140dc:	bb30      	cbnz	r0, 801412c <__swbuf_r+0x90>
 80140de:	68a3      	ldr	r3, [r4, #8]
 80140e0:	3b01      	subs	r3, #1
 80140e2:	60a3      	str	r3, [r4, #8]
 80140e4:	6823      	ldr	r3, [r4, #0]
 80140e6:	1c5a      	adds	r2, r3, #1
 80140e8:	6022      	str	r2, [r4, #0]
 80140ea:	701e      	strb	r6, [r3, #0]
 80140ec:	6963      	ldr	r3, [r4, #20]
 80140ee:	3001      	adds	r0, #1
 80140f0:	4283      	cmp	r3, r0
 80140f2:	d004      	beq.n	80140fe <__swbuf_r+0x62>
 80140f4:	89a3      	ldrh	r3, [r4, #12]
 80140f6:	07db      	lsls	r3, r3, #31
 80140f8:	d506      	bpl.n	8014108 <__swbuf_r+0x6c>
 80140fa:	2e0a      	cmp	r6, #10
 80140fc:	d104      	bne.n	8014108 <__swbuf_r+0x6c>
 80140fe:	4621      	mov	r1, r4
 8014100:	4628      	mov	r0, r5
 8014102:	f000 f933 	bl	801436c <_fflush_r>
 8014106:	b988      	cbnz	r0, 801412c <__swbuf_r+0x90>
 8014108:	4638      	mov	r0, r7
 801410a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801410c:	4b0a      	ldr	r3, [pc, #40]	; (8014138 <__swbuf_r+0x9c>)
 801410e:	429c      	cmp	r4, r3
 8014110:	d101      	bne.n	8014116 <__swbuf_r+0x7a>
 8014112:	68ac      	ldr	r4, [r5, #8]
 8014114:	e7cf      	b.n	80140b6 <__swbuf_r+0x1a>
 8014116:	4b09      	ldr	r3, [pc, #36]	; (801413c <__swbuf_r+0xa0>)
 8014118:	429c      	cmp	r4, r3
 801411a:	bf08      	it	eq
 801411c:	68ec      	ldreq	r4, [r5, #12]
 801411e:	e7ca      	b.n	80140b6 <__swbuf_r+0x1a>
 8014120:	4621      	mov	r1, r4
 8014122:	4628      	mov	r0, r5
 8014124:	f000 f81e 	bl	8014164 <__swsetup_r>
 8014128:	2800      	cmp	r0, #0
 801412a:	d0cb      	beq.n	80140c4 <__swbuf_r+0x28>
 801412c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014130:	e7ea      	b.n	8014108 <__swbuf_r+0x6c>
 8014132:	bf00      	nop
 8014134:	08017424 	.word	0x08017424
 8014138:	08017444 	.word	0x08017444
 801413c:	08017404 	.word	0x08017404

08014140 <_write_r>:
 8014140:	b538      	push	{r3, r4, r5, lr}
 8014142:	4d07      	ldr	r5, [pc, #28]	; (8014160 <_write_r+0x20>)
 8014144:	4604      	mov	r4, r0
 8014146:	4608      	mov	r0, r1
 8014148:	4611      	mov	r1, r2
 801414a:	2200      	movs	r2, #0
 801414c:	602a      	str	r2, [r5, #0]
 801414e:	461a      	mov	r2, r3
 8014150:	f7ee f905 	bl	800235e <_write>
 8014154:	1c43      	adds	r3, r0, #1
 8014156:	d102      	bne.n	801415e <_write_r+0x1e>
 8014158:	682b      	ldr	r3, [r5, #0]
 801415a:	b103      	cbz	r3, 801415e <_write_r+0x1e>
 801415c:	6023      	str	r3, [r4, #0]
 801415e:	bd38      	pop	{r3, r4, r5, pc}
 8014160:	2001ee88 	.word	0x2001ee88

08014164 <__swsetup_r>:
 8014164:	4b32      	ldr	r3, [pc, #200]	; (8014230 <__swsetup_r+0xcc>)
 8014166:	b570      	push	{r4, r5, r6, lr}
 8014168:	681d      	ldr	r5, [r3, #0]
 801416a:	4606      	mov	r6, r0
 801416c:	460c      	mov	r4, r1
 801416e:	b125      	cbz	r5, 801417a <__swsetup_r+0x16>
 8014170:	69ab      	ldr	r3, [r5, #24]
 8014172:	b913      	cbnz	r3, 801417a <__swsetup_r+0x16>
 8014174:	4628      	mov	r0, r5
 8014176:	f7ff fbb3 	bl	80138e0 <__sinit>
 801417a:	4b2e      	ldr	r3, [pc, #184]	; (8014234 <__swsetup_r+0xd0>)
 801417c:	429c      	cmp	r4, r3
 801417e:	d10f      	bne.n	80141a0 <__swsetup_r+0x3c>
 8014180:	686c      	ldr	r4, [r5, #4]
 8014182:	89a3      	ldrh	r3, [r4, #12]
 8014184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014188:	0719      	lsls	r1, r3, #28
 801418a:	d42c      	bmi.n	80141e6 <__swsetup_r+0x82>
 801418c:	06dd      	lsls	r5, r3, #27
 801418e:	d411      	bmi.n	80141b4 <__swsetup_r+0x50>
 8014190:	2309      	movs	r3, #9
 8014192:	6033      	str	r3, [r6, #0]
 8014194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014198:	81a3      	strh	r3, [r4, #12]
 801419a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801419e:	e03e      	b.n	801421e <__swsetup_r+0xba>
 80141a0:	4b25      	ldr	r3, [pc, #148]	; (8014238 <__swsetup_r+0xd4>)
 80141a2:	429c      	cmp	r4, r3
 80141a4:	d101      	bne.n	80141aa <__swsetup_r+0x46>
 80141a6:	68ac      	ldr	r4, [r5, #8]
 80141a8:	e7eb      	b.n	8014182 <__swsetup_r+0x1e>
 80141aa:	4b24      	ldr	r3, [pc, #144]	; (801423c <__swsetup_r+0xd8>)
 80141ac:	429c      	cmp	r4, r3
 80141ae:	bf08      	it	eq
 80141b0:	68ec      	ldreq	r4, [r5, #12]
 80141b2:	e7e6      	b.n	8014182 <__swsetup_r+0x1e>
 80141b4:	0758      	lsls	r0, r3, #29
 80141b6:	d512      	bpl.n	80141de <__swsetup_r+0x7a>
 80141b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141ba:	b141      	cbz	r1, 80141ce <__swsetup_r+0x6a>
 80141bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141c0:	4299      	cmp	r1, r3
 80141c2:	d002      	beq.n	80141ca <__swsetup_r+0x66>
 80141c4:	4630      	mov	r0, r6
 80141c6:	f7ff fa2b 	bl	8013620 <_free_r>
 80141ca:	2300      	movs	r3, #0
 80141cc:	6363      	str	r3, [r4, #52]	; 0x34
 80141ce:	89a3      	ldrh	r3, [r4, #12]
 80141d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80141d4:	81a3      	strh	r3, [r4, #12]
 80141d6:	2300      	movs	r3, #0
 80141d8:	6063      	str	r3, [r4, #4]
 80141da:	6923      	ldr	r3, [r4, #16]
 80141dc:	6023      	str	r3, [r4, #0]
 80141de:	89a3      	ldrh	r3, [r4, #12]
 80141e0:	f043 0308 	orr.w	r3, r3, #8
 80141e4:	81a3      	strh	r3, [r4, #12]
 80141e6:	6923      	ldr	r3, [r4, #16]
 80141e8:	b94b      	cbnz	r3, 80141fe <__swsetup_r+0x9a>
 80141ea:	89a3      	ldrh	r3, [r4, #12]
 80141ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80141f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141f4:	d003      	beq.n	80141fe <__swsetup_r+0x9a>
 80141f6:	4621      	mov	r1, r4
 80141f8:	4630      	mov	r0, r6
 80141fa:	f000 f92b 	bl	8014454 <__smakebuf_r>
 80141fe:	89a0      	ldrh	r0, [r4, #12]
 8014200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014204:	f010 0301 	ands.w	r3, r0, #1
 8014208:	d00a      	beq.n	8014220 <__swsetup_r+0xbc>
 801420a:	2300      	movs	r3, #0
 801420c:	60a3      	str	r3, [r4, #8]
 801420e:	6963      	ldr	r3, [r4, #20]
 8014210:	425b      	negs	r3, r3
 8014212:	61a3      	str	r3, [r4, #24]
 8014214:	6923      	ldr	r3, [r4, #16]
 8014216:	b943      	cbnz	r3, 801422a <__swsetup_r+0xc6>
 8014218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801421c:	d1ba      	bne.n	8014194 <__swsetup_r+0x30>
 801421e:	bd70      	pop	{r4, r5, r6, pc}
 8014220:	0781      	lsls	r1, r0, #30
 8014222:	bf58      	it	pl
 8014224:	6963      	ldrpl	r3, [r4, #20]
 8014226:	60a3      	str	r3, [r4, #8]
 8014228:	e7f4      	b.n	8014214 <__swsetup_r+0xb0>
 801422a:	2000      	movs	r0, #0
 801422c:	e7f7      	b.n	801421e <__swsetup_r+0xba>
 801422e:	bf00      	nop
 8014230:	2001c5ac 	.word	0x2001c5ac
 8014234:	08017424 	.word	0x08017424
 8014238:	08017444 	.word	0x08017444
 801423c:	08017404 	.word	0x08017404

08014240 <_close_r>:
 8014240:	b538      	push	{r3, r4, r5, lr}
 8014242:	4d06      	ldr	r5, [pc, #24]	; (801425c <_close_r+0x1c>)
 8014244:	2300      	movs	r3, #0
 8014246:	4604      	mov	r4, r0
 8014248:	4608      	mov	r0, r1
 801424a:	602b      	str	r3, [r5, #0]
 801424c:	f7ee f8a3 	bl	8002396 <_close>
 8014250:	1c43      	adds	r3, r0, #1
 8014252:	d102      	bne.n	801425a <_close_r+0x1a>
 8014254:	682b      	ldr	r3, [r5, #0]
 8014256:	b103      	cbz	r3, 801425a <_close_r+0x1a>
 8014258:	6023      	str	r3, [r4, #0]
 801425a:	bd38      	pop	{r3, r4, r5, pc}
 801425c:	2001ee88 	.word	0x2001ee88

08014260 <__sflush_r>:
 8014260:	898a      	ldrh	r2, [r1, #12]
 8014262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014266:	4605      	mov	r5, r0
 8014268:	0710      	lsls	r0, r2, #28
 801426a:	460c      	mov	r4, r1
 801426c:	d458      	bmi.n	8014320 <__sflush_r+0xc0>
 801426e:	684b      	ldr	r3, [r1, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	dc05      	bgt.n	8014280 <__sflush_r+0x20>
 8014274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014276:	2b00      	cmp	r3, #0
 8014278:	dc02      	bgt.n	8014280 <__sflush_r+0x20>
 801427a:	2000      	movs	r0, #0
 801427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014282:	2e00      	cmp	r6, #0
 8014284:	d0f9      	beq.n	801427a <__sflush_r+0x1a>
 8014286:	2300      	movs	r3, #0
 8014288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801428c:	682f      	ldr	r7, [r5, #0]
 801428e:	602b      	str	r3, [r5, #0]
 8014290:	d032      	beq.n	80142f8 <__sflush_r+0x98>
 8014292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014294:	89a3      	ldrh	r3, [r4, #12]
 8014296:	075a      	lsls	r2, r3, #29
 8014298:	d505      	bpl.n	80142a6 <__sflush_r+0x46>
 801429a:	6863      	ldr	r3, [r4, #4]
 801429c:	1ac0      	subs	r0, r0, r3
 801429e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142a0:	b10b      	cbz	r3, 80142a6 <__sflush_r+0x46>
 80142a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142a4:	1ac0      	subs	r0, r0, r3
 80142a6:	2300      	movs	r3, #0
 80142a8:	4602      	mov	r2, r0
 80142aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ac:	6a21      	ldr	r1, [r4, #32]
 80142ae:	4628      	mov	r0, r5
 80142b0:	47b0      	blx	r6
 80142b2:	1c43      	adds	r3, r0, #1
 80142b4:	89a3      	ldrh	r3, [r4, #12]
 80142b6:	d106      	bne.n	80142c6 <__sflush_r+0x66>
 80142b8:	6829      	ldr	r1, [r5, #0]
 80142ba:	291d      	cmp	r1, #29
 80142bc:	d82c      	bhi.n	8014318 <__sflush_r+0xb8>
 80142be:	4a2a      	ldr	r2, [pc, #168]	; (8014368 <__sflush_r+0x108>)
 80142c0:	40ca      	lsrs	r2, r1
 80142c2:	07d6      	lsls	r6, r2, #31
 80142c4:	d528      	bpl.n	8014318 <__sflush_r+0xb8>
 80142c6:	2200      	movs	r2, #0
 80142c8:	6062      	str	r2, [r4, #4]
 80142ca:	04d9      	lsls	r1, r3, #19
 80142cc:	6922      	ldr	r2, [r4, #16]
 80142ce:	6022      	str	r2, [r4, #0]
 80142d0:	d504      	bpl.n	80142dc <__sflush_r+0x7c>
 80142d2:	1c42      	adds	r2, r0, #1
 80142d4:	d101      	bne.n	80142da <__sflush_r+0x7a>
 80142d6:	682b      	ldr	r3, [r5, #0]
 80142d8:	b903      	cbnz	r3, 80142dc <__sflush_r+0x7c>
 80142da:	6560      	str	r0, [r4, #84]	; 0x54
 80142dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80142de:	602f      	str	r7, [r5, #0]
 80142e0:	2900      	cmp	r1, #0
 80142e2:	d0ca      	beq.n	801427a <__sflush_r+0x1a>
 80142e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142e8:	4299      	cmp	r1, r3
 80142ea:	d002      	beq.n	80142f2 <__sflush_r+0x92>
 80142ec:	4628      	mov	r0, r5
 80142ee:	f7ff f997 	bl	8013620 <_free_r>
 80142f2:	2000      	movs	r0, #0
 80142f4:	6360      	str	r0, [r4, #52]	; 0x34
 80142f6:	e7c1      	b.n	801427c <__sflush_r+0x1c>
 80142f8:	6a21      	ldr	r1, [r4, #32]
 80142fa:	2301      	movs	r3, #1
 80142fc:	4628      	mov	r0, r5
 80142fe:	47b0      	blx	r6
 8014300:	1c41      	adds	r1, r0, #1
 8014302:	d1c7      	bne.n	8014294 <__sflush_r+0x34>
 8014304:	682b      	ldr	r3, [r5, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d0c4      	beq.n	8014294 <__sflush_r+0x34>
 801430a:	2b1d      	cmp	r3, #29
 801430c:	d001      	beq.n	8014312 <__sflush_r+0xb2>
 801430e:	2b16      	cmp	r3, #22
 8014310:	d101      	bne.n	8014316 <__sflush_r+0xb6>
 8014312:	602f      	str	r7, [r5, #0]
 8014314:	e7b1      	b.n	801427a <__sflush_r+0x1a>
 8014316:	89a3      	ldrh	r3, [r4, #12]
 8014318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801431c:	81a3      	strh	r3, [r4, #12]
 801431e:	e7ad      	b.n	801427c <__sflush_r+0x1c>
 8014320:	690f      	ldr	r7, [r1, #16]
 8014322:	2f00      	cmp	r7, #0
 8014324:	d0a9      	beq.n	801427a <__sflush_r+0x1a>
 8014326:	0793      	lsls	r3, r2, #30
 8014328:	680e      	ldr	r6, [r1, #0]
 801432a:	bf08      	it	eq
 801432c:	694b      	ldreq	r3, [r1, #20]
 801432e:	600f      	str	r7, [r1, #0]
 8014330:	bf18      	it	ne
 8014332:	2300      	movne	r3, #0
 8014334:	eba6 0807 	sub.w	r8, r6, r7
 8014338:	608b      	str	r3, [r1, #8]
 801433a:	f1b8 0f00 	cmp.w	r8, #0
 801433e:	dd9c      	ble.n	801427a <__sflush_r+0x1a>
 8014340:	6a21      	ldr	r1, [r4, #32]
 8014342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014344:	4643      	mov	r3, r8
 8014346:	463a      	mov	r2, r7
 8014348:	4628      	mov	r0, r5
 801434a:	47b0      	blx	r6
 801434c:	2800      	cmp	r0, #0
 801434e:	dc06      	bgt.n	801435e <__sflush_r+0xfe>
 8014350:	89a3      	ldrh	r3, [r4, #12]
 8014352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014356:	81a3      	strh	r3, [r4, #12]
 8014358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801435c:	e78e      	b.n	801427c <__sflush_r+0x1c>
 801435e:	4407      	add	r7, r0
 8014360:	eba8 0800 	sub.w	r8, r8, r0
 8014364:	e7e9      	b.n	801433a <__sflush_r+0xda>
 8014366:	bf00      	nop
 8014368:	20400001 	.word	0x20400001

0801436c <_fflush_r>:
 801436c:	b538      	push	{r3, r4, r5, lr}
 801436e:	690b      	ldr	r3, [r1, #16]
 8014370:	4605      	mov	r5, r0
 8014372:	460c      	mov	r4, r1
 8014374:	b913      	cbnz	r3, 801437c <_fflush_r+0x10>
 8014376:	2500      	movs	r5, #0
 8014378:	4628      	mov	r0, r5
 801437a:	bd38      	pop	{r3, r4, r5, pc}
 801437c:	b118      	cbz	r0, 8014386 <_fflush_r+0x1a>
 801437e:	6983      	ldr	r3, [r0, #24]
 8014380:	b90b      	cbnz	r3, 8014386 <_fflush_r+0x1a>
 8014382:	f7ff faad 	bl	80138e0 <__sinit>
 8014386:	4b14      	ldr	r3, [pc, #80]	; (80143d8 <_fflush_r+0x6c>)
 8014388:	429c      	cmp	r4, r3
 801438a:	d11b      	bne.n	80143c4 <_fflush_r+0x58>
 801438c:	686c      	ldr	r4, [r5, #4]
 801438e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d0ef      	beq.n	8014376 <_fflush_r+0xa>
 8014396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014398:	07d0      	lsls	r0, r2, #31
 801439a:	d404      	bmi.n	80143a6 <_fflush_r+0x3a>
 801439c:	0599      	lsls	r1, r3, #22
 801439e:	d402      	bmi.n	80143a6 <_fflush_r+0x3a>
 80143a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143a2:	f7ff fb3b 	bl	8013a1c <__retarget_lock_acquire_recursive>
 80143a6:	4628      	mov	r0, r5
 80143a8:	4621      	mov	r1, r4
 80143aa:	f7ff ff59 	bl	8014260 <__sflush_r>
 80143ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143b0:	07da      	lsls	r2, r3, #31
 80143b2:	4605      	mov	r5, r0
 80143b4:	d4e0      	bmi.n	8014378 <_fflush_r+0xc>
 80143b6:	89a3      	ldrh	r3, [r4, #12]
 80143b8:	059b      	lsls	r3, r3, #22
 80143ba:	d4dd      	bmi.n	8014378 <_fflush_r+0xc>
 80143bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143be:	f7ff fb2e 	bl	8013a1e <__retarget_lock_release_recursive>
 80143c2:	e7d9      	b.n	8014378 <_fflush_r+0xc>
 80143c4:	4b05      	ldr	r3, [pc, #20]	; (80143dc <_fflush_r+0x70>)
 80143c6:	429c      	cmp	r4, r3
 80143c8:	d101      	bne.n	80143ce <_fflush_r+0x62>
 80143ca:	68ac      	ldr	r4, [r5, #8]
 80143cc:	e7df      	b.n	801438e <_fflush_r+0x22>
 80143ce:	4b04      	ldr	r3, [pc, #16]	; (80143e0 <_fflush_r+0x74>)
 80143d0:	429c      	cmp	r4, r3
 80143d2:	bf08      	it	eq
 80143d4:	68ec      	ldreq	r4, [r5, #12]
 80143d6:	e7da      	b.n	801438e <_fflush_r+0x22>
 80143d8:	08017424 	.word	0x08017424
 80143dc:	08017444 	.word	0x08017444
 80143e0:	08017404 	.word	0x08017404

080143e4 <_lseek_r>:
 80143e4:	b538      	push	{r3, r4, r5, lr}
 80143e6:	4d07      	ldr	r5, [pc, #28]	; (8014404 <_lseek_r+0x20>)
 80143e8:	4604      	mov	r4, r0
 80143ea:	4608      	mov	r0, r1
 80143ec:	4611      	mov	r1, r2
 80143ee:	2200      	movs	r2, #0
 80143f0:	602a      	str	r2, [r5, #0]
 80143f2:	461a      	mov	r2, r3
 80143f4:	f7ed fff6 	bl	80023e4 <_lseek>
 80143f8:	1c43      	adds	r3, r0, #1
 80143fa:	d102      	bne.n	8014402 <_lseek_r+0x1e>
 80143fc:	682b      	ldr	r3, [r5, #0]
 80143fe:	b103      	cbz	r3, 8014402 <_lseek_r+0x1e>
 8014400:	6023      	str	r3, [r4, #0]
 8014402:	bd38      	pop	{r3, r4, r5, pc}
 8014404:	2001ee88 	.word	0x2001ee88

08014408 <__swhatbuf_r>:
 8014408:	b570      	push	{r4, r5, r6, lr}
 801440a:	460e      	mov	r6, r1
 801440c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014410:	2900      	cmp	r1, #0
 8014412:	b096      	sub	sp, #88	; 0x58
 8014414:	4614      	mov	r4, r2
 8014416:	461d      	mov	r5, r3
 8014418:	da08      	bge.n	801442c <__swhatbuf_r+0x24>
 801441a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801441e:	2200      	movs	r2, #0
 8014420:	602a      	str	r2, [r5, #0]
 8014422:	061a      	lsls	r2, r3, #24
 8014424:	d410      	bmi.n	8014448 <__swhatbuf_r+0x40>
 8014426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801442a:	e00e      	b.n	801444a <__swhatbuf_r+0x42>
 801442c:	466a      	mov	r2, sp
 801442e:	f000 f863 	bl	80144f8 <_fstat_r>
 8014432:	2800      	cmp	r0, #0
 8014434:	dbf1      	blt.n	801441a <__swhatbuf_r+0x12>
 8014436:	9a01      	ldr	r2, [sp, #4]
 8014438:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801443c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014440:	425a      	negs	r2, r3
 8014442:	415a      	adcs	r2, r3
 8014444:	602a      	str	r2, [r5, #0]
 8014446:	e7ee      	b.n	8014426 <__swhatbuf_r+0x1e>
 8014448:	2340      	movs	r3, #64	; 0x40
 801444a:	2000      	movs	r0, #0
 801444c:	6023      	str	r3, [r4, #0]
 801444e:	b016      	add	sp, #88	; 0x58
 8014450:	bd70      	pop	{r4, r5, r6, pc}
	...

08014454 <__smakebuf_r>:
 8014454:	898b      	ldrh	r3, [r1, #12]
 8014456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014458:	079d      	lsls	r5, r3, #30
 801445a:	4606      	mov	r6, r0
 801445c:	460c      	mov	r4, r1
 801445e:	d507      	bpl.n	8014470 <__smakebuf_r+0x1c>
 8014460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014464:	6023      	str	r3, [r4, #0]
 8014466:	6123      	str	r3, [r4, #16]
 8014468:	2301      	movs	r3, #1
 801446a:	6163      	str	r3, [r4, #20]
 801446c:	b002      	add	sp, #8
 801446e:	bd70      	pop	{r4, r5, r6, pc}
 8014470:	ab01      	add	r3, sp, #4
 8014472:	466a      	mov	r2, sp
 8014474:	f7ff ffc8 	bl	8014408 <__swhatbuf_r>
 8014478:	9900      	ldr	r1, [sp, #0]
 801447a:	4605      	mov	r5, r0
 801447c:	4630      	mov	r0, r6
 801447e:	f7ff f93b 	bl	80136f8 <_malloc_r>
 8014482:	b948      	cbnz	r0, 8014498 <__smakebuf_r+0x44>
 8014484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014488:	059a      	lsls	r2, r3, #22
 801448a:	d4ef      	bmi.n	801446c <__smakebuf_r+0x18>
 801448c:	f023 0303 	bic.w	r3, r3, #3
 8014490:	f043 0302 	orr.w	r3, r3, #2
 8014494:	81a3      	strh	r3, [r4, #12]
 8014496:	e7e3      	b.n	8014460 <__smakebuf_r+0xc>
 8014498:	4b0d      	ldr	r3, [pc, #52]	; (80144d0 <__smakebuf_r+0x7c>)
 801449a:	62b3      	str	r3, [r6, #40]	; 0x28
 801449c:	89a3      	ldrh	r3, [r4, #12]
 801449e:	6020      	str	r0, [r4, #0]
 80144a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144a4:	81a3      	strh	r3, [r4, #12]
 80144a6:	9b00      	ldr	r3, [sp, #0]
 80144a8:	6163      	str	r3, [r4, #20]
 80144aa:	9b01      	ldr	r3, [sp, #4]
 80144ac:	6120      	str	r0, [r4, #16]
 80144ae:	b15b      	cbz	r3, 80144c8 <__smakebuf_r+0x74>
 80144b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144b4:	4630      	mov	r0, r6
 80144b6:	f000 f831 	bl	801451c <_isatty_r>
 80144ba:	b128      	cbz	r0, 80144c8 <__smakebuf_r+0x74>
 80144bc:	89a3      	ldrh	r3, [r4, #12]
 80144be:	f023 0303 	bic.w	r3, r3, #3
 80144c2:	f043 0301 	orr.w	r3, r3, #1
 80144c6:	81a3      	strh	r3, [r4, #12]
 80144c8:	89a0      	ldrh	r0, [r4, #12]
 80144ca:	4305      	orrs	r5, r0
 80144cc:	81a5      	strh	r5, [r4, #12]
 80144ce:	e7cd      	b.n	801446c <__smakebuf_r+0x18>
 80144d0:	08013879 	.word	0x08013879

080144d4 <_read_r>:
 80144d4:	b538      	push	{r3, r4, r5, lr}
 80144d6:	4d07      	ldr	r5, [pc, #28]	; (80144f4 <_read_r+0x20>)
 80144d8:	4604      	mov	r4, r0
 80144da:	4608      	mov	r0, r1
 80144dc:	4611      	mov	r1, r2
 80144de:	2200      	movs	r2, #0
 80144e0:	602a      	str	r2, [r5, #0]
 80144e2:	461a      	mov	r2, r3
 80144e4:	f7ed ff1e 	bl	8002324 <_read>
 80144e8:	1c43      	adds	r3, r0, #1
 80144ea:	d102      	bne.n	80144f2 <_read_r+0x1e>
 80144ec:	682b      	ldr	r3, [r5, #0]
 80144ee:	b103      	cbz	r3, 80144f2 <_read_r+0x1e>
 80144f0:	6023      	str	r3, [r4, #0]
 80144f2:	bd38      	pop	{r3, r4, r5, pc}
 80144f4:	2001ee88 	.word	0x2001ee88

080144f8 <_fstat_r>:
 80144f8:	b538      	push	{r3, r4, r5, lr}
 80144fa:	4d07      	ldr	r5, [pc, #28]	; (8014518 <_fstat_r+0x20>)
 80144fc:	2300      	movs	r3, #0
 80144fe:	4604      	mov	r4, r0
 8014500:	4608      	mov	r0, r1
 8014502:	4611      	mov	r1, r2
 8014504:	602b      	str	r3, [r5, #0]
 8014506:	f7ed ff52 	bl	80023ae <_fstat>
 801450a:	1c43      	adds	r3, r0, #1
 801450c:	d102      	bne.n	8014514 <_fstat_r+0x1c>
 801450e:	682b      	ldr	r3, [r5, #0]
 8014510:	b103      	cbz	r3, 8014514 <_fstat_r+0x1c>
 8014512:	6023      	str	r3, [r4, #0]
 8014514:	bd38      	pop	{r3, r4, r5, pc}
 8014516:	bf00      	nop
 8014518:	2001ee88 	.word	0x2001ee88

0801451c <_isatty_r>:
 801451c:	b538      	push	{r3, r4, r5, lr}
 801451e:	4d06      	ldr	r5, [pc, #24]	; (8014538 <_isatty_r+0x1c>)
 8014520:	2300      	movs	r3, #0
 8014522:	4604      	mov	r4, r0
 8014524:	4608      	mov	r0, r1
 8014526:	602b      	str	r3, [r5, #0]
 8014528:	f7ed ff51 	bl	80023ce <_isatty>
 801452c:	1c43      	adds	r3, r0, #1
 801452e:	d102      	bne.n	8014536 <_isatty_r+0x1a>
 8014530:	682b      	ldr	r3, [r5, #0]
 8014532:	b103      	cbz	r3, 8014536 <_isatty_r+0x1a>
 8014534:	6023      	str	r3, [r4, #0]
 8014536:	bd38      	pop	{r3, r4, r5, pc}
 8014538:	2001ee88 	.word	0x2001ee88

0801453c <_init>:
 801453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801453e:	bf00      	nop
 8014540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014542:	bc08      	pop	{r3}
 8014544:	469e      	mov	lr, r3
 8014546:	4770      	bx	lr

08014548 <_fini>:
 8014548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801454a:	bf00      	nop
 801454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801454e:	bc08      	pop	{r3}
 8014550:	469e      	mov	lr, r3
 8014552:	4770      	bx	lr
