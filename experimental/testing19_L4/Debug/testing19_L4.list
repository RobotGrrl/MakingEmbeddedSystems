
testing19_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f44  08014a90  08014a90  00024a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080179d4  080179d4  0004c380  2**0
                  CONTENTS
  4 .ARM          00000008  080179d4  080179d4  000279d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080179dc  080179dc  0004c380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080179dc  080179dc  000279dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080179e0  080179e0  000279e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001c380  20000000  080179e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000287c  2001c380  08033d64  0004c380  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001ebfc  08033d64  0004ebfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004c380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f10  00000000  00000000  0004c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d85  00000000  00000000  000832c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ee0  00000000  00000000  0008a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c20  00000000  00000000  0008cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003779c  00000000  00000000  0008fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037bd7  00000000  00000000  000c72e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00139936  00000000  00000000  000feebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002387f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf54  00000000  00000000  00238844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2001c380 	.word	0x2001c380
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014a78 	.word	0x08014a78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2001c384 	.word	0x2001c384
 80001ec:	08014a78 	.word	0x08014a78

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <AudioPlay_TransferComplete_CallBack>:
* @retval None
* @note This callback function has been registered during the audio playback
*       setup phase by calling the BSP_AUDIO_OUT_RegisterCallbacks function.
*/
void AudioPlay_TransferComplete_CallBack()
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
//      }
//    }
//  }


}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <AudioPlay_Error_CallBack>:
* @retval None
* @note This callback function has been registered during the audio playback
*       setup phase by calling the BSP_AUDIO_OUT_RegisterCallbacks function.
*/
void AudioPlay_Error_CallBack(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 80005a6:	f001 f84b 	bl	8001640 <Error_Handler>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f006 f997 	bl	80068e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f917 	bl	80007ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005be:	f000 f977 	bl	80008b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fec5 	bl	8001350 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c6:	f000 f9a9 	bl	800091c <MX_ADC1_Init>
  MX_ADC2_Init();
 80005ca:	f000 fa1d 	bl	8000a08 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005ce:	f000 fa7f 	bl	8000ad0 <MX_ADC3_Init>
  MX_DCMI_Init();
 80005d2:	f000 fae1 	bl	8000b98 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 80005d6:	f000 fb13 	bl	8000c00 <MX_DFSDM1_Init>
  MX_FMC_Init();
 80005da:	f000 fe0b 	bl	80011f4 <MX_FMC_Init>
  MX_I2C1_Init();
 80005de:	f000 fb7b 	bl	8000cd8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005e2:	f000 fbb9 	bl	8000d58 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80005e6:	f000 fbf7 	bl	8000dd8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005ea:	f000 fc23 	bl	8000e34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 fc51 	bl	8000e94 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 80005f2:	f000 fc7f 	bl	8000ef4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80005f6:	f000 fca9 	bl	8000f4c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80005fa:	f000 fd4f 	bl	800109c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80005fe:	f000 fd7d 	bl	80010fc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000602:	f000 fdb9 	bl	8001178 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000606:	f012 fc6d 	bl	8012ee4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 800060a:	2001      	movs	r0, #1
 800060c:	f005 fbd4 	bl	8005db8 <BSP_LCD_InitEx>
 8000610:	4603      	mov	r3, r0
 8000612:	2b01      	cmp	r3, #1
 8000614:	d101      	bne.n	800061a <main+0x6a>
	{
		/* Initialization Error */
		Error_Handler();
 8000616:	f001 f813 	bl	8001640 <Error_Handler>
	}

	// the lcd bsp includes the fontNN.c files in the Utilities directory
	// in that file, a struct is declared: FontNN
	BSP_LCD_SetFont(&Font20);
 800061a:	4867      	ldr	r0, [pc, #412]	; (80007b8 <main+0x208>)
 800061c:	f005 fc9a 	bl	8005f54 <BSP_LCD_SetFont>

	// the display is 240 px tall, XYZ px wide
	BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Purple Ball", CENTER_MODE);
 8000620:	2301      	movs	r3, #1
 8000622:	4a66      	ldr	r2, [pc, #408]	; (80007bc <main+0x20c>)
 8000624:	21af      	movs	r1, #175	; 0xaf
 8000626:	2000      	movs	r0, #0
 8000628:	f005 fcce 	bl	8005fc8 <BSP_LCD_DisplayStringAt>



	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 800062c:	f005 fc6a 	bl	8005f04 <BSP_LCD_GetXSize>
 8000630:	4603      	mov	r3, r0
 8000632:	b29c      	uxth	r4, r3
 8000634:	f005 fc72 	bl	8005f1c <BSP_LCD_GetYSize>
 8000638:	4603      	mov	r3, r0
 800063a:	b29b      	uxth	r3, r3
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	4620      	mov	r0, r4
 8000642:	f005 ffe7 	bl	8006614 <BSP_TS_InitEx>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <main+0xa0>
		Error_Handler();
 800064c:	f000 fff8 	bl	8001640 <Error_Handler>


	// audio init

	// should this go here? or after audio init?
	HAL_SAI_MspInit( &BSP_AUDIO_hSai_Tx );
 8000650:	485b      	ldr	r0, [pc, #364]	; (80007c0 <main+0x210>)
 8000652:	f005 f9e7 	bl	8005a24 <HAL_SAI_MspInit>
	// "The WAV audio format was developed by Microsoft and
	// has become one of the primary formats of uncompressed audio.
	// It stores audio at about 10 MB per minute at a 44.1 kHz
	// sample rate using stereo 16-bit samples." // 44.1 kHz
	// how do we know the audio frequency is correct?
	if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLMAX, AUDIO_FREQUENCY_44K) == AUDIO_ERROR ) {
 8000656:	f64a 4244 	movw	r2, #44100	; 0xac44
 800065a:	21ff      	movs	r1, #255	; 0xff
 800065c:	2001      	movs	r0, #1
 800065e:	f004 ff0d 	bl	800547c <BSP_AUDIO_OUT_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d101      	bne.n	800066c <main+0xbc>
		Error_Handler();
 8000668:	f000 ffea 	bl	8001640 <Error_Handler>
	}

	BSP_AUDIO_OUT_ChangeAudioConfig(BSP_AUDIO_OUT_NORMALMODE);//BSP_AUDIO_OUT_MONOMODE);
 800066c:	2002      	movs	r0, #2
 800066e:	f004 ffcd 	bl	800560c <BSP_AUDIO_OUT_ChangeAudioConfig>

	if(BSP_AUDIO_OUT_SetOutputMode(OUTPUT_DEVICE_HEADPHONE) != AUDIO_OK) {
 8000672:	2001      	movs	r0, #1
 8000674:	f004 ffb2 	bl	80055dc <BSP_AUDIO_OUT_SetOutputMode>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <main+0xd2>
		Error_Handler();
 800067e:	f000 ffdf 	bl	8001640 <Error_Handler>

//	if(BSP_AUDIO_OUT_SetFrequency(  ) != AUDIO_OK) {
//		Error_Handler();
//	}

	BSP_AUDIO_OUT_RegisterCallbacks(AudioPlay_Error_CallBack,
 8000682:	4a50      	ldr	r2, [pc, #320]	; (80007c4 <main+0x214>)
 8000684:	2100      	movs	r1, #0
 8000686:	4850      	ldr	r0, [pc, #320]	; (80007c8 <main+0x218>)
 8000688:	f005 f832 	bl	80056f0 <BSP_AUDIO_OUT_RegisterCallbacks>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


  	BSP_TS_GetState(&ts_result);
 800068c:	484f      	ldr	r0, [pc, #316]	; (80007cc <main+0x21c>)
 800068e:	f006 f819 	bl	80066c4 <BSP_TS_GetState>

  	uint8_t num_touches = ts_result.touchDetected;
 8000692:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <main+0x21c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	72fb      	strb	r3, [r7, #11]

  	for(int i=0; i<num_touches; i++) {
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e01d      	b.n	80006da <main+0x12a>
  		Point touch;
  		touch.X = ts_result.touchX[i];
 800069e:	4a4b      	ldr	r2, [pc, #300]	; (80007cc <main+0x21c>)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	885b      	ldrh	r3, [r3, #2]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	80bb      	strh	r3, [r7, #4]
  		touch.Y = ts_result.touchY[i];
 80006ac:	4a47      	ldr	r2, [pc, #284]	; (80007cc <main+0x21c>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	88db      	ldrh	r3, [r3, #6]
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	80fb      	strh	r3, [r7, #6]

  		BSP_LCD_SetTextColor( LCD_COLOR_BLUE );
 80006ba:	201f      	movs	r0, #31
 80006bc:	f005 fc3a 	bl	8005f34 <BSP_LCD_SetTextColor>
  		BSP_LCD_FillCircle(touch.X, touch.Y, 10);
 80006c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006ca:	b291      	uxth	r1, r2
 80006cc:	220a      	movs	r2, #10
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 fe18 	bl	8006304 <BSP_LCD_FillCircle>
  	for(int i=0; i<num_touches; i++) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	7afb      	ldrb	r3, [r7, #11]
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dbdd      	blt.n	800069e <main+0xee>
  	}


  	xpos+=10;
 80006e2:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <main+0x220>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	330a      	adds	r3, #10
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <main+0x220>)
 80006ec:	701a      	strb	r2, [r3, #0]
		if(xpos > BSP_LCD_GetXSize()) {
 80006ee:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <main+0x220>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461c      	mov	r4, r3
 80006f4:	f005 fc06 	bl	8005f04 <BSP_LCD_GetXSize>
 80006f8:	4603      	mov	r3, r0
 80006fa:	429c      	cmp	r4, r3
 80006fc:	d923      	bls.n	8000746 <main+0x196>

			flip = !flip;
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <main+0x224>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <main+0x224>)
 800071a:	701a      	strb	r2, [r3, #0]
			if(flip) {
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <main+0x224>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00a      	beq.n	800073a <main+0x18a>
				if( BSP_AUDIO_OUT_Play( (uint16_t *)wav , 10) == AUDIO_ERROR) {
 8000724:	210a      	movs	r1, #10
 8000726:	482c      	ldr	r0, [pc, #176]	; (80007d8 <main+0x228>)
 8000728:	f004 ff08 	bl	800553c <BSP_AUDIO_OUT_Play>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <main+0x190>
					printf("AUDIO_ERROR");
 8000732:	482a      	ldr	r0, [pc, #168]	; (80007dc <main+0x22c>)
 8000734:	f013 faf2 	bl	8013d1c <iprintf>
 8000738:	e002      	b.n	8000740 <main+0x190>
				}
			} else {
				BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800073a:	2002      	movs	r0, #2
 800073c:	f004 ff2a 	bl	8005594 <BSP_AUDIO_OUT_Stop>
			}

			xpos = 0;
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <main+0x220>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
		}
		new.X = xpos;
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <main+0x220>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <main+0x230>)
 800074e:	801a      	strh	r2, [r3, #0]
		new.Y = ypos;
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <main+0x234>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b21a      	sxth	r2, r3
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <main+0x230>)
 8000758:	805a      	strh	r2, [r3, #2]

		BSP_LCD_SetTextColor( LCD_COLOR_WHITE );
 800075a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800075e:	f005 fbe9 	bl	8005f34 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(prev.X, prev.Y, 20);
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <main+0x238>)
 8000764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000768:	b29b      	uxth	r3, r3
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <main+0x238>)
 800076c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000770:	b291      	uxth	r1, r2
 8000772:	2214      	movs	r2, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f005 fdc5 	bl	8006304 <BSP_LCD_FillCircle>

		//HAL_Delay(100);

		BSP_LCD_SetTextColor( LCD_COLOR_DARKMAGENTA );
 800077a:	f248 0010 	movw	r0, #32784	; 0x8010
 800077e:	f005 fbd9 	bl	8005f34 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(new.X, new.Y, 20);
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <main+0x230>)
 8000784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000788:	b29b      	uxth	r3, r3
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <main+0x230>)
 800078c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000790:	b291      	uxth	r1, r2
 8000792:	2214      	movs	r2, #20
 8000794:	4618      	mov	r0, r3
 8000796:	f005 fdb5 	bl	8006304 <BSP_LCD_FillCircle>

		HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f006 f918 	bl	80069d0 <HAL_Delay>

		prev.X = new.X;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <main+0x230>)
 80007a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <main+0x238>)
 80007a8:	801a      	strh	r2, [r3, #0]
		prev.Y = new.Y;
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <main+0x230>)
 80007ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <main+0x238>)
 80007b2:	805a      	strh	r2, [r3, #2]
  {
 80007b4:	e76a      	b.n	800068c <main+0xdc>
 80007b6:	bf00      	nop
 80007b8:	2001c17c 	.word	0x2001c17c
 80007bc:	08014a90 	.word	0x08014a90
 80007c0:	2001ce88 	.word	0x2001ce88
 80007c4:	08000595 	.word	0x08000595
 80007c8:	080005a3 	.word	0x080005a3
 80007cc:	2001cb28 	.word	0x2001cb28
 80007d0:	2001cb1c 	.word	0x2001cb1c
 80007d4:	2001cb32 	.word	0x2001cb32
 80007d8:	20000000 	.word	0x20000000
 80007dc:	08014a9c 	.word	0x08014a9c
 80007e0:	2001cb24 	.word	0x2001cb24
 80007e4:	2001c05a 	.word	0x2001c05a
 80007e8:	2001cb20 	.word	0x2001cb20

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b096      	sub	sp, #88	; 0x58
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2244      	movs	r2, #68	; 0x44
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f013 f9a6 	bl	8013b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000812:	f00a f983 	bl	800ab1c <HAL_PWREx_ControlVoltageScaling>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800081c:	f000 ff10 	bl	8001640 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000820:	f00a f95e 	bl	800aae0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <SystemClock_Config+0xc0>)
 8000826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800082a:	4a20      	ldr	r2, [pc, #128]	; (80008ac <SystemClock_Config+0xc0>)
 800082c:	f023 0318 	bic.w	r3, r3, #24
 8000830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000834:	2314      	movs	r3, #20
 8000836:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	2302      	movs	r3, #2
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800084c:	2301      	movs	r3, #1
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000854:	2328      	movs	r3, #40	; 0x28
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4618      	mov	r0, r3
 800086a:	f00a fa8f 	bl	800ad8c <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000874:	f000 fee4 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	230f      	movs	r3, #15
 800087a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2303      	movs	r3, #3
 800087e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	2104      	movs	r1, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f00a fe95 	bl	800b5c0 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800089c:	f000 fed0 	bl	8001640 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008a0:	f00c fa5e 	bl	800cd60 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008a4:	bf00      	nop
 80008a6:	3758      	adds	r7, #88	; 0x58
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40021000 	.word	0x40021000

080008b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0a4      	sub	sp, #144	; 0x90
 80008b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	228c      	movs	r2, #140	; 0x8c
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f013 f945 	bl	8013b4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <PeriphCommonClock_Config+0x64>)
 80008c4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80008d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008d6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80008d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008dc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008de:	2301      	movs	r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80008e6:	2318      	movs	r3, #24
 80008e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV12;
 80008ea:	230c      	movs	r3, #12
 80008ec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <PeriphCommonClock_Config+0x68>)
 80008f8:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00b f883 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000908:	f000 fe9a 	bl	8001640 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3790      	adds	r7, #144	; 0x90
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	00086800 	.word	0x00086800
 8000918:	01110000 	.word	0x01110000

0800091c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
 800093c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000940:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <MX_ADC1_Init+0xe4>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000944:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_ADC1_Init+0xe0>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000956:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_ADC1_Init+0xe0>)
 800095e:	2204      	movs	r2, #4
 8000960:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000964:	2200      	movs	r2, #0
 8000966:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC1_Init+0xe0>)
 800096a:	2200      	movs	r2, #0
 800096c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000970:	2201      	movs	r2, #1
 8000972:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_ADC1_Init+0xe0>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000984:	2200      	movs	r2, #0
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_ADC1_Init+0xe0>)
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000992:	2200      	movs	r2, #0
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_ADC1_Init+0xe0>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099e:	4817      	ldr	r0, [pc, #92]	; (80009fc <MX_ADC1_Init+0xe0>)
 80009a0:	f006 f9da 	bl	8006d58 <HAL_ADC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009aa:	f000 fe49 	bl	8001640 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4810      	ldr	r0, [pc, #64]	; (80009fc <MX_ADC1_Init+0xe0>)
 80009ba:	f006 ff59 	bl	8007870 <HAL_ADCEx_MultiModeConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009c4:	f000 fe3c 	bl	8001640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_ADC1_Init+0xe8>)
 80009ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009cc:	2306      	movs	r3, #6
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d4:	237f      	movs	r3, #127	; 0x7f
 80009d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d8:	2304      	movs	r3, #4
 80009da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_ADC1_Init+0xe0>)
 80009e6:	f006 fb11 	bl	800700c <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80009f0:	f000 fe26 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2001c39c 	.word	0x2001c39c
 8000a00:	50040000 	.word	0x50040000
 8000a04:	10c00010 	.word	0x10c00010

08000a08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <MX_ADC2_Init+0xc0>)
 8000a22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a36:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a80:	f006 f96a 	bl	8006d58 <HAL_ADC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000a8a:	f000 fdd9 	bl	8001640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_ADC2_Init+0xc4>)
 8000a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a92:	2306      	movs	r3, #6
 8000a94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9a:	237f      	movs	r3, #127	; 0x7f
 8000a9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000aac:	f006 faae 	bl	800700c <HAL_ADC_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000ab6:	f000 fdc3 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2001c404 	.word	0x2001c404
 8000ac8:	50040100 	.word	0x50040100
 8000acc:	25b00200 	.word	0x25b00200

08000ad0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000ae8:	4a29      	ldr	r2, [pc, #164]	; (8000b90 <MX_ADC3_Init+0xc0>)
 8000aea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b46:	4811      	ldr	r0, [pc, #68]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b48:	f006 f906 	bl	8006d58 <HAL_ADC_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000b52:	f000 fd75 	bl	8001640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_ADC3_Init+0xc4>)
 8000b58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b62:	237f      	movs	r3, #127	; 0x7f
 8000b64:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b66:	2304      	movs	r3, #4
 8000b68:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <MX_ADC3_Init+0xbc>)
 8000b74:	f006 fa4a 	bl	800700c <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000b7e:	f000 fd5f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2001c46c 	.word	0x2001c46c
 8000b90:	50040200 	.word	0x50040200
 8000b94:	36902000 	.word	0x36902000

08000b98 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <MX_DCMI_Init+0x64>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_DCMI_Init+0x60>)
 8000be6:	f007 f837 	bl	8007c58 <HAL_DCMI_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 fd26 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2001c4d4 	.word	0x2001c4d4
 8000bfc:	50050000 	.word	0x50050000

08000c00 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000c04:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c06:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <MX_DFSDM1_Init+0xcc>)
 8000c08:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c52:	481d      	ldr	r0, [pc, #116]	; (8000cc8 <MX_DFSDM1_Init+0xc8>)
 8000c54:	f007 f886 	bl	8007d64 <HAL_DFSDM_ChannelInit>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000c5e:	f000 fcef 	bl	8001640 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <MX_DFSDM1_Init+0xd4>)
 8000c66:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <MX_DFSDM1_Init+0xd0>)
 8000cb4:	f007 f856 	bl	8007d64 <HAL_DFSDM_ChannelInit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000cbe:	f000 fcbf 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2001c538 	.word	0x2001c538
 8000ccc:	40016020 	.word	0x40016020
 8000cd0:	2001c570 	.word	0x2001c570
 8000cd4:	40016040 	.word	0x40016040

08000cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cde:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <MX_I2C1_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <MX_I2C1_Init+0x7c>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d14:	f007 fde6 	bl	80088e4 <HAL_I2C_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d1e:	f000 fc8f 	bl	8001640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d26:	f008 fc85 	bl	8009634 <HAL_I2CEx_ConfigAnalogFilter>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f000 fc86 	bl	8001640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d34:	2100      	movs	r1, #0
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d38:	f008 fcc7 	bl	80096ca <HAL_I2CEx_ConfigDigitalFilter>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fc7d 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2001c5a8 	.word	0x2001c5a8
 8000d50:	40005400 	.word	0x40005400
 8000d54:	10909cec 	.word	0x10909cec

08000d58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <MX_I2C2_Init+0x78>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <MX_I2C2_Init+0x7c>)
 8000d66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d92:	480e      	ldr	r0, [pc, #56]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000d94:	f007 fda6 	bl	80088e4 <HAL_I2C_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d9e:	f000 fc4f 	bl	8001640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000da6:	f008 fc45 	bl	8009634 <HAL_I2CEx_ConfigAnalogFilter>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000db0:	f000 fc46 	bl	8001640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_I2C2_Init+0x74>)
 8000db8:	f008 fc87 	bl	80096ca <HAL_I2CEx_ConfigDigitalFilter>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 fc3d 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2001c5fc 	.word	0x2001c5fc
 8000dd0:	40005800 	.word	0x40005800
 8000dd4:	10909cec 	.word	0x10909cec

08000dd8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <MX_LPUART1_UART_Init+0x54>)
 8000de0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_LPUART1_UART_Init+0x58>)
 8000de6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_LPUART1_UART_Init+0x50>)
 8000e16:	f00d fe36 	bl	800ea86 <HAL_UART_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e20:	f000 fc0e 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2001c650 	.word	0x2001c650
 8000e2c:	40008000 	.word	0x40008000
 8000e30:	00033324 	.word	0x00033324

08000e34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <MX_USART1_UART_Init+0x5c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e60:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e64:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e7a:	f00d fe04 	bl	800ea86 <HAL_UART_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000e84:	f000 fbdc 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2001c6d4 	.word	0x2001c6d4
 8000e90:	40013800 	.word	0x40013800

08000e94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000e9a:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <MX_USART2_UART_Init+0x5c>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_USART2_UART_Init+0x58>)
 8000ed8:	f00d fdd5 	bl	800ea86 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ee2:	f000 fbad 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2001c758 	.word	0x2001c758
 8000ef0:	40004400 	.word	0x40004400

08000ef4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <MX_QUADSPI_Init+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f0c:	2210      	movs	r2, #16
 8000f0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f12:	2217      	movs	r2, #23
 8000f14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_QUADSPI_Init+0x50>)
 8000f30:	f009 fe6a 	bl	800ac08 <HAL_QSPI_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f3a:	f000 fb81 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2001c7dc 	.word	0x2001c7dc
 8000f48:	a0001000 	.word	0xa0001000

08000f4c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f50:	4b4d      	ldr	r3, [pc, #308]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f52:	4a4e      	ldr	r2, [pc, #312]	; (800108c <MX_SAI1_Init+0x140>)
 8000f54:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f56:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f5c:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000f62:	4b49      	ldr	r3, [pc, #292]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f64:	2240      	movs	r2, #64	; 0x40
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f68:	4b47      	ldr	r3, [pc, #284]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f6e:	4b46      	ldr	r3, [pc, #280]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f74:	4b44      	ldr	r3, [pc, #272]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f7a:	4b43      	ldr	r3, [pc, #268]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f80:	4b41      	ldr	r3, [pc, #260]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f8e:	4a40      	ldr	r2, [pc, #256]	; (8001090 <MX_SAI1_Init+0x144>)
 8000f90:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fac:	2208      	movs	r2, #8
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fb6:	4b34      	ldr	r3, [pc, #208]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000fe0:	4829      	ldr	r0, [pc, #164]	; (8001088 <MX_SAI1_Init+0x13c>)
 8000fe2:	f00c f99d 	bl	800d320 <HAL_SAI_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000fec:	f000 fb28 	bl	8001640 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <MX_SAI1_Init+0x148>)
 8000ff2:	4a29      	ldr	r2, [pc, #164]	; (8001098 <MX_SAI1_Init+0x14c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <MX_SAI1_Init+0x148>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <MX_SAI1_Init+0x148>)
 8000ffe:	2203      	movs	r2, #3
 8001000:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <MX_SAI1_Init+0x148>)
 8001004:	2240      	movs	r2, #64	; 0x40
 8001006:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_SAI1_Init+0x148>)
 800100a:	2200      	movs	r2, #0
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_SAI1_Init+0x148>)
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_SAI1_Init+0x148>)
 8001016:	2201      	movs	r2, #1
 8001018:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_SAI1_Init+0x148>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_SAI1_Init+0x148>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_SAI1_Init+0x148>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_SAI1_Init+0x148>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_SAI1_Init+0x148>)
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_SAI1_Init+0x148>)
 800103a:	2200      	movs	r2, #0
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_SAI1_Init+0x148>)
 8001040:	2208      	movs	r2, #8
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_SAI1_Init+0x148>)
 8001046:	2201      	movs	r2, #1
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_SAI1_Init+0x148>)
 800104c:	2200      	movs	r2, #0
 800104e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_SAI1_Init+0x148>)
 8001052:	2200      	movs	r2, #0
 8001054:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SAI1_Init+0x148>)
 8001058:	2200      	movs	r2, #0
 800105a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <MX_SAI1_Init+0x148>)
 800105e:	2200      	movs	r2, #0
 8001060:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SAI1_Init+0x148>)
 8001064:	2200      	movs	r2, #0
 8001066:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_SAI1_Init+0x148>)
 800106a:	2201      	movs	r2, #1
 800106c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SAI1_Init+0x148>)
 8001070:	2200      	movs	r2, #0
 8001072:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <MX_SAI1_Init+0x148>)
 8001076:	f00c f953 	bl	800d320 <HAL_SAI_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001080:	f000 fade 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2001c828 	.word	0x2001c828
 800108c:	40015404 	.word	0x40015404
 8001090:	0002ee00 	.word	0x0002ee00
 8001094:	2001c8ac 	.word	0x2001c8ac
 8001098:	40015424 	.word	0x40015424

0800109c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <MX_SDMMC1_SD_Init+0x5c>)
 80010a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010cc:	f00c fdfe 	bl	800dccc <HAL_SD_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80010d6:	f000 fab3 	bl	8001640 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80010da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_SDMMC1_SD_Init+0x58>)
 80010e0:	f00d f86e 	bl	800e1c0 <HAL_SD_ConfigWideBusOperation>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 80010ea:	f000 faa9 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2001c930 	.word	0x2001c930
 80010f8:	40012800 	.word	0x40012800

080010fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_SPI1_Init+0x74>)
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <MX_SPI1_Init+0x78>)
 8001104:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_SPI1_Init+0x74>)
 8001108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800110c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_SPI1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_SPI1_Init+0x74>)
 8001116:	f44f 7240 	mov.w	r2, #768	; 0x300
 800111a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_SPI1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_SPI1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_SPI1_Init+0x74>)
 800112a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800112e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_SPI1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_SPI1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_SPI1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_SPI1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_SPI1_Init+0x74>)
 800114a:	2207      	movs	r2, #7
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_SPI1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_SPI1_Init+0x74>)
 8001156:	2208      	movs	r2, #8
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_SPI1_Init+0x74>)
 800115c:	f00d fba8 	bl	800e8b0 <HAL_SPI_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001166:	f000 fa6b 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2001c9b4 	.word	0x2001c9b4
 8001174:	40013000 	.word	0x40013000

08001178 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_SPI2_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <MX_SPI2_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_SPI2_Init+0x74>)
 8001184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001188:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_SPI2_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_SPI2_Init+0x74>)
 8001192:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001196:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_SPI2_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_SPI2_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_SPI2_Init+0x74>)
 80011a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_SPI2_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_SPI2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_SPI2_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_SPI2_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_SPI2_Init+0x74>)
 80011c6:	2207      	movs	r2, #7
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_SPI2_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_SPI2_Init+0x74>)
 80011d2:	2208      	movs	r2, #8
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_SPI2_Init+0x74>)
 80011d8:	f00d fb6a 	bl	800e8b0 <HAL_SPI_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f000 fa2d 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2001ca18 	.word	0x2001ca18
 80011f0:	40003800 	.word	0x40003800

080011f4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f012 fca3 	bl	8013b4c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001206:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <MX_FMC_Init+0x150>)
 8001208:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800120c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <MX_FMC_Init+0x150>)
 8001210:	4a4d      	ldr	r2, [pc, #308]	; (8001348 <MX_FMC_Init+0x154>)
 8001212:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8001214:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <MX_FMC_Init+0x150>)
 8001216:	2202      	movs	r2, #2
 8001218:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <MX_FMC_Init+0x150>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001220:	4b48      	ldr	r3, [pc, #288]	; (8001344 <MX_FMC_Init+0x150>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <MX_FMC_Init+0x150>)
 8001228:	2210      	movs	r2, #16
 800122a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800122c:	4b45      	ldr	r3, [pc, #276]	; (8001344 <MX_FMC_Init+0x150>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <MX_FMC_Init+0x150>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <MX_FMC_Init+0x150>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <MX_FMC_Init+0x150>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001244:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <MX_FMC_Init+0x150>)
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <MX_FMC_Init+0x150>)
 800124c:	2200      	movs	r2, #0
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001250:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <MX_FMC_Init+0x150>)
 8001252:	2200      	movs	r2, #0
 8001254:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <MX_FMC_Init+0x150>)
 8001258:	2200      	movs	r2, #0
 800125a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <MX_FMC_Init+0x150>)
 800125e:	2200      	movs	r2, #0
 8001260:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <MX_FMC_Init+0x150>)
 8001264:	2200      	movs	r2, #0
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <MX_FMC_Init+0x150>)
 800126a:	2200      	movs	r2, #0
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800126e:	230f      	movs	r3, #15
 8001270:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001272:	230f      	movs	r3, #15
 8001274:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001276:	23ff      	movs	r3, #255	; 0xff
 8001278:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800127a:	230f      	movs	r3, #15
 800127c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800127e:	2310      	movs	r3, #16
 8001280:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001282:	2311      	movs	r3, #17
 8001284:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	482c      	ldr	r0, [pc, #176]	; (8001344 <MX_FMC_Init+0x150>)
 8001292:	f00d fbb0 	bl	800e9f6 <HAL_SRAM_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 800129c:	f000 f9d0 	bl	8001640 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_FMC_Init+0x158>)
 80012a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012a6:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_FMC_Init+0x158>)
 80012aa:	4a27      	ldr	r2, [pc, #156]	; (8001348 <MX_FMC_Init+0x154>)
 80012ac:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_FMC_Init+0x158>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_FMC_Init+0x158>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_FMC_Init+0x158>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_FMC_Init+0x158>)
 80012c2:	2210      	movs	r2, #16
 80012c4:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_FMC_Init+0x158>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_FMC_Init+0x158>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_FMC_Init+0x158>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_FMC_Init+0x158>)
 80012da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_FMC_Init+0x158>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_FMC_Init+0x158>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_FMC_Init+0x158>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_FMC_Init+0x158>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_FMC_Init+0x158>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_FMC_Init+0x158>)
 8001300:	2200      	movs	r2, #0
 8001302:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_FMC_Init+0x158>)
 8001306:	2200      	movs	r2, #0
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800130a:	230f      	movs	r3, #15
 800130c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800130e:	230f      	movs	r3, #15
 8001310:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001312:	23ff      	movs	r3, #255	; 0xff
 8001314:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001316:	230f      	movs	r3, #15
 8001318:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800131a:	2310      	movs	r3, #16
 800131c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800131e:	2311      	movs	r3, #17
 8001320:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_FMC_Init+0x158>)
 800132e:	f00d fb62 	bl	800e9f6 <HAL_SRAM_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001338:	f000 f982 	bl	8001640 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2001ca7c 	.word	0x2001ca7c
 8001348:	a0000104 	.word	0xa0000104
 800134c:	2001cacc 	.word	0x2001cacc

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001366:	4baf      	ldr	r3, [pc, #700]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4aae      	ldr	r2, [pc, #696]	; (8001624 <MX_GPIO_Init+0x2d4>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4bac      	ldr	r3, [pc, #688]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	4ba9      	ldr	r3, [pc, #676]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4aa8      	ldr	r2, [pc, #672]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4ba6      	ldr	r3, [pc, #664]	; (8001624 <MX_GPIO_Init+0x2d4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001396:	4ba3      	ldr	r3, [pc, #652]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4aa2      	ldr	r2, [pc, #648]	; (8001624 <MX_GPIO_Init+0x2d4>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4ba0      	ldr	r3, [pc, #640]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b9d      	ldr	r3, [pc, #628]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a9c      	ldr	r2, [pc, #624]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b9a      	ldr	r3, [pc, #616]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b97      	ldr	r3, [pc, #604]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a96      	ldr	r2, [pc, #600]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b94      	ldr	r3, [pc, #592]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013de:	4b91      	ldr	r3, [pc, #580]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a90      	ldr	r2, [pc, #576]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b8e      	ldr	r3, [pc, #568]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80013f6:	f009 fbf7 	bl	800abe8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	4b8a      	ldr	r3, [pc, #552]	; (8001624 <MX_GPIO_Init+0x2d4>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a89      	ldr	r2, [pc, #548]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b87      	ldr	r3, [pc, #540]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b84      	ldr	r3, [pc, #528]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a83      	ldr	r2, [pc, #524]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b81      	ldr	r3, [pc, #516]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142a:	4b7e      	ldr	r3, [pc, #504]	; (8001624 <MX_GPIO_Init+0x2d4>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a7d      	ldr	r2, [pc, #500]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001430:	f043 0320 	orr.w	r3, r3, #32
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b7b      	ldr	r3, [pc, #492]	; (8001624 <MX_GPIO_Init+0x2d4>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2101      	movs	r1, #1
 8001446:	4878      	ldr	r0, [pc, #480]	; (8001628 <MX_GPIO_Init+0x2d8>)
 8001448:	f007 fa34 	bl	80088b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2143      	movs	r1, #67	; 0x43
 8001450:	4876      	ldr	r0, [pc, #472]	; (800162c <MX_GPIO_Init+0x2dc>)
 8001452:	f007 fa2f 	bl	80088b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4875      	ldr	r0, [pc, #468]	; (8001630 <MX_GPIO_Init+0x2e0>)
 800145c:	f007 fa2a 	bl	80088b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001466:	4873      	ldr	r0, [pc, #460]	; (8001634 <MX_GPIO_Init+0x2e4>)
 8001468:	f007 fa24 	bl	80088b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 800146c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001476:	2302      	movs	r3, #2
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	4869      	ldr	r0, [pc, #420]	; (8001628 <MX_GPIO_Init+0x2d8>)
 8001482:	f006 ff93 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8001486:	2304      	movs	r3, #4
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4864      	ldr	r0, [pc, #400]	; (800162c <MX_GPIO_Init+0x2dc>)
 800149c:	f006 ff86 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80014a0:	2301      	movs	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	485c      	ldr	r0, [pc, #368]	; (8001628 <MX_GPIO_Init+0x2d8>)
 80014b8:	f006 ff78 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80014bc:	2340      	movs	r3, #64	; 0x40
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014cc:	2303      	movs	r3, #3
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4854      	ldr	r0, [pc, #336]	; (8001628 <MX_GPIO_Init+0x2d8>)
 80014d8:	f006 ff68 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80014dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014ee:	2303      	movs	r3, #3
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	484c      	ldr	r0, [pc, #304]	; (800162c <MX_GPIO_Init+0x2dc>)
 80014fa:	f006 ff57 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80014fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001510:	2302      	movs	r3, #2
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4846      	ldr	r0, [pc, #280]	; (8001634 <MX_GPIO_Init+0x2e4>)
 800151c:	f006 ff46 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	483e      	ldr	r0, [pc, #248]	; (800162c <MX_GPIO_Init+0x2dc>)
 8001534:	f006 ff3a 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001538:	2343      	movs	r3, #67	; 0x43
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	4837      	ldr	r0, [pc, #220]	; (800162c <MX_GPIO_Init+0x2dc>)
 8001550:	f006 ff2c 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	4831      	ldr	r0, [pc, #196]	; (8001630 <MX_GPIO_Init+0x2e0>)
 800156c:	f006 ff1e 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	482c      	ldr	r0, [pc, #176]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001588:	f006 ff10 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 800159e:	230e      	movs	r3, #14
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f006 fefe 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80015b0:	2320      	movs	r3, #32
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	481a      	ldr	r0, [pc, #104]	; (8001630 <MX_GPIO_Init+0x2e0>)
 80015c6:	f006 fef1 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 80015ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	4817      	ldr	r0, [pc, #92]	; (800163c <MX_GPIO_Init+0x2ec>)
 80015e0:	f006 fee4 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 80015e4:	2304      	movs	r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	480f      	ldr	r0, [pc, #60]	; (8001634 <MX_GPIO_Init+0x2e4>)
 80015f8:	f006 fed8 	bl	80083ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001602:	2311      	movs	r3, #17
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <MX_GPIO_Init+0x2e4>)
 8001616:	f006 fec9 	bl	80083ac <HAL_GPIO_Init>

}
 800161a:	bf00      	nop
 800161c:	3738      	adds	r7, #56	; 0x38
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	48002000 	.word	0x48002000
 800162c:	48001c00 	.word	0x48001c00
 8001630:	48000800 	.word	0x48000800
 8001634:	48000400 	.word	0x48000400
 8001638:	48001800 	.word	0x48001800
 800163c:	48001400 	.word	0x48001400

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_MspInit+0x44>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	; 0x60
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x44>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x44>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x44>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	; 0x38
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a59      	ldr	r2, [pc, #356]	; (8001818 <HAL_ADC_MspInit+0x184>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12d      	bne.n	8001712 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80016b6:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_ADC_MspInit+0x188>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a57      	ldr	r2, [pc, #348]	; (800181c <HAL_ADC_MspInit+0x188>)
 80016be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <HAL_ADC_MspInit+0x188>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10b      	bne.n	80016e0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80016c8:	4b55      	ldr	r3, [pc, #340]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a54      	ldr	r2, [pc, #336]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80016ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b52      	ldr	r3, [pc, #328]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016dc:	623b      	str	r3, [r7, #32]
 80016de:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ec:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 80016f8:	2318      	movs	r3, #24
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016fc:	230b      	movs	r3, #11
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	4846      	ldr	r0, [pc, #280]	; (8001824 <HAL_ADC_MspInit+0x190>)
 800170c:	f006 fe4e 	bl	80083ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001710:	e07e      	b.n	8001810 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a44      	ldr	r2, [pc, #272]	; (8001828 <HAL_ADC_MspInit+0x194>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d146      	bne.n	80017aa <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_ADC_MspInit+0x188>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <HAL_ADC_MspInit+0x188>)
 8001724:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001726:	4b3d      	ldr	r3, [pc, #244]	; (800181c <HAL_ADC_MspInit+0x188>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10b      	bne.n	8001746 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 8001734:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	4a35      	ldr	r2, [pc, #212]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001752:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 8001776:	2303      	movs	r3, #3
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800177a:	230b      	movs	r3, #11
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4826      	ldr	r0, [pc, #152]	; (8001824 <HAL_ADC_MspInit+0x190>)
 800178a:	f006 fe0f 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800178e:	2312      	movs	r3, #18
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001792:	230b      	movs	r3, #11
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f006 fe02 	bl	80083ac <HAL_GPIO_Init>
}
 80017a8:	e032      	b.n	8001810 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_ADC_MspInit+0x198>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d12d      	bne.n	8001810 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_ADC_MspInit+0x188>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_ADC_MspInit+0x188>)
 80017bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_ADC_MspInit+0x188>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10b      	bne.n	80017de <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80017cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80017e4:	f043 0320 	orr.w	r3, r3, #32
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_ADC_MspInit+0x18c>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 80017f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017fc:	230b      	movs	r3, #11
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <HAL_ADC_MspInit+0x19c>)
 800180c:	f006 fdce 	bl	80083ac <HAL_GPIO_Init>
}
 8001810:	bf00      	nop
 8001812:	3738      	adds	r7, #56	; 0x38
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	50040000 	.word	0x50040000
 800181c:	2001cb34 	.word	0x2001cb34
 8001820:	40021000 	.word	0x40021000
 8001824:	48000800 	.word	0x48000800
 8001828:	50040100 	.word	0x50040100
 800182c:	50040200 	.word	0x50040200
 8001830:	48001400 	.word	0x48001400

08001834 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a33      	ldr	r2, [pc, #204]	; (8001920 <HAL_DCMI_MspInit+0xec>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d160      	bne.n	8001918 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a32      	ldr	r2, [pc, #200]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 8001874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a26      	ldr	r2, [pc, #152]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	4a20      	ldr	r2, [pc, #128]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <HAL_DCMI_MspInit+0xf0>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80018b6:	f645 7320 	movw	r3, #24352	; 0x5f20
 80018ba:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80018c8:	230a      	movs	r3, #10
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4815      	ldr	r0, [pc, #84]	; (8001928 <HAL_DCMI_MspInit+0xf4>)
 80018d4:	f006 fd6a 	bl	80083ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80018d8:	23b0      	movs	r3, #176	; 0xb0
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80018e8:	230a      	movs	r3, #10
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <HAL_DCMI_MspInit+0xf8>)
 80018f4:	f006 fd5a 	bl	80083ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80018f8:	2320      	movs	r3, #32
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001908:	230a      	movs	r3, #10
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <HAL_DCMI_MspInit+0xfc>)
 8001914:	f006 fd4a 	bl	80083ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001918:	bf00      	nop
 800191a:	3730      	adds	r7, #48	; 0x30
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	50050000 	.word	0x50050000
 8001924:	40021000 	.word	0x40021000
 8001928:	48001c00 	.word	0x48001c00
 800192c:	48002000 	.word	0x48002000
 8001930:	48001000 	.word	0x48001000

08001934 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ae      	sub	sp, #184	; 0xb8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	228c      	movs	r2, #140	; 0x8c
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f012 f8f9 	bl	8013b4c <memset>
  if(DFSDM1_Init == 0)
 800195a:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_DFSDM_ChannelMspInit+0x100>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d163      	bne.n	8001a2a <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001966:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196e:	f107 0318 	add.w	r3, r7, #24
 8001972:	4618      	mov	r0, r3
 8001974:	f00a f848 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800197e:	f7ff fe5f 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_DFSDM_ChannelMspInit+0x104>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 80019ca:	2384      	movs	r3, #132	; 0x84
 80019cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019e2:	2306      	movs	r3, #6
 80019e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4813      	ldr	r0, [pc, #76]	; (8001a3c <HAL_DFSDM_ChannelMspInit+0x108>)
 80019f0:	f006 fcdc 	bl	80083ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001a1c:	f006 fcc6 	bl	80083ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001a28:	6013      	str	r3, [r2, #0]
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	37b8      	adds	r7, #184	; 0xb8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2001cb38 	.word	0x2001cb38
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000800 	.word	0x48000800
 8001a40:	48000400 	.word	0x48000400

08001a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b0      	sub	sp, #192	; 0xc0
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	f107 0320 	add.w	r3, r7, #32
 8001a60:	228c      	movs	r2, #140	; 0x8c
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f012 f871 	bl	8013b4c <memset>
  if(hi2c->Instance==I2C1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a53      	ldr	r2, [pc, #332]	; (8001bbc <HAL_I2C_MspInit+0x178>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d13c      	bne.n	8001aee <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a74:	2340      	movs	r3, #64	; 0x40
 8001a76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	4618      	mov	r0, r3
 8001a82:	f009 ffc1 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a8c:	f7ff fdd8 	bl	8001640 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9c:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001aa8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab0:	2312      	movs	r3, #18
 8001ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001acc:	4619      	mov	r1, r3
 8001ace:	483d      	ldr	r0, [pc, #244]	; (8001bc4 <HAL_I2C_MspInit+0x180>)
 8001ad0:	f006 fc6c 	bl	80083ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a39      	ldr	r2, [pc, #228]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001aec:	e061      	b.n	8001bb2 <HAL_I2C_MspInit+0x16e>
  else if(hi2c->Instance==I2C2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_I2C_MspInit+0x184>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d15c      	bne.n	8001bb2 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	4618      	mov	r0, r3
 8001b06:	f009 ff7f 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001b10:	f7ff fd96 	bl	8001640 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001b44:	2310      	movs	r3, #16
 8001b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4a:	2312      	movs	r3, #18
 8001b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b66:	4619      	mov	r1, r3
 8001b68:	4818      	ldr	r0, [pc, #96]	; (8001bcc <HAL_I2C_MspInit+0x188>)
 8001b6a:	f006 fc1f 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001b6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b76:	2312      	movs	r3, #18
 8001b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b92:	4619      	mov	r1, r3
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <HAL_I2C_MspInit+0x180>)
 8001b96:	f006 fc09 	bl	80083ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_I2C_MspInit+0x17c>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	bf00      	nop
 8001bb4:	37c0      	adds	r7, #192	; 0xc0
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	40005800 	.word	0x40005800
 8001bcc:	48001c00 	.word	0x48001c00

08001bd0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <HAL_I2C_MspDeInit+0x64>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10f      	bne.n	8001c02 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_I2C_MspDeInit+0x68>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <HAL_I2C_MspDeInit+0x68>)
 8001be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bec:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf2:	4812      	ldr	r0, [pc, #72]	; (8001c3c <HAL_I2C_MspDeInit+0x6c>)
 8001bf4:	f006 fd6c 	bl	80086d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <HAL_I2C_MspDeInit+0x6c>)
 8001bfc:	f006 fd68 	bl	80086d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001c00:	e013      	b.n	8001c2a <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_I2C_MspDeInit+0x70>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d10e      	bne.n	8001c2a <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_I2C_MspDeInit+0x68>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_I2C_MspDeInit+0x68>)
 8001c12:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c16:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001c18:	2110      	movs	r1, #16
 8001c1a:	480a      	ldr	r0, [pc, #40]	; (8001c44 <HAL_I2C_MspDeInit+0x74>)
 8001c1c:	f006 fd58 	bl	80086d0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_I2C_MspDeInit+0x6c>)
 8001c26:	f006 fd53 	bl	80086d0 <HAL_GPIO_DeInit>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40005400 	.word	0x40005400
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	40005800 	.word	0x40005800
 8001c44:	48001c00 	.word	0x48001c00

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0b2      	sub	sp, #200	; 0xc8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c64:	228c      	movs	r2, #140	; 0x8c
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f011 ff6f 	bl	8013b4c <memset>
  if(huart->Instance==LPUART1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a86      	ldr	r2, [pc, #536]	; (8001e8c <HAL_UART_MspInit+0x244>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d13e      	bne.n	8001cf6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c84:	4618      	mov	r0, r3
 8001c86:	f009 febf 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c90:	f7ff fcd6 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c94:	4b7e      	ldr	r3, [pc, #504]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	4a7d      	ldr	r2, [pc, #500]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ca0:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cac:	4b78      	ldr	r3, [pc, #480]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	4a77      	ldr	r2, [pc, #476]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb8:	4b75      	ldr	r3, [pc, #468]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8001cc4:	f008 ff90 	bl	800abe8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001cc8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ce8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4869      	ldr	r0, [pc, #420]	; (8001e94 <HAL_UART_MspInit+0x24c>)
 8001cf0:	f006 fb5c 	bl	80083ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cf4:	e0c6      	b.n	8001e84 <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_UART_MspInit+0x250>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d15f      	bne.n	8001dc0 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d04:	2300      	movs	r3, #0
 8001d06:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f009 fe7b 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001d18:	f7ff fc92 	bl	8001640 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d1c:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d20:	4a5b      	ldr	r2, [pc, #364]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d26:	6613      	str	r3, [r2, #96]	; 0x60
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b56      	ldr	r3, [pc, #344]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	4a55      	ldr	r2, [pc, #340]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4c:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d58:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001d64:	f008 ff40 	bl	800abe8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001d68:	2340      	movs	r3, #64	; 0x40
 8001d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d80:	2307      	movs	r3, #7
 8001d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4843      	ldr	r0, [pc, #268]	; (8001e9c <HAL_UART_MspInit+0x254>)
 8001d8e:	f006 fb0d 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8001d92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dac:	2307      	movs	r3, #7
 8001dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4836      	ldr	r0, [pc, #216]	; (8001e94 <HAL_UART_MspInit+0x24c>)
 8001dba:	f006 faf7 	bl	80083ac <HAL_GPIO_Init>
}
 8001dbe:	e061      	b.n	8001e84 <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a36      	ldr	r2, [pc, #216]	; (8001ea0 <HAL_UART_MspInit+0x258>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d15c      	bne.n	8001e84 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f009 fe16 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001de2:	f7ff fc2d 	bl	8001640 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_UART_MspInit+0x248>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001e2e:	2340      	movs	r3, #64	; 0x40
 8001e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e46:	2307      	movs	r3, #7
 8001e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <HAL_UART_MspInit+0x25c>)
 8001e54:	f006 faaa 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e70:	2307      	movs	r3, #7
 8001e72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e80:	f006 fa94 	bl	80083ac <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	37c8      	adds	r7, #200	; 0xc8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40008000 	.word	0x40008000
 8001e90:	40021000 	.word	0x40021000
 8001e94:	48001800 	.word	0x48001800
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	48000400 	.word	0x48000400
 8001ea0:	40004400 	.word	0x40004400
 8001ea4:	48000c00 	.word	0x48000c00

08001ea8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <HAL_QSPI_MspInit+0xb8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d145      	bne.n	8001f56 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ece:	4a25      	ldr	r2, [pc, #148]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6513      	str	r3, [r2, #80]	; 0x50
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_QSPI_MspInit+0xbc>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001f12:	f640 0303 	movw	r3, #2051	; 0x803
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f24:	230a      	movs	r3, #10
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480e      	ldr	r0, [pc, #56]	; (8001f68 <HAL_QSPI_MspInit+0xc0>)
 8001f30:	f006 fa3c 	bl	80083ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001f34:	23c8      	movs	r3, #200	; 0xc8
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f44:	230a      	movs	r3, #10
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f52:	f006 fa2b 	bl	80083ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	3728      	adds	r7, #40	; 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	a0001000 	.word	0xa0001000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	48000400 	.word	0x48000400

08001f6c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a25      	ldr	r2, [pc, #148]	; (8002020 <HAL_SD_MspInit+0xb4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d144      	bne.n	8002018 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f98:	6613      	str	r3, [r2, #96]	; 0x60
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a18      	ldr	r2, [pc, #96]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_SD_MspInit+0xb8>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fe6:	230c      	movs	r3, #12
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <HAL_SD_MspInit+0xbc>)
 8001ff2:	f006 f9db 	bl	80083ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001ff6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ffa:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002008:	230c      	movs	r3, #12
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <HAL_SD_MspInit+0xc0>)
 8002014:	f006 f9ca 	bl	80083ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40012800 	.word	0x40012800
 8002024:	40021000 	.word	0x40021000
 8002028:	48000c00 	.word	0x48000c00
 800202c:	48000800 	.word	0x48000800

08002030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08e      	sub	sp, #56	; 0x38
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a4b      	ldr	r2, [pc, #300]	; (800217c <HAL_SPI_MspInit+0x14c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d146      	bne.n	80020e0 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002052:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	4a4a      	ldr	r2, [pc, #296]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800205c:	6613      	str	r3, [r2, #96]	; 0x60
 800205e:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b45      	ldr	r3, [pc, #276]	; (8002180 <HAL_SPI_MspInit+0x150>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4a44      	ldr	r2, [pc, #272]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002076:	4b42      	ldr	r3, [pc, #264]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4a3e      	ldr	r2, [pc, #248]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800209a:	2330      	movs	r3, #48	; 0x30
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020aa:	2305      	movs	r3, #5
 80020ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b2:	4619      	mov	r1, r3
 80020b4:	4833      	ldr	r0, [pc, #204]	; (8002184 <HAL_SPI_MspInit+0x154>)
 80020b6:	f006 f979 	bl	80083ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 80020ba:	f248 0320 	movw	r3, #32800	; 0x8020
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020cc:	2305      	movs	r3, #5
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020da:	f006 f967 	bl	80083ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020de:	e049      	b.n	8002174 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a28      	ldr	r2, [pc, #160]	; (8002188 <HAL_SPI_MspInit+0x158>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d144      	bne.n	8002174 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_SPI_MspInit+0x150>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_SPI_MspInit+0x150>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_SPI_MspInit+0x150>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_SPI_MspInit+0x150>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_SPI_MspInit+0x150>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8002132:	2306      	movs	r3, #6
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002142:	2305      	movs	r3, #5
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	480f      	ldr	r0, [pc, #60]	; (800218c <HAL_SPI_MspInit+0x15c>)
 800214e:	f006 f92d 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002164:	2305      	movs	r3, #5
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_SPI_MspInit+0x154>)
 8002170:	f006 f91c 	bl	80083ac <HAL_GPIO_Init>
}
 8002174:	bf00      	nop
 8002176:	3738      	adds	r7, #56	; 0x38
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40013000 	.word	0x40013000
 8002180:	40021000 	.word	0x40021000
 8002184:	48000400 	.word	0x48000400
 8002188:	40003800 	.word	0x40003800
 800218c:	48002000 	.word	0x48002000

08002190 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80021a4:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_FMC_MspInit+0xc4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d14f      	bne.n	800224c <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_FMC_MspInit+0xc4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80021b2:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HAL_FMC_MspInit+0xc8>)
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	4a28      	ldr	r2, [pc, #160]	; (8002258 <HAL_FMC_MspInit+0xc8>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6513      	str	r3, [r2, #80]	; 0x50
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <HAL_FMC_MspInit+0xc8>)
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 80021ca:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021ce:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021dc:	230c      	movs	r3, #12
 80021de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	4619      	mov	r1, r3
 80021e4:	481d      	ldr	r0, [pc, #116]	; (800225c <HAL_FMC_MspInit+0xcc>)
 80021e6:	f006 f8e1 	bl	80083ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 80021ea:	f240 233f 	movw	r3, #575	; 0x23f
 80021ee:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021fc:	230c      	movs	r3, #12
 80021fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	4619      	mov	r1, r3
 8002204:	4816      	ldr	r0, [pc, #88]	; (8002260 <HAL_FMC_MspInit+0xd0>)
 8002206:	f006 f8d1 	bl	80083ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 800220a:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800220e:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800221c:	230c      	movs	r3, #12
 800221e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4619      	mov	r1, r3
 8002224:	480f      	ldr	r0, [pc, #60]	; (8002264 <HAL_FMC_MspInit+0xd4>)
 8002226:	f006 f8c1 	bl	80083ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800222a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800222e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800223c:	230c      	movs	r3, #12
 800223e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	4619      	mov	r1, r3
 8002244:	4808      	ldr	r0, [pc, #32]	; (8002268 <HAL_FMC_MspInit+0xd8>)
 8002246:	f006 f8b1 	bl	80083ac <HAL_GPIO_Init>
 800224a:	e000      	b.n	800224e <HAL_FMC_MspInit+0xbe>
    return;
 800224c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2001cb3c 	.word	0x2001cb3c
 8002258:	40021000 	.word	0x40021000
 800225c:	48001000 	.word	0x48001000
 8002260:	48001800 	.word	0x48001800
 8002264:	48000c00 	.word	0x48000c00
 8002268:	48001400 	.word	0x48001400

0800226c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002274:	f7ff ff8c 	bl	8002190 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <NMI_Handler+0x4>

08002286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <HardFault_Handler+0x4>

0800228c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <MemManage_Handler+0x4>

08002292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <BusFault_Handler+0x4>

08002298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <UsageFault_Handler+0x4>

0800229e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022cc:	f004 fb60 	bl	8006990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <OTG_FS_IRQHandler+0x10>)
 80022da:	f007 fb95 	bl	8009a08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2001e4c0 	.word	0x2001e4c0

080022e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e00a      	b.n	8002310 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022fa:	f3af 8000 	nop.w
 80022fe:	4601      	mov	r1, r0
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	60ba      	str	r2, [r7, #8]
 8002306:	b2ca      	uxtb	r2, r1
 8002308:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	3301      	adds	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	dbf0      	blt.n	80022fa <_read+0x12>
	}

return len;
 8002318:	687b      	ldr	r3, [r7, #4]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e009      	b.n	8002348 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	60ba      	str	r2, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3301      	adds	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	dbf1      	blt.n	8002334 <_write+0x12>
	}
	return len;
 8002350:	687b      	ldr	r3, [r7, #4]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <_close>:

int _close(int file)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	return -1;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002382:	605a      	str	r2, [r3, #4]
	return 0;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <_isatty>:

int _isatty(int file)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
	return 1;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
	return 0;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <_sbrk+0x5c>)
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <_sbrk+0x60>)
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <_sbrk+0x64>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <_sbrk+0x64>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <_sbrk+0x68>)
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d207      	bcs.n	8002404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f4:	f011 fb80 	bl	8013af8 <__errno>
 80023f8:	4603      	mov	r3, r0
 80023fa:	220c      	movs	r2, #12
 80023fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002402:	e009      	b.n	8002418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <_sbrk+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <_sbrk+0x64>)
 8002414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002416:	68fb      	ldr	r3, [r7, #12]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20050000 	.word	0x20050000
 8002424:	00000400 	.word	0x00000400
 8002428:	2001cb40 	.word	0x2001cb40
 800242c:	2001ec00 	.word	0x2001ec00

08002430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <SystemInit+0x20>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <SystemInit+0x20>)
 800243c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800248c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002458:	f7ff ffea 	bl	8002430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <LoopForever+0x6>)
  ldr r1, =_edata
 800245e:	490d      	ldr	r1, [pc, #52]	; (8002494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <LoopForever+0xe>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002474:	4c0a      	ldr	r4, [pc, #40]	; (80024a0 <LoopForever+0x16>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002482:	f011 fb3f 	bl	8013b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002486:	f7fe f893 	bl	80005b0 <main>

0800248a <LoopForever>:

LoopForever:
    b LoopForever
 800248a:	e7fe      	b.n	800248a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800248c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002494:	2001c380 	.word	0x2001c380
  ldr r2, =_sidata
 8002498:	080179e4 	.word	0x080179e4
  ldr r2, =_sbss
 800249c:	2001c380 	.word	0x2001c380
  ldr r4, =_ebss
 80024a0:	2001ebfc 	.word	0x2001ebfc

080024a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC1_2_IRQHandler>
	...

080024a8 <cs42l51_Init>:
  * @param Volume:     Initial output volume level (from 0 (-100dB) to 100 (0dB)).
  * @param AudioFreq:  Initial audio frequency (currently not used).
  * @retval 0 if correct communication, else wrong communication.
  */
uint32_t cs42l51_Init(uint16_t DeviceAddr, uint16_t Device, uint8_t Volume, uint32_t AudioFreq)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	4603      	mov	r3, r0
 80024b2:	81fb      	strh	r3, [r7, #14]
 80024b4:	460b      	mov	r3, r1
 80024b6:	81bb      	strh	r3, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  uint8_t  Value;
  
  /* Check if codec is already initialized */
  if(Is_CS42L51_Initialized == 0)
 80024c0:	4bad      	ldr	r3, [pc, #692]	; (8002778 <cs42l51_Init+0x2d0>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <cs42l51_Init+0x2c>
  {
    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init();
 80024c8:	f002 fd48 	bl	8004f5c <AUDIO_IO_Init>

    Is_CS42L51_Initialized = 1;
 80024cc:	4baa      	ldr	r3, [pc, #680]	; (8002778 <cs42l51_Init+0x2d0>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e050      	b.n	8002576 <cs42l51_Init+0xce>
  }
  else
  {
    /* Set all power down bits to 1 exept PDN to mute ADCs and DACs*/
    counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x7E);
 80024d4:	89fb      	ldrh	r3, [r7, #14]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	227e      	movs	r2, #126	; 0x7e
 80024da:	2102      	movs	r1, #2
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fb49 	bl	8002b74 <CODEC_IO_Write>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4413      	add	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
    Value = AUDIO_IO_Read(DeviceAddr, 0x03);
 80024ec:	89fb      	ldrh	r3, [r7, #14]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2103      	movs	r1, #3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 fdff 	bl	80050f6 <AUDIO_IO_Read>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]
    counter += CODEC_IO_Write(DeviceAddr, 0x03, (Value | 0x0E));
 80024fc:	89fb      	ldrh	r3, [r7, #14]
 80024fe:	b2d8      	uxtb	r0, r3
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	f043 030e 	orr.w	r3, r3, #14
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	2103      	movs	r1, #3
 800250c:	f000 fb32 	bl	8002b74 <CODEC_IO_Write>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4413      	add	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
    
    /* Disable zero cross and soft ramp */
    Value = AUDIO_IO_Read(DeviceAddr, 0x09);
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2109      	movs	r1, #9
 8002520:	4618      	mov	r0, r3
 8002522:	f002 fde8 	bl	80050f6 <AUDIO_IO_Read>
 8002526:	4603      	mov	r3, r0
 8002528:	74fb      	strb	r3, [r7, #19]
    counter += CODEC_IO_Write(DeviceAddr, 0x09, (Value & 0xFC));
 800252a:	89fb      	ldrh	r3, [r7, #14]
 800252c:	b2d8      	uxtb	r0, r3
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	f023 0303 	bic.w	r3, r3, #3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	2109      	movs	r1, #9
 800253a:	f000 fb1b 	bl	8002b74 <CODEC_IO_Write>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	4413      	add	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
    
    /* Power control : Enter standby (PDN = 1) */
    Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 8002548:	89fb      	ldrh	r3, [r7, #14]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2102      	movs	r1, #2
 800254e:	4618      	mov	r0, r3
 8002550:	f002 fdd1 	bl	80050f6 <AUDIO_IO_Read>
 8002554:	4603      	mov	r3, r0
 8002556:	74fb      	strb	r3, [r7, #19]
    counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value | 0x01));
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	b2d8      	uxtb	r0, r3
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	2102      	movs	r1, #2
 8002568:	f000 fb04 	bl	8002b74 <CODEC_IO_Write>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4413      	add	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  }

  /* Mic Power and Speed Control : Auto detect on, Speed mode SSM, tri state off, MCLK divide by 2 off */
  Value = AUDIO_IO_Read(DeviceAddr, 0x03);
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2103      	movs	r1, #3
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fdba 	bl	80050f6 <AUDIO_IO_Read>
 8002582:	4603      	mov	r3, r0
 8002584:	74fb      	strb	r3, [r7, #19]
  counter += CODEC_IO_Write(DeviceAddr, 0x03, ((Value & 0x0E) | 0xA0));
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	b2d8      	uxtb	r0, r3
 800258a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800258e:	f003 030e 	and.w	r3, r3, #14
 8002592:	b25b      	sxtb	r3, r3
 8002594:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8002598:	b25b      	sxtb	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	2103      	movs	r1, #3
 80025a0:	f000 fae8 	bl	8002b74 <CODEC_IO_Write>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4413      	add	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  /* Interface control : Loopback off, Slave, I2S (SDIN and SOUT), Digital mix off, Mic mix off */
  counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C);
 80025ae:	89fb      	ldrh	r3, [r7, #14]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	220c      	movs	r2, #12
 80025b4:	2104      	movs	r1, #4
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fadc 	bl	8002b74 <CODEC_IO_Write>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	4413      	add	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
  
  /* Mic control : ADC single volume off, ADCB boost off, ADCA boost off, MicBias on AIN3B/MICIN2 pin, MicBias level 0.8xVA, MICB boost 16db, MICA boost 16dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x00);
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2200      	movs	r2, #0
 80025cc:	2105      	movs	r1, #5
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fad0 	bl	8002b74 <CODEC_IO_Write>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4413      	add	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* ADC control : ADCB HPF off, ADCB HPF freeze off, ADCA HPF off, ADCA HPF freeze off, Soft ramp B off, Zero cross B off, Soft ramp A off, Zero cross A off */
  counter += CODEC_IO_Write(DeviceAddr, 0x06, 0x00);
 80025de:	89fb      	ldrh	r3, [r7, #14]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2200      	movs	r2, #0
 80025e4:	2106      	movs	r1, #6
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fac4 	bl	8002b74 <CODEC_IO_Write>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	4413      	add	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  /* ADC Input Select, Invert and Mute : AIN1B to PGAB, AIN3A to PreAmp to PGAA, ADCB invert off, ADCA invert off, ADCB mute on, ADCA mute off */
  counter += CODEC_IO_Write(DeviceAddr, 0x07, 0x32);
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2232      	movs	r2, #50	; 0x32
 80025fc:	2107      	movs	r1, #7
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fab8 	bl	8002b74 <CODEC_IO_Write>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	4413      	add	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
  
  /* DAC output control : HP Gain to 1, Single volume control off, PCM invert signals polarity off, DAC channels mute on */
  counter += CODEC_IO_Write(DeviceAddr, 0x08, 0xC3);
 800260e:	89fb      	ldrh	r3, [r7, #14]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	22c3      	movs	r2, #195	; 0xc3
 8002614:	2108      	movs	r1, #8
 8002616:	4618      	mov	r0, r3
 8002618:	f000 faac 	bl	8002b74 <CODEC_IO_Write>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	4413      	add	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* DAC control : Signal processing to DAC, Freeze off, De-emphasis off, Analog output auto mute off, DAC soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, 0x09, 0x42);
 8002626:	89fb      	ldrh	r3, [r7, #14]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2242      	movs	r2, #66	; 0x42
 800262c:	2109      	movs	r1, #9
 800262e:	4618      	mov	r0, r3
 8002630:	f000 faa0 	bl	8002b74 <CODEC_IO_Write>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	4413      	add	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  /* ALCA and PGAA Control : ALCA soft ramp disable on, ALCA zero cross disable on, PGA A Gain 0dB */  
  counter += CODEC_IO_Write(DeviceAddr, 0x0A, 0xC0);
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	22c0      	movs	r2, #192	; 0xc0
 8002644:	210a      	movs	r1, #10
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fa94 	bl	8002b74 <CODEC_IO_Write>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4413      	add	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* ALCB and PGAB Control : ALCB soft ramp disable on, ALCB zero cross disable on, PGA B Gain 0dB */  
  counter += CODEC_IO_Write(DeviceAddr, 0x0B, 0xC0);
 8002656:	89fb      	ldrh	r3, [r7, #14]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	22c0      	movs	r2, #192	; 0xc0
 800265c:	210b      	movs	r1, #11
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fa88 	bl	8002b74 <CODEC_IO_Write>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4413      	add	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
  
  /* ADCA Attenuator : 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x0C, 0x00);
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2200      	movs	r2, #0
 8002674:	210c      	movs	r1, #12
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fa7c 	bl	8002b74 <CODEC_IO_Write>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	4413      	add	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* ADCB Attenuator : 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x0D, 0x00);
 8002686:	89fb      	ldrh	r3, [r7, #14]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2200      	movs	r2, #0
 800268c:	210d      	movs	r1, #13
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fa70 	bl	8002b74 <CODEC_IO_Write>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	4413      	add	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /* ADCA mixer volume control : ADCA mixer channel mute on, ADCA mixer volume 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x0E, 0x80);
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	210e      	movs	r1, #14
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fa64 	bl	8002b74 <CODEC_IO_Write>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	4413      	add	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
  
  /* ADCB mixer volume control : ADCB mixer channel mute on, ADCB mixer volume 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x0F, 0x80);
 80026b6:	89fb      	ldrh	r3, [r7, #14]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	210f      	movs	r1, #15
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fa58 	bl	8002b74 <CODEC_IO_Write>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	4413      	add	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
  
  /* PCMA mixer volume control : PCMA mixer channel mute off, PCMA mixer volume 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x10, 0x00);
 80026ce:	89fb      	ldrh	r3, [r7, #14]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2200      	movs	r2, #0
 80026d4:	2110      	movs	r1, #16
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fa4c 	bl	8002b74 <CODEC_IO_Write>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	4413      	add	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  /* PCMB mixer volume control : PCMB mixer channel mute off, PCMB mixer volume 0dB */
  counter += CODEC_IO_Write(DeviceAddr, 0x11, 0x00);
 80026e6:	89fb      	ldrh	r3, [r7, #14]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2200      	movs	r2, #0
 80026ec:	2111      	movs	r1, #17
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fa40 	bl	8002b74 <CODEC_IO_Write>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	4413      	add	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* PCM channel mixer : AOUTA Left, AOUTB Right */
  counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x00);
 80026fe:	89fb      	ldrh	r3, [r7, #14]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2200      	movs	r2, #0
 8002704:	2118      	movs	r1, #24
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fa34 	bl	8002b74 <CODEC_IO_Write>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4413      	add	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  if(Device & OUTPUT_DEVICE_HEADPHONE)
 8002716:	89bb      	ldrh	r3, [r7, #12]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d022      	beq.n	8002766 <cs42l51_Init+0x2be>
  {
    Value = VOLUME_CONVERT(Volume);
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	2b63      	cmp	r3, #99	; 0x63
 8002724:	d805      	bhi.n	8002732 <cs42l51_Init+0x28a>
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	331c      	adds	r3, #28
 800272a:	b2db      	uxtb	r3, r3
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	e000      	b.n	8002734 <cs42l51_Init+0x28c>
 8002732:	2300      	movs	r3, #0
 8002734:	74fb      	strb	r3, [r7, #19]
    /* AOUTA volume control : AOUTA volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x16, Value);
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	7cfa      	ldrb	r2, [r7, #19]
 800273c:	2116      	movs	r1, #22
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fa18 	bl	8002b74 <CODEC_IO_Write>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* AOUTB volume control : AOUTB volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x17, Value);
 800274e:	89fb      	ldrh	r3, [r7, #14]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	7cfa      	ldrb	r2, [r7, #19]
 8002754:	2117      	movs	r1, #23
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fa0c 	bl	8002b74 <CODEC_IO_Write>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	4413      	add	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  }
  
  /* Store device */
  CS42L51_Device = Device;
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <cs42l51_Init+0x2d4>)
 8002768:	89bb      	ldrh	r3, [r7, #12]
 800276a:	8013      	strh	r3, [r2, #0]
  
  /* Return communication control value */
  return counter;  
 800276c:	697b      	ldr	r3, [r7, #20]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2001cb44 	.word	0x2001cb44
 800277c:	2001c092 	.word	0x2001c092

08002780 <cs42l51_DeInit>:
  * @brief  Deinitialize the audio codec.
  * @param  None
  * @retval  None
  */
void cs42l51_DeInit(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002784:	f002 fc42 	bl	800500c <AUDIO_IO_DeInit>
  
  Is_CS42L51_Initialized = 0;
 8002788:	4b02      	ldr	r3, [pc, #8]	; (8002794 <cs42l51_DeInit+0x14>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2001cb44 	.word	0x2001cb44

08002798 <cs42l51_ReadID>:
  * @brief  Get the CS42L51 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS42L51 ID 
  */
uint32_t cs42l51_ReadID(uint16_t DeviceAddr)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  
  if(Is_CS42L51_Initialized == 0)
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <cs42l51_ReadID+0x58>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d110      	bne.n	80027cc <cs42l51_ReadID+0x34>
  {
    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init(); 
 80027aa:	f002 fbd7 	bl	8004f5c <AUDIO_IO_Init>
    
    Value = AUDIO_IO_Read(DeviceAddr, CS42L51_CHIPID_ADDR);
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fc9e 	bl	80050f6 <AUDIO_IO_Read>
 80027ba:	4603      	mov	r3, r0
 80027bc:	73fb      	strb	r3, [r7, #15]
    Value = (Value & CS42L51_ID_MASK);
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	f023 0307 	bic.w	r3, r3, #7
 80027c4:	73fb      	strb	r3, [r7, #15]

    /* Deinitialize Audio Codec interface */
    AUDIO_IO_DeInit();
 80027c6:	f002 fc21 	bl	800500c <AUDIO_IO_DeInit>
 80027ca:	e00b      	b.n	80027e4 <cs42l51_ReadID+0x4c>
  }
  else
  {
    Value = AUDIO_IO_Read(DeviceAddr, CS42L51_CHIPID_ADDR);
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fc8f 	bl	80050f6 <AUDIO_IO_Read>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]
    Value = (Value & CS42L51_ID_MASK);
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	f023 0307 	bic.w	r3, r3, #7
 80027e2:	73fb      	strb	r3, [r7, #15]
  }
  
  return((uint32_t) Value);
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2001cb44 	.word	0x2001cb44

080027f4 <cs42l51_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	80fb      	strh	r3, [r7, #6]
 8002800:	4613      	mov	r3, r2
 8002802:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  uint8_t  Value;
  
  if(Is_CS42L51_Stop == 1)
 8002808:	4b44      	ldr	r3, [pc, #272]	; (800291c <cs42l51_Play+0x128>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d17f      	bne.n	8002910 <cs42l51_Play+0x11c>
  {
    /* Unmute output device */  
    counter += cs42l51_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f952 	bl	8002abe <cs42l51_SetMute>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

    if(CS42L51_Device & OUTPUT_DEVICE_HEADPHONE)
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <cs42l51_Play+0x12c>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d022      	beq.n	8002874 <cs42l51_Play+0x80>
    {
      /* DAC control : Signal processing to DAC, Freeze off, De-emphasis off, Analog output auto mute off, DAC soft ramp */
      counter += CODEC_IO_Write(DeviceAddr, 0x09, 0x42);
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2242      	movs	r2, #66	; 0x42
 8002834:	2109      	movs	r1, #9
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f99c 	bl	8002b74 <CODEC_IO_Write>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

      /* Power control 1 : PDN_DACA, PDN_DACB disable. */
      Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fc52 	bl	80050f6 <AUDIO_IO_Read>
 8002852:	4603      	mov	r3, r0
 8002854:	72fb      	strb	r3, [r7, #11]
      counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value & 0x9F));
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	b2d8      	uxtb	r0, r3
 800285a:	7afb      	ldrb	r3, [r7, #11]
 800285c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	2102      	movs	r1, #2
 8002866:	f000 f985 	bl	8002b74 <CODEC_IO_Write>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
    }

    if(CS42L51_Device & INPUT_DEVICE_MIC1)
 8002874:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <cs42l51_Play+0x12c>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d02d      	beq.n	80028dc <cs42l51_Play+0xe8>
    {
      /* Power control 1 : PDN_PGAA, PDN_ADCA disable. */
      Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fc35 	bl	80050f6 <AUDIO_IO_Read>
 800288c:	4603      	mov	r3, r0
 800288e:	72fb      	strb	r3, [r7, #11]
      counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value & 0xF5));
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	b2d8      	uxtb	r0, r3
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	f023 030a 	bic.w	r3, r3, #10
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	2102      	movs	r1, #2
 80028a0:	f000 f968 	bl	8002b74 <CODEC_IO_Write>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
      
      /* Mic Power and Speed Control : PDN_MICA, PDN_MIC_BIAS disable. */
      Value = AUDIO_IO_Read(DeviceAddr, 0x03);
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2103      	movs	r1, #3
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 fc1e 	bl	80050f6 <AUDIO_IO_Read>
 80028ba:	4603      	mov	r3, r0
 80028bc:	72fb      	strb	r3, [r7, #11]
      counter += CODEC_IO_Write(DeviceAddr, 0x03, (Value & 0xF9));
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	b2d8      	uxtb	r0, r3
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	f023 0306 	bic.w	r3, r3, #6
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	2103      	movs	r1, #3
 80028ce:	f000 f951 	bl	8002b74 <CODEC_IO_Write>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4413      	add	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
    }
    
    /* Power control : Exit standby (PDN = 0) */
    Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2102      	movs	r1, #2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fc07 	bl	80050f6 <AUDIO_IO_Read>
 80028e8:	4603      	mov	r3, r0
 80028ea:	72fb      	strb	r3, [r7, #11]
    counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value & 0xFE));
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	b2d8      	uxtb	r0, r3
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	2102      	movs	r1, #2
 80028fc:	f000 f93a 	bl	8002b74 <CODEC_IO_Write>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

    Is_CS42L51_Stop = 0;
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <cs42l51_Play+0x128>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8002910:	68fb      	ldr	r3, [r7, #12]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2001c090 	.word	0x2001c090
 8002920:	2001c092 	.word	0x2001c092

08002924 <cs42l51_Pause>:
  * @brief Pause playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Pause(uint16_t DeviceAddr)
{  
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs42l51_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f8c1 	bl	8002abe <cs42l51_SetMute>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
   
  return counter;
 8002944:	68fb      	ldr	r3, [r7, #12]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <cs42l51_Resume>:
  * @brief Resume playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Resume(uint16_t DeviceAddr)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Unmute the output  */
  counter += cs42l51_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f8ac 	bl	8002abe <cs42l51_SetMute>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <cs42l51_Stop>:
  * @param DeviceAddr: Device address on communication Bus. 
  * @param CodecPdwnMode: selects the  power down mode (currently not used).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  uint8_t  Value;
  
  /* Set all power down bits to 1 exept PDN to mute ADCs and DACs*/
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x7E);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	227e      	movs	r2, #126	; 0x7e
 800298e:	2102      	movs	r1, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f8ef 	bl	8002b74 <CODEC_IO_Write>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  Value = AUDIO_IO_Read(DeviceAddr, 0x03);
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2103      	movs	r1, #3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 fba5 	bl	80050f6 <AUDIO_IO_Read>
 80029ac:	4603      	mov	r3, r0
 80029ae:	72fb      	strb	r3, [r7, #11]
  counter += CODEC_IO_Write(DeviceAddr, 0x03, (Value | 0x0E));
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	b2d8      	uxtb	r0, r3
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	f043 030e 	orr.w	r3, r3, #14
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	2103      	movs	r1, #3
 80029c0:	f000 f8d8 	bl	8002b74 <CODEC_IO_Write>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  
  /* Disable zero cross and soft ramp */
  Value = AUDIO_IO_Read(DeviceAddr, 0x09);
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2109      	movs	r1, #9
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 fb8e 	bl	80050f6 <AUDIO_IO_Read>
 80029da:	4603      	mov	r3, r0
 80029dc:	72fb      	strb	r3, [r7, #11]
  counter += CODEC_IO_Write(DeviceAddr, 0x09, (Value & 0xFC));
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	b2d8      	uxtb	r0, r3
 80029e2:	7afb      	ldrb	r3, [r7, #11]
 80029e4:	f023 0303 	bic.w	r3, r3, #3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	2109      	movs	r1, #9
 80029ee:	f000 f8c1 	bl	8002b74 <CODEC_IO_Write>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461a      	mov	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Power control : Enter standby (PDN = 1) */
  Value = AUDIO_IO_Read(DeviceAddr, 0x02);
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2102      	movs	r1, #2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fb77 	bl	80050f6 <AUDIO_IO_Read>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	72fb      	strb	r3, [r7, #11]
  counter += CODEC_IO_Write(DeviceAddr, 0x02, (Value | 0x01));
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	b2d8      	uxtb	r0, r3
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	f000 f8aa 	bl	8002b74 <CODEC_IO_Write>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  Is_CS42L51_Stop = 1;
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <cs42l51_Stop+0xc4>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
  return counter;
 8002a30:	68fb      	ldr	r3, [r7, #12]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2001c090 	.word	0x2001c090

08002a40 <cs42l51_SetVolume>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param Volume: output volume level (from 0 (-100dB) to 100 (0dB)).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	460a      	mov	r2, r1
 8002a4a:	80fb      	strh	r3, [r7, #6]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  uint8_t  convertedvol = VOLUME_CONVERT(Volume);
 8002a54:	797b      	ldrb	r3, [r7, #5]
 8002a56:	2b63      	cmp	r3, #99	; 0x63
 8002a58:	d805      	bhi.n	8002a66 <cs42l51_SetVolume+0x26>
 8002a5a:	797b      	ldrb	r3, [r7, #5]
 8002a5c:	331c      	adds	r3, #28
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	e000      	b.n	8002a68 <cs42l51_SetVolume+0x28>
 8002a66:	2300      	movs	r3, #0
 8002a68:	72fb      	strb	r3, [r7, #11]

  /* AOUTA volume control : AOUTA volume */
  counter += CODEC_IO_Write(DeviceAddr, 0x16, convertedvol);
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	7afa      	ldrb	r2, [r7, #11]
 8002a70:	2116      	movs	r1, #22
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f87e 	bl	8002b74 <CODEC_IO_Write>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  /* AOUTB volume control : AOUTB volume */
  counter += CODEC_IO_Write(DeviceAddr, 0x17, convertedvol);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	7afa      	ldrb	r2, [r7, #11]
 8002a88:	2117      	movs	r1, #23
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f872 	bl	8002b74 <CODEC_IO_Write>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  return counter;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <cs42l51_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	80fb      	strh	r3, [r7, #6]
  return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <cs42l51_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	6039      	str	r1, [r7, #0]
 8002ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  uint8_t  Value;
  
  /* Read DAC output control register */
  Value = AUDIO_IO_Read(DeviceAddr, 0x08);
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fb0e 	bl	80050f6 <AUDIO_IO_Read>
 8002ada:	4603      	mov	r3, r0
 8002adc:	72fb      	strb	r3, [r7, #11]

  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10f      	bne.n	8002b04 <cs42l51_SetMute+0x46>
  {
    /* Mute DAC channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x08, (Value | 0x03));
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	b2d8      	uxtb	r0, r3
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	f043 0303 	orr.w	r3, r3, #3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	2108      	movs	r1, #8
 8002af4:	f000 f83e 	bl	8002b74 <CODEC_IO_Write>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e00e      	b.n	8002b22 <cs42l51_SetMute+0x64>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    /* Unmute DAC channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x08, (Value & 0xFC));
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	b2d8      	uxtb	r0, r3
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	2108      	movs	r1, #8
 8002b14:	f000 f82e 	bl	8002b74 <CODEC_IO_Write>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002b22:	68fb      	ldr	r3, [r7, #12]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <cs42l51_SetOutputMode>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param Output: specifies the audio output device target. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	460a      	mov	r2, r1
 8002b36:	80fb      	strh	r3, [r7, #6]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	717b      	strb	r3, [r7, #5]
  return 0;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <cs42l51_Reset>:
  * @brief Reset CS42L51 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs42l51_Reset(uint16_t DeviceAddr)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  if(Is_CS42L51_Initialized == 1)
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <cs42l51_Reset+0x24>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d103      	bne.n	8002b66 <cs42l51_Reset+0x1a>
  {
    /* Deinitialize Audio Codec interface */
    AUDIO_IO_DeInit();
 8002b5e:	f002 fa55 	bl	800500c <AUDIO_IO_DeInit>

    /* Initialize the Control interface of the Audio Codec */
    AUDIO_IO_Init();
 8002b62:	f002 f9fb 	bl	8004f5c <AUDIO_IO_Init>
  }
  return 0;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	2001cb44 	.word	0x2001cb44

08002b74 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	71bb      	strb	r3, [r7, #6]
 8002b82:	4613      	mov	r3, r2
 8002b84:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8002b8a:	797a      	ldrb	r2, [r7, #5]
 8002b8c:	79b9      	ldrb	r1, [r7, #6]
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 fa99 	bl	80050c8 <AUDIO_IO_Write>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
 8002b96:	79ba      	ldrb	r2, [r7, #6]
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 faaa 	bl	80050f6 <AUDIO_IO_Read>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	797b      	ldrb	r3, [r7, #5]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f90d 	bl	8002dec <ft6x06_GetInstance>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2bff      	cmp	r3, #255	; 0xff
 8002bda:	d10e      	bne.n	8002bfa <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f000 f905 	bl	8002dec <ft6x06_GetInstance>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d806      	bhi.n	8002bfa <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8002bec:	7bbb      	ldrb	r3, [r7, #14]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	b2d1      	uxtb	r1, r2
 8002bf2:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <ft6x06_Init+0x44>)
 8002bf4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8002bf6:	f002 fbc7 	bl	8005388 <TS_IO_Init>
    }
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2001cb48 	.word	0x2001cb48

08002c08 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8002c28:	f002 fbae 	bl	8005388 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	21a8      	movs	r1, #168	; 0xa8
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 fbee 	bl	8005414 <TS_IO_Read>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b29b      	uxth	r3, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f8bc 	bl	8002dce <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f88d 	bl	8002d78 <ft6x06_TS_DisableIT>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 fbc9 	bl	8005414 <TS_IO_Read>
 8002c82:	4603      	mov	r3, r0
 8002c84:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <ft6x06_TS_DetectTouch+0x50>)
 8002ca4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <ft6x06_TS_DetectTouch+0x50>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	b2db      	uxtb	r3, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2001cb4c 	.word	0x2001cb4c

08002cbc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002cce:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <ft6x06_TS_GetXY+0x90>)
 8002cd0:	789a      	ldrb	r2, [r3, #2]
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <ft6x06_TS_GetXY+0x90>)
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d234      	bcs.n	8002d44 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002cda:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <ft6x06_TS_GetXY+0x90>)
 8002cdc:	789b      	ldrb	r3, [r3, #2]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <ft6x06_TS_GetXY+0x2c>
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d003      	beq.n	8002cee <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8002ce6:	e005      	b.n	8002cf4 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8002ce8:	2303      	movs	r3, #3
 8002cea:	75fb      	strb	r3, [r7, #23]
      break;
 8002cec:	e002      	b.n	8002cf4 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8002cee:	2309      	movs	r3, #9
 8002cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf2:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002cf4:	89fb      	ldrh	r3, [r7, #14]
 8002cf6:	b2d8      	uxtb	r0, r3
 8002cf8:	f107 0210 	add.w	r2, r7, #16
 8002cfc:	7df9      	ldrb	r1, [r7, #23]
 8002cfe:	2304      	movs	r3, #4
 8002d00:	f002 fb9e 	bl	8005440 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8002d04:	7c3b      	ldrb	r3, [r7, #16]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	b21b      	sxth	r3, r3
 8002d0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d0e:	b21a      	sxth	r2, r3
 8002d10:	7c7b      	ldrb	r3, [r7, #17]
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002d1e:	7cbb      	ldrb	r3, [r7, #18]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d28:	b21a      	sxth	r2, r3
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	b21b      	sxth	r3, r3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <ft6x06_TS_GetXY+0x90>)
 8002d3a:	789b      	ldrb	r3, [r3, #2]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <ft6x06_TS_GetXY+0x90>)
 8002d42:	709a      	strb	r2, [r3, #2]
  }
}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2001cb4c 	.word	0x2001cb4c

08002d50 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	21a4      	movs	r1, #164	; 0xa4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 fb38 	bl	80053e0 <TS_IO_Write>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	21a4      	movs	r1, #164	; 0xa4
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 fb24 	bl	80053e0 <TS_IO_Write>
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e00b      	b.n	8002e18 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <ft6x06_GetInstance+0x40>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	88fa      	ldrh	r2, [r7, #6]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d101      	bne.n	8002e12 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	e006      	b.n	8002e20 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	3301      	adds	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d9f0      	bls.n	8002e00 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002e1e:	23ff      	movs	r3, #255	; 0xff
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	2001cb48 	.word	0x2001cb48

08002e30 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 ffd1 	bl	8003de4 <mfxstm32l152_GetInstance>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2bff      	cmp	r3, #255	; 0xff
 8002e4a:	d10e      	bne.n	8002e6a <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f000 ffc9 	bl	8003de4 <mfxstm32l152_GetInstance>
 8002e52:	4603      	mov	r3, r0
 8002e54:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8002e56:	7bbb      	ldrb	r3, [r7, #14]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d806      	bhi.n	8002e6a <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8002e5c:	7bbb      	ldrb	r3, [r7, #14]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	b2d1      	uxtb	r1, r2
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <mfxstm32l152_Init+0x58>)
 8002e64:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8002e66:	f001 ff79 	bl	8004d5c <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f8db 	bl	800302a <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	2101      	movs	r1, #1
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f8fc 	bl	8003076 <mfxstm32l152_SetIrqOutPinType>
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2001cb50 	.word	0x2001cb50

08002e8c <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 ffc3 	bl	8003e24 <mfxstm32l152_ReleaseInstance>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2bff      	cmp	r3, #255	; 0xff
 8002ea6:	d001      	beq.n	8002eac <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8002ea8:	f001 ff68 	bl	8004d7c <MFX_IO_DeInit>
  }
}
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fffb 	bl	8004ec0 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8002eca:	200a      	movs	r0, #10
 8002ecc:	f002 f83a 	bl	8004f44 <MFX_IO_Delay>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	2240      	movs	r2, #64	; 0x40
 8002ee6:	2140      	movs	r1, #64	; 0x40
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 ffe9 	bl	8004ec0 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8002eee:	f001 ffaf 	bl	8004e50 <MFX_IO_EnableWakeupPin>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 ff6c 	bl	8003de4 <mfxstm32l152_GetInstance>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d101      	bne.n	8002f1a <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8002f16:	f001 ff9b 	bl	8004e50 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8002f1a:	f001 ffbd 	bl	8004e98 <MFX_IO_Wakeup>
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f002 f807 	bl	8004f44 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8002f36:	f001 ff11 	bl	8004d5c <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 ffd2 	bl	8004ee8 <MFX_IO_Read>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	b29b      	uxth	r3, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	80fb      	strh	r3, [r7, #6]
 8002f60:	4613      	mov	r3, r2
 8002f62:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	2142      	movs	r1, #66	; 0x42
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 ffbb 	bl	8004ee8 <MFX_IO_Read>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	797b      	ldrb	r3, [r7, #5]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2142      	movs	r1, #66	; 0x42
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 ff9b 	bl	8004ec0 <MFX_IO_Write>
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	80fb      	strh	r3, [r7, #6]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	2142      	movs	r1, #66	; 0x42
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 ff9c 	bl	8004ee8 <MFX_IO_Read>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8002fb4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	b25a      	sxtb	r2, r3
 8002fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2142      	movs	r1, #66	; 0x42
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 ff77 	bl	8004ec0 <MFX_IO_Write>
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	460a      	mov	r2, r1
 8002fe4:	80fb      	strh	r3, [r7, #6]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2108      	movs	r1, #8
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 ff7a 	bl	8004ee8 <MFX_IO_Read>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	797b      	ldrb	r3, [r7, #5]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b2db      	uxtb	r3, r3
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	460a      	mov	r2, r1
 8003010:	80fb      	strh	r3, [r7, #6]
 8003012:	4613      	mov	r3, r2
 8003014:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8003016:	797a      	ldrb	r2, [r7, #5]
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	2144      	movs	r1, #68	; 0x44
 800301c:	4618      	mov	r0, r3
 800301e:	f001 ff4f 	bl	8004ec0 <MFX_IO_Write>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	460a      	mov	r2, r1
 8003034:	80fb      	strh	r3, [r7, #6]
 8003036:	4613      	mov	r3, r2
 8003038:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2141      	movs	r1, #65	; 0x41
 8003042:	4618      	mov	r0, r3
 8003044:	f001 ff50 	bl	8004ee8 <MFX_IO_Read>
 8003048:	4603      	mov	r3, r0
 800304a:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	f023 0302 	bic.w	r3, r3, #2
 8003052:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	797b      	ldrb	r3, [r7, #5]
 8003058:	4313      	orrs	r3, r2
 800305a:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2141      	movs	r1, #65	; 0x41
 8003062:	4618      	mov	r0, r3
 8003064:	f001 ff2c 	bl	8004ec0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003068:	2001      	movs	r0, #1
 800306a:	f001 ff6b 	bl	8004f44 <MFX_IO_Delay>

}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	460a      	mov	r2, r1
 8003080:	80fb      	strh	r3, [r7, #6]
 8003082:	4613      	mov	r3, r2
 8003084:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2141      	movs	r1, #65	; 0x41
 800308e:	4618      	mov	r0, r3
 8003090:	f001 ff2a 	bl	8004ee8 <MFX_IO_Read>
 8003094:	4603      	mov	r3, r0
 8003096:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	797b      	ldrb	r3, [r7, #5]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2141      	movs	r1, #65	; 0x41
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 ff06 	bl	8004ec0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f001 ff45 	bl	8004f44 <MFX_IO_Delay>

}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	6039      	str	r1, [r7, #0]
 80030cc:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2140      	movs	r1, #64	; 0x40
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 ff08 	bl	8004ee8 <MFX_IO_Read>
 80030d8:	4603      	mov	r3, r0
 80030da:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ea:	d304      	bcc.n	80030f6 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	f043 0308 	orr.w	r3, r3, #8
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e003      	b.n	80030fe <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	f023 0308 	bic.w	r3, r3, #8
 80030fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	4618      	mov	r0, r3
 8003106:	f001 fedb 	bl	8004ec0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800310a:	2001      	movs	r0, #1
 800310c:	f001 ff1a 	bl	8004f44 <MFX_IO_Delay>
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	80fb      	strh	r3, [r7, #6]
 8003124:	4613      	mov	r3, r2
 8003126:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 800312c:	797b      	ldrb	r3, [r7, #5]
 800312e:	2b17      	cmp	r3, #23
 8003130:	f200 82d4 	bhi.w	80036dc <mfxstm32l152_IO_Config+0x5c4>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <mfxstm32l152_IO_Config+0x24>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	080031cd 	.word	0x080031cd
 8003140:	0800325d 	.word	0x0800325d
 8003144:	0800331d 	.word	0x0800331d
 8003148:	0800340d 	.word	0x0800340d
 800314c:	080034fd 	.word	0x080034fd
 8003150:	080035ed 	.word	0x080035ed
 8003154:	0800319d 	.word	0x0800319d
 8003158:	0800319d 	.word	0x0800319d
 800315c:	080031fd 	.word	0x080031fd
 8003160:	0800322d 	.word	0x0800322d
 8003164:	080036dd 	.word	0x080036dd
 8003168:	080032ed 	.word	0x080032ed
 800316c:	080032bd 	.word	0x080032bd
 8003170:	080036dd 	.word	0x080036dd
 8003174:	0800328d 	.word	0x0800328d
 8003178:	0800325d 	.word	0x0800325d
 800317c:	0800336d 	.word	0x0800336d
 8003180:	080033bd 	.word	0x080033bd
 8003184:	0800345d 	.word	0x0800345d
 8003188:	080034ad 	.word	0x080034ad
 800318c:	0800354d 	.word	0x0800354d
 8003190:	0800359d 	.word	0x0800359d
 8003194:	0800363d 	.word	0x0800363d
 8003198:	0800368d 	.word	0x0800368d
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fb67 	bl	8003874 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	2200      	movs	r2, #0
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fa9d 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80031b2:	88f8      	ldrh	r0, [r7, #6]
 80031b4:	2300      	movs	r3, #0
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	2164      	movs	r1, #100	; 0x64
 80031ba:	f000 fe57 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80031be:	88f8      	ldrh	r0, [r7, #6]
 80031c0:	2300      	movs	r3, #0
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	2168      	movs	r1, #104	; 0x68
 80031c6:	f000 fe51 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    break;
 80031ca:	e28a      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	6839      	ldr	r1, [r7, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fb4f 	bl	8003874 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	2200      	movs	r2, #0
 80031da:	6839      	ldr	r1, [r7, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fa85 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80031e2:	88f8      	ldrh	r0, [r7, #6]
 80031e4:	2300      	movs	r3, #0
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	2164      	movs	r1, #100	; 0x64
 80031ea:	f000 fe3f 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80031ee:	88f8      	ldrh	r0, [r7, #6]
 80031f0:	2301      	movs	r3, #1
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	2168      	movs	r1, #104	; 0x68
 80031f6:	f000 fe39 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    break;
 80031fa:	e272      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	6839      	ldr	r1, [r7, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fb37 	bl	8003874 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2200      	movs	r2, #0
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fa6d 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003212:	88f8      	ldrh	r0, [r7, #6]
 8003214:	2301      	movs	r3, #1
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	2164      	movs	r1, #100	; 0x64
 800321a:	f000 fe27 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800321e:	88f8      	ldrh	r0, [r7, #6]
 8003220:	2301      	movs	r3, #1
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	2168      	movs	r1, #104	; 0x68
 8003226:	f000 fe21 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    break;
 800322a:	e25a      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	6839      	ldr	r1, [r7, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fb1f 	bl	8003874 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	2200      	movs	r2, #0
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa55 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003242:	88f8      	ldrh	r0, [r7, #6]
 8003244:	2301      	movs	r3, #1
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	2164      	movs	r1, #100	; 0x64
 800324a:	f000 fe0f 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800324e:	88f8      	ldrh	r0, [r7, #6]
 8003250:	2300      	movs	r3, #0
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	2168      	movs	r1, #104	; 0x68
 8003256:	f000 fe09 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    break;
 800325a:	e242      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	6839      	ldr	r1, [r7, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fb07 	bl	8003874 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2201      	movs	r2, #1
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fa3d 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8003272:	88f8      	ldrh	r0, [r7, #6]
 8003274:	2300      	movs	r3, #0
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	2164      	movs	r1, #100	; 0x64
 800327a:	f000 fdf7 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800327e:	88f8      	ldrh	r0, [r7, #6]
 8003280:	2300      	movs	r3, #0
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	2168      	movs	r1, #104	; 0x68
 8003286:	f000 fdf1 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    break;
 800328a:	e22a      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 faef 	bl	8003874 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	2201      	movs	r2, #1
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fa25 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80032a2:	88f8      	ldrh	r0, [r7, #6]
 80032a4:	2300      	movs	r3, #0
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	2164      	movs	r1, #100	; 0x64
 80032aa:	f000 fddf 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80032ae:	88f8      	ldrh	r0, [r7, #6]
 80032b0:	2301      	movs	r3, #1
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	2168      	movs	r1, #104	; 0x68
 80032b6:	f000 fdd9 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    break;
 80032ba:	e212      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fad7 	bl	8003874 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	2201      	movs	r2, #1
 80032ca:	6839      	ldr	r1, [r7, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fa0d 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80032d2:	88f8      	ldrh	r0, [r7, #6]
 80032d4:	2301      	movs	r3, #1
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	2164      	movs	r1, #100	; 0x64
 80032da:	f000 fdc7 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80032de:	88f8      	ldrh	r0, [r7, #6]
 80032e0:	2300      	movs	r3, #0
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	2168      	movs	r1, #104	; 0x68
 80032e6:	f000 fdc1 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    break;
 80032ea:	e1fa      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	6839      	ldr	r1, [r7, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fabf 	bl	8003874 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2201      	movs	r2, #1
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f9f5 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8003302:	88f8      	ldrh	r0, [r7, #6]
 8003304:	2301      	movs	r3, #1
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	2164      	movs	r1, #100	; 0x64
 800330a:	f000 fdaf 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800330e:	88f8      	ldrh	r0, [r7, #6]
 8003310:	2301      	movs	r3, #1
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	2168      	movs	r1, #104	; 0x68
 8003316:	f000 fda9 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    break;
 800331a:	e1e2      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa7a 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	2200      	movs	r2, #0
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f9de 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003330:	88f8      	ldrh	r0, [r7, #6]
 8003332:	2300      	movs	r3, #0
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	2164      	movs	r1, #100	; 0x64
 8003338:	f000 fd98 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800333c:	88f8      	ldrh	r0, [r7, #6]
 800333e:	2301      	movs	r3, #1
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	2168      	movs	r1, #104	; 0x68
 8003344:	f000 fd92 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	2201      	movs	r2, #1
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f9de 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	2201      	movs	r2, #1
 8003358:	6839      	ldr	r1, [r7, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f9ed 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	6839      	ldr	r1, [r7, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fa75 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 800336a:	e1ba      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa52 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	2200      	movs	r2, #0
 8003378:	6839      	ldr	r1, [r7, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f9b6 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003380:	88f8      	ldrh	r0, [r7, #6]
 8003382:	2301      	movs	r3, #1
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	2164      	movs	r1, #100	; 0x64
 8003388:	f000 fd70 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800338c:	88f8      	ldrh	r0, [r7, #6]
 800338e:	2301      	movs	r3, #1
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	2168      	movs	r1, #104	; 0x68
 8003394:	f000 fd6a 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	2201      	movs	r2, #1
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f9b6 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2201      	movs	r2, #1
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f9c5 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fa4d 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 80033ba:	e192      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fa2a 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2200      	movs	r2, #0
 80033c8:	6839      	ldr	r1, [r7, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f98e 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80033d0:	88f8      	ldrh	r0, [r7, #6]
 80033d2:	2301      	movs	r3, #1
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	2164      	movs	r1, #100	; 0x64
 80033d8:	f000 fd48 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80033dc:	88f8      	ldrh	r0, [r7, #6]
 80033de:	2300      	movs	r3, #0
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	2168      	movs	r1, #104	; 0x68
 80033e4:	f000 fd42 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	2201      	movs	r2, #1
 80033ec:	6839      	ldr	r1, [r7, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f98e 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	2201      	movs	r2, #1
 80033f8:	6839      	ldr	r1, [r7, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f99d 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fa25 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 800340a:	e16a      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fa02 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	2200      	movs	r2, #0
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f966 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003420:	88f8      	ldrh	r0, [r7, #6]
 8003422:	2300      	movs	r3, #0
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	f000 fd20 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800342c:	88f8      	ldrh	r0, [r7, #6]
 800342e:	2301      	movs	r3, #1
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	2168      	movs	r1, #104	; 0x68
 8003434:	f000 fd1a 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	2201      	movs	r2, #1
 800343c:	6839      	ldr	r1, [r7, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f966 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2200      	movs	r2, #0
 8003448:	6839      	ldr	r1, [r7, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f975 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f9fd 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 800345a:	e142      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f9da 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	2200      	movs	r2, #0
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f93e 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003470:	88f8      	ldrh	r0, [r7, #6]
 8003472:	2301      	movs	r3, #1
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	2164      	movs	r1, #100	; 0x64
 8003478:	f000 fcf8 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800347c:	88f8      	ldrh	r0, [r7, #6]
 800347e:	2301      	movs	r3, #1
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	2168      	movs	r1, #104	; 0x68
 8003484:	f000 fcf2 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	2201      	movs	r2, #1
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f93e 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	2200      	movs	r2, #0
 8003498:	6839      	ldr	r1, [r7, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f94d 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	6839      	ldr	r1, [r7, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 f9d5 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 80034aa:	e11a      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f9b2 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2200      	movs	r2, #0
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f916 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80034c0:	88f8      	ldrh	r0, [r7, #6]
 80034c2:	2301      	movs	r3, #1
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	2164      	movs	r1, #100	; 0x64
 80034c8:	f000 fcd0 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80034cc:	88f8      	ldrh	r0, [r7, #6]
 80034ce:	2300      	movs	r3, #0
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	2168      	movs	r1, #104	; 0x68
 80034d4:	f000 fcca 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	2201      	movs	r2, #1
 80034dc:	6839      	ldr	r1, [r7, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f916 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	2200      	movs	r2, #0
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f925 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f9ad 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 80034fa:	e0f2      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f98a 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	2200      	movs	r2, #0
 8003508:	6839      	ldr	r1, [r7, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f8ee 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003510:	88f8      	ldrh	r0, [r7, #6]
 8003512:	2300      	movs	r3, #0
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	2164      	movs	r1, #100	; 0x64
 8003518:	f000 fca8 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800351c:	88f8      	ldrh	r0, [r7, #6]
 800351e:	2301      	movs	r3, #1
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	2168      	movs	r1, #104	; 0x68
 8003524:	f000 fca2 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2200      	movs	r2, #0
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f8ee 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	2200      	movs	r2, #0
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f8fd 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	6839      	ldr	r1, [r7, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f985 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 800354a:	e0ca      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f962 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	2200      	movs	r2, #0
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f8c6 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003560:	88f8      	ldrh	r0, [r7, #6]
 8003562:	2301      	movs	r3, #1
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	2164      	movs	r1, #100	; 0x64
 8003568:	f000 fc80 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800356c:	88f8      	ldrh	r0, [r7, #6]
 800356e:	2301      	movs	r3, #1
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	2168      	movs	r1, #104	; 0x68
 8003574:	f000 fc7a 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2200      	movs	r2, #0
 800357c:	6839      	ldr	r1, [r7, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f8c6 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	2200      	movs	r2, #0
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f8d5 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f95d 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 800359a:	e0a2      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f93a 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	2200      	movs	r2, #0
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f89e 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80035b0:	88f8      	ldrh	r0, [r7, #6]
 80035b2:	2301      	movs	r3, #1
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	2164      	movs	r1, #100	; 0x64
 80035b8:	f000 fc58 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80035bc:	88f8      	ldrh	r0, [r7, #6]
 80035be:	2300      	movs	r3, #0
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	2168      	movs	r1, #104	; 0x68
 80035c4:	f000 fc52 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2200      	movs	r2, #0
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f89e 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	2200      	movs	r2, #0
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f8ad 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f935 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 80035ea:	e07a      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f912 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	2200      	movs	r2, #0
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f876 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003600:	88f8      	ldrh	r0, [r7, #6]
 8003602:	2300      	movs	r3, #0
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	2164      	movs	r1, #100	; 0x64
 8003608:	f000 fc30 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800360c:	88f8      	ldrh	r0, [r7, #6]
 800360e:	2301      	movs	r3, #1
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	2168      	movs	r1, #104	; 0x68
 8003614:	f000 fc2a 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	2200      	movs	r2, #0
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f876 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	2201      	movs	r2, #1
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f885 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	6839      	ldr	r1, [r7, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f90d 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 800363a:	e052      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f8ea 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	2200      	movs	r2, #0
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f84e 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003650:	88f8      	ldrh	r0, [r7, #6]
 8003652:	2301      	movs	r3, #1
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	2164      	movs	r1, #100	; 0x64
 8003658:	f000 fc08 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800365c:	88f8      	ldrh	r0, [r7, #6]
 800365e:	2301      	movs	r3, #1
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	2168      	movs	r1, #104	; 0x68
 8003664:	f000 fc02 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	2200      	movs	r2, #0
 800366c:	6839      	ldr	r1, [r7, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f84e 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	2201      	movs	r2, #1
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f85d 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	6839      	ldr	r1, [r7, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f8e5 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 800368a:	e02a      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f8c2 	bl	8003818 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	2200      	movs	r2, #0
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f826 	bl	80036ec <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80036a0:	88f8      	ldrh	r0, [r7, #6]
 80036a2:	2301      	movs	r3, #1
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	2164      	movs	r1, #100	; 0x64
 80036a8:	f000 fbe0 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80036ac:	88f8      	ldrh	r0, [r7, #6]
 80036ae:	2300      	movs	r3, #0
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	2168      	movs	r1, #104	; 0x68
 80036b4:	f000 fbda 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2200      	movs	r2, #0
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f826 	bl	8003710 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2201      	movs	r2, #1
 80036c8:	6839      	ldr	r1, [r7, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f835 	bl	800373a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f8bd 	bl	8003854 <mfxstm32l152_IO_EnablePinIT>
    break;
 80036da:	e002      	b.n	80036e2 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80036dc:	797b      	ldrb	r3, [r7, #5]
 80036de:	73fb      	strb	r3, [r7, #15]
    break;
 80036e0:	bf00      	nop
  }

  return error_code;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	80fb      	strh	r3, [r7, #6]
 80036f8:	4613      	mov	r3, r2
 80036fa:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 80036fc:	797b      	ldrb	r3, [r7, #5]
 80036fe:	88f8      	ldrh	r0, [r7, #6]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	2160      	movs	r1, #96	; 0x60
 8003704:	f000 fbb2 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	80fb      	strh	r3, [r7, #6]
 800371c:	4613      	mov	r3, r2
 800371e:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8003720:	797b      	ldrb	r3, [r7, #5]
 8003722:	88f8      	ldrh	r0, [r7, #6]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	214c      	movs	r1, #76	; 0x4c
 8003728:	f000 fba0 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800372c:	2001      	movs	r0, #1
 800372e:	f001 fc09 	bl	8004f44 <MFX_IO_Delay>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	6039      	str	r1, [r7, #0]
 8003744:	80fb      	strh	r3, [r7, #6]
 8003746:	4613      	mov	r3, r2
 8003748:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800374a:	797b      	ldrb	r3, [r7, #5]
 800374c:	88f8      	ldrh	r0, [r7, #6]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	2150      	movs	r1, #80	; 0x50
 8003752:	f000 fb8b 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003756:	2001      	movs	r0, #1
 8003758:	f001 fbf4 	bl	8004f44 <MFX_IO_Delay>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	6039      	str	r1, [r7, #0]
 800376e:	80fb      	strh	r3, [r7, #6]
 8003770:	4613      	mov	r3, r2
 8003772:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8003774:	797b      	ldrb	r3, [r7, #5]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800377a:	88f8      	ldrh	r0, [r7, #6]
 800377c:	2301      	movs	r3, #1
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	216c      	movs	r1, #108	; 0x6c
 8003782:	f000 fb73 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8003786:	e005      	b.n	8003794 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8003788:	88f8      	ldrh	r0, [r7, #6]
 800378a:	2301      	movs	r3, #1
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	2170      	movs	r1, #112	; 0x70
 8003790:	f000 fb6c 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	2110      	movs	r1, #16
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 fb91 	bl	8004ee8 <MFX_IO_Read>
 80037c6:	4603      	mov	r3, r0
 80037c8:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d006      	beq.n	80037e2 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	2111      	movs	r1, #17
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fb85 	bl	8004ee8 <MFX_IO_Read>
 80037de:	4603      	mov	r3, r0
 80037e0:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	2112      	movs	r1, #18
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 fb79 	bl	8004ee8 <MFX_IO_Read>
 80037f6:	4603      	mov	r3, r0
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	021a      	lsls	r2, r3, #8
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	441a      	add	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	4413      	add	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	4013      	ands	r3, r2
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003822:	f001 fae7 	bl	8004df4 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fb92 	bl	8002f54 <mfxstm32l152_EnableITSource>
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fba3 	bl	8002f92 <mfxstm32l152_DisableITSource>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	6039      	str	r1, [r7, #0]
 800385e:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8003860:	88f8      	ldrh	r0, [r7, #6]
 8003862:	2301      	movs	r3, #1
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	2148      	movs	r1, #72	; 0x48
 8003868:	f000 fb00 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8003880:	88f8      	ldrh	r0, [r7, #6]
 8003882:	2300      	movs	r3, #0
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	2148      	movs	r1, #72	; 0x48
 8003888:	f000 faf0 	bl	8003e6c <mfxstm32l152_reg24_setPinValue>
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d006      	beq.n	80038c2 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	210c      	movs	r1, #12
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 fb15 	bl	8004ee8 <MFX_IO_Read>
 80038be:	4603      	mov	r3, r0
 80038c0:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d006      	beq.n	80038de <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	210d      	movs	r1, #13
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 fb07 	bl	8004ee8 <MFX_IO_Read>
 80038da:	4603      	mov	r3, r0
 80038dc:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d006      	beq.n	80038f6 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	210e      	movs	r1, #14
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fafb 	bl	8004ee8 <MFX_IO_Read>
 80038f2:	4603      	mov	r3, r0
 80038f4:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	89bb      	ldrh	r3, [r7, #12]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	4413      	add	r3, r2
 80038fe:	461a      	mov	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	4413      	add	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	4013      	ands	r3, r2
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	4603      	mov	r3, r0
 800391e:	6039      	str	r1, [r7, #0]
 8003920:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2154      	movs	r1, #84	; 0x54
 800393e:	4618      	mov	r0, r3
 8003940:	f001 fabe 	bl	8004ec0 <MFX_IO_Write>
  }
  if (pin_8_15)
 8003944:	7bbb      	ldrb	r3, [r7, #14]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 800394a:	7bba      	ldrb	r2, [r7, #14]
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2155      	movs	r1, #85	; 0x55
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fab5 	bl	8004ec0 <MFX_IO_Write>
  }
  if (pin_16_23)
 8003956:	7b7b      	ldrb	r3, [r7, #13]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 800395c:	7b7a      	ldrb	r2, [r7, #13]
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	2156      	movs	r1, #86	; 0x56
 8003962:	4618      	mov	r0, r3
 8003964:	f001 faac 	bl	8004ec0 <MFX_IO_Write>
  }
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	b29b      	uxth	r3, r3
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	4618      	mov	r0, r3
 8003988:	f001 faae 	bl	8004ee8 <MFX_IO_Read>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	b29b      	uxth	r3, r3
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 fa8c 	bl	8004ec0 <MFX_IO_Write>
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80039b0:	b084      	sub	sp, #16
 80039b2:	b590      	push	{r4, r7, lr}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4604      	mov	r4, r0
 80039ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80039c2:	4623      	mov	r3, r4
 80039c4:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2140      	movs	r1, #64	; 0x40
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fa86 	bl	8004ee8 <MFX_IO_Read>
 80039dc:	4603      	mov	r3, r0
 80039de:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80039e0:	7bbb      	ldrb	r3, [r7, #14]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80039ea:	7bbb      	ldrb	r3, [r7, #14]
 80039ec:	f043 0304 	orr.w	r3, r3, #4
 80039f0:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	7bba      	ldrb	r2, [r7, #14]
 80039fa:	2140      	movs	r1, #64	; 0x40
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fa5f 	bl	8004ec0 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8003a02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f003 030e 	and.w	r3, r3, #14
 8003a0e:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8003a10:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	b25a      	sxtb	r2, r3
 8003a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8003a26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a2a:	b25b      	sxtb	r3, r3
 8003a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a30:	b25a      	sxtb	r2, r3
 8003a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fa3a 	bl	8004ec0 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003a4c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003a50:	b25b      	sxtb	r3, r3
 8003a52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a56:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8003a58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003a5c:	b25b      	sxtb	r3, r3
 8003a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a62:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003a64:	4313      	orrs	r3, r2
 8003a66:	b25b      	sxtb	r3, r3
 8003a68:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	2181      	movs	r1, #129	; 0x81
 8003a74:	4618      	mov	r0, r3
 8003a76:	f001 fa23 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8003a7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	2182      	movs	r1, #130	; 0x82
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fa17 	bl	8004ec0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8003a92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a94:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	2183      	movs	r1, #131	; 0x83
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 fa0d 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8003aa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	2184      	movs	r1, #132	; 0x84
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 fa01 	bl	8004ec0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8003abe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ac0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	2185      	movs	r1, #133	; 0x85
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 f9f7 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8003ad2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	2186      	movs	r1, #134	; 0x86
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f9eb 	bl	8004ec0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8003aea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003aec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	2187      	movs	r1, #135	; 0x87
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 f9e1 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8003afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b00:	0a1b      	lsrs	r3, r3, #8
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	2188      	movs	r1, #136	; 0x88
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 f9d5 	bl	8004ec0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8003b16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b18:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	2189      	movs	r1, #137	; 0x89
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f9cb 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8003b2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	218a      	movs	r1, #138	; 0x8a
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 f9bf 	bl	8004ec0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8003b42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003b44:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	218b      	movs	r1, #139	; 0x8b
 8003b50:	4618      	mov	r0, r3
 8003b52:	f001 f9b5 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8003b56:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b58:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	2190      	movs	r1, #144	; 0x90
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 f9ab 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8003b6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b6c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	2191      	movs	r1, #145	; 0x91
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 f9a1 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8003b7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b80:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	2192      	movs	r1, #146	; 0x92
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f001 f997 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8003b92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b94:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	2193      	movs	r1, #147	; 0x93
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f98d 	bl	8004ec0 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8003ba6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ba8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	2194      	movs	r1, #148	; 0x94
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 f983 	bl	8004ec0 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8003bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	218c      	movs	r1, #140	; 0x8c
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 f977 	bl	8004ec0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8003bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bd4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	218d      	movs	r1, #141	; 0x8d
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 f96d 	bl	8004ec0 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8003be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	218e      	movs	r1, #142	; 0x8e
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 f961 	bl	8004ec0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8003bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c00:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	218f      	movs	r1, #143	; 0x8f
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f957 	bl	8004ec0 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8003c12:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003c16:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	2196      	movs	r1, #150	; 0x96
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 f94c 	bl	8004ec0 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003c28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c32:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8003c34:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c3e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b25b      	sxtb	r3, r3
 8003c44:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	2197      	movs	r1, #151	; 0x97
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f935 	bl	8004ec0 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8003c56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003c5a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	2198      	movs	r1, #152	; 0x98
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f92a 	bl	8004ec0 <MFX_IO_Write>
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003c76:	b004      	add	sp, #16
 8003c78:	4770      	bx	lr

08003c7a <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	4603      	mov	r3, r0
 8003c82:	6039      	str	r1, [r7, #0]
 8003c84:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	b298      	uxth	r0, r3
 8003c8c:	f107 020c 	add.w	r2, r7, #12
 8003c90:	2303      	movs	r3, #3
 8003c92:	2114      	movs	r1, #20
 8003c94:	f001 f93c 	bl	8004f10 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8003c98:	7b3b      	ldrb	r3, [r7, #12]
 8003c9a:	041a      	lsls	r2, r3, #16
 8003c9c:	7b7b      	ldrb	r3, [r7, #13]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	7bba      	ldrb	r2, [r7, #14]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	601a      	str	r2, [r3, #0]

}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003cbe:	f001 f899 	bl	8004df4 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f944 	bl	8002f54 <mfxstm32l152_EnableITSource>
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f98f 	bl	8003006 <mfxstm32l152_ClearGlobalIT>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff f96b 	bl	8002fda <mfxstm32l152_GlobalITStatus>
 8003d04:	4603      	mov	r3, r0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff f938 	bl	8002f92 <mfxstm32l152_DisableITSource>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2103      	movs	r1, #3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 f8d3 	bl	8004ee8 <MFX_IO_Read>
 8003d42:	4603      	mov	r3, r0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2104      	movs	r1, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 f8c2 	bl	8004ee8 <MFX_IO_Read>
 8003d64:	4603      	mov	r3, r0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003d78:	f001 f83c 	bl	8004df4 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	2104      	movs	r1, #4
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff f8e7 	bl	8002f54 <mfxstm32l152_EnableITSource>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	2104      	movs	r1, #4
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff f932 	bl	8003006 <mfxstm32l152_ClearGlobalIT>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2104      	movs	r1, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff f90e 	bl	8002fda <mfxstm32l152_GlobalITStatus>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff f8db 	bl	8002f92 <mfxstm32l152_DisableITSource>
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e00b      	b.n	8003e0c <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <mfxstm32l152_GetInstance+0x3c>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d101      	bne.n	8003e06 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	e006      	b.n	8003e14 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d9f0      	bls.n	8003df4 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8003e12:	23ff      	movs	r3, #255	; 0xff
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	2001cb50 	.word	0x2001cb50

08003e24 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	e00f      	b.n	8003e54 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <mfxstm32l152_ReleaseInstance+0x44>)
 8003e38:	5cd3      	ldrb	r3, [r2, r3]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	88fa      	ldrh	r2, [r7, #6]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d105      	bne.n	8003e4e <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <mfxstm32l152_ReleaseInstance+0x44>)
 8003e46:	2100      	movs	r1, #0
 8003e48:	54d1      	strb	r1, [r2, r3]
      return idx;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	e006      	b.n	8003e5c <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	3301      	adds	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d9ec      	bls.n	8003e34 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8003e5a:	23ff      	movs	r3, #255	; 0xff
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	2001cb50 	.word	0x2001cb50

08003e6c <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	603a      	str	r2, [r7, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	80fb      	strh	r3, [r7, #6]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	717b      	strb	r3, [r7, #5]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8003e96:	7bbb      	ldrb	r3, [r7, #14]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01e      	beq.n	8003eda <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8003e9c:	797a      	ldrb	r2, [r7, #5]
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 f820 	bl	8004ee8 <MFX_IO_Read>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003eac:	793b      	ldrb	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	7bbb      	ldrb	r3, [r7, #14]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	e008      	b.n	8003ece <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8003ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	b25a      	sxtb	r2, r3
 8003ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	b25b      	sxtb	r3, r3
 8003ecc:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	7979      	ldrb	r1, [r7, #5]
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fff3 	bl	8004ec0 <MFX_IO_Write>
  }

  if (pin_8_15)
 8003eda:	7b7b      	ldrb	r3, [r7, #13]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d022      	beq.n	8003f26 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8003ee0:	797b      	ldrb	r3, [r7, #5]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fffc 	bl	8004ee8 <MFX_IO_Read>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003ef4:	793b      	ldrb	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	7b7b      	ldrb	r3, [r7, #13]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	e008      	b.n	8003f16 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8003f04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	b25a      	sxtb	r2, r3
 8003f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f10:	4013      	ands	r3, r2
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8003f16:	797b      	ldrb	r3, [r7, #5]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	b2d9      	uxtb	r1, r3
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 ffcd 	bl	8004ec0 <MFX_IO_Write>
  }

  if (pin_16_23)
 8003f26:	7b3b      	ldrb	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8003f2c:	797b      	ldrb	r3, [r7, #5]
 8003f2e:	3302      	adds	r3, #2
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 ffd6 	bl	8004ee8 <MFX_IO_Read>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003f40:	793b      	ldrb	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	7b3b      	ldrb	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	e008      	b.n	8003f62 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8003f50:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	b25a      	sxtb	r2, r3
 8003f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	b25b      	sxtb	r3, r3
 8003f60:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8003f62:	797b      	ldrb	r3, [r7, #5]
 8003f64:	3302      	adds	r3, #2
 8003f66:	b2d9      	uxtb	r1, r3
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 ffa7 	bl	8004ec0 <MFX_IO_Write>
  }
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003f80:	f001 f9d0 	bl	8005324 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8003f84:	2200      	movs	r2, #0
 8003f86:	2100      	movs	r1, #0
 8003f88:	2010      	movs	r0, #16
 8003f8a:	f000 f9e4 	bl	8004356 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8003f8e:	200a      	movs	r0, #10
 8003f90:	f001 f9ef 	bl	8005372 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8003f94:	2200      	movs	r2, #0
 8003f96:	2100      	movs	r1, #0
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f000 f9dc 	bl	8004356 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8003f9e:	20c8      	movs	r0, #200	; 0xc8
 8003fa0:	f001 f9e7 	bl	8005372 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	2011      	movs	r0, #17
 8003faa:	f000 f9d4 	bl	8004356 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8003fae:	2078      	movs	r0, #120	; 0x78
 8003fb0:	f001 f9df 	bl	8005372 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8003fb8:	463b      	mov	r3, r7
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	2036      	movs	r0, #54	; 0x36
 8003fc0:	f000 f9c9 	bl	8004356 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8003fc4:	2305      	movs	r3, #5
 8003fc6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8003fc8:	463b      	mov	r3, r7
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4619      	mov	r1, r3
 8003fce:	203a      	movs	r0, #58	; 0x3a
 8003fd0:	f000 f9c1 	bl	8004356 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	2021      	movs	r0, #33	; 0x21
 8003fda:	f000 f9bc 	bl	8004356 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8003fea:	23ef      	movs	r3, #239	; 0xef
 8003fec:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8003fee:	463b      	mov	r3, r7
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	202a      	movs	r0, #42	; 0x2a
 8003ff6:	f000 f9ae 	bl	8004356 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8003ffe:	2300      	movs	r3, #0
 8004000:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004002:	2300      	movs	r3, #0
 8004004:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004006:	23ef      	movs	r3, #239	; 0xef
 8004008:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800400a:	463b      	mov	r3, r7
 800400c:	2204      	movs	r2, #4
 800400e:	4619      	mov	r1, r3
 8004010:	202b      	movs	r0, #43	; 0x2b
 8004012:	f000 f9a0 	bl	8004356 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8004016:	230c      	movs	r3, #12
 8004018:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800401a:	230c      	movs	r3, #12
 800401c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800401e:	2300      	movs	r3, #0
 8004020:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8004022:	2333      	movs	r3, #51	; 0x33
 8004024:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8004026:	2333      	movs	r3, #51	; 0x33
 8004028:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800402a:	463b      	mov	r3, r7
 800402c:	2205      	movs	r2, #5
 800402e:	4619      	mov	r1, r3
 8004030:	20b2      	movs	r0, #178	; 0xb2
 8004032:	f000 f990 	bl	8004356 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8004036:	2335      	movs	r3, #53	; 0x35
 8004038:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800403a:	463b      	mov	r3, r7
 800403c:	2201      	movs	r2, #1
 800403e:	4619      	mov	r1, r3
 8004040:	20b7      	movs	r0, #183	; 0xb7
 8004042:	f000 f988 	bl	8004356 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8004046:	231f      	movs	r3, #31
 8004048:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800404a:	463b      	mov	r3, r7
 800404c:	2201      	movs	r2, #1
 800404e:	4619      	mov	r1, r3
 8004050:	20bb      	movs	r0, #187	; 0xbb
 8004052:	f000 f980 	bl	8004356 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8004056:	232c      	movs	r3, #44	; 0x2c
 8004058:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800405a:	463b      	mov	r3, r7
 800405c:	2201      	movs	r2, #1
 800405e:	4619      	mov	r1, r3
 8004060:	20c0      	movs	r0, #192	; 0xc0
 8004062:	f000 f978 	bl	8004356 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8004066:	2301      	movs	r3, #1
 8004068:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 800406a:	23c3      	movs	r3, #195	; 0xc3
 800406c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 800406e:	463b      	mov	r3, r7
 8004070:	2202      	movs	r2, #2
 8004072:	4619      	mov	r1, r3
 8004074:	20c2      	movs	r0, #194	; 0xc2
 8004076:	f000 f96e 	bl	8004356 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800407a:	2320      	movs	r3, #32
 800407c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 800407e:	463b      	mov	r3, r7
 8004080:	2201      	movs	r2, #1
 8004082:	4619      	mov	r1, r3
 8004084:	20c4      	movs	r0, #196	; 0xc4
 8004086:	f000 f966 	bl	8004356 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 800408a:	230f      	movs	r3, #15
 800408c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 800408e:	463b      	mov	r3, r7
 8004090:	2201      	movs	r2, #1
 8004092:	4619      	mov	r1, r3
 8004094:	20c6      	movs	r0, #198	; 0xc6
 8004096:	f000 f95e 	bl	8004356 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 800409a:	23a4      	movs	r3, #164	; 0xa4
 800409c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 800409e:	23a1      	movs	r3, #161	; 0xa1
 80040a0:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 80040a2:	463b      	mov	r3, r7
 80040a4:	2202      	movs	r2, #2
 80040a6:	4619      	mov	r1, r3
 80040a8:	20d0      	movs	r0, #208	; 0xd0
 80040aa:	f000 f954 	bl	8004356 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80040ae:	23d0      	movs	r3, #208	; 0xd0
 80040b0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80040b2:	2308      	movs	r3, #8
 80040b4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80040b6:	2311      	movs	r3, #17
 80040b8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80040ba:	2308      	movs	r3, #8
 80040bc:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80040be:	230c      	movs	r3, #12
 80040c0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80040c2:	2315      	movs	r3, #21
 80040c4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80040c6:	2339      	movs	r3, #57	; 0x39
 80040c8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80040ca:	2333      	movs	r3, #51	; 0x33
 80040cc:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80040ce:	2350      	movs	r3, #80	; 0x50
 80040d0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80040d2:	2336      	movs	r3, #54	; 0x36
 80040d4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80040d6:	2313      	movs	r3, #19
 80040d8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80040da:	2314      	movs	r3, #20
 80040dc:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80040de:	2329      	movs	r3, #41	; 0x29
 80040e0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80040e2:	232d      	movs	r3, #45	; 0x2d
 80040e4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80040e6:	463b      	mov	r3, r7
 80040e8:	220e      	movs	r2, #14
 80040ea:	4619      	mov	r1, r3
 80040ec:	20e0      	movs	r0, #224	; 0xe0
 80040ee:	f000 f932 	bl	8004356 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80040f2:	23d0      	movs	r3, #208	; 0xd0
 80040f4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80040f6:	2308      	movs	r3, #8
 80040f8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80040fa:	2310      	movs	r3, #16
 80040fc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80040fe:	2308      	movs	r3, #8
 8004100:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8004102:	2306      	movs	r3, #6
 8004104:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8004106:	2306      	movs	r3, #6
 8004108:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800410a:	2339      	movs	r3, #57	; 0x39
 800410c:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 800410e:	2344      	movs	r3, #68	; 0x44
 8004110:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8004112:	2351      	movs	r3, #81	; 0x51
 8004114:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8004116:	230b      	movs	r3, #11
 8004118:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800411a:	2316      	movs	r3, #22
 800411c:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800411e:	2314      	movs	r3, #20
 8004120:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8004122:	232f      	movs	r3, #47	; 0x2f
 8004124:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8004126:	2331      	movs	r3, #49	; 0x31
 8004128:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800412a:	463b      	mov	r3, r7
 800412c:	220e      	movs	r2, #14
 800412e:	4619      	mov	r1, r3
 8004130:	20e1      	movs	r0, #225	; 0xe1
 8004132:	f000 f910 	bl	8004356 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8004136:	f000 f847 	bl	80041c8 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800413a:	2300      	movs	r3, #0
 800413c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800413e:	463b      	mov	r3, r7
 8004140:	2201      	movs	r2, #1
 8004142:	4619      	mov	r1, r3
 8004144:	2035      	movs	r0, #53	; 0x35
 8004146:	f000 f906 	bl	8004356 <ST7789H2_WriteReg>

}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d102      	bne.n	8004166 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8004160:	2300      	movs	r3, #0
 8004162:	723b      	strb	r3, [r7, #8]
 8004164:	e025      	b.n	80041b2 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d120      	bne.n	80041ae <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 800416c:	2300      	movs	r3, #0
 800416e:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8004170:	2300      	movs	r3, #0
 8004172:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8004174:	2301      	movs	r3, #1
 8004176:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8004178:	23f0      	movs	r3, #240	; 0xf0
 800417a:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 800417c:	2300      	movs	r3, #0
 800417e:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8004180:	2300      	movs	r3, #0
 8004182:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8004184:	f107 0308 	add.w	r3, r7, #8
 8004188:	2206      	movs	r2, #6
 800418a:	4619      	mov	r1, r3
 800418c:	2033      	movs	r0, #51	; 0x33
 800418e:	f000 f8e2 	bl	8004356 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8004192:	2300      	movs	r3, #0
 8004194:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8004196:	2350      	movs	r3, #80	; 0x50
 8004198:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	2202      	movs	r2, #2
 80041a0:	4619      	mov	r1, r3
 80041a2:	2037      	movs	r0, #55	; 0x37
 80041a4:	f000 f8d7 	bl	8004356 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80041a8:	23c0      	movs	r3, #192	; 0xc0
 80041aa:	723b      	strb	r3, [r7, #8]
 80041ac:	e001      	b.n	80041b2 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80041ae:	2360      	movs	r3, #96	; 0x60
 80041b0:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	2201      	movs	r2, #1
 80041b8:	4619      	mov	r1, r3
 80041ba:	2036      	movs	r0, #54	; 0x36
 80041bc:	f000 f8cb 	bl	8004356 <ST7789H2_WriteReg>
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80041cc:	2200      	movs	r2, #0
 80041ce:	2100      	movs	r1, #0
 80041d0:	2029      	movs	r0, #41	; 0x29
 80041d2:	f000 f8c0 	bl	8004356 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2100      	movs	r1, #0
 80041da:	2011      	movs	r0, #17
 80041dc:	f000 f8bb 	bl	8004356 <ST7789H2_WriteReg>
}
 80041e0:	bf00      	nop
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80041ea:	23fe      	movs	r3, #254	; 0xfe
 80041ec:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	2201      	movs	r2, #1
 80041f2:	4619      	mov	r1, r3
 80041f4:	20bd      	movs	r0, #189	; 0xbd
 80041f6:	f000 f8ae 	bl	8004356 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	2010      	movs	r0, #16
 8004200:	f000 f8a9 	bl	8004356 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8004204:	200a      	movs	r0, #10
 8004206:	f001 f8b4 	bl	8005372 <LCD_IO_Delay>
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8004212:	b480      	push	{r7}
 8004214:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8004216:	23f0      	movs	r3, #240	; 0xf0
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8004226:	23f0      	movs	r3, #240	; 0xf0
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8004236:	f001 f875 	bl	8005324 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800423a:	2004      	movs	r0, #4
 800423c:	f000 f8ae 	bl	800439c <ST7789H2_ReadReg>
 8004240:	4603      	mov	r3, r0
 8004242:	b29b      	uxth	r3, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}

08004248 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	460a      	mov	r2, r1
 8004252:	80fb      	strh	r3, [r7, #6]
 8004254:	4613      	mov	r3, r2
 8004256:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8004258:	2300      	movs	r3, #0
 800425a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8004262:	2300      	movs	r3, #0
 8004264:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	3b11      	subs	r3, #17
 800426c:	b2db      	uxtb	r3, r3
 800426e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	2204      	movs	r2, #4
 8004276:	4619      	mov	r1, r3
 8004278:	202a      	movs	r0, #42	; 0x2a
 800427a:	f000 f86c 	bl	8004356 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 800427e:	2300      	movs	r3, #0
 8004280:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8004282:	88bb      	ldrh	r3, [r7, #4]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8004288:	2300      	movs	r3, #0
 800428a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 800428c:	88bb      	ldrh	r3, [r7, #4]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	3b11      	subs	r3, #17
 8004292:	b2db      	uxtb	r3, r3
 8004294:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8004296:	f107 030c 	add.w	r3, r7, #12
 800429a:	2204      	movs	r2, #4
 800429c:	4619      	mov	r1, r3
 800429e:	202b      	movs	r0, #43	; 0x2b
 80042a0:	f000 f859 	bl	8004356 <ST7789H2_WriteReg>
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	80fb      	strh	r3, [r7, #6]
 80042b6:	460b      	mov	r3, r1
 80042b8:	80bb      	strh	r3, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80042be:	88ba      	ldrh	r2, [r7, #4]
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff ffbf 	bl	8004248 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80042ca:	2200      	movs	r2, #0
 80042cc:	2100      	movs	r1, #0
 80042ce:	202c      	movs	r0, #44	; 0x2c
 80042d0:	f000 f841 	bl	8004356 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80042d4:	887b      	ldrh	r3, [r7, #2]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 f82a 	bl	8005330 <LCD_IO_WriteData>
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	460a      	mov	r2, r1
 80042ee:	80fb      	strh	r3, [r7, #6]
 80042f0:	4613      	mov	r3, r2
 80042f2:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80042f4:	88ba      	ldrh	r2, [r7, #4]
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff ffa4 	bl	8004248 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8004300:	88ba      	ldrh	r2, [r7, #4]
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f9c0 	bl	800468c <ST7789H2_ReadPixel_rgb888>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	733a      	strb	r2, [r7, #12]
 8004312:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004316:	737a      	strb	r2, [r7, #13]
 8004318:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800431c:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800431e:	7b3b      	ldrb	r3, [r7, #12]
 8004320:	08db      	lsrs	r3, r3, #3
 8004322:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8004324:	7b7b      	ldrb	r3, [r7, #13]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800432a:	7bbb      	ldrb	r3, [r7, #14]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	b29b      	uxth	r3, r3
 8004334:	02db      	lsls	r3, r3, #11
 8004336:	b29a      	uxth	r2, r3
 8004338:	7dbb      	ldrb	r3, [r7, #22]
 800433a:	b29b      	uxth	r3, r3
 800433c:	015b      	lsls	r3, r3, #5
 800433e:	b29b      	uxth	r3, r3
 8004340:	4413      	add	r3, r2
 8004342:	b29a      	uxth	r2, r3
 8004344:	7d7b      	ldrb	r3, [r7, #21]
 8004346:	b29b      	uxth	r3, r3
 8004348:	4413      	add	r3, r2
 800434a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800434c:	8a7b      	ldrh	r3, [r7, #18]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	4603      	mov	r3, r0
 800435e:	6039      	str	r1, [r7, #0]
 8004360:	71fb      	strb	r3, [r7, #7]
 8004362:	4613      	mov	r3, r2
 8004364:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	4618      	mov	r0, r3
 800436a:	f000 ffee 	bl	800534a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e00a      	b.n	800438a <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	4413      	add	r3, r2
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f000 ffd6 	bl	8005330 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	3301      	adds	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	79bb      	ldrb	r3, [r7, #6]
 800438e:	429a      	cmp	r2, r3
 8004390:	d3f0      	bcc.n	8004374 <ST7789H2_WriteReg+0x1e>
  }
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 ffce 	bl	800534a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80043ae:	f000 ffd9 	bl	8005364 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80043b2:	f000 ffd7 	bl	8005364 <LCD_IO_ReadData>
 80043b6:	4603      	mov	r3, r0
 80043b8:	b2db      	uxtb	r3, r3
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80043c4:	b490      	push	{r4, r7}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	80fb      	strh	r3, [r7, #6]
 80043d6:	4603      	mov	r3, r0
 80043d8:	80bb      	strh	r3, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	807b      	strh	r3, [r7, #2]
 80043de:	4613      	mov	r3, r2
 80043e0:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2bef      	cmp	r3, #239	; 0xef
 80043e6:	d803      	bhi.n	80043f0 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80043e8:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <ST7789H2_SetDisplayWindow+0x94>)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	8013      	strh	r3, [r2, #0]
 80043ee:	e002      	b.n	80043f6 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <ST7789H2_SetDisplayWindow+0x94>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80043f6:	88bb      	ldrh	r3, [r7, #4]
 80043f8:	2bef      	cmp	r3, #239	; 0xef
 80043fa:	d803      	bhi.n	8004404 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80043fc:	4a17      	ldr	r2, [pc, #92]	; (800445c <ST7789H2_SetDisplayWindow+0x98>)
 80043fe:	88bb      	ldrh	r3, [r7, #4]
 8004400:	8013      	strh	r3, [r2, #0]
 8004402:	e002      	b.n	800440a <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8004404:	4b15      	ldr	r3, [pc, #84]	; (800445c <ST7789H2_SetDisplayWindow+0x98>)
 8004406:	2200      	movs	r2, #0
 8004408:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800440a:	887a      	ldrh	r2, [r7, #2]
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	4413      	add	r3, r2
 8004410:	2bf0      	cmp	r3, #240	; 0xf0
 8004412:	dc08      	bgt.n	8004426 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8004414:	887a      	ldrh	r2, [r7, #2]
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	4413      	add	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <ST7789H2_SetDisplayWindow+0x9c>)
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e002      	b.n	800442c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <ST7789H2_SetDisplayWindow+0x9c>)
 8004428:	22ef      	movs	r2, #239	; 0xef
 800442a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800442c:	883a      	ldrh	r2, [r7, #0]
 800442e:	88bb      	ldrh	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	2bf0      	cmp	r3, #240	; 0xf0
 8004434:	dc08      	bgt.n	8004448 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8004436:	883a      	ldrh	r2, [r7, #0]
 8004438:	88bb      	ldrh	r3, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <ST7789H2_SetDisplayWindow+0xa0>)
 8004444:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8004446:	e002      	b.n	800444e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <ST7789H2_SetDisplayWindow+0xa0>)
 800444a:	22ef      	movs	r2, #239	; 0xef
 800444c:	801a      	strh	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bc90      	pop	{r4, r7}
 8004456:	4770      	bx	lr
 8004458:	2001cb54 	.word	0x2001cb54
 800445c:	2001cb56 	.word	0x2001cb56
 8004460:	2001c16c 	.word	0x2001c16c
 8004464:	2001c16e 	.word	0x2001c16e

08004468 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4623      	mov	r3, r4
 8004478:	80fb      	strh	r3, [r7, #6]
 800447a:	4603      	mov	r3, r0
 800447c:	80bb      	strh	r3, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	807b      	strh	r3, [r7, #2]
 8004482:	4613      	mov	r3, r2
 8004484:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	88bb      	ldrh	r3, [r7, #4]
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fedb 	bl	8004248 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004492:	2200      	movs	r2, #0
 8004494:	2100      	movs	r1, #0
 8004496:	202c      	movs	r0, #44	; 0x2c
 8004498:	f7ff ff5d 	bl	8004356 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 800449c:	2300      	movs	r3, #0
 800449e:	81fb      	strh	r3, [r7, #14]
 80044a0:	e006      	b.n	80044b0 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 ff43 	bl	8005330 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80044aa:	89fb      	ldrh	r3, [r7, #14]
 80044ac:	3301      	adds	r3, #1
 80044ae:	81fb      	strh	r3, [r7, #14]
 80044b0:	89fa      	ldrh	r2, [r7, #14]
 80044b2:	883b      	ldrh	r3, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3f4      	bcc.n	80044a2 <ST7789H2_DrawHLine+0x3a>
  }  
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}

080044c2 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80044c2:	b590      	push	{r4, r7, lr}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4604      	mov	r4, r0
 80044ca:	4608      	mov	r0, r1
 80044cc:	4611      	mov	r1, r2
 80044ce:	461a      	mov	r2, r3
 80044d0:	4623      	mov	r3, r4
 80044d2:	80fb      	strh	r3, [r7, #6]
 80044d4:	4603      	mov	r3, r0
 80044d6:	80bb      	strh	r3, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
 80044dc:	4613      	mov	r3, r2
 80044de:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80044e0:	887a      	ldrh	r2, [r7, #2]
 80044e2:	88bb      	ldrh	r3, [r7, #4]
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff feae 	bl	8004248 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	202c      	movs	r0, #44	; 0x2c
 80044f2:	f7ff ff30 	bl	8004356 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	81fb      	strh	r3, [r7, #14]
 80044fa:	e00b      	b.n	8004514 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80044fc:	887a      	ldrh	r2, [r7, #2]
 80044fe:	89fb      	ldrh	r3, [r7, #14]
 8004500:	4413      	add	r3, r2
 8004502:	b299      	uxth	r1, r3
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	88bb      	ldrh	r3, [r7, #4]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fecf 	bl	80042ac <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 800450e:	89fb      	ldrh	r3, [r7, #14]
 8004510:	3301      	adds	r3, #1
 8004512:	81fb      	strh	r3, [r7, #14]
 8004514:	89fa      	ldrh	r2, [r7, #14]
 8004516:	883b      	ldrh	r3, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d3ef      	bcc.n	80044fc <ST7789H2_DrawVLine+0x3a>
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bd90      	pop	{r4, r7, pc}
	...

08004528 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	603a      	str	r2, [r7, #0]
 8004532:	80fb      	strh	r3, [r7, #6]
 8004534:	460b      	mov	r3, r1
 8004536:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8004544:	4b30      	ldr	r3, [pc, #192]	; (8004608 <ST7789H2_DrawBitmap+0xe0>)
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	4b30      	ldr	r3, [pc, #192]	; (800460c <ST7789H2_DrawBitmap+0xe4>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	b29b      	uxth	r3, r3
 8004550:	3301      	adds	r3, #1
 8004552:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <ST7789H2_DrawBitmap+0xe8>)
 8004556:	881a      	ldrh	r2, [r3, #0]
 8004558:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <ST7789H2_DrawBitmap+0xec>)
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	b29b      	uxth	r3, r3
 8004560:	3301      	adds	r3, #1
 8004562:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	3302      	adds	r3, #2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	3304      	adds	r3, #4
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	461a      	mov	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	330a      	adds	r3, #10
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	461a      	mov	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80045ae:	88ba      	ldrh	r2, [r7, #4]
 80045b0:	89bb      	ldrh	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	e01d      	b.n	80045f4 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fe3f 	bl	8004248 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b299      	uxth	r1, r3
 80045d2:	89fb      	ldrh	r3, [r7, #14]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	4413      	add	r3, r2
 80045e0:	89fa      	ldrh	r2, [r7, #14]
 80045e2:	88f8      	ldrh	r0, [r7, #6]
 80045e4:	f000 f89c 	bl	8004720 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	3301      	adds	r3, #1
 80045ec:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	88bb      	ldrh	r3, [r7, #4]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d8dd      	bhi.n	80045b8 <ST7789H2_DrawBitmap+0x90>
  }
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2001c16c 	.word	0x2001c16c
 800460c:	2001cb54 	.word	0x2001cb54
 8004610:	2001c16e 	.word	0x2001c16e
 8004614:	2001cb56 	.word	0x2001cb56

08004618 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8004618:	b590      	push	{r4, r7, lr}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	4604      	mov	r4, r0
 8004620:	4608      	mov	r0, r1
 8004622:	4611      	mov	r1, r2
 8004624:	461a      	mov	r2, r3
 8004626:	4623      	mov	r3, r4
 8004628:	80fb      	strh	r3, [r7, #6]
 800462a:	4603      	mov	r3, r0
 800462c:	80bb      	strh	r3, [r7, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	807b      	strh	r3, [r7, #2]
 8004632:	4613      	mov	r3, r2
 8004634:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800463a:	88bb      	ldrh	r3, [r7, #4]
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e019      	b.n	8004674 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	b29a      	uxth	r2, r3
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fdfd 	bl	8004248 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	b299      	uxth	r1, r3
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	4413      	add	r3, r2
 8004660:	887a      	ldrh	r2, [r7, #2]
 8004662:	88f8      	ldrh	r0, [r7, #6]
 8004664:	f000 f85c 	bl	8004720 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	3301      	adds	r3, #1
 800466c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	88ba      	ldrh	r2, [r7, #4]
 8004676:	883b      	ldrh	r3, [r7, #0]
 8004678:	4413      	add	r3, r2
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4293      	cmp	r3, r2
 8004680:	d3de      	bcc.n	8004640 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bd90      	pop	{r4, r7, pc}

0800468c <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	460a      	mov	r2, r1
 8004696:	80fb      	strh	r3, [r7, #6]
 8004698:	4613      	mov	r3, r2
 800469a:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800469c:	88ba      	ldrh	r2, [r7, #4]
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fdd0 	bl	8004248 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80046a8:	2200      	movs	r2, #0
 80046aa:	2100      	movs	r1, #0
 80046ac:	202e      	movs	r0, #46	; 0x2e
 80046ae:	f7ff fe52 	bl	8004356 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80046b2:	f000 fe57 	bl	8005364 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80046b6:	f000 fe55 	bl	8005364 <LCD_IO_ReadData>
 80046ba:	4603      	mov	r3, r0
 80046bc:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80046be:	f000 fe51 	bl	8005364 <LCD_IO_ReadData>
 80046c2:	4603      	mov	r3, r0
 80046c4:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80046c6:	8afb      	ldrh	r3, [r7, #22]
 80046c8:	121b      	asrs	r3, r3, #8
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f023 0303 	bic.w	r3, r3, #3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80046d4:	8afb      	ldrh	r3, [r7, #22]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f023 0303 	bic.w	r3, r3, #3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80046e0:	8abb      	ldrh	r3, [r7, #20]
 80046e2:	121b      	asrs	r3, r3, #8
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80046ee:	f107 0310 	add.w	r3, r7, #16
 80046f2:	f107 020c 	add.w	r2, r7, #12
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	4611      	mov	r1, r2
 80046fa:	8019      	strh	r1, [r3, #0]
 80046fc:	3302      	adds	r3, #2
 80046fe:	0c12      	lsrs	r2, r2, #16
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	2300      	movs	r3, #0
 8004704:	7c3a      	ldrb	r2, [r7, #16]
 8004706:	f362 0307 	bfi	r3, r2, #0, #8
 800470a:	7c7a      	ldrb	r2, [r7, #17]
 800470c:	f362 230f 	bfi	r3, r2, #8, #8
 8004710:	7cba      	ldrb	r2, [r7, #18]
 8004712:	f362 4317 	bfi	r3, r2, #16, #8
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	4603      	mov	r3, r0
 800472a:	81fb      	strh	r3, [r7, #14]
 800472c:	460b      	mov	r3, r1
 800472e:	81bb      	strh	r3, [r7, #12]
 8004730:	4613      	mov	r3, r2
 8004732:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800473c:	2200      	movs	r2, #0
 800473e:	2100      	movs	r1, #0
 8004740:	202c      	movs	r0, #44	; 0x2c
 8004742:	f7ff fe08 	bl	8004356 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004746:	89fb      	ldrh	r3, [r7, #14]
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e029      	b.n	80047a0 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <ST7789H2_DrawRGBHLine+0x98>)
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	4293      	cmp	r3, r2
 8004756:	d320      	bcc.n	800479a <ST7789H2_DrawRGBHLine+0x7a>
 8004758:	4b18      	ldr	r3, [pc, #96]	; (80047bc <ST7789H2_DrawRGBHLine+0x9c>)
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	89ba      	ldrh	r2, [r7, #12]
 800475e:	429a      	cmp	r2, r3
 8004760:	d31b      	bcc.n	800479a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004762:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <ST7789H2_DrawRGBHLine+0xa0>)
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	4293      	cmp	r3, r2
 800476c:	d815      	bhi.n	800479a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <ST7789H2_DrawRGBHLine+0xa4>)
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	89ba      	ldrh	r2, [r7, #12]
 8004774:	429a      	cmp	r2, r3
 8004776:	d810      	bhi.n	800479a <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8004778:	897a      	ldrh	r2, [r7, #10]
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	441a      	add	r2, r3
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	429a      	cmp	r2, r3
 8004782:	d007      	beq.n	8004794 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fdce 	bl	8005330 <LCD_IO_WriteData>
      }      
      i++;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	3301      	adds	r3, #1
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	897a      	ldrh	r2, [r7, #10]
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	4413      	add	r3, r2
 80047a6:	461a      	mov	r2, r3
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d3ce      	bcc.n	800474c <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	2001cb54 	.word	0x2001cb54
 80047bc:	2001cb56 	.word	0x2001cb56
 80047c0:	2001c16c 	.word	0x2001c16c
 80047c4:	2001c16e 	.word	0x2001c16e

080047c8 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  while (1);
 80047cc:	e7fe      	b.n	80047cc <BSP_ErrorHandler+0x4>
	...

080047d0 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 80047d4:	4812      	ldr	r0, [pc, #72]	; (8004820 <I2C2_Init+0x50>)
 80047d6:	f004 fc78 	bl	80090ca <HAL_I2C_GetState>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11d      	bne.n	800481c <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <I2C2_Init+0x50>)
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <I2C2_Init+0x54>)
 80047e4:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 80047e6:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <I2C2_Init+0x50>)
 80047e8:	4a0f      	ldr	r2, [pc, #60]	; (8004828 <I2C2_Init+0x58>)
 80047ea:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <I2C2_Init+0x50>)
 80047ee:	2270      	movs	r2, #112	; 0x70
 80047f0:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80047f2:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <I2C2_Init+0x50>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <I2C2_Init+0x50>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 80047fe:	4b08      	ldr	r3, [pc, #32]	; (8004820 <I2C2_Init+0x50>)
 8004800:	22ff      	movs	r2, #255	; 0xff
 8004802:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <I2C2_Init+0x50>)
 8004806:	2200      	movs	r2, #0
 8004808:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <I2C2_Init+0x50>)
 800480c:	2200      	movs	r2, #0
 800480e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8004810:	4803      	ldr	r0, [pc, #12]	; (8004820 <I2C2_Init+0x50>)
 8004812:	f000 f80b 	bl	800482c <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8004816:	4802      	ldr	r0, [pc, #8]	; (8004820 <I2C2_Init+0x50>)
 8004818:	f004 f864 	bl	80088e4 <HAL_I2C_Init>
  }
}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}
 8004820:	2001cb5c 	.word	0x2001cb5c
 8004824:	40005800 	.word	0x40005800
 8004828:	40403e5d 	.word	0x40403e5d

0800482c <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b0ae      	sub	sp, #184	; 0xb8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a37      	ldr	r2, [pc, #220]	; (8004918 <I2C2_MspInit+0xec>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d168      	bne.n	8004910 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8004842:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004846:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8004848:	f107 0318 	add.w	r3, r7, #24
 800484c:	4618      	mov	r0, r3
 800484e:	f007 f8db 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8004852:	4b32      	ldr	r3, [pc, #200]	; (800491c <I2C2_MspInit+0xf0>)
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	4a31      	ldr	r2, [pc, #196]	; (800491c <I2C2_MspInit+0xf0>)
 8004858:	f043 0302 	orr.w	r3, r3, #2
 800485c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800485e:	4b2f      	ldr	r3, [pc, #188]	; (800491c <I2C2_MspInit+0xf0>)
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800486a:	4b2c      	ldr	r3, [pc, #176]	; (800491c <I2C2_MspInit+0xf0>)
 800486c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486e:	4a2b      	ldr	r2, [pc, #172]	; (800491c <I2C2_MspInit+0xf0>)
 8004870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <I2C2_MspInit+0xf0>)
 8004878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8004882:	2310      	movs	r3, #16
 8004884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8004888:	2312      	movs	r3, #18
 800488a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800488e:	2301      	movs	r3, #1
 8004890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8004894:	2303      	movs	r3, #3
 8004896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800489a:	2304      	movs	r3, #4
 800489c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 80048a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80048a4:	4619      	mov	r1, r3
 80048a6:	481e      	ldr	r0, [pc, #120]	; (8004920 <I2C2_MspInit+0xf4>)
 80048a8:	f003 fd80 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 80048ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 80048b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80048b8:	4619      	mov	r1, r3
 80048ba:	481a      	ldr	r0, [pc, #104]	; (8004924 <I2C2_MspInit+0xf8>)
 80048bc:	f003 fd76 	bl	80083ac <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 80048c0:	4b16      	ldr	r3, [pc, #88]	; (800491c <I2C2_MspInit+0xf0>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	4a15      	ldr	r2, [pc, #84]	; (800491c <I2C2_MspInit+0xf0>)
 80048c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048ca:	6593      	str	r3, [r2, #88]	; 0x58
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <I2C2_MspInit+0xf0>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <I2C2_MspInit+0xf0>)
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	4a0f      	ldr	r2, [pc, #60]	; (800491c <I2C2_MspInit+0xf0>)
 80048de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048e2:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80048e4:	4b0d      	ldr	r3, [pc, #52]	; (800491c <I2C2_MspInit+0xf0>)
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	4a0c      	ldr	r2, [pc, #48]	; (800491c <I2C2_MspInit+0xf0>)
 80048ea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80048ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 80048f0:	2200      	movs	r2, #0
 80048f2:	2100      	movs	r1, #0
 80048f4:	2021      	movs	r0, #33	; 0x21
 80048f6:	f003 f96a 	bl	8007bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80048fa:	2021      	movs	r0, #33	; 0x21
 80048fc:	f003 f983 	bl	8007c06 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8004900:	2200      	movs	r2, #0
 8004902:	2100      	movs	r1, #0
 8004904:	2022      	movs	r0, #34	; 0x22
 8004906:	f003 f962 	bl	8007bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800490a:	2022      	movs	r0, #34	; 0x22
 800490c:	f003 f97b 	bl	8007c06 <HAL_NVIC_EnableIRQ>
  }
}
 8004910:	bf00      	nop
 8004912:	37b8      	adds	r7, #184	; 0xb8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40005800 	.word	0x40005800
 800491c:	40021000 	.word	0x40021000
 8004920:	48001c00 	.word	0x48001c00
 8004924:	48000400 	.word	0x48000400

08004928 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 800492c:	4806      	ldr	r0, [pc, #24]	; (8004948 <I2C2_DeInit+0x20>)
 800492e:	f004 fbcc 	bl	80090ca <HAL_I2C_GetState>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8004938:	4803      	ldr	r0, [pc, #12]	; (8004948 <I2C2_DeInit+0x20>)
 800493a:	f004 f862 	bl	8008a02 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 800493e:	4802      	ldr	r0, [pc, #8]	; (8004948 <I2C2_DeInit+0x20>)
 8004940:	f000 f804 	bl	800494c <I2C2_MspDeInit>
  }
}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	2001cb5c 	.word	0x2001cb5c

0800494c <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1f      	ldr	r2, [pc, #124]	; (80049d8 <I2C2_MspDeInit+0x8c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d138      	bne.n	80049d0 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800495e:	4b1f      	ldr	r3, [pc, #124]	; (80049dc <I2C2_MspDeInit+0x90>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <I2C2_MspDeInit+0x90>)
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800496a:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <I2C2_MspDeInit+0x90>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8004976:	4b19      	ldr	r3, [pc, #100]	; (80049dc <I2C2_MspDeInit+0x90>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <I2C2_MspDeInit+0x90>)
 800497c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004982:	4b16      	ldr	r3, [pc, #88]	; (80049dc <I2C2_MspDeInit+0x90>)
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800498e:	2110      	movs	r1, #16
 8004990:	4813      	ldr	r0, [pc, #76]	; (80049e0 <I2C2_MspDeInit+0x94>)
 8004992:	f003 fe9d 	bl	80086d0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8004996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800499a:	4812      	ldr	r0, [pc, #72]	; (80049e4 <I2C2_MspDeInit+0x98>)
 800499c:	f003 fe98 	bl	80086d0 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 80049a0:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <I2C2_MspDeInit+0x90>)
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	4a0d      	ldr	r2, [pc, #52]	; (80049dc <I2C2_MspDeInit+0x90>)
 80049a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049aa:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <I2C2_MspDeInit+0x90>)
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <I2C2_MspDeInit+0x90>)
 80049b2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80049b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <I2C2_MspDeInit+0x90>)
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	4a07      	ldr	r2, [pc, #28]	; (80049dc <I2C2_MspDeInit+0x90>)
 80049be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80049c2:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80049c4:	2021      	movs	r0, #33	; 0x21
 80049c6:	f003 f92c 	bl	8007c22 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80049ca:	2022      	movs	r0, #34	; 0x22
 80049cc:	f003 f929 	bl	8007c22 <HAL_NVIC_DisableIRQ>
  }
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40005800 	.word	0x40005800
 80049dc:	40021000 	.word	0x40021000
 80049e0:	48001c00 	.word	0x48001c00
 80049e4:	48000400 	.word	0x48000400

080049e8 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b089      	sub	sp, #36	; 0x24
 80049ec:	af04      	add	r7, sp, #16
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4623      	mov	r3, r4
 80049f8:	80fb      	strh	r3, [r7, #6]
 80049fa:	4603      	mov	r3, r0
 80049fc:	80bb      	strh	r3, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	807b      	strh	r3, [r7, #2]
 8004a02:	4613      	mov	r3, r2
 8004a04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a0a:	b672      	cpsid	i
}
 8004a0c:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <I2C2_WriteData+0x5c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	8878      	ldrh	r0, [r7, #2]
 8004a14:	88ba      	ldrh	r2, [r7, #4]
 8004a16:	88f9      	ldrh	r1, [r7, #6]
 8004a18:	9302      	str	r3, [sp, #8]
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	1c7b      	adds	r3, r7, #1
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	4603      	mov	r3, r0
 8004a24:	4808      	ldr	r0, [pc, #32]	; (8004a48 <I2C2_WriteData+0x60>)
 8004a26:	f004 f81b 	bl	8008a60 <HAL_I2C_Mem_Write>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a2e:	b662      	cpsie	i
}
 8004a30:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004a38:	f000 f8be 	bl	8004bb8 <I2C2_Error>
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd90      	pop	{r4, r7, pc}
 8004a44:	2001c170 	.word	0x2001c170
 8004a48:	2001cb5c 	.word	0x2001cb5c

08004a4c <I2C2_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C2_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af04      	add	r7, sp, #16
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	4603      	mov	r3, r0
 8004a56:	81fb      	strh	r3, [r7, #14]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	81bb      	strh	r3, [r7, #12]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a64:	b672      	cpsid	i
}
 8004a66:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <I2C2_WriteBuffer+0x54>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	8978      	ldrh	r0, [r7, #10]
 8004a6e:	89ba      	ldrh	r2, [r7, #12]
 8004a70:	89f9      	ldrh	r1, [r7, #14]
 8004a72:	9302      	str	r3, [sp, #8]
 8004a74:	8c3b      	ldrh	r3, [r7, #32]
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4809      	ldr	r0, [pc, #36]	; (8004aa4 <I2C2_WriteBuffer+0x58>)
 8004a80:	f003 ffee 	bl	8008a60 <HAL_I2C_Mem_Write>
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a88:	b662      	cpsie	i
}
 8004a8a:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C2_WriteBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004a92:	f000 f891 	bl	8004bb8 <I2C2_Error>
  }

  return status;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	2001c170 	.word	0x2001c170
 8004aa4:	2001cb5c 	.word	0x2001cb5c

08004aa8 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af04      	add	r7, sp, #16
 8004aae:	4603      	mov	r3, r0
 8004ab0:	80fb      	strh	r3, [r7, #6]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	80bb      	strh	r3, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ac2:	b672      	cpsid	i
}
 8004ac4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <I2C2_ReadData+0x60>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	8878      	ldrh	r0, [r7, #2]
 8004acc:	88ba      	ldrh	r2, [r7, #4]
 8004ace:	88f9      	ldrh	r1, [r7, #6]
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	f107 030e 	add.w	r3, r7, #14
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	4603      	mov	r3, r0
 8004ade:	480b      	ldr	r0, [pc, #44]	; (8004b0c <I2C2_ReadData+0x64>)
 8004ae0:	f004 f8d2 	bl	8008c88 <HAL_I2C_Mem_Read>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ae8:	b662      	cpsie	i
}
 8004aea:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d004      	beq.n	8004afc <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004af2:	f000 f861 	bl	8004bb8 <I2C2_Error>
    HAL_Delay(200);
 8004af6:	20c8      	movs	r0, #200	; 0xc8
 8004af8:	f001 ff6a 	bl	80069d0 <HAL_Delay>
  }

  return value;
 8004afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	2001c170 	.word	0x2001c170
 8004b0c:	2001cb5c 	.word	0x2001cb5c

08004b10 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b24:	b672      	cpsid	i
}
 8004b26:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8004b28:	88f9      	ldrh	r1, [r7, #6]
 8004b2a:	2332      	movs	r3, #50	; 0x32
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	480a      	ldr	r0, [pc, #40]	; (8004b58 <I2C2_isDeviceReady+0x48>)
 8004b30:	f004 f9c4 	bl	8008ebc <HAL_I2C_IsDeviceReady>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b38:	b662      	cpsie	i
}
 8004b3a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004b42:	f000 f839 	bl	8004bb8 <I2C2_Error>
    HAL_Delay(200);
 8004b46:	20c8      	movs	r0, #200	; 0xc8
 8004b48:	f001 ff42 	bl	80069d0 <HAL_Delay>
  }

  return value;
 8004b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2001cb5c 	.word	0x2001cb5c

08004b5c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af04      	add	r7, sp, #16
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	4603      	mov	r3, r0
 8004b66:	81fb      	strh	r3, [r7, #14]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	81bb      	strh	r3, [r7, #12]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b74:	b672      	cpsid	i
}
 8004b76:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8004b78:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <I2C2_ReadBuffer+0x54>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	8978      	ldrh	r0, [r7, #10]
 8004b7e:	89ba      	ldrh	r2, [r7, #12]
 8004b80:	89f9      	ldrh	r1, [r7, #14]
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	8c3b      	ldrh	r3, [r7, #32]
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4809      	ldr	r0, [pc, #36]	; (8004bb4 <I2C2_ReadBuffer+0x58>)
 8004b90:	f004 f87a 	bl	8008c88 <HAL_I2C_Mem_Read>
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b98:	b662      	cpsie	i
}
 8004b9a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004ba2:	f000 f809 	bl	8004bb8 <I2C2_Error>
  }

  return status;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	2001c170 	.word	0x2001c170
 8004bb4:	2001cb5c 	.word	0x2001cb5c

08004bb8 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8004bbc:	f7ff fe04 	bl	80047c8 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8004bc0:	4803      	ldr	r0, [pc, #12]	; (8004bd0 <I2C2_Error+0x18>)
 8004bc2:	f003 ff1e 	bl	8008a02 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8004bc6:	f7ff fe03 	bl	80047d0 <I2C2_Init>
}
 8004bca:	bf00      	nop
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	2001cb5c 	.word	0x2001cb5c

08004bd4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f004 fa74 	bl	80090ca <HAL_I2C_GetState>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d132      	bne.n	8004c4e <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <I2Cx_Init+0x84>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a1a      	ldr	r2, [pc, #104]	; (8004c5c <I2Cx_Init+0x88>)
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e012      	b.n	8004c1e <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <I2Cx_Init+0x8c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d103      	bne.n	8004c08 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <I2Cx_Init+0x90>)
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e00a      	b.n	8004c1e <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <I2Cx_Init+0x94>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d103      	bne.n	8004c18 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <I2Cx_Init+0x88>)
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <I2Cx_Init+0x88>)
 8004c1c:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a12      	ldr	r2, [pc, #72]	; (8004c6c <I2Cx_Init+0x98>)
 8004c22:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2270      	movs	r2, #112	; 0x70
 8004c28:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	22ff      	movs	r2, #255	; 0xff
 8004c3a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f003 fe4b 	bl	80088e4 <HAL_I2C_Init>

  }

}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	2001cbb0 	.word	0x2001cbb0
 8004c5c:	40005800 	.word	0x40005800
 8004c60:	2001cc04 	.word	0x2001cc04
 8004c64:	40005400 	.word	0x40005400
 8004c68:	2001cc58 	.word	0x2001cc58
 8004c6c:	90112626 	.word	0x90112626

08004c70 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	; 0x28
 8004c74:	af04      	add	r7, sp, #16
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	72fb      	strb	r3, [r7, #11]
 8004c82:	460b      	mov	r3, r1
 8004c84:	813b      	strh	r3, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004c8e:	7afb      	ldrb	r3, [r7, #11]
 8004c90:	b299      	uxth	r1, r3
 8004c92:	88f8      	ldrh	r0, [r7, #6]
 8004c94:	893a      	ldrh	r2, [r7, #8]
 8004c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c9a:	9302      	str	r3, [sp, #8]
 8004c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f003 ffee 	bl	8008c88 <HAL_I2C_Mem_Read>
 8004cac:	4603      	mov	r3, r0
 8004cae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004cb6:	7afb      	ldrb	r3, [r7, #11]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f832 	bl	8004d24 <I2Cx_Error>
  }
  return status;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b08a      	sub	sp, #40	; 0x28
 8004cce:	af04      	add	r7, sp, #16
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4603      	mov	r3, r0
 8004cda:	72fb      	strb	r3, [r7, #11]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	813b      	strh	r3, [r7, #8]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004ce8:	7afb      	ldrb	r3, [r7, #11]
 8004cea:	b299      	uxth	r1, r3
 8004cec:	88f8      	ldrh	r0, [r7, #6]
 8004cee:	893a      	ldrh	r2, [r7, #8]
 8004cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cf4:	9302      	str	r3, [sp, #8]
 8004cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	4603      	mov	r3, r0
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f003 fead 	bl	8008a60 <HAL_I2C_Mem_Write>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004d10:	7afb      	ldrb	r3, [r7, #11]
 8004d12:	4619      	mov	r1, r3
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f805 	bl	8004d24 <I2Cx_Error>
  }
  return status;
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 8004d30:	f7ff fd4a 	bl	80047c8 <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <I2Cx_Error+0x34>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d102      	bne.n	8004d42 <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 8004d3c:	f7ff fdf4 	bl	8004928 <I2C2_DeInit>
 8004d40:	e002      	b.n	8004d48 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f003 fe5d 	bl	8008a02 <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ff43 	bl	8004bd4 <I2Cx_Init>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	2001cbb0 	.word	0x2001cbb0

08004d5c <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8004d60:	f7ff fd36 	bl	80047d0 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8004d64:	2104      	movs	r1, #4
 8004d66:	2084      	movs	r0, #132	; 0x84
 8004d68:	f7ff fed2 	bl	8004b10 <I2C2_isDeviceReady>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8004d72:	f7ff fd29 	bl	80047c8 <BSP_ErrorHandler>
  }
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <MFX_IO_DeInit+0x6c>)
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <MFX_IO_DeInit+0x6c>)
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d8e:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <MFX_IO_DeInit+0x6c>)
 8004d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8004d9a:	2340      	movs	r3, #64	; 0x40
 8004d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8004da6:	2302      	movs	r3, #2
 8004da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	4619      	mov	r1, r3
 8004db0:	480e      	ldr	r0, [pc, #56]	; (8004dec <MFX_IO_DeInit+0x70>)
 8004db2:	f003 fafb 	bl	80083ac <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8004db6:	2017      	movs	r0, #23
 8004db8:	f002 ff33 	bl	8007c22 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <MFX_IO_DeInit+0x6c>)
 8004dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc0:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <MFX_IO_DeInit+0x6c>)
 8004dc2:	f043 0304 	orr.w	r3, r3, #4
 8004dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <MFX_IO_DeInit+0x6c>)
 8004dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	4806      	ldr	r0, [pc, #24]	; (8004df0 <MFX_IO_DeInit+0x74>)
 8004dd8:	f003 fc7a 	bl	80086d0 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8004ddc:	f7ff fda4 	bl	8004928 <I2C2_DeInit>
}
 8004de0:	bf00      	nop
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	48001c00 	.word	0x48001c00
 8004df0:	48000800 	.word	0x48000800

08004df4 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <MFX_IO_ITConfig+0x54>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	4a12      	ldr	r2, [pc, #72]	; (8004e48 <MFX_IO_ITConfig+0x54>)
 8004e00:	f043 0304 	orr.w	r3, r3, #4
 8004e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <MFX_IO_ITConfig+0x54>)
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8004e12:	2320      	movs	r3, #32
 8004e14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8004e1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004e22:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4808      	ldr	r0, [pc, #32]	; (8004e4c <MFX_IO_ITConfig+0x58>)
 8004e2a:	f003 fabf 	bl	80083ac <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8004e2e:	220f      	movs	r2, #15
 8004e30:	210f      	movs	r1, #15
 8004e32:	2017      	movs	r0, #23
 8004e34:	f002 fecb 	bl	8007bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8004e38:	2017      	movs	r0, #23
 8004e3a:	f002 fee4 	bl	8007c06 <HAL_NVIC_EnableIRQ>
}
 8004e3e:	bf00      	nop
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	48000800 	.word	0x48000800

08004e50 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <MFX_IO_EnableWakeupPin+0x40>)
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	4a0d      	ldr	r2, [pc, #52]	; (8004e90 <MFX_IO_EnableWakeupPin+0x40>)
 8004e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <MFX_IO_EnableWakeupPin+0x40>)
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004e72:	2301      	movs	r3, #1
 8004e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e76:	2302      	movs	r3, #2
 8004e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8004e7e:	1d3b      	adds	r3, r7, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4804      	ldr	r0, [pc, #16]	; (8004e94 <MFX_IO_EnableWakeupPin+0x44>)
 8004e84:	f003 fa92 	bl	80083ac <HAL_GPIO_Init>
}
 8004e88:	bf00      	nop
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000
 8004e94:	48001c00 	.word	0x48001c00

08004e98 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2140      	movs	r1, #64	; 0x40
 8004ea0:	4806      	ldr	r0, [pc, #24]	; (8004ebc <MFX_IO_Wakeup+0x24>)
 8004ea2:	f003 fd07 	bl	80088b4 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f001 fd92 	bl	80069d0 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8004eac:	2200      	movs	r2, #0
 8004eae:	2140      	movs	r1, #64	; 0x40
 8004eb0:	4802      	ldr	r0, [pc, #8]	; (8004ebc <MFX_IO_Wakeup+0x24>)
 8004eb2:	f003 fcff 	bl	80088b4 <HAL_GPIO_WritePin>
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	48001c00 	.word	0x48001c00

08004ec0 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	80fb      	strh	r3, [r7, #6]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	717b      	strb	r3, [r7, #5]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8004ed2:	797b      	ldrb	r3, [r7, #5]
 8004ed4:	b299      	uxth	r1, r3
 8004ed6:	793b      	ldrb	r3, [r7, #4]
 8004ed8:	88f8      	ldrh	r0, [r7, #6]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f7ff fd84 	bl	80049e8 <I2C2_WriteData>
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	460a      	mov	r2, r1
 8004ef2:	80fb      	strh	r3, [r7, #6]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8004ef8:	797b      	ldrb	r3, [r7, #5]
 8004efa:	b299      	uxth	r1, r3
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	2201      	movs	r2, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fdd1 	bl	8004aa8 <I2C2_ReadData>
 8004f06:	4603      	mov	r3, r0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60ba      	str	r2, [r7, #8]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	81fb      	strh	r3, [r7, #14]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	737b      	strb	r3, [r7, #13]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004f26:	7b7b      	ldrb	r3, [r7, #13]
 8004f28:	b299      	uxth	r1, r3
 8004f2a:	89f8      	ldrh	r0, [r7, #14]
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f7ff fe12 	bl	8004b5c <I2C2_ReadBuffer>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	b29b      	uxth	r3, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 fd3f 	bl	80069d0 <HAL_Delay>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  uint8_t Value;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8004f62:	4b28      	ldr	r3, [pc, #160]	; (8005004 <AUDIO_IO_Init+0xa8>)
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	4a27      	ldr	r2, [pc, #156]	; (8005004 <AUDIO_IO_Init+0xa8>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f6e:	4b25      	ldr	r3, [pc, #148]	; (8005004 <AUDIO_IO_Init+0xa8>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin   = AUDIO_RESET_PIN;
 8004f7a:	2340      	movs	r3, #64	; 0x40
 8004f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f82:	2302      	movs	r3, #2
 8004f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4619      	mov	r1, r3
 8004f90:	481d      	ldr	r0, [pc, #116]	; (8005008 <AUDIO_IO_Init+0xac>)
 8004f92:	f003 fa0b 	bl	80083ac <HAL_GPIO_Init>

  /* I2C bus init */
  I2C2_Init();
 8004f96:	f7ff fc1b 	bl	80047d0 <I2C2_Init>

  /* Power off the codec */
  CODEC_AUDIO_POWER_OFF();
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	481a      	ldr	r0, [pc, #104]	; (8005008 <AUDIO_IO_Init+0xac>)
 8004fa0:	f003 fc88 	bl	80088b4 <HAL_GPIO_WritePin>

  /* wait until power supplies are stable */
  HAL_Delay(10);
 8004fa4:	200a      	movs	r0, #10
 8004fa6:	f001 fd13 	bl	80069d0 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8004faa:	2201      	movs	r2, #1
 8004fac:	2140      	movs	r1, #64	; 0x40
 8004fae:	4816      	ldr	r0, [pc, #88]	; (8005008 <AUDIO_IO_Init+0xac>)
 8004fb0:	f003 fc80 	bl	80088b4 <HAL_GPIO_WritePin>

  /* Set the device in standby mode */
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x02);
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	2094      	movs	r0, #148	; 0x94
 8004fb8:	f000 f89d 	bl	80050f6 <AUDIO_IO_Read>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	77fb      	strb	r3, [r7, #31]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x02, (Value | 0x01));
 8004fc0:	7ffb      	ldrb	r3, [r7, #31]
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2102      	movs	r1, #2
 8004fcc:	2094      	movs	r0, #148	; 0x94
 8004fce:	f000 f87b 	bl	80050c8 <AUDIO_IO_Write>

  /* Set all power down bits to 1 */
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x02, 0x7F);
 8004fd2:	227f      	movs	r2, #127	; 0x7f
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	2094      	movs	r0, #148	; 0x94
 8004fd8:	f000 f876 	bl	80050c8 <AUDIO_IO_Write>
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x03);
 8004fdc:	2103      	movs	r1, #3
 8004fde:	2094      	movs	r0, #148	; 0x94
 8004fe0:	f000 f889 	bl	80050f6 <AUDIO_IO_Read>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	77fb      	strb	r3, [r7, #31]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x03, (Value | 0x0E));
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
 8004fea:	f043 030e 	orr.w	r3, r3, #14
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2103      	movs	r1, #3
 8004ff4:	2094      	movs	r0, #148	; 0x94
 8004ff6:	f000 f867 	bl	80050c8 <AUDIO_IO_Write>
}
 8004ffa:	bf00      	nop
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	48000800 	.word	0x48000800

0800500c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
  uint8_t Value;

  /* Mute DAC and ADC */
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x08);
 8005012:	2108      	movs	r1, #8
 8005014:	2094      	movs	r0, #148	; 0x94
 8005016:	f000 f86e 	bl	80050f6 <AUDIO_IO_Read>
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x08, (Value | 0x03));
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	f043 0303 	orr.w	r3, r3, #3
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	2108      	movs	r1, #8
 800502a:	2094      	movs	r0, #148	; 0x94
 800502c:	f000 f84c 	bl	80050c8 <AUDIO_IO_Write>
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x07);
 8005030:	2107      	movs	r1, #7
 8005032:	2094      	movs	r0, #148	; 0x94
 8005034:	f000 f85f 	bl	80050f6 <AUDIO_IO_Read>
 8005038:	4603      	mov	r3, r0
 800503a:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x07, (Value | 0x03));
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	f043 0303 	orr.w	r3, r3, #3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	2107      	movs	r1, #7
 8005048:	2094      	movs	r0, #148	; 0x94
 800504a:	f000 f83d 	bl	80050c8 <AUDIO_IO_Write>

  /* Disable soft ramp and zero cross */
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x06);
 800504e:	2106      	movs	r1, #6
 8005050:	2094      	movs	r0, #148	; 0x94
 8005052:	f000 f850 	bl	80050f6 <AUDIO_IO_Read>
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x06, (Value & 0xF0));
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	f023 030f 	bic.w	r3, r3, #15
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	2106      	movs	r1, #6
 8005066:	2094      	movs	r0, #148	; 0x94
 8005068:	f000 f82e 	bl	80050c8 <AUDIO_IO_Write>

  /* Set PDN to 1 */
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x02);
 800506c:	2102      	movs	r1, #2
 800506e:	2094      	movs	r0, #148	; 0x94
 8005070:	f000 f841 	bl	80050f6 <AUDIO_IO_Read>
 8005074:	4603      	mov	r3, r0
 8005076:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x02, (Value | 0x01));
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	2102      	movs	r1, #2
 8005084:	2094      	movs	r0, #148	; 0x94
 8005086:	f000 f81f 	bl	80050c8 <AUDIO_IO_Write>

  /* Set all power down bits to 1 */
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x02, 0x7F);
 800508a:	227f      	movs	r2, #127	; 0x7f
 800508c:	2102      	movs	r1, #2
 800508e:	2094      	movs	r0, #148	; 0x94
 8005090:	f000 f81a 	bl	80050c8 <AUDIO_IO_Write>
  Value = AUDIO_IO_Read(AUDIO_I2C_ADDRESS, 0x03);
 8005094:	2103      	movs	r1, #3
 8005096:	2094      	movs	r0, #148	; 0x94
 8005098:	f000 f82d 	bl	80050f6 <AUDIO_IO_Read>
 800509c:	4603      	mov	r3, r0
 800509e:	71fb      	strb	r3, [r7, #7]
  AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x03, (Value | 0x0E));
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	f043 030e 	orr.w	r3, r3, #14
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	2103      	movs	r1, #3
 80050ac:	2094      	movs	r0, #148	; 0x94
 80050ae:	f000 f80b 	bl	80050c8 <AUDIO_IO_Write>

  /* Power off the codec */
  CODEC_AUDIO_POWER_OFF();
 80050b2:	2200      	movs	r2, #0
 80050b4:	2140      	movs	r1, #64	; 0x40
 80050b6:	4803      	ldr	r0, [pc, #12]	; (80050c4 <AUDIO_IO_DeInit+0xb8>)
 80050b8:	f003 fbfc 	bl	80088b4 <HAL_GPIO_WritePin>

}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	48000800 	.word	0x48000800

080050c8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
 80050d2:	460b      	mov	r3, r1
 80050d4:	71bb      	strb	r3, [r7, #6]
 80050d6:	4613      	mov	r3, r2
 80050d8:	717b      	strb	r3, [r7, #5]
  I2C2_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	b298      	uxth	r0, r3
 80050de:	79bb      	ldrb	r3, [r7, #6]
 80050e0:	b299      	uxth	r1, r3
 80050e2:	1d7b      	adds	r3, r7, #5
 80050e4:	2201      	movs	r2, #1
 80050e6:	9200      	str	r2, [sp, #0]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f7ff fcaf 	bl	8004a4c <I2C2_WriteBuffer>
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b086      	sub	sp, #24
 80050fa:	af02      	add	r7, sp, #8
 80050fc:	4603      	mov	r3, r0
 80050fe:	460a      	mov	r2, r1
 8005100:	71fb      	strb	r3, [r7, #7]
 8005102:	4613      	mov	r3, r2
 8005104:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]

  I2C2_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	b298      	uxth	r0, r3
 800510e:	79bb      	ldrb	r3, [r7, #6]
 8005110:	b299      	uxth	r1, r3
 8005112:	f107 030f 	add.w	r3, r7, #15
 8005116:	2201      	movs	r2, #1
 8005118:	9200      	str	r2, [sp, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	f7ff fd1e 	bl	8004b5c <I2C2_ReadBuffer>

  return Read_Value;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	; 0x30
 8005130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005132:	4b38      	ldr	r3, [pc, #224]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	4a37      	ldr	r2, [pc, #220]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6513      	str	r3, [r2, #80]	; 0x50
 800513e:	4b35      	ldr	r3, [pc, #212]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800514a:	4b32      	ldr	r3, [pc, #200]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 800514c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514e:	4a31      	ldr	r2, [pc, #196]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005150:	f043 0308 	orr.w	r3, r3, #8
 8005154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005156:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005162:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005166:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005168:	f043 0310 	orr.w	r3, r3, #16
 800516c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800516e:	4b29      	ldr	r3, [pc, #164]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800517a:	4b26      	ldr	r3, [pc, #152]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	4a25      	ldr	r2, [pc, #148]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005180:	f043 0320 	orr.w	r3, r3, #32
 8005184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005186:	4b23      	ldr	r3, [pc, #140]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005192:	4b20      	ldr	r3, [pc, #128]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005196:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 8005198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800519c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800519e:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 80051a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ae:	4a19      	ldr	r2, [pc, #100]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6593      	str	r3, [r2, #88]	; 0x58
 80051b6:	4b17      	ldr	r3, [pc, #92]	; (8005214 <FMC_BANK1_MspInit+0xe8>)
 80051b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80051c2:	f005 fd11 	bl	800abe8 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 80051c6:	2302      	movs	r3, #2
 80051c8:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 80051ca:	2301      	movs	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ce:	2303      	movs	r3, #3
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 80051d2:	230c      	movs	r3, #12
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 80051d6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80051da:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80051dc:	f107 031c 	add.w	r3, r7, #28
 80051e0:	4619      	mov	r1, r3
 80051e2:	480d      	ldr	r0, [pc, #52]	; (8005218 <FMC_BANK1_MspInit+0xec>)
 80051e4:	f003 f8e2 	bl	80083ac <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 80051e8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80051ec:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 80051ee:	f107 031c 	add.w	r3, r7, #28
 80051f2:	4619      	mov	r1, r3
 80051f4:	4809      	ldr	r0, [pc, #36]	; (800521c <FMC_BANK1_MspInit+0xf0>)
 80051f6:	f003 f8d9 	bl	80083ac <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 80051fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8005200:	f107 031c 	add.w	r3, r7, #28
 8005204:	4619      	mov	r1, r3
 8005206:	4804      	ldr	r0, [pc, #16]	; (8005218 <FMC_BANK1_MspInit+0xec>)
 8005208:	f003 f8d0 	bl	80083ac <HAL_GPIO_Init>

}
 800520c:	bf00      	nop
 800520e:	3730      	adds	r7, #48	; 0x30
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000
 8005218:	48000c00 	.word	0x48000c00
 800521c:	48001000 	.word	0x48001000

08005220 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b0a4      	sub	sp, #144	; 0x90
 8005224:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8005226:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800522a:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 800522c:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <FMC_BANK1_Init+0xa8>)
 800522e:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 8005230:	2301      	movs	r3, #1
 8005232:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 8005234:	2301      	movs	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 8005238:	2301      	movs	r3, #1
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 8005240:	2302      	movs	r3, #2
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 8005244:	2302      	movs	r3, #2
 8005246:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 8005248:	2300      	movs	r3, #0
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 800524c:	2305      	movs	r3, #5
 800524e:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 8005250:	2301      	movs	r3, #1
 8005252:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 8005254:	2303      	movs	r3, #3
 8005256:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 8005258:	2302      	movs	r3, #2
 800525a:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 800525c:	2302      	movs	r3, #2
 800525e:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 8005260:	2302      	movs	r3, #2
 8005262:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 8005268:	2300      	movs	r3, #0
 800526a:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 800526c:	2300      	movs	r3, #0
 800526e:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8005270:	2300      	movs	r3, #0
 8005272:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8005274:	2310      	movs	r3, #16
 8005276:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8005278:	2300      	movs	r3, #0
 800527a:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800527c:	2300      	movs	r3, #0
 800527e:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8005280:	2300      	movs	r3, #0
 8005282:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 8005284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005288:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 800528a:	2300      	movs	r3, #0
 800528c:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 800528e:	2300      	movs	r3, #0
 8005290:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 8005296:	2300      	movs	r3, #0
 8005298:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 800529a:	2300      	movs	r3, #0
 800529c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 80052a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80052a6:	2300      	movs	r3, #0
 80052a8:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 80052aa:	f7ff ff3f 	bl	800512c <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 80052ae:	463a      	mov	r2, r7
 80052b0:	f107 0120 	add.w	r1, r7, #32
 80052b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052b8:	4618      	mov	r0, r3
 80052ba:	f009 fb9c 	bl	800e9f6 <HAL_SRAM_Init>

}
 80052be:	bf00      	nop
 80052c0:	3790      	adds	r7, #144	; 0x90
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	a0000104 	.word	0xa0000104

080052cc <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 80052d6:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <FMC_BANK1_WriteData+0x1c>)
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	8013      	strh	r3, [r2, #0]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	60080000 	.word	0x60080000

080052ec <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 80052f6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80052fa:	79fa      	ldrb	r2, [r7, #7]
 80052fc:	b292      	uxth	r2, r2
 80052fe:	801a      	strh	r2, [r3, #0]
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 8005310:	4b03      	ldr	r3, [pc, #12]	; (8005320 <FMC_BANK1_ReadData+0x14>)
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
}
 8005316:	4618      	mov	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	60080000 	.word	0x60080000

08005324 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8005328:	f7ff ff7a 	bl	8005220 <FMC_BANK1_Init>
}
 800532c:	bf00      	nop
 800532e:	bd80      	pop	{r7, pc}

08005330 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff ffc5 	bl	80052cc <FMC_BANK1_WriteData>
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	4603      	mov	r3, r0
 8005352:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff ffc8 	bl	80052ec <FMC_BANK1_WriteReg>
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8005368:	f7ff ffd0 	bl	800530c <FMC_BANK1_ReadData>
 800536c:	4603      	mov	r3, r0
}
 800536e:	4618      	mov	r0, r3
 8005370:	bd80      	pop	{r7, pc}

08005372 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fb28 	bl	80069d0 <HAL_Delay>
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 800538c:	4812      	ldr	r0, [pc, #72]	; (80053d8 <TS_IO_Init+0x50>)
 800538e:	f7ff fc21 	bl	8004bd4 <I2Cx_Init>

  if (ts_io_init == 0)
 8005392:	4b12      	ldr	r3, [pc, #72]	; (80053dc <TS_IO_Init+0x54>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d11b      	bne.n	80053d2 <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 800539a:	f000 fd05 	bl	8005da8 <BSP_LCD_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 80053a4:	f7ff fa10 	bl	80047c8 <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 80053a8:	2101      	movs	r1, #1
 80053aa:	2002      	movs	r0, #2
 80053ac:	f000 fcc4 	bl	8005d38 <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 80053b0:	2100      	movs	r1, #0
 80053b2:	2002      	movs	r0, #2
 80053b4:	f000 fcdc 	bl	8005d70 <BSP_IO_WritePin>
    HAL_Delay(10);
 80053b8:	200a      	movs	r0, #10
 80053ba:	f001 fb09 	bl	80069d0 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 80053be:	2101      	movs	r1, #1
 80053c0:	2002      	movs	r0, #2
 80053c2:	f000 fcd5 	bl	8005d70 <BSP_IO_WritePin>
    HAL_Delay(200);
 80053c6:	20c8      	movs	r0, #200	; 0xc8
 80053c8:	f001 fb02 	bl	80069d0 <HAL_Delay>

    ts_io_init = 1;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <TS_IO_Init+0x54>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
  }
}
 80053d2:	bf00      	nop
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2001cbb0 	.word	0x2001cbb0
 80053dc:	2001cb58 	.word	0x2001cb58

080053e0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]
 80053ea:	460b      	mov	r3, r1
 80053ec:	71bb      	strb	r3, [r7, #6]
 80053ee:	4613      	mov	r3, r2
 80053f0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 80053f2:	79bb      	ldrb	r3, [r7, #6]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	79f9      	ldrb	r1, [r7, #7]
 80053f8:	2301      	movs	r3, #1
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	1d7b      	adds	r3, r7, #5
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2301      	movs	r3, #1
 8005402:	4803      	ldr	r0, [pc, #12]	; (8005410 <TS_IO_Write+0x30>)
 8005404:	f7ff fc61 	bl	8004cca <I2Cx_WriteMultiple>
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	2001cbb0 	.word	0x2001cbb0

08005414 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	460a      	mov	r2, r1
 800541e:	71fb      	strb	r3, [r7, #7]
 8005420:	4613      	mov	r3, r2
 8005422:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	b29b      	uxth	r3, r3
 8005428:	79ba      	ldrb	r2, [r7, #6]
 800542a:	b291      	uxth	r1, r2
 800542c:	2201      	movs	r2, #1
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff fb3a 	bl	8004aa8 <I2C2_ReadData>
 8005434:	4603      	mov	r3, r0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af02      	add	r7, sp, #8
 8005446:	603a      	str	r2, [r7, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
 800544e:	460b      	mov	r3, r1
 8005450:	71bb      	strb	r3, [r7, #6]
 8005452:	4613      	mov	r3, r2
 8005454:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005456:	79bb      	ldrb	r3, [r7, #6]
 8005458:	b29a      	uxth	r2, r3
 800545a:	79f9      	ldrb	r1, [r7, #7]
 800545c:	88bb      	ldrh	r3, [r7, #4]
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2301      	movs	r3, #1
 8005466:	4804      	ldr	r0, [pc, #16]	; (8005478 <TS_IO_ReadMultiple+0x38>)
 8005468:	f7ff fc02 	bl	8004c70 <I2Cx_ReadMultiple>
 800546c:	4603      	mov	r3, r0
 800546e:	b29b      	uxth	r3, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	2001cbb0 	.word	0x2001cbb0

0800547c <BSP_AUDIO_OUT_Init>:
  *         the SAI PLL input clock runs at 8 MHz.
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice,
                           uint8_t  Volume,
                           uint32_t AudioFreq)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	603a      	str	r2, [r7, #0]
 8005486:	80fb      	strh	r3, [r7, #6]
 8005488:	460b      	mov	r3, r1
 800548a:	717b      	strb	r3, [r7, #5]
  /* Initialize the audio output context */
  hAudioOut.AudioDrv           = &cs42l51_drv;
 800548c:	4b28      	ldr	r3, [pc, #160]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 800548e:	4a29      	ldr	r2, [pc, #164]	; (8005534 <BSP_AUDIO_OUT_Init+0xb8>)
 8005490:	601a      	str	r2, [r3, #0]
  hAudioOut.OutputDevice       = OutputDevice;
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	4a26      	ldr	r2, [pc, #152]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 8005496:	6053      	str	r3, [r2, #4]
  hAudioOut.Frequency          = AudioFreq;
 8005498:	4a25      	ldr	r2, [pc, #148]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6093      	str	r3, [r2, #8]
  hAudioOut.Volume             = Volume;
 800549e:	797b      	ldrb	r3, [r7, #5]
 80054a0:	4a23      	ldr	r2, [pc, #140]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 80054a2:	60d3      	str	r3, [r2, #12]
  hAudioOut.CbError            = (Audio_CallbackTypeDef)NULL;
 80054a4:	4b22      	ldr	r3, [pc, #136]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
  hAudioOut.CbHalfTransfer     = (Audio_CallbackTypeDef)NULL;
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]
  hAudioOut.CbTransferComplete = (Audio_CallbackTypeDef)NULL;
 80054b0:	4b1f      	ldr	r3, [pc, #124]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	619a      	str	r2, [r3, #24]

  /* Check if input device is currently used */
  if (hAudioIn.InputDevice != 0)
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <BSP_AUDIO_OUT_Init+0xbc>)
 80054b8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <BSP_AUDIO_OUT_Init+0x56>
  {
    /* If input device is currently used, SAI PLL is already initialized */
    /* Check that AudioFreq for record and playback is the same */
    if (hAudioIn.Frequency != hAudioOut.Frequency)
 80054c0:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <BSP_AUDIO_OUT_Init+0xbc>)
 80054c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80054c6:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d009      	beq.n	80054e2 <BSP_AUDIO_OUT_Init+0x66>
    {
      return AUDIO_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e02a      	b.n	8005528 <BSP_AUDIO_OUT_Init+0xac>
    }
  }
  else
  {
    /* Configure the SAI PLL according to the requested audio frequency */
    if (AUDIO_SAIPLLConfig(AudioFreq) != AUDIO_OK)
 80054d2:	6838      	ldr	r0, [r7, #0]
 80054d4:	f000 fbaa 	bl	8005c2c <AUDIO_SAIPLLConfig>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <BSP_AUDIO_OUT_Init+0x66>
    {
      return AUDIO_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e022      	b.n	8005528 <BSP_AUDIO_OUT_Init+0xac>
    }
  }

  /* If input device is analogic mic, SAI is already initialized */
  if (hAudioIn.InputDevice != INPUT_DEVICE_ANALOG_MIC)
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <BSP_AUDIO_OUT_Init+0xbc>)
 80054e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	d007      	beq.n	80054fc <BSP_AUDIO_OUT_Init+0x80>
  {
    /* SAI data transfer preparation: prepare the Media to be used for the audio
    transfer from memory to SAI peripheral. */
    if (AUDIO_SAIx_Init(AudioFreq) != AUDIO_OK)
 80054ec:	6838      	ldr	r0, [r7, #0]
 80054ee:	f000 f957 	bl	80057a0 <AUDIO_SAIx_Init>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <BSP_AUDIO_OUT_Init+0x80>
    {
      return AUDIO_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e015      	b.n	8005528 <BSP_AUDIO_OUT_Init+0xac>
    }
  }

  /* Initialize the audio codec internal registers */
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681c      	ldr	r4, [r3, #0]
                               (hAudioOut.OutputDevice | hAudioIn.InputDevice),
 8005502:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <BSP_AUDIO_OUT_Init+0xb4>)
 8005504:	685b      	ldr	r3, [r3, #4]
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 8005506:	b29a      	uxth	r2, r3
                               (hAudioOut.OutputDevice | hAudioIn.InputDevice),
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <BSP_AUDIO_OUT_Init+0xbc>)
 800550a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 800550e:	b29b      	uxth	r3, r3
 8005510:	4313      	orrs	r3, r2
 8005512:	b299      	uxth	r1, r3
 8005514:	797a      	ldrb	r2, [r7, #5]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2094      	movs	r0, #148	; 0x94
 800551a:	47a0      	blx	r4
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <BSP_AUDIO_OUT_Init+0xaa>
                               Volume,
                               AudioFreq) != 0)
  {
    return AUDIO_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <BSP_AUDIO_OUT_Init+0xac>
  }

  return AUDIO_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}
 8005530:	2001ccac 	.word	0x2001ccac
 8005534:	2001c060 	.word	0x2001c060
 8005538:	2001ccc8 	.word	0x2001ccc8

0800553c <BSP_AUDIO_OUT_Play>:
  * @param  pData: pointer on PCM samples buffer
  * @param  Size: Number of audio data HALF WORD.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pData, uint32_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  /* Initiate a DMA transfer of PCM samples towards the serial audio interface */
  if (HAL_SAI_Transmit_DMA(&BSP_AUDIO_hSai_Tx, (uint8_t *)pData, DMA_MAX(Size)) != HAL_OK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800554c:	4293      	cmp	r3, r2
 800554e:	bf28      	it	cs
 8005550:	4613      	movcs	r3, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	480c      	ldr	r0, [pc, #48]	; (800558c <BSP_AUDIO_OUT_Play+0x50>)
 800555a:	f008 f9ad 	bl	800d8b8 <HAL_SAI_Transmit_DMA>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <BSP_AUDIO_OUT_Play+0x2c>
  {
    return AUDIO_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e00d      	b.n	8005584 <BSP_AUDIO_OUT_Play+0x48>
  }

  /* Call the audio Codec Play function */
  if (hAudioOut.AudioDrv->Play(AUDIO_I2C_ADDRESS, pData, Size) != 0)
 8005568:	4b09      	ldr	r3, [pc, #36]	; (8005590 <BSP_AUDIO_OUT_Play+0x54>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	b292      	uxth	r2, r2
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	2094      	movs	r0, #148	; 0x94
 8005576:	4798      	blx	r3
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <BSP_AUDIO_OUT_Play+0x46>
  {
    return AUDIO_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <BSP_AUDIO_OUT_Play+0x48>
  }

  return AUDIO_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	2001ce88 	.word	0x2001ce88
 8005590:	2001ccac 	.word	0x2001ccac

08005594 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Option);

  /* Call Audio Codec Stop function */
  if (hAudioOut.AudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <BSP_AUDIO_OUT_Stop+0x40>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	2094      	movs	r0, #148	; 0x94
 80055a6:	4798      	blx	r3
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <BSP_AUDIO_OUT_Stop+0x1e>
  {
    return AUDIO_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e00b      	b.n	80055ca <BSP_AUDIO_OUT_Stop+0x36>
  }

  /* Wait at least 100ms */
  HAL_Delay(100);
 80055b2:	2064      	movs	r0, #100	; 0x64
 80055b4:	f001 fa0c 	bl	80069d0 <HAL_Delay>

  /* Stop DMA transfer of PCM samples towards the serial audio interface */
  if (HAL_SAI_DMAStop(&BSP_AUDIO_hSai_Tx) != HAL_OK)
 80055b8:	4807      	ldr	r0, [pc, #28]	; (80055d8 <BSP_AUDIO_OUT_Stop+0x44>)
 80055ba:	f008 f929 	bl	800d810 <HAL_SAI_DMAStop>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <BSP_AUDIO_OUT_Stop+0x34>
  {
    return AUDIO_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <BSP_AUDIO_OUT_Stop+0x36>
  }

  return AUDIO_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	2001ccac 	.word	0x2001ccac
 80055d8:	2001ce88 	.word	0x2001ce88

080055dc <BSP_AUDIO_OUT_SetOutputMode>:
  * @param  Output: The audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE or OUTPUT_DEVICE_BOTH
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_SetOutputMode(uint8_t Output)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
  /* Call the Codec output device function */
  if (hAudioOut.AudioDrv->SetOutputMode(AUDIO_I2C_ADDRESS, Output) != 0)
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <BSP_AUDIO_OUT_SetOutputMode+0x2c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	79fa      	ldrb	r2, [r7, #7]
 80055ee:	4611      	mov	r1, r2
 80055f0:	2094      	movs	r0, #148	; 0x94
 80055f2:	4798      	blx	r3
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <BSP_AUDIO_OUT_SetOutputMode+0x22>
  {
    return AUDIO_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <BSP_AUDIO_OUT_SetOutputMode+0x24>
  }

  return AUDIO_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	2001ccac 	.word	0x2001ccac

0800560c <BSP_AUDIO_OUT_ChangeAudioConfig>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio out configuration.
  * @retval None
  */
void BSP_AUDIO_OUT_ChangeAudioConfig(uint32_t AudioOutOption)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint8_t TxData[2] = {0x00, 0x00};
 8005614:	2300      	movs	r3, #0
 8005616:	81bb      	strh	r3, [r7, #12]

  /********** Playback Buffer circular/normal mode **********/
  if (AudioOutOption & BSP_AUDIO_OUT_CIRCULARMODE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00e      	beq.n	8005640 <BSP_AUDIO_OUT_ChangeAudioConfig+0x34>
  {
    /* Deinitialize the Stream to update DMA mode */
    HAL_DMA_DeInit(BSP_AUDIO_hSai_Tx.hdmatx);
 8005622:	4b32      	ldr	r3, [pc, #200]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005626:	4618      	mov	r0, r3
 8005628:	f002 fd60 	bl	80080ec <HAL_DMA_DeInit>

    /* Update the SAI audio Transfer DMA mode */
    BSP_AUDIO_hSai_Tx.hdmatx->Init.Mode = DMA_CIRCULAR;
 800562c:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800562e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005630:	2220      	movs	r2, #32
 8005632:	61da      	str	r2, [r3, #28]

    /* Configure the DMA Stream with new Transfer DMA mode */
    HAL_DMA_Init(BSP_AUDIO_hSai_Tx.hdmatx);
 8005634:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005638:	4618      	mov	r0, r3
 800563a:	f002 fc9f 	bl	8007f7c <HAL_DMA_Init>
 800563e:	e00d      	b.n	800565c <BSP_AUDIO_OUT_ChangeAudioConfig+0x50>
  }
  else /* BSP_AUDIO_OUT_NORMALMODE */
  {
    /* Deinitialize the Stream to update DMA mode */
    HAL_DMA_DeInit(BSP_AUDIO_hSai_Tx.hdmatx);
 8005640:	4b2a      	ldr	r3, [pc, #168]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005644:	4618      	mov	r0, r3
 8005646:	f002 fd51 	bl	80080ec <HAL_DMA_DeInit>

    /* Update the SAI audio Transfer DMA mode */
    BSP_AUDIO_hSai_Tx.hdmatx->Init.Mode = DMA_NORMAL;
 800564a:	4b28      	ldr	r3, [pc, #160]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564e:	2200      	movs	r2, #0
 8005650:	61da      	str	r2, [r3, #28]

    /* Configure the DMA Stream with new Transfer DMA mode */
    HAL_DMA_Init(BSP_AUDIO_hSai_Tx.hdmatx);
 8005652:	4b26      	ldr	r3, [pc, #152]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005656:	4618      	mov	r0, r3
 8005658:	f002 fc90 	bl	8007f7c <HAL_DMA_Init>
  }

  /********** Playback Buffer stereo/mono mode **********/
  if (AudioOutOption & BSP_AUDIO_OUT_STEREOMODE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01e      	beq.n	80056a4 <BSP_AUDIO_OUT_ChangeAudioConfig+0x98>
  {
    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&BSP_AUDIO_hSai_Tx);
 8005666:	4b21      	ldr	r3, [pc, #132]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005674:	601a      	str	r2, [r3, #0]

    /* Update the SAI audio frame slot configuration */
    BSP_AUDIO_hSai_Tx.Init.MonoStereoMode = SAI_STEREOMODE;
 8005676:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005678:	2200      	movs	r2, #0
 800567a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_SAI_Init(&BSP_AUDIO_hSai_Tx);
 800567c:	481b      	ldr	r0, [pc, #108]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800567e:	f007 fe4f 	bl	800d320 <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&BSP_AUDIO_hSai_Tx);
 8005682:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b18      	ldr	r3, [pc, #96]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005690:	601a      	str	r2, [r3, #0]
    /* Transmit one byte to start FS generation */
    HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, TxData, 2, 1000);
 8005692:	f107 010c 	add.w	r1, r7, #12
 8005696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800569a:	2202      	movs	r2, #2
 800569c:	4813      	ldr	r0, [pc, #76]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 800569e:	f007 ffb1 	bl	800d604 <HAL_SAI_Transmit>
    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&BSP_AUDIO_hSai_Tx);
    /* Transmit one byte to start FS generation */
    HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, TxData, 2, 1000);
  }
}
 80056a2:	e01e      	b.n	80056e2 <BSP_AUDIO_OUT_ChangeAudioConfig+0xd6>
    __HAL_SAI_DISABLE(&BSP_AUDIO_hSai_Tx);
 80056a4:	4b11      	ldr	r3, [pc, #68]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056b2:	601a      	str	r2, [r3, #0]
    BSP_AUDIO_hSai_Tx.Init.MonoStereoMode = SAI_MONOMODE;
 80056b4:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_SAI_Init(&BSP_AUDIO_hSai_Tx);
 80056bc:	480b      	ldr	r0, [pc, #44]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056be:	f007 fe2f 	bl	800d320 <HAL_SAI_Init>
    __HAL_SAI_ENABLE(&BSP_AUDIO_hSai_Tx);
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056d0:	601a      	str	r2, [r3, #0]
    HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, TxData, 2, 1000);
 80056d2:	f107 010c 	add.w	r1, r7, #12
 80056d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056da:	2202      	movs	r2, #2
 80056dc:	4803      	ldr	r0, [pc, #12]	; (80056ec <BSP_AUDIO_OUT_ChangeAudioConfig+0xe0>)
 80056de:	f007 ff91 	bl	800d604 <HAL_SAI_Transmit>
}
 80056e2:	bf00      	nop
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	2001ce88 	.word	0x2001ce88

080056f0 <BSP_AUDIO_OUT_RegisterCallbacks>:
  * @retval None
  */
void BSP_AUDIO_OUT_RegisterCallbacks(Audio_CallbackTypeDef ErrorCallback,
                                     Audio_CallbackTypeDef HalfTransferCallback,
                                     Audio_CallbackTypeDef TransferCompleteCallback)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  hAudioOut.CbError            = ErrorCallback;
 80056fc:	4a07      	ldr	r2, [pc, #28]	; (800571c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6113      	str	r3, [r2, #16]
  hAudioOut.CbHalfTransfer     = HalfTransferCallback;
 8005702:	4a06      	ldr	r2, [pc, #24]	; (800571c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6153      	str	r3, [r2, #20]
  hAudioOut.CbTransferComplete = TransferCompleteCallback;
 8005708:	4a04      	ldr	r2, [pc, #16]	; (800571c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6193      	str	r3, [r2, #24]
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	2001ccac 	.word	0x2001ccac

08005720 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'TransferComplete' function (if any) */
  if (hAudioOut.CbTransferComplete != (Audio_CallbackTypeDef)NULL)
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_SAI_TxCpltCallback+0x20>)
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_SAI_TxCpltCallback+0x16>
  {
    hAudioOut.CbTransferComplete();
 8005730:	4b03      	ldr	r3, [pc, #12]	; (8005740 <HAL_SAI_TxCpltCallback+0x20>)
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	4798      	blx	r3
  }
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2001ccac 	.word	0x2001ccac

08005744 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'HalfTransfer' callback function (if any) */
  if (hAudioOut.CbHalfTransfer != (Audio_CallbackTypeDef)NULL)
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_SAI_TxHalfCpltCallback+0x20>)
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SAI_TxHalfCpltCallback+0x16>
  {
    hAudioOut.CbHalfTransfer();
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <HAL_SAI_TxHalfCpltCallback+0x20>)
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	4798      	blx	r3
  }
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	2001ccac 	.word	0x2001ccac

08005768 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_SAI_ErrorCallback+0x30>)
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_SAI_ErrorCallback+0x30>)
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	4798      	blx	r3
  }
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioIn.CbError != (Audio_CallbackTypeDef)NULL)
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <HAL_SAI_ErrorCallback+0x34>)
 8005780:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_SAI_ErrorCallback+0x28>
  {
    hAudioIn.CbError();
 8005788:	4b04      	ldr	r3, [pc, #16]	; (800579c <HAL_SAI_ErrorCallback+0x34>)
 800578a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800578e:	4798      	blx	r3
  }
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	2001ccac 	.word	0x2001ccac
 800579c:	2001ccc8 	.word	0x2001ccc8

080057a0 <AUDIO_SAIx_Init>:
  * @brief  Initializes the Audio Codec audio interface (SAI).
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval BSP AUDIO status
  */
static uint8_t AUDIO_SAIx_Init(uint32_t AudioFreq)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint8_t TxData[2] = {0x00, 0x00};
 80057a8:	2300      	movs	r3, #0
 80057aa:	81bb      	strh	r3, [r7, #12]

  /* Initialize the BSP_AUDIO_hSai_Xx instances parameter */
  BSP_AUDIO_hSai_Tx.Instance = SAI1_Block_A;
 80057ac:	4b99      	ldr	r3, [pc, #612]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057ae:	4a9a      	ldr	r2, [pc, #616]	; (8005a18 <AUDIO_SAIx_Init+0x278>)
 80057b0:	601a      	str	r2, [r3, #0]
  BSP_AUDIO_hSai_Rx.Instance = SAI1_Block_B;
 80057b2:	4b9a      	ldr	r3, [pc, #616]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80057b4:	4a9a      	ldr	r2, [pc, #616]	; (8005a20 <AUDIO_SAIx_Init+0x280>)
 80057b6:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai_Tx);
 80057b8:	4b96      	ldr	r3, [pc, #600]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b95      	ldr	r3, [pc, #596]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057c6:	601a      	str	r2, [r3, #0]
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai_Rx);
 80057c8:	4b94      	ldr	r3, [pc, #592]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b93      	ldr	r3, [pc, #588]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057d6:	601a      	str	r2, [r3, #0]
  /* SAI block used for playback */
  /*******************************/
  /* Configure SAI_Block_x used for transmit
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai_Tx.Init.AudioMode      = SAI_MODEMASTER_TX;
 80057d8:	4b8e      	ldr	r3, [pc, #568]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057da:	2200      	movs	r2, #0
 80057dc:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai_Tx.Init.Synchro        = SAI_ASYNCHRONOUS;
 80057de:	4b8d      	ldr	r3, [pc, #564]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai_Tx.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80057e4:	4b8b      	ldr	r3, [pc, #556]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai_Tx.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80057ea:	4b8a      	ldr	r3, [pc, #552]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057f0:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai_Tx.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80057f2:	4b88      	ldr	r3, [pc, #544]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai_Tx.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80057f8:	4b86      	ldr	r3, [pc, #536]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai_Tx.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 80057fe:	4b85      	ldr	r3, [pc, #532]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 8005800:	2200      	movs	r2, #0
 8005802:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai_Tx.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800580a:	d029      	beq.n	8005860 <AUDIO_SAIx_Init+0xc0>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005812:	4293      	cmp	r3, r2
 8005814:	d022      	beq.n	800585c <AUDIO_SAIx_Init+0xbc>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800581c:	d01c      	beq.n	8005858 <AUDIO_SAIx_Init+0xb8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f245 6222 	movw	r2, #22050	; 0x5622
 8005824:	4293      	cmp	r3, r2
 8005826:	d015      	beq.n	8005854 <AUDIO_SAIx_Init+0xb4>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800582e:	d00f      	beq.n	8005850 <AUDIO_SAIx_Init+0xb0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005836:	4293      	cmp	r3, r2
 8005838:	d008      	beq.n	800584c <AUDIO_SAIx_Init+0xac>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <AUDIO_SAIx_Init+0xa8>
 8005844:	2302      	movs	r3, #2
 8005846:	e00c      	b.n	8005862 <AUDIO_SAIx_Init+0xc2>
 8005848:	2301      	movs	r3, #1
 800584a:	e00a      	b.n	8005862 <AUDIO_SAIx_Init+0xc2>
 800584c:	2300      	movs	r3, #0
 800584e:	e008      	b.n	8005862 <AUDIO_SAIx_Init+0xc2>
 8005850:	2303      	movs	r3, #3
 8005852:	e006      	b.n	8005862 <AUDIO_SAIx_Init+0xc2>
 8005854:	2301      	movs	r3, #1
 8005856:	e004      	b.n	8005862 <AUDIO_SAIx_Init+0xc2>
 8005858:	2306      	movs	r3, #6
 800585a:	e002      	b.n	8005862 <AUDIO_SAIx_Init+0xc2>
 800585c:	2302      	movs	r3, #2
 800585e:	e000      	b.n	8005862 <AUDIO_SAIx_Init+0xc2>
 8005860:	230c      	movs	r3, #12
 8005862:	4a6c      	ldr	r2, [pc, #432]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 8005864:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai_Tx.Init.MonoStereoMode = SAI_STEREOMODE;
 8005866:	4b6b      	ldr	r3, [pc, #428]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 8005868:	2200      	movs	r2, #0
 800586a:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai_Tx.Init.CompandingMode = SAI_NOCOMPANDING;
 800586c:	4b69      	ldr	r3, [pc, #420]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 800586e:	2200      	movs	r2, #0
 8005870:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai_Tx.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8005872:	4b68      	ldr	r3, [pc, #416]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 8005874:	2200      	movs	r2, #0
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai_Tx.Init.Protocol       = SAI_FREE_PROTOCOL;
 8005878:	4b66      	ldr	r3, [pc, #408]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 800587a:	2200      	movs	r2, #0
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai_Tx.Init.DataSize       = SAI_DATASIZE_16;
 800587e:	4b65      	ldr	r3, [pc, #404]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 8005880:	2280      	movs	r2, #128	; 0x80
 8005882:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai_Tx.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8005884:	4b63      	ldr	r3, [pc, #396]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 8005886:	2200      	movs	r2, #0
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai_Tx.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800588a:	4b62      	ldr	r3, [pc, #392]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 800588c:	2200      	movs	r2, #0
 800588e:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai_Tx.FrameInit.FrameLength = 32;
 8005890:	4b60      	ldr	r3, [pc, #384]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 8005892:	2220      	movs	r2, #32
 8005894:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai_Tx.FrameInit.ActiveFrameLength = 16;
 8005896:	4b5f      	ldr	r3, [pc, #380]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 8005898:	2210      	movs	r2, #16
 800589a:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai_Tx.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800589c:	4b5d      	ldr	r3, [pc, #372]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 800589e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058a2:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai_Tx.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80058a4:	4b5b      	ldr	r3, [pc, #364]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai_Tx.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80058aa:	4b5a      	ldr	r3, [pc, #360]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80058ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80058b0:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai_Tx.SlotInit.FirstBitOffset = 0;
 80058b2:	4b58      	ldr	r3, [pc, #352]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai_Tx.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80058b8:	4b56      	ldr	r3, [pc, #344]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai_Tx.SlotInit.SlotNumber = 2;
 80058be:	4b55      	ldr	r3, [pc, #340]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80058c0:	2202      	movs	r2, #2
 80058c2:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai_Tx.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 80058c4:	4b53      	ldr	r3, [pc, #332]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80058c6:	2203      	movs	r2, #3
 80058c8:	661a      	str	r2, [r3, #96]	; 0x60
  /* SAI block used for record */
  /*****************************/
  /* Configure SAI_Block_x used for receive
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai_Rx.Init.AudioMode      = SAI_MODESLAVE_RX;
 80058ca:	4b54      	ldr	r3, [pc, #336]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80058cc:	2203      	movs	r2, #3
 80058ce:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai_Rx.Init.Synchro        = SAI_SYNCHRONOUS;
 80058d0:	4b52      	ldr	r3, [pc, #328]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai_Rx.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80058d6:	4b51      	ldr	r3, [pc, #324]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80058d8:	2200      	movs	r2, #0
 80058da:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai_Rx.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80058dc:	4b4f      	ldr	r3, [pc, #316]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80058de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058e2:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai_Rx.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80058e4:	4b4d      	ldr	r3, [pc, #308]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai_Rx.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80058ea:	4b4c      	ldr	r3, [pc, #304]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai_Rx.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 80058f0:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai_Rx.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80058fc:	d029      	beq.n	8005952 <AUDIO_SAIx_Init+0x1b2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005904:	4293      	cmp	r3, r2
 8005906:	d022      	beq.n	800594e <AUDIO_SAIx_Init+0x1ae>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800590e:	d01c      	beq.n	800594a <AUDIO_SAIx_Init+0x1aa>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f245 6222 	movw	r2, #22050	; 0x5622
 8005916:	4293      	cmp	r3, r2
 8005918:	d015      	beq.n	8005946 <AUDIO_SAIx_Init+0x1a6>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005920:	d00f      	beq.n	8005942 <AUDIO_SAIx_Init+0x1a2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005928:	4293      	cmp	r3, r2
 800592a:	d008      	beq.n	800593e <AUDIO_SAIx_Init+0x19e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005932:	4293      	cmp	r3, r2
 8005934:	d101      	bne.n	800593a <AUDIO_SAIx_Init+0x19a>
 8005936:	2302      	movs	r3, #2
 8005938:	e00c      	b.n	8005954 <AUDIO_SAIx_Init+0x1b4>
 800593a:	2301      	movs	r3, #1
 800593c:	e00a      	b.n	8005954 <AUDIO_SAIx_Init+0x1b4>
 800593e:	2300      	movs	r3, #0
 8005940:	e008      	b.n	8005954 <AUDIO_SAIx_Init+0x1b4>
 8005942:	2303      	movs	r3, #3
 8005944:	e006      	b.n	8005954 <AUDIO_SAIx_Init+0x1b4>
 8005946:	2301      	movs	r3, #1
 8005948:	e004      	b.n	8005954 <AUDIO_SAIx_Init+0x1b4>
 800594a:	2306      	movs	r3, #6
 800594c:	e002      	b.n	8005954 <AUDIO_SAIx_Init+0x1b4>
 800594e:	2302      	movs	r3, #2
 8005950:	e000      	b.n	8005954 <AUDIO_SAIx_Init+0x1b4>
 8005952:	230c      	movs	r3, #12
 8005954:	4a31      	ldr	r2, [pc, #196]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 8005956:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai_Rx.Init.MonoStereoMode = SAI_MONOMODE;
 8005958:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 800595a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800595e:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai_Rx.Init.CompandingMode = SAI_NOCOMPANDING;
 8005960:	4b2e      	ldr	r3, [pc, #184]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 8005962:	2200      	movs	r2, #0
 8005964:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai_Rx.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8005966:	4b2d      	ldr	r3, [pc, #180]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 8005968:	2200      	movs	r2, #0
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai_Rx.Init.Protocol       = SAI_FREE_PROTOCOL;
 800596c:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 800596e:	2200      	movs	r2, #0
 8005970:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai_Rx.Init.DataSize       = SAI_DATASIZE_16;
 8005972:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai_Rx.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8005978:	4b28      	ldr	r3, [pc, #160]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 800597a:	2200      	movs	r2, #0
 800597c:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai_Rx.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800597e:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 8005980:	2200      	movs	r2, #0
 8005982:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai_Rx.FrameInit.FrameLength = 32;
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 8005986:	2220      	movs	r2, #32
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai_Rx.FrameInit.ActiveFrameLength = 16;
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 800598c:	2210      	movs	r2, #16
 800598e:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai_Rx.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005990:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 8005992:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005996:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai_Rx.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005998:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 800599a:	2200      	movs	r2, #0
 800599c:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai_Rx.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800599e:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80059a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai_Rx.SlotInit.FirstBitOffset = 0;
 80059a6:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai_Rx.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai_Rx.SlotInit.SlotNumber = 2;
 80059b2:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80059b4:	2202      	movs	r2, #2
 80059b6:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai_Rx.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 80059b8:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80059ba:	2203      	movs	r2, #3
 80059bc:	661a      	str	r2, [r3, #96]	; 0x60

  /*********************************/
  /* Initializes the SAI peripheral*/
  /*********************************/
  if (HAL_SAI_Init(&BSP_AUDIO_hSai_Tx) != HAL_OK)
 80059be:	4815      	ldr	r0, [pc, #84]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80059c0:	f007 fcae 	bl	800d320 <HAL_SAI_Init>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <AUDIO_SAIx_Init+0x22e>
  {
    return AUDIO_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e01d      	b.n	8005a0a <AUDIO_SAIx_Init+0x26a>
  }
  if (HAL_SAI_Init(&BSP_AUDIO_hSai_Rx) != HAL_OK)
 80059ce:	4813      	ldr	r0, [pc, #76]	; (8005a1c <AUDIO_SAIx_Init+0x27c>)
 80059d0:	f007 fca6 	bl	800d320 <HAL_SAI_Init>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <AUDIO_SAIx_Init+0x23e>
  {
    return AUDIO_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e015      	b.n	8005a0a <AUDIO_SAIx_Init+0x26a>
  }

  /******************************************/
  /* Enable SAI peripheral to generate MCLK */
  /******************************************/
  __HAL_SAI_ENABLE(&BSP_AUDIO_hSai_Tx);
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059ec:	601a      	str	r2, [r3, #0]
  /* Transmit one byte to start FS generation */
  if (HAL_SAI_Transmit(&BSP_AUDIO_hSai_Tx, TxData, 2, 1000) != HAL_OK)
 80059ee:	f107 010c 	add.w	r1, r7, #12
 80059f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059f6:	2202      	movs	r2, #2
 80059f8:	4806      	ldr	r0, [pc, #24]	; (8005a14 <AUDIO_SAIx_Init+0x274>)
 80059fa:	f007 fe03 	bl	800d604 <HAL_SAI_Transmit>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <AUDIO_SAIx_Init+0x268>
  {
    return AUDIO_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <AUDIO_SAIx_Init+0x26a>
  }

  return AUDIO_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	2001ce88 	.word	0x2001ce88
 8005a18:	40015404 	.word	0x40015404
 8005a1c:	2001cf0c 	.word	0x2001cf0c
 8005a20:	40015424 	.word	0x40015424

08005a24 <HAL_SAI_MspInit>:
  * @brief  SAI MSP Init
  * @param  hsai : pointer to a SAI_HandleTypeDef structure
  * @retval None
  */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08e      	sub	sp, #56	; 0x38
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable SAI clock */
  __HAL_RCC_SAI1_CLK_ENABLE();
 8005a2c:	4b77      	ldr	r3, [pc, #476]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a30:	4a76      	ldr	r2, [pc, #472]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a36:	6613      	str	r3, [r2, #96]	; 0x60
 8005a38:	4b74      	ldr	r3, [pc, #464]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	6a3b      	ldr	r3, [r7, #32]

  if (hsai->Instance == SAI1_Block_A)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a71      	ldr	r2, [pc, #452]	; (8005c10 <HAL_SAI_MspInit+0x1ec>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d17f      	bne.n	8005b4e <HAL_SAI_MspInit+0x12a>
  {
    /* SAI pins configuration: FS, SCK, MCLK and SD pins */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a4e:	4b6f      	ldr	r3, [pc, #444]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	4a6e      	ldr	r2, [pc, #440]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a5a:	4b6c      	ldr	r3, [pc, #432]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a66:	4b69      	ldr	r3, [pc, #420]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6a:	4a68      	ldr	r2, [pc, #416]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a6c:	f043 0310 	orr.w	r3, r3, #16
 8005a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a72:	4b66      	ldr	r3, [pc, #408]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	61bb      	str	r3, [r7, #24]
 8005a7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a86:	2303      	movs	r3, #3
 8005a88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8005a8a:	230d      	movs	r3, #13
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8005a8e:	2304      	movs	r3, #4
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); /* SAI1_MCLK_A */
 8005a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a96:	4619      	mov	r1, r3
 8005a98:	485e      	ldr	r0, [pc, #376]	; (8005c14 <HAL_SAI_MspInit+0x1f0>)
 8005a9a:	f002 fc87 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin       = GPIO_PIN_4;
 8005a9e:	2310      	movs	r3, #16
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); /* SAI1_FS_A */
 8005aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	485a      	ldr	r0, [pc, #360]	; (8005c14 <HAL_SAI_MspInit+0x1f0>)
 8005aaa:	f002 fc7f 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin       = GPIO_PIN_10;
 8005aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); /* SAI1_SCK_A */
 8005ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4857      	ldr	r0, [pc, #348]	; (8005c18 <HAL_SAI_MspInit+0x1f4>)
 8005abc:	f002 fc76 	bl	80083ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); /* SAI1_SD_A */
 8005ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4852      	ldr	r0, [pc, #328]	; (8005c14 <HAL_SAI_MspInit+0x1f0>)
 8005acc:	f002 fc6e 	bl	80083ac <HAL_GPIO_Init>

    /* Configure the hDmaSaiTx handle parameters */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8005ad0:	4b4e      	ldr	r3, [pc, #312]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad4:	4a4d      	ldr	r2, [pc, #308]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005ad6:	f043 0302 	orr.w	r3, r3, #2
 8005ada:	6493      	str	r3, [r2, #72]	; 0x48
 8005adc:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	697b      	ldr	r3, [r7, #20]
    hDmaSaiTx.Init.Request             = DMA_REQUEST_1;
 8005ae8:	4b4c      	ldr	r3, [pc, #304]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	605a      	str	r2, [r3, #4]
    hDmaSaiTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005aee:	4b4b      	ldr	r3, [pc, #300]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005af0:	2210      	movs	r2, #16
 8005af2:	609a      	str	r2, [r3, #8]
    hDmaSaiTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005af4:	4b49      	ldr	r3, [pc, #292]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	60da      	str	r2, [r3, #12]
    hDmaSaiTx.Init.MemInc              = DMA_MINC_ENABLE;
 8005afa:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005afc:	2280      	movs	r2, #128	; 0x80
 8005afe:	611a      	str	r2, [r3, #16]
    hDmaSaiTx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b00:	4b46      	ldr	r3, [pc, #280]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b06:	615a      	str	r2, [r3, #20]
    hDmaSaiTx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8005b08:	4b44      	ldr	r3, [pc, #272]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b0e:	619a      	str	r2, [r3, #24]
    hDmaSaiTx.Init.Mode                = DMA_CIRCULAR;
 8005b10:	4b42      	ldr	r3, [pc, #264]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b12:	2220      	movs	r2, #32
 8005b14:	61da      	str	r2, [r3, #28]
    hDmaSaiTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005b16:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b1c:	621a      	str	r2, [r3, #32]
    hDmaSaiTx.Instance                 = DMA2_Channel1;
 8005b1e:	4b3f      	ldr	r3, [pc, #252]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b20:	4a3f      	ldr	r2, [pc, #252]	; (8005c20 <HAL_SAI_MspInit+0x1fc>)
 8005b22:	601a      	str	r2, [r3, #0]
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hDmaSaiTx);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3d      	ldr	r2, [pc, #244]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b28:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b2a:	4a3c      	ldr	r2, [pc, #240]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6293      	str	r3, [r2, #40]	; 0x28
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hDmaSaiTx);
 8005b30:	483a      	ldr	r0, [pc, #232]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b32:	f002 fadb 	bl	80080ec <HAL_DMA_DeInit>
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hDmaSaiTx);
 8005b36:	4839      	ldr	r0, [pc, #228]	; (8005c1c <HAL_SAI_MspInit+0x1f8>)
 8005b38:	f002 fa20 	bl	8007f7c <HAL_DMA_Init>
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2105      	movs	r1, #5
 8005b40:	2038      	movs	r0, #56	; 0x38
 8005b42:	f002 f844 	bl	8007bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005b46:	2038      	movs	r0, #56	; 0x38
 8005b48:	f002 f85d 	bl	8007c06 <HAL_NVIC_EnableIRQ>
    HAL_DMA_Init(&hDmaSaiRx);
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
  }
}
 8005b4c:	e059      	b.n	8005c02 <HAL_SAI_MspInit+0x1de>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b4e:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b52:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005b54:	f043 0310 	orr.w	r3, r3, #16
 8005b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b5a:	4b2c      	ldr	r3, [pc, #176]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005b66:	2302      	movs	r3, #2
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8005b72:	230d      	movs	r3, #13
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8005b76:	2308      	movs	r3, #8
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); /* SAI1_SD_B */
 8005b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4824      	ldr	r0, [pc, #144]	; (8005c14 <HAL_SAI_MspInit+0x1f0>)
 8005b82:	f002 fc13 	bl	80083ac <HAL_GPIO_Init>
    __HAL_RCC_DMA2_CLK_ENABLE();
 8005b86:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8a:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	6493      	str	r3, [r2, #72]	; 0x48
 8005b92:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <HAL_SAI_MspInit+0x1e8>)
 8005b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
    hDmaSaiRx.Init.Request             = DMA_REQUEST_1;
 8005b9e:	4b21      	ldr	r3, [pc, #132]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	605a      	str	r2, [r3, #4]
    hDmaSaiRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005ba4:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
    hDmaSaiRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005baa:	4b1e      	ldr	r3, [pc, #120]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	60da      	str	r2, [r3, #12]
    hDmaSaiRx.Init.MemInc              = DMA_MINC_ENABLE;
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	611a      	str	r2, [r3, #16]
    hDmaSaiRx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005bb6:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bbc:	615a      	str	r2, [r3, #20]
    hDmaSaiRx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8005bbe:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bc4:	619a      	str	r2, [r3, #24]
    hDmaSaiRx.Init.Mode                = DMA_CIRCULAR;
 8005bc6:	4b17      	ldr	r3, [pc, #92]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bc8:	2220      	movs	r2, #32
 8005bca:	61da      	str	r2, [r3, #28]
    hDmaSaiRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005bcc:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bd2:	621a      	str	r2, [r3, #32]
    hDmaSaiRx.Instance                 = DMA2_Channel2;
 8005bd4:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bd6:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <HAL_SAI_MspInit+0x204>)
 8005bd8:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(hsai, hdmarx, hDmaSaiRx);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a11      	ldr	r2, [pc, #68]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bde:	671a      	str	r2, [r3, #112]	; 0x70
 8005be0:	4a10      	ldr	r2, [pc, #64]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_DMA_DeInit(&hDmaSaiRx);
 8005be6:	480f      	ldr	r0, [pc, #60]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005be8:	f002 fa80 	bl	80080ec <HAL_DMA_DeInit>
    HAL_DMA_Init(&hDmaSaiRx);
 8005bec:	480d      	ldr	r0, [pc, #52]	; (8005c24 <HAL_SAI_MspInit+0x200>)
 8005bee:	f002 f9c5 	bl	8007f7c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2105      	movs	r1, #5
 8005bf6:	2039      	movs	r0, #57	; 0x39
 8005bf8:	f001 ffe9 	bl	8007bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8005bfc:	2039      	movs	r0, #57	; 0x39
 8005bfe:	f002 f802 	bl	8007c06 <HAL_NVIC_EnableIRQ>
}
 8005c02:	bf00      	nop
 8005c04:	3738      	adds	r7, #56	; 0x38
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40015404 	.word	0x40015404
 8005c14:	48001000 	.word	0x48001000
 8005c18:	48000400 	.word	0x48000400
 8005c1c:	2001cdf8 	.word	0x2001cdf8
 8005c20:	40020408 	.word	0x40020408
 8005c24:	2001ce40 	.word	0x2001ce40
 8005c28:	4002041c 	.word	0x4002041c

08005c2c <AUDIO_SAIPLLConfig>:
  * @note   The SAI PLL input clock must be configured in the user application.
  *         The SAI PLL configuration done within this function assumes that
  *         the SAI PLL input clock runs at 8 MHz.
  */
static uint8_t AUDIO_SAIPLLConfig(uint32_t Frequency)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b0a6      	sub	sp, #152	; 0x98
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  /* Retrieve actual RCC configuration */
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 8005c34:	f107 030c 	add.w	r3, r7, #12
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f006 f9e1 	bl	800c000 <HAL_RCCEx_GetPeriphCLKConfig>

  if ((Frequency == AUDIO_FREQUENCY_11K)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d009      	beq.n	8005c5c <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_22K)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f245 6222 	movw	r2, #22050	; 0x5622
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_44K))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10d      	bne.n	8005c78 <AUDIO_SAIPLLConfig+0x4c>
  {
    /* Configure PLLSAI prescalers */
    /* SAI clock config
    PLLSAI2_VCO= 8 Mhz * PLLSAI1N = 8 * 24 = VCO_192M
    SAI_CK_x = PLLSAI2_VCO/PLLSAI1P = 192/17 = 11.294 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8005c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c60:	60fb      	str	r3, [r7, #12]
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2N        = 24;
 8005c62:	2318      	movs	r3, #24
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2P        = 17;
 8005c66:	2311      	movs	r3, #17
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8005c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c6e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI2;
 8005c70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c74:	677b      	str	r3, [r7, #116]	; 0x74
 8005c76:	e00c      	b.n	8005c92 <AUDIO_SAIPLLConfig+0x66>
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    /* SAI clock config
    PLLSAI2_VCO= 8 Mhz * PLLSAI1N = 8 * 43 = VCO_344M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI2P = 344/7 = 49.142 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8005c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c7c:	60fb      	str	r3, [r7, #12]
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2N        = 43;
 8005c7e:	232b      	movs	r3, #43	; 0x2b
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2P        = 7;
 8005c82:	2307      	movs	r3, #7
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_ExCLKInitStruct.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8005c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c8a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI2;
 8005c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c90:	677b      	str	r3, [r7, #116]	; 0x74
  }

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 8005c92:	f107 030c 	add.w	r3, r7, #12
 8005c96:	4618      	mov	r0, r3
 8005c98:	f005 feb6 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <AUDIO_SAIPLLConfig+0x7a>
  {
    return AUDIO_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <AUDIO_SAIPLLConfig+0x7c>
  }

  return AUDIO_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3798      	adds	r7, #152	; 0x98
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8005cbe:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <BSP_IO_Init+0x78>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d128      	bne.n	8005d18 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8005cc6:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <BSP_IO_Init+0x7c>)
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	2084      	movs	r0, #132	; 0x84
 8005ccc:	4798      	blx	r3

    HAL_Delay(10);
 8005cce:	200a      	movs	r0, #10
 8005cd0:	f000 fe7e 	bl	80069d0 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8005cd4:	4b16      	ldr	r3, [pc, #88]	; (8005d30 <BSP_IO_Init+0x80>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2084      	movs	r0, #132	; 0x84
 8005cda:	4798      	blx	r3
 8005cdc:	4603      	mov	r3, r0
 8005cde:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8005ce0:	79bb      	ldrb	r3, [r7, #6]
 8005ce2:	2b7b      	cmp	r3, #123	; 0x7b
 8005ce4:	d002      	beq.n	8005cec <BSP_IO_Init+0x3c>
 8005ce6:	79bb      	ldrb	r3, [r7, #6]
 8005ce8:	2b79      	cmp	r3, #121	; 0x79
 8005cea:	d117      	bne.n	8005d1c <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <BSP_IO_Init+0x78>)
 8005cee:	4a10      	ldr	r2, [pc, #64]	; (8005d30 <BSP_IO_Init+0x80>)
 8005cf0:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <BSP_IO_Init+0x78>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <BSP_IO_Init+0x78>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2084      	movs	r0, #132	; 0x84
 8005d04:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <BSP_IO_Init+0x78>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4909      	ldr	r1, [pc, #36]	; (8005d34 <BSP_IO_Init+0x84>)
 8005d0e:	2084      	movs	r0, #132	; 0x84
 8005d10:	4798      	blx	r3

        ret = IO_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	71fb      	strb	r3, [r7, #7]
 8005d16:	e001      	b.n	8005d1c <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	2001cf90 	.word	0x2001cf90
 8005d2c:	2001c0e8 	.word	0x2001c0e8
 8005d30:	2001c0bc 	.word	0x2001c0bc
 8005d34:	000301ff 	.word	0x000301ff

08005d38 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <BSP_IO_ConfigPin+0x30>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <BSP_IO_ConfigPin+0x34>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	68f9      	ldr	r1, [r7, #12]
 8005d5a:	2084      	movs	r0, #132	; 0x84
 8005d5c:	4798      	blx	r3

  return IO_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	000301ff 	.word	0x000301ff
 8005d6c:	2001cf90 	.word	0x2001cf90

08005d70 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <BSP_IO_WritePin+0x30>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <BSP_IO_WritePin+0x34>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	68f9      	ldr	r1, [r7, #12]
 8005d92:	2084      	movs	r0, #132	; 0x84
 8005d94:	4798      	blx	r3

}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	000301ff 	.word	0x000301ff
 8005da4:	2001cf90 	.word	0x2001cf90

08005da8 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8005dac:	2001      	movs	r0, #1
 8005dae:	f000 f803 	bl	8005db8 <BSP_LCD_InitEx>
 8005db2:	4603      	mov	r3, r0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8005dc8:	4b33      	ldr	r3, [pc, #204]	; (8005e98 <BSP_LCD_InitEx+0xe0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
 8005dd4:	e05b      	b.n	8005e8e <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 8005dd6:	f7ff ff6b 	bl	8005cb0 <BSP_IO_Init>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 8005de0:	f7fe fcf2 	bl	80047c8 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8005de4:	f000 fb20 	bl	8006428 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8005de8:	2200      	movs	r2, #0
 8005dea:	2101      	movs	r1, #1
 8005dec:	482b      	ldr	r0, [pc, #172]	; (8005e9c <BSP_LCD_InitEx+0xe4>)
 8005dee:	f002 fd61 	bl	80088b4 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8005df2:	4b2b      	ldr	r3, [pc, #172]	; (8005ea0 <BSP_LCD_InitEx+0xe8>)
 8005df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005df8:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8005dfa:	4b29      	ldr	r3, [pc, #164]	; (8005ea0 <BSP_LCD_InitEx+0xe8>)
 8005dfc:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <BSP_LCD_InitEx+0xec>)
 8005dfe:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8005e00:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <BSP_LCD_InitEx+0xe8>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8005e06:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <BSP_LCD_InitEx+0xf0>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d108      	bne.n	8005e20 <BSP_LCD_InitEx+0x68>
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <BSP_LCD_InitEx+0xf4>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d104      	bne.n	8005e20 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005e16:	2201      	movs	r2, #1
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4825      	ldr	r0, [pc, #148]	; (8005eb0 <BSP_LCD_InitEx+0xf8>)
 8005e1c:	f002 fd4a 	bl	80088b4 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8005e20:	f000 f850 	bl	8005ec4 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8005e24:	4b23      	ldr	r3, [pc, #140]	; (8005eb4 <BSP_LCD_InitEx+0xfc>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b85      	cmp	r3, #133	; 0x85
 8005e2e:	d12e      	bne.n	8005e8e <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 8005e30:	4b21      	ldr	r3, [pc, #132]	; (8005eb8 <BSP_LCD_InitEx+0x100>)
 8005e32:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <BSP_LCD_InitEx+0xfc>)
 8005e34:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8005e36:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <BSP_LCD_InitEx+0x100>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2100      	movs	r1, #0
 8005e42:	202c      	movs	r0, #44	; 0x2c
 8005e44:	f7fe fa87 	bl	8004356 <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	e006      	b.n	8005e5c <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8005e4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005e52:	f7ff fa6d 	bl	8005330 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8005e62:	d3f4      	bcc.n	8005e4e <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f7fe f971 	bl	8004152 <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 8005e70:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <BSP_LCD_InitEx+0x104>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e002      	b.n	8005e7e <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8005e78:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <BSP_LCD_InitEx+0x104>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005e7e:	4810      	ldr	r0, [pc, #64]	; (8005ec0 <BSP_LCD_InitEx+0x108>)
 8005e80:	f000 f868 	bl	8005f54 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8005e84:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <BSP_LCD_InitEx+0xe0>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	2001cf94 	.word	0x2001cf94
 8005e9c:	48001c00 	.word	0x48001c00
 8005ea0:	2001cf9c 	.word	0x2001cf9c
 8005ea4:	2001c174 	.word	0x2001c174
 8005ea8:	2001cf98 	.word	0x2001cf98
 8005eac:	2001cf99 	.word	0x2001cf99
 8005eb0:	48002000 	.word	0x48002000
 8005eb4:	2001c134 	.word	0x2001c134
 8005eb8:	2001cfa8 	.word	0x2001cfa8
 8005ebc:	2001c18c 	.word	0x2001c18c
 8005ec0:	2001c184 	.word	0x2001c184

08005ec4 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8005ec8:	2100      	movs	r1, #0
 8005eca:	2004      	movs	r0, #4
 8005ecc:	f7ff ff50 	bl	8005d70 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8005ed0:	2005      	movs	r0, #5
 8005ed2:	f000 fd7d 	bl	80069d0 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	2004      	movs	r0, #4
 8005eda:	f7ff ff49 	bl	8005d70 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8005ede:	200a      	movs	r0, #10
 8005ee0:	f000 fd76 	bl	80069d0 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	2004      	movs	r0, #4
 8005ee8:	f7ff ff42 	bl	8005d70 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8005eec:	2014      	movs	r0, #20
 8005eee:	f000 fd6f 	bl	80069d0 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	2004      	movs	r0, #4
 8005ef6:	f7ff ff3b 	bl	8005d70 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8005efa:	200a      	movs	r0, #10
 8005efc:	f000 fd68 	bl	80069d0 <HAL_Delay>
}
 8005f00:	bf00      	nop
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8005f08:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <BSP_LCD_GetXSize+0x14>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	4798      	blx	r3
 8005f10:	4603      	mov	r3, r0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	2001cfa8 	.word	0x2001cfa8

08005f1c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 8005f20:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <BSP_LCD_GetYSize+0x14>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	4798      	blx	r3
 8005f28:	4603      	mov	r3, r0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	2001cfa8 	.word	0x2001cfa8

08005f34 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	4a03      	ldr	r2, [pc, #12]	; (8005f50 <BSP_LCD_SetTextColor+0x1c>)
 8005f42:	6013      	str	r3, [r2, #0]
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	2001cf9c 	.word	0x2001cf9c

08005f54 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8005f5c:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <BSP_LCD_SetFont+0x1c>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6093      	str	r3, [r2, #8]
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	2001cf9c 	.word	0x2001cf9c

08005f74 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	80fb      	strh	r3, [r7, #6]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	80bb      	strh	r3, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005f86:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <BSP_LCD_DisplayChar+0x50>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8005f90:	490c      	ldr	r1, [pc, #48]	; (8005fc4 <BSP_LCD_DisplayChar+0x50>)
 8005f92:	6889      	ldr	r1, [r1, #8]
 8005f94:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005f96:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <BSP_LCD_DisplayChar+0x50>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	889b      	ldrh	r3, [r3, #4]
 8005fa0:	3307      	adds	r3, #7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da00      	bge.n	8005fa8 <BSP_LCD_DisplayChar+0x34>
 8005fa6:	3307      	adds	r3, #7
 8005fa8:	10db      	asrs	r3, r3, #3
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8005fae:	441a      	add	r2, r3
 8005fb0:	88b9      	ldrh	r1, [r7, #4]
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fa93 	bl	80064e0 <DrawChar>
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2001cf9c 	.word	0x2001cf9c

08005fc8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60ba      	str	r2, [r7, #8]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	81fb      	strh	r3, [r7, #14]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	81bb      	strh	r3, [r7, #12]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	83fb      	strh	r3, [r7, #30]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 8005ff2:	e002      	b.n	8005ffa <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	617a      	str	r2, [r7, #20]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f6      	bne.n	8005ff4 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 8006006:	f7ff ff7d 	bl	8005f04 <BSP_LCD_GetXSize>
 800600a:	4602      	mov	r2, r0
 800600c:	4b33      	ldr	r3, [pc, #204]	; (80060dc <BSP_LCD_DisplayStringAt+0x114>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	889b      	ldrh	r3, [r3, #4]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d014      	beq.n	8006048 <BSP_LCD_DisplayStringAt+0x80>
 800601e:	2b03      	cmp	r3, #3
 8006020:	dc23      	bgt.n	800606a <BSP_LCD_DisplayStringAt+0xa2>
 8006022:	2b01      	cmp	r3, #1
 8006024:	d002      	beq.n	800602c <BSP_LCD_DisplayStringAt+0x64>
 8006026:	2b02      	cmp	r3, #2
 8006028:	d011      	beq.n	800604e <BSP_LCD_DisplayStringAt+0x86>
 800602a:	e01e      	b.n	800606a <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <BSP_LCD_DisplayStringAt+0x114>)
 8006034:	6892      	ldr	r2, [r2, #8]
 8006036:	8892      	ldrh	r2, [r2, #4]
 8006038:	fb02 f303 	mul.w	r3, r2, r3
 800603c:	085b      	lsrs	r3, r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	4413      	add	r3, r2
 8006044:	83fb      	strh	r3, [r7, #30]
      break;
 8006046:	e013      	b.n	8006070 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 8006048:	89fb      	ldrh	r3, [r7, #14]
 800604a:	83fb      	strh	r3, [r7, #30]
      break;
 800604c:	e010      	b.n	8006070 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	b29a      	uxth	r2, r3
 8006056:	4b21      	ldr	r3, [pc, #132]	; (80060dc <BSP_LCD_DisplayStringAt+0x114>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	889b      	ldrh	r3, [r3, #4]
 800605c:	fb12 f303 	smulbb	r3, r2, r3
 8006060:	b29a      	uxth	r2, r3
 8006062:	89fb      	ldrh	r3, [r7, #14]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	83fb      	strh	r3, [r7, #30]
      break;
 8006068:	e002      	b.n	8006070 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800606a:	89fb      	ldrh	r3, [r7, #14]
 800606c:	83fb      	strh	r3, [r7, #30]
      break;
 800606e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8006070:	8bfb      	ldrh	r3, [r7, #30]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <BSP_LCD_DisplayStringAt+0xb6>
 8006076:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800607a:	2b00      	cmp	r3, #0
 800607c:	da15      	bge.n	80060aa <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800607e:	2301      	movs	r3, #1
 8006080:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8006082:	e012      	b.n	80060aa <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	89b9      	ldrh	r1, [r7, #12]
 800608a:	8bfb      	ldrh	r3, [r7, #30]
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff ff71 	bl	8005f74 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <BSP_LCD_DisplayStringAt+0x114>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	889a      	ldrh	r2, [r3, #4]
 8006098:	8bfb      	ldrh	r3, [r7, #30]
 800609a:	4413      	add	r3, r2
 800609c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60bb      	str	r3, [r7, #8]
    i++;
 80060a4:	8bbb      	ldrh	r3, [r7, #28]
 80060a6:	3301      	adds	r3, #1
 80060a8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00f      	beq.n	80060d2 <BSP_LCD_DisplayStringAt+0x10a>
 80060b2:	f7ff ff27 	bl	8005f04 <BSP_LCD_GetXSize>
 80060b6:	4601      	mov	r1, r0
 80060b8:	8bbb      	ldrh	r3, [r7, #28]
 80060ba:	4a08      	ldr	r2, [pc, #32]	; (80060dc <BSP_LCD_DisplayStringAt+0x114>)
 80060bc:	6892      	ldr	r2, [r2, #8]
 80060be:	8892      	ldrh	r2, [r2, #4]
 80060c0:	fb02 f303 	mul.w	r3, r2, r3
 80060c4:	1acb      	subs	r3, r1, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	4a04      	ldr	r2, [pc, #16]	; (80060dc <BSP_LCD_DisplayStringAt+0x114>)
 80060ca:	6892      	ldr	r2, [r2, #8]
 80060cc:	8892      	ldrh	r2, [r2, #4]
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d2d8      	bcs.n	8006084 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 80060d2:	bf00      	nop
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	2001cf9c 	.word	0x2001cf9c

080060e0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	80fb      	strh	r3, [r7, #6]
 80060ea:	460b      	mov	r3, r1
 80060ec:	80bb      	strh	r3, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 80060f2:	4b08      	ldr	r3, [pc, #32]	; (8006114 <BSP_LCD_DrawPixel+0x34>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d006      	beq.n	800610a <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <BSP_LCD_DrawPixel+0x34>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	887a      	ldrh	r2, [r7, #2]
 8006104:	88b9      	ldrh	r1, [r7, #4]
 8006106:	88f8      	ldrh	r0, [r7, #6]
 8006108:	4798      	blx	r3
  }
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	2001cfa8 	.word	0x2001cfa8

08006118 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	80fb      	strh	r3, [r7, #6]
 8006122:	460b      	mov	r3, r1
 8006124:	80bb      	strh	r3, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800612e:	4b15      	ldr	r3, [pc, #84]	; (8006184 <BSP_LCD_DrawHLine+0x6c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8006138:	4b12      	ldr	r3, [pc, #72]	; (8006184 <BSP_LCD_DrawHLine+0x6c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a1c      	ldr	r4, [r3, #32]
 800613e:	4b12      	ldr	r3, [pc, #72]	; (8006188 <BSP_LCD_DrawHLine+0x70>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	b298      	uxth	r0, r3
 8006144:	887b      	ldrh	r3, [r7, #2]
 8006146:	88ba      	ldrh	r2, [r7, #4]
 8006148:	88f9      	ldrh	r1, [r7, #6]
 800614a:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800614c:	e015      	b.n	800617a <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e00e      	b.n	8006172 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	b29a      	uxth	r2, r3
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	4413      	add	r3, r2
 800615c:	b29b      	uxth	r3, r3
 800615e:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <BSP_LCD_DrawHLine+0x70>)
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	b292      	uxth	r2, r2
 8006164:	88b9      	ldrh	r1, [r7, #4]
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff ffba 	bl	80060e0 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	887b      	ldrh	r3, [r7, #2]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3ec      	bcc.n	8006154 <BSP_LCD_DrawHLine+0x3c>
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	bd90      	pop	{r4, r7, pc}
 8006182:	bf00      	nop
 8006184:	2001cfa8 	.word	0x2001cfa8
 8006188:	2001cf9c 	.word	0x2001cf9c

0800618c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	80fb      	strh	r3, [r7, #6]
 8006196:	460b      	mov	r3, r1
 8006198:	80bb      	strh	r3, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800619e:	887b      	ldrh	r3, [r7, #2]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	f1c3 0303 	rsb	r3, r3, #3
 80061a6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80061ac:	887b      	ldrh	r3, [r7, #2]
 80061ae:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 80061b0:	e09a      	b.n	80062e8 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	4413      	add	r3, r2
 80061ba:	b298      	uxth	r0, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	88ba      	ldrh	r2, [r7, #4]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4a4d      	ldr	r2, [pc, #308]	; (80062fc <BSP_LCD_DrawCircle+0x170>)
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	b292      	uxth	r2, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	f7ff ff87 	bl	80060e0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	b298      	uxth	r0, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	88ba      	ldrh	r2, [r7, #4]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4a45      	ldr	r2, [pc, #276]	; (80062fc <BSP_LCD_DrawCircle+0x170>)
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	b292      	uxth	r2, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	f7ff ff77 	bl	80060e0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	4413      	add	r3, r2
 80061fa:	b298      	uxth	r0, r3
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	88ba      	ldrh	r2, [r7, #4]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	b29b      	uxth	r3, r3
 8006206:	4a3d      	ldr	r2, [pc, #244]	; (80062fc <BSP_LCD_DrawCircle+0x170>)
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	b292      	uxth	r2, r2
 800620c:	4619      	mov	r1, r3
 800620e:	f7ff ff67 	bl	80060e0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	b29b      	uxth	r3, r3
 8006216:	88fa      	ldrh	r2, [r7, #6]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	b298      	uxth	r0, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	b29b      	uxth	r3, r3
 8006220:	88ba      	ldrh	r2, [r7, #4]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	b29b      	uxth	r3, r3
 8006226:	4a35      	ldr	r2, [pc, #212]	; (80062fc <BSP_LCD_DrawCircle+0x170>)
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	b292      	uxth	r2, r2
 800622c:	4619      	mov	r1, r3
 800622e:	f7ff ff57 	bl	80060e0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	b29a      	uxth	r2, r3
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	4413      	add	r3, r2
 800623a:	b298      	uxth	r0, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	b29a      	uxth	r2, r3
 8006240:	88bb      	ldrh	r3, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	4a2d      	ldr	r2, [pc, #180]	; (80062fc <BSP_LCD_DrawCircle+0x170>)
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	b292      	uxth	r2, r2
 800624c:	4619      	mov	r1, r3
 800624e:	f7ff ff47 	bl	80060e0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	b29b      	uxth	r3, r3
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	b298      	uxth	r0, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	b29a      	uxth	r2, r3
 8006260:	88bb      	ldrh	r3, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	b29b      	uxth	r3, r3
 8006266:	4a25      	ldr	r2, [pc, #148]	; (80062fc <BSP_LCD_DrawCircle+0x170>)
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	b292      	uxth	r2, r2
 800626c:	4619      	mov	r1, r3
 800626e:	f7ff ff37 	bl	80060e0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	b29a      	uxth	r2, r3
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	4413      	add	r3, r2
 800627a:	b298      	uxth	r0, r3
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	b29a      	uxth	r2, r3
 8006280:	88bb      	ldrh	r3, [r7, #4]
 8006282:	4413      	add	r3, r2
 8006284:	b29b      	uxth	r3, r3
 8006286:	4a1d      	ldr	r2, [pc, #116]	; (80062fc <BSP_LCD_DrawCircle+0x170>)
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	b292      	uxth	r2, r2
 800628c:	4619      	mov	r1, r3
 800628e:	f7ff ff27 	bl	80060e0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	b29b      	uxth	r3, r3
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	b298      	uxth	r0, r3
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	88bb      	ldrh	r3, [r7, #4]
 80062a2:	4413      	add	r3, r2
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	4a15      	ldr	r2, [pc, #84]	; (80062fc <BSP_LCD_DrawCircle+0x170>)
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	b292      	uxth	r2, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	f7ff ff17 	bl	80060e0 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80062b2:	4813      	ldr	r0, [pc, #76]	; (8006300 <BSP_LCD_DrawCircle+0x174>)
 80062b4:	f7ff fe4e 	bl	8005f54 <BSP_LCD_SetFont>

    if (decision < 0)
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da06      	bge.n	80062cc <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	009a      	lsls	r2, r3, #2
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	3306      	adds	r3, #6
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e00a      	b.n	80062e2 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	009a      	lsls	r2, r3, #2
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	4413      	add	r3, r2
 80062d8:	330a      	adds	r3, #10
 80062da:	617b      	str	r3, [r7, #20]
      current_y--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3b01      	subs	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	3301      	adds	r3, #1
 80062e6:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	f67f af60 	bls.w	80061b2 <BSP_LCD_DrawCircle+0x26>
  }
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	2001cf9c 	.word	0x2001cf9c
 8006300:	2001c184 	.word	0x2001c184

08006304 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	80fb      	strh	r3, [r7, #6]
 800630e:	460b      	mov	r3, r1
 8006310:	80bb      	strh	r3, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 8006316:	887b      	ldrh	r3, [r7, #2]
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	f1c3 0303 	rsb	r3, r3, #3
 800631e:	617b      	str	r3, [r7, #20]

  current_x = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8006328:	4b3e      	ldr	r3, [pc, #248]	; (8006424 <BSP_LCD_FillCircle+0x120>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fe00 	bl	8005f34 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 8006334:	e061      	b.n	80063fa <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d021      	beq.n	8006380 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	b29b      	uxth	r3, r3
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	b298      	uxth	r0, r3
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	b29a      	uxth	r2, r3
 800634a:	88bb      	ldrh	r3, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	b299      	uxth	r1, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	b29b      	uxth	r3, r3
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	f7ff fedd 	bl	8006118 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	b29b      	uxth	r3, r3
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	b298      	uxth	r0, r3
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	b29b      	uxth	r3, r3
 800636c:	88ba      	ldrh	r2, [r7, #4]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	b299      	uxth	r1, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	b29b      	uxth	r3, r3
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	b29b      	uxth	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	f7ff fecc 	bl	8006118 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d021      	beq.n	80063ca <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	b29b      	uxth	r3, r3
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	b298      	uxth	r0, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	b29b      	uxth	r3, r3
 8006394:	88ba      	ldrh	r2, [r7, #4]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	b299      	uxth	r1, r3
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	b29b      	uxth	r3, r3
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7ff feb8 	bl	8006118 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	88fa      	ldrh	r2, [r7, #6]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	b298      	uxth	r0, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	88bb      	ldrh	r3, [r7, #4]
 80063b8:	4413      	add	r3, r2
 80063ba:	b299      	uxth	r1, r3
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	f7ff fea7 	bl	8006118 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	da06      	bge.n	80063de <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	009a      	lsls	r2, r3, #2
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	4413      	add	r3, r2
 80063d8:	3306      	adds	r3, #6
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e00a      	b.n	80063f4 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	009a      	lsls	r2, r3, #2
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4413      	add	r3, r2
 80063ea:	330a      	adds	r3, #10
 80063ec:	617b      	str	r3, [r7, #20]
      current_y--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3301      	adds	r3, #1
 80063f8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d999      	bls.n	8006336 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <BSP_LCD_FillCircle+0x120>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff fd93 	bl	8005f34 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800640e:	887a      	ldrh	r2, [r7, #2]
 8006410:	88b9      	ldrh	r1, [r7, #4]
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff feb9 	bl	800618c <BSP_LCD_DrawCircle>
}
 800641a:	bf00      	nop
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	2001cf9c 	.word	0x2001cf9c

08006428 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800642e:	4b29      	ldr	r3, [pc, #164]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 8006430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006432:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 8006434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800643a:	4b26      	ldr	r3, [pc, #152]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 800643c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006446:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 800644c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006452:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645a:	607b      	str	r3, [r7, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800645e:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 8006460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006462:	4a1c      	ldr	r2, [pc, #112]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 8006464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800646a:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <BSP_LCD_MspInit+0xac>)
 800646c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8006476:	f7ff fc1b 	bl	8005cb0 <BSP_IO_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 8006480:	f7fe f9a2 	bl	80047c8 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8006484:	2101      	movs	r1, #1
 8006486:	2004      	movs	r0, #4
 8006488:	f7ff fc56 	bl	8005d38 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800648c:	2301      	movs	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006490:	2301      	movs	r3, #1
 8006492:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 80064a0:	f107 030c 	add.w	r3, r7, #12
 80064a4:	4619      	mov	r1, r3
 80064a6:	480c      	ldr	r0, [pc, #48]	; (80064d8 <BSP_LCD_MspInit+0xb0>)
 80064a8:	f001 ff80 	bl	80083ac <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 80064ac:	2301      	movs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 80064b0:	2301      	movs	r3, #1
 80064b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	4619      	mov	r1, r3
 80064c6:	4805      	ldr	r0, [pc, #20]	; (80064dc <BSP_LCD_MspInit+0xb4>)
 80064c8:	f001 ff70 	bl	80083ac <HAL_GPIO_Init>
}
 80064cc:	bf00      	nop
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40021000 	.word	0x40021000
 80064d8:	48002000 	.word	0x48002000
 80064dc:	48001c00 	.word	0x48001c00

080064e0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	603a      	str	r2, [r7, #0]
 80064ea:	80fb      	strh	r3, [r7, #6]
 80064ec:	460b      	mov	r3, r1
 80064ee:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 80064f8:	4b45      	ldr	r3, [pc, #276]	; (8006610 <DrawChar+0x130>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	88db      	ldrh	r3, [r3, #6]
 80064fe:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8006500:	4b43      	ldr	r3, [pc, #268]	; (8006610 <DrawChar+0x130>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	889b      	ldrh	r3, [r3, #4]
 8006506:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 8006508:	8a3b      	ldrh	r3, [r7, #16]
 800650a:	3307      	adds	r3, #7
 800650c:	2b00      	cmp	r3, #0
 800650e:	da00      	bge.n	8006512 <DrawChar+0x32>
 8006510:	3307      	adds	r3, #7
 8006512:	10db      	asrs	r3, r3, #3
 8006514:	b2db      	uxtb	r3, r3
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	b2da      	uxtb	r2, r3
 800651a:	8a3b      	ldrh	r3, [r7, #16]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
 8006526:	e069      	b.n	80065fc <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8006528:	8a3b      	ldrh	r3, [r7, #16]
 800652a:	3307      	adds	r3, #7
 800652c:	2b00      	cmp	r3, #0
 800652e:	da00      	bge.n	8006532 <DrawChar+0x52>
 8006530:	3307      	adds	r3, #7
 8006532:	10db      	asrs	r3, r3, #3
 8006534:	461a      	mov	r2, r3
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	fb02 f303 	mul.w	r3, r2, r3
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	4413      	add	r3, r2
 8006540:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8006542:	8a3b      	ldrh	r3, [r7, #16]
 8006544:	3307      	adds	r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	da00      	bge.n	800654c <DrawChar+0x6c>
 800654a:	3307      	adds	r3, #7
 800654c:	10db      	asrs	r3, r3, #3
 800654e:	2b01      	cmp	r3, #1
 8006550:	d002      	beq.n	8006558 <DrawChar+0x78>
 8006552:	2b02      	cmp	r3, #2
 8006554:	d004      	beq.n	8006560 <DrawChar+0x80>
 8006556:	e00c      	b.n	8006572 <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	617b      	str	r3, [r7, #20]
        break;
 800655e:	e016      	b.n	800658e <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	3201      	adds	r2, #1
 800656a:	7812      	ldrb	r2, [r2, #0]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
        break;
 8006570:	e00d      	b.n	800658e <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	041a      	lsls	r2, r3, #16
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	3301      	adds	r3, #1
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	4313      	orrs	r3, r2
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	3202      	adds	r2, #2
 8006586:	7812      	ldrb	r2, [r2, #0]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
        break;
 800658c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800658e:	2300      	movs	r3, #0
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e029      	b.n	80065e8 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 8006594:	8a3a      	ldrh	r2, [r7, #16]
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	4413      	add	r3, r2
 800659e:	3b01      	subs	r3, #1
 80065a0:	2201      	movs	r2, #1
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	4413      	add	r3, r2
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	4a15      	ldr	r2, [pc, #84]	; (8006610 <DrawChar+0x130>)
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	b292      	uxth	r2, r2
 80065c0:	88b9      	ldrh	r1, [r7, #4]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff fd8c 	bl	80060e0 <BSP_LCD_DrawPixel>
 80065c8:	e00b      	b.n	80065e2 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	4413      	add	r3, r2
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <DrawChar+0x130>)
 80065d6:	6852      	ldr	r2, [r2, #4]
 80065d8:	b292      	uxth	r2, r2
 80065da:	88b9      	ldrh	r1, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fd7f 	bl	80060e0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	8a3b      	ldrh	r3, [r7, #16]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3d1      	bcc.n	8006594 <DrawChar+0xb4>
      }
    }
    Ypos++;
 80065f0:	88bb      	ldrh	r3, [r7, #4]
 80065f2:	3301      	adds	r3, #1
 80065f4:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	3301      	adds	r3, #1
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	8a7b      	ldrh	r3, [r7, #18]
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	429a      	cmp	r2, r3
 8006602:	d391      	bcc.n	8006528 <DrawChar+0x48>
  }
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	2001cf9c 	.word	0x2001cf9c

08006614 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	80fb      	strh	r3, [r7, #6]
 800661e:	460b      	mov	r3, r1
 8006620:	80bb      	strh	r3, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800662e:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <BSP_TS_InitEx+0x9c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <BSP_TS_InitEx+0xa0>)
 8006634:	7812      	ldrb	r2, [r2, #0]
 8006636:	b292      	uxth	r2, r2
 8006638:	4610      	mov	r0, r2
 800663a:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800663c:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <BSP_TS_InitEx+0x9c>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2070      	movs	r0, #112	; 0x70
 8006642:	4798      	blx	r3
 8006644:	4603      	mov	r3, r0
 8006646:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 8006648:	89bb      	ldrh	r3, [r7, #12]
 800664a:	2bcd      	cmp	r3, #205	; 0xcd
 800664c:	d12a      	bne.n	80066a4 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800664e:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <BSP_TS_InitEx+0xa4>)
 8006650:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <BSP_TS_InitEx+0x9c>)
 8006652:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 8006654:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <BSP_TS_InitEx+0xa0>)
 8006656:	2270      	movs	r2, #112	; 0x70
 8006658:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d106      	bne.n	800666e <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 8006660:	4b16      	ldr	r3, [pc, #88]	; (80066bc <BSP_TS_InitEx+0xa8>)
 8006662:	2206      	movs	r2, #6
 8006664:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 8006666:	4b16      	ldr	r3, [pc, #88]	; (80066c0 <BSP_TS_InitEx+0xac>)
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	e005      	b.n	800667a <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800666e:	4b13      	ldr	r3, [pc, #76]	; (80066bc <BSP_TS_InitEx+0xa8>)
 8006670:	220c      	movs	r2, #12
 8006672:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 8006674:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <BSP_TS_InitEx+0xac>)
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d111      	bne.n	80066a4 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 8006680:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <BSP_TS_InitEx+0xa4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	4a0b      	ldr	r2, [pc, #44]	; (80066b4 <BSP_TS_InitEx+0xa0>)
 8006688:	7812      	ldrb	r2, [r2, #0]
 800668a:	b292      	uxth	r2, r2
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <BSP_TS_InitEx+0xa4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	4a07      	ldr	r2, [pc, #28]	; (80066b4 <BSP_TS_InitEx+0xa0>)
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	b292      	uxth	r2, r2
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3

      return TS_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e000      	b.n	80066a6 <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 80066a4:	2303      	movs	r3, #3


}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	2001c094 	.word	0x2001c094
 80066b4:	2001cfb0 	.word	0x2001cfb0
 80066b8:	2001cfac 	.word	0x2001cfac
 80066bc:	2001c18d 	.word	0x2001c18d
 80066c0:	2001c18e 	.word	0x2001c18e

080066c4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b089      	sub	sp, #36	; 0x24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 80066d0:	4b80      	ldr	r3, [pc, #512]	; (80068d4 <BSP_TS_GetState+0x210>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	4a80      	ldr	r2, [pc, #512]	; (80068d8 <BSP_TS_GetState+0x214>)
 80066d8:	7812      	ldrb	r2, [r2, #0]
 80066da:	b292      	uxth	r2, r2
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	4603      	mov	r3, r0
 80066e2:	461a      	mov	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80ec 	beq.w	80068ca <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	e0e1      	b.n	80068bc <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80066f8:	4b76      	ldr	r3, [pc, #472]	; (80068d4 <BSP_TS_GetState+0x210>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	4a76      	ldr	r2, [pc, #472]	; (80068d8 <BSP_TS_GetState+0x214>)
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	b290      	uxth	r0, r2
 8006704:	f107 0110 	add.w	r1, r7, #16
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	0052      	lsls	r2, r2, #1
 800670c:	188c      	adds	r4, r1, r2
 800670e:	f107 010c 	add.w	r1, r7, #12
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	0052      	lsls	r2, r2, #1
 8006716:	440a      	add	r2, r1
 8006718:	4621      	mov	r1, r4
 800671a:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800671c:	4b6f      	ldr	r3, [pc, #444]	; (80068dc <BSP_TS_GetState+0x218>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d019      	beq.n	800675c <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	3320      	adds	r3, #32
 800672e:	443b      	add	r3, r7
 8006730:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006734:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	3320      	adds	r3, #32
 800673c:	443b      	add	r3, r7
 800673e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	3320      	adds	r3, #32
 8006748:	443b      	add	r3, r7
 800674a:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	3320      	adds	r3, #32
 8006754:	443b      	add	r3, r7
 8006756:	8b3a      	ldrh	r2, [r7, #24]
 8006758:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800675c:	4b5f      	ldr	r3, [pc, #380]	; (80068dc <BSP_TS_GetState+0x218>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	3320      	adds	r3, #32
 800676e:	443b      	add	r3, r7
 8006770:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006774:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006778:	b29a      	uxth	r2, r3
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	3320      	adds	r3, #32
 8006780:	443b      	add	r3, r7
 8006782:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 8006786:	4b55      	ldr	r3, [pc, #340]	; (80068dc <BSP_TS_GetState+0x218>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	3320      	adds	r3, #32
 8006798:	443b      	add	r3, r7
 800679a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800679e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	3320      	adds	r3, #32
 80067aa:	443b      	add	r3, r7
 80067ac:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	3320      	adds	r3, #32
 80067b6:	443b      	add	r3, r7
 80067b8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80067bc:	4619      	mov	r1, r3
 80067be:	4a48      	ldr	r2, [pc, #288]	; (80068e0 <BSP_TS_GetState+0x21c>)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c6:	4299      	cmp	r1, r3
 80067c8:	d90d      	bls.n	80067e6 <BSP_TS_GetState+0x122>
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	3320      	adds	r3, #32
 80067d0:	443b      	add	r3, r7
 80067d2:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80067d6:	4942      	ldr	r1, [pc, #264]	; (80068e0 <BSP_TS_GetState+0x21c>)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	e00c      	b.n	8006800 <BSP_TS_GetState+0x13c>
 80067e6:	4a3e      	ldr	r2, [pc, #248]	; (80068e0 <BSP_TS_GetState+0x21c>)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	3320      	adds	r3, #32
 80067f6:	443b      	add	r3, r7
 80067f8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	b29b      	uxth	r3, r3
 8006800:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	3320      	adds	r3, #32
 8006808:	443b      	add	r3, r7
 800680a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800680e:	4619      	mov	r1, r3
 8006810:	4a34      	ldr	r2, [pc, #208]	; (80068e4 <BSP_TS_GetState+0x220>)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006818:	4299      	cmp	r1, r3
 800681a:	d90d      	bls.n	8006838 <BSP_TS_GetState+0x174>
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	3320      	adds	r3, #32
 8006822:	443b      	add	r3, r7
 8006824:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006828:	492e      	ldr	r1, [pc, #184]	; (80068e4 <BSP_TS_GetState+0x220>)
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006830:	b29b      	uxth	r3, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	b29b      	uxth	r3, r3
 8006836:	e00c      	b.n	8006852 <BSP_TS_GetState+0x18e>
 8006838:	4a2a      	ldr	r2, [pc, #168]	; (80068e4 <BSP_TS_GetState+0x220>)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006840:	b29a      	uxth	r2, r3
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	3320      	adds	r3, #32
 8006848:	443b      	add	r3, r7
 800684a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	b29b      	uxth	r3, r3
 8006852:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8006854:	8afa      	ldrh	r2, [r7, #22]
 8006856:	8abb      	ldrh	r3, [r7, #20]
 8006858:	4413      	add	r3, r2
 800685a:	2b05      	cmp	r3, #5
 800685c:	dd15      	ble.n	800688a <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	3320      	adds	r3, #32
 8006864:	443b      	add	r3, r7
 8006866:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800686a:	4619      	mov	r1, r3
 800686c:	4a1c      	ldr	r2, [pc, #112]	; (80068e0 <BSP_TS_GetState+0x21c>)
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	3320      	adds	r3, #32
 800687a:	443b      	add	r3, r7
 800687c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006880:	4619      	mov	r1, r3
 8006882:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <BSP_TS_GetState+0x220>)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800688a:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <BSP_TS_GetState+0x21c>)
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006892:	b299      	uxth	r1, r3
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	4413      	add	r3, r2
 800689c:	460a      	mov	r2, r1
 800689e:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80068a0:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <BSP_TS_GetState+0x220>)
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a8:	b299      	uxth	r1, r3
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	4413      	add	r3, r2
 80068b2:	460a      	mov	r2, r1
 80068b4:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3301      	adds	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	f4ff af17 	bcc.w	80066f8 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80068ca:	7efb      	ldrb	r3, [r7, #27]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3724      	adds	r7, #36	; 0x24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd90      	pop	{r4, r7, pc}
 80068d4:	2001cfac 	.word	0x2001cfac
 80068d8:	2001cfb0 	.word	0x2001cfb0
 80068dc:	2001c18d 	.word	0x2001c18d
 80068e0:	2001cfb4 	.word	0x2001cfb4
 80068e4:	2001cfbc 	.word	0x2001cfbc

080068e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068f2:	2003      	movs	r0, #3
 80068f4:	f001 f960 	bl	8007bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068f8:	2000      	movs	r0, #0
 80068fa:	f000 f80d 	bl	8006918 <HAL_InitTick>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	71fb      	strb	r3, [r7, #7]
 8006908:	e001      	b.n	800690e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800690a:	f7fa fe9f 	bl	800164c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800690e:	79fb      	ldrb	r3, [r7, #7]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <HAL_InitTick+0x6c>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d023      	beq.n	8006974 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800692c:	4b16      	ldr	r3, [pc, #88]	; (8006988 <HAL_InitTick+0x70>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	4b14      	ldr	r3, [pc, #80]	; (8006984 <HAL_InitTick+0x6c>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	4619      	mov	r1, r3
 8006936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800693a:	fbb3 f3f1 	udiv	r3, r3, r1
 800693e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006942:	4618      	mov	r0, r3
 8006944:	f001 f97b 	bl	8007c3e <HAL_SYSTICK_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10f      	bne.n	800696e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b0f      	cmp	r3, #15
 8006952:	d809      	bhi.n	8006968 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006954:	2200      	movs	r2, #0
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800695c:	f001 f937 	bl	8007bce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <HAL_InitTick+0x74>)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e007      	b.n	8006978 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	e004      	b.n	8006978 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]
 8006972:	e001      	b.n	8006978 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	2001c194 	.word	0x2001c194
 8006988:	2001c05c 	.word	0x2001c05c
 800698c:	2001c190 	.word	0x2001c190

08006990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <HAL_IncTick+0x20>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <HAL_IncTick+0x24>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4413      	add	r3, r2
 80069a0:	4a04      	ldr	r2, [pc, #16]	; (80069b4 <HAL_IncTick+0x24>)
 80069a2:	6013      	str	r3, [r2, #0]
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	2001c194 	.word	0x2001c194
 80069b4:	2001cfc4 	.word	0x2001cfc4

080069b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return uwTick;
 80069bc:	4b03      	ldr	r3, [pc, #12]	; (80069cc <HAL_GetTick+0x14>)
 80069be:	681b      	ldr	r3, [r3, #0]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	2001cfc4 	.word	0x2001cfc4

080069d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069d8:	f7ff ffee 	bl	80069b8 <HAL_GetTick>
 80069dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e8:	d005      	beq.n	80069f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <HAL_Delay+0x44>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069f6:	bf00      	nop
 80069f8:	f7ff ffde 	bl	80069b8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d8f7      	bhi.n	80069f8 <HAL_Delay+0x28>
  {
  }
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	2001c194 	.word	0x2001c194

08006a18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	609a      	str	r2, [r3, #8]
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	609a      	str	r2, [r3, #8]
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3360      	adds	r3, #96	; 0x60
 8006a92:	461a      	mov	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <LL_ADC_SetOffset+0x44>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	03fff000 	.word	0x03fff000

08006ac8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3360      	adds	r3, #96	; 0x60
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3360      	adds	r3, #96	; 0x60
 8006b04:	461a      	mov	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	615a      	str	r2, [r3, #20]
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3330      	adds	r3, #48	; 0x30
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0a1b      	lsrs	r3, r3, #8
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	f003 030c 	and.w	r3, r3, #12
 8006b6c:	4413      	add	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	211f      	movs	r1, #31
 8006b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b80:	43db      	mvns	r3, r3
 8006b82:	401a      	ands	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	0e9b      	lsrs	r3, r3, #26
 8006b88:	f003 011f 	and.w	r1, r3, #31
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	fa01 f303 	lsl.w	r3, r1, r3
 8006b96:	431a      	orrs	r2, r3
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	0e5b      	lsrs	r3, r3, #25
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	4413      	add	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	0d1b      	lsrs	r3, r3, #20
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2107      	movs	r1, #7
 8006bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	401a      	ands	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	0d1b      	lsrs	r3, r3, #20
 8006be2:	f003 031f 	and.w	r3, r3, #31
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bec:	431a      	orrs	r2, r3
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f003 0318 	and.w	r3, r3, #24
 8006c22:	4908      	ldr	r1, [pc, #32]	; (8006c44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006c24:	40d9      	lsrs	r1, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	400b      	ands	r3, r1
 8006c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	0007ffff 	.word	0x0007ffff

08006c48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6093      	str	r3, [r2, #8]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c80:	d101      	bne.n	8006c86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ca8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd0:	d101      	bne.n	8006cd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <LL_ADC_IsEnabled+0x18>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <LL_ADC_IsEnabled+0x1a>
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d101      	bne.n	8006d22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d101      	bne.n	8006d48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006d58:	b590      	push	{r4, r7, lr}
 8006d5a:	b089      	sub	sp, #36	; 0x24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e139      	b.n	8006fe6 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fa fc87 	bl	8001694 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff ff67 	bl	8006c6c <LL_ADC_IsDeepPowerDownEnabled>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff ff4d 	bl	8006c48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff ff82 	bl	8006cbc <LL_ADC_IsInternalRegulatorEnabled>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d115      	bne.n	8006dea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff ff66 	bl	8006c94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006dc8:	4b89      	ldr	r3, [pc, #548]	; (8006ff0 <HAL_ADC_Init+0x298>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	099b      	lsrs	r3, r3, #6
 8006dce:	4a89      	ldr	r2, [pc, #548]	; (8006ff4 <HAL_ADC_Init+0x29c>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	099b      	lsrs	r3, r3, #6
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ddc:	e002      	b.n	8006de4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f9      	bne.n	8006dde <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff ff64 	bl	8006cbc <LL_ADC_IsInternalRegulatorEnabled>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	f043 0210 	orr.w	r2, r3, #16
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	f043 0201 	orr.w	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff ff75 	bl	8006d0a <LL_ADC_REG_IsConversionOngoing>
 8006e20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e26:	f003 0310 	and.w	r3, r3, #16
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f040 80d2 	bne.w	8006fd4 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f040 80ce 	bne.w	8006fd4 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006e40:	f043 0202 	orr.w	r2, r3, #2
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff ff49 	bl	8006ce4 <LL_ADC_IsEnabled>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d115      	bne.n	8006e84 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e58:	4867      	ldr	r0, [pc, #412]	; (8006ff8 <HAL_ADC_Init+0x2a0>)
 8006e5a:	f7ff ff43 	bl	8006ce4 <LL_ADC_IsEnabled>
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4866      	ldr	r0, [pc, #408]	; (8006ffc <HAL_ADC_Init+0x2a4>)
 8006e62:	f7ff ff3f 	bl	8006ce4 <LL_ADC_IsEnabled>
 8006e66:	4603      	mov	r3, r0
 8006e68:	431c      	orrs	r4, r3
 8006e6a:	4865      	ldr	r0, [pc, #404]	; (8007000 <HAL_ADC_Init+0x2a8>)
 8006e6c:	f7ff ff3a 	bl	8006ce4 <LL_ADC_IsEnabled>
 8006e70:	4603      	mov	r3, r0
 8006e72:	4323      	orrs	r3, r4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4861      	ldr	r0, [pc, #388]	; (8007004 <HAL_ADC_Init+0x2ac>)
 8006e80:	f7ff fdca 	bl	8006a18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7e5b      	ldrb	r3, [r3, #25]
 8006e88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e8e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006e94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006e9a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ea2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	045b      	lsls	r3, r3, #17
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	4b49      	ldr	r3, [pc, #292]	; (8007008 <HAL_ADC_Init+0x2b0>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	69b9      	ldr	r1, [r7, #24]
 8006eec:	430b      	orrs	r3, r1
 8006eee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff ff08 	bl	8006d0a <LL_ADC_REG_IsConversionOngoing>
 8006efa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff ff15 	bl	8006d30 <LL_ADC_INJ_IsConversionOngoing>
 8006f06:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d140      	bne.n	8006f90 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d13d      	bne.n	8006f90 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	7e1b      	ldrb	r3, [r3, #24]
 8006f1c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f1e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f26:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f36:	f023 0306 	bic.w	r3, r3, #6
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	69b9      	ldr	r1, [r7, #24]
 8006f40:	430b      	orrs	r3, r1
 8006f42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d118      	bne.n	8006f80 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f58:	f023 0304 	bic.w	r3, r3, #4
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f64:	4311      	orrs	r1, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006f6a:	4311      	orrs	r1, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f70:	430a      	orrs	r2, r1
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0201 	orr.w	r2, r2, #1
 8006f7c:	611a      	str	r2, [r3, #16]
 8006f7e:	e007      	b.n	8006f90 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691a      	ldr	r2, [r3, #16]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0201 	bic.w	r2, r2, #1
 8006f8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d10c      	bne.n	8006fb2 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	f023 010f 	bic.w	r1, r3, #15
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	1e5a      	subs	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
 8006fb0:	e007      	b.n	8006fc2 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 020f 	bic.w	r2, r2, #15
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	f043 0201 	orr.w	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	659a      	str	r2, [r3, #88]	; 0x58
 8006fd2:	e007      	b.n	8006fe4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd8:	f043 0210 	orr.w	r2, r3, #16
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3724      	adds	r7, #36	; 0x24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2001c05c 	.word	0x2001c05c
 8006ff4:	053e2d63 	.word	0x053e2d63
 8006ff8:	50040000 	.word	0x50040000
 8006ffc:	50040100 	.word	0x50040100
 8007000:	50040200 	.word	0x50040200
 8007004:	50040300 	.word	0x50040300
 8007008:	fff0c007 	.word	0xfff0c007

0800700c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0b6      	sub	sp, #216	; 0xd8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_ADC_ConfigChannel+0x22>
 800702a:	2302      	movs	r3, #2
 800702c:	e3e3      	b.n	80077f6 <HAL_ADC_ConfigChannel+0x7ea>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fe65 	bl	8006d0a <LL_ADC_REG_IsConversionOngoing>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	f040 83c4 	bne.w	80077d0 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b05      	cmp	r3, #5
 800704e:	d824      	bhi.n	800709a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	3b02      	subs	r3, #2
 8007056:	2b03      	cmp	r3, #3
 8007058:	d81b      	bhi.n	8007092 <HAL_ADC_ConfigChannel+0x86>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <HAL_ADC_ConfigChannel+0x54>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007071 	.word	0x08007071
 8007064:	08007079 	.word	0x08007079
 8007068:	08007081 	.word	0x08007081
 800706c:	08007089 	.word	0x08007089
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	220c      	movs	r2, #12
 8007074:	605a      	str	r2, [r3, #4]
          break;
 8007076:	e011      	b.n	800709c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2212      	movs	r2, #18
 800707c:	605a      	str	r2, [r3, #4]
          break;
 800707e:	e00d      	b.n	800709c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2218      	movs	r2, #24
 8007084:	605a      	str	r2, [r3, #4]
          break;
 8007086:	e009      	b.n	800709c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800708e:	605a      	str	r2, [r3, #4]
          break;
 8007090:	e004      	b.n	800709c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2206      	movs	r2, #6
 8007096:	605a      	str	r2, [r3, #4]
          break;
 8007098:	e000      	b.n	800709c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800709a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	6859      	ldr	r1, [r3, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	461a      	mov	r2, r3
 80070aa:	f7ff fd51 	bl	8006b50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fe29 	bl	8006d0a <LL_ADC_REG_IsConversionOngoing>
 80070b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fe35 	bl	8006d30 <LL_ADC_INJ_IsConversionOngoing>
 80070c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80070ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 81c1 	bne.w	8007456 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80070d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 81bc 	bne.w	8007456 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e6:	d10f      	bne.n	8007108 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2200      	movs	r2, #0
 80070f2:	4619      	mov	r1, r3
 80070f4:	f7ff fd58 	bl	8006ba8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fd12 	bl	8006b2a <LL_ADC_SetSamplingTimeCommonConfig>
 8007106:	e00e      	b.n	8007126 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	461a      	mov	r2, r3
 8007116:	f7ff fd47 	bl	8006ba8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff fd02 	bl	8006b2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	695a      	ldr	r2, [r3, #20]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	08db      	lsrs	r3, r3, #3
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b04      	cmp	r3, #4
 8007146:	d00a      	beq.n	800715e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	6919      	ldr	r1, [r3, #16]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007158:	f7ff fc92 	bl	8006a80 <LL_ADC_SetOffset>
 800715c:	e17b      	b.n	8007456 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff fcaf 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 800716a:	4603      	mov	r3, r0
 800716c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <HAL_ADC_ConfigChannel+0x17e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2100      	movs	r1, #0
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff fca4 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 8007180:	4603      	mov	r3, r0
 8007182:	0e9b      	lsrs	r3, r3, #26
 8007184:	f003 021f 	and.w	r2, r3, #31
 8007188:	e01e      	b.n	80071c8 <HAL_ADC_ConfigChannel+0x1bc>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2100      	movs	r1, #0
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff fc99 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 8007196:	4603      	mov	r3, r0
 8007198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071a0:	fa93 f3a3 	rbit	r3, r3
 80071a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80071a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80071b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80071b8:	2320      	movs	r3, #32
 80071ba:	e004      	b.n	80071c6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80071bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071c0:	fab3 f383 	clz	r3, r3
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d105      	bne.n	80071e0 <HAL_ADC_ConfigChannel+0x1d4>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	0e9b      	lsrs	r3, r3, #26
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	e018      	b.n	8007212 <HAL_ADC_ConfigChannel+0x206>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071ec:	fa93 f3a3 	rbit	r3, r3
 80071f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80071f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80071fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8007204:	2320      	movs	r3, #32
 8007206:	e004      	b.n	8007212 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8007208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800720c:	fab3 f383 	clz	r3, r3
 8007210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007212:	429a      	cmp	r2, r3
 8007214:	d106      	bne.n	8007224 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fc68 	bl	8006af4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fc4c 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 8007230:	4603      	mov	r3, r0
 8007232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10a      	bne.n	8007250 <HAL_ADC_ConfigChannel+0x244>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2101      	movs	r1, #1
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff fc41 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 8007246:	4603      	mov	r3, r0
 8007248:	0e9b      	lsrs	r3, r3, #26
 800724a:	f003 021f 	and.w	r2, r3, #31
 800724e:	e01e      	b.n	800728e <HAL_ADC_ConfigChannel+0x282>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2101      	movs	r1, #1
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fc36 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 800725c:	4603      	mov	r3, r0
 800725e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007266:	fa93 f3a3 	rbit	r3, r3
 800726a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800726e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007272:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800727e:	2320      	movs	r3, #32
 8007280:	e004      	b.n	800728c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8007282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007286:	fab3 f383 	clz	r3, r3
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <HAL_ADC_ConfigChannel+0x29a>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	0e9b      	lsrs	r3, r3, #26
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	e018      	b.n	80072d8 <HAL_ADC_ConfigChannel+0x2cc>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072b2:	fa93 f3a3 	rbit	r3, r3
 80072b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80072ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80072c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80072ca:	2320      	movs	r3, #32
 80072cc:	e004      	b.n	80072d8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80072ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072d2:	fab3 f383 	clz	r3, r3
 80072d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80072d8:	429a      	cmp	r2, r3
 80072da:	d106      	bne.n	80072ea <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2200      	movs	r2, #0
 80072e2:	2101      	movs	r1, #1
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff fc05 	bl	8006af4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2102      	movs	r1, #2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff fbe9 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <HAL_ADC_ConfigChannel+0x30a>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2102      	movs	r1, #2
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fbde 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 800730c:	4603      	mov	r3, r0
 800730e:	0e9b      	lsrs	r3, r3, #26
 8007310:	f003 021f 	and.w	r2, r3, #31
 8007314:	e01e      	b.n	8007354 <HAL_ADC_ConfigChannel+0x348>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2102      	movs	r1, #2
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fbd3 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 8007322:	4603      	mov	r3, r0
 8007324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800732c:	fa93 f3a3 	rbit	r3, r3
 8007330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800733c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8007344:	2320      	movs	r3, #32
 8007346:	e004      	b.n	8007352 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8007348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800734c:	fab3 f383 	clz	r3, r3
 8007350:	b2db      	uxtb	r3, r3
 8007352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800735c:	2b00      	cmp	r3, #0
 800735e:	d105      	bne.n	800736c <HAL_ADC_ConfigChannel+0x360>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	0e9b      	lsrs	r3, r3, #26
 8007366:	f003 031f 	and.w	r3, r3, #31
 800736a:	e016      	b.n	800739a <HAL_ADC_ConfigChannel+0x38e>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007378:	fa93 f3a3 	rbit	r3, r3
 800737c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800737e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800738c:	2320      	movs	r3, #32
 800738e:	e004      	b.n	800739a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8007390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007394:	fab3 f383 	clz	r3, r3
 8007398:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800739a:	429a      	cmp	r2, r3
 800739c:	d106      	bne.n	80073ac <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	2102      	movs	r1, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fba4 	bl	8006af4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2103      	movs	r1, #3
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff fb88 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <HAL_ADC_ConfigChannel+0x3cc>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2103      	movs	r1, #3
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff fb7d 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 80073ce:	4603      	mov	r3, r0
 80073d0:	0e9b      	lsrs	r3, r3, #26
 80073d2:	f003 021f 	and.w	r2, r3, #31
 80073d6:	e017      	b.n	8007408 <HAL_ADC_ConfigChannel+0x3fc>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2103      	movs	r1, #3
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff fb72 	bl	8006ac8 <LL_ADC_GetOffsetChannel>
 80073e4:	4603      	mov	r3, r0
 80073e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ea:	fa93 f3a3 	rbit	r3, r3
 80073ee:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80073f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073f2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80073f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80073fa:	2320      	movs	r3, #32
 80073fc:	e003      	b.n	8007406 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80073fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007400:	fab3 f383 	clz	r3, r3
 8007404:	b2db      	uxtb	r3, r3
 8007406:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007410:	2b00      	cmp	r3, #0
 8007412:	d105      	bne.n	8007420 <HAL_ADC_ConfigChannel+0x414>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	0e9b      	lsrs	r3, r3, #26
 800741a:	f003 031f 	and.w	r3, r3, #31
 800741e:	e011      	b.n	8007444 <HAL_ADC_ConfigChannel+0x438>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007428:	fa93 f3a3 	rbit	r3, r3
 800742c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800742e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007430:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8007438:	2320      	movs	r3, #32
 800743a:	e003      	b.n	8007444 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800743c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743e:	fab3 f383 	clz	r3, r3
 8007442:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007444:	429a      	cmp	r2, r3
 8007446:	d106      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2200      	movs	r2, #0
 800744e:	2103      	movs	r1, #3
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fb4f 	bl	8006af4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fc42 	bl	8006ce4 <LL_ADC_IsEnabled>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 8140 	bne.w	80076e8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	461a      	mov	r2, r3
 8007476:	f7ff fbc3 	bl	8006c00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	4a8f      	ldr	r2, [pc, #572]	; (80076bc <HAL_ADC_ConfigChannel+0x6b0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	f040 8131 	bne.w	80076e8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10b      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x4a2>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	0e9b      	lsrs	r3, r3, #26
 800749c:	3301      	adds	r3, #1
 800749e:	f003 031f 	and.w	r3, r3, #31
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	bf94      	ite	ls
 80074a6:	2301      	movls	r3, #1
 80074a8:	2300      	movhi	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	e019      	b.n	80074e2 <HAL_ADC_ConfigChannel+0x4d6>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074b6:	fa93 f3a3 	rbit	r3, r3
 80074ba:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80074bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074be:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80074c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80074c6:	2320      	movs	r3, #32
 80074c8:	e003      	b.n	80074d2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80074ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074cc:	fab3 f383 	clz	r3, r3
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3301      	adds	r3, #1
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2b09      	cmp	r3, #9
 80074da:	bf94      	ite	ls
 80074dc:	2301      	movls	r3, #1
 80074de:	2300      	movhi	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d079      	beq.n	80075da <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d107      	bne.n	8007502 <HAL_ADC_ConfigChannel+0x4f6>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	0e9b      	lsrs	r3, r3, #26
 80074f8:	3301      	adds	r3, #1
 80074fa:	069b      	lsls	r3, r3, #26
 80074fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007500:	e015      	b.n	800752e <HAL_ADC_ConfigChannel+0x522>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750a:	fa93 f3a3 	rbit	r3, r3
 800750e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007512:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800751a:	2320      	movs	r3, #32
 800751c:	e003      	b.n	8007526 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800751e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007520:	fab3 f383 	clz	r3, r3
 8007524:	b2db      	uxtb	r3, r3
 8007526:	3301      	adds	r3, #1
 8007528:	069b      	lsls	r3, r3, #26
 800752a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007536:	2b00      	cmp	r3, #0
 8007538:	d109      	bne.n	800754e <HAL_ADC_ConfigChannel+0x542>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	0e9b      	lsrs	r3, r3, #26
 8007540:	3301      	adds	r3, #1
 8007542:	f003 031f 	and.w	r3, r3, #31
 8007546:	2101      	movs	r1, #1
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	e017      	b.n	800757e <HAL_ADC_ConfigChannel+0x572>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007556:	fa93 f3a3 	rbit	r3, r3
 800755a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800755c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8007566:	2320      	movs	r3, #32
 8007568:	e003      	b.n	8007572 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800756a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800756c:	fab3 f383 	clz	r3, r3
 8007570:	b2db      	uxtb	r3, r3
 8007572:	3301      	adds	r3, #1
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	2101      	movs	r1, #1
 800757a:	fa01 f303 	lsl.w	r3, r1, r3
 800757e:	ea42 0103 	orr.w	r1, r2, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <HAL_ADC_ConfigChannel+0x598>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	0e9b      	lsrs	r3, r3, #26
 8007594:	3301      	adds	r3, #1
 8007596:	f003 021f 	and.w	r2, r3, #31
 800759a:	4613      	mov	r3, r2
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	4413      	add	r3, r2
 80075a0:	051b      	lsls	r3, r3, #20
 80075a2:	e018      	b.n	80075d6 <HAL_ADC_ConfigChannel+0x5ca>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	fa93 f3a3 	rbit	r3, r3
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80075b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80075bc:	2320      	movs	r3, #32
 80075be:	e003      	b.n	80075c8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80075c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c2:	fab3 f383 	clz	r3, r3
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	3301      	adds	r3, #1
 80075ca:	f003 021f 	and.w	r2, r3, #31
 80075ce:	4613      	mov	r3, r2
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4413      	add	r3, r2
 80075d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075d6:	430b      	orrs	r3, r1
 80075d8:	e081      	b.n	80076de <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d107      	bne.n	80075f6 <HAL_ADC_ConfigChannel+0x5ea>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	0e9b      	lsrs	r3, r3, #26
 80075ec:	3301      	adds	r3, #1
 80075ee:	069b      	lsls	r3, r3, #26
 80075f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075f4:	e015      	b.n	8007622 <HAL_ADC_ConfigChannel+0x616>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	fa93 f3a3 	rbit	r3, r3
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800760e:	2320      	movs	r3, #32
 8007610:	e003      	b.n	800761a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	fab3 f383 	clz	r3, r3
 8007618:	b2db      	uxtb	r3, r3
 800761a:	3301      	adds	r3, #1
 800761c:	069b      	lsls	r3, r3, #26
 800761e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762a:	2b00      	cmp	r3, #0
 800762c:	d109      	bne.n	8007642 <HAL_ADC_ConfigChannel+0x636>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	0e9b      	lsrs	r3, r3, #26
 8007634:	3301      	adds	r3, #1
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	2101      	movs	r1, #1
 800763c:	fa01 f303 	lsl.w	r3, r1, r3
 8007640:	e017      	b.n	8007672 <HAL_ADC_ConfigChannel+0x666>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	fa93 f3a3 	rbit	r3, r3
 800764e:	61fb      	str	r3, [r7, #28]
  return result;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800765a:	2320      	movs	r3, #32
 800765c:	e003      	b.n	8007666 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	fab3 f383 	clz	r3, r3
 8007664:	b2db      	uxtb	r3, r3
 8007666:	3301      	adds	r3, #1
 8007668:	f003 031f 	and.w	r3, r3, #31
 800766c:	2101      	movs	r1, #1
 800766e:	fa01 f303 	lsl.w	r3, r1, r3
 8007672:	ea42 0103 	orr.w	r1, r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10d      	bne.n	800769e <HAL_ADC_ConfigChannel+0x692>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	0e9b      	lsrs	r3, r3, #26
 8007688:	3301      	adds	r3, #1
 800768a:	f003 021f 	and.w	r2, r3, #31
 800768e:	4613      	mov	r3, r2
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	4413      	add	r3, r2
 8007694:	3b1e      	subs	r3, #30
 8007696:	051b      	lsls	r3, r3, #20
 8007698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800769c:	e01e      	b.n	80076dc <HAL_ADC_ConfigChannel+0x6d0>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	fa93 f3a3 	rbit	r3, r3
 80076aa:	613b      	str	r3, [r7, #16]
  return result;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d104      	bne.n	80076c0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80076b6:	2320      	movs	r3, #32
 80076b8:	e006      	b.n	80076c8 <HAL_ADC_ConfigChannel+0x6bc>
 80076ba:	bf00      	nop
 80076bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	fab3 f383 	clz	r3, r3
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	3301      	adds	r3, #1
 80076ca:	f003 021f 	and.w	r2, r3, #31
 80076ce:	4613      	mov	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	3b1e      	subs	r3, #30
 80076d6:	051b      	lsls	r3, r3, #20
 80076d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076dc:	430b      	orrs	r3, r1
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	6892      	ldr	r2, [r2, #8]
 80076e2:	4619      	mov	r1, r3
 80076e4:	f7ff fa60 	bl	8006ba8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4b44      	ldr	r3, [pc, #272]	; (8007800 <HAL_ADC_ConfigChannel+0x7f4>)
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d07a      	beq.n	80077ea <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80076f4:	4843      	ldr	r0, [pc, #268]	; (8007804 <HAL_ADC_ConfigChannel+0x7f8>)
 80076f6:	f7ff f9b5 	bl	8006a64 <LL_ADC_GetCommonPathInternalCh>
 80076fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a41      	ldr	r2, [pc, #260]	; (8007808 <HAL_ADC_ConfigChannel+0x7fc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d12c      	bne.n	8007762 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800770c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d126      	bne.n	8007762 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a3c      	ldr	r2, [pc, #240]	; (800780c <HAL_ADC_ConfigChannel+0x800>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d004      	beq.n	8007728 <HAL_ADC_ConfigChannel+0x71c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a3b      	ldr	r2, [pc, #236]	; (8007810 <HAL_ADC_ConfigChannel+0x804>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d15d      	bne.n	80077e4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800772c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007730:	4619      	mov	r1, r3
 8007732:	4834      	ldr	r0, [pc, #208]	; (8007804 <HAL_ADC_ConfigChannel+0x7f8>)
 8007734:	f7ff f983 	bl	8006a3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007738:	4b36      	ldr	r3, [pc, #216]	; (8007814 <HAL_ADC_ConfigChannel+0x808>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	099b      	lsrs	r3, r3, #6
 800773e:	4a36      	ldr	r2, [pc, #216]	; (8007818 <HAL_ADC_ConfigChannel+0x80c>)
 8007740:	fba2 2303 	umull	r2, r3, r2, r3
 8007744:	099b      	lsrs	r3, r3, #6
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	4613      	mov	r3, r2
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007752:	e002      	b.n	800775a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3b01      	subs	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f9      	bne.n	8007754 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007760:	e040      	b.n	80077e4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2d      	ldr	r2, [pc, #180]	; (800781c <HAL_ADC_ConfigChannel+0x810>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d118      	bne.n	800779e <HAL_ADC_ConfigChannel+0x792>
 800776c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d112      	bne.n	800779e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a23      	ldr	r2, [pc, #140]	; (800780c <HAL_ADC_ConfigChannel+0x800>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_ADC_ConfigChannel+0x780>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a22      	ldr	r2, [pc, #136]	; (8007810 <HAL_ADC_ConfigChannel+0x804>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d12d      	bne.n	80077e8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800778c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007794:	4619      	mov	r1, r3
 8007796:	481b      	ldr	r0, [pc, #108]	; (8007804 <HAL_ADC_ConfigChannel+0x7f8>)
 8007798:	f7ff f951 	bl	8006a3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800779c:	e024      	b.n	80077e8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1f      	ldr	r2, [pc, #124]	; (8007820 <HAL_ADC_ConfigChannel+0x814>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d120      	bne.n	80077ea <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80077a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d11a      	bne.n	80077ea <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a14      	ldr	r2, [pc, #80]	; (800780c <HAL_ADC_ConfigChannel+0x800>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d115      	bne.n	80077ea <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077c6:	4619      	mov	r1, r3
 80077c8:	480e      	ldr	r0, [pc, #56]	; (8007804 <HAL_ADC_ConfigChannel+0x7f8>)
 80077ca:	f7ff f938 	bl	8006a3e <LL_ADC_SetCommonPathInternalCh>
 80077ce:	e00c      	b.n	80077ea <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d4:	f043 0220 	orr.w	r2, r3, #32
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80077e2:	e002      	b.n	80077ea <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80077e4:	bf00      	nop
 80077e6:	e000      	b.n	80077ea <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80077f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	37d8      	adds	r7, #216	; 0xd8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	80080000 	.word	0x80080000
 8007804:	50040300 	.word	0x50040300
 8007808:	c7520000 	.word	0xc7520000
 800780c:	50040000 	.word	0x50040000
 8007810:	50040200 	.word	0x50040200
 8007814:	2001c05c 	.word	0x2001c05c
 8007818:	053e2d63 	.word	0x053e2d63
 800781c:	cb840000 	.word	0xcb840000
 8007820:	80000001 	.word	0x80000001

08007824 <LL_ADC_IsEnabled>:
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <LL_ADC_IsEnabled+0x18>
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <LL_ADC_IsEnabled+0x1a>
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <LL_ADC_REG_IsConversionOngoing>:
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b04      	cmp	r3, #4
 800785c:	d101      	bne.n	8007862 <LL_ADC_REG_IsConversionOngoing+0x18>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007870:	b590      	push	{r4, r7, lr}
 8007872:	b0a1      	sub	sp, #132	; 0x84
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800788a:	2302      	movs	r3, #2
 800788c:	e093      	b.n	80079b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007896:	2300      	movs	r3, #0
 8007898:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800789a:	2300      	movs	r3, #0
 800789c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a47      	ldr	r2, [pc, #284]	; (80079c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d102      	bne.n	80078ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80078a8:	4b46      	ldr	r3, [pc, #280]	; (80079c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e001      	b.n	80078b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10b      	bne.n	80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078bc:	f043 0220 	orr.w	r2, r3, #32
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e072      	b.n	80079b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff ffb9 	bl	800784a <LL_ADC_REG_IsConversionOngoing>
 80078d8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff ffb3 	bl	800784a <LL_ADC_REG_IsConversionOngoing>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d154      	bne.n	8007994 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80078ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d151      	bne.n	8007994 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80078f0:	4b35      	ldr	r3, [pc, #212]	; (80079c8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80078f2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d02c      	beq.n	8007956 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80078fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	6859      	ldr	r1, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800790e:	035b      	lsls	r3, r3, #13
 8007910:	430b      	orrs	r3, r1
 8007912:	431a      	orrs	r2, r3
 8007914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007916:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007918:	4829      	ldr	r0, [pc, #164]	; (80079c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800791a:	f7ff ff83 	bl	8007824 <LL_ADC_IsEnabled>
 800791e:	4604      	mov	r4, r0
 8007920:	4828      	ldr	r0, [pc, #160]	; (80079c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8007922:	f7ff ff7f 	bl	8007824 <LL_ADC_IsEnabled>
 8007926:	4603      	mov	r3, r0
 8007928:	431c      	orrs	r4, r3
 800792a:	4828      	ldr	r0, [pc, #160]	; (80079cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800792c:	f7ff ff7a 	bl	8007824 <LL_ADC_IsEnabled>
 8007930:	4603      	mov	r3, r0
 8007932:	4323      	orrs	r3, r4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d137      	bne.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007940:	f023 030f 	bic.w	r3, r3, #15
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	6811      	ldr	r1, [r2, #0]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	6892      	ldr	r2, [r2, #8]
 800794c:	430a      	orrs	r2, r1
 800794e:	431a      	orrs	r2, r3
 8007950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007952:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007954:	e028      	b.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800795e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007960:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007962:	4817      	ldr	r0, [pc, #92]	; (80079c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8007964:	f7ff ff5e 	bl	8007824 <LL_ADC_IsEnabled>
 8007968:	4604      	mov	r4, r0
 800796a:	4816      	ldr	r0, [pc, #88]	; (80079c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800796c:	f7ff ff5a 	bl	8007824 <LL_ADC_IsEnabled>
 8007970:	4603      	mov	r3, r0
 8007972:	431c      	orrs	r4, r3
 8007974:	4815      	ldr	r0, [pc, #84]	; (80079cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8007976:	f7ff ff55 	bl	8007824 <LL_ADC_IsEnabled>
 800797a:	4603      	mov	r3, r0
 800797c:	4323      	orrs	r3, r4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d112      	bne.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800798a:	f023 030f 	bic.w	r3, r3, #15
 800798e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007990:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007992:	e009      	b.n	80079a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007998:	f043 0220 	orr.w	r2, r3, #32
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80079a6:	e000      	b.n	80079aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80079a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80079b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3784      	adds	r7, #132	; 0x84
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd90      	pop	{r4, r7, pc}
 80079be:	bf00      	nop
 80079c0:	50040000 	.word	0x50040000
 80079c4:	50040100 	.word	0x50040100
 80079c8:	50040300 	.word	0x50040300
 80079cc:	50040200 	.word	0x50040200

080079d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079e0:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <__NVIC_SetPriorityGrouping+0x44>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079ec:	4013      	ands	r3, r2
 80079ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a02:	4a04      	ldr	r2, [pc, #16]	; (8007a14 <__NVIC_SetPriorityGrouping+0x44>)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	60d3      	str	r3, [r2, #12]
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	e000ed00 	.word	0xe000ed00

08007a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a1c:	4b04      	ldr	r3, [pc, #16]	; (8007a30 <__NVIC_GetPriorityGrouping+0x18>)
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	0a1b      	lsrs	r3, r3, #8
 8007a22:	f003 0307 	and.w	r3, r3, #7
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	e000ed00 	.word	0xe000ed00

08007a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	db0b      	blt.n	8007a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	f003 021f 	and.w	r2, r3, #31
 8007a4c:	4907      	ldr	r1, [pc, #28]	; (8007a6c <__NVIC_EnableIRQ+0x38>)
 8007a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a52:	095b      	lsrs	r3, r3, #5
 8007a54:	2001      	movs	r0, #1
 8007a56:	fa00 f202 	lsl.w	r2, r0, r2
 8007a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	e000e100 	.word	0xe000e100

08007a70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	db12      	blt.n	8007aa8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	f003 021f 	and.w	r2, r3, #31
 8007a88:	490a      	ldr	r1, [pc, #40]	; (8007ab4 <__NVIC_DisableIRQ+0x44>)
 8007a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	2001      	movs	r0, #1
 8007a92:	fa00 f202 	lsl.w	r2, r0, r2
 8007a96:	3320      	adds	r3, #32
 8007a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a9c:	f3bf 8f4f 	dsb	sy
}
 8007aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007aa2:	f3bf 8f6f 	isb	sy
}
 8007aa6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	e000e100 	.word	0xe000e100

08007ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	db0a      	blt.n	8007ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	490c      	ldr	r1, [pc, #48]	; (8007b04 <__NVIC_SetPriority+0x4c>)
 8007ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad6:	0112      	lsls	r2, r2, #4
 8007ad8:	b2d2      	uxtb	r2, r2
 8007ada:	440b      	add	r3, r1
 8007adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ae0:	e00a      	b.n	8007af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	4908      	ldr	r1, [pc, #32]	; (8007b08 <__NVIC_SetPriority+0x50>)
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	3b04      	subs	r3, #4
 8007af0:	0112      	lsls	r2, r2, #4
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	440b      	add	r3, r1
 8007af6:	761a      	strb	r2, [r3, #24]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	e000e100 	.word	0xe000e100
 8007b08:	e000ed00 	.word	0xe000ed00

08007b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b089      	sub	sp, #36	; 0x24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f1c3 0307 	rsb	r3, r3, #7
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	bf28      	it	cs
 8007b2a:	2304      	movcs	r3, #4
 8007b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	3304      	adds	r3, #4
 8007b32:	2b06      	cmp	r3, #6
 8007b34:	d902      	bls.n	8007b3c <NVIC_EncodePriority+0x30>
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	3b03      	subs	r3, #3
 8007b3a:	e000      	b.n	8007b3e <NVIC_EncodePriority+0x32>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4a:	43da      	mvns	r2, r3
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	401a      	ands	r2, r3
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b5e:	43d9      	mvns	r1, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b64:	4313      	orrs	r3, r2
         );
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3724      	adds	r7, #36	; 0x24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b84:	d301      	bcc.n	8007b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b86:	2301      	movs	r3, #1
 8007b88:	e00f      	b.n	8007baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b8a:	4a0a      	ldr	r2, [pc, #40]	; (8007bb4 <SysTick_Config+0x40>)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b92:	210f      	movs	r1, #15
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b98:	f7ff ff8e 	bl	8007ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <SysTick_Config+0x40>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ba2:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <SysTick_Config+0x40>)
 8007ba4:	2207      	movs	r2, #7
 8007ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	e000e010 	.word	0xe000e010

08007bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff ff05 	bl	80079d0 <__NVIC_SetPriorityGrouping>
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007be0:	f7ff ff1a 	bl	8007a18 <__NVIC_GetPriorityGrouping>
 8007be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	6978      	ldr	r0, [r7, #20]
 8007bec:	f7ff ff8e 	bl	8007b0c <NVIC_EncodePriority>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff ff5d 	bl	8007ab8 <__NVIC_SetPriority>
}
 8007bfe:	bf00      	nop
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff ff0d 	bl	8007a34 <__NVIC_EnableIRQ>
}
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	4603      	mov	r3, r0
 8007c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff ff1d 	bl	8007a70 <__NVIC_DisableIRQ>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff ff94 	bl	8007b74 <SysTick_Config>
 8007c4c:	4603      	mov	r3, r0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e075      	b.n	8007d56 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d106      	bne.n	8007c84 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7f9 fdd8 	bl	8001834 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c9a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	4b2a      	ldr	r3, [pc, #168]	; (8007d60 <HAL_DCMI_Init+0x108>)
 8007cb6:	400b      	ands	r3, r1
 8007cb8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6819      	ldr	r1, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8007cce:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8007cda:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8007ce6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8007cf2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8007cfe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b10      	cmp	r3, #16
 8007d0e:	d112      	bne.n	8007d36 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7f1b      	ldrb	r3, [r3, #28]
 8007d14:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7f5b      	ldrb	r3, [r3, #29]
 8007d1a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007d1c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7f9b      	ldrb	r3, [r3, #30]
 8007d22:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8007d24:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7fdb      	ldrb	r3, [r3, #31]
 8007d2c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8007d32:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8007d34:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 021f 	orr.w	r2, r2, #31
 8007d44:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	ffe0f007 	.word	0xffe0f007

08007d64 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e0ac      	b.n	8007ed0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 f8b2 	bl	8007ee4 <DFSDM_GetChannelFromInstance>
 8007d80:	4603      	mov	r3, r0
 8007d82:	4a55      	ldr	r2, [pc, #340]	; (8007ed8 <HAL_DFSDM_ChannelInit+0x174>)
 8007d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e09f      	b.n	8007ed0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7f9 fdcf 	bl	8001934 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8007d96:	4b51      	ldr	r3, [pc, #324]	; (8007edc <HAL_DFSDM_ChannelInit+0x178>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	4a4f      	ldr	r2, [pc, #316]	; (8007edc <HAL_DFSDM_ChannelInit+0x178>)
 8007d9e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8007da0:	4b4e      	ldr	r3, [pc, #312]	; (8007edc <HAL_DFSDM_ChannelInit+0x178>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d125      	bne.n	8007df4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007da8:	4b4d      	ldr	r3, [pc, #308]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a4c      	ldr	r2, [pc, #304]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007db2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007db4:	4b4a      	ldr	r3, [pc, #296]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	4948      	ldr	r1, [pc, #288]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007dc2:	4b47      	ldr	r3, [pc, #284]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a46      	ldr	r2, [pc, #280]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dc8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8007dcc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	791b      	ldrb	r3, [r3, #4]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d108      	bne.n	8007de8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8007dd6:	4b42      	ldr	r3, [pc, #264]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	041b      	lsls	r3, r3, #16
 8007de2:	493f      	ldr	r1, [pc, #252]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007de8:	4b3d      	ldr	r3, [pc, #244]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a3c      	ldr	r2, [pc, #240]	; (8007ee0 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007df2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007e02:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007e12:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007e18:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 020f 	bic.w	r2, r2, #15
 8007e30:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6819      	ldr	r1, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007e40:	431a      	orrs	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8007e58:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6899      	ldr	r1, [r3, #8]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f002 0207 	and.w	r2, r2, #7
 8007e84:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6859      	ldr	r1, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007eb0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 f810 	bl	8007ee4 <DFSDM_GetChannelFromInstance>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	4904      	ldr	r1, [pc, #16]	; (8007ed8 <HAL_DFSDM_ChannelInit+0x174>)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	2001cfcc 	.word	0x2001cfcc
 8007edc:	2001cfc8 	.word	0x2001cfc8
 8007ee0:	40016000 	.word	0x40016000

08007ee4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a1c      	ldr	r2, [pc, #112]	; (8007f60 <DFSDM_GetChannelFromInstance+0x7c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d102      	bne.n	8007efa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e02b      	b.n	8007f52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a19      	ldr	r2, [pc, #100]	; (8007f64 <DFSDM_GetChannelFromInstance+0x80>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d102      	bne.n	8007f08 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8007f02:	2301      	movs	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	e024      	b.n	8007f52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <DFSDM_GetChannelFromInstance+0x84>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d102      	bne.n	8007f16 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007f10:	2302      	movs	r3, #2
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e01d      	b.n	8007f52 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a14      	ldr	r2, [pc, #80]	; (8007f6c <DFSDM_GetChannelFromInstance+0x88>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d102      	bne.n	8007f24 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8007f1e:	2304      	movs	r3, #4
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e016      	b.n	8007f52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a12      	ldr	r2, [pc, #72]	; (8007f70 <DFSDM_GetChannelFromInstance+0x8c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d102      	bne.n	8007f32 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8007f2c:	2305      	movs	r3, #5
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	e00f      	b.n	8007f52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a0f      	ldr	r2, [pc, #60]	; (8007f74 <DFSDM_GetChannelFromInstance+0x90>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d102      	bne.n	8007f40 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8007f3a:	2306      	movs	r3, #6
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	e008      	b.n	8007f52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a0d      	ldr	r2, [pc, #52]	; (8007f78 <DFSDM_GetChannelFromInstance+0x94>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d102      	bne.n	8007f4e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8007f48:	2307      	movs	r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	e001      	b.n	8007f52 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007f52:	68fb      	ldr	r3, [r7, #12]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	40016000 	.word	0x40016000
 8007f64:	40016020 	.word	0x40016020
 8007f68:	40016040 	.word	0x40016040
 8007f6c:	40016080 	.word	0x40016080
 8007f70:	400160a0 	.word	0x400160a0
 8007f74:	400160c0 	.word	0x400160c0
 8007f78:	400160e0 	.word	0x400160e0

08007f7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e098      	b.n	80080c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	4b4d      	ldr	r3, [pc, #308]	; (80080cc <HAL_DMA_Init+0x150>)
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d80f      	bhi.n	8007fba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	4b4b      	ldr	r3, [pc, #300]	; (80080d0 <HAL_DMA_Init+0x154>)
 8007fa2:	4413      	add	r3, r2
 8007fa4:	4a4b      	ldr	r2, [pc, #300]	; (80080d4 <HAL_DMA_Init+0x158>)
 8007fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007faa:	091b      	lsrs	r3, r3, #4
 8007fac:	009a      	lsls	r2, r3, #2
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a48      	ldr	r2, [pc, #288]	; (80080d8 <HAL_DMA_Init+0x15c>)
 8007fb6:	641a      	str	r2, [r3, #64]	; 0x40
 8007fb8:	e00e      	b.n	8007fd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4b46      	ldr	r3, [pc, #280]	; (80080dc <HAL_DMA_Init+0x160>)
 8007fc2:	4413      	add	r3, r2
 8007fc4:	4a43      	ldr	r2, [pc, #268]	; (80080d4 <HAL_DMA_Init+0x158>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	091b      	lsrs	r3, r3, #4
 8007fcc:	009a      	lsls	r2, r3, #2
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a42      	ldr	r2, [pc, #264]	; (80080e0 <HAL_DMA_Init+0x164>)
 8007fd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008032:	d039      	beq.n	80080a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	4a27      	ldr	r2, [pc, #156]	; (80080d8 <HAL_DMA_Init+0x15c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d11a      	bne.n	8008074 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800803e:	4b29      	ldr	r3, [pc, #164]	; (80080e4 <HAL_DMA_Init+0x168>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008046:	f003 031c 	and.w	r3, r3, #28
 800804a:	210f      	movs	r1, #15
 800804c:	fa01 f303 	lsl.w	r3, r1, r3
 8008050:	43db      	mvns	r3, r3
 8008052:	4924      	ldr	r1, [pc, #144]	; (80080e4 <HAL_DMA_Init+0x168>)
 8008054:	4013      	ands	r3, r2
 8008056:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008058:	4b22      	ldr	r3, [pc, #136]	; (80080e4 <HAL_DMA_Init+0x168>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6859      	ldr	r1, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	f003 031c 	and.w	r3, r3, #28
 8008068:	fa01 f303 	lsl.w	r3, r1, r3
 800806c:	491d      	ldr	r1, [pc, #116]	; (80080e4 <HAL_DMA_Init+0x168>)
 800806e:	4313      	orrs	r3, r2
 8008070:	600b      	str	r3, [r1, #0]
 8008072:	e019      	b.n	80080a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008074:	4b1c      	ldr	r3, [pc, #112]	; (80080e8 <HAL_DMA_Init+0x16c>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807c:	f003 031c 	and.w	r3, r3, #28
 8008080:	210f      	movs	r1, #15
 8008082:	fa01 f303 	lsl.w	r3, r1, r3
 8008086:	43db      	mvns	r3, r3
 8008088:	4917      	ldr	r1, [pc, #92]	; (80080e8 <HAL_DMA_Init+0x16c>)
 800808a:	4013      	ands	r3, r2
 800808c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800808e:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <HAL_DMA_Init+0x16c>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6859      	ldr	r1, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	f003 031c 	and.w	r3, r3, #28
 800809e:	fa01 f303 	lsl.w	r3, r1, r3
 80080a2:	4911      	ldr	r1, [pc, #68]	; (80080e8 <HAL_DMA_Init+0x16c>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	40020407 	.word	0x40020407
 80080d0:	bffdfff8 	.word	0xbffdfff8
 80080d4:	cccccccd 	.word	0xcccccccd
 80080d8:	40020000 	.word	0x40020000
 80080dc:	bffdfbf8 	.word	0xbffdfbf8
 80080e0:	40020400 	.word	0x40020400
 80080e4:	400200a8 	.word	0x400200a8
 80080e8:	400204a8 	.word	0x400204a8

080080ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e072      	b.n	80081e4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0201 	bic.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	4b36      	ldr	r3, [pc, #216]	; (80081f0 <HAL_DMA_DeInit+0x104>)
 8008116:	429a      	cmp	r2, r3
 8008118:	d80f      	bhi.n	800813a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	4b34      	ldr	r3, [pc, #208]	; (80081f4 <HAL_DMA_DeInit+0x108>)
 8008122:	4413      	add	r3, r2
 8008124:	4a34      	ldr	r2, [pc, #208]	; (80081f8 <HAL_DMA_DeInit+0x10c>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	091b      	lsrs	r3, r3, #4
 800812c:	009a      	lsls	r2, r3, #2
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a31      	ldr	r2, [pc, #196]	; (80081fc <HAL_DMA_DeInit+0x110>)
 8008136:	641a      	str	r2, [r3, #64]	; 0x40
 8008138:	e00e      	b.n	8008158 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	4b2f      	ldr	r3, [pc, #188]	; (8008200 <HAL_DMA_DeInit+0x114>)
 8008142:	4413      	add	r3, r2
 8008144:	4a2c      	ldr	r2, [pc, #176]	; (80081f8 <HAL_DMA_DeInit+0x10c>)
 8008146:	fba2 2303 	umull	r2, r3, r2, r3
 800814a:	091b      	lsrs	r3, r3, #4
 800814c:	009a      	lsls	r2, r3, #2
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2b      	ldr	r2, [pc, #172]	; (8008204 <HAL_DMA_DeInit+0x118>)
 8008156:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008164:	f003 021c 	and.w	r2, r3, #28
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816c:	2101      	movs	r1, #1
 800816e:	fa01 f202 	lsl.w	r2, r1, r2
 8008172:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	4a20      	ldr	r2, [pc, #128]	; (80081fc <HAL_DMA_DeInit+0x110>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d10d      	bne.n	800819a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800817e:	4b22      	ldr	r3, [pc, #136]	; (8008208 <HAL_DMA_DeInit+0x11c>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008186:	f003 031c 	and.w	r3, r3, #28
 800818a:	210f      	movs	r1, #15
 800818c:	fa01 f303 	lsl.w	r3, r1, r3
 8008190:	43db      	mvns	r3, r3
 8008192:	491d      	ldr	r1, [pc, #116]	; (8008208 <HAL_DMA_DeInit+0x11c>)
 8008194:	4013      	ands	r3, r2
 8008196:	600b      	str	r3, [r1, #0]
 8008198:	e00c      	b.n	80081b4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800819a:	4b1c      	ldr	r3, [pc, #112]	; (800820c <HAL_DMA_DeInit+0x120>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a2:	f003 031c 	and.w	r3, r3, #28
 80081a6:	210f      	movs	r1, #15
 80081a8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ac:	43db      	mvns	r3, r3
 80081ae:	4917      	ldr	r1, [pc, #92]	; (800820c <HAL_DMA_DeInit+0x120>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	40020407 	.word	0x40020407
 80081f4:	bffdfff8 	.word	0xbffdfff8
 80081f8:	cccccccd 	.word	0xcccccccd
 80081fc:	40020000 	.word	0x40020000
 8008200:	bffdfbf8 	.word	0xbffdfbf8
 8008204:	40020400 	.word	0x40020400
 8008208:	400200a8 	.word	0x400200a8
 800820c:	400204a8 	.word	0x400204a8

08008210 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_DMA_Start_IT+0x20>
 800822c:	2302      	movs	r3, #2
 800822e:	e04b      	b.n	80082c8 <HAL_DMA_Start_IT+0xb8>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d13a      	bne.n	80082ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f86f 	bl	800834c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 020e 	orr.w	r2, r2, #14
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	e00f      	b.n	80082a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0204 	bic.w	r2, r2, #4
 8008296:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 020a 	orr.w	r2, r2, #10
 80082a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	e005      	b.n	80082c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80082c2:	2302      	movs	r3, #2
 80082c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d008      	beq.n	80082fa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2204      	movs	r2, #4
 80082ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e022      	b.n	8008340 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 020e 	bic.w	r2, r2, #14
 8008308:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0201 	bic.w	r2, r2, #1
 8008318:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831e:	f003 021c 	and.w	r2, r3, #28
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	2101      	movs	r1, #1
 8008328:	fa01 f202 	lsl.w	r2, r1, r2
 800832c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835e:	f003 021c 	and.w	r2, r3, #28
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	2101      	movs	r1, #1
 8008368:	fa01 f202 	lsl.w	r2, r1, r2
 800836c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	2b10      	cmp	r3, #16
 800837c:	d108      	bne.n	8008390 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800838e:	e007      	b.n	80083a0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	60da      	str	r2, [r3, #12]
}
 80083a0:	bf00      	nop
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083ba:	e166      	b.n	800868a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	2101      	movs	r1, #1
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	fa01 f303 	lsl.w	r3, r1, r3
 80083c8:	4013      	ands	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8158 	beq.w	8008684 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f003 0303 	and.w	r3, r3, #3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d005      	beq.n	80083ec <HAL_GPIO_Init+0x40>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d130      	bne.n	800844e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	2203      	movs	r2, #3
 80083f8:	fa02 f303 	lsl.w	r3, r2, r3
 80083fc:	43db      	mvns	r3, r3
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4013      	ands	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008422:	2201      	movs	r2, #1
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	fa02 f303 	lsl.w	r3, r2, r3
 800842a:	43db      	mvns	r3, r3
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4013      	ands	r3, r2
 8008430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	091b      	lsrs	r3, r3, #4
 8008438:	f003 0201 	and.w	r2, r3, #1
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	fa02 f303 	lsl.w	r3, r2, r3
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	4313      	orrs	r3, r2
 8008446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	2b03      	cmp	r3, #3
 8008458:	d017      	beq.n	800848a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	2203      	movs	r2, #3
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	43db      	mvns	r3, r3
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4013      	ands	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	2b02      	cmp	r3, #2
 8008494:	d123      	bne.n	80084de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	08da      	lsrs	r2, r3, #3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3208      	adds	r2, #8
 800849e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	220f      	movs	r2, #15
 80084ae:	fa02 f303 	lsl.w	r3, r2, r3
 80084b2:	43db      	mvns	r3, r3
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4013      	ands	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	691a      	ldr	r2, [r3, #16]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	08da      	lsrs	r2, r3, #3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3208      	adds	r2, #8
 80084d8:	6939      	ldr	r1, [r7, #16]
 80084da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	2203      	movs	r2, #3
 80084ea:	fa02 f303 	lsl.w	r3, r2, r3
 80084ee:	43db      	mvns	r3, r3
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4013      	ands	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f003 0203 	and.w	r2, r3, #3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	fa02 f303 	lsl.w	r3, r2, r3
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	4313      	orrs	r3, r2
 800850a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80b2 	beq.w	8008684 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008520:	4b61      	ldr	r3, [pc, #388]	; (80086a8 <HAL_GPIO_Init+0x2fc>)
 8008522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008524:	4a60      	ldr	r2, [pc, #384]	; (80086a8 <HAL_GPIO_Init+0x2fc>)
 8008526:	f043 0301 	orr.w	r3, r3, #1
 800852a:	6613      	str	r3, [r2, #96]	; 0x60
 800852c:	4b5e      	ldr	r3, [pc, #376]	; (80086a8 <HAL_GPIO_Init+0x2fc>)
 800852e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	60bb      	str	r3, [r7, #8]
 8008536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008538:	4a5c      	ldr	r2, [pc, #368]	; (80086ac <HAL_GPIO_Init+0x300>)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	089b      	lsrs	r3, r3, #2
 800853e:	3302      	adds	r3, #2
 8008540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f003 0303 	and.w	r3, r3, #3
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	220f      	movs	r2, #15
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	43db      	mvns	r3, r3
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	4013      	ands	r3, r2
 800855a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008562:	d02b      	beq.n	80085bc <HAL_GPIO_Init+0x210>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a52      	ldr	r2, [pc, #328]	; (80086b0 <HAL_GPIO_Init+0x304>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d025      	beq.n	80085b8 <HAL_GPIO_Init+0x20c>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a51      	ldr	r2, [pc, #324]	; (80086b4 <HAL_GPIO_Init+0x308>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d01f      	beq.n	80085b4 <HAL_GPIO_Init+0x208>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a50      	ldr	r2, [pc, #320]	; (80086b8 <HAL_GPIO_Init+0x30c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d019      	beq.n	80085b0 <HAL_GPIO_Init+0x204>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a4f      	ldr	r2, [pc, #316]	; (80086bc <HAL_GPIO_Init+0x310>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d013      	beq.n	80085ac <HAL_GPIO_Init+0x200>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a4e      	ldr	r2, [pc, #312]	; (80086c0 <HAL_GPIO_Init+0x314>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00d      	beq.n	80085a8 <HAL_GPIO_Init+0x1fc>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a4d      	ldr	r2, [pc, #308]	; (80086c4 <HAL_GPIO_Init+0x318>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d007      	beq.n	80085a4 <HAL_GPIO_Init+0x1f8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a4c      	ldr	r2, [pc, #304]	; (80086c8 <HAL_GPIO_Init+0x31c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d101      	bne.n	80085a0 <HAL_GPIO_Init+0x1f4>
 800859c:	2307      	movs	r3, #7
 800859e:	e00e      	b.n	80085be <HAL_GPIO_Init+0x212>
 80085a0:	2308      	movs	r3, #8
 80085a2:	e00c      	b.n	80085be <HAL_GPIO_Init+0x212>
 80085a4:	2306      	movs	r3, #6
 80085a6:	e00a      	b.n	80085be <HAL_GPIO_Init+0x212>
 80085a8:	2305      	movs	r3, #5
 80085aa:	e008      	b.n	80085be <HAL_GPIO_Init+0x212>
 80085ac:	2304      	movs	r3, #4
 80085ae:	e006      	b.n	80085be <HAL_GPIO_Init+0x212>
 80085b0:	2303      	movs	r3, #3
 80085b2:	e004      	b.n	80085be <HAL_GPIO_Init+0x212>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e002      	b.n	80085be <HAL_GPIO_Init+0x212>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <HAL_GPIO_Init+0x212>
 80085bc:	2300      	movs	r3, #0
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	f002 0203 	and.w	r2, r2, #3
 80085c4:	0092      	lsls	r2, r2, #2
 80085c6:	4093      	lsls	r3, r2
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80085ce:	4937      	ldr	r1, [pc, #220]	; (80086ac <HAL_GPIO_Init+0x300>)
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	089b      	lsrs	r3, r3, #2
 80085d4:	3302      	adds	r3, #2
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085dc:	4b3b      	ldr	r3, [pc, #236]	; (80086cc <HAL_GPIO_Init+0x320>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	43db      	mvns	r3, r3
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	4013      	ands	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008600:	4a32      	ldr	r2, [pc, #200]	; (80086cc <HAL_GPIO_Init+0x320>)
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008606:	4b31      	ldr	r3, [pc, #196]	; (80086cc <HAL_GPIO_Init+0x320>)
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	43db      	mvns	r3, r3
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4013      	ands	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800862a:	4a28      	ldr	r2, [pc, #160]	; (80086cc <HAL_GPIO_Init+0x320>)
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008630:	4b26      	ldr	r3, [pc, #152]	; (80086cc <HAL_GPIO_Init+0x320>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	43db      	mvns	r3, r3
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4013      	ands	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008654:	4a1d      	ldr	r2, [pc, #116]	; (80086cc <HAL_GPIO_Init+0x320>)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800865a:	4b1c      	ldr	r3, [pc, #112]	; (80086cc <HAL_GPIO_Init+0x320>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	43db      	mvns	r3, r3
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4013      	ands	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4313      	orrs	r3, r2
 800867c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800867e:	4a13      	ldr	r2, [pc, #76]	; (80086cc <HAL_GPIO_Init+0x320>)
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	3301      	adds	r3, #1
 8008688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	fa22 f303 	lsr.w	r3, r2, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	f47f ae91 	bne.w	80083bc <HAL_GPIO_Init+0x10>
  }
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	371c      	adds	r7, #28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	40021000 	.word	0x40021000
 80086ac:	40010000 	.word	0x40010000
 80086b0:	48000400 	.word	0x48000400
 80086b4:	48000800 	.word	0x48000800
 80086b8:	48000c00 	.word	0x48000c00
 80086bc:	48001000 	.word	0x48001000
 80086c0:	48001400 	.word	0x48001400
 80086c4:	48001800 	.word	0x48001800
 80086c8:	48001c00 	.word	0x48001c00
 80086cc:	40010400 	.word	0x40010400

080086d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80086de:	e0c9      	b.n	8008874 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80086e0:	2201      	movs	r2, #1
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	4013      	ands	r3, r2
 80086ec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80bc 	beq.w	800886e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80086f6:	4a66      	ldr	r2, [pc, #408]	; (8008890 <HAL_GPIO_DeInit+0x1c0>)
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	089b      	lsrs	r3, r3, #2
 80086fc:	3302      	adds	r3, #2
 80086fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008702:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	220f      	movs	r2, #15
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4013      	ands	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800871e:	d02b      	beq.n	8008778 <HAL_GPIO_DeInit+0xa8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a5c      	ldr	r2, [pc, #368]	; (8008894 <HAL_GPIO_DeInit+0x1c4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d025      	beq.n	8008774 <HAL_GPIO_DeInit+0xa4>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a5b      	ldr	r2, [pc, #364]	; (8008898 <HAL_GPIO_DeInit+0x1c8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d01f      	beq.n	8008770 <HAL_GPIO_DeInit+0xa0>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a5a      	ldr	r2, [pc, #360]	; (800889c <HAL_GPIO_DeInit+0x1cc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d019      	beq.n	800876c <HAL_GPIO_DeInit+0x9c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a59      	ldr	r2, [pc, #356]	; (80088a0 <HAL_GPIO_DeInit+0x1d0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d013      	beq.n	8008768 <HAL_GPIO_DeInit+0x98>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a58      	ldr	r2, [pc, #352]	; (80088a4 <HAL_GPIO_DeInit+0x1d4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00d      	beq.n	8008764 <HAL_GPIO_DeInit+0x94>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a57      	ldr	r2, [pc, #348]	; (80088a8 <HAL_GPIO_DeInit+0x1d8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <HAL_GPIO_DeInit+0x90>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a56      	ldr	r2, [pc, #344]	; (80088ac <HAL_GPIO_DeInit+0x1dc>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d101      	bne.n	800875c <HAL_GPIO_DeInit+0x8c>
 8008758:	2307      	movs	r3, #7
 800875a:	e00e      	b.n	800877a <HAL_GPIO_DeInit+0xaa>
 800875c:	2308      	movs	r3, #8
 800875e:	e00c      	b.n	800877a <HAL_GPIO_DeInit+0xaa>
 8008760:	2306      	movs	r3, #6
 8008762:	e00a      	b.n	800877a <HAL_GPIO_DeInit+0xaa>
 8008764:	2305      	movs	r3, #5
 8008766:	e008      	b.n	800877a <HAL_GPIO_DeInit+0xaa>
 8008768:	2304      	movs	r3, #4
 800876a:	e006      	b.n	800877a <HAL_GPIO_DeInit+0xaa>
 800876c:	2303      	movs	r3, #3
 800876e:	e004      	b.n	800877a <HAL_GPIO_DeInit+0xaa>
 8008770:	2302      	movs	r3, #2
 8008772:	e002      	b.n	800877a <HAL_GPIO_DeInit+0xaa>
 8008774:	2301      	movs	r3, #1
 8008776:	e000      	b.n	800877a <HAL_GPIO_DeInit+0xaa>
 8008778:	2300      	movs	r3, #0
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	f002 0203 	and.w	r2, r2, #3
 8008780:	0092      	lsls	r2, r2, #2
 8008782:	4093      	lsls	r3, r2
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	429a      	cmp	r2, r3
 8008788:	d132      	bne.n	80087f0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800878a:	4b49      	ldr	r3, [pc, #292]	; (80088b0 <HAL_GPIO_DeInit+0x1e0>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	43db      	mvns	r3, r3
 8008792:	4947      	ldr	r1, [pc, #284]	; (80088b0 <HAL_GPIO_DeInit+0x1e0>)
 8008794:	4013      	ands	r3, r2
 8008796:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008798:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <HAL_GPIO_DeInit+0x1e0>)
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	43db      	mvns	r3, r3
 80087a0:	4943      	ldr	r1, [pc, #268]	; (80088b0 <HAL_GPIO_DeInit+0x1e0>)
 80087a2:	4013      	ands	r3, r2
 80087a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80087a6:	4b42      	ldr	r3, [pc, #264]	; (80088b0 <HAL_GPIO_DeInit+0x1e0>)
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	43db      	mvns	r3, r3
 80087ae:	4940      	ldr	r1, [pc, #256]	; (80088b0 <HAL_GPIO_DeInit+0x1e0>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80087b4:	4b3e      	ldr	r3, [pc, #248]	; (80088b0 <HAL_GPIO_DeInit+0x1e0>)
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	43db      	mvns	r3, r3
 80087bc:	493c      	ldr	r1, [pc, #240]	; (80088b0 <HAL_GPIO_DeInit+0x1e0>)
 80087be:	4013      	ands	r3, r2
 80087c0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	220f      	movs	r2, #15
 80087cc:	fa02 f303 	lsl.w	r3, r2, r3
 80087d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80087d2:	4a2f      	ldr	r2, [pc, #188]	; (8008890 <HAL_GPIO_DeInit+0x1c0>)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	089b      	lsrs	r3, r3, #2
 80087d8:	3302      	adds	r3, #2
 80087da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	43da      	mvns	r2, r3
 80087e2:	482b      	ldr	r0, [pc, #172]	; (8008890 <HAL_GPIO_DeInit+0x1c0>)
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	089b      	lsrs	r3, r3, #2
 80087e8:	400a      	ands	r2, r1
 80087ea:	3302      	adds	r3, #2
 80087ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	2103      	movs	r1, #3
 80087fa:	fa01 f303 	lsl.w	r3, r1, r3
 80087fe:	431a      	orrs	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	08da      	lsrs	r2, r3, #3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3208      	adds	r2, #8
 800880c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	220f      	movs	r2, #15
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	43db      	mvns	r3, r3
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	08d2      	lsrs	r2, r2, #3
 8008824:	4019      	ands	r1, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3208      	adds	r2, #8
 800882a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	2103      	movs	r1, #3
 8008838:	fa01 f303 	lsl.w	r3, r1, r3
 800883c:	43db      	mvns	r3, r3
 800883e:	401a      	ands	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	2101      	movs	r1, #1
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	fa01 f303 	lsl.w	r3, r1, r3
 8008850:	43db      	mvns	r3, r3
 8008852:	401a      	ands	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	2103      	movs	r1, #3
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	43db      	mvns	r3, r3
 8008868:	401a      	ands	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	3301      	adds	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f af2f 	bne.w	80086e0 <HAL_GPIO_DeInit+0x10>
  }
}
 8008882:	bf00      	nop
 8008884:	bf00      	nop
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	40010000 	.word	0x40010000
 8008894:	48000400 	.word	0x48000400
 8008898:	48000800 	.word	0x48000800
 800889c:	48000c00 	.word	0x48000c00
 80088a0:	48001000 	.word	0x48001000
 80088a4:	48001400 	.word	0x48001400
 80088a8:	48001800 	.word	0x48001800
 80088ac:	48001c00 	.word	0x48001c00
 80088b0:	40010400 	.word	0x40010400

080088b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	807b      	strh	r3, [r7, #2]
 80088c0:	4613      	mov	r3, r2
 80088c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088c4:	787b      	ldrb	r3, [r7, #1]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088ca:	887a      	ldrh	r2, [r7, #2]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80088d0:	e002      	b.n	80088d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80088d2:	887a      	ldrh	r2, [r7, #2]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e081      	b.n	80089fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7f9 f89a 	bl	8001a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2224      	movs	r2, #36	; 0x24
 8008914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 0201 	bic.w	r2, r2, #1
 8008926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008934:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008944:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d107      	bne.n	800895e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800895a:	609a      	str	r2, [r3, #8]
 800895c:	e006      	b.n	800896c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800896a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b02      	cmp	r3, #2
 8008972:	d104      	bne.n	800897e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800897c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800898c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008990:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691a      	ldr	r2, [r3, #16]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	69d9      	ldr	r1, [r3, #28]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1a      	ldr	r2, [r3, #32]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e021      	b.n	8008a58 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2224      	movs	r2, #36	; 0x24
 8008a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7f9 f8cf 	bl	8001bd0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	4608      	mov	r0, r1
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	817b      	strh	r3, [r7, #10]
 8008a72:	460b      	mov	r3, r1
 8008a74:	813b      	strh	r3, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	f040 80f9 	bne.w	8008c7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <HAL_I2C_Mem_Write+0x34>
 8008a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e0ed      	b.n	8008c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d101      	bne.n	8008aae <HAL_I2C_Mem_Write+0x4e>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	e0e6      	b.n	8008c7c <HAL_I2C_Mem_Write+0x21c>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ab6:	f7fd ff7f 	bl	80069b8 <HAL_GetTick>
 8008aba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	2319      	movs	r3, #25
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f000 fbd9 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0d1      	b.n	8008c7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2221      	movs	r2, #33	; 0x21
 8008adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2240      	movs	r2, #64	; 0x40
 8008ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a3a      	ldr	r2, [r7, #32]
 8008af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b00:	88f8      	ldrh	r0, [r7, #6]
 8008b02:	893a      	ldrh	r2, [r7, #8]
 8008b04:	8979      	ldrh	r1, [r7, #10]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	4603      	mov	r3, r0
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 fae9 	bl	80090e8 <I2C_RequestMemoryWrite>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0a9      	b.n	8008c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	2bff      	cmp	r3, #255	; 0xff
 8008b30:	d90e      	bls.n	8008b50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	22ff      	movs	r2, #255	; 0xff
 8008b36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	8979      	ldrh	r1, [r7, #10]
 8008b40:	2300      	movs	r3, #0
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fd41 	bl	80095d0 <I2C_TransferConfig>
 8008b4e:	e00f      	b.n	8008b70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	8979      	ldrh	r1, [r7, #10]
 8008b62:	2300      	movs	r3, #0
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fd30 	bl	80095d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fbc3 	bl	8009300 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e07b      	b.n	8008c7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	781a      	ldrb	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bac:	3b01      	subs	r3, #1
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d034      	beq.n	8008c28 <HAL_I2C_Mem_Write+0x1c8>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d130      	bne.n	8008c28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2180      	movs	r1, #128	; 0x80
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 fb55 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e04d      	b.n	8008c7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2bff      	cmp	r3, #255	; 0xff
 8008be8:	d90e      	bls.n	8008c08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	22ff      	movs	r2, #255	; 0xff
 8008bee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	8979      	ldrh	r1, [r7, #10]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 fce5 	bl	80095d0 <I2C_TransferConfig>
 8008c06:	e00f      	b.n	8008c28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	8979      	ldrh	r1, [r7, #10]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fcd4 	bl	80095d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d19e      	bne.n	8008b70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 fba2 	bl	8009380 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e01a      	b.n	8008c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6859      	ldr	r1, [r3, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <HAL_I2C_Mem_Write+0x224>)
 8008c5a:	400b      	ands	r3, r1
 8008c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2220      	movs	r2, #32
 8008c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e000      	b.n	8008c7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008c7a:	2302      	movs	r3, #2
  }
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	fe00e800 	.word	0xfe00e800

08008c88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	4608      	mov	r0, r1
 8008c92:	4611      	mov	r1, r2
 8008c94:	461a      	mov	r2, r3
 8008c96:	4603      	mov	r3, r0
 8008c98:	817b      	strh	r3, [r7, #10]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	813b      	strh	r3, [r7, #8]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b20      	cmp	r3, #32
 8008cac:	f040 80fd 	bne.w	8008eaa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_I2C_Mem_Read+0x34>
 8008cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d105      	bne.n	8008cc8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e0f1      	b.n	8008eac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d101      	bne.n	8008cd6 <HAL_I2C_Mem_Read+0x4e>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e0ea      	b.n	8008eac <HAL_I2C_Mem_Read+0x224>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008cde:	f7fd fe6b 	bl	80069b8 <HAL_GetTick>
 8008ce2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	2319      	movs	r3, #25
 8008cea:	2201      	movs	r2, #1
 8008cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fac5 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e0d5      	b.n	8008eac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2222      	movs	r2, #34	; 0x22
 8008d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2240      	movs	r2, #64	; 0x40
 8008d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a3a      	ldr	r2, [r7, #32]
 8008d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d28:	88f8      	ldrh	r0, [r7, #6]
 8008d2a:	893a      	ldrh	r2, [r7, #8]
 8008d2c:	8979      	ldrh	r1, [r7, #10]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	4603      	mov	r3, r0
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 fa29 	bl	8009190 <I2C_RequestMemoryRead>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0ad      	b.n	8008eac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	2bff      	cmp	r3, #255	; 0xff
 8008d58:	d90e      	bls.n	8008d78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	22ff      	movs	r2, #255	; 0xff
 8008d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	8979      	ldrh	r1, [r7, #10]
 8008d68:	4b52      	ldr	r3, [pc, #328]	; (8008eb4 <HAL_I2C_Mem_Read+0x22c>)
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fc2d 	bl	80095d0 <I2C_TransferConfig>
 8008d76:	e00f      	b.n	8008d98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	8979      	ldrh	r1, [r7, #10]
 8008d8a:	4b4a      	ldr	r3, [pc, #296]	; (8008eb4 <HAL_I2C_Mem_Read+0x22c>)
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 fc1c 	bl	80095d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2104      	movs	r1, #4
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 fa6c 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e07c      	b.n	8008eac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	b2d2      	uxtb	r2, r2
 8008dbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d034      	beq.n	8008e58 <HAL_I2C_Mem_Read+0x1d0>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d130      	bne.n	8008e58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2180      	movs	r1, #128	; 0x80
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fa3d 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e04d      	b.n	8008eac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2bff      	cmp	r3, #255	; 0xff
 8008e18:	d90e      	bls.n	8008e38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	22ff      	movs	r2, #255	; 0xff
 8008e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	8979      	ldrh	r1, [r7, #10]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 fbcd 	bl	80095d0 <I2C_TransferConfig>
 8008e36:	e00f      	b.n	8008e58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	8979      	ldrh	r1, [r7, #10]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 fbbc 	bl	80095d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d19a      	bne.n	8008d98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fa8a 	bl	8009380 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e01a      	b.n	8008eac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6859      	ldr	r1, [r3, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <HAL_I2C_Mem_Read+0x230>)
 8008e8a:	400b      	ands	r3, r1
 8008e8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e000      	b.n	8008eac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008eaa:	2302      	movs	r3, #2
  }
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	80002400 	.word	0x80002400
 8008eb8:	fe00e800 	.word	0xfe00e800

08008ebc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08a      	sub	sp, #40	; 0x28
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	607a      	str	r2, [r7, #4]
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b20      	cmp	r3, #32
 8008eda:	f040 80f1 	bne.w	80090c0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eec:	d101      	bne.n	8008ef2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008eee:	2302      	movs	r3, #2
 8008ef0:	e0e7      	b.n	80090c2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_I2C_IsDeviceReady+0x44>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e0e0      	b.n	80090c2 <HAL_I2C_IsDeviceReady+0x206>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2224      	movs	r2, #36	; 0x24
 8008f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d107      	bne.n	8008f2e <HAL_I2C_IsDeviceReady+0x72>
 8008f1e:	897b      	ldrh	r3, [r7, #10]
 8008f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f2c:	e004      	b.n	8008f38 <HAL_I2C_IsDeviceReady+0x7c>
 8008f2e:	897b      	ldrh	r3, [r7, #10]
 8008f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f34:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	6812      	ldr	r2, [r2, #0]
 8008f3c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008f3e:	f7fd fd3b 	bl	80069b8 <HAL_GetTick>
 8008f42:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	bf0c      	ite	eq
 8008f52:	2301      	moveq	r3, #1
 8008f54:	2300      	movne	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008f70:	e034      	b.n	8008fdc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f78:	d01a      	beq.n	8008fb0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f7a:	f7fd fd1d 	bl	80069b8 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d302      	bcc.n	8008f90 <HAL_I2C_IsDeviceReady+0xd4>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10f      	bne.n	8008fb0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9c:	f043 0220 	orr.w	r2, r3, #32
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e088      	b.n	80090c2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	bf0c      	ite	eq
 8008fbe:	2301      	moveq	r3, #1
 8008fc0:	2300      	movne	r3, #0
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2301      	moveq	r3, #1
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008fdc:	7ffb      	ldrb	r3, [r7, #31]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <HAL_I2C_IsDeviceReady+0x12c>
 8008fe2:	7fbb      	ldrb	r3, [r7, #30]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0c4      	beq.n	8008f72 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	f003 0310 	and.w	r3, r3, #16
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d01a      	beq.n	800902c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2120      	movs	r1, #32
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 f93d 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e058      	b.n	80090c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2220      	movs	r2, #32
 8009016:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2220      	movs	r2, #32
 800901c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e04a      	b.n	80090c2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	2120      	movs	r1, #32
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f922 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e03d      	b.n	80090c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2210      	movs	r2, #16
 800904c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2220      	movs	r2, #32
 8009054:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	429a      	cmp	r2, r3
 800905c:	d118      	bne.n	8009090 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800906c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2200      	movs	r2, #0
 8009076:	2120      	movs	r1, #32
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 f901 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e01c      	b.n	80090c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2220      	movs	r2, #32
 800908e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	3301      	adds	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	f63f af3b 	bhi.w	8008f16 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ac:	f043 0220 	orr.w	r2, r3, #32
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e000      	b.n	80090c2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80090c0:	2302      	movs	r3, #2
  }
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3720      	adds	r7, #32
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090d8:	b2db      	uxtb	r3, r3
}
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	4608      	mov	r0, r1
 80090f2:	4611      	mov	r1, r2
 80090f4:	461a      	mov	r2, r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	817b      	strh	r3, [r7, #10]
 80090fa:	460b      	mov	r3, r1
 80090fc:	813b      	strh	r3, [r7, #8]
 80090fe:	4613      	mov	r3, r2
 8009100:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	b2da      	uxtb	r2, r3
 8009106:	8979      	ldrh	r1, [r7, #10]
 8009108:	4b20      	ldr	r3, [pc, #128]	; (800918c <I2C_RequestMemoryWrite+0xa4>)
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 fa5d 	bl	80095d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	69b9      	ldr	r1, [r7, #24]
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 f8f0 	bl	8009300 <I2C_WaitOnTXISFlagUntilTimeout>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e02c      	b.n	8009184 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d105      	bne.n	800913c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009130:	893b      	ldrh	r3, [r7, #8]
 8009132:	b2da      	uxtb	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	629a      	str	r2, [r3, #40]	; 0x28
 800913a:	e015      	b.n	8009168 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800913c:	893b      	ldrh	r3, [r7, #8]
 800913e:	0a1b      	lsrs	r3, r3, #8
 8009140:	b29b      	uxth	r3, r3
 8009142:	b2da      	uxtb	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	69b9      	ldr	r1, [r7, #24]
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f8d6 	bl	8009300 <I2C_WaitOnTXISFlagUntilTimeout>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e012      	b.n	8009184 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800915e:	893b      	ldrh	r3, [r7, #8]
 8009160:	b2da      	uxtb	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2200      	movs	r2, #0
 8009170:	2180      	movs	r1, #128	; 0x80
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 f884 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	80002000 	.word	0x80002000

08009190 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af02      	add	r7, sp, #8
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	4608      	mov	r0, r1
 800919a:	4611      	mov	r1, r2
 800919c:	461a      	mov	r2, r3
 800919e:	4603      	mov	r3, r0
 80091a0:	817b      	strh	r3, [r7, #10]
 80091a2:	460b      	mov	r3, r1
 80091a4:	813b      	strh	r3, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	8979      	ldrh	r1, [r7, #10]
 80091b0:	4b20      	ldr	r3, [pc, #128]	; (8009234 <I2C_RequestMemoryRead+0xa4>)
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	2300      	movs	r3, #0
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 fa0a 	bl	80095d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	69b9      	ldr	r1, [r7, #24]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 f89d 	bl	8009300 <I2C_WaitOnTXISFlagUntilTimeout>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e02c      	b.n	800922a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091d0:	88fb      	ldrh	r3, [r7, #6]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d105      	bne.n	80091e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091d6:	893b      	ldrh	r3, [r7, #8]
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	629a      	str	r2, [r3, #40]	; 0x28
 80091e0:	e015      	b.n	800920e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80091e2:	893b      	ldrh	r3, [r7, #8]
 80091e4:	0a1b      	lsrs	r3, r3, #8
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	69b9      	ldr	r1, [r7, #24]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f883 	bl	8009300 <I2C_WaitOnTXISFlagUntilTimeout>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e012      	b.n	800922a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009204:	893b      	ldrh	r3, [r7, #8]
 8009206:	b2da      	uxtb	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2200      	movs	r2, #0
 8009216:	2140      	movs	r1, #64	; 0x40
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f831 	bl	8009280 <I2C_WaitOnFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	80002000 	.word	0x80002000

08009238 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b02      	cmp	r3, #2
 800924c:	d103      	bne.n	8009256 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2200      	movs	r2, #0
 8009254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	d007      	beq.n	8009274 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	619a      	str	r2, [r3, #24]
  }
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	4613      	mov	r3, r2
 800928e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009290:	e022      	b.n	80092d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009298:	d01e      	beq.n	80092d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800929a:	f7fd fb8d 	bl	80069b8 <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d302      	bcc.n	80092b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d113      	bne.n	80092d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b4:	f043 0220 	orr.w	r2, r3, #32
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2220      	movs	r2, #32
 80092c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e00f      	b.n	80092f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	4013      	ands	r3, r2
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	bf0c      	ite	eq
 80092e8:	2301      	moveq	r3, #1
 80092ea:	2300      	movne	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	461a      	mov	r2, r3
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d0cd      	beq.n	8009292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800930c:	e02c      	b.n	8009368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f870 	bl	80093f8 <I2C_IsErrorOccurred>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e02a      	b.n	8009378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009328:	d01e      	beq.n	8009368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800932a:	f7fd fb45 	bl	80069b8 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	429a      	cmp	r2, r3
 8009338:	d302      	bcc.n	8009340 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d113      	bne.n	8009368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009344:	f043 0220 	orr.w	r2, r3, #32
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2220      	movs	r2, #32
 8009350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e007      	b.n	8009378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b02      	cmp	r3, #2
 8009374:	d1cb      	bne.n	800930e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800938c:	e028      	b.n	80093e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	68b9      	ldr	r1, [r7, #8]
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 f830 	bl	80093f8 <I2C_IsErrorOccurred>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e026      	b.n	80093f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093a2:	f7fd fb09 	bl	80069b8 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d302      	bcc.n	80093b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d113      	bne.n	80093e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093bc:	f043 0220 	orr.w	r2, r3, #32
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e007      	b.n	80093f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d1cf      	bne.n	800938e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08a      	sub	sp, #40	; 0x28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	f003 0310 	and.w	r3, r3, #16
 8009420:	2b00      	cmp	r3, #0
 8009422:	d075      	beq.n	8009510 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2210      	movs	r2, #16
 800942a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800942c:	e056      	b.n	80094dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009434:	d052      	beq.n	80094dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009436:	f7fd fabf 	bl	80069b8 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	429a      	cmp	r2, r3
 8009444:	d302      	bcc.n	800944c <I2C_IsErrorOccurred+0x54>
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d147      	bne.n	80094dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009456:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800945e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800946a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800946e:	d12e      	bne.n	80094ce <I2C_IsErrorOccurred+0xd6>
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009476:	d02a      	beq.n	80094ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009478:	7cfb      	ldrb	r3, [r7, #19]
 800947a:	2b20      	cmp	r3, #32
 800947c:	d027      	beq.n	80094ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800948c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800948e:	f7fd fa93 	bl	80069b8 <HAL_GetTick>
 8009492:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009494:	e01b      	b.n	80094ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009496:	f7fd fa8f 	bl	80069b8 <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	2b19      	cmp	r3, #25
 80094a2:	d914      	bls.n	80094ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a8:	f043 0220 	orr.w	r2, r3, #32
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b20      	cmp	r3, #32
 80094da:	d1dc      	bne.n	8009496 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b20      	cmp	r3, #32
 80094e8:	d003      	beq.n	80094f2 <I2C_IsErrorOccurred+0xfa>
 80094ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d09d      	beq.n	800942e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80094f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d103      	bne.n	8009502 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2220      	movs	r2, #32
 8009500:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	f043 0304 	orr.w	r3, r3, #4
 8009508:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	f043 0301 	orr.w	r3, r3, #1
 8009528:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009532:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	f043 0308 	orr.w	r3, r3, #8
 800954a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009554:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00b      	beq.n	800957e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	f043 0302 	orr.w	r3, r3, #2
 800956c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009576:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800957e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009582:	2b00      	cmp	r3, #0
 8009584:	d01c      	beq.n	80095c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fe56 	bl	8009238 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6859      	ldr	r1, [r3, #4]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	4b0d      	ldr	r3, [pc, #52]	; (80095cc <I2C_IsErrorOccurred+0x1d4>)
 8009598:	400b      	ands	r3, r1
 800959a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80095c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3728      	adds	r7, #40	; 0x28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	fe00e800 	.word	0xfe00e800

080095d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	607b      	str	r3, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	817b      	strh	r3, [r7, #10]
 80095de:	4613      	mov	r3, r2
 80095e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095e2:	897b      	ldrh	r3, [r7, #10]
 80095e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095e8:	7a7b      	ldrb	r3, [r7, #9]
 80095ea:	041b      	lsls	r3, r3, #16
 80095ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	0d5b      	lsrs	r3, r3, #21
 800960a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800960e:	4b08      	ldr	r3, [pc, #32]	; (8009630 <I2C_TransferConfig+0x60>)
 8009610:	430b      	orrs	r3, r1
 8009612:	43db      	mvns	r3, r3
 8009614:	ea02 0103 	and.w	r1, r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	430a      	orrs	r2, r1
 8009620:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009622:	bf00      	nop
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	03ff63ff 	.word	0x03ff63ff

08009634 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b20      	cmp	r3, #32
 8009648:	d138      	bne.n	80096bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009650:	2b01      	cmp	r3, #1
 8009652:	d101      	bne.n	8009658 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009654:	2302      	movs	r3, #2
 8009656:	e032      	b.n	80096be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2224      	movs	r2, #36	; 0x24
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0201 	bic.w	r2, r2, #1
 8009676:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009686:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6819      	ldr	r1, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	e000      	b.n	80096be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096bc:	2302      	movs	r3, #2
  }
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b20      	cmp	r3, #32
 80096de:	d139      	bne.n	8009754 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e033      	b.n	8009756 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2224      	movs	r2, #36	; 0x24
 80096fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0201 	bic.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800971c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0201 	orr.w	r2, r2, #1
 800973e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2220      	movs	r2, #32
 8009744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	e000      	b.n	8009756 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009754:	2302      	movs	r3, #2
  }
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009764:	b08f      	sub	sp, #60	; 0x3c
 8009766:	af0a      	add	r7, sp, #40	; 0x28
 8009768:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e116      	b.n	80099a2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f009 fd9a 	bl	80132c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2203      	movs	r2, #3
 8009798:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f006 fca9 	bl	801010a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	603b      	str	r3, [r7, #0]
 80097be:	687e      	ldr	r6, [r7, #4]
 80097c0:	466d      	mov	r5, sp
 80097c2:	f106 0410 	add.w	r4, r6, #16
 80097c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80097d6:	1d33      	adds	r3, r6, #4
 80097d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097da:	6838      	ldr	r0, [r7, #0]
 80097dc:	f006 fbbc 	bl	800ff58 <USB_CoreInit>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2202      	movs	r2, #2
 80097ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e0d7      	b.n	80099a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f006 fc97 	bl	801012c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
 8009802:	e04a      	b.n	800989a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009804:	7bfa      	ldrb	r2, [r7, #15]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	4613      	mov	r3, r2
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	333d      	adds	r3, #61	; 0x3d
 8009814:	2201      	movs	r2, #1
 8009816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009818:	7bfa      	ldrb	r2, [r7, #15]
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	4613      	mov	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	333c      	adds	r3, #60	; 0x3c
 8009828:	7bfa      	ldrb	r2, [r7, #15]
 800982a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800982c:	7bfa      	ldrb	r2, [r7, #15]
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	b298      	uxth	r0, r3
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	4613      	mov	r3, r2
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	440b      	add	r3, r1
 800983e:	3344      	adds	r3, #68	; 0x44
 8009840:	4602      	mov	r2, r0
 8009842:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009844:	7bfa      	ldrb	r2, [r7, #15]
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	4613      	mov	r3, r2
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	4413      	add	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	3340      	adds	r3, #64	; 0x40
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009858:	7bfa      	ldrb	r2, [r7, #15]
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	4613      	mov	r3, r2
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	440b      	add	r3, r1
 8009866:	3348      	adds	r3, #72	; 0x48
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800986c:	7bfa      	ldrb	r2, [r7, #15]
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	334c      	adds	r3, #76	; 0x4c
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009880:	7bfa      	ldrb	r2, [r7, #15]
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	4613      	mov	r3, r2
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	440b      	add	r3, r1
 800988e:	3354      	adds	r3, #84	; 0x54
 8009890:	2200      	movs	r2, #0
 8009892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	3301      	adds	r3, #1
 8009898:	73fb      	strb	r3, [r7, #15]
 800989a:	7bfa      	ldrb	r2, [r7, #15]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d3af      	bcc.n	8009804 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
 80098a8:	e044      	b.n	8009934 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80098aa:	7bfa      	ldrb	r2, [r7, #15]
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	4613      	mov	r3, r2
 80098b0:	00db      	lsls	r3, r3, #3
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	440b      	add	r3, r1
 80098b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80098bc:	2200      	movs	r2, #0
 80098be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80098c0:	7bfa      	ldrb	r2, [r7, #15]
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80098d2:	7bfa      	ldrb	r2, [r7, #15]
 80098d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80098d6:	7bfa      	ldrb	r2, [r7, #15]
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	4613      	mov	r3, r2
 80098dc:	00db      	lsls	r3, r3, #3
 80098de:	4413      	add	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	440b      	add	r3, r1
 80098e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80098e8:	2200      	movs	r2, #0
 80098ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80098ec:	7bfa      	ldrb	r2, [r7, #15]
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	4613      	mov	r3, r2
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	440b      	add	r3, r1
 80098fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80098fe:	2200      	movs	r2, #0
 8009900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009902:	7bfa      	ldrb	r2, [r7, #15]
 8009904:	6879      	ldr	r1, [r7, #4]
 8009906:	4613      	mov	r3, r2
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	440b      	add	r3, r1
 8009910:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009918:	7bfa      	ldrb	r2, [r7, #15]
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	4613      	mov	r3, r2
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	440b      	add	r3, r1
 8009926:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	3301      	adds	r3, #1
 8009932:	73fb      	strb	r3, [r7, #15]
 8009934:	7bfa      	ldrb	r2, [r7, #15]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	429a      	cmp	r2, r3
 800993c:	d3b5      	bcc.n	80098aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	687e      	ldr	r6, [r7, #4]
 8009946:	466d      	mov	r5, sp
 8009948:	f106 0410 	add.w	r4, r6, #16
 800994c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800994e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009954:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009958:	e885 0003 	stmia.w	r5, {r0, r1}
 800995c:	1d33      	adds	r3, r6, #4
 800995e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009960:	6838      	ldr	r0, [r7, #0]
 8009962:	f006 fc2f 	bl	80101c4 <USB_DevInit>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e014      	b.n	80099a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b01      	cmp	r3, #1
 800998e:	d102      	bne.n	8009996 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f881 	bl	800aa98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f007 fcb7 	bl	801130e <USB_DevDisconnect>

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d101      	bne.n	80099c6 <HAL_PCD_Start+0x1c>
 80099c2:	2302      	movs	r3, #2
 80099c4:	e01c      	b.n	8009a00 <HAL_PCD_Start+0x56>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d105      	bne.n	80099e2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f006 fb7e 	bl	80100e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f007 fc6b 	bl	80112cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009a08:	b590      	push	{r4, r7, lr}
 8009a0a:	b08d      	sub	sp, #52	; 0x34
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f007 fd29 	bl	8011476 <USB_GetMode>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f040 847e 	bne.w	800a328 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f007 fc8d 	bl	8011350 <USB_ReadInterrupts>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f000 8474 	beq.w	800a326 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	0a1b      	lsrs	r3, r3, #8
 8009a48:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f007 fc7a 	bl	8011350 <USB_ReadInterrupts>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f003 0302 	and.w	r3, r3, #2
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d107      	bne.n	8009a76 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	695a      	ldr	r2, [r3, #20]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f002 0202 	and.w	r2, r2, #2
 8009a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f007 fc68 	bl	8011350 <USB_ReadInterrupts>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f003 0310 	and.w	r3, r3, #16
 8009a86:	2b10      	cmp	r3, #16
 8009a88:	d161      	bne.n	8009b4e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0210 	bic.w	r2, r2, #16
 8009a98:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	f003 020f 	and.w	r2, r3, #15
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	00db      	lsls	r3, r3, #3
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	0c5b      	lsrs	r3, r3, #17
 8009abe:	f003 030f 	and.w	r3, r3, #15
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d124      	bne.n	8009b10 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009ac6:	69ba      	ldr	r2, [r7, #24]
 8009ac8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009acc:	4013      	ands	r3, r2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d035      	beq.n	8009b3e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	091b      	lsrs	r3, r3, #4
 8009ada:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	6a38      	ldr	r0, [r7, #32]
 8009ae6:	f007 fa9f 	bl	8011028 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	691a      	ldr	r2, [r3, #16]
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	091b      	lsrs	r3, r3, #4
 8009af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009af6:	441a      	add	r2, r3
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	6a1a      	ldr	r2, [r3, #32]
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	091b      	lsrs	r3, r3, #4
 8009b04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b08:	441a      	add	r2, r3
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	621a      	str	r2, [r3, #32]
 8009b0e:	e016      	b.n	8009b3e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	0c5b      	lsrs	r3, r3, #17
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	2b06      	cmp	r3, #6
 8009b1a:	d110      	bne.n	8009b3e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b22:	2208      	movs	r2, #8
 8009b24:	4619      	mov	r1, r3
 8009b26:	6a38      	ldr	r0, [r7, #32]
 8009b28:	f007 fa7e 	bl	8011028 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	6a1a      	ldr	r2, [r3, #32]
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	091b      	lsrs	r3, r3, #4
 8009b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b38:	441a      	add	r2, r3
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f042 0210 	orr.w	r2, r2, #16
 8009b4c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f007 fbfc 	bl	8011350 <USB_ReadInterrupts>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b62:	f040 80a7 	bne.w	8009cb4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f007 fc01 	bl	8011376 <USB_ReadDevAllOutEpInterrupt>
 8009b74:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009b76:	e099      	b.n	8009cac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 808e 	beq.w	8009ca0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8a:	b2d2      	uxtb	r2, r2
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f007 fc25 	bl	80113de <USB_ReadDevOutEPInterrupt>
 8009b94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00c      	beq.n	8009bba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bac:	461a      	mov	r2, r3
 8009bae:	2301      	movs	r3, #1
 8009bb0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fe95 	bl	800a8e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00c      	beq.n	8009bde <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	2308      	movs	r3, #8
 8009bd4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fed1 	bl	800a980 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f003 0310 	and.w	r3, r3, #16
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d008      	beq.n	8009bfa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	2310      	movs	r3, #16
 8009bf8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d030      	beq.n	8009c66 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0c:	2b80      	cmp	r3, #128	; 0x80
 8009c0e:	d109      	bne.n	8009c24 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c22:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c26:	4613      	mov	r3, r2
 8009c28:	00db      	lsls	r3, r3, #3
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	4413      	add	r3, r2
 8009c36:	3304      	adds	r3, #4
 8009c38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	78db      	ldrb	r3, [r3, #3]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d108      	bne.n	8009c54 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2200      	movs	r2, #0
 8009c46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f009 fc62 	bl	8013518 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c60:	461a      	mov	r2, r3
 8009c62:	2302      	movs	r3, #2
 8009c64:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f003 0320 	and.w	r3, r3, #32
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d008      	beq.n	8009c82 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	2320      	movs	r3, #32
 8009c80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d009      	beq.n	8009ca0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c9e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	085b      	lsrs	r3, r3, #1
 8009caa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f47f af62 	bne.w	8009b78 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f007 fb49 	bl	8011350 <USB_ReadInterrupts>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cc8:	f040 80a4 	bne.w	8009e14 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f007 fb6a 	bl	80113aa <USB_ReadDevAllInEpInterrupt>
 8009cd6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009cdc:	e096      	b.n	8009e0c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 808b 	beq.w	8009e00 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f007 fb90 	bl	801141a <USB_ReadDevInEPInterrupt>
 8009cfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d020      	beq.n	8009d48 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	f003 030f 	and.w	r3, r3, #15
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d12:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	69f9      	ldr	r1, [r7, #28]
 8009d22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d26:	4013      	ands	r3, r2
 8009d28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d36:	461a      	mov	r2, r3
 8009d38:	2301      	movs	r3, #1
 8009d3a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f009 fb53 	bl	80133ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f003 0308 	and.w	r3, r3, #8
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d008      	beq.n	8009d64 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	015a      	lsls	r2, r3, #5
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	4413      	add	r3, r2
 8009d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d5e:	461a      	mov	r2, r3
 8009d60:	2308      	movs	r3, #8
 8009d62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f003 0310 	and.w	r3, r3, #16
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d008      	beq.n	8009d80 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d008      	beq.n	8009d9c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d96:	461a      	mov	r2, r3
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d023      	beq.n	8009dee <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009da8:	6a38      	ldr	r0, [r7, #32]
 8009daa:	f006 fb57 	bl	801045c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db0:	4613      	mov	r3, r2
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	4413      	add	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	3338      	adds	r3, #56	; 0x38
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	78db      	ldrb	r3, [r3, #3]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d108      	bne.n	8009ddc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f009 fbb0 	bl	801353c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de8:	461a      	mov	r2, r3
 8009dea:	2302      	movs	r3, #2
 8009dec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fcea 	bl	800a7d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	3301      	adds	r3, #1
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	085b      	lsrs	r3, r3, #1
 8009e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f47f af65 	bne.w	8009cde <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f007 fa99 	bl	8011350 <USB_ReadInterrupts>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e28:	d122      	bne.n	8009e70 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e38:	f023 0301 	bic.w	r3, r3, #1
 8009e3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d108      	bne.n	8009e5a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009e50:	2100      	movs	r1, #0
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f009 fde4 	bl	8013a20 <HAL_PCDEx_LPM_Callback>
 8009e58:	e002      	b.n	8009e60 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f009 fb34 	bl	80134c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	695a      	ldr	r2, [r3, #20]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f007 fa6b 	bl	8011350 <USB_ReadInterrupts>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e84:	d112      	bne.n	8009eac <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d102      	bne.n	8009e9c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f009 faf0 	bl	801347c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695a      	ldr	r2, [r3, #20]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f007 fa4d 	bl	8011350 <USB_ReadInterrupts>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ec0:	d121      	bne.n	8009f06 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	695a      	ldr	r2, [r3, #20]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009ed0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d111      	bne.n	8009f00 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eea:	089b      	lsrs	r3, r3, #2
 8009eec:	f003 020f 	and.w	r2, r3, #15
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f009 fd91 	bl	8013a20 <HAL_PCDEx_LPM_Callback>
 8009efe:	e002      	b.n	8009f06 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f009 fabb 	bl	801347c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f007 fa20 	bl	8011350 <USB_ReadInterrupts>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f1a:	f040 80b5 	bne.w	800a088 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	69fa      	ldr	r2, [r7, #28]
 8009f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f2c:	f023 0301 	bic.w	r3, r3, #1
 8009f30:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2110      	movs	r1, #16
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f006 fa8f 	bl	801045c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f3e:	2300      	movs	r3, #0
 8009f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f42:	e046      	b.n	8009fd2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f50:	461a      	mov	r2, r3
 8009f52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f56:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f84:	461a      	mov	r2, r3
 8009f86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f8a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f9c:	0151      	lsls	r1, r2, #5
 8009f9e:	69fa      	ldr	r2, [r7, #28]
 8009fa0:	440a      	add	r2, r1
 8009fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009faa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fce:	3301      	adds	r3, #1
 8009fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d3b3      	bcc.n	8009f44 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009fee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d016      	beq.n	800a026 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a008:	f043 030b 	orr.w	r3, r3, #11
 800a00c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a018:	69fa      	ldr	r2, [r7, #28]
 800a01a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a01e:	f043 030b 	orr.w	r3, r3, #11
 800a022:	6453      	str	r3, [r2, #68]	; 0x44
 800a024:	e015      	b.n	800a052 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	69fa      	ldr	r2, [r7, #28]
 800a030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a038:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a03c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a04c:	f043 030b 	orr.w	r3, r3, #11
 800a050:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69fa      	ldr	r2, [r7, #28]
 800a05c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a060:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a064:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a070:	4619      	mov	r1, r3
 800a072:	4610      	mov	r0, r2
 800a074:	f007 fa30 	bl	80114d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695a      	ldr	r2, [r3, #20]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a086:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f007 f95f 	bl	8011350 <USB_ReadInterrupts>
 800a092:	4603      	mov	r3, r0
 800a094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a09c:	d124      	bne.n	800a0e8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f007 f9f5 	bl	8011492 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f006 fa52 	bl	8010556 <USB_GetDevSpeed>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681c      	ldr	r4, [r3, #0]
 800a0be:	f001 fc0b 	bl	800b8d8 <HAL_RCC_GetHCLKFreq>
 800a0c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f005 ff6f 	bl	800ffb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f009 f9b3 	bl	801343e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	695a      	ldr	r2, [r3, #20]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a0e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f007 f92f 	bl	8011350 <USB_ReadInterrupts>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f003 0308 	and.w	r3, r3, #8
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	d10a      	bne.n	800a112 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f009 f990 	bl	8013422 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	695a      	ldr	r2, [r3, #20]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f002 0208 	and.w	r2, r2, #8
 800a110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f007 f91a 	bl	8011350 <USB_ReadInterrupts>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a122:	2b80      	cmp	r3, #128	; 0x80
 800a124:	d122      	bne.n	800a16c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a132:	2301      	movs	r3, #1
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
 800a136:	e014      	b.n	800a162 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a138:	6879      	ldr	r1, [r7, #4]
 800a13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13c:	4613      	mov	r3, r2
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	440b      	add	r3, r1
 800a146:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d105      	bne.n	800a15c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	b2db      	uxtb	r3, r3
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fb0b 	bl	800a772 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	3301      	adds	r3, #1
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a168:	429a      	cmp	r2, r3
 800a16a:	d3e5      	bcc.n	800a138 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f007 f8ed 	bl	8011350 <USB_ReadInterrupts>
 800a176:	4603      	mov	r3, r0
 800a178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a17c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a180:	d13b      	bne.n	800a1fa <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a182:	2301      	movs	r3, #1
 800a184:	627b      	str	r3, [r7, #36]	; 0x24
 800a186:	e02b      	b.n	800a1e0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19c:	4613      	mov	r3, r2
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	4413      	add	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	440b      	add	r3, r1
 800a1a6:	3340      	adds	r3, #64	; 0x40
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d115      	bne.n	800a1da <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a1ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	da12      	bge.n	800a1da <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	333f      	adds	r3, #63	; 0x3f
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 facc 	bl	800a772 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	3301      	adds	r3, #1
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d3ce      	bcc.n	800a188 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695a      	ldr	r2, [r3, #20]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a1f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f007 f8a6 	bl	8011350 <USB_ReadInterrupts>
 800a204:	4603      	mov	r3, r0
 800a206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a20a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a20e:	d155      	bne.n	800a2bc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a210:	2301      	movs	r3, #1
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
 800a214:	e045      	b.n	800a2a2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a226:	6879      	ldr	r1, [r7, #4]
 800a228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22a:	4613      	mov	r3, r2
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d12e      	bne.n	800a29c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a23e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a240:	2b00      	cmp	r3, #0
 800a242:	da2b      	bge.n	800a29c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a250:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a254:	429a      	cmp	r2, r3
 800a256:	d121      	bne.n	800a29c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25c:	4613      	mov	r3, r2
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	440b      	add	r3, r1
 800a266:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a26a:	2201      	movs	r2, #1
 800a26c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10a      	bne.n	800a29c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	69fa      	ldr	r2, [r7, #28]
 800a290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a298:	6053      	str	r3, [r2, #4]
            break;
 800a29a:	e007      	b.n	800a2ac <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	3301      	adds	r3, #1
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d3b4      	bcc.n	800a216 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695a      	ldr	r2, [r3, #20]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a2ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f007 f845 	bl	8011350 <USB_ReadInterrupts>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d0:	d10a      	bne.n	800a2e8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f009 f944 	bl	8013560 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695a      	ldr	r2, [r3, #20]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a2e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f007 f82f 	bl	8011350 <USB_ReadInterrupts>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d115      	bne.n	800a328 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f009 f934 	bl	801357c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6859      	ldr	r1, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	430a      	orrs	r2, r1
 800a322:	605a      	str	r2, [r3, #4]
 800a324:	e000      	b.n	800a328 <HAL_PCD_IRQHandler+0x920>
      return;
 800a326:	bf00      	nop
    }
  }
}
 800a328:	3734      	adds	r7, #52	; 0x34
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd90      	pop	{r4, r7, pc}

0800a32e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_PCD_SetAddress+0x1a>
 800a344:	2302      	movs	r3, #2
 800a346:	e013      	b.n	800a370 <HAL_PCD_SetAddress+0x42>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f006 ff8d 	bl	8011280 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	4603      	mov	r3, r0
 800a388:	70fb      	strb	r3, [r7, #3]
 800a38a:	460b      	mov	r3, r1
 800a38c:	803b      	strh	r3, [r7, #0]
 800a38e:	4613      	mov	r3, r2
 800a390:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da0f      	bge.n	800a3be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	f003 020f 	and.w	r2, r3, #15
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	3338      	adds	r3, #56	; 0x38
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	705a      	strb	r2, [r3, #1]
 800a3bc:	e00f      	b.n	800a3de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3be:	78fb      	ldrb	r3, [r7, #3]
 800a3c0:	f003 020f 	and.w	r2, r3, #15
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a3de:	78fb      	ldrb	r3, [r7, #3]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a3ea:	883a      	ldrh	r2, [r7, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	78ba      	ldrb	r2, [r7, #2]
 800a3f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	785b      	ldrb	r3, [r3, #1]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d004      	beq.n	800a408 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	b29a      	uxth	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a408:	78bb      	ldrb	r3, [r7, #2]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d102      	bne.n	800a414 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <HAL_PCD_EP_Open+0xaa>
 800a41e:	2302      	movs	r3, #2
 800a420:	e00e      	b.n	800a440 <HAL_PCD_EP_Open+0xc8>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68f9      	ldr	r1, [r7, #12]
 800a430:	4618      	mov	r0, r3
 800a432:	f006 f8af 	bl	8010594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a43e:	7afb      	ldrb	r3, [r7, #11]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	da0f      	bge.n	800a47c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	f003 020f 	and.w	r2, r3, #15
 800a462:	4613      	mov	r3, r2
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	4413      	add	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	3338      	adds	r3, #56	; 0x38
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	4413      	add	r3, r2
 800a470:	3304      	adds	r3, #4
 800a472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	705a      	strb	r2, [r3, #1]
 800a47a:	e00f      	b.n	800a49c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	f003 020f 	and.w	r2, r3, #15
 800a482:	4613      	mov	r3, r2
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	4413      	add	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	4413      	add	r3, r2
 800a492:	3304      	adds	r3, #4
 800a494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_PCD_EP_Close+0x6e>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e00e      	b.n	800a4d4 <HAL_PCD_EP_Close+0x8c>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68f9      	ldr	r1, [r7, #12]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f006 f8ed 	bl	80106a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	f003 020f 	and.w	r2, r3, #15
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	4413      	add	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	3304      	adds	r3, #4
 800a504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2200      	movs	r2, #0
 800a516:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2200      	movs	r2, #0
 800a51c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a51e:	7afb      	ldrb	r3, [r7, #11]
 800a520:	f003 030f 	and.w	r3, r3, #15
 800a524:	b2da      	uxtb	r2, r3
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a52a:	7afb      	ldrb	r3, [r7, #11]
 800a52c:	f003 030f 	and.w	r3, r3, #15
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f006 fb6e 	bl	8010c1c <USB_EP0StartXfer>
 800a540:	e005      	b.n	800a54e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6979      	ldr	r1, [r7, #20]
 800a548:	4618      	mov	r0, r3
 800a54a:	f006 f987 	bl	801085c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	f003 020f 	and.w	r2, r3, #15
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	4613      	mov	r3, r2
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	4413      	add	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	440b      	add	r3, r1
 800a576:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a57a:	681b      	ldr	r3, [r3, #0]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	460b      	mov	r3, r1
 800a596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	f003 020f 	and.w	r2, r3, #15
 800a59e:	4613      	mov	r3, r2
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	3338      	adds	r3, #56	; 0x38
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5c8:	7afb      	ldrb	r3, [r7, #11]
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	f003 030f 	and.w	r3, r3, #15
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d106      	bne.n	800a5ec <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6979      	ldr	r1, [r7, #20]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f006 fb19 	bl	8010c1c <USB_EP0StartXfer>
 800a5ea:	e005      	b.n	800a5f8 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6979      	ldr	r1, [r7, #20]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f006 f932 	bl	801085c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	460b      	mov	r3, r1
 800a60c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	f003 020f 	and.w	r2, r3, #15
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d901      	bls.n	800a620 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e04e      	b.n	800a6be <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a624:	2b00      	cmp	r3, #0
 800a626:	da0f      	bge.n	800a648 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	f003 020f 	and.w	r2, r3, #15
 800a62e:	4613      	mov	r3, r2
 800a630:	00db      	lsls	r3, r3, #3
 800a632:	4413      	add	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	3338      	adds	r3, #56	; 0x38
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	4413      	add	r3, r2
 800a63c:	3304      	adds	r3, #4
 800a63e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2201      	movs	r2, #1
 800a644:	705a      	strb	r2, [r3, #1]
 800a646:	e00d      	b.n	800a664 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a648:	78fa      	ldrb	r2, [r7, #3]
 800a64a:	4613      	mov	r3, r2
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	4413      	add	r3, r2
 800a65a:	3304      	adds	r3, #4
 800a65c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2201      	movs	r2, #1
 800a668:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a66a:	78fb      	ldrb	r3, [r7, #3]
 800a66c:	f003 030f 	and.w	r3, r3, #15
 800a670:	b2da      	uxtb	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d101      	bne.n	800a684 <HAL_PCD_EP_SetStall+0x82>
 800a680:	2302      	movs	r3, #2
 800a682:	e01c      	b.n	800a6be <HAL_PCD_EP_SetStall+0xbc>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68f9      	ldr	r1, [r7, #12]
 800a692:	4618      	mov	r0, r3
 800a694:	f006 fd20 	bl	80110d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	f003 030f 	and.w	r3, r3, #15
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d108      	bne.n	800a6b4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f006 ff12 	bl	80114d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a6d2:	78fb      	ldrb	r3, [r7, #3]
 800a6d4:	f003 020f 	and.w	r2, r3, #15
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d901      	bls.n	800a6e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e042      	b.n	800a76a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a6e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	da0f      	bge.n	800a70c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	f003 020f 	and.w	r2, r3, #15
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	00db      	lsls	r3, r3, #3
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	3338      	adds	r3, #56	; 0x38
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	4413      	add	r3, r2
 800a700:	3304      	adds	r3, #4
 800a702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	705a      	strb	r2, [r3, #1]
 800a70a:	e00f      	b.n	800a72c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	f003 020f 	and.w	r2, r3, #15
 800a712:	4613      	mov	r3, r2
 800a714:	00db      	lsls	r3, r3, #3
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	4413      	add	r3, r2
 800a722:	3304      	adds	r3, #4
 800a724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	f003 030f 	and.w	r3, r3, #15
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a744:	2b01      	cmp	r3, #1
 800a746:	d101      	bne.n	800a74c <HAL_PCD_EP_ClrStall+0x86>
 800a748:	2302      	movs	r3, #2
 800a74a:	e00e      	b.n	800a76a <HAL_PCD_EP_ClrStall+0xa4>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68f9      	ldr	r1, [r7, #12]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f006 fd2a 	bl	80111b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	460b      	mov	r3, r1
 800a77c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a77e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a782:	2b00      	cmp	r3, #0
 800a784:	da0c      	bge.n	800a7a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a786:	78fb      	ldrb	r3, [r7, #3]
 800a788:	f003 020f 	and.w	r2, r3, #15
 800a78c:	4613      	mov	r3, r2
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	3338      	adds	r3, #56	; 0x38
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	4413      	add	r3, r2
 800a79a:	3304      	adds	r3, #4
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	e00c      	b.n	800a7ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	f003 020f 	and.w	r2, r3, #15
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68f9      	ldr	r1, [r7, #12]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f006 fb4d 	bl	8010e60 <USB_EPStopXfer>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a7ca:	7afb      	ldrb	r3, [r7, #11]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	3338      	adds	r3, #56	; 0x38
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6a1a      	ldr	r2, [r3, #32]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	429a      	cmp	r2, r3
 800a806:	d901      	bls.n	800a80c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e067      	b.n	800a8dc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	699a      	ldr	r2, [r3, #24]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6a1b      	ldr	r3, [r3, #32]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	69fa      	ldr	r2, [r7, #28]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d902      	bls.n	800a828 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	3303      	adds	r3, #3
 800a82c:	089b      	lsrs	r3, r3, #2
 800a82e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a830:	e026      	b.n	800a880 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	699a      	ldr	r2, [r3, #24]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	69fa      	ldr	r2, [r7, #28]
 800a844:	429a      	cmp	r2, r3
 800a846:	d902      	bls.n	800a84e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	3303      	adds	r3, #3
 800a852:	089b      	lsrs	r3, r3, #2
 800a854:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6919      	ldr	r1, [r3, #16]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	b29b      	uxth	r3, r3
 800a862:	6978      	ldr	r0, [r7, #20]
 800a864:	f006 fba6 	bl	8010fb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	691a      	ldr	r2, [r3, #16]
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	441a      	add	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6a1a      	ldr	r2, [r3, #32]
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	441a      	add	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	015a      	lsls	r2, r3, #5
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	4413      	add	r3, r2
 800a888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	429a      	cmp	r2, r3
 800a894:	d809      	bhi.n	800a8aa <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d203      	bcs.n	800a8aa <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1c3      	bne.n	800a832 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	699a      	ldr	r2, [r3, #24]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d811      	bhi.n	800a8da <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	2201      	movs	r2, #1
 800a8be:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	43db      	mvns	r3, r3
 800a8d0:	6939      	ldr	r1, [r7, #16]
 800a8d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3720      	adds	r7, #32
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	333c      	adds	r3, #60	; 0x3c
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4a19      	ldr	r2, [pc, #100]	; (800a97c <PCD_EP_OutXfrComplete_int+0x98>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d124      	bne.n	800a964 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00a      	beq.n	800a93a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a930:	461a      	mov	r2, r3
 800a932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a936:	6093      	str	r3, [r2, #8]
 800a938:	e01a      	b.n	800a970 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f003 0320 	and.w	r3, r3, #32
 800a940:	2b00      	cmp	r3, #0
 800a942:	d008      	beq.n	800a956 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a950:	461a      	mov	r2, r3
 800a952:	2320      	movs	r3, #32
 800a954:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f008 fd2b 	bl	80133b8 <HAL_PCD_DataOutStageCallback>
 800a962:	e005      	b.n	800a970 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f008 fd24 	bl	80133b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	4f54310a 	.word	0x4f54310a

0800a980 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	333c      	adds	r3, #60	; 0x3c
 800a998:	3304      	adds	r3, #4
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4a0c      	ldr	r2, [pc, #48]	; (800a9e4 <PCD_EP_OutSetupPacket_int+0x64>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d90e      	bls.n	800a9d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d009      	beq.n	800a9d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f008 fcdd 	bl	8013394 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	4f54300a 	.word	0x4f54300a

0800a9e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d107      	bne.n	800aa16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800aa06:	883b      	ldrh	r3, [r7, #0]
 800aa08:	0419      	lsls	r1, r3, #16
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	629a      	str	r2, [r3, #40]	; 0x28
 800aa14:	e028      	b.n	800aa68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1c:	0c1b      	lsrs	r3, r3, #16
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	4413      	add	r3, r2
 800aa22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aa24:	2300      	movs	r3, #0
 800aa26:	73fb      	strb	r3, [r7, #15]
 800aa28:	e00d      	b.n	800aa46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	3340      	adds	r3, #64	; 0x40
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	0c1b      	lsrs	r3, r3, #16
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	3301      	adds	r3, #1
 800aa44:	73fb      	strb	r3, [r7, #15]
 800aa46:	7bfa      	ldrb	r2, [r7, #15]
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d3ec      	bcc.n	800aa2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aa50:	883b      	ldrh	r3, [r7, #0]
 800aa52:	0418      	lsls	r0, r3, #16
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6819      	ldr	r1, [r3, #0]
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	4302      	orrs	r2, r0
 800aa60:	3340      	adds	r3, #64	; 0x40
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	440b      	add	r3, r1
 800aa66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b083      	sub	sp, #12
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	887a      	ldrh	r2, [r7, #2]
 800aa88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaca:	f043 0303 	orr.w	r3, r3, #3
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aae4:	4b05      	ldr	r3, [pc, #20]	; (800aafc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a04      	ldr	r2, [pc, #16]	; (800aafc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aaea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaee:	6013      	str	r3, [r2, #0]
}
 800aaf0:	bf00      	nop
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	40007000 	.word	0x40007000

0800ab00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ab00:	b480      	push	{r7}
 800ab02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ab04:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <HAL_PWREx_GetVoltageRange+0x18>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	40007000 	.word	0x40007000

0800ab1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab2a:	d130      	bne.n	800ab8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab2c:	4b23      	ldr	r3, [pc, #140]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab38:	d038      	beq.n	800abac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab3a:	4b20      	ldr	r3, [pc, #128]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab42:	4a1e      	ldr	r2, [pc, #120]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab4a:	4b1d      	ldr	r3, [pc, #116]	; (800abc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2232      	movs	r2, #50	; 0x32
 800ab50:	fb02 f303 	mul.w	r3, r2, r3
 800ab54:	4a1b      	ldr	r2, [pc, #108]	; (800abc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ab56:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5a:	0c9b      	lsrs	r3, r3, #18
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab60:	e002      	b.n	800ab68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab68:	4b14      	ldr	r3, [pc, #80]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab74:	d102      	bne.n	800ab7c <HAL_PWREx_ControlVoltageScaling+0x60>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1f2      	bne.n	800ab62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab7c:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab88:	d110      	bne.n	800abac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e00f      	b.n	800abae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab9a:	d007      	beq.n	800abac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ab9c:	4b07      	ldr	r3, [pc, #28]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aba4:	4a05      	ldr	r2, [pc, #20]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800aba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	40007000 	.word	0x40007000
 800abc0:	2001c05c 	.word	0x2001c05c
 800abc4:	431bde83 	.word	0x431bde83

0800abc8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800abc8:	b480      	push	{r7}
 800abca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	4a04      	ldr	r2, [pc, #16]	; (800abe4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800abd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abd6:	6053      	str	r3, [r2, #4]
}
 800abd8:	bf00      	nop
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40007000 	.word	0x40007000

0800abe8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800abe8:	b480      	push	{r7}
 800abea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800abec:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <HAL_PWREx_EnableVddIO2+0x1c>)
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	4a04      	ldr	r2, [pc, #16]	; (800ac04 <HAL_PWREx_EnableVddIO2+0x1c>)
 800abf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abf6:	6053      	str	r3, [r2, #4]
}
 800abf8:	bf00      	nop
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	40007000 	.word	0x40007000

0800ac08 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ac10:	f7fb fed2 	bl	80069b8 <HAL_GetTick>
 800ac14:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e069      	b.n	800acf4 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10b      	bne.n	800ac44 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7f7 f937 	bl	8001ea8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800ac3a:	f241 3188 	movw	r1, #5000	; 0x1388
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f85e 	bl	800ad00 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	3b01      	subs	r3, #1
 800ac54:	021a      	lsls	r2, r3, #8
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	2120      	movs	r1, #32
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f856 	bl	800ad1c <QSPI_WaitFlagStateUntilTimeout>
 800ac70:	4603      	mov	r3, r0
 800ac72:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ac74:	7afb      	ldrb	r3, [r7, #11]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d137      	bne.n	800acea <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac84:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	6852      	ldr	r2, [r2, #4]
 800ac8c:	0611      	lsls	r1, r2, #24
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	68d2      	ldr	r2, [r2, #12]
 800ac92:	4311      	orrs	r1, r2
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	69d2      	ldr	r2, [r2, #28]
 800ac98:	4311      	orrs	r1, r2
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	6a12      	ldr	r2, [r2, #32]
 800ac9e:	4311      	orrs	r1, r2
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	430b      	orrs	r3, r1
 800aca6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	4b13      	ldr	r3, [pc, #76]	; (800acfc <HAL_QSPI_Init+0xf4>)
 800acb0:	4013      	ands	r3, r2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	6912      	ldr	r2, [r2, #16]
 800acb6:	0411      	lsls	r1, r2, #16
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6952      	ldr	r2, [r2, #20]
 800acbc:	4311      	orrs	r1, r2
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	6992      	ldr	r2, [r2, #24]
 800acc2:	4311      	orrs	r1, r2
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	6812      	ldr	r2, [r2, #0]
 800acc8:	430b      	orrs	r3, r1
 800acca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f042 0201 	orr.w	r2, r2, #1
 800acda:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800acf2:	7afb      	ldrb	r3, [r7, #11]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	ffe0f8fe 	.word	0xffe0f8fe

0800ad00 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	603b      	str	r3, [r7, #0]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ad2c:	e01a      	b.n	800ad64 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad34:	d016      	beq.n	800ad64 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad36:	f7fb fe3f 	bl	80069b8 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d302      	bcc.n	800ad4c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10b      	bne.n	800ad64 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2204      	movs	r2, #4
 800ad50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad58:	f043 0201 	orr.w	r2, r3, #1
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e00e      	b.n	800ad82 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	689a      	ldr	r2, [r3, #8]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bf14      	ite	ne
 800ad72:	2301      	movne	r3, #1
 800ad74:	2300      	moveq	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d1d6      	bne.n	800ad2e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	f000 bc08 	b.w	800b5b0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ada0:	4b96      	ldr	r3, [pc, #600]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f003 030c 	and.w	r3, r3, #12
 800ada8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800adaa:	4b94      	ldr	r3, [pc, #592]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	f003 0303 	and.w	r3, r3, #3
 800adb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0310 	and.w	r3, r3, #16
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 80e4 	beq.w	800af8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d007      	beq.n	800add8 <HAL_RCC_OscConfig+0x4c>
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	2b0c      	cmp	r3, #12
 800adcc:	f040 808b 	bne.w	800aee6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	2b01      	cmp	r3, #1
 800add4:	f040 8087 	bne.w	800aee6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800add8:	4b88      	ldr	r3, [pc, #544]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <HAL_RCC_OscConfig+0x64>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e3df      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a1a      	ldr	r2, [r3, #32]
 800adf4:	4b81      	ldr	r3, [pc, #516]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0308 	and.w	r3, r3, #8
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d004      	beq.n	800ae0a <HAL_RCC_OscConfig+0x7e>
 800ae00:	4b7e      	ldr	r3, [pc, #504]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae08:	e005      	b.n	800ae16 <HAL_RCC_OscConfig+0x8a>
 800ae0a:	4b7c      	ldr	r3, [pc, #496]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae10:	091b      	lsrs	r3, r3, #4
 800ae12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d223      	bcs.n	800ae62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 fd92 	bl	800b948 <RCC_SetFlashLatencyFromMSIRange>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e3c0      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae2e:	4b73      	ldr	r3, [pc, #460]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a72      	ldr	r2, [pc, #456]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae34:	f043 0308 	orr.w	r3, r3, #8
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	4b70      	ldr	r3, [pc, #448]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	496d      	ldr	r1, [pc, #436]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae4c:	4b6b      	ldr	r3, [pc, #428]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	021b      	lsls	r3, r3, #8
 800ae5a:	4968      	ldr	r1, [pc, #416]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	604b      	str	r3, [r1, #4]
 800ae60:	e025      	b.n	800aeae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae62:	4b66      	ldr	r3, [pc, #408]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a65      	ldr	r2, [pc, #404]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae68:	f043 0308 	orr.w	r3, r3, #8
 800ae6c:	6013      	str	r3, [r2, #0]
 800ae6e:	4b63      	ldr	r3, [pc, #396]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	4960      	ldr	r1, [pc, #384]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae80:	4b5e      	ldr	r3, [pc, #376]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	021b      	lsls	r3, r3, #8
 800ae8e:	495b      	ldr	r1, [pc, #364]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800ae90:	4313      	orrs	r3, r2
 800ae92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d109      	bne.n	800aeae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fd52 	bl	800b948 <RCC_SetFlashLatencyFromMSIRange>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e380      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aeae:	f000 fc87 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	4b51      	ldr	r3, [pc, #324]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	091b      	lsrs	r3, r3, #4
 800aeba:	f003 030f 	and.w	r3, r3, #15
 800aebe:	4950      	ldr	r1, [pc, #320]	; (800b000 <HAL_RCC_OscConfig+0x274>)
 800aec0:	5ccb      	ldrb	r3, [r1, r3]
 800aec2:	f003 031f 	and.w	r3, r3, #31
 800aec6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeca:	4a4e      	ldr	r2, [pc, #312]	; (800b004 <HAL_RCC_OscConfig+0x278>)
 800aecc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800aece:	4b4e      	ldr	r3, [pc, #312]	; (800b008 <HAL_RCC_OscConfig+0x27c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fb fd20 	bl	8006918 <HAL_InitTick>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d052      	beq.n	800af88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
 800aee4:	e364      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d032      	beq.n	800af54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800aeee:	4b43      	ldr	r3, [pc, #268]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a42      	ldr	r2, [pc, #264]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800aef4:	f043 0301 	orr.w	r3, r3, #1
 800aef8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aefa:	f7fb fd5d 	bl	80069b8 <HAL_GetTick>
 800aefe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800af00:	e008      	b.n	800af14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800af02:	f7fb fd59 	bl	80069b8 <HAL_GetTick>
 800af06:	4602      	mov	r2, r0
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d901      	bls.n	800af14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e34d      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800af14:	4b39      	ldr	r3, [pc, #228]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0302 	and.w	r3, r3, #2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0f0      	beq.n	800af02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800af20:	4b36      	ldr	r3, [pc, #216]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a35      	ldr	r2, [pc, #212]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af26:	f043 0308 	orr.w	r3, r3, #8
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	4b33      	ldr	r3, [pc, #204]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	4930      	ldr	r1, [pc, #192]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af3e:	4b2f      	ldr	r3, [pc, #188]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	021b      	lsls	r3, r3, #8
 800af4c:	492b      	ldr	r1, [pc, #172]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af4e:	4313      	orrs	r3, r2
 800af50:	604b      	str	r3, [r1, #4]
 800af52:	e01a      	b.n	800af8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800af54:	4b29      	ldr	r3, [pc, #164]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a28      	ldr	r2, [pc, #160]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af5a:	f023 0301 	bic.w	r3, r3, #1
 800af5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800af60:	f7fb fd2a 	bl	80069b8 <HAL_GetTick>
 800af64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800af66:	e008      	b.n	800af7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800af68:	f7fb fd26 	bl	80069b8 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d901      	bls.n	800af7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e31a      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800af7a:	4b20      	ldr	r3, [pc, #128]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0302 	and.w	r3, r3, #2
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f0      	bne.n	800af68 <HAL_RCC_OscConfig+0x1dc>
 800af86:	e000      	b.n	800af8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b00      	cmp	r3, #0
 800af94:	d073      	beq.n	800b07e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	2b08      	cmp	r3, #8
 800af9a:	d005      	beq.n	800afa8 <HAL_RCC_OscConfig+0x21c>
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	2b0c      	cmp	r3, #12
 800afa0:	d10e      	bne.n	800afc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d10b      	bne.n	800afc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afa8:	4b14      	ldr	r3, [pc, #80]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d063      	beq.n	800b07c <HAL_RCC_OscConfig+0x2f0>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d15f      	bne.n	800b07c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e2f7      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afc8:	d106      	bne.n	800afd8 <HAL_RCC_OscConfig+0x24c>
 800afca:	4b0c      	ldr	r3, [pc, #48]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a0b      	ldr	r2, [pc, #44]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800afd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	e025      	b.n	800b024 <HAL_RCC_OscConfig+0x298>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afe0:	d114      	bne.n	800b00c <HAL_RCC_OscConfig+0x280>
 800afe2:	4b06      	ldr	r3, [pc, #24]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a05      	ldr	r2, [pc, #20]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800afe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afec:	6013      	str	r3, [r2, #0]
 800afee:	4b03      	ldr	r3, [pc, #12]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a02      	ldr	r2, [pc, #8]	; (800affc <HAL_RCC_OscConfig+0x270>)
 800aff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aff8:	6013      	str	r3, [r2, #0]
 800affa:	e013      	b.n	800b024 <HAL_RCC_OscConfig+0x298>
 800affc:	40021000 	.word	0x40021000
 800b000:	08014af0 	.word	0x08014af0
 800b004:	2001c05c 	.word	0x2001c05c
 800b008:	2001c190 	.word	0x2001c190
 800b00c:	4ba0      	ldr	r3, [pc, #640]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a9f      	ldr	r2, [pc, #636]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	4b9d      	ldr	r3, [pc, #628]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a9c      	ldr	r2, [pc, #624]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b01e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d013      	beq.n	800b054 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b02c:	f7fb fcc4 	bl	80069b8 <HAL_GetTick>
 800b030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b032:	e008      	b.n	800b046 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b034:	f7fb fcc0 	bl	80069b8 <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b64      	cmp	r3, #100	; 0x64
 800b040:	d901      	bls.n	800b046 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e2b4      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b046:	4b92      	ldr	r3, [pc, #584]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0f0      	beq.n	800b034 <HAL_RCC_OscConfig+0x2a8>
 800b052:	e014      	b.n	800b07e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b054:	f7fb fcb0 	bl	80069b8 <HAL_GetTick>
 800b058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b05a:	e008      	b.n	800b06e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b05c:	f7fb fcac 	bl	80069b8 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	2b64      	cmp	r3, #100	; 0x64
 800b068:	d901      	bls.n	800b06e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e2a0      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b06e:	4b88      	ldr	r3, [pc, #544]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1f0      	bne.n	800b05c <HAL_RCC_OscConfig+0x2d0>
 800b07a:	e000      	b.n	800b07e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b07c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d060      	beq.n	800b14c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d005      	beq.n	800b09c <HAL_RCC_OscConfig+0x310>
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2b0c      	cmp	r3, #12
 800b094:	d119      	bne.n	800b0ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d116      	bne.n	800b0ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b09c:	4b7c      	ldr	r3, [pc, #496]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d005      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x328>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e27d      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0b4:	4b76      	ldr	r3, [pc, #472]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	061b      	lsls	r3, r3, #24
 800b0c2:	4973      	ldr	r1, [pc, #460]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0c8:	e040      	b.n	800b14c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d023      	beq.n	800b11a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0d2:	4b6f      	ldr	r3, [pc, #444]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a6e      	ldr	r2, [pc, #440]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b0d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0de:	f7fb fc6b 	bl	80069b8 <HAL_GetTick>
 800b0e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0e4:	e008      	b.n	800b0f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0e6:	f7fb fc67 	bl	80069b8 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d901      	bls.n	800b0f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e25b      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0f8:	4b65      	ldr	r3, [pc, #404]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0f0      	beq.n	800b0e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b104:	4b62      	ldr	r3, [pc, #392]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	061b      	lsls	r3, r3, #24
 800b112:	495f      	ldr	r1, [pc, #380]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b114:	4313      	orrs	r3, r2
 800b116:	604b      	str	r3, [r1, #4]
 800b118:	e018      	b.n	800b14c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b11a:	4b5d      	ldr	r3, [pc, #372]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a5c      	ldr	r2, [pc, #368]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b126:	f7fb fc47 	bl	80069b8 <HAL_GetTick>
 800b12a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b12c:	e008      	b.n	800b140 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b12e:	f7fb fc43 	bl	80069b8 <HAL_GetTick>
 800b132:	4602      	mov	r2, r0
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d901      	bls.n	800b140 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e237      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b140:	4b53      	ldr	r3, [pc, #332]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1f0      	bne.n	800b12e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0308 	and.w	r3, r3, #8
 800b154:	2b00      	cmp	r3, #0
 800b156:	d03c      	beq.n	800b1d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d01c      	beq.n	800b19a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b160:	4b4b      	ldr	r3, [pc, #300]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b166:	4a4a      	ldr	r2, [pc, #296]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b168:	f043 0301 	orr.w	r3, r3, #1
 800b16c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b170:	f7fb fc22 	bl	80069b8 <HAL_GetTick>
 800b174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b176:	e008      	b.n	800b18a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b178:	f7fb fc1e 	bl	80069b8 <HAL_GetTick>
 800b17c:	4602      	mov	r2, r0
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	2b02      	cmp	r3, #2
 800b184:	d901      	bls.n	800b18a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e212      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b18a:	4b41      	ldr	r3, [pc, #260]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b18c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0ef      	beq.n	800b178 <HAL_RCC_OscConfig+0x3ec>
 800b198:	e01b      	b.n	800b1d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b19a:	4b3d      	ldr	r3, [pc, #244]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b19c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1a0:	4a3b      	ldr	r2, [pc, #236]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b1a2:	f023 0301 	bic.w	r3, r3, #1
 800b1a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1aa:	f7fb fc05 	bl	80069b8 <HAL_GetTick>
 800b1ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b1b0:	e008      	b.n	800b1c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1b2:	f7fb fc01 	bl	80069b8 <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d901      	bls.n	800b1c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e1f5      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b1c4:	4b32      	ldr	r3, [pc, #200]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b1c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1ef      	bne.n	800b1b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 80a6 	beq.w	800b32c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b1e4:	4b2a      	ldr	r3, [pc, #168]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b1e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10d      	bne.n	800b20c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1f0:	4b27      	ldr	r3, [pc, #156]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f4:	4a26      	ldr	r2, [pc, #152]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b1f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1fa:	6593      	str	r3, [r2, #88]	; 0x58
 800b1fc:	4b24      	ldr	r3, [pc, #144]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b204:	60bb      	str	r3, [r7, #8]
 800b206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b208:	2301      	movs	r3, #1
 800b20a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b20c:	4b21      	ldr	r3, [pc, #132]	; (800b294 <HAL_RCC_OscConfig+0x508>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b214:	2b00      	cmp	r3, #0
 800b216:	d118      	bne.n	800b24a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b218:	4b1e      	ldr	r3, [pc, #120]	; (800b294 <HAL_RCC_OscConfig+0x508>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a1d      	ldr	r2, [pc, #116]	; (800b294 <HAL_RCC_OscConfig+0x508>)
 800b21e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b224:	f7fb fbc8 	bl	80069b8 <HAL_GetTick>
 800b228:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b22a:	e008      	b.n	800b23e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b22c:	f7fb fbc4 	bl	80069b8 <HAL_GetTick>
 800b230:	4602      	mov	r2, r0
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	2b02      	cmp	r3, #2
 800b238:	d901      	bls.n	800b23e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b23a:	2303      	movs	r3, #3
 800b23c:	e1b8      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b23e:	4b15      	ldr	r3, [pc, #84]	; (800b294 <HAL_RCC_OscConfig+0x508>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0f0      	beq.n	800b22c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d108      	bne.n	800b264 <HAL_RCC_OscConfig+0x4d8>
 800b252:	4b0f      	ldr	r3, [pc, #60]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b258:	4a0d      	ldr	r2, [pc, #52]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b25a:	f043 0301 	orr.w	r3, r3, #1
 800b25e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b262:	e029      	b.n	800b2b8 <HAL_RCC_OscConfig+0x52c>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	2b05      	cmp	r3, #5
 800b26a:	d115      	bne.n	800b298 <HAL_RCC_OscConfig+0x50c>
 800b26c:	4b08      	ldr	r3, [pc, #32]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b272:	4a07      	ldr	r2, [pc, #28]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b274:	f043 0304 	orr.w	r3, r3, #4
 800b278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b27c:	4b04      	ldr	r3, [pc, #16]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b282:	4a03      	ldr	r2, [pc, #12]	; (800b290 <HAL_RCC_OscConfig+0x504>)
 800b284:	f043 0301 	orr.w	r3, r3, #1
 800b288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b28c:	e014      	b.n	800b2b8 <HAL_RCC_OscConfig+0x52c>
 800b28e:	bf00      	nop
 800b290:	40021000 	.word	0x40021000
 800b294:	40007000 	.word	0x40007000
 800b298:	4b9d      	ldr	r3, [pc, #628]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b29e:	4a9c      	ldr	r2, [pc, #624]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b2a0:	f023 0301 	bic.w	r3, r3, #1
 800b2a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2a8:	4b99      	ldr	r3, [pc, #612]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ae:	4a98      	ldr	r2, [pc, #608]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b2b0:	f023 0304 	bic.w	r3, r3, #4
 800b2b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d016      	beq.n	800b2ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2c0:	f7fb fb7a 	bl	80069b8 <HAL_GetTick>
 800b2c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2c6:	e00a      	b.n	800b2de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2c8:	f7fb fb76 	bl	80069b8 <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d901      	bls.n	800b2de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e168      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2de:	4b8c      	ldr	r3, [pc, #560]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e4:	f003 0302 	and.w	r3, r3, #2
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0ed      	beq.n	800b2c8 <HAL_RCC_OscConfig+0x53c>
 800b2ec:	e015      	b.n	800b31a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ee:	f7fb fb63 	bl	80069b8 <HAL_GetTick>
 800b2f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b2f4:	e00a      	b.n	800b30c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2f6:	f7fb fb5f 	bl	80069b8 <HAL_GetTick>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	f241 3288 	movw	r2, #5000	; 0x1388
 800b304:	4293      	cmp	r3, r2
 800b306:	d901      	bls.n	800b30c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e151      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b30c:	4b80      	ldr	r3, [pc, #512]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b312:	f003 0302 	and.w	r3, r3, #2
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1ed      	bne.n	800b2f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b31a:	7ffb      	ldrb	r3, [r7, #31]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d105      	bne.n	800b32c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b320:	4b7b      	ldr	r3, [pc, #492]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b324:	4a7a      	ldr	r2, [pc, #488]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b32a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0320 	and.w	r3, r3, #32
 800b334:	2b00      	cmp	r3, #0
 800b336:	d03c      	beq.n	800b3b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01c      	beq.n	800b37a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b340:	4b73      	ldr	r3, [pc, #460]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b346:	4a72      	ldr	r2, [pc, #456]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b348:	f043 0301 	orr.w	r3, r3, #1
 800b34c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b350:	f7fb fb32 	bl	80069b8 <HAL_GetTick>
 800b354:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b356:	e008      	b.n	800b36a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b358:	f7fb fb2e 	bl	80069b8 <HAL_GetTick>
 800b35c:	4602      	mov	r2, r0
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	2b02      	cmp	r3, #2
 800b364:	d901      	bls.n	800b36a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b366:	2303      	movs	r3, #3
 800b368:	e122      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b36a:	4b69      	ldr	r3, [pc, #420]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b36c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b370:	f003 0302 	and.w	r3, r3, #2
 800b374:	2b00      	cmp	r3, #0
 800b376:	d0ef      	beq.n	800b358 <HAL_RCC_OscConfig+0x5cc>
 800b378:	e01b      	b.n	800b3b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b37a:	4b65      	ldr	r3, [pc, #404]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b37c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b380:	4a63      	ldr	r2, [pc, #396]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b382:	f023 0301 	bic.w	r3, r3, #1
 800b386:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b38a:	f7fb fb15 	bl	80069b8 <HAL_GetTick>
 800b38e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b390:	e008      	b.n	800b3a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b392:	f7fb fb11 	bl	80069b8 <HAL_GetTick>
 800b396:	4602      	mov	r2, r0
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d901      	bls.n	800b3a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e105      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b3a4:	4b5a      	ldr	r3, [pc, #360]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b3a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3aa:	f003 0302 	and.w	r3, r3, #2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1ef      	bne.n	800b392 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f000 80f9 	beq.w	800b5ae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	f040 80cf 	bne.w	800b564 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b3c6:	4b52      	ldr	r3, [pc, #328]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f003 0203 	and.w	r2, r3, #3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d12c      	bne.n	800b434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d123      	bne.n	800b434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d11b      	bne.n	800b434 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b406:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b408:	429a      	cmp	r2, r3
 800b40a:	d113      	bne.n	800b434 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b416:	085b      	lsrs	r3, r3, #1
 800b418:	3b01      	subs	r3, #1
 800b41a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d109      	bne.n	800b434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	3b01      	subs	r3, #1
 800b42e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b430:	429a      	cmp	r2, r3
 800b432:	d071      	beq.n	800b518 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	2b0c      	cmp	r3, #12
 800b438:	d068      	beq.n	800b50c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b43a:	4b35      	ldr	r3, [pc, #212]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d105      	bne.n	800b452 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b446:	4b32      	ldr	r3, [pc, #200]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e0ac      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b456:	4b2e      	ldr	r3, [pc, #184]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a2d      	ldr	r2, [pc, #180]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b45c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b460:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b462:	f7fb faa9 	bl	80069b8 <HAL_GetTick>
 800b466:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b468:	e008      	b.n	800b47c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b46a:	f7fb faa5 	bl	80069b8 <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	2b02      	cmp	r3, #2
 800b476:	d901      	bls.n	800b47c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e099      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b47c:	4b24      	ldr	r3, [pc, #144]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1f0      	bne.n	800b46a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b488:	4b21      	ldr	r3, [pc, #132]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b48a:	68da      	ldr	r2, [r3, #12]
 800b48c:	4b21      	ldr	r3, [pc, #132]	; (800b514 <HAL_RCC_OscConfig+0x788>)
 800b48e:	4013      	ands	r3, r2
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b498:	3a01      	subs	r2, #1
 800b49a:	0112      	lsls	r2, r2, #4
 800b49c:	4311      	orrs	r1, r2
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b4a2:	0212      	lsls	r2, r2, #8
 800b4a4:	4311      	orrs	r1, r2
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b4aa:	0852      	lsrs	r2, r2, #1
 800b4ac:	3a01      	subs	r2, #1
 800b4ae:	0552      	lsls	r2, r2, #21
 800b4b0:	4311      	orrs	r1, r2
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b4b6:	0852      	lsrs	r2, r2, #1
 800b4b8:	3a01      	subs	r2, #1
 800b4ba:	0652      	lsls	r2, r2, #25
 800b4bc:	4311      	orrs	r1, r2
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4c2:	06d2      	lsls	r2, r2, #27
 800b4c4:	430a      	orrs	r2, r1
 800b4c6:	4912      	ldr	r1, [pc, #72]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b4cc:	4b10      	ldr	r3, [pc, #64]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a0f      	ldr	r2, [pc, #60]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b4d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4d8:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4a0c      	ldr	r2, [pc, #48]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b4de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b4e4:	f7fb fa68 	bl	80069b8 <HAL_GetTick>
 800b4e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4ea:	e008      	b.n	800b4fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4ec:	f7fb fa64 	bl	80069b8 <HAL_GetTick>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d901      	bls.n	800b4fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e058      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4fe:	4b04      	ldr	r3, [pc, #16]	; (800b510 <HAL_RCC_OscConfig+0x784>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d0f0      	beq.n	800b4ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b50a:	e050      	b.n	800b5ae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e04f      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
 800b510:	40021000 	.word	0x40021000
 800b514:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b518:	4b27      	ldr	r3, [pc, #156]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d144      	bne.n	800b5ae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b524:	4b24      	ldr	r3, [pc, #144]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a23      	ldr	r2, [pc, #140]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b52a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b52e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b530:	4b21      	ldr	r3, [pc, #132]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	4a20      	ldr	r2, [pc, #128]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b53a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b53c:	f7fb fa3c 	bl	80069b8 <HAL_GetTick>
 800b540:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b542:	e008      	b.n	800b556 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b544:	f7fb fa38 	bl	80069b8 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d901      	bls.n	800b556 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e02c      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b556:	4b18      	ldr	r3, [pc, #96]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0f0      	beq.n	800b544 <HAL_RCC_OscConfig+0x7b8>
 800b562:	e024      	b.n	800b5ae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	2b0c      	cmp	r3, #12
 800b568:	d01f      	beq.n	800b5aa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b56a:	4b13      	ldr	r3, [pc, #76]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a12      	ldr	r2, [pc, #72]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b576:	f7fb fa1f 	bl	80069b8 <HAL_GetTick>
 800b57a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b57c:	e008      	b.n	800b590 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b57e:	f7fb fa1b 	bl	80069b8 <HAL_GetTick>
 800b582:	4602      	mov	r2, r0
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	1ad3      	subs	r3, r2, r3
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d901      	bls.n	800b590 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e00f      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b590:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f0      	bne.n	800b57e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b59c:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	4905      	ldr	r1, [pc, #20]	; (800b5b8 <HAL_RCC_OscConfig+0x82c>)
 800b5a2:	4b06      	ldr	r3, [pc, #24]	; (800b5bc <HAL_RCC_OscConfig+0x830>)
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	60cb      	str	r3, [r1, #12]
 800b5a8:	e001      	b.n	800b5ae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e000      	b.n	800b5b0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3720      	adds	r7, #32
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	40021000 	.word	0x40021000
 800b5bc:	feeefffc 	.word	0xfeeefffc

0800b5c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d101      	bne.n	800b5d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e0e7      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b5d4:	4b75      	ldr	r3, [pc, #468]	; (800b7ac <HAL_RCC_ClockConfig+0x1ec>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0307 	and.w	r3, r3, #7
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d910      	bls.n	800b604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5e2:	4b72      	ldr	r3, [pc, #456]	; (800b7ac <HAL_RCC_ClockConfig+0x1ec>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f023 0207 	bic.w	r2, r3, #7
 800b5ea:	4970      	ldr	r1, [pc, #448]	; (800b7ac <HAL_RCC_ClockConfig+0x1ec>)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5f2:	4b6e      	ldr	r3, [pc, #440]	; (800b7ac <HAL_RCC_ClockConfig+0x1ec>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d001      	beq.n	800b604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	e0cf      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d010      	beq.n	800b632 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	689a      	ldr	r2, [r3, #8]
 800b614:	4b66      	ldr	r3, [pc, #408]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d908      	bls.n	800b632 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b620:	4b63      	ldr	r3, [pc, #396]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	4960      	ldr	r1, [pc, #384]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d04c      	beq.n	800b6d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	2b03      	cmp	r3, #3
 800b644:	d107      	bne.n	800b656 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b646:	4b5a      	ldr	r3, [pc, #360]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d121      	bne.n	800b696 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e0a6      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d107      	bne.n	800b66e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b65e:	4b54      	ldr	r3, [pc, #336]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b666:	2b00      	cmp	r3, #0
 800b668:	d115      	bne.n	800b696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e09a      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d107      	bne.n	800b686 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b676:	4b4e      	ldr	r3, [pc, #312]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 0302 	and.w	r3, r3, #2
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e08e      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b686:	4b4a      	ldr	r3, [pc, #296]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e086      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b696:	4b46      	ldr	r3, [pc, #280]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	f023 0203 	bic.w	r2, r3, #3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4943      	ldr	r1, [pc, #268]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6a8:	f7fb f986 	bl	80069b8 <HAL_GetTick>
 800b6ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6ae:	e00a      	b.n	800b6c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6b0:	f7fb f982 	bl	80069b8 <HAL_GetTick>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d901      	bls.n	800b6c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	e06e      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6c6:	4b3a      	ldr	r3, [pc, #232]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f003 020c 	and.w	r2, r3, #12
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d1eb      	bne.n	800b6b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d010      	beq.n	800b706 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	689a      	ldr	r2, [r3, #8]
 800b6e8:	4b31      	ldr	r3, [pc, #196]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d208      	bcs.n	800b706 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6f4:	4b2e      	ldr	r3, [pc, #184]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	492b      	ldr	r1, [pc, #172]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b702:	4313      	orrs	r3, r2
 800b704:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b706:	4b29      	ldr	r3, [pc, #164]	; (800b7ac <HAL_RCC_ClockConfig+0x1ec>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d210      	bcs.n	800b736 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b714:	4b25      	ldr	r3, [pc, #148]	; (800b7ac <HAL_RCC_ClockConfig+0x1ec>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f023 0207 	bic.w	r2, r3, #7
 800b71c:	4923      	ldr	r1, [pc, #140]	; (800b7ac <HAL_RCC_ClockConfig+0x1ec>)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	4313      	orrs	r3, r2
 800b722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b724:	4b21      	ldr	r3, [pc, #132]	; (800b7ac <HAL_RCC_ClockConfig+0x1ec>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 0307 	and.w	r3, r3, #7
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d001      	beq.n	800b736 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e036      	b.n	800b7a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 0304 	and.w	r3, r3, #4
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d008      	beq.n	800b754 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b742:	4b1b      	ldr	r3, [pc, #108]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	4918      	ldr	r1, [pc, #96]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b750:	4313      	orrs	r3, r2
 800b752:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0308 	and.w	r3, r3, #8
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d009      	beq.n	800b774 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b760:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	4910      	ldr	r1, [pc, #64]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b770:	4313      	orrs	r3, r2
 800b772:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b774:	f000 f824 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800b778:	4602      	mov	r2, r0
 800b77a:	4b0d      	ldr	r3, [pc, #52]	; (800b7b0 <HAL_RCC_ClockConfig+0x1f0>)
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	091b      	lsrs	r3, r3, #4
 800b780:	f003 030f 	and.w	r3, r3, #15
 800b784:	490b      	ldr	r1, [pc, #44]	; (800b7b4 <HAL_RCC_ClockConfig+0x1f4>)
 800b786:	5ccb      	ldrb	r3, [r1, r3]
 800b788:	f003 031f 	and.w	r3, r3, #31
 800b78c:	fa22 f303 	lsr.w	r3, r2, r3
 800b790:	4a09      	ldr	r2, [pc, #36]	; (800b7b8 <HAL_RCC_ClockConfig+0x1f8>)
 800b792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b794:	4b09      	ldr	r3, [pc, #36]	; (800b7bc <HAL_RCC_ClockConfig+0x1fc>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fb f8bd 	bl	8006918 <HAL_InitTick>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	72fb      	strb	r3, [r7, #11]

  return status;
 800b7a2:	7afb      	ldrb	r3, [r7, #11]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	40022000 	.word	0x40022000
 800b7b0:	40021000 	.word	0x40021000
 800b7b4:	08014af0 	.word	0x08014af0
 800b7b8:	2001c05c 	.word	0x2001c05c
 800b7bc:	2001c190 	.word	0x2001c190

0800b7c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b089      	sub	sp, #36	; 0x24
 800b7c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	61fb      	str	r3, [r7, #28]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7ce:	4b3e      	ldr	r3, [pc, #248]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f003 030c 	and.w	r3, r3, #12
 800b7d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7d8:	4b3b      	ldr	r3, [pc, #236]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	f003 0303 	and.w	r3, r3, #3
 800b7e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d005      	beq.n	800b7f4 <HAL_RCC_GetSysClockFreq+0x34>
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	2b0c      	cmp	r3, #12
 800b7ec:	d121      	bne.n	800b832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d11e      	bne.n	800b832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b7f4:	4b34      	ldr	r3, [pc, #208]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0308 	and.w	r3, r3, #8
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d107      	bne.n	800b810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b800:	4b31      	ldr	r3, [pc, #196]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b806:	0a1b      	lsrs	r3, r3, #8
 800b808:	f003 030f 	and.w	r3, r3, #15
 800b80c:	61fb      	str	r3, [r7, #28]
 800b80e:	e005      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b810:	4b2d      	ldr	r3, [pc, #180]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	091b      	lsrs	r3, r3, #4
 800b816:	f003 030f 	and.w	r3, r3, #15
 800b81a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b81c:	4a2b      	ldr	r2, [pc, #172]	; (800b8cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10d      	bne.n	800b848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b830:	e00a      	b.n	800b848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b04      	cmp	r3, #4
 800b836:	d102      	bne.n	800b83e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b838:	4b25      	ldr	r3, [pc, #148]	; (800b8d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800b83a:	61bb      	str	r3, [r7, #24]
 800b83c:	e004      	b.n	800b848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b08      	cmp	r3, #8
 800b842:	d101      	bne.n	800b848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b844:	4b23      	ldr	r3, [pc, #140]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800b846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	2b0c      	cmp	r3, #12
 800b84c:	d134      	bne.n	800b8b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b84e:	4b1e      	ldr	r3, [pc, #120]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f003 0303 	and.w	r3, r3, #3
 800b856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d003      	beq.n	800b866 <HAL_RCC_GetSysClockFreq+0xa6>
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b03      	cmp	r3, #3
 800b862:	d003      	beq.n	800b86c <HAL_RCC_GetSysClockFreq+0xac>
 800b864:	e005      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b866:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800b868:	617b      	str	r3, [r7, #20]
      break;
 800b86a:	e005      	b.n	800b878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b86c:	4b19      	ldr	r3, [pc, #100]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800b86e:	617b      	str	r3, [r7, #20]
      break;
 800b870:	e002      	b.n	800b878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	617b      	str	r3, [r7, #20]
      break;
 800b876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b878:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	091b      	lsrs	r3, r3, #4
 800b87e:	f003 0307 	and.w	r3, r3, #7
 800b882:	3301      	adds	r3, #1
 800b884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b886:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	0a1b      	lsrs	r3, r3, #8
 800b88c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b890:	697a      	ldr	r2, [r7, #20]
 800b892:	fb03 f202 	mul.w	r2, r3, r2
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b89e:	4b0a      	ldr	r3, [pc, #40]	; (800b8c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	0e5b      	lsrs	r3, r3, #25
 800b8a4:	f003 0303 	and.w	r3, r3, #3
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b8b8:	69bb      	ldr	r3, [r7, #24]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3724      	adds	r7, #36	; 0x24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	40021000 	.word	0x40021000
 800b8cc:	08014b08 	.word	0x08014b08
 800b8d0:	00f42400 	.word	0x00f42400
 800b8d4:	007a1200 	.word	0x007a1200

0800b8d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8dc:	4b03      	ldr	r3, [pc, #12]	; (800b8ec <HAL_RCC_GetHCLKFreq+0x14>)
 800b8de:	681b      	ldr	r3, [r3, #0]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	2001c05c 	.word	0x2001c05c

0800b8f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b8f4:	f7ff fff0 	bl	800b8d8 <HAL_RCC_GetHCLKFreq>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	4b06      	ldr	r3, [pc, #24]	; (800b914 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	0a1b      	lsrs	r3, r3, #8
 800b900:	f003 0307 	and.w	r3, r3, #7
 800b904:	4904      	ldr	r1, [pc, #16]	; (800b918 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b906:	5ccb      	ldrb	r3, [r1, r3]
 800b908:	f003 031f 	and.w	r3, r3, #31
 800b90c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b910:	4618      	mov	r0, r3
 800b912:	bd80      	pop	{r7, pc}
 800b914:	40021000 	.word	0x40021000
 800b918:	08014b00 	.word	0x08014b00

0800b91c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b920:	f7ff ffda 	bl	800b8d8 <HAL_RCC_GetHCLKFreq>
 800b924:	4602      	mov	r2, r0
 800b926:	4b06      	ldr	r3, [pc, #24]	; (800b940 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	0adb      	lsrs	r3, r3, #11
 800b92c:	f003 0307 	and.w	r3, r3, #7
 800b930:	4904      	ldr	r1, [pc, #16]	; (800b944 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b932:	5ccb      	ldrb	r3, [r1, r3]
 800b934:	f003 031f 	and.w	r3, r3, #31
 800b938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	40021000 	.word	0x40021000
 800b944:	08014b00 	.word	0x08014b00

0800b948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b950:	2300      	movs	r3, #0
 800b952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b954:	4b2a      	ldr	r3, [pc, #168]	; (800ba00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b960:	f7ff f8ce 	bl	800ab00 <HAL_PWREx_GetVoltageRange>
 800b964:	6178      	str	r0, [r7, #20]
 800b966:	e014      	b.n	800b992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b968:	4b25      	ldr	r3, [pc, #148]	; (800ba00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b96a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b96c:	4a24      	ldr	r2, [pc, #144]	; (800ba00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b96e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b972:	6593      	str	r3, [r2, #88]	; 0x58
 800b974:	4b22      	ldr	r3, [pc, #136]	; (800ba00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b97c:	60fb      	str	r3, [r7, #12]
 800b97e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b980:	f7ff f8be 	bl	800ab00 <HAL_PWREx_GetVoltageRange>
 800b984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b986:	4b1e      	ldr	r3, [pc, #120]	; (800ba00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b98a:	4a1d      	ldr	r2, [pc, #116]	; (800ba00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b98c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b998:	d10b      	bne.n	800b9b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b80      	cmp	r3, #128	; 0x80
 800b99e:	d919      	bls.n	800b9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2ba0      	cmp	r3, #160	; 0xa0
 800b9a4:	d902      	bls.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	613b      	str	r3, [r7, #16]
 800b9aa:	e013      	b.n	800b9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	613b      	str	r3, [r7, #16]
 800b9b0:	e010      	b.n	800b9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b80      	cmp	r3, #128	; 0x80
 800b9b6:	d902      	bls.n	800b9be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	613b      	str	r3, [r7, #16]
 800b9bc:	e00a      	b.n	800b9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b80      	cmp	r3, #128	; 0x80
 800b9c2:	d102      	bne.n	800b9ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	613b      	str	r3, [r7, #16]
 800b9c8:	e004      	b.n	800b9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b70      	cmp	r3, #112	; 0x70
 800b9ce:	d101      	bne.n	800b9d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f023 0207 	bic.w	r2, r3, #7
 800b9dc:	4909      	ldr	r1, [pc, #36]	; (800ba04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b9e4:	4b07      	ldr	r3, [pc, #28]	; (800ba04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0307 	and.w	r3, r3, #7
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d001      	beq.n	800b9f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e000      	b.n	800b9f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	40021000 	.word	0x40021000
 800ba04:	40022000 	.word	0x40022000

0800ba08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba10:	2300      	movs	r3, #0
 800ba12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba14:	2300      	movs	r3, #0
 800ba16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d041      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ba2c:	d02a      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ba2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ba32:	d824      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ba34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba38:	d008      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ba3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba3e:	d81e      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00a      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ba44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba48:	d010      	beq.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ba4a:	e018      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ba4c:	4b86      	ldr	r3, [pc, #536]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	4a85      	ldr	r2, [pc, #532]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba58:	e015      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	2100      	movs	r1, #0
 800ba60:	4618      	mov	r0, r3
 800ba62:	f001 f98d 	bl	800cd80 <RCCEx_PLLSAI1_Config>
 800ba66:	4603      	mov	r3, r0
 800ba68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba6a:	e00c      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3320      	adds	r3, #32
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 fa76 	bl	800cf64 <RCCEx_PLLSAI2_Config>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba7c:	e003      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	74fb      	strb	r3, [r7, #19]
      break;
 800ba82:	e000      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ba84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba86:	7cfb      	ldrb	r3, [r7, #19]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10b      	bne.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba8c:	4b76      	ldr	r3, [pc, #472]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba9a:	4973      	ldr	r1, [pc, #460]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800baa2:	e001      	b.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa4:	7cfb      	ldrb	r3, [r7, #19]
 800baa6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d041      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bab8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800babc:	d02a      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800babe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bac2:	d824      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800bac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bac8:	d008      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800baca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bace:	d81e      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00a      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800bad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bad8:	d010      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800bada:	e018      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800badc:	4b62      	ldr	r3, [pc, #392]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	4a61      	ldr	r2, [pc, #388]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bae6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bae8:	e015      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	3304      	adds	r3, #4
 800baee:	2100      	movs	r1, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f001 f945 	bl	800cd80 <RCCEx_PLLSAI1_Config>
 800baf6:	4603      	mov	r3, r0
 800baf8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bafa:	e00c      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3320      	adds	r3, #32
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f001 fa2e 	bl	800cf64 <RCCEx_PLLSAI2_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bb0c:	e003      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	74fb      	strb	r3, [r7, #19]
      break;
 800bb12:	e000      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800bb14:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb16:	7cfb      	ldrb	r3, [r7, #19]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10b      	bne.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bb1c:	4b52      	ldr	r3, [pc, #328]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb2a:	494f      	ldr	r1, [pc, #316]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bb32:	e001      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb34:	7cfb      	ldrb	r3, [r7, #19]
 800bb36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80a0 	beq.w	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bb46:	2300      	movs	r3, #0
 800bb48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bb4a:	4b47      	ldr	r3, [pc, #284]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d101      	bne.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e000      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00d      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb60:	4b41      	ldr	r3, [pc, #260]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb64:	4a40      	ldr	r2, [pc, #256]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb6a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb6c:	4b3e      	ldr	r3, [pc, #248]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb74:	60bb      	str	r3, [r7, #8]
 800bb76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb7c:	4b3b      	ldr	r3, [pc, #236]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a3a      	ldr	r2, [pc, #232]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bb82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb88:	f7fa ff16 	bl	80069b8 <HAL_GetTick>
 800bb8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bb8e:	e009      	b.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb90:	f7fa ff12 	bl	80069b8 <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d902      	bls.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	74fb      	strb	r3, [r7, #19]
        break;
 800bba2:	e005      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bba4:	4b31      	ldr	r3, [pc, #196]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d0ef      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800bbb0:	7cfb      	ldrb	r3, [r7, #19]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d15c      	bne.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bbb6:	4b2c      	ldr	r3, [pc, #176]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d01f      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d019      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bbd4:	4b24      	ldr	r3, [pc, #144]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bbe0:	4b21      	ldr	r3, [pc, #132]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe6:	4a20      	ldr	r2, [pc, #128]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bbf0:	4b1d      	ldr	r3, [pc, #116]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf6:	4a1c      	ldr	r2, [pc, #112]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bc00:	4a19      	ldr	r2, [pc, #100]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f003 0301 	and.w	r3, r3, #1
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d016      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc12:	f7fa fed1 	bl	80069b8 <HAL_GetTick>
 800bc16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc18:	e00b      	b.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc1a:	f7fa fecd 	bl	80069b8 <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d902      	bls.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	74fb      	strb	r3, [r7, #19]
            break;
 800bc30:	e006      	b.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc32:	4b0d      	ldr	r3, [pc, #52]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0ec      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800bc40:	7cfb      	ldrb	r3, [r7, #19]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10c      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc46:	4b08      	ldr	r3, [pc, #32]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc56:	4904      	ldr	r1, [pc, #16]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bc5e:	e009      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc60:	7cfb      	ldrb	r3, [r7, #19]
 800bc62:	74bb      	strb	r3, [r7, #18]
 800bc64:	e006      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800bc66:	bf00      	nop
 800bc68:	40021000 	.word	0x40021000
 800bc6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc70:	7cfb      	ldrb	r3, [r7, #19]
 800bc72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc74:	7c7b      	ldrb	r3, [r7, #17]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d105      	bne.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc7a:	4ba6      	ldr	r3, [pc, #664]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7e:	4aa5      	ldr	r2, [pc, #660]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 0301 	and.w	r3, r3, #1
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc92:	4ba0      	ldr	r3, [pc, #640]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc98:	f023 0203 	bic.w	r2, r3, #3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca0:	499c      	ldr	r1, [pc, #624]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bca2:	4313      	orrs	r3, r2
 800bca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0302 	and.w	r3, r3, #2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bcb4:	4b97      	ldr	r3, [pc, #604]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcba:	f023 020c 	bic.w	r2, r3, #12
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	4994      	ldr	r1, [pc, #592]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0304 	and.w	r3, r3, #4
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00a      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bcd6:	4b8f      	ldr	r3, [pc, #572]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce4:	498b      	ldr	r1, [pc, #556]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bce6:	4313      	orrs	r3, r2
 800bce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f003 0308 	and.w	r3, r3, #8
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00a      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bcf8:	4b86      	ldr	r3, [pc, #536]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd06:	4983      	ldr	r1, [pc, #524]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 0310 	and.w	r3, r3, #16
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00a      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bd1a:	4b7e      	ldr	r3, [pc, #504]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd28:	497a      	ldr	r1, [pc, #488]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0320 	and.w	r3, r3, #32
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00a      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd3c:	4b75      	ldr	r3, [pc, #468]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd4a:	4972      	ldr	r1, [pc, #456]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00a      	beq.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd5e:	4b6d      	ldr	r3, [pc, #436]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd6c:	4969      	ldr	r1, [pc, #420]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00a      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd80:	4b64      	ldr	r3, [pc, #400]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd8e:	4961      	ldr	r1, [pc, #388]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00a      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bda2:	4b5c      	ldr	r3, [pc, #368]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bda4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb0:	4958      	ldr	r1, [pc, #352]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00a      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bdc4:	4b53      	ldr	r3, [pc, #332]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd2:	4950      	ldr	r1, [pc, #320]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bde6:	4b4b      	ldr	r3, [pc, #300]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bde8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf4:	4947      	ldr	r1, [pc, #284]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00a      	beq.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be08:	4b42      	ldr	r3, [pc, #264]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be0e:	f023 0203 	bic.w	r2, r3, #3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be16:	493f      	ldr	r1, [pc, #252]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be18:	4313      	orrs	r3, r2
 800be1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d028      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be2a:	4b3a      	ldr	r3, [pc, #232]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be38:	4936      	ldr	r1, [pc, #216]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be3a:	4313      	orrs	r3, r2
 800be3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be48:	d106      	bne.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be4a:	4b32      	ldr	r3, [pc, #200]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	4a31      	ldr	r2, [pc, #196]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be54:	60d3      	str	r3, [r2, #12]
 800be56:	e011      	b.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be60:	d10c      	bne.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3304      	adds	r3, #4
 800be66:	2101      	movs	r1, #1
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 ff89 	bl	800cd80 <RCCEx_PLLSAI1_Config>
 800be6e:	4603      	mov	r3, r0
 800be70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800be72:	7cfb      	ldrb	r3, [r7, #19]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d001      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800be78:	7cfb      	ldrb	r3, [r7, #19]
 800be7a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d028      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800be88:	4b22      	ldr	r3, [pc, #136]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be96:	491f      	ldr	r1, [pc, #124]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800be98:	4313      	orrs	r3, r2
 800be9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bea6:	d106      	bne.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bea8:	4b1a      	ldr	r3, [pc, #104]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	4a19      	ldr	r2, [pc, #100]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800beae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800beb2:	60d3      	str	r3, [r2, #12]
 800beb4:	e011      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bebe:	d10c      	bne.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	3304      	adds	r3, #4
 800bec4:	2101      	movs	r1, #1
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 ff5a 	bl	800cd80 <RCCEx_PLLSAI1_Config>
 800becc:	4603      	mov	r3, r0
 800bece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bed0:	7cfb      	ldrb	r3, [r7, #19]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d001      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800bed6:	7cfb      	ldrb	r3, [r7, #19]
 800bed8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d02a      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bee6:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bef4:	4907      	ldr	r1, [pc, #28]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf04:	d108      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf06:	4b03      	ldr	r3, [pc, #12]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	4a02      	ldr	r2, [pc, #8]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bf0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf10:	60d3      	str	r3, [r2, #12]
 800bf12:	e013      	b.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x534>
 800bf14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf20:	d10c      	bne.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3304      	adds	r3, #4
 800bf26:	2101      	movs	r1, #1
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 ff29 	bl	800cd80 <RCCEx_PLLSAI1_Config>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf32:	7cfb      	ldrb	r3, [r7, #19]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800bf38:	7cfb      	ldrb	r3, [r7, #19]
 800bf3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d02f      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf48:	4b2c      	ldr	r3, [pc, #176]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bf4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf56:	4929      	ldr	r1, [pc, #164]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf66:	d10d      	bne.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	2102      	movs	r1, #2
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 ff06 	bl	800cd80 <RCCEx_PLLSAI1_Config>
 800bf74:	4603      	mov	r3, r0
 800bf76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf78:	7cfb      	ldrb	r3, [r7, #19]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d014      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800bf7e:	7cfb      	ldrb	r3, [r7, #19]
 800bf80:	74bb      	strb	r3, [r7, #18]
 800bf82:	e011      	b.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf8c:	d10c      	bne.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	3320      	adds	r3, #32
 800bf92:	2102      	movs	r1, #2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 ffe5 	bl	800cf64 <RCCEx_PLLSAI2_Config>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf9e:	7cfb      	ldrb	r3, [r7, #19]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800bfa4:	7cfb      	ldrb	r3, [r7, #19]
 800bfa6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00b      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bfb4:	4b11      	ldr	r3, [pc, #68]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bfb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfc4:	490d      	ldr	r1, [pc, #52]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00b      	beq.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfd8:	4b08      	ldr	r3, [pc, #32]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bfda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfe8:	4904      	ldr	r1, [pc, #16]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bfea:	4313      	orrs	r3, r2
 800bfec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bff0:	7cbb      	ldrb	r3, [r7, #18]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3718      	adds	r7, #24
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	40021000 	.word	0x40021000

0800c000 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a77      	ldr	r2, [pc, #476]	; (800c1e8 <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 800c00c:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800c00e:	4b77      	ldr	r3, [pc, #476]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	f003 0203 	and.w	r2, r3, #3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800c01a:	4b74      	ldr	r3, [pc, #464]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	091b      	lsrs	r3, r3, #4
 800c020:	f003 0307 	and.w	r3, r3, #7
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c02a:	4b70      	ldr	r3, [pc, #448]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	0a1b      	lsrs	r3, r3, #8
 800c030:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 800c038:	4b6c      	ldr	r3, [pc, #432]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	0c5b      	lsrs	r3, r3, #17
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	f003 0310 	and.w	r3, r3, #16
 800c044:	1dda      	adds	r2, r3, #7
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800c04a:	4b68      	ldr	r3, [pc, #416]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	0d5b      	lsrs	r3, r3, #21
 800c050:	f003 0303 	and.w	r3, r3, #3
 800c054:	3301      	adds	r3, #1
 800c056:	005a      	lsls	r2, r3, #1
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800c05c:	4b63      	ldr	r3, [pc, #396]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	0e5b      	lsrs	r3, r3, #25
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	3301      	adds	r3, #1
 800c068:	005a      	lsls	r2, r3, #1
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689a      	ldr	r2, [r3, #8]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800c07e:	4b5b      	ldr	r3, [pc, #364]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	0a1b      	lsrs	r3, r3, #8
 800c084:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 800c08c:	4b57      	ldr	r3, [pc, #348]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	0c5b      	lsrs	r3, r3, #17
 800c092:	011b      	lsls	r3, r3, #4
 800c094:	f003 0310 	and.w	r3, r3, #16
 800c098:	1dda      	adds	r2, r3, #7
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800c09e:	4b53      	ldr	r3, [pc, #332]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	0e5b      	lsrs	r3, r3, #25
 800c0a4:	f003 0303 	and.w	r3, r3, #3
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	005a      	lsls	r2, r3, #1
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 800c0b0:	4b4e      	ldr	r3, [pc, #312]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b6:	f003 0203 	and.w	r2, r3, #3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800c0be:	4b4b      	ldr	r3, [pc, #300]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0c4:	f003 020c 	and.w	r2, r3, #12
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 800c0cc:	4b47      	ldr	r3, [pc, #284]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0d2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 800c0da:	4b44      	ldr	r3, [pc, #272]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 800c0e8:	4b40      	ldr	r3, [pc, #256]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 800c0f6:	4b3d      	ldr	r3, [pc, #244]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0fc:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 800c104:	4b39      	ldr	r3, [pc, #228]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c10a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 800c112:	4b36      	ldr	r3, [pc, #216]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c118:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 800c120:	4b32      	ldr	r3, [pc, #200]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 800c12e:	4b2f      	ldr	r3, [pc, #188]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c130:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c134:	f003 0203 	and.w	r2, r3, #3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c13c:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c142:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c14a:	4b28      	ldr	r3, [pc, #160]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c150:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800c158:	4b24      	ldr	r3, [pc, #144]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c15e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800c166:	4b21      	ldr	r3, [pc, #132]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c16c:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 800c174:	4b1d      	ldr	r3, [pc, #116]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 800c184:	4b19      	ldr	r3, [pc, #100]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c18a:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 800c192:	4b16      	ldr	r3, [pc, #88]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c198:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800c1a0:	4b12      	ldr	r3, [pc, #72]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1a6:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 800c1ae:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1b4:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 800c1bc:	4b0b      	ldr	r3, [pc, #44]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1c2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 800c1cc:	4b07      	ldr	r3, [pc, #28]	; (800c1ec <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800c1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1d2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	001fffff 	.word	0x001fffff
 800c1ec:	40021000 	.word	0x40021000

0800c1f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c202:	d13e      	bne.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c204:	4bb4      	ldr	r3, [pc, #720]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c20a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c20e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c216:	d028      	beq.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c21e:	f200 858c 	bhi.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c228:	d005      	beq.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c230:	d00e      	beq.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800c232:	f000 bd82 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c236:	4ba8      	ldr	r3, [pc, #672]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c23c:	f003 0302 	and.w	r3, r3, #2
 800c240:	2b02      	cmp	r3, #2
 800c242:	f040 857c 	bne.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 800c246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c24a:	61fb      	str	r3, [r7, #28]
      break;
 800c24c:	f000 bd77 	b.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c250:	4ba1      	ldr	r3, [pc, #644]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	f040 8571 	bne.w	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 800c260:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c264:	61fb      	str	r3, [r7, #28]
      break;
 800c266:	f000 bd6c 	b.w	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c26a:	4b9b      	ldr	r3, [pc, #620]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c276:	f040 8566 	bne.w	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800c27a:	4b98      	ldr	r3, [pc, #608]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800c27c:	61fb      	str	r3, [r7, #28]
      break;
 800c27e:	f000 bd62 	b.w	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c282:	4b95      	ldr	r3, [pc, #596]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	2b03      	cmp	r3, #3
 800c290:	d036      	beq.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2b03      	cmp	r3, #3
 800c296:	d840      	bhi.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d003      	beq.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d020      	beq.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800c2a4:	e039      	b.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c2a6:	4b8c      	ldr	r3, [pc, #560]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 0302 	and.w	r3, r3, #2
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d116      	bne.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c2b2:	4b89      	ldr	r3, [pc, #548]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0308 	and.w	r3, r3, #8
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d005      	beq.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800c2be:	4b86      	ldr	r3, [pc, #536]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	091b      	lsrs	r3, r3, #4
 800c2c4:	f003 030f 	and.w	r3, r3, #15
 800c2c8:	e005      	b.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800c2ca:	4b83      	ldr	r3, [pc, #524]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c2cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2d0:	0a1b      	lsrs	r3, r3, #8
 800c2d2:	f003 030f 	and.w	r3, r3, #15
 800c2d6:	4a82      	ldr	r2, [pc, #520]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c2de:	e01f      	b.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	61bb      	str	r3, [r7, #24]
      break;
 800c2e4:	e01c      	b.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2e6:	4b7c      	ldr	r3, [pc, #496]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2f2:	d102      	bne.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800c2f4:	4b7b      	ldr	r3, [pc, #492]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800c2f6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c2f8:	e012      	b.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	61bb      	str	r3, [r7, #24]
      break;
 800c2fe:	e00f      	b.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c300:	4b75      	ldr	r3, [pc, #468]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30c:	d102      	bne.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800c30e:	4b76      	ldr	r3, [pc, #472]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800c310:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c312:	e005      	b.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c314:	2300      	movs	r3, #0
 800c316:	61bb      	str	r3, [r7, #24]
      break;
 800c318:	e002      	b.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	61bb      	str	r3, [r7, #24]
      break;
 800c31e:	bf00      	nop
    }

    switch(PeriphClk)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c326:	f000 842a 	beq.w	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c330:	f200 850b 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c33a:	f000 80df 	beq.w	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c344:	f200 8501 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c34e:	f000 80d5 	beq.w	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c358:	f200 84f7 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c362:	f000 8377 	beq.w	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c36c:	f200 84ed 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c376:	f000 84c3 	beq.w	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c380:	f200 84e3 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c38a:	f000 82e6 	beq.w	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c394:	f200 84d9 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c39e:	f000 80ad 	beq.w	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3a8:	f200 84cf 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3b2:	f000 809b 	beq.w	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3bc:	f200 84c5 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c6:	d07f      	beq.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3ce:	f200 84bc 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3d8:	f000 8448 	beq.w	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3e2:	f200 84b2 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3ec:	f000 83f0 	beq.w	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3f6:	f200 84a8 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c400:	f000 8391 	beq.w	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c40a:	f200 849e 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b80      	cmp	r3, #128	; 0x80
 800c412:	f000 835c 	beq.w	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b80      	cmp	r3, #128	; 0x80
 800c41a:	f200 8496 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b20      	cmp	r3, #32
 800c422:	d84b      	bhi.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 848f 	beq.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	3b01      	subs	r3, #1
 800c430:	2b1f      	cmp	r3, #31
 800c432:	f200 848a 	bhi.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800c436:	a201      	add	r2, pc, #4	; (adr r2, 800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800c438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43c:	0800c653 	.word	0x0800c653
 800c440:	0800c6c3 	.word	0x0800c6c3
 800c444:	0800cd4b 	.word	0x0800cd4b
 800c448:	0800c757 	.word	0x0800c757
 800c44c:	0800cd4b 	.word	0x0800cd4b
 800c450:	0800cd4b 	.word	0x0800cd4b
 800c454:	0800cd4b 	.word	0x0800cd4b
 800c458:	0800c7df 	.word	0x0800c7df
 800c45c:	0800cd4b 	.word	0x0800cd4b
 800c460:	0800cd4b 	.word	0x0800cd4b
 800c464:	0800cd4b 	.word	0x0800cd4b
 800c468:	0800cd4b 	.word	0x0800cd4b
 800c46c:	0800cd4b 	.word	0x0800cd4b
 800c470:	0800cd4b 	.word	0x0800cd4b
 800c474:	0800cd4b 	.word	0x0800cd4b
 800c478:	0800c857 	.word	0x0800c857
 800c47c:	0800cd4b 	.word	0x0800cd4b
 800c480:	0800cd4b 	.word	0x0800cd4b
 800c484:	0800cd4b 	.word	0x0800cd4b
 800c488:	0800cd4b 	.word	0x0800cd4b
 800c48c:	0800cd4b 	.word	0x0800cd4b
 800c490:	0800cd4b 	.word	0x0800cd4b
 800c494:	0800cd4b 	.word	0x0800cd4b
 800c498:	0800cd4b 	.word	0x0800cd4b
 800c49c:	0800cd4b 	.word	0x0800cd4b
 800c4a0:	0800cd4b 	.word	0x0800cd4b
 800c4a4:	0800cd4b 	.word	0x0800cd4b
 800c4a8:	0800cd4b 	.word	0x0800cd4b
 800c4ac:	0800cd4b 	.word	0x0800cd4b
 800c4b0:	0800cd4b 	.word	0x0800cd4b
 800c4b4:	0800cd4b 	.word	0x0800cd4b
 800c4b8:	0800c8d9 	.word	0x0800c8d9
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b40      	cmp	r3, #64	; 0x40
 800c4c0:	f000 82d9 	beq.w	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800c4c4:	f000 bc41 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c4c8:	69b9      	ldr	r1, [r7, #24]
 800c4ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c4ce:	f000 fe25 	bl	800d11c <RCCEx_GetSAIxPeriphCLKFreq>
 800c4d2:	61f8      	str	r0, [r7, #28]
      break;
 800c4d4:	f000 bc3a 	b.w	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800c4d8:	40021000 	.word	0x40021000
 800c4dc:	0003d090 	.word	0x0003d090
 800c4e0:	08014b08 	.word	0x08014b08
 800c4e4:	00f42400 	.word	0x00f42400
 800c4e8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800c4ec:	69b9      	ldr	r1, [r7, #24]
 800c4ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c4f2:	f000 fe13 	bl	800d11c <RCCEx_GetSAIxPeriphCLKFreq>
 800c4f6:	61f8      	str	r0, [r7, #28]
      break;
 800c4f8:	f000 bc28 	b.w	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c4fc:	4ba6      	ldr	r3, [pc, #664]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c502:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c506:	613b      	str	r3, [r7, #16]
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c50e:	d015      	beq.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c516:	f200 8092 	bhi.w	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c520:	d029      	beq.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c528:	f200 8089 	bhi.w	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d07b      	beq.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c538:	d04a      	beq.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800c53a:	e080      	b.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c53c:	4b96      	ldr	r3, [pc, #600]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0302 	and.w	r3, r3, #2
 800c544:	2b02      	cmp	r3, #2
 800c546:	d17c      	bne.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c548:	4b93      	ldr	r3, [pc, #588]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0308 	and.w	r3, r3, #8
 800c550:	2b00      	cmp	r3, #0
 800c552:	d005      	beq.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800c554:	4b90      	ldr	r3, [pc, #576]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	091b      	lsrs	r3, r3, #4
 800c55a:	f003 030f 	and.w	r3, r3, #15
 800c55e:	e005      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c560:	4b8d      	ldr	r3, [pc, #564]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c566:	0a1b      	lsrs	r3, r3, #8
 800c568:	f003 030f 	and.w	r3, r3, #15
 800c56c:	4a8b      	ldr	r2, [pc, #556]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800c56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c572:	61fb      	str	r3, [r7, #28]
          break;
 800c574:	e065      	b.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c576:	4b88      	ldr	r3, [pc, #544]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c582:	d160      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c584:	4b84      	ldr	r3, [pc, #528]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c58c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c590:	d159      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c592:	4b81      	ldr	r3, [pc, #516]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	0a1b      	lsrs	r3, r3, #8
 800c598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c59c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	fb03 f202 	mul.w	r2, r3, r2
 800c5a6:	4b7c      	ldr	r3, [pc, #496]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	091b      	lsrs	r3, r3, #4
 800c5ac:	f003 0307 	and.w	r3, r3, #7
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5b6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c5b8:	4b77      	ldr	r3, [pc, #476]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	0d5b      	lsrs	r3, r3, #21
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5cc:	61fb      	str	r3, [r7, #28]
          break;
 800c5ce:	e03a      	b.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c5d0:	4b71      	ldr	r3, [pc, #452]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5dc:	d135      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c5de:	4b6e      	ldr	r3, [pc, #440]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5ea:	d12e      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c5ec:	4b6a      	ldr	r3, [pc, #424]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	0a1b      	lsrs	r3, r3, #8
 800c5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	fb03 f202 	mul.w	r2, r3, r2
 800c600:	4b65      	ldr	r3, [pc, #404]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	091b      	lsrs	r3, r3, #4
 800c606:	f003 0307 	and.w	r3, r3, #7
 800c60a:	3301      	adds	r3, #1
 800c60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c610:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c612:	4b61      	ldr	r3, [pc, #388]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	0d5b      	lsrs	r3, r3, #21
 800c618:	f003 0303 	and.w	r3, r3, #3
 800c61c:	3301      	adds	r3, #1
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	69ba      	ldr	r2, [r7, #24]
 800c622:	fbb2 f3f3 	udiv	r3, r2, r3
 800c626:	61fb      	str	r3, [r7, #28]
          break;
 800c628:	e00f      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c62a:	4b5b      	ldr	r3, [pc, #364]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c62c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	2b02      	cmp	r3, #2
 800c636:	d10a      	bne.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800c638:	4b59      	ldr	r3, [pc, #356]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800c63a:	61fb      	str	r3, [r7, #28]
          break;
 800c63c:	e007      	b.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800c63e:	bf00      	nop
 800c640:	e384      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c642:	bf00      	nop
 800c644:	e382      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c646:	bf00      	nop
 800c648:	e380      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c64a:	bf00      	nop
 800c64c:	e37e      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c64e:	bf00      	nop
        break;
 800c650:	e37c      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c652:	4b51      	ldr	r3, [pc, #324]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c658:	f003 0303 	and.w	r3, r3, #3
 800c65c:	613b      	str	r3, [r7, #16]
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	2b03      	cmp	r3, #3
 800c662:	d828      	bhi.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800c664:	a201      	add	r2, pc, #4	; (adr r2, 800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800c666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66a:	bf00      	nop
 800c66c:	0800c67d 	.word	0x0800c67d
 800c670:	0800c685 	.word	0x0800c685
 800c674:	0800c68d 	.word	0x0800c68d
 800c678:	0800c6a1 	.word	0x0800c6a1
          frequency = HAL_RCC_GetPCLK2Freq();
 800c67c:	f7ff f94e 	bl	800b91c <HAL_RCC_GetPCLK2Freq>
 800c680:	61f8      	str	r0, [r7, #28]
          break;
 800c682:	e01d      	b.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c684:	f7ff f89c 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800c688:	61f8      	str	r0, [r7, #28]
          break;
 800c68a:	e019      	b.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c68c:	4b42      	ldr	r3, [pc, #264]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c698:	d10f      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800c69a:	4b42      	ldr	r3, [pc, #264]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800c69c:	61fb      	str	r3, [r7, #28]
          break;
 800c69e:	e00c      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c6a0:	4b3d      	ldr	r3, [pc, #244]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6a6:	f003 0302 	and.w	r3, r3, #2
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d107      	bne.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800c6ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6b2:	61fb      	str	r3, [r7, #28]
          break;
 800c6b4:	e003      	b.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800c6b6:	bf00      	nop
 800c6b8:	e348      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c6ba:	bf00      	nop
 800c6bc:	e346      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c6be:	bf00      	nop
        break;
 800c6c0:	e344      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c6c2:	4b35      	ldr	r3, [pc, #212]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6c8:	f003 030c 	and.w	r3, r3, #12
 800c6cc:	613b      	str	r3, [r7, #16]
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	2b0c      	cmp	r3, #12
 800c6d2:	d83a      	bhi.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800c6d4:	a201      	add	r2, pc, #4	; (adr r2, 800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6da:	bf00      	nop
 800c6dc:	0800c711 	.word	0x0800c711
 800c6e0:	0800c74b 	.word	0x0800c74b
 800c6e4:	0800c74b 	.word	0x0800c74b
 800c6e8:	0800c74b 	.word	0x0800c74b
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	0800c74b 	.word	0x0800c74b
 800c6f4:	0800c74b 	.word	0x0800c74b
 800c6f8:	0800c74b 	.word	0x0800c74b
 800c6fc:	0800c721 	.word	0x0800c721
 800c700:	0800c74b 	.word	0x0800c74b
 800c704:	0800c74b 	.word	0x0800c74b
 800c708:	0800c74b 	.word	0x0800c74b
 800c70c:	0800c735 	.word	0x0800c735
          frequency = HAL_RCC_GetPCLK1Freq();
 800c710:	f7ff f8ee 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800c714:	61f8      	str	r0, [r7, #28]
          break;
 800c716:	e01d      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800c718:	f7ff f852 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800c71c:	61f8      	str	r0, [r7, #28]
          break;
 800c71e:	e019      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c720:	4b1d      	ldr	r3, [pc, #116]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c72c:	d10f      	bne.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800c72e:	4b1d      	ldr	r3, [pc, #116]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800c730:	61fb      	str	r3, [r7, #28]
          break;
 800c732:	e00c      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c734:	4b18      	ldr	r3, [pc, #96]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c73a:	f003 0302 	and.w	r3, r3, #2
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d107      	bne.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800c742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c746:	61fb      	str	r3, [r7, #28]
          break;
 800c748:	e003      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800c74a:	bf00      	nop
 800c74c:	e2fe      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c74e:	bf00      	nop
 800c750:	e2fc      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c752:	bf00      	nop
        break;
 800c754:	e2fa      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c756:	4b10      	ldr	r3, [pc, #64]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800c758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c75c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c760:	613b      	str	r3, [r7, #16]
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	2b30      	cmp	r3, #48	; 0x30
 800c766:	d029      	beq.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	2b30      	cmp	r3, #48	; 0x30
 800c76c:	d831      	bhi.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	2b20      	cmp	r3, #32
 800c772:	d019      	beq.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	2b20      	cmp	r3, #32
 800c778:	d82b      	bhi.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	2b10      	cmp	r3, #16
 800c784:	d004      	beq.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 800c786:	e024      	b.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c788:	f7ff f8b2 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800c78c:	61f8      	str	r0, [r7, #28]
          break;
 800c78e:	e025      	b.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800c790:	f7ff f816 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800c794:	61f8      	str	r0, [r7, #28]
          break;
 800c796:	e021      	b.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800c798:	40021000 	.word	0x40021000
 800c79c:	08014b08 	.word	0x08014b08
 800c7a0:	02dc6c00 	.word	0x02dc6c00
 800c7a4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7a8:	4b8f      	ldr	r3, [pc, #572]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7b4:	d10f      	bne.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 800c7b6:	4b8d      	ldr	r3, [pc, #564]	; (800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c7b8:	61fb      	str	r3, [r7, #28]
          break;
 800c7ba:	e00c      	b.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c7bc:	4b8a      	ldr	r3, [pc, #552]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d107      	bne.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 800c7ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7ce:	61fb      	str	r3, [r7, #28]
          break;
 800c7d0:	e003      	b.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800c7d2:	bf00      	nop
 800c7d4:	e2ba      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c7d6:	bf00      	nop
 800c7d8:	e2b8      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c7da:	bf00      	nop
        break;
 800c7dc:	e2b6      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c7de:	4b82      	ldr	r3, [pc, #520]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c7e8:	613b      	str	r3, [r7, #16]
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	2bc0      	cmp	r3, #192	; 0xc0
 800c7ee:	d021      	beq.n	800c834 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	2bc0      	cmp	r3, #192	; 0xc0
 800c7f4:	d829      	bhi.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	2b80      	cmp	r3, #128	; 0x80
 800c7fa:	d011      	beq.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	2b80      	cmp	r3, #128	; 0x80
 800c800:	d823      	bhi.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d003      	beq.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	2b40      	cmp	r3, #64	; 0x40
 800c80c:	d004      	beq.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 800c80e:	e01c      	b.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c810:	f7ff f86e 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800c814:	61f8      	str	r0, [r7, #28]
          break;
 800c816:	e01d      	b.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 800c818:	f7fe ffd2 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800c81c:	61f8      	str	r0, [r7, #28]
          break;
 800c81e:	e019      	b.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c820:	4b71      	ldr	r3, [pc, #452]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c82c:	d10f      	bne.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 800c82e:	4b6f      	ldr	r3, [pc, #444]	; (800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c830:	61fb      	str	r3, [r7, #28]
          break;
 800c832:	e00c      	b.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c834:	4b6c      	ldr	r3, [pc, #432]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d107      	bne.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 800c842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c846:	61fb      	str	r3, [r7, #28]
          break;
 800c848:	e003      	b.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 800c84a:	bf00      	nop
 800c84c:	e27e      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c84e:	bf00      	nop
 800c850:	e27c      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c852:	bf00      	nop
        break;
 800c854:	e27a      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c856:	4b64      	ldr	r3, [pc, #400]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c85c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c860:	613b      	str	r3, [r7, #16]
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c868:	d025      	beq.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c870:	d82c      	bhi.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c878:	d013      	beq.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c880:	d824      	bhi.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d004      	beq.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c88e:	d004      	beq.n	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 800c890:	e01c      	b.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c892:	f7ff f82d 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800c896:	61f8      	str	r0, [r7, #28]
          break;
 800c898:	e01d      	b.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 800c89a:	f7fe ff91 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800c89e:	61f8      	str	r0, [r7, #28]
          break;
 800c8a0:	e019      	b.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8a2:	4b51      	ldr	r3, [pc, #324]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8ae:	d10f      	bne.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 800c8b0:	4b4e      	ldr	r3, [pc, #312]	; (800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c8b2:	61fb      	str	r3, [r7, #28]
          break;
 800c8b4:	e00c      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c8b6:	4b4c      	ldr	r3, [pc, #304]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c8b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8bc:	f003 0302 	and.w	r3, r3, #2
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d107      	bne.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 800c8c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8c8:	61fb      	str	r3, [r7, #28]
          break;
 800c8ca:	e003      	b.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 800c8cc:	bf00      	nop
 800c8ce:	e23d      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c8d0:	bf00      	nop
 800c8d2:	e23b      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c8d4:	bf00      	nop
        break;
 800c8d6:	e239      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c8d8:	4b43      	ldr	r3, [pc, #268]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c8e2:	613b      	str	r3, [r7, #16]
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8ea:	d025      	beq.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8f2:	d82c      	bhi.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8fa:	d013      	beq.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c902:	d824      	bhi.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d004      	beq.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c910:	d004      	beq.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 800c912:	e01c      	b.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c914:	f7fe ffec 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800c918:	61f8      	str	r0, [r7, #28]
          break;
 800c91a:	e01d      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 800c91c:	f7fe ff50 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800c920:	61f8      	str	r0, [r7, #28]
          break;
 800c922:	e019      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c924:	4b30      	ldr	r3, [pc, #192]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c92c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c930:	d10f      	bne.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 800c932:	4b2e      	ldr	r3, [pc, #184]	; (800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800c934:	61fb      	str	r3, [r7, #28]
          break;
 800c936:	e00c      	b.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c938:	4b2b      	ldr	r3, [pc, #172]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c93a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c93e:	f003 0302 	and.w	r3, r3, #2
 800c942:	2b02      	cmp	r3, #2
 800c944:	d107      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 800c946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c94a:	61fb      	str	r3, [r7, #28]
          break;
 800c94c:	e003      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800c94e:	bf00      	nop
 800c950:	e1fc      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c952:	bf00      	nop
 800c954:	e1fa      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800c956:	bf00      	nop
        break;
 800c958:	e1f8      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c95a:	4b23      	ldr	r3, [pc, #140]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c95c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c964:	613b      	str	r3, [r7, #16]
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c96c:	d00c      	beq.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c974:	d868      	bhi.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c97c:	d008      	beq.n	800c990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c984:	d034      	beq.n	800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 800c986:	e05f      	b.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 800c988:	f7fe ff1a 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800c98c:	61f8      	str	r0, [r7, #28]
          break;
 800c98e:	e060      	b.n	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800c990:	4b15      	ldr	r3, [pc, #84]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c99c:	d156      	bne.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800c99e:	4b12      	ldr	r3, [pc, #72]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d050      	beq.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c9aa:	4b0f      	ldr	r3, [pc, #60]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	0a1b      	lsrs	r3, r3, #8
 800c9b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	fb03 f202 	mul.w	r2, r3, r2
 800c9be:	4b0a      	ldr	r3, [pc, #40]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	091b      	lsrs	r3, r3, #4
 800c9c4:	f003 0307 	and.w	r3, r3, #7
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ce:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800c9d0:	4b05      	ldr	r3, [pc, #20]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	0e5b      	lsrs	r3, r3, #25
 800c9d6:	f003 0303 	and.w	r3, r3, #3
 800c9da:	3301      	adds	r3, #1
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	69ba      	ldr	r2, [r7, #24]
 800c9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e4:	61fb      	str	r3, [r7, #28]
          break;
 800c9e6:	e031      	b.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800c9e8:	40021000 	.word	0x40021000
 800c9ec:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800c9f0:	4b9c      	ldr	r3, [pc, #624]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9fc:	d128      	bne.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800c9fe:	4b99      	ldr	r3, [pc, #612]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d022      	beq.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800ca0a:	4b96      	ldr	r3, [pc, #600]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca0c:	695b      	ldr	r3, [r3, #20]
 800ca0e:	0a1b      	lsrs	r3, r3, #8
 800ca10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca14:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	fb03 f202 	mul.w	r2, r3, r2
 800ca1e:	4b91      	ldr	r3, [pc, #580]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	091b      	lsrs	r3, r3, #4
 800ca24:	f003 0307 	and.w	r3, r3, #7
 800ca28:	3301      	adds	r3, #1
 800ca2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca2e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800ca30:	4b8c      	ldr	r3, [pc, #560]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	0e5b      	lsrs	r3, r3, #25
 800ca36:	f003 0303 	and.w	r3, r3, #3
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	69ba      	ldr	r2, [r7, #24]
 800ca40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca44:	61fb      	str	r3, [r7, #28]
          break;
 800ca46:	e003      	b.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800ca48:	bf00      	nop
 800ca4a:	e17f      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca4c:	bf00      	nop
 800ca4e:	e17d      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ca50:	bf00      	nop
        break;
 800ca52:	e17b      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ca54:	4b83      	ldr	r3, [pc, #524]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca5e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d103      	bne.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 800ca66:	f7fe ff59 	bl	800b91c <HAL_RCC_GetPCLK2Freq>
 800ca6a:	61f8      	str	r0, [r7, #28]
        break;
 800ca6c:	e16e      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800ca6e:	f7fe fea7 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800ca72:	61f8      	str	r0, [r7, #28]
        break;
 800ca74:	e16a      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ca76:	4b7b      	ldr	r3, [pc, #492]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800ca78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca7c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ca80:	613b      	str	r3, [r7, #16]
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca88:	d013      	beq.n	800cab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca90:	d819      	bhi.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d004      	beq.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca9e:	d004      	beq.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800caa0:	e011      	b.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800caa2:	f7fe ff25 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800caa6:	61f8      	str	r0, [r7, #28]
          break;
 800caa8:	e010      	b.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800caaa:	f7fe fe89 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800caae:	61f8      	str	r0, [r7, #28]
          break;
 800cab0:	e00c      	b.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cab2:	4b6c      	ldr	r3, [pc, #432]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cabe:	d104      	bne.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800cac0:	4b69      	ldr	r3, [pc, #420]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800cac2:	61fb      	str	r3, [r7, #28]
          break;
 800cac4:	e001      	b.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 800cac6:	bf00      	nop
 800cac8:	e140      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800caca:	bf00      	nop
        break;
 800cacc:	e13e      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800cace:	4b65      	ldr	r3, [pc, #404]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cad8:	613b      	str	r3, [r7, #16]
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cae0:	d013      	beq.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cae8:	d819      	bhi.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800caf6:	d004      	beq.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 800caf8:	e011      	b.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cafa:	f7fe fef9 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800cafe:	61f8      	str	r0, [r7, #28]
          break;
 800cb00:	e010      	b.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 800cb02:	f7fe fe5d 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800cb06:	61f8      	str	r0, [r7, #28]
          break;
 800cb08:	e00c      	b.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb0a:	4b56      	ldr	r3, [pc, #344]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb16:	d104      	bne.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 800cb18:	4b53      	ldr	r3, [pc, #332]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800cb1a:	61fb      	str	r3, [r7, #28]
          break;
 800cb1c:	e001      	b.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800cb1e:	bf00      	nop
 800cb20:	e114      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cb22:	bf00      	nop
        break;
 800cb24:	e112      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cb26:	4b4f      	ldr	r3, [pc, #316]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cb28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb30:	613b      	str	r3, [r7, #16]
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb38:	d013      	beq.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb40:	d819      	bhi.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d004      	beq.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb4e:	d004      	beq.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 800cb50:	e011      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cb52:	f7fe fecd 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800cb56:	61f8      	str	r0, [r7, #28]
          break;
 800cb58:	e010      	b.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800cb5a:	f7fe fe31 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800cb5e:	61f8      	str	r0, [r7, #28]
          break;
 800cb60:	e00c      	b.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb62:	4b40      	ldr	r3, [pc, #256]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb6e:	d104      	bne.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 800cb70:	4b3d      	ldr	r3, [pc, #244]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800cb72:	61fb      	str	r3, [r7, #28]
          break;
 800cb74:	e001      	b.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 800cb76:	bf00      	nop
 800cb78:	e0e8      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cb7a:	bf00      	nop
        break;
 800cb7c:	e0e6      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cb7e:	4b39      	ldr	r3, [pc, #228]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cb80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d011      	beq.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d818      	bhi.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d004      	beq.n	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800cba2:	e011      	b.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cba4:	f7fe fea4 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800cba8:	61f8      	str	r0, [r7, #28]
          break;
 800cbaa:	e010      	b.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800cbac:	f7fe fe08 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800cbb0:	61f8      	str	r0, [r7, #28]
          break;
 800cbb2:	e00c      	b.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cbb4:	4b2b      	ldr	r3, [pc, #172]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbc0:	d104      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800cbc2:	4b29      	ldr	r3, [pc, #164]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800cbc4:	61fb      	str	r3, [r7, #28]
          break;
 800cbc6:	e001      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800cbc8:	bf00      	nop
 800cbca:	e0bf      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cbcc:	bf00      	nop
        break;
 800cbce:	e0bd      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cbd0:	4b24      	ldr	r3, [pc, #144]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbd6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800cbda:	613b      	str	r3, [r7, #16]
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cbe2:	d02c      	beq.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cbea:	d833      	bhi.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cbf2:	d01a      	beq.n	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cbfa:	d82b      	bhi.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d004      	beq.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc08:	d004      	beq.n	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800cc0a:	e023      	b.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cc0c:	f7fe fe70 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800cc10:	61f8      	str	r0, [r7, #28]
          break;
 800cc12:	e026      	b.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cc14:	4b13      	ldr	r3, [pc, #76]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cc16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc1a:	f003 0302 	and.w	r3, r3, #2
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d11a      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800cc22:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cc26:	61fb      	str	r3, [r7, #28]
          break;
 800cc28:	e016      	b.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc2a:	4b0e      	ldr	r3, [pc, #56]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc36:	d111      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800cc38:	4b0b      	ldr	r3, [pc, #44]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800cc3a:	61fb      	str	r3, [r7, #28]
          break;
 800cc3c:	e00e      	b.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cc3e:	4b09      	ldr	r3, [pc, #36]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800cc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d109      	bne.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800cc4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc50:	61fb      	str	r3, [r7, #28]
          break;
 800cc52:	e005      	b.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800cc54:	bf00      	nop
 800cc56:	e079      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cc58:	bf00      	nop
 800cc5a:	e077      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cc5c:	bf00      	nop
 800cc5e:	e075      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800cc60:	bf00      	nop
        break;
 800cc62:	e073      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800cc64:	40021000 	.word	0x40021000
 800cc68:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800cc6c:	4b3a      	ldr	r3, [pc, #232]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cc6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cc76:	613b      	str	r3, [r7, #16]
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc7e:	d02c      	beq.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc86:	d833      	bhi.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc8e:	d01a      	beq.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc96:	d82b      	bhi.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cca4:	d004      	beq.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800cca6:	e023      	b.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cca8:	f7fe fe22 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800ccac:	61f8      	str	r0, [r7, #28]
          break;
 800ccae:	e026      	b.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ccb0:	4b29      	ldr	r3, [pc, #164]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ccb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccb6:	f003 0302 	and.w	r3, r3, #2
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d11a      	bne.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800ccbe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ccc2:	61fb      	str	r3, [r7, #28]
          break;
 800ccc4:	e016      	b.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccc6:	4b24      	ldr	r3, [pc, #144]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccd2:	d111      	bne.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 800ccd4:	4b21      	ldr	r3, [pc, #132]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800ccd6:	61fb      	str	r3, [r7, #28]
          break;
 800ccd8:	e00e      	b.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ccda:	4b1f      	ldr	r3, [pc, #124]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800ccdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cce0:	f003 0302 	and.w	r3, r3, #2
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d109      	bne.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 800cce8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccec:	61fb      	str	r3, [r7, #28]
          break;
 800ccee:	e005      	b.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800ccf0:	bf00      	nop
 800ccf2:	e02b      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ccf4:	bf00      	nop
 800ccf6:	e029      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ccf8:	bf00      	nop
 800ccfa:	e027      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800ccfc:	bf00      	nop
        break;
 800ccfe:	e025      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800cd00:	4b15      	ldr	r3, [pc, #84]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cd02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cd0a:	613b      	str	r3, [r7, #16]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d004      	beq.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd18:	d004      	beq.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 800cd1a:	e00d      	b.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cd1c:	f7fe fde8 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800cd20:	61f8      	str	r0, [r7, #28]
          break;
 800cd22:	e009      	b.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd24:	4b0c      	ldr	r3, [pc, #48]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd30:	d101      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 800cd32:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800cd34:	61fb      	str	r3, [r7, #28]
          break;
 800cd36:	bf00      	nop
        break;
 800cd38:	e008      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd3a:	bf00      	nop
 800cd3c:	e006      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd3e:	bf00      	nop
 800cd40:	e004      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd42:	bf00      	nop
 800cd44:	e002      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd46:	bf00      	nop
 800cd48:	e000      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800cd4a:	bf00      	nop
    }
  }

  return(frequency);
 800cd4c:	69fb      	ldr	r3, [r7, #28]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3720      	adds	r7, #32
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	40021000 	.word	0x40021000
 800cd5c:	00f42400 	.word	0x00f42400

0800cd60 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800cd60:	b480      	push	{r7}
 800cd62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800cd64:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a04      	ldr	r2, [pc, #16]	; (800cd7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800cd6a:	f043 0304 	orr.w	r3, r3, #4
 800cd6e:	6013      	str	r3, [r2, #0]
}
 800cd70:	bf00      	nop
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	40021000 	.word	0x40021000

0800cd80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cd8e:	4b74      	ldr	r3, [pc, #464]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	f003 0303 	and.w	r3, r3, #3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d018      	beq.n	800cdcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cd9a:	4b71      	ldr	r3, [pc, #452]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	f003 0203 	and.w	r2, r3, #3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d10d      	bne.n	800cdc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
       ||
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d009      	beq.n	800cdc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cdb2:	4b6b      	ldr	r3, [pc, #428]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	091b      	lsrs	r3, r3, #4
 800cdb8:	f003 0307 	and.w	r3, r3, #7
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	685b      	ldr	r3, [r3, #4]
       ||
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d047      	beq.n	800ce56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	73fb      	strb	r3, [r7, #15]
 800cdca:	e044      	b.n	800ce56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b03      	cmp	r3, #3
 800cdd2:	d018      	beq.n	800ce06 <RCCEx_PLLSAI1_Config+0x86>
 800cdd4:	2b03      	cmp	r3, #3
 800cdd6:	d825      	bhi.n	800ce24 <RCCEx_PLLSAI1_Config+0xa4>
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d002      	beq.n	800cde2 <RCCEx_PLLSAI1_Config+0x62>
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d009      	beq.n	800cdf4 <RCCEx_PLLSAI1_Config+0x74>
 800cde0:	e020      	b.n	800ce24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cde2:	4b5f      	ldr	r3, [pc, #380]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d11d      	bne.n	800ce2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdf2:	e01a      	b.n	800ce2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cdf4:	4b5a      	ldr	r3, [pc, #360]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d116      	bne.n	800ce2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ce04:	e013      	b.n	800ce2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ce06:	4b56      	ldr	r3, [pc, #344]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d10f      	bne.n	800ce32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ce12:	4b53      	ldr	r3, [pc, #332]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d109      	bne.n	800ce32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ce22:	e006      	b.n	800ce32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	73fb      	strb	r3, [r7, #15]
      break;
 800ce28:	e004      	b.n	800ce34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ce2a:	bf00      	nop
 800ce2c:	e002      	b.n	800ce34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ce2e:	bf00      	nop
 800ce30:	e000      	b.n	800ce34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ce32:	bf00      	nop
    }

    if(status == HAL_OK)
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10d      	bne.n	800ce56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ce3a:	4b49      	ldr	r3, [pc, #292]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6819      	ldr	r1, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	011b      	lsls	r3, r3, #4
 800ce4e:	430b      	orrs	r3, r1
 800ce50:	4943      	ldr	r1, [pc, #268]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce52:	4313      	orrs	r3, r2
 800ce54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d17c      	bne.n	800cf56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ce5c:	4b40      	ldr	r3, [pc, #256]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a3f      	ldr	r2, [pc, #252]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce68:	f7f9 fda6 	bl	80069b8 <HAL_GetTick>
 800ce6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ce6e:	e009      	b.n	800ce84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce70:	f7f9 fda2 	bl	80069b8 <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d902      	bls.n	800ce84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	73fb      	strb	r3, [r7, #15]
        break;
 800ce82:	e005      	b.n	800ce90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ce84:	4b36      	ldr	r3, [pc, #216]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1ef      	bne.n	800ce70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d15f      	bne.n	800cf56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d110      	bne.n	800cebe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ce9c:	4b30      	ldr	r3, [pc, #192]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800cea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	6892      	ldr	r2, [r2, #8]
 800ceac:	0211      	lsls	r1, r2, #8
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	68d2      	ldr	r2, [r2, #12]
 800ceb2:	06d2      	lsls	r2, r2, #27
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	492a      	ldr	r1, [pc, #168]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	610b      	str	r3, [r1, #16]
 800cebc:	e027      	b.n	800cf0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d112      	bne.n	800ceea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cec4:	4b26      	ldr	r3, [pc, #152]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800cecc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	6892      	ldr	r2, [r2, #8]
 800ced4:	0211      	lsls	r1, r2, #8
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	6912      	ldr	r2, [r2, #16]
 800ceda:	0852      	lsrs	r2, r2, #1
 800cedc:	3a01      	subs	r2, #1
 800cede:	0552      	lsls	r2, r2, #21
 800cee0:	430a      	orrs	r2, r1
 800cee2:	491f      	ldr	r1, [pc, #124]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cee4:	4313      	orrs	r3, r2
 800cee6:	610b      	str	r3, [r1, #16]
 800cee8:	e011      	b.n	800cf0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ceea:	4b1d      	ldr	r3, [pc, #116]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cef2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	6892      	ldr	r2, [r2, #8]
 800cefa:	0211      	lsls	r1, r2, #8
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	6952      	ldr	r2, [r2, #20]
 800cf00:	0852      	lsrs	r2, r2, #1
 800cf02:	3a01      	subs	r2, #1
 800cf04:	0652      	lsls	r2, r2, #25
 800cf06:	430a      	orrs	r2, r1
 800cf08:	4915      	ldr	r1, [pc, #84]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cf0e:	4b14      	ldr	r3, [pc, #80]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a13      	ldr	r2, [pc, #76]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf1a:	f7f9 fd4d 	bl	80069b8 <HAL_GetTick>
 800cf1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cf20:	e009      	b.n	800cf36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf22:	f7f9 fd49 	bl	80069b8 <HAL_GetTick>
 800cf26:	4602      	mov	r2, r0
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d902      	bls.n	800cf36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cf30:	2303      	movs	r3, #3
 800cf32:	73fb      	strb	r3, [r7, #15]
          break;
 800cf34:	e005      	b.n	800cf42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cf36:	4b0a      	ldr	r3, [pc, #40]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0ef      	beq.n	800cf22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d106      	bne.n	800cf56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cf48:	4b05      	ldr	r3, [pc, #20]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf4a:	691a      	ldr	r2, [r3, #16]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	4903      	ldr	r1, [pc, #12]	; (800cf60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf52:	4313      	orrs	r3, r2
 800cf54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	40021000 	.word	0x40021000

0800cf64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cf72:	4b69      	ldr	r3, [pc, #420]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	f003 0303 	and.w	r3, r3, #3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d018      	beq.n	800cfb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cf7e:	4b66      	ldr	r3, [pc, #408]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	f003 0203 	and.w	r2, r3, #3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d10d      	bne.n	800cfaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
       ||
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d009      	beq.n	800cfaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800cf96:	4b60      	ldr	r3, [pc, #384]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	091b      	lsrs	r3, r3, #4
 800cf9c:	f003 0307 	and.w	r3, r3, #7
 800cfa0:	1c5a      	adds	r2, r3, #1
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	685b      	ldr	r3, [r3, #4]
       ||
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d047      	beq.n	800d03a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	73fb      	strb	r3, [r7, #15]
 800cfae:	e044      	b.n	800d03a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b03      	cmp	r3, #3
 800cfb6:	d018      	beq.n	800cfea <RCCEx_PLLSAI2_Config+0x86>
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d825      	bhi.n	800d008 <RCCEx_PLLSAI2_Config+0xa4>
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d002      	beq.n	800cfc6 <RCCEx_PLLSAI2_Config+0x62>
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d009      	beq.n	800cfd8 <RCCEx_PLLSAI2_Config+0x74>
 800cfc4:	e020      	b.n	800d008 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cfc6:	4b54      	ldr	r3, [pc, #336]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f003 0302 	and.w	r3, r3, #2
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d11d      	bne.n	800d00e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfd6:	e01a      	b.n	800d00e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cfd8:	4b4f      	ldr	r3, [pc, #316]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d116      	bne.n	800d012 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfe8:	e013      	b.n	800d012 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cfea:	4b4b      	ldr	r3, [pc, #300]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10f      	bne.n	800d016 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cff6:	4b48      	ldr	r3, [pc, #288]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d109      	bne.n	800d016 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d006:	e006      	b.n	800d016 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d008:	2301      	movs	r3, #1
 800d00a:	73fb      	strb	r3, [r7, #15]
      break;
 800d00c:	e004      	b.n	800d018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d00e:	bf00      	nop
 800d010:	e002      	b.n	800d018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d012:	bf00      	nop
 800d014:	e000      	b.n	800d018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d016:	bf00      	nop
    }

    if(status == HAL_OK)
 800d018:	7bfb      	ldrb	r3, [r7, #15]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10d      	bne.n	800d03a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d01e:	4b3e      	ldr	r3, [pc, #248]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6819      	ldr	r1, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	3b01      	subs	r3, #1
 800d030:	011b      	lsls	r3, r3, #4
 800d032:	430b      	orrs	r3, r1
 800d034:	4938      	ldr	r1, [pc, #224]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d036:	4313      	orrs	r3, r2
 800d038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d166      	bne.n	800d10e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d040:	4b35      	ldr	r3, [pc, #212]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a34      	ldr	r2, [pc, #208]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d04a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d04c:	f7f9 fcb4 	bl	80069b8 <HAL_GetTick>
 800d050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d052:	e009      	b.n	800d068 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d054:	f7f9 fcb0 	bl	80069b8 <HAL_GetTick>
 800d058:	4602      	mov	r2, r0
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d902      	bls.n	800d068 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	73fb      	strb	r3, [r7, #15]
        break;
 800d066:	e005      	b.n	800d074 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d068:	4b2b      	ldr	r3, [pc, #172]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1ef      	bne.n	800d054 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d074:	7bfb      	ldrb	r3, [r7, #15]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d149      	bne.n	800d10e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d110      	bne.n	800d0a2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d080:	4b25      	ldr	r3, [pc, #148]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d082:	695b      	ldr	r3, [r3, #20]
 800d084:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	6892      	ldr	r2, [r2, #8]
 800d090:	0211      	lsls	r1, r2, #8
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	68d2      	ldr	r2, [r2, #12]
 800d096:	06d2      	lsls	r2, r2, #27
 800d098:	430a      	orrs	r2, r1
 800d09a:	491f      	ldr	r1, [pc, #124]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d09c:	4313      	orrs	r3, r2
 800d09e:	614b      	str	r3, [r1, #20]
 800d0a0:	e011      	b.n	800d0c6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d0a2:	4b1d      	ldr	r3, [pc, #116]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d0a4:	695b      	ldr	r3, [r3, #20]
 800d0a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d0aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	6892      	ldr	r2, [r2, #8]
 800d0b2:	0211      	lsls	r1, r2, #8
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	6912      	ldr	r2, [r2, #16]
 800d0b8:	0852      	lsrs	r2, r2, #1
 800d0ba:	3a01      	subs	r2, #1
 800d0bc:	0652      	lsls	r2, r2, #25
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	4915      	ldr	r1, [pc, #84]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d0c6:	4b14      	ldr	r3, [pc, #80]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a13      	ldr	r2, [pc, #76]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d0cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0d2:	f7f9 fc71 	bl	80069b8 <HAL_GetTick>
 800d0d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d0d8:	e009      	b.n	800d0ee <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d0da:	f7f9 fc6d 	bl	80069b8 <HAL_GetTick>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	d902      	bls.n	800d0ee <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	73fb      	strb	r3, [r7, #15]
          break;
 800d0ec:	e005      	b.n	800d0fa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d0ee:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0ef      	beq.n	800d0da <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d106      	bne.n	800d10e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d100:	4b05      	ldr	r3, [pc, #20]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d102:	695a      	ldr	r2, [r3, #20]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	695b      	ldr	r3, [r3, #20]
 800d108:	4903      	ldr	r1, [pc, #12]	; (800d118 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d10a:	4313      	orrs	r3, r2
 800d10c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d110:	4618      	mov	r0, r3
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	40021000 	.word	0x40021000

0800d11c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b089      	sub	sp, #36	; 0x24
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800d126:	2300      	movs	r3, #0
 800d128:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800d12a:	2300      	movs	r3, #0
 800d12c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800d12e:	2300      	movs	r3, #0
 800d130:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d138:	d10c      	bne.n	800d154 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d13a:	4b77      	ldr	r3, [pc, #476]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d140:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d144:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d14c:	d112      	bne.n	800d174 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d14e:	4b73      	ldr	r3, [pc, #460]	; (800d31c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800d150:	61fb      	str	r3, [r7, #28]
 800d152:	e00f      	b.n	800d174 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d15a:	d10b      	bne.n	800d174 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d15c:	4b6e      	ldr	r3, [pc, #440]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d162:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800d166:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d16e:	d101      	bne.n	800d174 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800d170:	4b6a      	ldr	r3, [pc, #424]	; (800d31c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800d172:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2b00      	cmp	r3, #0
 800d178:	f040 80c6 	bne.w	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d186:	d003      	beq.n	800d190 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d18e:	d13b      	bne.n	800d208 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d190:	4b61      	ldr	r3, [pc, #388]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d19c:	f040 80b3 	bne.w	800d306 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800d1a0:	4b5d      	ldr	r3, [pc, #372]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 80ac 	beq.w	800d306 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d1ae:	4b5a      	ldr	r3, [pc, #360]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	091b      	lsrs	r3, r3, #4
 800d1b4:	f003 0307 	and.w	r3, r3, #7
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800d1c2:	4b55      	ldr	r3, [pc, #340]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	0a1b      	lsrs	r3, r3, #8
 800d1c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1cc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800d1ce:	4b52      	ldr	r3, [pc, #328]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	0edb      	lsrs	r3, r3, #27
 800d1d4:	f003 031f 	and.w	r3, r3, #31
 800d1d8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10a      	bne.n	800d1f6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800d1e0:	4b4d      	ldr	r3, [pc, #308]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800d1ec:	2311      	movs	r3, #17
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	e001      	b.n	800d1f6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800d1f2:	2307      	movs	r3, #7
 800d1f4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	fb03 f202 	mul.w	r2, r3, r2
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	fbb2 f3f3 	udiv	r3, r2, r3
 800d204:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d206:	e07e      	b.n	800d306 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d139      	bne.n	800d282 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800d20e:	4b42      	ldr	r3, [pc, #264]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d21a:	d175      	bne.n	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800d21c:	4b3e      	ldr	r3, [pc, #248]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d06f      	beq.n	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d228:	4b3b      	ldr	r3, [pc, #236]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	091b      	lsrs	r3, r3, #4
 800d22e:	f003 0307 	and.w	r3, r3, #7
 800d232:	3301      	adds	r3, #1
 800d234:	693a      	ldr	r2, [r7, #16]
 800d236:	fbb2 f3f3 	udiv	r3, r2, r3
 800d23a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d23c:	4b36      	ldr	r3, [pc, #216]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	0a1b      	lsrs	r3, r3, #8
 800d242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d246:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800d248:	4b33      	ldr	r3, [pc, #204]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	0edb      	lsrs	r3, r3, #27
 800d24e:	f003 031f 	and.w	r3, r3, #31
 800d252:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d10a      	bne.n	800d270 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800d25a:	4b2f      	ldr	r3, [pc, #188]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d262:	2b00      	cmp	r3, #0
 800d264:	d002      	beq.n	800d26c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800d266:	2311      	movs	r3, #17
 800d268:	617b      	str	r3, [r7, #20]
 800d26a:	e001      	b.n	800d270 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800d26c:	2307      	movs	r3, #7
 800d26e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	fb03 f202 	mul.w	r2, r3, r2
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	e042      	b.n	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d288:	d003      	beq.n	800d292 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d290:	d13a      	bne.n	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800d292:	4b21      	ldr	r3, [pc, #132]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d29a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d29e:	d133      	bne.n	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800d2a0:	4b1d      	ldr	r3, [pc, #116]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d2a2:	695b      	ldr	r3, [r3, #20]
 800d2a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d02d      	beq.n	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d2ac:	4b1a      	ldr	r3, [pc, #104]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	091b      	lsrs	r3, r3, #4
 800d2b2:	f003 0307 	and.w	r3, r3, #7
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2be:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d2c0:	4b15      	ldr	r3, [pc, #84]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d2c2:	695b      	ldr	r3, [r3, #20]
 800d2c4:	0a1b      	lsrs	r3, r3, #8
 800d2c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ca:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800d2cc:	4b12      	ldr	r3, [pc, #72]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d2ce:	695b      	ldr	r3, [r3, #20]
 800d2d0:	0edb      	lsrs	r3, r3, #27
 800d2d2:	f003 031f 	and.w	r3, r3, #31
 800d2d6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10a      	bne.n	800d2f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800d2de:	4b0e      	ldr	r3, [pc, #56]	; (800d318 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800d2ea:	2311      	movs	r3, #17
 800d2ec:	617b      	str	r3, [r7, #20]
 800d2ee:	e001      	b.n	800d2f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800d2f0:	2307      	movs	r3, #7
 800d2f2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	fb03 f202 	mul.w	r2, r3, r2
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d302:	61fb      	str	r3, [r7, #28]
 800d304:	e000      	b.n	800d308 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d306:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800d308:	69fb      	ldr	r3, [r7, #28]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3724      	adds	r7, #36	; 0x24
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	40021000 	.word	0x40021000
 800d31c:	001fff68 	.word	0x001fff68

0800d320 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b088      	sub	sp, #32
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	e155      	b.n	800d5de <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d106      	bne.n	800d34c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7f8 fb6c 	bl	8005a24 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fc1d 	bl	800db8c <SAI_Disable>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d001      	beq.n	800d35c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	e140      	b.n	800d5de <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2202      	movs	r2, #2
 800d360:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d00c      	beq.n	800d386 <HAL_SAI_Init+0x66>
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d80d      	bhi.n	800d38c <HAL_SAI_Init+0x6c>
 800d370:	2b00      	cmp	r3, #0
 800d372:	d002      	beq.n	800d37a <HAL_SAI_Init+0x5a>
 800d374:	2b01      	cmp	r3, #1
 800d376:	d003      	beq.n	800d380 <HAL_SAI_Init+0x60>
 800d378:	e008      	b.n	800d38c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	61fb      	str	r3, [r7, #28]
      break;
 800d37e:	e008      	b.n	800d392 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d380:	2310      	movs	r3, #16
 800d382:	61fb      	str	r3, [r7, #28]
      break;
 800d384:	e005      	b.n	800d392 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d386:	2320      	movs	r3, #32
 800d388:	61fb      	str	r3, [r7, #28]
      break;
 800d38a:	e002      	b.n	800d392 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800d38c:	2300      	movs	r3, #0
 800d38e:	61fb      	str	r3, [r7, #28]
      break;
 800d390:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	2b03      	cmp	r3, #3
 800d398:	d81d      	bhi.n	800d3d6 <HAL_SAI_Init+0xb6>
 800d39a:	a201      	add	r2, pc, #4	; (adr r2, 800d3a0 <HAL_SAI_Init+0x80>)
 800d39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a0:	0800d3b1 	.word	0x0800d3b1
 800d3a4:	0800d3b7 	.word	0x0800d3b7
 800d3a8:	0800d3bf 	.word	0x0800d3bf
 800d3ac:	0800d3c7 	.word	0x0800d3c7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	617b      	str	r3, [r7, #20]
      break;
 800d3b4:	e012      	b.n	800d3dc <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3ba:	617b      	str	r3, [r7, #20]
      break;
 800d3bc:	e00e      	b.n	800d3dc <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d3be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3c2:	617b      	str	r3, [r7, #20]
      break;
 800d3c4:	e00a      	b.n	800d3dc <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d3c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3ca:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	f043 0301 	orr.w	r3, r3, #1
 800d3d2:	61fb      	str	r3, [r7, #28]
      break;
 800d3d4:	e002      	b.n	800d3dc <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	617b      	str	r3, [r7, #20]
      break;
 800d3da:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a81      	ldr	r2, [pc, #516]	; (800d5e8 <HAL_SAI_Init+0x2c8>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d004      	beq.n	800d3f0 <HAL_SAI_Init+0xd0>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a80      	ldr	r2, [pc, #512]	; (800d5ec <HAL_SAI_Init+0x2cc>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d103      	bne.n	800d3f8 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800d3f0:	4a7f      	ldr	r2, [pc, #508]	; (800d5f0 <HAL_SAI_Init+0x2d0>)
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	e002      	b.n	800d3fe <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d3f8:	4a7e      	ldr	r2, [pc, #504]	; (800d5f4 <HAL_SAI_Init+0x2d4>)
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	69db      	ldr	r3, [r3, #28]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d041      	beq.n	800d48a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a77      	ldr	r2, [pc, #476]	; (800d5e8 <HAL_SAI_Init+0x2c8>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d004      	beq.n	800d41a <HAL_SAI_Init+0xfa>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a75      	ldr	r2, [pc, #468]	; (800d5ec <HAL_SAI_Init+0x2cc>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d105      	bne.n	800d426 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d41a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d41e:	f7fe fee7 	bl	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d422:	6138      	str	r0, [r7, #16]
 800d424:	e004      	b.n	800d430 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d426:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d42a:	f7fe fee1 	bl	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d42e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800d430:	693a      	ldr	r2, [r7, #16]
 800d432:	4613      	mov	r3, r2
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	461a      	mov	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	69db      	ldr	r3, [r3, #28]
 800d440:	025b      	lsls	r3, r3, #9
 800d442:	fbb2 f3f3 	udiv	r3, r2, r3
 800d446:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	4a6b      	ldr	r2, [pc, #428]	; (800d5f8 <HAL_SAI_Init+0x2d8>)
 800d44c:	fba2 2303 	umull	r2, r3, r2, r3
 800d450:	08da      	lsrs	r2, r3, #3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d456:	68f9      	ldr	r1, [r7, #12]
 800d458:	4b67      	ldr	r3, [pc, #412]	; (800d5f8 <HAL_SAI_Init+0x2d8>)
 800d45a:	fba3 2301 	umull	r2, r3, r3, r1
 800d45e:	08da      	lsrs	r2, r3, #3
 800d460:	4613      	mov	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4413      	add	r3, r2
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	1aca      	subs	r2, r1, r3
 800d46a:	2a08      	cmp	r2, #8
 800d46c:	d904      	bls.n	800d478 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	1c5a      	adds	r2, r3, #1
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47c:	2b04      	cmp	r3, #4
 800d47e:	d104      	bne.n	800d48a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a1b      	ldr	r3, [r3, #32]
 800d484:	085a      	lsrs	r2, r3, #1
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <HAL_SAI_Init+0x17a>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	2b02      	cmp	r3, #2
 800d498:	d109      	bne.n	800d4ae <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d101      	bne.n	800d4a6 <HAL_SAI_Init+0x186>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e001      	b.n	800d4aa <HAL_SAI_Init+0x18a>
 800d4a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4aa:	61bb      	str	r3, [r7, #24]
 800d4ac:	e008      	b.n	800d4c0 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d102      	bne.n	800d4bc <HAL_SAI_Init+0x19c>
 800d4b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4ba:	e000      	b.n	800d4be <HAL_SAI_Init+0x19e>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	6819      	ldr	r1, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	4b4c      	ldr	r3, [pc, #304]	; (800d5fc <HAL_SAI_Init+0x2dc>)
 800d4cc:	400b      	ands	r3, r1
 800d4ce:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	6819      	ldr	r1, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685a      	ldr	r2, [r3, #4]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4de:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d4e4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ea:	431a      	orrs	r2, r3
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800d4f8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d504:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	051b      	lsls	r3, r3, #20
 800d50c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	430a      	orrs	r2, r1
 800d514:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	6812      	ldr	r2, [r2, #0]
 800d520:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d524:	f023 030f 	bic.w	r3, r3, #15
 800d528:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6859      	ldr	r1, [r3, #4]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	699a      	ldr	r2, [r3, #24]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d538:	431a      	orrs	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53e:	431a      	orrs	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6899      	ldr	r1, [r3, #8]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	4b2b      	ldr	r3, [pc, #172]	; (800d600 <HAL_SAI_Init+0x2e0>)
 800d554:	400b      	ands	r3, r1
 800d556:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6899      	ldr	r1, [r3, #8]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d562:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d568:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d56e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d574:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d57a:	3b01      	subs	r3, #1
 800d57c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d57e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	430a      	orrs	r2, r1
 800d586:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68d9      	ldr	r1, [r3, #12]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d596:	400b      	ands	r3, r1
 800d598:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68d9      	ldr	r1, [r3, #12]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5a8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5ae:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d5b0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	021b      	lsls	r3, r3, #8
 800d5ba:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3720      	adds	r7, #32
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	40015404 	.word	0x40015404
 800d5ec:	40015424 	.word	0x40015424
 800d5f0:	40015400 	.word	0x40015400
 800d5f4:	40015800 	.word	0x40015800
 800d5f8:	cccccccd 	.word	0xcccccccd
 800d5fc:	ff05c010 	.word	0xff05c010
 800d600:	fff88000 	.word	0xfff88000

0800d604 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	4613      	mov	r3, r2
 800d612:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d614:	f7f9 f9d0 	bl	80069b8 <HAL_GetTick>
 800d618:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <HAL_SAI_Transmit+0x22>
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e0ee      	b.n	800d808 <HAL_SAI_Transmit+0x204>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b01      	cmp	r3, #1
 800d634:	f040 80e7 	bne.w	800d806 <HAL_SAI_Transmit+0x202>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d101      	bne.n	800d646 <HAL_SAI_Transmit+0x42>
 800d642:	2302      	movs	r3, #2
 800d644:	e0e0      	b.n	800d808 <HAL_SAI_Transmit+0x204>
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	88fa      	ldrh	r2, [r7, #6]
 800d652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	88fa      	ldrh	r2, [r7, #6]
 800d65a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2212      	movs	r2, #18
 800d668:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2200      	movs	r2, #0
 800d670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f040 80b1 	bne.w	800d7e6 <HAL_SAI_Transmit+0x1e2>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f000 f9c7 	bl	800da18 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d698:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0U)
 800d69a:	e0a4      	b.n	800d7e6 <HAL_SAI_Transmit+0x1e2>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	695b      	ldr	r3, [r3, #20]
 800d6a2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d6a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d6aa:	d06b      	beq.n	800d784 <HAL_SAI_Transmit+0x180>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b0:	2b40      	cmp	r3, #64	; 0x40
 800d6b2:	d10f      	bne.n	800d6d4 <HAL_SAI_Transmit+0xd0>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10b      	bne.n	800d6d4 <HAL_SAI_Transmit+0xd0>
        {
          hsai->Instance->DR = *hsai->pBuffPtr;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c0:	781a      	ldrb	r2, [r3, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr++;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6cc:	1c5a      	adds	r2, r3, #1
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	665a      	str	r2, [r3, #100]	; 0x64
 800d6d2:	e04e      	b.n	800d772 <HAL_SAI_Transmit+0x16e>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d8:	2b80      	cmp	r3, #128	; 0x80
 800d6da:	d819      	bhi.n	800d710 <HAL_SAI_Transmit+0x10c>
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6e8:	1c5a      	adds	r2, r3, #1
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	665a      	str	r2, [r3, #100]	; 0x64
          hsai->Instance->DR = temp;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	693a      	ldr	r2, [r7, #16]
 800d70c:	61da      	str	r2, [r3, #28]
 800d70e:	e030      	b.n	800d772 <HAL_SAI_Transmit+0x16e>
        }
        else
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	021b      	lsls	r3, r3, #8
 800d72a:	693a      	ldr	r2, [r7, #16]
 800d72c:	4313      	orrs	r3, r2
 800d72e:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d734:	1c5a      	adds	r2, r3, #1
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	041b      	lsls	r3, r3, #16
 800d742:	693a      	ldr	r2, [r7, #16]
 800d744:	4313      	orrs	r3, r2
 800d746:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d74c:	1c5a      	adds	r2, r3, #1
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	061b      	lsls	r3, r3, #24
 800d75a:	693a      	ldr	r2, [r7, #16]
 800d75c:	4313      	orrs	r3, r2
 800d75e:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d764:	1c5a      	adds	r2, r3, #1
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	665a      	str	r2, [r3, #100]	; 0x64
          hsai->Instance->DR = temp;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	61da      	str	r2, [r3, #28]
        }
        hsai->XferCount--;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d778:	3b01      	subs	r3, #1
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d782:	e030      	b.n	800d7e6 <HAL_SAI_Transmit+0x1e2>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 800d784:	f7f9 f918 	bl	80069b8 <HAL_GetTick>
 800d788:	4602      	mov	r2, r0
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	429a      	cmp	r2, r3
 800d792:	d302      	bcc.n	800d79a <HAL_SAI_Transmit+0x196>
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d125      	bne.n	800d7e6 <HAL_SAI_Transmit+0x1e2>
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7a0:	d021      	beq.n	800d7e6 <HAL_SAI_Transmit+0x1e2>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7ba:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f000 f9e5 	bl	800db8c <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	685a      	ldr	r2, [r3, #4]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f042 0208 	orr.w	r2, r2, #8
 800d7d0:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e010      	b.n	800d808 <HAL_SAI_Transmit+0x204>
    while (hsai->XferCount > 0U)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f47f af55 	bne.w	800d69c <HAL_SAI_Transmit+0x98>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	e000      	b.n	800d808 <HAL_SAI_Transmit+0x204>
  }
  else
  {
    return HAL_BUSY;
 800d806:	2302      	movs	r3, #2
  }
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3718      	adds	r7, #24
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d822:	2b01      	cmp	r3, #1
 800d824:	d101      	bne.n	800d82a <HAL_SAI_DMAStop+0x1a>
 800d826:	2302      	movs	r3, #2
 800d828:	e042      	b.n	800d8b0 <HAL_SAI_DMAStop+0xa0>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d840:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	2b12      	cmp	r3, #18
 800d84c:	d108      	bne.n	800d860 <HAL_SAI_DMAStop+0x50>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d852:	2b00      	cmp	r3, #0
 800d854:	d004      	beq.n	800d860 <HAL_SAI_DMAStop+0x50>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fa fd38 	bl	80082d0 <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b22      	cmp	r3, #34	; 0x22
 800d86a:	d108      	bne.n	800d87e <HAL_SAI_DMAStop+0x6e>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d870:	2b00      	cmp	r3, #0
 800d872:	d004      	beq.n	800d87e <HAL_SAI_DMAStop+0x6e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fa fd29 	bl	80082d0 <HAL_DMA_Abort>
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 f984 	bl	800db8c <SAI_Disable>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <HAL_SAI_DMAStop+0x7e>
  {
    status = HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	685a      	ldr	r2, [r3, #4]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f042 0208 	orr.w	r2, r2, #8
 800d89c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b086      	sub	sp, #24
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d8c6:	f7f9 f877 	bl	80069b8 <HAL_GetTick>
 800d8ca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <HAL_SAI_Transmit_DMA+0x20>
 800d8d2:	88fb      	ldrh	r3, [r7, #6]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e093      	b.n	800da04 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	f040 808c 	bne.w	800da02 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d101      	bne.n	800d8f8 <HAL_SAI_Transmit_DMA+0x40>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	e085      	b.n	800da04 <HAL_SAI_Transmit_DMA+0x14c>
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	68ba      	ldr	r2, [r7, #8]
 800d904:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	88fa      	ldrh	r2, [r7, #6]
 800d90a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	88fa      	ldrh	r2, [r7, #6]
 800d912:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2212      	movs	r2, #18
 800d922:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d92a:	4a38      	ldr	r2, [pc, #224]	; (800da0c <HAL_SAI_Transmit_DMA+0x154>)
 800d92c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d932:	4a37      	ldr	r2, [pc, #220]	; (800da10 <HAL_SAI_Transmit_DMA+0x158>)
 800d934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d93a:	4a36      	ldr	r2, [pc, #216]	; (800da14 <HAL_SAI_Transmit_DMA+0x15c>)
 800d93c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d942:	2200      	movs	r2, #0
 800d944:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d94e:	4619      	mov	r1, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	331c      	adds	r3, #28
 800d956:	461a      	mov	r2, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d95e:	f7fa fc57 	bl	8008210 <HAL_DMA_Start_IT>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d005      	beq.n	800d974 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	e047      	b.n	800da04 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d974:	2100      	movs	r1, #0
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f000 f8d1 	bl	800db1e <SAI_InterruptFlag>
 800d97c:	4601      	mov	r1, r0
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	691a      	ldr	r2, [r3, #16]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	430a      	orrs	r2, r1
 800d98a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d99a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d99c:	e015      	b.n	800d9ca <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d99e:	f7f9 f80b 	bl	80069b8 <HAL_GetTick>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9ac:	d90d      	bls.n	800d9ca <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d9c6:	2303      	movs	r3, #3
 800d9c8:	e01c      	b.n	800da04 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	695b      	ldr	r3, [r3, #20]
 800d9d0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0e2      	beq.n	800d99e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d107      	bne.n	800d9f6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d9f4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	e000      	b.n	800da04 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800da02:	2302      	movs	r3, #2
  }
}
 800da04:	4618      	mov	r0, r3
 800da06:	3718      	adds	r7, #24
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	0800dc5f 	.word	0x0800dc5f
 800da10:	0800dc01 	.word	0x0800dc01
 800da14:	0800dc7b 	.word	0x0800dc7b

0800da18 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800da20:	e06a      	b.n	800daf8 <SAI_FillFifo+0xe0>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da26:	2b40      	cmp	r3, #64	; 0x40
 800da28:	d10f      	bne.n	800da4a <SAI_FillFifo+0x32>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d10b      	bne.n	800da4a <SAI_FillFifo+0x32>
    {
      hsai->Instance->DR = *hsai->pBuffPtr;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr++;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	665a      	str	r2, [r3, #100]	; 0x64
 800da48:	e04e      	b.n	800dae8 <SAI_FillFifo+0xd0>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da4e:	2b80      	cmp	r3, #128	; 0x80
 800da50:	d819      	bhi.n	800da86 <SAI_FillFifo+0x6e>
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	021b      	lsls	r3, r3, #8
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	4313      	orrs	r3, r2
 800da70:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da76:	1c5a      	adds	r2, r3, #1
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	665a      	str	r2, [r3, #100]	; 0x64
      hsai->Instance->DR = temp;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	61da      	str	r2, [r3, #28]
 800da84:	e030      	b.n	800dae8 <SAI_FillFifo+0xd0>
    }
    else
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	021b      	lsls	r3, r3, #8
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	041b      	lsls	r3, r3, #16
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	4313      	orrs	r3, r2
 800dabc:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dac2:	1c5a      	adds	r2, r3, #1
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	061b      	lsls	r3, r3, #24
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dada:	1c5a      	adds	r2, r3, #1
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	665a      	str	r2, [r3, #100]	; 0x64
      hsai->Instance->DR = temp;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	61da      	str	r2, [r3, #28]
    }
    hsai->XferCount--;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800daee:	3b01      	subs	r3, #1
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	695b      	ldr	r3, [r3, #20]
 800dafe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800db02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db06:	d004      	beq.n	800db12 <SAI_FillFifo+0xfa>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d187      	bne.n	800da22 <SAI_FillFifo+0xa>
  }
}
 800db12:	bf00      	nop
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800db1e:	b480      	push	{r7}
 800db20:	b085      	sub	sp, #20
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	460b      	mov	r3, r1
 800db28:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800db2a:	2301      	movs	r3, #1
 800db2c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800db2e:	78fb      	ldrb	r3, [r7, #3]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d103      	bne.n	800db3c <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f043 0308 	orr.w	r3, r3, #8
 800db3a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db40:	2b08      	cmp	r3, #8
 800db42:	d10b      	bne.n	800db5c <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800db48:	2b03      	cmp	r3, #3
 800db4a:	d003      	beq.n	800db54 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d103      	bne.n	800db5c <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f043 0310 	orr.w	r3, r3, #16
 800db5a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	2b03      	cmp	r3, #3
 800db62:	d003      	beq.n	800db6c <SAI_InterruptFlag+0x4e>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	2b02      	cmp	r3, #2
 800db6a:	d104      	bne.n	800db76 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800db72:	60fb      	str	r3, [r7, #12]
 800db74:	e003      	b.n	800db7e <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f043 0304 	orr.w	r3, r3, #4
 800db7c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800db7e:	68fb      	ldr	r3, [r7, #12]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b085      	sub	sp, #20
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800db94:	4b18      	ldr	r3, [pc, #96]	; (800dbf8 <SAI_Disable+0x6c>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a18      	ldr	r2, [pc, #96]	; (800dbfc <SAI_Disable+0x70>)
 800db9a:	fba2 2303 	umull	r2, r3, r2, r3
 800db9e:	0b1b      	lsrs	r3, r3, #12
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800dba4:	2300      	movs	r3, #0
 800dba6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dbb6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10a      	bne.n	800dbd4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800dbce:	2303      	movs	r3, #3
 800dbd0:	72fb      	strb	r3, [r7, #11]
      break;
 800dbd2:	e009      	b.n	800dbe8 <SAI_Disable+0x5c>
    }
    count--;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1e7      	bne.n	800dbb8 <SAI_Disable+0x2c>

  return status;
 800dbe8:	7afb      	ldrb	r3, [r7, #11]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3714      	adds	r7, #20
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop
 800dbf8:	2001c05c 	.word	0x2001c05c
 800dbfc:	95cbec1b 	.word	0x95cbec1b

0800dc00 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	69db      	ldr	r3, [r3, #28]
 800dc12:	2b20      	cmp	r3, #32
 800dc14:	d01c      	beq.n	800dc50 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800dc2c:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dc2e:	2100      	movs	r1, #0
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f7ff ff74 	bl	800db1e <SAI_InterruptFlag>
 800dc36:	4603      	mov	r3, r0
 800dc38:	43d9      	mvns	r1, r3
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	691a      	ldr	r2, [r3, #16]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	400a      	ands	r2, r1
 800dc46:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7f7 fd65 	bl	8005720 <HAL_SAI_TxCpltCallback>
#endif
}
 800dc56:	bf00      	nop
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f7f7 fd69 	bl	8005744 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800dc72:	bf00      	nop
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc86:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800dca6:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f7ff ff6f 	bl	800db8c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7f7 fd52 	bl	8005768 <HAL_SAI_ErrorCallback>
#endif
}
 800dcc4:	bf00      	nop
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e022      	b.n	800dd24 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d105      	bne.n	800dcf6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7f4 f93b 	bl	8001f6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2203      	movs	r2, #3
 800dcfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f814 	bl	800dd2c <HAL_SD_InitCard>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e00a      	b.n	800dd24 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dd2c:	b5b0      	push	{r4, r5, r7, lr}
 800dd2e:	b08e      	sub	sp, #56	; 0x38
 800dd30:	af04      	add	r7, sp, #16
 800dd32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800dd34:	2300      	movs	r3, #0
 800dd36:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800dd40:	2300      	movs	r3, #0
 800dd42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dd44:	2300      	movs	r3, #0
 800dd46:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800dd48:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800dd4c:	f7fe fa50 	bl	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd50:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d109      	bne.n	800dd6c <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dd66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e07b      	b.n	800de64 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	09db      	lsrs	r3, r3, #7
 800dd70:	4a3e      	ldr	r2, [pc, #248]	; (800de6c <HAL_SD_InitCard+0x140>)
 800dd72:	fba2 2303 	umull	r2, r3, r2, r3
 800dd76:	091b      	lsrs	r3, r3, #4
 800dd78:	3b02      	subs	r3, #2
 800dd7a:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681d      	ldr	r5, [r3, #0]
 800dd80:	466c      	mov	r4, sp
 800dd82:	f107 0314 	add.w	r3, r7, #20
 800dd86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd8e:	f107 0308 	add.w	r3, r7, #8
 800dd92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd94:	4628      	mov	r0, r5
 800dd96:	f001 fc45 	bl	800f624 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	685a      	ldr	r2, [r3, #4]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dda8:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f001 fc72 	bl	800f698 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	685a      	ldr	r2, [r3, #4]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ddc2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	3302      	adds	r3, #2
 800ddc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddca:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddce:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800ddd0:	4a27      	ldr	r2, [pc, #156]	; (800de70 <HAL_SD_InitCard+0x144>)
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddd8:	3301      	adds	r3, #1
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7f8 fdf8 	bl	80069d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 fb77 	bl	800e4d4 <SD_PowerON>
 800dde6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dde8:	6a3b      	ldr	r3, [r7, #32]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00b      	beq.n	800de06 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddfa:	6a3b      	ldr	r3, [r7, #32]
 800ddfc:	431a      	orrs	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800de02:	2301      	movs	r3, #1
 800de04:	e02e      	b.n	800de64 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fa96 	bl	800e338 <SD_InitCard>
 800de0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de0e:	6a3b      	ldr	r3, [r7, #32]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00b      	beq.n	800de2c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	431a      	orrs	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800de28:	2301      	movs	r3, #1
 800de2a:	e01b      	b.n	800de64 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de34:	4618      	mov	r0, r3
 800de36:	f001 fcc2 	bl	800f7be <SDMMC_CmdBlockLength>
 800de3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00f      	beq.n	800de62 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a0b      	ldr	r2, [pc, #44]	; (800de74 <HAL_SD_InitCard+0x148>)
 800de48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de4e:	6a3b      	ldr	r3, [r7, #32]
 800de50:	431a      	orrs	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	e000      	b.n	800de64 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3728      	adds	r7, #40	; 0x28
 800de68:	46bd      	mov	sp, r7
 800de6a:	bdb0      	pop	{r4, r5, r7, pc}
 800de6c:	014f8b59 	.word	0x014f8b59
 800de70:	00012110 	.word	0x00012110
 800de74:	004005ff 	.word	0x004005ff

0800de78 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de86:	0f9b      	lsrs	r3, r3, #30
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de92:	0e9b      	lsrs	r3, r3, #26
 800de94:	b2db      	uxtb	r3, r3
 800de96:	f003 030f 	and.w	r3, r3, #15
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dea4:	0e1b      	lsrs	r3, r3, #24
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	f003 0303 	and.w	r3, r3, #3
 800deac:	b2da      	uxtb	r2, r3
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deb6:	0c1b      	lsrs	r3, r3, #16
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dec2:	0a1b      	lsrs	r3, r3, #8
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ded8:	0d1b      	lsrs	r3, r3, #20
 800deda:	b29a      	uxth	r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dee4:	0c1b      	lsrs	r3, r3, #16
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 030f 	and.w	r3, r3, #15
 800deec:	b2da      	uxtb	r2, r3
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800def6:	0bdb      	lsrs	r3, r3, #15
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f003 0301 	and.w	r3, r3, #1
 800defe:	b2da      	uxtb	r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df08:	0b9b      	lsrs	r3, r3, #14
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	b2da      	uxtb	r2, r3
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df1a:	0b5b      	lsrs	r3, r3, #13
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	f003 0301 	and.w	r3, r3, #1
 800df22:	b2da      	uxtb	r2, r3
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df2c:	0b1b      	lsrs	r3, r3, #12
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 0301 	and.w	r3, r3, #1
 800df34:	b2da      	uxtb	r2, r3
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	2200      	movs	r2, #0
 800df3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df44:	2b00      	cmp	r3, #0
 800df46:	d163      	bne.n	800e010 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df4c:	009a      	lsls	r2, r3, #2
 800df4e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800df52:	4013      	ands	r3, r2
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800df58:	0f92      	lsrs	r2, r2, #30
 800df5a:	431a      	orrs	r2, r3
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df64:	0edb      	lsrs	r3, r3, #27
 800df66:	b2db      	uxtb	r3, r3
 800df68:	f003 0307 	and.w	r3, r3, #7
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df76:	0e1b      	lsrs	r3, r3, #24
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	f003 0307 	and.w	r3, r3, #7
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df88:	0d5b      	lsrs	r3, r3, #21
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	f003 0307 	and.w	r3, r3, #7
 800df90:	b2da      	uxtb	r2, r3
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df9a:	0c9b      	lsrs	r3, r3, #18
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	f003 0307 	and.w	r3, r3, #7
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfac:	0bdb      	lsrs	r3, r3, #15
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	f003 0307 	and.w	r3, r3, #7
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	1c5a      	adds	r2, r3, #1
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	7e1b      	ldrb	r3, [r3, #24]
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	f003 0307 	and.w	r3, r3, #7
 800dfce:	3302      	adds	r3, #2
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	fa02 f303 	lsl.w	r3, r2, r3
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dfda:	fb03 f202 	mul.w	r2, r3, r2
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	7a1b      	ldrb	r3, [r3, #8]
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	f003 030f 	and.w	r3, r3, #15
 800dfec:	2201      	movs	r2, #1
 800dfee:	409a      	lsls	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800dffc:	0a52      	lsrs	r2, r2, #9
 800dffe:	fb03 f202 	mul.w	r2, r3, r2
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e00c:	661a      	str	r2, [r3, #96]	; 0x60
 800e00e:	e031      	b.n	800e074 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e014:	2b01      	cmp	r3, #1
 800e016:	d11d      	bne.n	800e054 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e01c:	041b      	lsls	r3, r3, #16
 800e01e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e026:	0c1b      	lsrs	r3, r3, #16
 800e028:	431a      	orrs	r2, r3
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	691b      	ldr	r3, [r3, #16]
 800e032:	3301      	adds	r3, #1
 800e034:	029a      	lsls	r2, r3, #10
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e048:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	661a      	str	r2, [r3, #96]	; 0x60
 800e052:	e00f      	b.n	800e074 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a58      	ldr	r2, [pc, #352]	; (800e1bc <HAL_SD_GetCardCSD+0x344>)
 800e05a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e060:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e070:	2301      	movs	r3, #1
 800e072:	e09d      	b.n	800e1b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e078:	0b9b      	lsrs	r3, r3, #14
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	f003 0301 	and.w	r3, r3, #1
 800e080:	b2da      	uxtb	r2, r3
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e08a:	09db      	lsrs	r3, r3, #7
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e092:	b2da      	uxtb	r2, r3
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ac:	0fdb      	lsrs	r3, r3, #31
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0b8:	0f5b      	lsrs	r3, r3, #29
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	f003 0303 	and.w	r3, r3, #3
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ca:	0e9b      	lsrs	r3, r3, #26
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	f003 0307 	and.w	r3, r3, #7
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0dc:	0d9b      	lsrs	r3, r3, #22
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	f003 030f 	and.w	r3, r3, #15
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ee:	0d5b      	lsrs	r3, r3, #21
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	f003 0301 	and.w	r3, r3, #1
 800e0f6:	b2da      	uxtb	r2, r3
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	2200      	movs	r2, #0
 800e102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e10a:	0c1b      	lsrs	r3, r3, #16
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	f003 0301 	and.w	r3, r3, #1
 800e112:	b2da      	uxtb	r2, r3
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11e:	0bdb      	lsrs	r3, r3, #15
 800e120:	b2db      	uxtb	r3, r3
 800e122:	f003 0301 	and.w	r3, r3, #1
 800e126:	b2da      	uxtb	r2, r3
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e132:	0b9b      	lsrs	r3, r3, #14
 800e134:	b2db      	uxtb	r3, r3
 800e136:	f003 0301 	and.w	r3, r3, #1
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e146:	0b5b      	lsrs	r3, r3, #13
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	f003 0301 	and.w	r3, r3, #1
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e15a:	0b1b      	lsrs	r3, r3, #12
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	b2da      	uxtb	r2, r3
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e16e:	0a9b      	lsrs	r3, r3, #10
 800e170:	b2db      	uxtb	r3, r3
 800e172:	f003 0303 	and.w	r3, r3, #3
 800e176:	b2da      	uxtb	r2, r3
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e182:	0a1b      	lsrs	r3, r3, #8
 800e184:	b2db      	uxtb	r3, r3
 800e186:	f003 0303 	and.w	r3, r3, #3
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e196:	085b      	lsrs	r3, r3, #1
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr
 800e1bc:	004005ff 	.word	0x004005ff

0800e1c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e1c0:	b5b0      	push	{r4, r5, r7, lr}
 800e1c2:	b090      	sub	sp, #64	; 0x40
 800e1c4:	af04      	add	r7, sp, #16
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2203      	movs	r2, #3
 800e1d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1dc:	2b03      	cmp	r3, #3
 800e1de:	d02e      	beq.n	800e23e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1e6:	d106      	bne.n	800e1f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	639a      	str	r2, [r3, #56]	; 0x38
 800e1f4:	e029      	b.n	800e24a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1fc:	d10a      	bne.n	800e214 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f9f6 	bl	800e5f0 <SD_WideBus_Enable>
 800e204:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20c:	431a      	orrs	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	639a      	str	r2, [r3, #56]	; 0x38
 800e212:	e01a      	b.n	800e24a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10a      	bne.n	800e230 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fa33 	bl	800e686 <SD_WideBus_Disable>
 800e220:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e228:	431a      	orrs	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	639a      	str	r2, [r3, #56]	; 0x38
 800e22e:	e00c      	b.n	800e24a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e234:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	639a      	str	r2, [r3, #56]	; 0x38
 800e23c:	e005      	b.n	800e24a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e242:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d007      	beq.n	800e262 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a35      	ldr	r2, [pc, #212]	; (800e32c <HAL_SD_ConfigWideBusOperation+0x16c>)
 800e258:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e260:	e042      	b.n	800e2e8 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800e262:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e266:	f7fd ffc3 	bl	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e26a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d031      	beq.n	800e2d6 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	699b      	ldr	r3, [r3, #24]
 800e292:	3302      	adds	r3, #2
 800e294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e296:	fbb2 f3f3 	udiv	r3, r2, r3
 800e29a:	4a25      	ldr	r2, [pc, #148]	; (800e330 <HAL_SD_ConfigWideBusOperation+0x170>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d907      	bls.n	800e2b0 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	4a24      	ldr	r2, [pc, #144]	; (800e334 <HAL_SD_ConfigWideBusOperation+0x174>)
 800e2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2a8:	0ddb      	lsrs	r3, r3, #23
 800e2aa:	3b02      	subs	r3, #2
 800e2ac:	623b      	str	r3, [r7, #32]
 800e2ae:	e002      	b.n	800e2b6 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681d      	ldr	r5, [r3, #0]
 800e2ba:	466c      	mov	r4, sp
 800e2bc:	f107 0318 	add.w	r3, r7, #24
 800e2c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e2c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e2c8:	f107 030c 	add.w	r3, r7, #12
 800e2cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f001 f9a8 	bl	800f624 <SDMMC_Init>
 800e2d4:	e008      	b.n	800e2e8 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f001 fa64 	bl	800f7be <SDMMC_CmdBlockLength>
 800e2f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00c      	beq.n	800e318 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a0a      	ldr	r2, [pc, #40]	; (800e32c <HAL_SD_ConfigWideBusOperation+0x16c>)
 800e304:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30c:	431a      	orrs	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e312:	2301      	movs	r3, #1
 800e314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e324:	4618      	mov	r0, r3
 800e326:	3730      	adds	r7, #48	; 0x30
 800e328:	46bd      	mov	sp, r7
 800e32a:	bdb0      	pop	{r4, r5, r7, pc}
 800e32c:	004005ff 	.word	0x004005ff
 800e330:	017d7840 	.word	0x017d7840
 800e334:	55e63b89 	.word	0x55e63b89

0800e338 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e338:	b5b0      	push	{r4, r5, r7, lr}
 800e33a:	b094      	sub	sp, #80	; 0x50
 800e33c:	af04      	add	r7, sp, #16
 800e33e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e340:	2301      	movs	r3, #1
 800e342:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4618      	mov	r0, r3
 800e34a:	f001 f9b4 	bl	800f6b6 <SDMMC_GetPowerState>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d102      	bne.n	800e35a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e358:	e0b8      	b.n	800e4cc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e35e:	2b03      	cmp	r3, #3
 800e360:	d02f      	beq.n	800e3c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4618      	mov	r0, r3
 800e368:	f001 fb33 	bl	800f9d2 <SDMMC_CmdSendCID>
 800e36c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e370:	2b00      	cmp	r3, #0
 800e372:	d001      	beq.n	800e378 <SD_InitCard+0x40>
    {
      return errorstate;
 800e374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e376:	e0a9      	b.n	800e4cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2100      	movs	r1, #0
 800e37e:	4618      	mov	r0, r3
 800e380:	f001 f9de 	bl	800f740 <SDMMC_GetResponse>
 800e384:	4602      	mov	r2, r0
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2104      	movs	r1, #4
 800e390:	4618      	mov	r0, r3
 800e392:	f001 f9d5 	bl	800f740 <SDMMC_GetResponse>
 800e396:	4602      	mov	r2, r0
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2108      	movs	r1, #8
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f001 f9cc 	bl	800f740 <SDMMC_GetResponse>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	210c      	movs	r1, #12
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f001 f9c3 	bl	800f740 <SDMMC_GetResponse>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c6:	2b03      	cmp	r3, #3
 800e3c8:	d00d      	beq.n	800e3e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f107 020e 	add.w	r2, r7, #14
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f001 fb39 	bl	800fa4c <SDMMC_CmdSetRelAdd>
 800e3da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d001      	beq.n	800e3e6 <SD_InitCard+0xae>
    {
      return errorstate;
 800e3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3e4:	e072      	b.n	800e4cc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ea:	2b03      	cmp	r3, #3
 800e3ec:	d036      	beq.n	800e45c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e3ee:	89fb      	ldrh	r3, [r7, #14]
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3fe:	041b      	lsls	r3, r3, #16
 800e400:	4619      	mov	r1, r3
 800e402:	4610      	mov	r0, r2
 800e404:	f001 fb03 	bl	800fa0e <SDMMC_CmdSendCSD>
 800e408:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e412:	e05b      	b.n	800e4cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2100      	movs	r1, #0
 800e41a:	4618      	mov	r0, r3
 800e41c:	f001 f990 	bl	800f740 <SDMMC_GetResponse>
 800e420:	4602      	mov	r2, r0
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2104      	movs	r1, #4
 800e42c:	4618      	mov	r0, r3
 800e42e:	f001 f987 	bl	800f740 <SDMMC_GetResponse>
 800e432:	4602      	mov	r2, r0
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2108      	movs	r1, #8
 800e43e:	4618      	mov	r0, r3
 800e440:	f001 f97e 	bl	800f740 <SDMMC_GetResponse>
 800e444:	4602      	mov	r2, r0
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	210c      	movs	r1, #12
 800e450:	4618      	mov	r0, r3
 800e452:	f001 f975 	bl	800f740 <SDMMC_GetResponse>
 800e456:	4602      	mov	r2, r0
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2104      	movs	r1, #4
 800e462:	4618      	mov	r0, r3
 800e464:	f001 f96c 	bl	800f740 <SDMMC_GetResponse>
 800e468:	4603      	mov	r3, r0
 800e46a:	0d1a      	lsrs	r2, r3, #20
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e470:	f107 0310 	add.w	r3, r7, #16
 800e474:	4619      	mov	r1, r3
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff fcfe 	bl	800de78 <HAL_SD_GetCardCSD>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d002      	beq.n	800e488 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e486:	e021      	b.n	800e4cc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6819      	ldr	r1, [r3, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e490:	041b      	lsls	r3, r3, #16
 800e492:	2200      	movs	r2, #0
 800e494:	461c      	mov	r4, r3
 800e496:	4615      	mov	r5, r2
 800e498:	4622      	mov	r2, r4
 800e49a:	462b      	mov	r3, r5
 800e49c:	4608      	mov	r0, r1
 800e49e:	f001 f9b0 	bl	800f802 <SDMMC_CmdSelDesel>
 800e4a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <SD_InitCard+0x176>
  {
    return errorstate;
 800e4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ac:	e00e      	b.n	800e4cc <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681d      	ldr	r5, [r3, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	466c      	mov	r4, sp
 800e4b6:	f103 0210 	add.w	r2, r3, #16
 800e4ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800e4bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	f001 f8ad 	bl	800f624 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3740      	adds	r7, #64	; 0x40
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bdb0      	pop	{r4, r5, r7, pc}

0800e4d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f001 f9ab 	bl	800f848 <SDMMC_CmdGoIdleState>
 800e4f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <SD_PowerON+0x2a>
  {
    return errorstate;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	e072      	b.n	800e5e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4618      	mov	r0, r3
 800e504:	f001 f9be 	bl	800f884 <SDMMC_CmdOperCond>
 800e508:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00d      	beq.n	800e52c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f001 f994 	bl	800f848 <SDMMC_CmdGoIdleState>
 800e520:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d004      	beq.n	800e532 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	e05b      	b.n	800e5e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2201      	movs	r2, #1
 800e530:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e536:	2b01      	cmp	r3, #1
 800e538:	d137      	bne.n	800e5aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2100      	movs	r1, #0
 800e540:	4618      	mov	r0, r3
 800e542:	f001 f9be 	bl	800f8c2 <SDMMC_CmdAppCommand>
 800e546:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d02d      	beq.n	800e5aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e54e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e552:	e047      	b.n	800e5e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2100      	movs	r1, #0
 800e55a:	4618      	mov	r0, r3
 800e55c:	f001 f9b1 	bl	800f8c2 <SDMMC_CmdAppCommand>
 800e560:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d001      	beq.n	800e56c <SD_PowerON+0x98>
    {
      return errorstate;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	e03b      	b.n	800e5e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	491e      	ldr	r1, [pc, #120]	; (800e5ec <SD_PowerON+0x118>)
 800e572:	4618      	mov	r0, r3
 800e574:	f001 f9c7 	bl	800f906 <SDMMC_CmdAppOperCommand>
 800e578:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e584:	e02e      	b.n	800e5e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2100      	movs	r1, #0
 800e58c:	4618      	mov	r0, r3
 800e58e:	f001 f8d7 	bl	800f740 <SDMMC_GetResponse>
 800e592:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	0fdb      	lsrs	r3, r3, #31
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d101      	bne.n	800e5a0 <SD_PowerON+0xcc>
 800e59c:	2301      	movs	r3, #1
 800e59e:	e000      	b.n	800e5a2 <SD_PowerON+0xce>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	613b      	str	r3, [r7, #16]

    count++;
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d802      	bhi.n	800e5ba <SD_PowerON+0xe6>
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0cc      	beq.n	800e554 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d902      	bls.n	800e5ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e5c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e5c8:	e00c      	b.n	800e5e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d003      	beq.n	800e5dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	645a      	str	r2, [r3, #68]	; 0x44
 800e5da:	e002      	b.n	800e5e2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3718      	adds	r7, #24
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	c1100000 	.word	0xc1100000

0800e5f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	60fb      	str	r3, [r7, #12]
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2100      	movs	r1, #0
 800e606:	4618      	mov	r0, r3
 800e608:	f001 f89a 	bl	800f740 <SDMMC_GetResponse>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e616:	d102      	bne.n	800e61e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e61c:	e02f      	b.n	800e67e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e61e:	f107 030c 	add.w	r3, r7, #12
 800e622:	4619      	mov	r1, r3
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f879 	bl	800e71c <SD_FindSCR>
 800e62a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	e023      	b.n	800e67e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d01c      	beq.n	800e67a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e648:	041b      	lsls	r3, r3, #16
 800e64a:	4619      	mov	r1, r3
 800e64c:	4610      	mov	r0, r2
 800e64e:	f001 f938 	bl	800f8c2 <SDMMC_CmdAppCommand>
 800e652:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d001      	beq.n	800e65e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	e00f      	b.n	800e67e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2102      	movs	r1, #2
 800e664:	4618      	mov	r0, r3
 800e666:	f001 f971 	bl	800f94c <SDMMC_CmdBusWidth>
 800e66a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	e003      	b.n	800e67e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e676:	2300      	movs	r3, #0
 800e678:	e001      	b.n	800e67e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e67a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3718      	adds	r7, #24
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b086      	sub	sp, #24
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e68e:	2300      	movs	r3, #0
 800e690:	60fb      	str	r3, [r7, #12]
 800e692:	2300      	movs	r3, #0
 800e694:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2100      	movs	r1, #0
 800e69c:	4618      	mov	r0, r3
 800e69e:	f001 f84f 	bl	800f740 <SDMMC_GetResponse>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6ac:	d102      	bne.n	800e6b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6b2:	e02f      	b.n	800e714 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e6b4:	f107 030c 	add.w	r3, r7, #12
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f82e 	bl	800e71c <SD_FindSCR>
 800e6c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d001      	beq.n	800e6cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	e023      	b.n	800e714 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d01c      	beq.n	800e710 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6de:	041b      	lsls	r3, r3, #16
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	f001 f8ed 	bl	800f8c2 <SDMMC_CmdAppCommand>
 800e6e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	e00f      	b.n	800e714 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f001 f926 	bl	800f94c <SDMMC_CmdBusWidth>
 800e700:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	e003      	b.n	800e714 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e70c:	2300      	movs	r3, #0
 800e70e:	e001      	b.n	800e714 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e710:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e714:	4618      	mov	r0, r3
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e71c:	b590      	push	{r4, r7, lr}
 800e71e:	b08f      	sub	sp, #60	; 0x3c
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e726:	f7f8 f947 	bl	80069b8 <HAL_GetTick>
 800e72a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e72c:	2300      	movs	r3, #0
 800e72e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e730:	2300      	movs	r3, #0
 800e732:	60bb      	str	r3, [r7, #8]
 800e734:	2300      	movs	r3, #0
 800e736:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2108      	movs	r1, #8
 800e742:	4618      	mov	r0, r3
 800e744:	f001 f83b 	bl	800f7be <SDMMC_CmdBlockLength>
 800e748:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e752:	e0a9      	b.n	800e8a8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75c:	041b      	lsls	r3, r3, #16
 800e75e:	4619      	mov	r1, r3
 800e760:	4610      	mov	r0, r2
 800e762:	f001 f8ae 	bl	800f8c2 <SDMMC_CmdAppCommand>
 800e766:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d001      	beq.n	800e772 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	e09a      	b.n	800e8a8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e776:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e778:	2308      	movs	r3, #8
 800e77a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e77c:	2330      	movs	r3, #48	; 0x30
 800e77e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e780:	2302      	movs	r3, #2
 800e782:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e784:	2300      	movs	r3, #0
 800e786:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e788:	2301      	movs	r3, #1
 800e78a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f107 0210 	add.w	r2, r7, #16
 800e794:	4611      	mov	r1, r2
 800e796:	4618      	mov	r0, r3
 800e798:	f000 ffe5 	bl	800f766 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 f8f5 	bl	800f990 <SDMMC_CmdSendSCR>
 800e7a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d022      	beq.n	800e7f4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b0:	e07a      	b.n	800e8a8 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00e      	beq.n	800e7de <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6819      	ldr	r1, [r3, #0]
 800e7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	f107 0208 	add.w	r2, r7, #8
 800e7cc:	18d4      	adds	r4, r2, r3
 800e7ce:	4608      	mov	r0, r1
 800e7d0:	f000 ff55 	bl	800f67e <SDMMC_ReadFIFO>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	6023      	str	r3, [r4, #0]
      index++;
 800e7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7da:	3301      	adds	r3, #1
 800e7dc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7de:	f7f8 f8eb 	bl	80069b8 <HAL_GetTick>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7ec:	d102      	bne.n	800e7f4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e7ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7f2:	e059      	b.n	800e8a8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7fa:	f240 432a 	movw	r3, #1066	; 0x42a
 800e7fe:	4013      	ands	r3, r2
 800e800:	2b00      	cmp	r3, #0
 800e802:	d0d6      	beq.n	800e7b2 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e80a:	f003 0308 	and.w	r3, r3, #8
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d005      	beq.n	800e81e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2208      	movs	r2, #8
 800e818:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e81a:	2308      	movs	r3, #8
 800e81c:	e044      	b.n	800e8a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e824:	f003 0302 	and.w	r3, r3, #2
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d005      	beq.n	800e838 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2202      	movs	r2, #2
 800e832:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e834:	2302      	movs	r3, #2
 800e836:	e037      	b.n	800e8a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e83e:	f003 0320 	and.w	r3, r3, #32
 800e842:	2b00      	cmp	r3, #0
 800e844:	d005      	beq.n	800e852 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2220      	movs	r2, #32
 800e84c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e84e:	2320      	movs	r3, #32
 800e850:	e02a      	b.n	800e8a8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f240 523a 	movw	r2, #1338	; 0x53a
 800e85a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	061a      	lsls	r2, r3, #24
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	021b      	lsls	r3, r3, #8
 800e864:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e868:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	0a1b      	lsrs	r3, r3, #8
 800e86e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e872:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	0e1b      	lsrs	r3, r3, #24
 800e878:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	601a      	str	r2, [r3, #0]
    scr++;
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	3304      	adds	r3, #4
 800e882:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	061a      	lsls	r2, r3, #24
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	021b      	lsls	r3, r3, #8
 800e88c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e890:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	0a1b      	lsrs	r3, r3, #8
 800e896:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e89a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	0e1b      	lsrs	r3, r3, #24
 800e8a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e8a6:	2300      	movs	r3, #0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	373c      	adds	r7, #60	; 0x3c
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd90      	pop	{r4, r7, pc}

0800e8b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d101      	bne.n	800e8c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e095      	b.n	800e9ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d108      	bne.n	800e8dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8d2:	d009      	beq.n	800e8e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	61da      	str	r2, [r3, #28]
 800e8da:	e005      	b.n	800e8e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7f3 fb94 	bl	8002030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2202      	movs	r2, #2
 800e90c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e91e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e928:	d902      	bls.n	800e930 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e92a:	2300      	movs	r3, #0
 800e92c:	60fb      	str	r3, [r7, #12]
 800e92e:	e002      	b.n	800e936 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e934:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e93e:	d007      	beq.n	800e950 <HAL_SPI_Init+0xa0>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e948:	d002      	beq.n	800e950 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2200      	movs	r2, #0
 800e94e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e960:	431a      	orrs	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	f003 0302 	and.w	r3, r3, #2
 800e96a:	431a      	orrs	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	695b      	ldr	r3, [r3, #20]
 800e970:	f003 0301 	and.w	r3, r3, #1
 800e974:	431a      	orrs	r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	699b      	ldr	r3, [r3, #24]
 800e97a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e97e:	431a      	orrs	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e988:	431a      	orrs	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e992:	ea42 0103 	orr.w	r1, r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e99a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	430a      	orrs	r2, r1
 800e9a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	699b      	ldr	r3, [r3, #24]
 800e9aa:	0c1b      	lsrs	r3, r3, #16
 800e9ac:	f003 0204 	and.w	r2, r3, #4
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	f003 0310 	and.w	r3, r3, #16
 800e9b8:	431a      	orrs	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9be:	f003 0308 	and.w	r3, r3, #8
 800e9c2:	431a      	orrs	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e9cc:	ea42 0103 	orr.w	r1, r2, r3
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	430a      	orrs	r2, r1
 800e9dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b084      	sub	sp, #16
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	60f8      	str	r0, [r7, #12]
 800e9fe:	60b9      	str	r1, [r7, #8]
 800ea00:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d101      	bne.n	800ea0c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	e038      	b.n	800ea7e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d106      	bne.n	800ea26 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f7f3 fc23 	bl	800226c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	3308      	adds	r3, #8
 800ea2e:	4619      	mov	r1, r3
 800ea30:	4610      	mov	r0, r2
 800ea32:	f000 fcdf 	bl	800f3f4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	6818      	ldr	r0, [r3, #0]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	461a      	mov	r2, r3
 800ea40:	68b9      	ldr	r1, [r7, #8]
 800ea42:	f000 fd67 	bl	800f514 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6858      	ldr	r0, [r3, #4]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	689a      	ldr	r2, [r3, #8]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea52:	6879      	ldr	r1, [r7, #4]
 800ea54:	f000 fdae 	bl	800f5b4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	6892      	ldr	r2, [r2, #8]
 800ea60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	6892      	ldr	r2, [r2, #8]
 800ea6c:	f041 0101 	orr.w	r1, r1, #1
 800ea70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3710      	adds	r7, #16
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b082      	sub	sp, #8
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d101      	bne.n	800ea98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea94:	2301      	movs	r3, #1
 800ea96:	e040      	b.n	800eb1a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d106      	bne.n	800eaae <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7f3 f8cd 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2224      	movs	r2, #36	; 0x24
 800eab2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f022 0201 	bic.w	r2, r2, #1
 800eac2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 f82d 	bl	800eb24 <UART_SetConfig>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d101      	bne.n	800ead4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e022      	b.n	800eb1a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d002      	beq.n	800eae2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fad9 	bl	800f094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	685a      	ldr	r2, [r3, #4]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eaf0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	689a      	ldr	r2, [r3, #8]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f042 0201 	orr.w	r2, r2, #1
 800eb10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fb60 	bl	800f1d8 <UART_CheckIdleState>
 800eb18:	4603      	mov	r3, r0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
	...

0800eb24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb28:	b08a      	sub	sp, #40	; 0x28
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	689a      	ldr	r2, [r3, #8]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	431a      	orrs	r2, r3
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	431a      	orrs	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	4ba4      	ldr	r3, [pc, #656]	; (800ede4 <UART_SetConfig+0x2c0>)
 800eb54:	4013      	ands	r3, r2
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	6812      	ldr	r2, [r2, #0]
 800eb5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb5c:	430b      	orrs	r3, r1
 800eb5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	68da      	ldr	r2, [r3, #12]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	430a      	orrs	r2, r1
 800eb74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a99      	ldr	r2, [pc, #612]	; (800ede8 <UART_SetConfig+0x2c4>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d004      	beq.n	800eb90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba0:	430a      	orrs	r2, r1
 800eba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a90      	ldr	r2, [pc, #576]	; (800edec <UART_SetConfig+0x2c8>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d126      	bne.n	800ebfc <UART_SetConfig+0xd8>
 800ebae:	4b90      	ldr	r3, [pc, #576]	; (800edf0 <UART_SetConfig+0x2cc>)
 800ebb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebb4:	f003 0303 	and.w	r3, r3, #3
 800ebb8:	2b03      	cmp	r3, #3
 800ebba:	d81b      	bhi.n	800ebf4 <UART_SetConfig+0xd0>
 800ebbc:	a201      	add	r2, pc, #4	; (adr r2, 800ebc4 <UART_SetConfig+0xa0>)
 800ebbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc2:	bf00      	nop
 800ebc4:	0800ebd5 	.word	0x0800ebd5
 800ebc8:	0800ebe5 	.word	0x0800ebe5
 800ebcc:	0800ebdd 	.word	0x0800ebdd
 800ebd0:	0800ebed 	.word	0x0800ebed
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ebda:	e116      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ebdc:	2302      	movs	r3, #2
 800ebde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ebe2:	e112      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ebe4:	2304      	movs	r3, #4
 800ebe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ebea:	e10e      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ebec:	2308      	movs	r3, #8
 800ebee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ebf2:	e10a      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ebf4:	2310      	movs	r3, #16
 800ebf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ebfa:	e106      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a7c      	ldr	r2, [pc, #496]	; (800edf4 <UART_SetConfig+0x2d0>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d138      	bne.n	800ec78 <UART_SetConfig+0x154>
 800ec06:	4b7a      	ldr	r3, [pc, #488]	; (800edf0 <UART_SetConfig+0x2cc>)
 800ec08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec0c:	f003 030c 	and.w	r3, r3, #12
 800ec10:	2b0c      	cmp	r3, #12
 800ec12:	d82d      	bhi.n	800ec70 <UART_SetConfig+0x14c>
 800ec14:	a201      	add	r2, pc, #4	; (adr r2, 800ec1c <UART_SetConfig+0xf8>)
 800ec16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec1a:	bf00      	nop
 800ec1c:	0800ec51 	.word	0x0800ec51
 800ec20:	0800ec71 	.word	0x0800ec71
 800ec24:	0800ec71 	.word	0x0800ec71
 800ec28:	0800ec71 	.word	0x0800ec71
 800ec2c:	0800ec61 	.word	0x0800ec61
 800ec30:	0800ec71 	.word	0x0800ec71
 800ec34:	0800ec71 	.word	0x0800ec71
 800ec38:	0800ec71 	.word	0x0800ec71
 800ec3c:	0800ec59 	.word	0x0800ec59
 800ec40:	0800ec71 	.word	0x0800ec71
 800ec44:	0800ec71 	.word	0x0800ec71
 800ec48:	0800ec71 	.word	0x0800ec71
 800ec4c:	0800ec69 	.word	0x0800ec69
 800ec50:	2300      	movs	r3, #0
 800ec52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec56:	e0d8      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ec58:	2302      	movs	r3, #2
 800ec5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec5e:	e0d4      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ec60:	2304      	movs	r3, #4
 800ec62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec66:	e0d0      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ec68:	2308      	movs	r3, #8
 800ec6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec6e:	e0cc      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ec70:	2310      	movs	r3, #16
 800ec72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec76:	e0c8      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a5e      	ldr	r2, [pc, #376]	; (800edf8 <UART_SetConfig+0x2d4>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d125      	bne.n	800ecce <UART_SetConfig+0x1aa>
 800ec82:	4b5b      	ldr	r3, [pc, #364]	; (800edf0 <UART_SetConfig+0x2cc>)
 800ec84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ec8c:	2b30      	cmp	r3, #48	; 0x30
 800ec8e:	d016      	beq.n	800ecbe <UART_SetConfig+0x19a>
 800ec90:	2b30      	cmp	r3, #48	; 0x30
 800ec92:	d818      	bhi.n	800ecc6 <UART_SetConfig+0x1a2>
 800ec94:	2b20      	cmp	r3, #32
 800ec96:	d00a      	beq.n	800ecae <UART_SetConfig+0x18a>
 800ec98:	2b20      	cmp	r3, #32
 800ec9a:	d814      	bhi.n	800ecc6 <UART_SetConfig+0x1a2>
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d002      	beq.n	800eca6 <UART_SetConfig+0x182>
 800eca0:	2b10      	cmp	r3, #16
 800eca2:	d008      	beq.n	800ecb6 <UART_SetConfig+0x192>
 800eca4:	e00f      	b.n	800ecc6 <UART_SetConfig+0x1a2>
 800eca6:	2300      	movs	r3, #0
 800eca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ecac:	e0ad      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ecae:	2302      	movs	r3, #2
 800ecb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ecb4:	e0a9      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ecb6:	2304      	movs	r3, #4
 800ecb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ecbc:	e0a5      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ecbe:	2308      	movs	r3, #8
 800ecc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ecc4:	e0a1      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ecc6:	2310      	movs	r3, #16
 800ecc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eccc:	e09d      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a4a      	ldr	r2, [pc, #296]	; (800edfc <UART_SetConfig+0x2d8>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d125      	bne.n	800ed24 <UART_SetConfig+0x200>
 800ecd8:	4b45      	ldr	r3, [pc, #276]	; (800edf0 <UART_SetConfig+0x2cc>)
 800ecda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ece2:	2bc0      	cmp	r3, #192	; 0xc0
 800ece4:	d016      	beq.n	800ed14 <UART_SetConfig+0x1f0>
 800ece6:	2bc0      	cmp	r3, #192	; 0xc0
 800ece8:	d818      	bhi.n	800ed1c <UART_SetConfig+0x1f8>
 800ecea:	2b80      	cmp	r3, #128	; 0x80
 800ecec:	d00a      	beq.n	800ed04 <UART_SetConfig+0x1e0>
 800ecee:	2b80      	cmp	r3, #128	; 0x80
 800ecf0:	d814      	bhi.n	800ed1c <UART_SetConfig+0x1f8>
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d002      	beq.n	800ecfc <UART_SetConfig+0x1d8>
 800ecf6:	2b40      	cmp	r3, #64	; 0x40
 800ecf8:	d008      	beq.n	800ed0c <UART_SetConfig+0x1e8>
 800ecfa:	e00f      	b.n	800ed1c <UART_SetConfig+0x1f8>
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed02:	e082      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed04:	2302      	movs	r3, #2
 800ed06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed0a:	e07e      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed12:	e07a      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed14:	2308      	movs	r3, #8
 800ed16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed1a:	e076      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed1c:	2310      	movs	r3, #16
 800ed1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed22:	e072      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a35      	ldr	r2, [pc, #212]	; (800ee00 <UART_SetConfig+0x2dc>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d12a      	bne.n	800ed84 <UART_SetConfig+0x260>
 800ed2e:	4b30      	ldr	r3, [pc, #192]	; (800edf0 <UART_SetConfig+0x2cc>)
 800ed30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed3c:	d01a      	beq.n	800ed74 <UART_SetConfig+0x250>
 800ed3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed42:	d81b      	bhi.n	800ed7c <UART_SetConfig+0x258>
 800ed44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed48:	d00c      	beq.n	800ed64 <UART_SetConfig+0x240>
 800ed4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed4e:	d815      	bhi.n	800ed7c <UART_SetConfig+0x258>
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d003      	beq.n	800ed5c <UART_SetConfig+0x238>
 800ed54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed58:	d008      	beq.n	800ed6c <UART_SetConfig+0x248>
 800ed5a:	e00f      	b.n	800ed7c <UART_SetConfig+0x258>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed62:	e052      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed64:	2302      	movs	r3, #2
 800ed66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed6a:	e04e      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed6c:	2304      	movs	r3, #4
 800ed6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed72:	e04a      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed74:	2308      	movs	r3, #8
 800ed76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed7a:	e046      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed7c:	2310      	movs	r3, #16
 800ed7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed82:	e042      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a17      	ldr	r2, [pc, #92]	; (800ede8 <UART_SetConfig+0x2c4>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d13a      	bne.n	800ee04 <UART_SetConfig+0x2e0>
 800ed8e:	4b18      	ldr	r3, [pc, #96]	; (800edf0 <UART_SetConfig+0x2cc>)
 800ed90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ed98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ed9c:	d01a      	beq.n	800edd4 <UART_SetConfig+0x2b0>
 800ed9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eda2:	d81b      	bhi.n	800eddc <UART_SetConfig+0x2b8>
 800eda4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eda8:	d00c      	beq.n	800edc4 <UART_SetConfig+0x2a0>
 800edaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edae:	d815      	bhi.n	800eddc <UART_SetConfig+0x2b8>
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d003      	beq.n	800edbc <UART_SetConfig+0x298>
 800edb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edb8:	d008      	beq.n	800edcc <UART_SetConfig+0x2a8>
 800edba:	e00f      	b.n	800eddc <UART_SetConfig+0x2b8>
 800edbc:	2300      	movs	r3, #0
 800edbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edc2:	e022      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800edc4:	2302      	movs	r3, #2
 800edc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edca:	e01e      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800edcc:	2304      	movs	r3, #4
 800edce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edd2:	e01a      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800edd4:	2308      	movs	r3, #8
 800edd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800edda:	e016      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800eddc:	2310      	movs	r3, #16
 800edde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ede2:	e012      	b.n	800ee0a <UART_SetConfig+0x2e6>
 800ede4:	efff69f3 	.word	0xefff69f3
 800ede8:	40008000 	.word	0x40008000
 800edec:	40013800 	.word	0x40013800
 800edf0:	40021000 	.word	0x40021000
 800edf4:	40004400 	.word	0x40004400
 800edf8:	40004800 	.word	0x40004800
 800edfc:	40004c00 	.word	0x40004c00
 800ee00:	40005000 	.word	0x40005000
 800ee04:	2310      	movs	r3, #16
 800ee06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a9f      	ldr	r2, [pc, #636]	; (800f08c <UART_SetConfig+0x568>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d17a      	bne.n	800ef0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee18:	2b08      	cmp	r3, #8
 800ee1a:	d824      	bhi.n	800ee66 <UART_SetConfig+0x342>
 800ee1c:	a201      	add	r2, pc, #4	; (adr r2, 800ee24 <UART_SetConfig+0x300>)
 800ee1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee22:	bf00      	nop
 800ee24:	0800ee49 	.word	0x0800ee49
 800ee28:	0800ee67 	.word	0x0800ee67
 800ee2c:	0800ee51 	.word	0x0800ee51
 800ee30:	0800ee67 	.word	0x0800ee67
 800ee34:	0800ee57 	.word	0x0800ee57
 800ee38:	0800ee67 	.word	0x0800ee67
 800ee3c:	0800ee67 	.word	0x0800ee67
 800ee40:	0800ee67 	.word	0x0800ee67
 800ee44:	0800ee5f 	.word	0x0800ee5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee48:	f7fc fd52 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800ee4c:	61f8      	str	r0, [r7, #28]
        break;
 800ee4e:	e010      	b.n	800ee72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ee50:	4b8f      	ldr	r3, [pc, #572]	; (800f090 <UART_SetConfig+0x56c>)
 800ee52:	61fb      	str	r3, [r7, #28]
        break;
 800ee54:	e00d      	b.n	800ee72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ee56:	f7fc fcb3 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800ee5a:	61f8      	str	r0, [r7, #28]
        break;
 800ee5c:	e009      	b.n	800ee72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee62:	61fb      	str	r3, [r7, #28]
        break;
 800ee64:	e005      	b.n	800ee72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ee66:	2300      	movs	r3, #0
 800ee68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ee70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f000 80fb 	beq.w	800f070 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	4613      	mov	r3, r2
 800ee80:	005b      	lsls	r3, r3, #1
 800ee82:	4413      	add	r3, r2
 800ee84:	69fa      	ldr	r2, [r7, #28]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d305      	bcc.n	800ee96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ee90:	69fa      	ldr	r2, [r7, #28]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d903      	bls.n	800ee9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ee96:	2301      	movs	r3, #1
 800ee98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ee9c:	e0e8      	b.n	800f070 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	2200      	movs	r2, #0
 800eea2:	461c      	mov	r4, r3
 800eea4:	4615      	mov	r5, r2
 800eea6:	f04f 0200 	mov.w	r2, #0
 800eeaa:	f04f 0300 	mov.w	r3, #0
 800eeae:	022b      	lsls	r3, r5, #8
 800eeb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800eeb4:	0222      	lsls	r2, r4, #8
 800eeb6:	68f9      	ldr	r1, [r7, #12]
 800eeb8:	6849      	ldr	r1, [r1, #4]
 800eeba:	0849      	lsrs	r1, r1, #1
 800eebc:	2000      	movs	r0, #0
 800eebe:	4688      	mov	r8, r1
 800eec0:	4681      	mov	r9, r0
 800eec2:	eb12 0a08 	adds.w	sl, r2, r8
 800eec6:	eb43 0b09 	adc.w	fp, r3, r9
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	603b      	str	r3, [r7, #0]
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eed8:	4650      	mov	r0, sl
 800eeda:	4659      	mov	r1, fp
 800eedc:	f7f1 f9d8 	bl	8000290 <__aeabi_uldivmod>
 800eee0:	4602      	mov	r2, r0
 800eee2:	460b      	mov	r3, r1
 800eee4:	4613      	mov	r3, r2
 800eee6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eeee:	d308      	bcc.n	800ef02 <UART_SetConfig+0x3de>
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eef6:	d204      	bcs.n	800ef02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	69ba      	ldr	r2, [r7, #24]
 800eefe:	60da      	str	r2, [r3, #12]
 800ef00:	e0b6      	b.n	800f070 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ef08:	e0b2      	b.n	800f070 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	69db      	ldr	r3, [r3, #28]
 800ef0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef12:	d15e      	bne.n	800efd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ef14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef18:	2b08      	cmp	r3, #8
 800ef1a:	d828      	bhi.n	800ef6e <UART_SetConfig+0x44a>
 800ef1c:	a201      	add	r2, pc, #4	; (adr r2, 800ef24 <UART_SetConfig+0x400>)
 800ef1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef22:	bf00      	nop
 800ef24:	0800ef49 	.word	0x0800ef49
 800ef28:	0800ef51 	.word	0x0800ef51
 800ef2c:	0800ef59 	.word	0x0800ef59
 800ef30:	0800ef6f 	.word	0x0800ef6f
 800ef34:	0800ef5f 	.word	0x0800ef5f
 800ef38:	0800ef6f 	.word	0x0800ef6f
 800ef3c:	0800ef6f 	.word	0x0800ef6f
 800ef40:	0800ef6f 	.word	0x0800ef6f
 800ef44:	0800ef67 	.word	0x0800ef67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef48:	f7fc fcd2 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800ef4c:	61f8      	str	r0, [r7, #28]
        break;
 800ef4e:	e014      	b.n	800ef7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef50:	f7fc fce4 	bl	800b91c <HAL_RCC_GetPCLK2Freq>
 800ef54:	61f8      	str	r0, [r7, #28]
        break;
 800ef56:	e010      	b.n	800ef7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef58:	4b4d      	ldr	r3, [pc, #308]	; (800f090 <UART_SetConfig+0x56c>)
 800ef5a:	61fb      	str	r3, [r7, #28]
        break;
 800ef5c:	e00d      	b.n	800ef7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef5e:	f7fc fc2f 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800ef62:	61f8      	str	r0, [r7, #28]
        break;
 800ef64:	e009      	b.n	800ef7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef6a:	61fb      	str	r3, [r7, #28]
        break;
 800ef6c:	e005      	b.n	800ef7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ef78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d077      	beq.n	800f070 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	005a      	lsls	r2, r3, #1
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	085b      	lsrs	r3, r3, #1
 800ef8a:	441a      	add	r2, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	2b0f      	cmp	r3, #15
 800ef9a:	d916      	bls.n	800efca <UART_SetConfig+0x4a6>
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efa2:	d212      	bcs.n	800efca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	f023 030f 	bic.w	r3, r3, #15
 800efac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	085b      	lsrs	r3, r3, #1
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	f003 0307 	and.w	r3, r3, #7
 800efb8:	b29a      	uxth	r2, r3
 800efba:	8afb      	ldrh	r3, [r7, #22]
 800efbc:	4313      	orrs	r3, r2
 800efbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	8afa      	ldrh	r2, [r7, #22]
 800efc6:	60da      	str	r2, [r3, #12]
 800efc8:	e052      	b.n	800f070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800efd0:	e04e      	b.n	800f070 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800efd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efd6:	2b08      	cmp	r3, #8
 800efd8:	d827      	bhi.n	800f02a <UART_SetConfig+0x506>
 800efda:	a201      	add	r2, pc, #4	; (adr r2, 800efe0 <UART_SetConfig+0x4bc>)
 800efdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe0:	0800f005 	.word	0x0800f005
 800efe4:	0800f00d 	.word	0x0800f00d
 800efe8:	0800f015 	.word	0x0800f015
 800efec:	0800f02b 	.word	0x0800f02b
 800eff0:	0800f01b 	.word	0x0800f01b
 800eff4:	0800f02b 	.word	0x0800f02b
 800eff8:	0800f02b 	.word	0x0800f02b
 800effc:	0800f02b 	.word	0x0800f02b
 800f000:	0800f023 	.word	0x0800f023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f004:	f7fc fc74 	bl	800b8f0 <HAL_RCC_GetPCLK1Freq>
 800f008:	61f8      	str	r0, [r7, #28]
        break;
 800f00a:	e014      	b.n	800f036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f00c:	f7fc fc86 	bl	800b91c <HAL_RCC_GetPCLK2Freq>
 800f010:	61f8      	str	r0, [r7, #28]
        break;
 800f012:	e010      	b.n	800f036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f014:	4b1e      	ldr	r3, [pc, #120]	; (800f090 <UART_SetConfig+0x56c>)
 800f016:	61fb      	str	r3, [r7, #28]
        break;
 800f018:	e00d      	b.n	800f036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f01a:	f7fc fbd1 	bl	800b7c0 <HAL_RCC_GetSysClockFreq>
 800f01e:	61f8      	str	r0, [r7, #28]
        break;
 800f020:	e009      	b.n	800f036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f026:	61fb      	str	r3, [r7, #28]
        break;
 800f028:	e005      	b.n	800f036 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800f02a:	2300      	movs	r3, #0
 800f02c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f02e:	2301      	movs	r3, #1
 800f030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f034:	bf00      	nop
    }

    if (pclk != 0U)
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d019      	beq.n	800f070 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	085a      	lsrs	r2, r3, #1
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	441a      	add	r2, r3
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f04e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	2b0f      	cmp	r3, #15
 800f054:	d909      	bls.n	800f06a <UART_SetConfig+0x546>
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f05c:	d205      	bcs.n	800f06a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	b29a      	uxth	r2, r3
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	60da      	str	r2, [r3, #12]
 800f068:	e002      	b.n	800f070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2200      	movs	r2, #0
 800f074:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800f07c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800f080:	4618      	mov	r0, r3
 800f082:	3728      	adds	r7, #40	; 0x28
 800f084:	46bd      	mov	sp, r7
 800f086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f08a:	bf00      	nop
 800f08c:	40008000 	.word	0x40008000
 800f090:	00f42400 	.word	0x00f42400

0800f094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a0:	f003 0301 	and.w	r3, r3, #1
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00a      	beq.n	800f0be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	430a      	orrs	r2, r1
 800f0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c2:	f003 0302 	and.w	r3, r3, #2
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00a      	beq.n	800f0e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	430a      	orrs	r2, r1
 800f0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e4:	f003 0304 	and.w	r3, r3, #4
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00a      	beq.n	800f102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	430a      	orrs	r2, r1
 800f100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f106:	f003 0308 	and.w	r3, r3, #8
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00a      	beq.n	800f124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	430a      	orrs	r2, r1
 800f122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f128:	f003 0310 	and.w	r3, r3, #16
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00a      	beq.n	800f146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f14a:	f003 0320 	and.w	r3, r3, #32
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00a      	beq.n	800f168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	430a      	orrs	r2, r1
 800f166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f170:	2b00      	cmp	r3, #0
 800f172:	d01a      	beq.n	800f1aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	430a      	orrs	r2, r1
 800f188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f18e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f192:	d10a      	bne.n	800f1aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	430a      	orrs	r2, r1
 800f1a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00a      	beq.n	800f1cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	430a      	orrs	r2, r1
 800f1ca:	605a      	str	r2, [r3, #4]
  }
}
 800f1cc:	bf00      	nop
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af02      	add	r7, sp, #8
 800f1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f1e8:	f7f7 fbe6 	bl	80069b8 <HAL_GetTick>
 800f1ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f003 0308 	and.w	r3, r3, #8
 800f1f8:	2b08      	cmp	r3, #8
 800f1fa:	d10e      	bne.n	800f21a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2200      	movs	r2, #0
 800f206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 f82d 	bl	800f26a <UART_WaitOnFlagUntilTimeout>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f216:	2303      	movs	r3, #3
 800f218:	e023      	b.n	800f262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f003 0304 	and.w	r3, r3, #4
 800f224:	2b04      	cmp	r3, #4
 800f226:	d10e      	bne.n	800f246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f22c:	9300      	str	r3, [sp, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2200      	movs	r2, #0
 800f232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 f817 	bl	800f26a <UART_WaitOnFlagUntilTimeout>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d001      	beq.n	800f246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f242:	2303      	movs	r3, #3
 800f244:	e00d      	b.n	800f262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2220      	movs	r2, #32
 800f24a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2220      	movs	r2, #32
 800f250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f260:	2300      	movs	r3, #0
}
 800f262:	4618      	mov	r0, r3
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b09c      	sub	sp, #112	; 0x70
 800f26e:	af00      	add	r7, sp, #0
 800f270:	60f8      	str	r0, [r7, #12]
 800f272:	60b9      	str	r1, [r7, #8]
 800f274:	603b      	str	r3, [r7, #0]
 800f276:	4613      	mov	r3, r2
 800f278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f27a:	e0a5      	b.n	800f3c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f27c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f27e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f282:	f000 80a1 	beq.w	800f3c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f286:	f7f7 fb97 	bl	80069b8 <HAL_GetTick>
 800f28a:	4602      	mov	r2, r0
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f292:	429a      	cmp	r2, r3
 800f294:	d302      	bcc.n	800f29c <UART_WaitOnFlagUntilTimeout+0x32>
 800f296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d13e      	bne.n	800f31a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2a4:	e853 3f00 	ldrex	r3, [r3]
 800f2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f2b0:	667b      	str	r3, [r7, #100]	; 0x64
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f2bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f2c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2c2:	e841 2300 	strex	r3, r2, [r1]
 800f2c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f2c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d1e6      	bne.n	800f29c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	3308      	adds	r3, #8
 800f2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d8:	e853 3f00 	ldrex	r3, [r3]
 800f2dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e0:	f023 0301 	bic.w	r3, r3, #1
 800f2e4:	663b      	str	r3, [r7, #96]	; 0x60
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	3308      	adds	r3, #8
 800f2ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f2ee:	64ba      	str	r2, [r7, #72]	; 0x48
 800f2f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2f6:	e841 2300 	strex	r3, r2, [r1]
 800f2fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f2fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1e5      	bne.n	800f2ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2220      	movs	r2, #32
 800f306:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2220      	movs	r2, #32
 800f30c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2200      	movs	r2, #0
 800f312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f316:	2303      	movs	r3, #3
 800f318:	e067      	b.n	800f3ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f003 0304 	and.w	r3, r3, #4
 800f324:	2b00      	cmp	r3, #0
 800f326:	d04f      	beq.n	800f3c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	69db      	ldr	r3, [r3, #28]
 800f32e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f336:	d147      	bne.n	800f3c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f340:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	e853 3f00 	ldrex	r3, [r3]
 800f34e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f356:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	461a      	mov	r2, r3
 800f35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f360:	637b      	str	r3, [r7, #52]	; 0x34
 800f362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f368:	e841 2300 	strex	r3, r2, [r1]
 800f36c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f370:	2b00      	cmp	r3, #0
 800f372:	d1e6      	bne.n	800f342 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3308      	adds	r3, #8
 800f37a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	e853 3f00 	ldrex	r3, [r3]
 800f382:	613b      	str	r3, [r7, #16]
   return(result);
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	f023 0301 	bic.w	r3, r3, #1
 800f38a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	3308      	adds	r3, #8
 800f392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f394:	623a      	str	r2, [r7, #32]
 800f396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f398:	69f9      	ldr	r1, [r7, #28]
 800f39a:	6a3a      	ldr	r2, [r7, #32]
 800f39c:	e841 2300 	strex	r3, r2, [r1]
 800f3a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1e5      	bne.n	800f374 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2220      	movs	r2, #32
 800f3ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2220      	movs	r2, #32
 800f3b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2220      	movs	r2, #32
 800f3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	e010      	b.n	800f3ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	69da      	ldr	r2, [r3, #28]
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	4013      	ands	r3, r2
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	bf0c      	ite	eq
 800f3d8:	2301      	moveq	r3, #1
 800f3da:	2300      	movne	r3, #0
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	461a      	mov	r2, r3
 800f3e0:	79fb      	ldrb	r3, [r7, #7]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	f43f af4a 	beq.w	800f27c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3770      	adds	r7, #112	; 0x70
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
	...

0800f3f4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b087      	sub	sp, #28
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f408:	683a      	ldr	r2, [r7, #0]
 800f40a:	6812      	ldr	r2, [r2, #0]
 800f40c:	f023 0101 	bic.w	r1, r3, #1
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	2b08      	cmp	r3, #8
 800f41c:	d102      	bne.n	800f424 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f41e:	2340      	movs	r3, #64	; 0x40
 800f420:	617b      	str	r3, [r7, #20]
 800f422:	e001      	b.n	800f428 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800f424:	2300      	movs	r3, #0
 800f426:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800f434:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800f43a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800f440:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800f446:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f44c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f452:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f458:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800f45e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800f464:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800f46a:	4313      	orrs	r3, r2
 800f46c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	4313      	orrs	r3, r2
 800f476:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f47c:	693a      	ldr	r2, [r7, #16]
 800f47e:	4313      	orrs	r3, r2
 800f480:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f486:	693a      	ldr	r2, [r7, #16]
 800f488:	4313      	orrs	r3, r2
 800f48a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800f48c:	4b20      	ldr	r3, [pc, #128]	; (800f510 <FMC_NORSRAM_Init+0x11c>)
 800f48e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f496:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f49e:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800f4a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	43db      	mvns	r3, r3
 800f4b6:	ea02 0103 	and.w	r1, r2, r3
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	4319      	orrs	r1, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4d0:	d10c      	bne.n	800f4ec <FMC_NORSRAM_Init+0xf8>
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d008      	beq.n	800f4ec <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e6:	431a      	orrs	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d006      	beq.n	800f502 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4fc:	431a      	orrs	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	371c      	adds	r7, #28
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	0008fb7f 	.word	0x0008fb7f

0800f514 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f514:	b480      	push	{r7}
 800f516:	b087      	sub	sp, #28
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	011b      	lsls	r3, r3, #4
 800f538:	431a      	orrs	r2, r3
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	021b      	lsls	r3, r3, #8
 800f540:	431a      	orrs	r2, r3
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	691b      	ldr	r3, [r3, #16]
 800f546:	041b      	lsls	r3, r3, #16
 800f548:	431a      	orrs	r2, r3
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	695b      	ldr	r3, [r3, #20]
 800f54e:	3b01      	subs	r3, #1
 800f550:	051b      	lsls	r3, r3, #20
 800f552:	431a      	orrs	r2, r3
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	699b      	ldr	r3, [r3, #24]
 800f558:	3b02      	subs	r3, #2
 800f55a:	061b      	lsls	r3, r3, #24
 800f55c:	431a      	orrs	r2, r3
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	69db      	ldr	r3, [r3, #28]
 800f562:	4313      	orrs	r3, r2
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	3201      	adds	r2, #1
 800f568:	4319      	orrs	r1, r3
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f57c:	d113      	bne.n	800f5a6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f586:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	3b01      	subs	r3, #1
 800f58e:	051b      	lsls	r3, r3, #20
 800f590:	697a      	ldr	r2, [r7, #20]
 800f592:	4313      	orrs	r3, r2
 800f594:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	431a      	orrs	r2, r3
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f5a6:	2300      	movs	r3, #0
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	371c      	adds	r7, #28
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
 800f5c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5c8:	d11d      	bne.n	800f606 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f5d2:	4b13      	ldr	r3, [pc, #76]	; (800f620 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800f5d4:	4013      	ands	r3, r2
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	6811      	ldr	r1, [r2, #0]
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	6852      	ldr	r2, [r2, #4]
 800f5de:	0112      	lsls	r2, r2, #4
 800f5e0:	4311      	orrs	r1, r2
 800f5e2:	68ba      	ldr	r2, [r7, #8]
 800f5e4:	6892      	ldr	r2, [r2, #8]
 800f5e6:	0212      	lsls	r2, r2, #8
 800f5e8:	4311      	orrs	r1, r2
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	69d2      	ldr	r2, [r2, #28]
 800f5ee:	4311      	orrs	r1, r2
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	6912      	ldr	r2, [r2, #16]
 800f5f4:	0412      	lsls	r2, r2, #16
 800f5f6:	430a      	orrs	r2, r1
 800f5f8:	ea43 0102 	orr.w	r1, r3, r2
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f604:	e005      	b.n	800f612 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f60e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3714      	adds	r7, #20
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr
 800f620:	cff00000 	.word	0xcff00000

0800f624 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f624:	b084      	sub	sp, #16
 800f626:	b480      	push	{r7}
 800f628:	b085      	sub	sp, #20
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
 800f62e:	f107 001c 	add.w	r0, r7, #28
 800f632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f636:	2300      	movs	r3, #0
 800f638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800f63a:	6a3b      	ldr	r3, [r7, #32]
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	4313      	orrs	r3, r2
 800f640:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800f642:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800f646:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f648:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f64a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f64e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f652:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f654:	68fa      	ldr	r2, [r7, #12]
 800f656:	4313      	orrs	r3, r2
 800f658:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f662:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	431a      	orrs	r2, r3
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	3714      	adds	r7, #20
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	b004      	add	sp, #16
 800f67c:	4770      	bx	lr

0800f67e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f67e:	b480      	push	{r7}
 800f680:	b083      	sub	sp, #12
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2203      	movs	r2, #3
 800f6a4:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f6a6:	2002      	movs	r0, #2
 800f6a8:	f7f7 f992 	bl	80069d0 <HAL_Delay>

  return HAL_OK;
 800f6ac:	2300      	movs	r3, #0
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f6b6:	b480      	push	{r7}
 800f6b8:	b083      	sub	sp, #12
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 0303 	and.w	r3, r3, #3
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f6d2:	b480      	push	{r7}
 800f6d4:	b085      	sub	sp, #20
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
 800f6da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f6f0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f6f6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f6fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	4313      	orrs	r3, r2
 800f702:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f70c:	f023 030f 	bic.w	r3, r3, #15
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	431a      	orrs	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f718:	2300      	movs	r3, #0
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3714      	adds	r7, #20
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr

0800f726 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f726:	b480      	push	{r7}
 800f728:	b083      	sub	sp, #12
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	691b      	ldr	r3, [r3, #16]
 800f732:	b2db      	uxtb	r3, r3
}
 800f734:	4618      	mov	r0, r3
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f740:	b480      	push	{r7}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	3314      	adds	r3, #20
 800f74e:	461a      	mov	r2, r3
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	4413      	add	r3, r2
 800f754:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3714      	adds	r7, #20
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr

0800f766 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f766:	b480      	push	{r7}
 800f768:	b085      	sub	sp, #20
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f770:	2300      	movs	r3, #0
 800f772:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	685a      	ldr	r2, [r3, #4]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f78c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f792:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f798:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	4313      	orrs	r3, r2
 800f79e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	431a      	orrs	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f7b0:	2300      	movs	r3, #0

}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3714      	adds	r7, #20
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr

0800f7be <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b088      	sub	sp, #32
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
 800f7c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f7cc:	2310      	movs	r3, #16
 800f7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7d0:	2340      	movs	r3, #64	; 0x40
 800f7d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7de:	f107 0308 	add.w	r3, r7, #8
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff ff74 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f7ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7ee:	2110      	movs	r1, #16
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 f94d 	bl	800fa90 <SDMMC_GetCmdResp1>
 800f7f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7f8:	69fb      	ldr	r3, [r7, #28]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3720      	adds	r7, #32
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b08a      	sub	sp, #40	; 0x28
 800f806:	af00      	add	r7, sp, #0
 800f808:	60f8      	str	r0, [r7, #12]
 800f80a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f812:	2307      	movs	r3, #7
 800f814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f816:	2340      	movs	r3, #64	; 0x40
 800f818:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f81a:	2300      	movs	r3, #0
 800f81c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f81e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f822:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f824:	f107 0310 	add.w	r3, r7, #16
 800f828:	4619      	mov	r1, r3
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f7ff ff51 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f830:	f241 3288 	movw	r2, #5000	; 0x1388
 800f834:	2107      	movs	r1, #7
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f000 f92a 	bl	800fa90 <SDMMC_GetCmdResp1>
 800f83c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f840:	4618      	mov	r0, r3
 800f842:	3728      	adds	r7, #40	; 0x28
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b088      	sub	sp, #32
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f850:	2300      	movs	r3, #0
 800f852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f854:	2300      	movs	r3, #0
 800f856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f858:	2300      	movs	r3, #0
 800f85a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f85c:	2300      	movs	r3, #0
 800f85e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f866:	f107 0308 	add.w	r3, r7, #8
 800f86a:	4619      	mov	r1, r3
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f7ff ff30 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fb44 	bl	800ff00 <SDMMC_GetCmdError>
 800f878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f87a:	69fb      	ldr	r3, [r7, #28]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3720      	adds	r7, #32
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b088      	sub	sp, #32
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f88c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f892:	2308      	movs	r3, #8
 800f894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f896:	2340      	movs	r3, #64	; 0x40
 800f898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f89a:	2300      	movs	r3, #0
 800f89c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f89e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8a4:	f107 0308 	add.w	r3, r7, #8
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f7ff ff11 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 fad7 	bl	800fe64 <SDMMC_GetCmdResp7>
 800f8b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8b8:	69fb      	ldr	r3, [r7, #28]
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3720      	adds	r7, #32
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}

0800f8c2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f8c2:	b580      	push	{r7, lr}
 800f8c4:	b088      	sub	sp, #32
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f8d0:	2337      	movs	r3, #55	; 0x37
 800f8d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8d4:	2340      	movs	r3, #64	; 0x40
 800f8d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8e2:	f107 0308 	add.w	r3, r7, #8
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7ff fef2 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f8ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8f2:	2137      	movs	r1, #55	; 0x37
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 f8cb 	bl	800fa90 <SDMMC_GetCmdResp1>
 800f8fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8fc:	69fb      	ldr	r3, [r7, #28]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3720      	adds	r7, #32
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b088      	sub	sp, #32
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f91a:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f91c:	2329      	movs	r3, #41	; 0x29
 800f91e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f920:	2340      	movs	r3, #64	; 0x40
 800f922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f924:	2300      	movs	r3, #0
 800f926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f92c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f92e:	f107 0308 	add.w	r3, r7, #8
 800f932:	4619      	mov	r1, r3
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff fecc 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 f9de 	bl	800fcfc <SDMMC_GetCmdResp3>
 800f940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f942:	69fb      	ldr	r3, [r7, #28]
}
 800f944:	4618      	mov	r0, r3
 800f946:	3720      	adds	r7, #32
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b088      	sub	sp, #32
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f95a:	2306      	movs	r3, #6
 800f95c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f95e:	2340      	movs	r3, #64	; 0x40
 800f960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f962:	2300      	movs	r3, #0
 800f964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f96a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f96c:	f107 0308 	add.w	r3, r7, #8
 800f970:	4619      	mov	r1, r3
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f7ff fead 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f978:	f241 3288 	movw	r2, #5000	; 0x1388
 800f97c:	2106      	movs	r1, #6
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f886 	bl	800fa90 <SDMMC_GetCmdResp1>
 800f984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f986:	69fb      	ldr	r3, [r7, #28]
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3720      	adds	r7, #32
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b088      	sub	sp, #32
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f998:	2300      	movs	r3, #0
 800f99a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f99c:	2333      	movs	r3, #51	; 0x33
 800f99e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9a0:	2340      	movs	r3, #64	; 0x40
 800f9a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9ae:	f107 0308 	add.w	r3, r7, #8
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff fe8c 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9be:	2133      	movs	r1, #51	; 0x33
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 f865 	bl	800fa90 <SDMMC_GetCmdResp1>
 800f9c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9c8:	69fb      	ldr	r3, [r7, #28]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3720      	adds	r7, #32
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b088      	sub	sp, #32
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f9de:	2302      	movs	r3, #2
 800f9e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f9e2:	23c0      	movs	r3, #192	; 0xc0
 800f9e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9f0:	f107 0308 	add.w	r3, r7, #8
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7ff fe6b 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 f935 	bl	800fc6c <SDMMC_GetCmdResp2>
 800fa02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa04:	69fb      	ldr	r3, [r7, #28]
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3720      	adds	r7, #32
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b088      	sub	sp, #32
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
 800fa16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fa1c:	2309      	movs	r3, #9
 800fa1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fa20:	23c0      	movs	r3, #192	; 0xc0
 800fa22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa24:	2300      	movs	r3, #0
 800fa26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa2e:	f107 0308 	add.w	r3, r7, #8
 800fa32:	4619      	mov	r1, r3
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f7ff fe4c 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 f916 	bl	800fc6c <SDMMC_GetCmdResp2>
 800fa40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa42:	69fb      	ldr	r3, [r7, #28]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3720      	adds	r7, #32
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b088      	sub	sp, #32
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fa56:	2300      	movs	r3, #0
 800fa58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fa5a:	2303      	movs	r3, #3
 800fa5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa5e:	2340      	movs	r3, #64	; 0x40
 800fa60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa62:	2300      	movs	r3, #0
 800fa64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa6c:	f107 0308 	add.w	r3, r7, #8
 800fa70:	4619      	mov	r1, r3
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7ff fe2d 	bl	800f6d2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fa78:	683a      	ldr	r2, [r7, #0]
 800fa7a:	2103      	movs	r1, #3
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 f97b 	bl	800fd78 <SDMMC_GetCmdResp6>
 800fa82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa84:	69fb      	ldr	r3, [r7, #28]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3720      	adds	r7, #32
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b088      	sub	sp, #32
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	607a      	str	r2, [r7, #4]
 800fa9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fa9e:	4b70      	ldr	r3, [pc, #448]	; (800fc60 <SDMMC_GetCmdResp1+0x1d0>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	4a70      	ldr	r2, [pc, #448]	; (800fc64 <SDMMC_GetCmdResp1+0x1d4>)
 800faa4:	fba2 2303 	umull	r2, r3, r2, r3
 800faa8:	0a5a      	lsrs	r2, r3, #9
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	fb02 f303 	mul.w	r3, r2, r3
 800fab0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	1e5a      	subs	r2, r3, #1
 800fab6:	61fa      	str	r2, [r7, #28]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d102      	bne.n	800fac2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fabc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fac0:	e0c9      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fac6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fac8:	69bb      	ldr	r3, [r7, #24]
 800faca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800face:	2b00      	cmp	r3, #0
 800fad0:	d0ef      	beq.n	800fab2 <SDMMC_GetCmdResp1+0x22>
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1ea      	bne.n	800fab2 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fae0:	f003 0304 	and.w	r3, r3, #4
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d004      	beq.n	800faf2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2204      	movs	r2, #4
 800faec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800faee:	2304      	movs	r3, #4
 800faf0:	e0b1      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faf6:	f003 0301 	and.w	r3, r3, #1
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d004      	beq.n	800fb08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2201      	movs	r2, #1
 800fb02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb04:	2301      	movs	r3, #1
 800fb06:	e0a6      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	22c5      	movs	r2, #197	; 0xc5
 800fb0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f7ff fe09 	bl	800f726 <SDMMC_GetCommandResponse>
 800fb14:	4603      	mov	r3, r0
 800fb16:	461a      	mov	r2, r3
 800fb18:	7afb      	ldrb	r3, [r7, #11]
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d001      	beq.n	800fb22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e099      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fb22:	2100      	movs	r1, #0
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f7ff fe0b 	bl	800f740 <SDMMC_GetResponse>
 800fb2a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fb2c:	697a      	ldr	r2, [r7, #20]
 800fb2e:	4b4e      	ldr	r3, [pc, #312]	; (800fc68 <SDMMC_GetCmdResp1+0x1d8>)
 800fb30:	4013      	ands	r3, r2
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d101      	bne.n	800fb3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fb36:	2300      	movs	r3, #0
 800fb38:	e08d      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	da02      	bge.n	800fb46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fb40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fb44:	e087      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d001      	beq.n	800fb54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fb50:	2340      	movs	r3, #64	; 0x40
 800fb52:	e080      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d001      	beq.n	800fb62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fb5e:	2380      	movs	r3, #128	; 0x80
 800fb60:	e079      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fb6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb70:	e071      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d002      	beq.n	800fb82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fb7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb80:	e069      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fb8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb90:	e061      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d002      	beq.n	800fba2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fb9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fba0:	e059      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d002      	beq.n	800fbb2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fbac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fbb0:	e051      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d002      	beq.n	800fbc2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fbbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbc0:	e049      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d002      	beq.n	800fbd2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fbcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fbd0:	e041      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d002      	beq.n	800fbe2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fbdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbe0:	e039      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d002      	beq.n	800fbf2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fbec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fbf0:	e031      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d002      	beq.n	800fc02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fbfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc00:	e029      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fc0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fc10:	e021      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fc1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fc20:	e019      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fc2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fc30:	e011      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d002      	beq.n	800fc42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fc3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fc40:	e009      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f003 0308 	and.w	r3, r3, #8
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d002      	beq.n	800fc52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fc4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fc50:	e001      	b.n	800fc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fc52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3720      	adds	r7, #32
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	2001c05c 	.word	0x2001c05c
 800fc64:	10624dd3 	.word	0x10624dd3
 800fc68:	fdffe008 	.word	0xfdffe008

0800fc6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc74:	4b1f      	ldr	r3, [pc, #124]	; (800fcf4 <SDMMC_GetCmdResp2+0x88>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a1f      	ldr	r2, [pc, #124]	; (800fcf8 <SDMMC_GetCmdResp2+0x8c>)
 800fc7a:	fba2 2303 	umull	r2, r3, r2, r3
 800fc7e:	0a5b      	lsrs	r3, r3, #9
 800fc80:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc84:	fb02 f303 	mul.w	r3, r2, r3
 800fc88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	1e5a      	subs	r2, r3, #1
 800fc8e:	60fa      	str	r2, [r7, #12]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d102      	bne.n	800fc9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc98:	e026      	b.n	800fce8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d0ef      	beq.n	800fc8a <SDMMC_GetCmdResp2+0x1e>
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d1ea      	bne.n	800fc8a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcb8:	f003 0304 	and.w	r3, r3, #4
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d004      	beq.n	800fcca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2204      	movs	r2, #4
 800fcc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcc6:	2304      	movs	r3, #4
 800fcc8:	e00e      	b.n	800fce8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcce:	f003 0301 	and.w	r3, r3, #1
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d004      	beq.n	800fce0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	e003      	b.n	800fce8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	22c5      	movs	r2, #197	; 0xc5
 800fce4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fce6:	2300      	movs	r3, #0
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	2001c05c 	.word	0x2001c05c
 800fcf8:	10624dd3 	.word	0x10624dd3

0800fcfc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd04:	4b1a      	ldr	r3, [pc, #104]	; (800fd70 <SDMMC_GetCmdResp3+0x74>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a1a      	ldr	r2, [pc, #104]	; (800fd74 <SDMMC_GetCmdResp3+0x78>)
 800fd0a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd0e:	0a5b      	lsrs	r3, r3, #9
 800fd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd14:	fb02 f303 	mul.w	r3, r2, r3
 800fd18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	1e5a      	subs	r2, r3, #1
 800fd1e:	60fa      	str	r2, [r7, #12]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d102      	bne.n	800fd2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd28:	e01b      	b.n	800fd62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d0ef      	beq.n	800fd1a <SDMMC_GetCmdResp3+0x1e>
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d1ea      	bne.n	800fd1a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd48:	f003 0304 	and.w	r3, r3, #4
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d004      	beq.n	800fd5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2204      	movs	r2, #4
 800fd54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd56:	2304      	movs	r3, #4
 800fd58:	e003      	b.n	800fd62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	22c5      	movs	r2, #197	; 0xc5
 800fd5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3714      	adds	r7, #20
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	2001c05c 	.word	0x2001c05c
 800fd74:	10624dd3 	.word	0x10624dd3

0800fd78 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b088      	sub	sp, #32
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	460b      	mov	r3, r1
 800fd82:	607a      	str	r2, [r7, #4]
 800fd84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd86:	4b35      	ldr	r3, [pc, #212]	; (800fe5c <SDMMC_GetCmdResp6+0xe4>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a35      	ldr	r2, [pc, #212]	; (800fe60 <SDMMC_GetCmdResp6+0xe8>)
 800fd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800fd90:	0a5b      	lsrs	r3, r3, #9
 800fd92:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd96:	fb02 f303 	mul.w	r3, r2, r3
 800fd9a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	1e5a      	subs	r2, r3, #1
 800fda0:	61fa      	str	r2, [r7, #28]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d102      	bne.n	800fdac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fda6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fdaa:	e052      	b.n	800fe52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d0ef      	beq.n	800fd9c <SDMMC_GetCmdResp6+0x24>
 800fdbc:	69bb      	ldr	r3, [r7, #24]
 800fdbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1ea      	bne.n	800fd9c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdca:	f003 0304 	and.w	r3, r3, #4
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d004      	beq.n	800fddc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2204      	movs	r2, #4
 800fdd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fdd8:	2304      	movs	r3, #4
 800fdda:	e03a      	b.n	800fe52 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fde0:	f003 0301 	and.w	r3, r3, #1
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d004      	beq.n	800fdf2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2201      	movs	r2, #1
 800fdec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e02f      	b.n	800fe52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fdf2:	68f8      	ldr	r0, [r7, #12]
 800fdf4:	f7ff fc97 	bl	800f726 <SDMMC_GetCommandResponse>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	7afb      	ldrb	r3, [r7, #11]
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d001      	beq.n	800fe06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe02:	2301      	movs	r3, #1
 800fe04:	e025      	b.n	800fe52 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	22c5      	movs	r2, #197	; 0xc5
 800fe0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f7ff fc96 	bl	800f740 <SDMMC_GetResponse>
 800fe14:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d106      	bne.n	800fe2e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	0c1b      	lsrs	r3, r3, #16
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	e011      	b.n	800fe52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d002      	beq.n	800fe3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fe38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe3c:	e009      	b.n	800fe52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d002      	beq.n	800fe4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fe48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe4c:	e001      	b.n	800fe52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fe4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3720      	adds	r7, #32
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	2001c05c 	.word	0x2001c05c
 800fe60:	10624dd3 	.word	0x10624dd3

0800fe64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe6c:	4b22      	ldr	r3, [pc, #136]	; (800fef8 <SDMMC_GetCmdResp7+0x94>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a22      	ldr	r2, [pc, #136]	; (800fefc <SDMMC_GetCmdResp7+0x98>)
 800fe72:	fba2 2303 	umull	r2, r3, r2, r3
 800fe76:	0a5b      	lsrs	r3, r3, #9
 800fe78:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe7c:	fb02 f303 	mul.w	r3, r2, r3
 800fe80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	1e5a      	subs	r2, r3, #1
 800fe86:	60fa      	str	r2, [r7, #12]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d102      	bne.n	800fe92 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe90:	e02c      	b.n	800feec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d0ef      	beq.n	800fe82 <SDMMC_GetCmdResp7+0x1e>
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1ea      	bne.n	800fe82 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feb0:	f003 0304 	and.w	r3, r3, #4
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d004      	beq.n	800fec2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2204      	movs	r2, #4
 800febc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800febe:	2304      	movs	r3, #4
 800fec0:	e014      	b.n	800feec <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fec6:	f003 0301 	and.w	r3, r3, #1
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d004      	beq.n	800fed8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2201      	movs	r2, #1
 800fed2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fed4:	2301      	movs	r3, #1
 800fed6:	e009      	b.n	800feec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2240      	movs	r2, #64	; 0x40
 800fee8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800feea:	2300      	movs	r3, #0

}
 800feec:	4618      	mov	r0, r3
 800feee:	3714      	adds	r7, #20
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	2001c05c 	.word	0x2001c05c
 800fefc:	10624dd3 	.word	0x10624dd3

0800ff00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b085      	sub	sp, #20
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff08:	4b11      	ldr	r3, [pc, #68]	; (800ff50 <SDMMC_GetCmdError+0x50>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	4a11      	ldr	r2, [pc, #68]	; (800ff54 <SDMMC_GetCmdError+0x54>)
 800ff0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff12:	0a5b      	lsrs	r3, r3, #9
 800ff14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff18:	fb02 f303 	mul.w	r3, r2, r3
 800ff1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	1e5a      	subs	r2, r3, #1
 800ff22:	60fa      	str	r2, [r7, #12]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d102      	bne.n	800ff2e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff2c:	e009      	b.n	800ff42 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d0f1      	beq.n	800ff1e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	22c5      	movs	r2, #197	; 0xc5
 800ff3e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3714      	adds	r7, #20
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	2001c05c 	.word	0x2001c05c
 800ff54:	10624dd3 	.word	0x10624dd3

0800ff58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ff58:	b084      	sub	sp, #16
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b084      	sub	sp, #16
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	f107 001c 	add.w	r0, r7, #28
 800ff66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f001 faf6 	bl	8011568 <USB_CoreReset>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ff80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d106      	bne.n	800ff94 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	639a      	str	r2, [r3, #56]	; 0x38
 800ff92:	e005      	b.n	800ffa0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800ffa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ffac:	b004      	add	sp, #16
 800ffae:	4770      	bx	lr

0800ffb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b087      	sub	sp, #28
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ffbe:	79fb      	ldrb	r3, [r7, #7]
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d165      	bne.n	8010090 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	4a3e      	ldr	r2, [pc, #248]	; (80100c0 <USB_SetTurnaroundTime+0x110>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d906      	bls.n	800ffda <USB_SetTurnaroundTime+0x2a>
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	4a3d      	ldr	r2, [pc, #244]	; (80100c4 <USB_SetTurnaroundTime+0x114>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d202      	bcs.n	800ffda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ffd4:	230f      	movs	r3, #15
 800ffd6:	617b      	str	r3, [r7, #20]
 800ffd8:	e05c      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	4a39      	ldr	r2, [pc, #228]	; (80100c4 <USB_SetTurnaroundTime+0x114>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d306      	bcc.n	800fff0 <USB_SetTurnaroundTime+0x40>
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	4a38      	ldr	r2, [pc, #224]	; (80100c8 <USB_SetTurnaroundTime+0x118>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d202      	bcs.n	800fff0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ffea:	230e      	movs	r3, #14
 800ffec:	617b      	str	r3, [r7, #20]
 800ffee:	e051      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	4a35      	ldr	r2, [pc, #212]	; (80100c8 <USB_SetTurnaroundTime+0x118>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d306      	bcc.n	8010006 <USB_SetTurnaroundTime+0x56>
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	4a34      	ldr	r2, [pc, #208]	; (80100cc <USB_SetTurnaroundTime+0x11c>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d202      	bcs.n	8010006 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010000:	230d      	movs	r3, #13
 8010002:	617b      	str	r3, [r7, #20]
 8010004:	e046      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	4a30      	ldr	r2, [pc, #192]	; (80100cc <USB_SetTurnaroundTime+0x11c>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d306      	bcc.n	801001c <USB_SetTurnaroundTime+0x6c>
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	4a2f      	ldr	r2, [pc, #188]	; (80100d0 <USB_SetTurnaroundTime+0x120>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d802      	bhi.n	801001c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010016:	230c      	movs	r3, #12
 8010018:	617b      	str	r3, [r7, #20]
 801001a:	e03b      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	4a2c      	ldr	r2, [pc, #176]	; (80100d0 <USB_SetTurnaroundTime+0x120>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d906      	bls.n	8010032 <USB_SetTurnaroundTime+0x82>
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	4a2b      	ldr	r2, [pc, #172]	; (80100d4 <USB_SetTurnaroundTime+0x124>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d802      	bhi.n	8010032 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801002c:	230b      	movs	r3, #11
 801002e:	617b      	str	r3, [r7, #20]
 8010030:	e030      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	4a27      	ldr	r2, [pc, #156]	; (80100d4 <USB_SetTurnaroundTime+0x124>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d906      	bls.n	8010048 <USB_SetTurnaroundTime+0x98>
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	4a26      	ldr	r2, [pc, #152]	; (80100d8 <USB_SetTurnaroundTime+0x128>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d802      	bhi.n	8010048 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010042:	230a      	movs	r3, #10
 8010044:	617b      	str	r3, [r7, #20]
 8010046:	e025      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	4a23      	ldr	r2, [pc, #140]	; (80100d8 <USB_SetTurnaroundTime+0x128>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d906      	bls.n	801005e <USB_SetTurnaroundTime+0xae>
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	4a22      	ldr	r2, [pc, #136]	; (80100dc <USB_SetTurnaroundTime+0x12c>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d202      	bcs.n	801005e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010058:	2309      	movs	r3, #9
 801005a:	617b      	str	r3, [r7, #20]
 801005c:	e01a      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	4a1e      	ldr	r2, [pc, #120]	; (80100dc <USB_SetTurnaroundTime+0x12c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d306      	bcc.n	8010074 <USB_SetTurnaroundTime+0xc4>
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	4a1d      	ldr	r2, [pc, #116]	; (80100e0 <USB_SetTurnaroundTime+0x130>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d802      	bhi.n	8010074 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801006e:	2308      	movs	r3, #8
 8010070:	617b      	str	r3, [r7, #20]
 8010072:	e00f      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	4a1a      	ldr	r2, [pc, #104]	; (80100e0 <USB_SetTurnaroundTime+0x130>)
 8010078:	4293      	cmp	r3, r2
 801007a:	d906      	bls.n	801008a <USB_SetTurnaroundTime+0xda>
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	4a19      	ldr	r2, [pc, #100]	; (80100e4 <USB_SetTurnaroundTime+0x134>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d202      	bcs.n	801008a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010084:	2307      	movs	r3, #7
 8010086:	617b      	str	r3, [r7, #20]
 8010088:	e004      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801008a:	2306      	movs	r3, #6
 801008c:	617b      	str	r3, [r7, #20]
 801008e:	e001      	b.n	8010094 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010090:	2309      	movs	r3, #9
 8010092:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	68da      	ldr	r2, [r3, #12]
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	029b      	lsls	r3, r3, #10
 80100a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80100ac:	431a      	orrs	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80100b2:	2300      	movs	r3, #0
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	371c      	adds	r7, #28
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	00d8acbf 	.word	0x00d8acbf
 80100c4:	00e4e1c0 	.word	0x00e4e1c0
 80100c8:	00f42400 	.word	0x00f42400
 80100cc:	01067380 	.word	0x01067380
 80100d0:	011a499f 	.word	0x011a499f
 80100d4:	01312cff 	.word	0x01312cff
 80100d8:	014ca43f 	.word	0x014ca43f
 80100dc:	016e3600 	.word	0x016e3600
 80100e0:	01a6ab1f 	.word	0x01a6ab1f
 80100e4:	01e84800 	.word	0x01e84800

080100e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	f043 0201 	orr.w	r2, r3, #1
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80100fc:	2300      	movs	r3, #0
}
 80100fe:	4618      	mov	r0, r3
 8010100:	370c      	adds	r7, #12
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr

0801010a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801010a:	b480      	push	{r7}
 801010c:	b083      	sub	sp, #12
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	689b      	ldr	r3, [r3, #8]
 8010116:	f023 0201 	bic.w	r2, r3, #1
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801011e:	2300      	movs	r3, #0
}
 8010120:	4618      	mov	r0, r3
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	460b      	mov	r3, r1
 8010136:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010138:	2300      	movs	r3, #0
 801013a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010148:	78fb      	ldrb	r3, [r7, #3]
 801014a:	2b01      	cmp	r3, #1
 801014c:	d115      	bne.n	801017a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801015a:	2001      	movs	r0, #1
 801015c:	f7f6 fc38 	bl	80069d0 <HAL_Delay>
      ms++;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	3301      	adds	r3, #1
 8010164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f001 f985 	bl	8011476 <USB_GetMode>
 801016c:	4603      	mov	r3, r0
 801016e:	2b01      	cmp	r3, #1
 8010170:	d01e      	beq.n	80101b0 <USB_SetCurrentMode+0x84>
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2b31      	cmp	r3, #49	; 0x31
 8010176:	d9f0      	bls.n	801015a <USB_SetCurrentMode+0x2e>
 8010178:	e01a      	b.n	80101b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801017a:	78fb      	ldrb	r3, [r7, #3]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d115      	bne.n	80101ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801018c:	2001      	movs	r0, #1
 801018e:	f7f6 fc1f 	bl	80069d0 <HAL_Delay>
      ms++;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	3301      	adds	r3, #1
 8010196:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f001 f96c 	bl	8011476 <USB_GetMode>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d005      	beq.n	80101b0 <USB_SetCurrentMode+0x84>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2b31      	cmp	r3, #49	; 0x31
 80101a8:	d9f0      	bls.n	801018c <USB_SetCurrentMode+0x60>
 80101aa:	e001      	b.n	80101b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80101ac:	2301      	movs	r3, #1
 80101ae:	e005      	b.n	80101bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2b32      	cmp	r3, #50	; 0x32
 80101b4:	d101      	bne.n	80101ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80101b6:	2301      	movs	r3, #1
 80101b8:	e000      	b.n	80101bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80101ba:	2300      	movs	r3, #0
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80101c4:	b084      	sub	sp, #16
 80101c6:	b580      	push	{r7, lr}
 80101c8:	b086      	sub	sp, #24
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	6078      	str	r0, [r7, #4]
 80101ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80101d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80101d6:	2300      	movs	r3, #0
 80101d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80101de:	2300      	movs	r3, #0
 80101e0:	613b      	str	r3, [r7, #16]
 80101e2:	e009      	b.n	80101f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	3340      	adds	r3, #64	; 0x40
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4413      	add	r3, r2
 80101ee:	2200      	movs	r2, #0
 80101f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	3301      	adds	r3, #1
 80101f6:	613b      	str	r3, [r7, #16]
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	2b0e      	cmp	r3, #14
 80101fc:	d9f2      	bls.n	80101e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80101fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010200:	2b00      	cmp	r3, #0
 8010202:	d11c      	bne.n	801023e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	68fa      	ldr	r2, [r7, #12]
 801020e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010212:	f043 0302 	orr.w	r3, r3, #2
 8010216:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801021c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	601a      	str	r2, [r3, #0]
 801023c:	e005      	b.n	801024a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010242:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010250:	461a      	mov	r2, r3
 8010252:	2300      	movs	r3, #0
 8010254:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801025c:	4619      	mov	r1, r3
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010264:	461a      	mov	r2, r3
 8010266:	680b      	ldr	r3, [r1, #0]
 8010268:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801026a:	2103      	movs	r1, #3
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 f959 	bl	8010524 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010272:	2110      	movs	r1, #16
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 f8f1 	bl	801045c <USB_FlushTxFifo>
 801027a:	4603      	mov	r3, r0
 801027c:	2b00      	cmp	r3, #0
 801027e:	d001      	beq.n	8010284 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010280:	2301      	movs	r3, #1
 8010282:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 f91d 	bl	80104c4 <USB_FlushRxFifo>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d001      	beq.n	8010294 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8010290:	2301      	movs	r3, #1
 8010292:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801029a:	461a      	mov	r2, r3
 801029c:	2300      	movs	r3, #0
 801029e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a6:	461a      	mov	r2, r3
 80102a8:	2300      	movs	r3, #0
 80102aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102b2:	461a      	mov	r2, r3
 80102b4:	2300      	movs	r3, #0
 80102b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102b8:	2300      	movs	r3, #0
 80102ba:	613b      	str	r3, [r7, #16]
 80102bc:	e043      	b.n	8010346 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	015a      	lsls	r2, r3, #5
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	4413      	add	r3, r2
 80102c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102d4:	d118      	bne.n	8010308 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10a      	bne.n	80102f2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	015a      	lsls	r2, r3, #5
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	4413      	add	r3, r2
 80102e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e8:	461a      	mov	r2, r3
 80102ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80102ee:	6013      	str	r3, [r2, #0]
 80102f0:	e013      	b.n	801031a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	015a      	lsls	r2, r3, #5
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	4413      	add	r3, r2
 80102fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102fe:	461a      	mov	r2, r3
 8010300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010304:	6013      	str	r3, [r2, #0]
 8010306:	e008      	b.n	801031a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	015a      	lsls	r2, r3, #5
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	4413      	add	r3, r2
 8010310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010314:	461a      	mov	r2, r3
 8010316:	2300      	movs	r3, #0
 8010318:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	015a      	lsls	r2, r3, #5
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	4413      	add	r3, r2
 8010322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010326:	461a      	mov	r2, r3
 8010328:	2300      	movs	r3, #0
 801032a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	015a      	lsls	r2, r3, #5
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	4413      	add	r3, r2
 8010334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010338:	461a      	mov	r2, r3
 801033a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801033e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	3301      	adds	r3, #1
 8010344:	613b      	str	r3, [r7, #16]
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	693a      	ldr	r2, [r7, #16]
 801034a:	429a      	cmp	r2, r3
 801034c:	d3b7      	bcc.n	80102be <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801034e:	2300      	movs	r3, #0
 8010350:	613b      	str	r3, [r7, #16]
 8010352:	e043      	b.n	80103dc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	015a      	lsls	r2, r3, #5
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	4413      	add	r3, r2
 801035c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801036a:	d118      	bne.n	801039e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10a      	bne.n	8010388 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	015a      	lsls	r2, r3, #5
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	4413      	add	r3, r2
 801037a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801037e:	461a      	mov	r2, r3
 8010380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010384:	6013      	str	r3, [r2, #0]
 8010386:	e013      	b.n	80103b0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	015a      	lsls	r2, r3, #5
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	4413      	add	r3, r2
 8010390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010394:	461a      	mov	r2, r3
 8010396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801039a:	6013      	str	r3, [r2, #0]
 801039c:	e008      	b.n	80103b0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	015a      	lsls	r2, r3, #5
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	4413      	add	r3, r2
 80103a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103aa:	461a      	mov	r2, r3
 80103ac:	2300      	movs	r3, #0
 80103ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	015a      	lsls	r2, r3, #5
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	4413      	add	r3, r2
 80103b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103bc:	461a      	mov	r2, r3
 80103be:	2300      	movs	r3, #0
 80103c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	015a      	lsls	r2, r3, #5
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	4413      	add	r3, r2
 80103ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103ce:	461a      	mov	r2, r3
 80103d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80103d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	3301      	adds	r3, #1
 80103da:	613b      	str	r3, [r7, #16]
 80103dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103de:	693a      	ldr	r2, [r7, #16]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d3b7      	bcc.n	8010354 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ea:	691b      	ldr	r3, [r3, #16]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010404:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	699b      	ldr	r3, [r3, #24]
 801040a:	f043 0210 	orr.w	r2, r3, #16
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	699a      	ldr	r2, [r3, #24]
 8010416:	4b10      	ldr	r3, [pc, #64]	; (8010458 <USB_DevInit+0x294>)
 8010418:	4313      	orrs	r3, r2
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801041e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010420:	2b00      	cmp	r3, #0
 8010422:	d005      	beq.n	8010430 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	699b      	ldr	r3, [r3, #24]
 8010428:	f043 0208 	orr.w	r2, r3, #8
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010432:	2b01      	cmp	r3, #1
 8010434:	d107      	bne.n	8010446 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801043e:	f043 0304 	orr.w	r3, r3, #4
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010446:	7dfb      	ldrb	r3, [r7, #23]
}
 8010448:	4618      	mov	r0, r3
 801044a:	3718      	adds	r7, #24
 801044c:	46bd      	mov	sp, r7
 801044e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010452:	b004      	add	sp, #16
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop
 8010458:	803c3800 	.word	0x803c3800

0801045c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801045c:	b480      	push	{r7}
 801045e:	b085      	sub	sp, #20
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010466:	2300      	movs	r3, #0
 8010468:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	3301      	adds	r3, #1
 801046e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	4a13      	ldr	r2, [pc, #76]	; (80104c0 <USB_FlushTxFifo+0x64>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d901      	bls.n	801047c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010478:	2303      	movs	r3, #3
 801047a:	e01b      	b.n	80104b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	691b      	ldr	r3, [r3, #16]
 8010480:	2b00      	cmp	r3, #0
 8010482:	daf2      	bge.n	801046a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010484:	2300      	movs	r3, #0
 8010486:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	019b      	lsls	r3, r3, #6
 801048c:	f043 0220 	orr.w	r2, r3, #32
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	3301      	adds	r3, #1
 8010498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	4a08      	ldr	r2, [pc, #32]	; (80104c0 <USB_FlushTxFifo+0x64>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d901      	bls.n	80104a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80104a2:	2303      	movs	r3, #3
 80104a4:	e006      	b.n	80104b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	691b      	ldr	r3, [r3, #16]
 80104aa:	f003 0320 	and.w	r3, r3, #32
 80104ae:	2b20      	cmp	r3, #32
 80104b0:	d0f0      	beq.n	8010494 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80104b2:	2300      	movs	r3, #0
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3714      	adds	r7, #20
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr
 80104c0:	00030d40 	.word	0x00030d40

080104c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80104c4:	b480      	push	{r7}
 80104c6:	b085      	sub	sp, #20
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80104cc:	2300      	movs	r3, #0
 80104ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	3301      	adds	r3, #1
 80104d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	4a11      	ldr	r2, [pc, #68]	; (8010520 <USB_FlushRxFifo+0x5c>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d901      	bls.n	80104e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80104de:	2303      	movs	r3, #3
 80104e0:	e018      	b.n	8010514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	691b      	ldr	r3, [r3, #16]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	daf2      	bge.n	80104d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80104ea:	2300      	movs	r3, #0
 80104ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2210      	movs	r2, #16
 80104f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	3301      	adds	r3, #1
 80104f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	4a08      	ldr	r2, [pc, #32]	; (8010520 <USB_FlushRxFifo+0x5c>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d901      	bls.n	8010506 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010502:	2303      	movs	r3, #3
 8010504:	e006      	b.n	8010514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	f003 0310 	and.w	r3, r3, #16
 801050e:	2b10      	cmp	r3, #16
 8010510:	d0f0      	beq.n	80104f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	3714      	adds	r7, #20
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	00030d40 	.word	0x00030d40

08010524 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010524:	b480      	push	{r7}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	460b      	mov	r3, r1
 801052e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	78fb      	ldrb	r3, [r7, #3]
 801053e:	68f9      	ldr	r1, [r7, #12]
 8010540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010544:	4313      	orrs	r3, r2
 8010546:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010548:	2300      	movs	r3, #0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3714      	adds	r7, #20
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr

08010556 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010556:	b480      	push	{r7}
 8010558:	b087      	sub	sp, #28
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	f003 0306 	and.w	r3, r3, #6
 801056e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2b02      	cmp	r3, #2
 8010574:	d002      	beq.n	801057c <USB_GetDevSpeed+0x26>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2b06      	cmp	r3, #6
 801057a:	d102      	bne.n	8010582 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801057c:	2302      	movs	r3, #2
 801057e:	75fb      	strb	r3, [r7, #23]
 8010580:	e001      	b.n	8010586 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8010582:	230f      	movs	r3, #15
 8010584:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010586:	7dfb      	ldrb	r3, [r7, #23]
}
 8010588:	4618      	mov	r0, r3
 801058a:	371c      	adds	r7, #28
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr

08010594 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010594:	b480      	push	{r7}
 8010596:	b085      	sub	sp, #20
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	785b      	ldrb	r3, [r3, #1]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	d13a      	bne.n	8010626 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105b6:	69da      	ldr	r2, [r3, #28]
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	f003 030f 	and.w	r3, r3, #15
 80105c0:	2101      	movs	r1, #1
 80105c2:	fa01 f303 	lsl.w	r3, r1, r3
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	68f9      	ldr	r1, [r7, #12]
 80105ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105ce:	4313      	orrs	r3, r2
 80105d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	015a      	lsls	r2, r3, #5
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	4413      	add	r3, r2
 80105da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d155      	bne.n	8010694 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	015a      	lsls	r2, r3, #5
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	4413      	add	r3, r2
 80105f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	791b      	ldrb	r3, [r3, #4]
 8010602:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010604:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	059b      	lsls	r3, r3, #22
 801060a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801060c:	4313      	orrs	r3, r2
 801060e:	68ba      	ldr	r2, [r7, #8]
 8010610:	0151      	lsls	r1, r2, #5
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	440a      	add	r2, r1
 8010616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801061e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010622:	6013      	str	r3, [r2, #0]
 8010624:	e036      	b.n	8010694 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801062c:	69da      	ldr	r2, [r3, #28]
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	f003 030f 	and.w	r3, r3, #15
 8010636:	2101      	movs	r1, #1
 8010638:	fa01 f303 	lsl.w	r3, r1, r3
 801063c:	041b      	lsls	r3, r3, #16
 801063e:	68f9      	ldr	r1, [r7, #12]
 8010640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010644:	4313      	orrs	r3, r2
 8010646:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	015a      	lsls	r2, r3, #5
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	4413      	add	r3, r2
 8010650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801065a:	2b00      	cmp	r3, #0
 801065c:	d11a      	bne.n	8010694 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	015a      	lsls	r2, r3, #5
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	4413      	add	r3, r2
 8010666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	791b      	ldrb	r3, [r3, #4]
 8010678:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801067a:	430b      	orrs	r3, r1
 801067c:	4313      	orrs	r3, r2
 801067e:	68ba      	ldr	r2, [r7, #8]
 8010680:	0151      	lsls	r1, r2, #5
 8010682:	68fa      	ldr	r2, [r7, #12]
 8010684:	440a      	add	r2, r1
 8010686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801068e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010692:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010694:	2300      	movs	r3, #0
}
 8010696:	4618      	mov	r0, r3
 8010698:	3714      	adds	r7, #20
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
	...

080106a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	785b      	ldrb	r3, [r3, #1]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d161      	bne.n	8010784 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	015a      	lsls	r2, r3, #5
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	4413      	add	r3, r2
 80106c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80106d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80106d6:	d11f      	bne.n	8010718 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	015a      	lsls	r2, r3, #5
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	4413      	add	r3, r2
 80106e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	68ba      	ldr	r2, [r7, #8]
 80106e8:	0151      	lsls	r1, r2, #5
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	440a      	add	r2, r1
 80106ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80106f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	015a      	lsls	r2, r3, #5
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	4413      	add	r3, r2
 8010700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	68ba      	ldr	r2, [r7, #8]
 8010708:	0151      	lsls	r1, r2, #5
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	440a      	add	r2, r1
 801070e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801071e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	f003 030f 	and.w	r3, r3, #15
 8010728:	2101      	movs	r1, #1
 801072a:	fa01 f303 	lsl.w	r3, r1, r3
 801072e:	b29b      	uxth	r3, r3
 8010730:	43db      	mvns	r3, r3
 8010732:	68f9      	ldr	r1, [r7, #12]
 8010734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010738:	4013      	ands	r3, r2
 801073a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010742:	69da      	ldr	r2, [r3, #28]
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	f003 030f 	and.w	r3, r3, #15
 801074c:	2101      	movs	r1, #1
 801074e:	fa01 f303 	lsl.w	r3, r1, r3
 8010752:	b29b      	uxth	r3, r3
 8010754:	43db      	mvns	r3, r3
 8010756:	68f9      	ldr	r1, [r7, #12]
 8010758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801075c:	4013      	ands	r3, r2
 801075e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	015a      	lsls	r2, r3, #5
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	4413      	add	r3, r2
 8010768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	0159      	lsls	r1, r3, #5
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	440b      	add	r3, r1
 8010776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801077a:	4619      	mov	r1, r3
 801077c:	4b35      	ldr	r3, [pc, #212]	; (8010854 <USB_DeactivateEndpoint+0x1b0>)
 801077e:	4013      	ands	r3, r2
 8010780:	600b      	str	r3, [r1, #0]
 8010782:	e060      	b.n	8010846 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	015a      	lsls	r2, r3, #5
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	4413      	add	r3, r2
 801078c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801079a:	d11f      	bne.n	80107dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	015a      	lsls	r2, r3, #5
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	4413      	add	r3, r2
 80107a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	0151      	lsls	r1, r2, #5
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	440a      	add	r2, r1
 80107b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80107ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	015a      	lsls	r2, r3, #5
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	4413      	add	r3, r2
 80107c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	0151      	lsls	r1, r2, #5
 80107ce:	68fa      	ldr	r2, [r7, #12]
 80107d0:	440a      	add	r2, r1
 80107d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	f003 030f 	and.w	r3, r3, #15
 80107ec:	2101      	movs	r1, #1
 80107ee:	fa01 f303 	lsl.w	r3, r1, r3
 80107f2:	041b      	lsls	r3, r3, #16
 80107f4:	43db      	mvns	r3, r3
 80107f6:	68f9      	ldr	r1, [r7, #12]
 80107f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80107fc:	4013      	ands	r3, r2
 80107fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010806:	69da      	ldr	r2, [r3, #28]
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	f003 030f 	and.w	r3, r3, #15
 8010810:	2101      	movs	r1, #1
 8010812:	fa01 f303 	lsl.w	r3, r1, r3
 8010816:	041b      	lsls	r3, r3, #16
 8010818:	43db      	mvns	r3, r3
 801081a:	68f9      	ldr	r1, [r7, #12]
 801081c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010820:	4013      	ands	r3, r2
 8010822:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	015a      	lsls	r2, r3, #5
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	4413      	add	r3, r2
 801082c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	0159      	lsls	r1, r3, #5
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	440b      	add	r3, r1
 801083a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801083e:	4619      	mov	r1, r3
 8010840:	4b05      	ldr	r3, [pc, #20]	; (8010858 <USB_DeactivateEndpoint+0x1b4>)
 8010842:	4013      	ands	r3, r2
 8010844:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010846:	2300      	movs	r3, #0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3714      	adds	r7, #20
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr
 8010854:	ec337800 	.word	0xec337800
 8010858:	eff37800 	.word	0xeff37800

0801085c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b086      	sub	sp, #24
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	785b      	ldrb	r3, [r3, #1]
 8010874:	2b01      	cmp	r3, #1
 8010876:	f040 810a 	bne.w	8010a8e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	699b      	ldr	r3, [r3, #24]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d132      	bne.n	80108e8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	015a      	lsls	r2, r3, #5
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	4413      	add	r3, r2
 801088a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801088e:	691b      	ldr	r3, [r3, #16]
 8010890:	693a      	ldr	r2, [r7, #16]
 8010892:	0151      	lsls	r1, r2, #5
 8010894:	697a      	ldr	r2, [r7, #20]
 8010896:	440a      	add	r2, r1
 8010898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801089c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80108a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80108a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	015a      	lsls	r2, r3, #5
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	4413      	add	r3, r2
 80108ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108b2:	691b      	ldr	r3, [r3, #16]
 80108b4:	693a      	ldr	r2, [r7, #16]
 80108b6:	0151      	lsls	r1, r2, #5
 80108b8:	697a      	ldr	r2, [r7, #20]
 80108ba:	440a      	add	r2, r1
 80108bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	015a      	lsls	r2, r3, #5
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	4413      	add	r3, r2
 80108ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108d2:	691b      	ldr	r3, [r3, #16]
 80108d4:	693a      	ldr	r2, [r7, #16]
 80108d6:	0151      	lsls	r1, r2, #5
 80108d8:	697a      	ldr	r2, [r7, #20]
 80108da:	440a      	add	r2, r1
 80108dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108e0:	0cdb      	lsrs	r3, r3, #19
 80108e2:	04db      	lsls	r3, r3, #19
 80108e4:	6113      	str	r3, [r2, #16]
 80108e6:	e074      	b.n	80109d2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	015a      	lsls	r2, r3, #5
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	4413      	add	r3, r2
 80108f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108f4:	691b      	ldr	r3, [r3, #16]
 80108f6:	693a      	ldr	r2, [r7, #16]
 80108f8:	0151      	lsls	r1, r2, #5
 80108fa:	697a      	ldr	r2, [r7, #20]
 80108fc:	440a      	add	r2, r1
 80108fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010902:	0cdb      	lsrs	r3, r3, #19
 8010904:	04db      	lsls	r3, r3, #19
 8010906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	015a      	lsls	r2, r3, #5
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	4413      	add	r3, r2
 8010910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010914:	691b      	ldr	r3, [r3, #16]
 8010916:	693a      	ldr	r2, [r7, #16]
 8010918:	0151      	lsls	r1, r2, #5
 801091a:	697a      	ldr	r2, [r7, #20]
 801091c:	440a      	add	r2, r1
 801091e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010922:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010926:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801092a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	015a      	lsls	r2, r3, #5
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	4413      	add	r3, r2
 8010934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010938:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	6999      	ldr	r1, [r3, #24]
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	440b      	add	r3, r1
 8010944:	1e59      	subs	r1, r3, #1
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	fbb1 f3f3 	udiv	r3, r1, r3
 801094e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010950:	4b9e      	ldr	r3, [pc, #632]	; (8010bcc <USB_EPStartXfer+0x370>)
 8010952:	400b      	ands	r3, r1
 8010954:	6939      	ldr	r1, [r7, #16]
 8010956:	0148      	lsls	r0, r1, #5
 8010958:	6979      	ldr	r1, [r7, #20]
 801095a:	4401      	add	r1, r0
 801095c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010960:	4313      	orrs	r3, r2
 8010962:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	015a      	lsls	r2, r3, #5
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	4413      	add	r3, r2
 801096c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010970:	691a      	ldr	r2, [r3, #16]
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	699b      	ldr	r3, [r3, #24]
 8010976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801097a:	6939      	ldr	r1, [r7, #16]
 801097c:	0148      	lsls	r0, r1, #5
 801097e:	6979      	ldr	r1, [r7, #20]
 8010980:	4401      	add	r1, r0
 8010982:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010986:	4313      	orrs	r3, r2
 8010988:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	791b      	ldrb	r3, [r3, #4]
 801098e:	2b01      	cmp	r3, #1
 8010990:	d11f      	bne.n	80109d2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	015a      	lsls	r2, r3, #5
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	4413      	add	r3, r2
 801099a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801099e:	691b      	ldr	r3, [r3, #16]
 80109a0:	693a      	ldr	r2, [r7, #16]
 80109a2:	0151      	lsls	r1, r2, #5
 80109a4:	697a      	ldr	r2, [r7, #20]
 80109a6:	440a      	add	r2, r1
 80109a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80109b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	015a      	lsls	r2, r3, #5
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	4413      	add	r3, r2
 80109ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109be:	691b      	ldr	r3, [r3, #16]
 80109c0:	693a      	ldr	r2, [r7, #16]
 80109c2:	0151      	lsls	r1, r2, #5
 80109c4:	697a      	ldr	r2, [r7, #20]
 80109c6:	440a      	add	r2, r1
 80109c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80109d0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	015a      	lsls	r2, r3, #5
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	4413      	add	r3, r2
 80109da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	693a      	ldr	r2, [r7, #16]
 80109e2:	0151      	lsls	r1, r2, #5
 80109e4:	697a      	ldr	r2, [r7, #20]
 80109e6:	440a      	add	r2, r1
 80109e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109f0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	791b      	ldrb	r3, [r3, #4]
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d015      	beq.n	8010a26 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	699b      	ldr	r3, [r3, #24]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f000 8106 	beq.w	8010c10 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	f003 030f 	and.w	r3, r3, #15
 8010a14:	2101      	movs	r1, #1
 8010a16:	fa01 f303 	lsl.w	r3, r1, r3
 8010a1a:	6979      	ldr	r1, [r7, #20]
 8010a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a20:	4313      	orrs	r3, r2
 8010a22:	634b      	str	r3, [r1, #52]	; 0x34
 8010a24:	e0f4      	b.n	8010c10 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a2c:	689b      	ldr	r3, [r3, #8]
 8010a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d110      	bne.n	8010a58 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	015a      	lsls	r2, r3, #5
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	693a      	ldr	r2, [r7, #16]
 8010a46:	0151      	lsls	r1, r2, #5
 8010a48:	697a      	ldr	r2, [r7, #20]
 8010a4a:	440a      	add	r2, r1
 8010a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a54:	6013      	str	r3, [r2, #0]
 8010a56:	e00f      	b.n	8010a78 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	015a      	lsls	r2, r3, #5
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	4413      	add	r3, r2
 8010a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	693a      	ldr	r2, [r7, #16]
 8010a68:	0151      	lsls	r1, r2, #5
 8010a6a:	697a      	ldr	r2, [r7, #20]
 8010a6c:	440a      	add	r2, r1
 8010a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a76:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	6919      	ldr	r1, [r3, #16]
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	781a      	ldrb	r2, [r3, #0]
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	699b      	ldr	r3, [r3, #24]
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f000 fa94 	bl	8010fb4 <USB_WritePacket>
 8010a8c:	e0c0      	b.n	8010c10 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	015a      	lsls	r2, r3, #5
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	4413      	add	r3, r2
 8010a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a9a:	691b      	ldr	r3, [r3, #16]
 8010a9c:	693a      	ldr	r2, [r7, #16]
 8010a9e:	0151      	lsls	r1, r2, #5
 8010aa0:	697a      	ldr	r2, [r7, #20]
 8010aa2:	440a      	add	r2, r1
 8010aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010aa8:	0cdb      	lsrs	r3, r3, #19
 8010aaa:	04db      	lsls	r3, r3, #19
 8010aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	015a      	lsls	r2, r3, #5
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aba:	691b      	ldr	r3, [r3, #16]
 8010abc:	693a      	ldr	r2, [r7, #16]
 8010abe:	0151      	lsls	r1, r2, #5
 8010ac0:	697a      	ldr	r2, [r7, #20]
 8010ac2:	440a      	add	r2, r1
 8010ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ac8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010acc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010ad0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	699b      	ldr	r3, [r3, #24]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d123      	bne.n	8010b22 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	015a      	lsls	r2, r3, #5
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae6:	691a      	ldr	r2, [r3, #16]
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010af0:	6939      	ldr	r1, [r7, #16]
 8010af2:	0148      	lsls	r0, r1, #5
 8010af4:	6979      	ldr	r1, [r7, #20]
 8010af6:	4401      	add	r1, r0
 8010af8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010afc:	4313      	orrs	r3, r2
 8010afe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	015a      	lsls	r2, r3, #5
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	4413      	add	r3, r2
 8010b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b0c:	691b      	ldr	r3, [r3, #16]
 8010b0e:	693a      	ldr	r2, [r7, #16]
 8010b10:	0151      	lsls	r1, r2, #5
 8010b12:	697a      	ldr	r2, [r7, #20]
 8010b14:	440a      	add	r2, r1
 8010b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010b1e:	6113      	str	r3, [r2, #16]
 8010b20:	e037      	b.n	8010b92 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	699a      	ldr	r2, [r3, #24]
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	1e5a      	subs	r2, r3, #1
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b36:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	68db      	ldr	r3, [r3, #12]
 8010b3c:	89fa      	ldrh	r2, [r7, #14]
 8010b3e:	fb03 f202 	mul.w	r2, r3, r2
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	015a      	lsls	r2, r3, #5
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b52:	691a      	ldr	r2, [r3, #16]
 8010b54:	89fb      	ldrh	r3, [r7, #14]
 8010b56:	04d9      	lsls	r1, r3, #19
 8010b58:	4b1c      	ldr	r3, [pc, #112]	; (8010bcc <USB_EPStartXfer+0x370>)
 8010b5a:	400b      	ands	r3, r1
 8010b5c:	6939      	ldr	r1, [r7, #16]
 8010b5e:	0148      	lsls	r0, r1, #5
 8010b60:	6979      	ldr	r1, [r7, #20]
 8010b62:	4401      	add	r1, r0
 8010b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b68:	4313      	orrs	r3, r2
 8010b6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	015a      	lsls	r2, r3, #5
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	4413      	add	r3, r2
 8010b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b78:	691a      	ldr	r2, [r3, #16]
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	69db      	ldr	r3, [r3, #28]
 8010b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b82:	6939      	ldr	r1, [r7, #16]
 8010b84:	0148      	lsls	r0, r1, #5
 8010b86:	6979      	ldr	r1, [r7, #20]
 8010b88:	4401      	add	r1, r0
 8010b8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b8e:	4313      	orrs	r3, r2
 8010b90:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	791b      	ldrb	r3, [r3, #4]
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	d12a      	bne.n	8010bf0 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ba0:	689b      	ldr	r3, [r3, #8]
 8010ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d112      	bne.n	8010bd0 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	015a      	lsls	r2, r3, #5
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	693a      	ldr	r2, [r7, #16]
 8010bba:	0151      	lsls	r1, r2, #5
 8010bbc:	697a      	ldr	r2, [r7, #20]
 8010bbe:	440a      	add	r2, r1
 8010bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010bc8:	6013      	str	r3, [r2, #0]
 8010bca:	e011      	b.n	8010bf0 <USB_EPStartXfer+0x394>
 8010bcc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	015a      	lsls	r2, r3, #5
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	693a      	ldr	r2, [r7, #16]
 8010be0:	0151      	lsls	r1, r2, #5
 8010be2:	697a      	ldr	r2, [r7, #20]
 8010be4:	440a      	add	r2, r1
 8010be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	015a      	lsls	r2, r3, #5
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	693a      	ldr	r2, [r7, #16]
 8010c00:	0151      	lsls	r1, r2, #5
 8010c02:	697a      	ldr	r2, [r7, #20]
 8010c04:	440a      	add	r2, r1
 8010c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c10:	2300      	movs	r3, #0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3718      	adds	r7, #24
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
 8010c1a:	bf00      	nop

08010c1c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	785b      	ldrb	r3, [r3, #1]
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	f040 80ab 	bne.w	8010d90 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	699b      	ldr	r3, [r3, #24]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d132      	bne.n	8010ca8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	015a      	lsls	r2, r3, #5
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	4413      	add	r3, r2
 8010c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c4e:	691b      	ldr	r3, [r3, #16]
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	0151      	lsls	r1, r2, #5
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	440a      	add	r2, r1
 8010c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	015a      	lsls	r2, r3, #5
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	68ba      	ldr	r2, [r7, #8]
 8010c76:	0151      	lsls	r1, r2, #5
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	440a      	add	r2, r1
 8010c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	015a      	lsls	r2, r3, #5
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c92:	691b      	ldr	r3, [r3, #16]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	0151      	lsls	r1, r2, #5
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	440a      	add	r2, r1
 8010c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ca0:	0cdb      	lsrs	r3, r3, #19
 8010ca2:	04db      	lsls	r3, r3, #19
 8010ca4:	6113      	str	r3, [r2, #16]
 8010ca6:	e04e      	b.n	8010d46 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	015a      	lsls	r2, r3, #5
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	4413      	add	r3, r2
 8010cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	68ba      	ldr	r2, [r7, #8]
 8010cb8:	0151      	lsls	r1, r2, #5
 8010cba:	68fa      	ldr	r2, [r7, #12]
 8010cbc:	440a      	add	r2, r1
 8010cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cc2:	0cdb      	lsrs	r3, r3, #19
 8010cc4:	04db      	lsls	r3, r3, #19
 8010cc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	015a      	lsls	r2, r3, #5
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	4413      	add	r3, r2
 8010cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	68ba      	ldr	r2, [r7, #8]
 8010cd8:	0151      	lsls	r1, r2, #5
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	440a      	add	r2, r1
 8010cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ce2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010ce6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010cea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	699a      	ldr	r2, [r3, #24]
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d903      	bls.n	8010d00 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	68da      	ldr	r2, [r3, #12]
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	015a      	lsls	r2, r3, #5
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	4413      	add	r3, r2
 8010d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d0c:	691b      	ldr	r3, [r3, #16]
 8010d0e:	68ba      	ldr	r2, [r7, #8]
 8010d10:	0151      	lsls	r1, r2, #5
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	440a      	add	r2, r1
 8010d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	015a      	lsls	r2, r3, #5
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	4413      	add	r3, r2
 8010d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d2c:	691a      	ldr	r2, [r3, #16]
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	699b      	ldr	r3, [r3, #24]
 8010d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010d36:	68b9      	ldr	r1, [r7, #8]
 8010d38:	0148      	lsls	r0, r1, #5
 8010d3a:	68f9      	ldr	r1, [r7, #12]
 8010d3c:	4401      	add	r1, r0
 8010d3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010d42:	4313      	orrs	r3, r2
 8010d44:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	015a      	lsls	r2, r3, #5
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	68ba      	ldr	r2, [r7, #8]
 8010d56:	0151      	lsls	r1, r2, #5
 8010d58:	68fa      	ldr	r2, [r7, #12]
 8010d5a:	440a      	add	r2, r1
 8010d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d64:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	699b      	ldr	r3, [r3, #24]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d071      	beq.n	8010e52 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	f003 030f 	and.w	r3, r3, #15
 8010d7e:	2101      	movs	r1, #1
 8010d80:	fa01 f303 	lsl.w	r3, r1, r3
 8010d84:	68f9      	ldr	r1, [r7, #12]
 8010d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	634b      	str	r3, [r1, #52]	; 0x34
 8010d8e:	e060      	b.n	8010e52 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	015a      	lsls	r2, r3, #5
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	4413      	add	r3, r2
 8010d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d9c:	691b      	ldr	r3, [r3, #16]
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	0151      	lsls	r1, r2, #5
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	440a      	add	r2, r1
 8010da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010daa:	0cdb      	lsrs	r3, r3, #19
 8010dac:	04db      	lsls	r3, r3, #19
 8010dae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	015a      	lsls	r2, r3, #5
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	4413      	add	r3, r2
 8010db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	0151      	lsls	r1, r2, #5
 8010dc2:	68fa      	ldr	r2, [r7, #12]
 8010dc4:	440a      	add	r2, r1
 8010dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010dce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010dd2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	699b      	ldr	r3, [r3, #24]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d003      	beq.n	8010de4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	68da      	ldr	r2, [r3, #12]
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	68da      	ldr	r2, [r3, #12]
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	015a      	lsls	r2, r3, #5
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	4413      	add	r3, r2
 8010df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010df8:	691b      	ldr	r3, [r3, #16]
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	0151      	lsls	r1, r2, #5
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	440a      	add	r2, r1
 8010e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	015a      	lsls	r2, r3, #5
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	4413      	add	r3, r2
 8010e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e18:	691a      	ldr	r2, [r3, #16]
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	69db      	ldr	r3, [r3, #28]
 8010e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e22:	68b9      	ldr	r1, [r7, #8]
 8010e24:	0148      	lsls	r0, r1, #5
 8010e26:	68f9      	ldr	r1, [r7, #12]
 8010e28:	4401      	add	r1, r0
 8010e2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	015a      	lsls	r2, r3, #5
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	4413      	add	r3, r2
 8010e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	68ba      	ldr	r2, [r7, #8]
 8010e42:	0151      	lsls	r1, r2, #5
 8010e44:	68fa      	ldr	r2, [r7, #12]
 8010e46:	440a      	add	r2, r1
 8010e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e52:	2300      	movs	r3, #0
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3714      	adds	r7, #20
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b087      	sub	sp, #28
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	785b      	ldrb	r3, [r3, #1]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d14a      	bne.n	8010f14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	015a      	lsls	r2, r3, #5
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	4413      	add	r3, r2
 8010e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e96:	f040 8086 	bne.w	8010fa6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	015a      	lsls	r2, r3, #5
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	683a      	ldr	r2, [r7, #0]
 8010eac:	7812      	ldrb	r2, [r2, #0]
 8010eae:	0151      	lsls	r1, r2, #5
 8010eb0:	693a      	ldr	r2, [r7, #16]
 8010eb2:	440a      	add	r2, r1
 8010eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010ebc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	015a      	lsls	r2, r3, #5
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	683a      	ldr	r2, [r7, #0]
 8010ed0:	7812      	ldrb	r2, [r2, #0]
 8010ed2:	0151      	lsls	r1, r2, #5
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	440a      	add	r2, r1
 8010ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f242 7210 	movw	r2, #10000	; 0x2710
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d902      	bls.n	8010ef8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8010ef6:	e056      	b.n	8010fa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	015a      	lsls	r2, r3, #5
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	4413      	add	r3, r2
 8010f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f10:	d0e7      	beq.n	8010ee2 <USB_EPStopXfer+0x82>
 8010f12:	e048      	b.n	8010fa6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	015a      	lsls	r2, r3, #5
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f2c:	d13b      	bne.n	8010fa6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	015a      	lsls	r2, r3, #5
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	4413      	add	r3, r2
 8010f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	683a      	ldr	r2, [r7, #0]
 8010f40:	7812      	ldrb	r2, [r2, #0]
 8010f42:	0151      	lsls	r1, r2, #5
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	440a      	add	r2, r1
 8010f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010f50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	015a      	lsls	r2, r3, #5
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	683a      	ldr	r2, [r7, #0]
 8010f64:	7812      	ldrb	r2, [r2, #0]
 8010f66:	0151      	lsls	r1, r2, #5
 8010f68:	693a      	ldr	r2, [r7, #16]
 8010f6a:	440a      	add	r2, r1
 8010f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010f74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d902      	bls.n	8010f8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010f86:	2301      	movs	r3, #1
 8010f88:	75fb      	strb	r3, [r7, #23]
          break;
 8010f8a:	e00c      	b.n	8010fa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	015a      	lsls	r2, r3, #5
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	4413      	add	r3, r2
 8010f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fa4:	d0e7      	beq.n	8010f76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	371c      	adds	r7, #28
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b089      	sub	sp, #36	; 0x24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	4611      	mov	r1, r2
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	71fb      	strb	r3, [r7, #7]
 8010fc6:	4613      	mov	r3, r2
 8010fc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8010fd2:	88bb      	ldrh	r3, [r7, #4]
 8010fd4:	3303      	adds	r3, #3
 8010fd6:	089b      	lsrs	r3, r3, #2
 8010fd8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8010fda:	2300      	movs	r3, #0
 8010fdc:	61bb      	str	r3, [r7, #24]
 8010fde:	e018      	b.n	8011012 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010fe0:	79fb      	ldrb	r3, [r7, #7]
 8010fe2:	031a      	lsls	r2, r3, #12
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fec:	461a      	mov	r2, r3
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	6013      	str	r3, [r2, #0]
    pSrc++;
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8011000:	69fb      	ldr	r3, [r7, #28]
 8011002:	3301      	adds	r3, #1
 8011004:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	3301      	adds	r3, #1
 801100a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	3301      	adds	r3, #1
 8011010:	61bb      	str	r3, [r7, #24]
 8011012:	69ba      	ldr	r2, [r7, #24]
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	429a      	cmp	r2, r3
 8011018:	d3e2      	bcc.n	8010fe0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 801101a:	2300      	movs	r3, #0
}
 801101c:	4618      	mov	r0, r3
 801101e:	3724      	adds	r7, #36	; 0x24
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011028:	b480      	push	{r7}
 801102a:	b08b      	sub	sp, #44	; 0x2c
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	4613      	mov	r3, r2
 8011034:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801103e:	88fb      	ldrh	r3, [r7, #6]
 8011040:	089b      	lsrs	r3, r3, #2
 8011042:	b29b      	uxth	r3, r3
 8011044:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011046:	88fb      	ldrh	r3, [r7, #6]
 8011048:	f003 0303 	and.w	r3, r3, #3
 801104c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801104e:	2300      	movs	r3, #0
 8011050:	623b      	str	r3, [r7, #32]
 8011052:	e014      	b.n	801107e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	601a      	str	r2, [r3, #0]
    pDest++;
 8011060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011062:	3301      	adds	r3, #1
 8011064:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011068:	3301      	adds	r3, #1
 801106a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106e:	3301      	adds	r3, #1
 8011070:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011074:	3301      	adds	r3, #1
 8011076:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011078:	6a3b      	ldr	r3, [r7, #32]
 801107a:	3301      	adds	r3, #1
 801107c:	623b      	str	r3, [r7, #32]
 801107e:	6a3a      	ldr	r2, [r7, #32]
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	429a      	cmp	r2, r3
 8011084:	d3e6      	bcc.n	8011054 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011086:	8bfb      	ldrh	r3, [r7, #30]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d01e      	beq.n	80110ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801108c:	2300      	movs	r3, #0
 801108e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011096:	461a      	mov	r2, r3
 8011098:	f107 0310 	add.w	r3, r7, #16
 801109c:	6812      	ldr	r2, [r2, #0]
 801109e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80110a0:	693a      	ldr	r2, [r7, #16]
 80110a2:	6a3b      	ldr	r3, [r7, #32]
 80110a4:	b2db      	uxtb	r3, r3
 80110a6:	00db      	lsls	r3, r3, #3
 80110a8:	fa22 f303 	lsr.w	r3, r2, r3
 80110ac:	b2da      	uxtb	r2, r3
 80110ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b0:	701a      	strb	r2, [r3, #0]
      i++;
 80110b2:	6a3b      	ldr	r3, [r7, #32]
 80110b4:	3301      	adds	r3, #1
 80110b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80110b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ba:	3301      	adds	r3, #1
 80110bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80110be:	8bfb      	ldrh	r3, [r7, #30]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80110c4:	8bfb      	ldrh	r3, [r7, #30]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1ea      	bne.n	80110a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80110ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	372c      	adds	r7, #44	; 0x2c
 80110d0:	46bd      	mov	sp, r7
 80110d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d6:	4770      	bx	lr

080110d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80110d8:	b480      	push	{r7}
 80110da:	b085      	sub	sp, #20
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	785b      	ldrb	r3, [r3, #1]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d12c      	bne.n	801114e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	015a      	lsls	r2, r3, #5
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	4413      	add	r3, r2
 80110fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	db12      	blt.n	801112c <USB_EPSetStall+0x54>
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00f      	beq.n	801112c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	015a      	lsls	r2, r3, #5
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	4413      	add	r3, r2
 8011114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	68ba      	ldr	r2, [r7, #8]
 801111c:	0151      	lsls	r1, r2, #5
 801111e:	68fa      	ldr	r2, [r7, #12]
 8011120:	440a      	add	r2, r1
 8011122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011126:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801112a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	015a      	lsls	r2, r3, #5
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	4413      	add	r3, r2
 8011134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	68ba      	ldr	r2, [r7, #8]
 801113c:	0151      	lsls	r1, r2, #5
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	440a      	add	r2, r1
 8011142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011146:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801114a:	6013      	str	r3, [r2, #0]
 801114c:	e02b      	b.n	80111a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	015a      	lsls	r2, r3, #5
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	4413      	add	r3, r2
 8011156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	db12      	blt.n	8011186 <USB_EPSetStall+0xae>
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d00f      	beq.n	8011186 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	015a      	lsls	r2, r3, #5
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	4413      	add	r3, r2
 801116e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	68ba      	ldr	r2, [r7, #8]
 8011176:	0151      	lsls	r1, r2, #5
 8011178:	68fa      	ldr	r2, [r7, #12]
 801117a:	440a      	add	r2, r1
 801117c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011180:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011184:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	015a      	lsls	r2, r3, #5
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	4413      	add	r3, r2
 801118e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	68ba      	ldr	r2, [r7, #8]
 8011196:	0151      	lsls	r1, r2, #5
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	440a      	add	r2, r1
 801119c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80111a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80111a6:	2300      	movs	r3, #0
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3714      	adds	r7, #20
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr

080111b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b085      	sub	sp, #20
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	785b      	ldrb	r3, [r3, #1]
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d128      	bne.n	8011222 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	015a      	lsls	r2, r3, #5
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	4413      	add	r3, r2
 80111d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	68ba      	ldr	r2, [r7, #8]
 80111e0:	0151      	lsls	r1, r2, #5
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	440a      	add	r2, r1
 80111e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80111ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	791b      	ldrb	r3, [r3, #4]
 80111f4:	2b03      	cmp	r3, #3
 80111f6:	d003      	beq.n	8011200 <USB_EPClearStall+0x4c>
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	791b      	ldrb	r3, [r3, #4]
 80111fc:	2b02      	cmp	r3, #2
 80111fe:	d138      	bne.n	8011272 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	015a      	lsls	r2, r3, #5
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	4413      	add	r3, r2
 8011208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68ba      	ldr	r2, [r7, #8]
 8011210:	0151      	lsls	r1, r2, #5
 8011212:	68fa      	ldr	r2, [r7, #12]
 8011214:	440a      	add	r2, r1
 8011216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801121e:	6013      	str	r3, [r2, #0]
 8011220:	e027      	b.n	8011272 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	015a      	lsls	r2, r3, #5
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	4413      	add	r3, r2
 801122a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	68ba      	ldr	r2, [r7, #8]
 8011232:	0151      	lsls	r1, r2, #5
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	440a      	add	r2, r1
 8011238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801123c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011240:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	791b      	ldrb	r3, [r3, #4]
 8011246:	2b03      	cmp	r3, #3
 8011248:	d003      	beq.n	8011252 <USB_EPClearStall+0x9e>
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	791b      	ldrb	r3, [r3, #4]
 801124e:	2b02      	cmp	r3, #2
 8011250:	d10f      	bne.n	8011272 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	015a      	lsls	r2, r3, #5
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	4413      	add	r3, r2
 801125a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	68ba      	ldr	r2, [r7, #8]
 8011262:	0151      	lsls	r1, r2, #5
 8011264:	68fa      	ldr	r2, [r7, #12]
 8011266:	440a      	add	r2, r1
 8011268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011270:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011272:	2300      	movs	r3, #0
}
 8011274:	4618      	mov	r0, r3
 8011276:	3714      	adds	r7, #20
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801129e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80112a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	78fb      	ldrb	r3, [r7, #3]
 80112ae:	011b      	lsls	r3, r3, #4
 80112b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80112b4:	68f9      	ldr	r1, [r7, #12]
 80112b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112ba:	4313      	orrs	r3, r2
 80112bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80112be:	2300      	movs	r3, #0
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3714      	adds	r7, #20
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b085      	sub	sp, #20
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80112e6:	f023 0303 	bic.w	r3, r3, #3
 80112ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80112fa:	f023 0302 	bic.w	r3, r3, #2
 80112fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011300:	2300      	movs	r3, #0
}
 8011302:	4618      	mov	r0, r3
 8011304:	3714      	adds	r7, #20
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr

0801130e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801130e:	b480      	push	{r7}
 8011310:	b085      	sub	sp, #20
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	68fa      	ldr	r2, [r7, #12]
 8011324:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011328:	f023 0303 	bic.w	r3, r3, #3
 801132c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	68fa      	ldr	r2, [r7, #12]
 8011338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801133c:	f043 0302 	orr.w	r3, r3, #2
 8011340:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	3714      	adds	r7, #20
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr

08011350 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011350:	b480      	push	{r7}
 8011352:	b085      	sub	sp, #20
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	695b      	ldr	r3, [r3, #20]
 801135c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	699b      	ldr	r3, [r3, #24]
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	4013      	ands	r3, r2
 8011366:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011368:	68fb      	ldr	r3, [r7, #12]
}
 801136a:	4618      	mov	r0, r3
 801136c:	3714      	adds	r7, #20
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr

08011376 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011376:	b480      	push	{r7}
 8011378:	b085      	sub	sp, #20
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011388:	699b      	ldr	r3, [r3, #24]
 801138a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011392:	69db      	ldr	r3, [r3, #28]
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	4013      	ands	r3, r2
 8011398:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	0c1b      	lsrs	r3, r3, #16
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3714      	adds	r7, #20
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr

080113aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80113aa:	b480      	push	{r7}
 80113ac:	b085      	sub	sp, #20
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113bc:	699b      	ldr	r3, [r3, #24]
 80113be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113c6:	69db      	ldr	r3, [r3, #28]
 80113c8:	68ba      	ldr	r2, [r7, #8]
 80113ca:	4013      	ands	r3, r2
 80113cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	b29b      	uxth	r3, r3
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3714      	adds	r7, #20
 80113d6:	46bd      	mov	sp, r7
 80113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113dc:	4770      	bx	lr

080113de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80113de:	b480      	push	{r7}
 80113e0:	b085      	sub	sp, #20
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
 80113e6:	460b      	mov	r3, r1
 80113e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80113ee:	78fb      	ldrb	r3, [r7, #3]
 80113f0:	015a      	lsls	r2, r3, #5
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	4413      	add	r3, r2
 80113f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011404:	695b      	ldr	r3, [r3, #20]
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	4013      	ands	r3, r2
 801140a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801140c:	68bb      	ldr	r3, [r7, #8]
}
 801140e:	4618      	mov	r0, r3
 8011410:	3714      	adds	r7, #20
 8011412:	46bd      	mov	sp, r7
 8011414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011418:	4770      	bx	lr

0801141a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801141a:	b480      	push	{r7}
 801141c:	b087      	sub	sp, #28
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	460b      	mov	r3, r1
 8011424:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801143c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801143e:	78fb      	ldrb	r3, [r7, #3]
 8011440:	f003 030f 	and.w	r3, r3, #15
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	fa22 f303 	lsr.w	r3, r2, r3
 801144a:	01db      	lsls	r3, r3, #7
 801144c:	b2db      	uxtb	r3, r3
 801144e:	693a      	ldr	r2, [r7, #16]
 8011450:	4313      	orrs	r3, r2
 8011452:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011454:	78fb      	ldrb	r3, [r7, #3]
 8011456:	015a      	lsls	r2, r3, #5
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	4413      	add	r3, r2
 801145c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011460:	689b      	ldr	r3, [r3, #8]
 8011462:	693a      	ldr	r2, [r7, #16]
 8011464:	4013      	ands	r3, r2
 8011466:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011468:	68bb      	ldr	r3, [r7, #8]
}
 801146a:	4618      	mov	r0, r3
 801146c:	371c      	adds	r7, #28
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr

08011476 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011476:	b480      	push	{r7}
 8011478:	b083      	sub	sp, #12
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	695b      	ldr	r3, [r3, #20]
 8011482:	f003 0301 	and.w	r3, r3, #1
}
 8011486:	4618      	mov	r0, r3
 8011488:	370c      	adds	r7, #12
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr

08011492 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011492:	b480      	push	{r7}
 8011494:	b085      	sub	sp, #20
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	68fa      	ldr	r2, [r7, #12]
 80114a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80114b0:	f023 0307 	bic.w	r3, r3, #7
 80114b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	68fa      	ldr	r2, [r7, #12]
 80114c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80114c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80114ca:	2300      	movs	r3, #0
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3714      	adds	r7, #20
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	333c      	adds	r3, #60	; 0x3c
 80114ea:	3304      	adds	r3, #4
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	4a1c      	ldr	r2, [pc, #112]	; (8011564 <USB_EP0_OutStart+0x8c>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d90a      	bls.n	801150e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011508:	d101      	bne.n	801150e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 801150a:	2300      	movs	r3, #0
 801150c:	e024      	b.n	8011558 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011514:	461a      	mov	r2, r3
 8011516:	2300      	movs	r3, #0
 8011518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011520:	691b      	ldr	r3, [r3, #16]
 8011522:	68fa      	ldr	r2, [r7, #12]
 8011524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801152c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011534:	691b      	ldr	r3, [r3, #16]
 8011536:	68fa      	ldr	r2, [r7, #12]
 8011538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801153c:	f043 0318 	orr.w	r3, r3, #24
 8011540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011548:	691b      	ldr	r3, [r3, #16]
 801154a:	68fa      	ldr	r2, [r7, #12]
 801154c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011550:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011554:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8011556:	2300      	movs	r3, #0
}
 8011558:	4618      	mov	r0, r3
 801155a:	3714      	adds	r7, #20
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr
 8011564:	4f54300a 	.word	0x4f54300a

08011568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011568:	b480      	push	{r7}
 801156a:	b085      	sub	sp, #20
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011570:	2300      	movs	r3, #0
 8011572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	3301      	adds	r3, #1
 8011578:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	4a13      	ldr	r2, [pc, #76]	; (80115cc <USB_CoreReset+0x64>)
 801157e:	4293      	cmp	r3, r2
 8011580:	d901      	bls.n	8011586 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011582:	2303      	movs	r3, #3
 8011584:	e01b      	b.n	80115be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	691b      	ldr	r3, [r3, #16]
 801158a:	2b00      	cmp	r3, #0
 801158c:	daf2      	bge.n	8011574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801158e:	2300      	movs	r3, #0
 8011590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	691b      	ldr	r3, [r3, #16]
 8011596:	f043 0201 	orr.w	r2, r3, #1
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	3301      	adds	r3, #1
 80115a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	4a09      	ldr	r2, [pc, #36]	; (80115cc <USB_CoreReset+0x64>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d901      	bls.n	80115b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80115ac:	2303      	movs	r3, #3
 80115ae:	e006      	b.n	80115be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	691b      	ldr	r3, [r3, #16]
 80115b4:	f003 0301 	and.w	r3, r3, #1
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	d0f0      	beq.n	801159e <USB_CoreReset+0x36>

  return HAL_OK;
 80115bc:	2300      	movs	r3, #0
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3714      	adds	r7, #20
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop
 80115cc:	00030d40 	.word	0x00030d40

080115d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	460b      	mov	r3, r1
 80115da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80115dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80115e0:	f002 fa6c 	bl	8013abc <USBD_static_malloc>
 80115e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d105      	bne.n	80115f8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2200      	movs	r2, #0
 80115f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80115f4:	2302      	movs	r3, #2
 80115f6:	e066      	b.n	80116c6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	68fa      	ldr	r2, [r7, #12]
 80115fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	7c1b      	ldrb	r3, [r3, #16]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d119      	bne.n	801163c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011608:	f44f 7300 	mov.w	r3, #512	; 0x200
 801160c:	2202      	movs	r2, #2
 801160e:	2181      	movs	r1, #129	; 0x81
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f002 f83f 	bl	8013694 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2201      	movs	r2, #1
 801161a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801161c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011620:	2202      	movs	r2, #2
 8011622:	2101      	movs	r1, #1
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f002 f835 	bl	8013694 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2201      	movs	r2, #1
 801162e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2210      	movs	r2, #16
 8011636:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801163a:	e016      	b.n	801166a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801163c:	2340      	movs	r3, #64	; 0x40
 801163e:	2202      	movs	r2, #2
 8011640:	2181      	movs	r1, #129	; 0x81
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f002 f826 	bl	8013694 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2201      	movs	r2, #1
 801164c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801164e:	2340      	movs	r3, #64	; 0x40
 8011650:	2202      	movs	r2, #2
 8011652:	2101      	movs	r1, #1
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f002 f81d 	bl	8013694 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2201      	movs	r2, #1
 801165e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2210      	movs	r2, #16
 8011666:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801166a:	2308      	movs	r3, #8
 801166c:	2203      	movs	r2, #3
 801166e:	2182      	movs	r1, #130	; 0x82
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f002 f80f 	bl	8013694 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2201      	movs	r2, #1
 801167a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2200      	movs	r2, #0
 801168c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2200      	movs	r2, #0
 8011694:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	7c1b      	ldrb	r3, [r3, #16]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d109      	bne.n	80116b4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116aa:	2101      	movs	r1, #1
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f002 f96b 	bl	8013988 <USBD_LL_PrepareReceive>
 80116b2:	e007      	b.n	80116c4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116ba:	2340      	movs	r3, #64	; 0x40
 80116bc:	2101      	movs	r1, #1
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f002 f962 	bl	8013988 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80116c4:	2300      	movs	r3, #0
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3710      	adds	r7, #16
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b082      	sub	sp, #8
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
 80116d6:	460b      	mov	r3, r1
 80116d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80116da:	2181      	movs	r1, #129	; 0x81
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f002 f817 	bl	8013710 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2200      	movs	r2, #0
 80116e6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80116e8:	2101      	movs	r1, #1
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f002 f810 	bl	8013710 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2200      	movs	r2, #0
 80116f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80116f8:	2182      	movs	r1, #130	; 0x82
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f002 f808 	bl	8013710 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00e      	beq.n	8011738 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801172a:	4618      	mov	r0, r3
 801172c:	f002 f9d4 	bl	8013ad8 <USBD_static_free>
    pdev->pClassData = NULL;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2200      	movs	r2, #0
 8011734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011738:	2300      	movs	r3, #0
}
 801173a:	4618      	mov	r0, r3
 801173c:	3708      	adds	r7, #8
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
	...

08011744 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011754:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011756:	2300      	movs	r3, #0
 8011758:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801175a:	2300      	movs	r3, #0
 801175c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801175e:	2300      	movs	r3, #0
 8011760:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d101      	bne.n	801176c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011768:	2303      	movs	r3, #3
 801176a:	e0af      	b.n	80118cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011774:	2b00      	cmp	r3, #0
 8011776:	d03f      	beq.n	80117f8 <USBD_CDC_Setup+0xb4>
 8011778:	2b20      	cmp	r3, #32
 801177a:	f040 809f 	bne.w	80118bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	88db      	ldrh	r3, [r3, #6]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d02e      	beq.n	80117e4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	b25b      	sxtb	r3, r3
 801178c:	2b00      	cmp	r3, #0
 801178e:	da16      	bge.n	80117be <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	683a      	ldr	r2, [r7, #0]
 801179a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801179c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	88d2      	ldrh	r2, [r2, #6]
 80117a2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	88db      	ldrh	r3, [r3, #6]
 80117a8:	2b07      	cmp	r3, #7
 80117aa:	bf28      	it	cs
 80117ac:	2307      	movcs	r3, #7
 80117ae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	89fa      	ldrh	r2, [r7, #14]
 80117b4:	4619      	mov	r1, r3
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f001 fb13 	bl	8012de2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80117bc:	e085      	b.n	80118ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	785a      	ldrb	r2, [r3, #1]
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	88db      	ldrh	r3, [r3, #6]
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80117d4:	6939      	ldr	r1, [r7, #16]
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	88db      	ldrh	r3, [r3, #6]
 80117da:	461a      	mov	r2, r3
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f001 fb2c 	bl	8012e3a <USBD_CtlPrepareRx>
      break;
 80117e2:	e072      	b.n	80118ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117ea:	689b      	ldr	r3, [r3, #8]
 80117ec:	683a      	ldr	r2, [r7, #0]
 80117ee:	7850      	ldrb	r0, [r2, #1]
 80117f0:	2200      	movs	r2, #0
 80117f2:	6839      	ldr	r1, [r7, #0]
 80117f4:	4798      	blx	r3
      break;
 80117f6:	e068      	b.n	80118ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	785b      	ldrb	r3, [r3, #1]
 80117fc:	2b0b      	cmp	r3, #11
 80117fe:	d852      	bhi.n	80118a6 <USBD_CDC_Setup+0x162>
 8011800:	a201      	add	r2, pc, #4	; (adr r2, 8011808 <USBD_CDC_Setup+0xc4>)
 8011802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011806:	bf00      	nop
 8011808:	08011839 	.word	0x08011839
 801180c:	080118b5 	.word	0x080118b5
 8011810:	080118a7 	.word	0x080118a7
 8011814:	080118a7 	.word	0x080118a7
 8011818:	080118a7 	.word	0x080118a7
 801181c:	080118a7 	.word	0x080118a7
 8011820:	080118a7 	.word	0x080118a7
 8011824:	080118a7 	.word	0x080118a7
 8011828:	080118a7 	.word	0x080118a7
 801182c:	080118a7 	.word	0x080118a7
 8011830:	08011863 	.word	0x08011863
 8011834:	0801188d 	.word	0x0801188d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801183e:	b2db      	uxtb	r3, r3
 8011840:	2b03      	cmp	r3, #3
 8011842:	d107      	bne.n	8011854 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011844:	f107 030a 	add.w	r3, r7, #10
 8011848:	2202      	movs	r2, #2
 801184a:	4619      	mov	r1, r3
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f001 fac8 	bl	8012de2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011852:	e032      	b.n	80118ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011854:	6839      	ldr	r1, [r7, #0]
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f001 fa52 	bl	8012d00 <USBD_CtlError>
            ret = USBD_FAIL;
 801185c:	2303      	movs	r3, #3
 801185e:	75fb      	strb	r3, [r7, #23]
          break;
 8011860:	e02b      	b.n	80118ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011868:	b2db      	uxtb	r3, r3
 801186a:	2b03      	cmp	r3, #3
 801186c:	d107      	bne.n	801187e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801186e:	f107 030d 	add.w	r3, r7, #13
 8011872:	2201      	movs	r2, #1
 8011874:	4619      	mov	r1, r3
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f001 fab3 	bl	8012de2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801187c:	e01d      	b.n	80118ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801187e:	6839      	ldr	r1, [r7, #0]
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f001 fa3d 	bl	8012d00 <USBD_CtlError>
            ret = USBD_FAIL;
 8011886:	2303      	movs	r3, #3
 8011888:	75fb      	strb	r3, [r7, #23]
          break;
 801188a:	e016      	b.n	80118ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011892:	b2db      	uxtb	r3, r3
 8011894:	2b03      	cmp	r3, #3
 8011896:	d00f      	beq.n	80118b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011898:	6839      	ldr	r1, [r7, #0]
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f001 fa30 	bl	8012d00 <USBD_CtlError>
            ret = USBD_FAIL;
 80118a0:	2303      	movs	r3, #3
 80118a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80118a4:	e008      	b.n	80118b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80118a6:	6839      	ldr	r1, [r7, #0]
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f001 fa29 	bl	8012d00 <USBD_CtlError>
          ret = USBD_FAIL;
 80118ae:	2303      	movs	r3, #3
 80118b0:	75fb      	strb	r3, [r7, #23]
          break;
 80118b2:	e002      	b.n	80118ba <USBD_CDC_Setup+0x176>
          break;
 80118b4:	bf00      	nop
 80118b6:	e008      	b.n	80118ca <USBD_CDC_Setup+0x186>
          break;
 80118b8:	bf00      	nop
      }
      break;
 80118ba:	e006      	b.n	80118ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80118bc:	6839      	ldr	r1, [r7, #0]
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f001 fa1e 	bl	8012d00 <USBD_CtlError>
      ret = USBD_FAIL;
 80118c4:	2303      	movs	r3, #3
 80118c6:	75fb      	strb	r3, [r7, #23]
      break;
 80118c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80118ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3718      	adds	r7, #24
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	460b      	mov	r3, r1
 80118de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80118e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d101      	bne.n	80118f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80118f2:	2303      	movs	r3, #3
 80118f4:	e04f      	b.n	8011996 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80118fe:	78fa      	ldrb	r2, [r7, #3]
 8011900:	6879      	ldr	r1, [r7, #4]
 8011902:	4613      	mov	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	4413      	add	r3, r2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	440b      	add	r3, r1
 801190c:	3318      	adds	r3, #24
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d029      	beq.n	8011968 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011914:	78fa      	ldrb	r2, [r7, #3]
 8011916:	6879      	ldr	r1, [r7, #4]
 8011918:	4613      	mov	r3, r2
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	4413      	add	r3, r2
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	440b      	add	r3, r1
 8011922:	3318      	adds	r3, #24
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	78f9      	ldrb	r1, [r7, #3]
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	460b      	mov	r3, r1
 801192c:	00db      	lsls	r3, r3, #3
 801192e:	440b      	add	r3, r1
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4403      	add	r3, r0
 8011934:	3348      	adds	r3, #72	; 0x48
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	fbb2 f1f3 	udiv	r1, r2, r3
 801193c:	fb01 f303 	mul.w	r3, r1, r3
 8011940:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011942:	2b00      	cmp	r3, #0
 8011944:	d110      	bne.n	8011968 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011946:	78fa      	ldrb	r2, [r7, #3]
 8011948:	6879      	ldr	r1, [r7, #4]
 801194a:	4613      	mov	r3, r2
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	4413      	add	r3, r2
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	440b      	add	r3, r1
 8011954:	3318      	adds	r3, #24
 8011956:	2200      	movs	r2, #0
 8011958:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801195a:	78f9      	ldrb	r1, [r7, #3]
 801195c:	2300      	movs	r3, #0
 801195e:	2200      	movs	r2, #0
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f001 ffd9 	bl	8013918 <USBD_LL_Transmit>
 8011966:	e015      	b.n	8011994 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	2200      	movs	r2, #0
 801196c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d00b      	beq.n	8011994 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011982:	691b      	ldr	r3, [r3, #16]
 8011984:	68ba      	ldr	r2, [r7, #8]
 8011986:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801198a:	68ba      	ldr	r2, [r7, #8]
 801198c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011990:	78fa      	ldrb	r2, [r7, #3]
 8011992:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b084      	sub	sp, #16
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	460b      	mov	r3, r1
 80119a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d101      	bne.n	80119c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80119bc:	2303      	movs	r3, #3
 80119be:	e015      	b.n	80119ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80119c0:	78fb      	ldrb	r3, [r7, #3]
 80119c2:	4619      	mov	r1, r3
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f002 f817 	bl	80139f8 <USBD_LL_GetRxDataSize>
 80119ca:	4602      	mov	r2, r0
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119d8:	68db      	ldr	r3, [r3, #12]
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80119e0:	68fa      	ldr	r2, [r7, #12]
 80119e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80119e6:	4611      	mov	r1, r2
 80119e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80119ea:	2300      	movs	r3, #0
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d101      	bne.n	8011a0e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011a0a:	2303      	movs	r3, #3
 8011a0c:	e01b      	b.n	8011a46 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d015      	beq.n	8011a44 <USBD_CDC_EP0_RxReady+0x50>
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011a1e:	2bff      	cmp	r3, #255	; 0xff
 8011a20:	d010      	beq.n	8011a44 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a28:	689b      	ldr	r3, [r3, #8]
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011a30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011a32:	68fa      	ldr	r2, [r7, #12]
 8011a34:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011a38:	b292      	uxth	r2, r2
 8011a3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	22ff      	movs	r2, #255	; 0xff
 8011a40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3710      	adds	r7, #16
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
	...

08011a50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011a50:	b480      	push	{r7}
 8011a52:	b083      	sub	sp, #12
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2243      	movs	r2, #67	; 0x43
 8011a5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011a5e:	4b03      	ldr	r3, [pc, #12]	; (8011a6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr
 8011a6c:	2001c220 	.word	0x2001c220

08011a70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2243      	movs	r2, #67	; 0x43
 8011a7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011a7e:	4b03      	ldr	r3, [pc, #12]	; (8011a8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr
 8011a8c:	2001c1dc 	.word	0x2001c1dc

08011a90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011a90:	b480      	push	{r7}
 8011a92:	b083      	sub	sp, #12
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2243      	movs	r2, #67	; 0x43
 8011a9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011a9e:	4b03      	ldr	r3, [pc, #12]	; (8011aac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr
 8011aac:	2001c264 	.word	0x2001c264

08011ab0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b083      	sub	sp, #12
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	220a      	movs	r2, #10
 8011abc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011abe:	4b03      	ldr	r3, [pc, #12]	; (8011acc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	370c      	adds	r7, #12
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr
 8011acc:	2001c198 	.word	0x2001c198

08011ad0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d101      	bne.n	8011ae4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011ae0:	2303      	movs	r3, #3
 8011ae2:	e004      	b.n	8011aee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	683a      	ldr	r2, [r7, #0]
 8011ae8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	370c      	adds	r7, #12
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr

08011afa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011afa:	b480      	push	{r7}
 8011afc:	b087      	sub	sp, #28
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	60f8      	str	r0, [r7, #12]
 8011b02:	60b9      	str	r1, [r7, #8]
 8011b04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b0c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d101      	bne.n	8011b18 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011b14:	2303      	movs	r3, #3
 8011b16:	e008      	b.n	8011b2a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	68ba      	ldr	r2, [r7, #8]
 8011b1c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011b28:	2300      	movs	r3, #0
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	371c      	adds	r7, #28
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b34:	4770      	bx	lr

08011b36 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011b36:	b480      	push	{r7}
 8011b38:	b085      	sub	sp, #20
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d101      	bne.n	8011b52 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	e004      	b.n	8011b5c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	683a      	ldr	r2, [r7, #0]
 8011b56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011b5a:	2300      	movs	r3, #0
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3714      	adds	r7, #20
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d101      	bne.n	8011b86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011b82:	2303      	movs	r3, #3
 8011b84:	e016      	b.n	8011bb4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	7c1b      	ldrb	r3, [r3, #16]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d109      	bne.n	8011ba2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b98:	2101      	movs	r1, #1
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f001 fef4 	bl	8013988 <USBD_LL_PrepareReceive>
 8011ba0:	e007      	b.n	8011bb2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011ba8:	2340      	movs	r3, #64	; 0x40
 8011baa:	2101      	movs	r1, #1
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f001 feeb 	bl	8013988 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011bb2:	2300      	movs	r3, #0
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3710      	adds	r7, #16
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b086      	sub	sp, #24
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d101      	bne.n	8011bd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011bd0:	2303      	movs	r3, #3
 8011bd2:	e01f      	b.n	8011c14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2200      	movs	r2, #0
 8011be0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2200      	movs	r2, #0
 8011be8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	79fa      	ldrb	r2, [r7, #7]
 8011c06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011c08:	68f8      	ldr	r0, [r7, #12]
 8011c0a:	f001 fcc5 	bl	8013598 <USBD_LL_Init>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3718      	adds	r7, #24
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c26:	2300      	movs	r3, #0
 8011c28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d101      	bne.n	8011c34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011c30:	2303      	movs	r3, #3
 8011c32:	e016      	b.n	8011c62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	683a      	ldr	r2, [r7, #0]
 8011c38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00b      	beq.n	8011c60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c50:	f107 020e 	add.w	r2, r7, #14
 8011c54:	4610      	mov	r0, r2
 8011c56:	4798      	blx	r3
 8011c58:	4602      	mov	r2, r0
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011c60:	2300      	movs	r3, #0
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3710      	adds	r7, #16
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}

08011c6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b082      	sub	sp, #8
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f001 fcdc 	bl	8013630 <USBD_LL_Start>
 8011c78:	4603      	mov	r3, r0
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3708      	adds	r7, #8
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011c82:	b480      	push	{r7}
 8011c84:	b083      	sub	sp, #12
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	370c      	adds	r7, #12
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d009      	beq.n	8011cc6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	78fa      	ldrb	r2, [r7, #3]
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	4798      	blx	r3
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3710      	adds	r7, #16
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	460b      	mov	r3, r1
 8011cda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d007      	beq.n	8011cf6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	78fa      	ldrb	r2, [r7, #3]
 8011cf0:	4611      	mov	r1, r2
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	4798      	blx	r3
  }

  return USBD_OK;
 8011cf6:	2300      	movs	r3, #0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d10:	6839      	ldr	r1, [r7, #0]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f000 ffba 	bl	8012c8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011d26:	461a      	mov	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d34:	f003 031f 	and.w	r3, r3, #31
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d01a      	beq.n	8011d72 <USBD_LL_SetupStage+0x72>
 8011d3c:	2b02      	cmp	r3, #2
 8011d3e:	d822      	bhi.n	8011d86 <USBD_LL_SetupStage+0x86>
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d002      	beq.n	8011d4a <USBD_LL_SetupStage+0x4a>
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d00a      	beq.n	8011d5e <USBD_LL_SetupStage+0x5e>
 8011d48:	e01d      	b.n	8011d86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d50:	4619      	mov	r1, r3
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 fa62 	bl	801221c <USBD_StdDevReq>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8011d5c:	e020      	b.n	8011da0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d64:	4619      	mov	r1, r3
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 fac6 	bl	80122f8 <USBD_StdItfReq>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d70:	e016      	b.n	8011da0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d78:	4619      	mov	r1, r3
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 fb05 	bl	801238a <USBD_StdEPReq>
 8011d80:	4603      	mov	r3, r0
 8011d82:	73fb      	strb	r3, [r7, #15]
      break;
 8011d84:	e00c      	b.n	8011da0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	4619      	mov	r1, r3
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f001 fcf1 	bl	801377c <USBD_LL_StallEP>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8011d9e:	bf00      	nop
  }

  return ret;
 8011da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3710      	adds	r7, #16
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b086      	sub	sp, #24
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	60f8      	str	r0, [r7, #12]
 8011db2:	460b      	mov	r3, r1
 8011db4:	607a      	str	r2, [r7, #4]
 8011db6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011db8:	7afb      	ldrb	r3, [r7, #11]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d138      	bne.n	8011e30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011dc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011dcc:	2b03      	cmp	r3, #3
 8011dce:	d14a      	bne.n	8011e66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	689a      	ldr	r2, [r3, #8]
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d913      	bls.n	8011e04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	689a      	ldr	r2, [r3, #8]
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	1ad2      	subs	r2, r2, r3
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	68da      	ldr	r2, [r3, #12]
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	689b      	ldr	r3, [r3, #8]
 8011df2:	4293      	cmp	r3, r2
 8011df4:	bf28      	it	cs
 8011df6:	4613      	movcs	r3, r2
 8011df8:	461a      	mov	r2, r3
 8011dfa:	6879      	ldr	r1, [r7, #4]
 8011dfc:	68f8      	ldr	r0, [r7, #12]
 8011dfe:	f001 f839 	bl	8012e74 <USBD_CtlContinueRx>
 8011e02:	e030      	b.n	8011e66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	2b03      	cmp	r3, #3
 8011e0e:	d10b      	bne.n	8011e28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e16:	691b      	ldr	r3, [r3, #16]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d005      	beq.n	8011e28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e22:	691b      	ldr	r3, [r3, #16]
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f001 f834 	bl	8012e96 <USBD_CtlSendStatus>
 8011e2e:	e01a      	b.n	8011e66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	2b03      	cmp	r3, #3
 8011e3a:	d114      	bne.n	8011e66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e42:	699b      	ldr	r3, [r3, #24]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d00e      	beq.n	8011e66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e4e:	699b      	ldr	r3, [r3, #24]
 8011e50:	7afa      	ldrb	r2, [r7, #11]
 8011e52:	4611      	mov	r1, r2
 8011e54:	68f8      	ldr	r0, [r7, #12]
 8011e56:	4798      	blx	r3
 8011e58:	4603      	mov	r3, r0
 8011e5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011e5c:	7dfb      	ldrb	r3, [r7, #23]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d001      	beq.n	8011e66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011e62:	7dfb      	ldrb	r3, [r7, #23]
 8011e64:	e000      	b.n	8011e68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011e66:	2300      	movs	r3, #0
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3718      	adds	r7, #24
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b086      	sub	sp, #24
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	460b      	mov	r3, r1
 8011e7a:	607a      	str	r2, [r7, #4]
 8011e7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011e7e:	7afb      	ldrb	r3, [r7, #11]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d16b      	bne.n	8011f5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	3314      	adds	r3, #20
 8011e88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e90:	2b02      	cmp	r3, #2
 8011e92:	d156      	bne.n	8011f42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	689a      	ldr	r2, [r3, #8]
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d914      	bls.n	8011eca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	689a      	ldr	r2, [r3, #8]
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	1ad2      	subs	r2, r2, r3
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	689b      	ldr	r3, [r3, #8]
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	6879      	ldr	r1, [r7, #4]
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f000 ffae 	bl	8012e18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	68f8      	ldr	r0, [r7, #12]
 8011ec4:	f001 fd60 	bl	8013988 <USBD_LL_PrepareReceive>
 8011ec8:	e03b      	b.n	8011f42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	68da      	ldr	r2, [r3, #12]
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	689b      	ldr	r3, [r3, #8]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d11c      	bne.n	8011f10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011ed6:	693b      	ldr	r3, [r7, #16]
 8011ed8:	685a      	ldr	r2, [r3, #4]
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d316      	bcc.n	8011f10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	685a      	ldr	r2, [r3, #4]
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d20f      	bcs.n	8011f10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f000 ff8f 	bl	8012e18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2200      	movs	r2, #0
 8011efe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f02:	2300      	movs	r3, #0
 8011f04:	2200      	movs	r2, #0
 8011f06:	2100      	movs	r1, #0
 8011f08:	68f8      	ldr	r0, [r7, #12]
 8011f0a:	f001 fd3d 	bl	8013988 <USBD_LL_PrepareReceive>
 8011f0e:	e018      	b.n	8011f42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	2b03      	cmp	r3, #3
 8011f1a:	d10b      	bne.n	8011f34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d005      	beq.n	8011f34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	68f8      	ldr	r0, [r7, #12]
 8011f32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f34:	2180      	movs	r1, #128	; 0x80
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f001 fc20 	bl	801377c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011f3c:	68f8      	ldr	r0, [r7, #12]
 8011f3e:	f000 ffbd 	bl	8012ebc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011f48:	2b01      	cmp	r3, #1
 8011f4a:	d122      	bne.n	8011f92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f7ff fe98 	bl	8011c82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011f5a:	e01a      	b.n	8011f92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	2b03      	cmp	r3, #3
 8011f66:	d114      	bne.n	8011f92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f6e:	695b      	ldr	r3, [r3, #20]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d00e      	beq.n	8011f92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f7a:	695b      	ldr	r3, [r3, #20]
 8011f7c:	7afa      	ldrb	r2, [r7, #11]
 8011f7e:	4611      	mov	r1, r2
 8011f80:	68f8      	ldr	r0, [r7, #12]
 8011f82:	4798      	blx	r3
 8011f84:	4603      	mov	r3, r0
 8011f86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011f88:	7dfb      	ldrb	r3, [r7, #23]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d001      	beq.n	8011f92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011f8e:	7dfb      	ldrb	r3, [r7, #23]
 8011f90:	e000      	b.n	8011f94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3718      	adds	r7, #24
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d101      	bne.n	8011fd0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011fcc:	2303      	movs	r3, #3
 8011fce:	e02f      	b.n	8012030 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d00f      	beq.n	8011ffa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d009      	beq.n	8011ffa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	6852      	ldr	r2, [r2, #4]
 8011ff2:	b2d2      	uxtb	r2, r2
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ffa:	2340      	movs	r3, #64	; 0x40
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	2100      	movs	r1, #0
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f001 fb47 	bl	8013694 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2201      	movs	r2, #1
 801200a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2240      	movs	r2, #64	; 0x40
 8012012:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012016:	2340      	movs	r3, #64	; 0x40
 8012018:	2200      	movs	r2, #0
 801201a:	2180      	movs	r1, #128	; 0x80
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f001 fb39 	bl	8013694 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2201      	movs	r2, #1
 8012026:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2240      	movs	r2, #64	; 0x40
 801202c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801202e:	2300      	movs	r3, #0
}
 8012030:	4618      	mov	r0, r3
 8012032:	3708      	adds	r7, #8
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	460b      	mov	r3, r1
 8012042:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	78fa      	ldrb	r2, [r7, #3]
 8012048:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801204a:	2300      	movs	r3, #0
}
 801204c:	4618      	mov	r0, r3
 801204e:	370c      	adds	r7, #12
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr

08012058 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012066:	b2da      	uxtb	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2204      	movs	r2, #4
 8012072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012076:	2300      	movs	r3, #0
}
 8012078:	4618      	mov	r0, r3
 801207a:	370c      	adds	r7, #12
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr

08012084 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012084:	b480      	push	{r7}
 8012086:	b083      	sub	sp, #12
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012092:	b2db      	uxtb	r3, r3
 8012094:	2b04      	cmp	r3, #4
 8012096:	d106      	bne.n	80120a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801209e:	b2da      	uxtb	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80120a6:	2300      	movs	r3, #0
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	370c      	adds	r7, #12
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr

080120b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d101      	bne.n	80120ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80120c6:	2303      	movs	r3, #3
 80120c8:	e012      	b.n	80120f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	2b03      	cmp	r3, #3
 80120d4:	d10b      	bne.n	80120ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120dc:	69db      	ldr	r3, [r3, #28]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d005      	beq.n	80120ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120e8:	69db      	ldr	r3, [r3, #28]
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	460b      	mov	r3, r1
 8012102:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801210a:	2b00      	cmp	r3, #0
 801210c:	d101      	bne.n	8012112 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801210e:	2303      	movs	r3, #3
 8012110:	e014      	b.n	801213c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012118:	b2db      	uxtb	r3, r3
 801211a:	2b03      	cmp	r3, #3
 801211c:	d10d      	bne.n	801213a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012124:	6a1b      	ldr	r3, [r3, #32]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d007      	beq.n	801213a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012130:	6a1b      	ldr	r3, [r3, #32]
 8012132:	78fa      	ldrb	r2, [r7, #3]
 8012134:	4611      	mov	r1, r2
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801213a:	2300      	movs	r3, #0
}
 801213c:	4618      	mov	r0, r3
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}

08012144 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
 801214c:	460b      	mov	r3, r1
 801214e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012156:	2b00      	cmp	r3, #0
 8012158:	d101      	bne.n	801215e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801215a:	2303      	movs	r3, #3
 801215c:	e014      	b.n	8012188 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012164:	b2db      	uxtb	r3, r3
 8012166:	2b03      	cmp	r3, #3
 8012168:	d10d      	bne.n	8012186 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012172:	2b00      	cmp	r3, #0
 8012174:	d007      	beq.n	8012186 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801217e:	78fa      	ldrb	r2, [r7, #3]
 8012180:	4611      	mov	r1, r2
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012186:	2300      	movs	r3, #0
}
 8012188:	4618      	mov	r0, r3
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012198:	2300      	movs	r3, #0
}
 801219a:	4618      	mov	r0, r3
 801219c:	370c      	adds	r7, #12
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr

080121a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b082      	sub	sp, #8
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2201      	movs	r2, #1
 80121b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d009      	beq.n	80121d4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	6852      	ldr	r2, [r2, #4]
 80121cc:	b2d2      	uxtb	r2, r2
 80121ce:	4611      	mov	r1, r2
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	4798      	blx	r3
  }

  return USBD_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80121de:	b480      	push	{r7}
 80121e0:	b087      	sub	sp, #28
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	3301      	adds	r3, #1
 80121f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80121fc:	8a3b      	ldrh	r3, [r7, #16]
 80121fe:	021b      	lsls	r3, r3, #8
 8012200:	b21a      	sxth	r2, r3
 8012202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012206:	4313      	orrs	r3, r2
 8012208:	b21b      	sxth	r3, r3
 801220a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801220c:	89fb      	ldrh	r3, [r7, #14]
}
 801220e:	4618      	mov	r0, r3
 8012210:	371c      	adds	r7, #28
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
	...

0801221c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012226:	2300      	movs	r3, #0
 8012228:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012232:	2b40      	cmp	r3, #64	; 0x40
 8012234:	d005      	beq.n	8012242 <USBD_StdDevReq+0x26>
 8012236:	2b40      	cmp	r3, #64	; 0x40
 8012238:	d853      	bhi.n	80122e2 <USBD_StdDevReq+0xc6>
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00b      	beq.n	8012256 <USBD_StdDevReq+0x3a>
 801223e:	2b20      	cmp	r3, #32
 8012240:	d14f      	bne.n	80122e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012248:	689b      	ldr	r3, [r3, #8]
 801224a:	6839      	ldr	r1, [r7, #0]
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	4798      	blx	r3
 8012250:	4603      	mov	r3, r0
 8012252:	73fb      	strb	r3, [r7, #15]
      break;
 8012254:	e04a      	b.n	80122ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	785b      	ldrb	r3, [r3, #1]
 801225a:	2b09      	cmp	r3, #9
 801225c:	d83b      	bhi.n	80122d6 <USBD_StdDevReq+0xba>
 801225e:	a201      	add	r2, pc, #4	; (adr r2, 8012264 <USBD_StdDevReq+0x48>)
 8012260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012264:	080122b9 	.word	0x080122b9
 8012268:	080122cd 	.word	0x080122cd
 801226c:	080122d7 	.word	0x080122d7
 8012270:	080122c3 	.word	0x080122c3
 8012274:	080122d7 	.word	0x080122d7
 8012278:	08012297 	.word	0x08012297
 801227c:	0801228d 	.word	0x0801228d
 8012280:	080122d7 	.word	0x080122d7
 8012284:	080122af 	.word	0x080122af
 8012288:	080122a1 	.word	0x080122a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 f9de 	bl	8012650 <USBD_GetDescriptor>
          break;
 8012294:	e024      	b.n	80122e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012296:	6839      	ldr	r1, [r7, #0]
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f000 fb6d 	bl	8012978 <USBD_SetAddress>
          break;
 801229e:	e01f      	b.n	80122e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80122a0:	6839      	ldr	r1, [r7, #0]
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 fbac 	bl	8012a00 <USBD_SetConfig>
 80122a8:	4603      	mov	r3, r0
 80122aa:	73fb      	strb	r3, [r7, #15]
          break;
 80122ac:	e018      	b.n	80122e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80122ae:	6839      	ldr	r1, [r7, #0]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 fc4b 	bl	8012b4c <USBD_GetConfig>
          break;
 80122b6:	e013      	b.n	80122e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fc7c 	bl	8012bb8 <USBD_GetStatus>
          break;
 80122c0:	e00e      	b.n	80122e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80122c2:	6839      	ldr	r1, [r7, #0]
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f000 fcab 	bl	8012c20 <USBD_SetFeature>
          break;
 80122ca:	e009      	b.n	80122e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80122cc:	6839      	ldr	r1, [r7, #0]
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fcba 	bl	8012c48 <USBD_ClrFeature>
          break;
 80122d4:	e004      	b.n	80122e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80122d6:	6839      	ldr	r1, [r7, #0]
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f000 fd11 	bl	8012d00 <USBD_CtlError>
          break;
 80122de:	bf00      	nop
      }
      break;
 80122e0:	e004      	b.n	80122ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80122e2:	6839      	ldr	r1, [r7, #0]
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 fd0b 	bl	8012d00 <USBD_CtlError>
      break;
 80122ea:	bf00      	nop
  }

  return ret;
 80122ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop

080122f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012302:	2300      	movs	r3, #0
 8012304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801230e:	2b40      	cmp	r3, #64	; 0x40
 8012310:	d005      	beq.n	801231e <USBD_StdItfReq+0x26>
 8012312:	2b40      	cmp	r3, #64	; 0x40
 8012314:	d82f      	bhi.n	8012376 <USBD_StdItfReq+0x7e>
 8012316:	2b00      	cmp	r3, #0
 8012318:	d001      	beq.n	801231e <USBD_StdItfReq+0x26>
 801231a:	2b20      	cmp	r3, #32
 801231c:	d12b      	bne.n	8012376 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012324:	b2db      	uxtb	r3, r3
 8012326:	3b01      	subs	r3, #1
 8012328:	2b02      	cmp	r3, #2
 801232a:	d81d      	bhi.n	8012368 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	889b      	ldrh	r3, [r3, #4]
 8012330:	b2db      	uxtb	r3, r3
 8012332:	2b01      	cmp	r3, #1
 8012334:	d813      	bhi.n	801235e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801233c:	689b      	ldr	r3, [r3, #8]
 801233e:	6839      	ldr	r1, [r7, #0]
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	4798      	blx	r3
 8012344:	4603      	mov	r3, r0
 8012346:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	88db      	ldrh	r3, [r3, #6]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d110      	bne.n	8012372 <USBD_StdItfReq+0x7a>
 8012350:	7bfb      	ldrb	r3, [r7, #15]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d10d      	bne.n	8012372 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 fd9d 	bl	8012e96 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801235c:	e009      	b.n	8012372 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f000 fccd 	bl	8012d00 <USBD_CtlError>
          break;
 8012366:	e004      	b.n	8012372 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 fcc8 	bl	8012d00 <USBD_CtlError>
          break;
 8012370:	e000      	b.n	8012374 <USBD_StdItfReq+0x7c>
          break;
 8012372:	bf00      	nop
      }
      break;
 8012374:	e004      	b.n	8012380 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012376:	6839      	ldr	r1, [r7, #0]
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 fcc1 	bl	8012d00 <USBD_CtlError>
      break;
 801237e:	bf00      	nop
  }

  return ret;
 8012380:	7bfb      	ldrb	r3, [r7, #15]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3710      	adds	r7, #16
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}

0801238a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801238a:	b580      	push	{r7, lr}
 801238c:	b084      	sub	sp, #16
 801238e:	af00      	add	r7, sp, #0
 8012390:	6078      	str	r0, [r7, #4]
 8012392:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012394:	2300      	movs	r3, #0
 8012396:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	889b      	ldrh	r3, [r3, #4]
 801239c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80123a6:	2b40      	cmp	r3, #64	; 0x40
 80123a8:	d007      	beq.n	80123ba <USBD_StdEPReq+0x30>
 80123aa:	2b40      	cmp	r3, #64	; 0x40
 80123ac:	f200 8145 	bhi.w	801263a <USBD_StdEPReq+0x2b0>
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d00c      	beq.n	80123ce <USBD_StdEPReq+0x44>
 80123b4:	2b20      	cmp	r3, #32
 80123b6:	f040 8140 	bne.w	801263a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	6839      	ldr	r1, [r7, #0]
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	4798      	blx	r3
 80123c8:	4603      	mov	r3, r0
 80123ca:	73fb      	strb	r3, [r7, #15]
      break;
 80123cc:	e13a      	b.n	8012644 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	785b      	ldrb	r3, [r3, #1]
 80123d2:	2b03      	cmp	r3, #3
 80123d4:	d007      	beq.n	80123e6 <USBD_StdEPReq+0x5c>
 80123d6:	2b03      	cmp	r3, #3
 80123d8:	f300 8129 	bgt.w	801262e <USBD_StdEPReq+0x2a4>
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d07f      	beq.n	80124e0 <USBD_StdEPReq+0x156>
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d03c      	beq.n	801245e <USBD_StdEPReq+0xd4>
 80123e4:	e123      	b.n	801262e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d002      	beq.n	80123f8 <USBD_StdEPReq+0x6e>
 80123f2:	2b03      	cmp	r3, #3
 80123f4:	d016      	beq.n	8012424 <USBD_StdEPReq+0x9a>
 80123f6:	e02c      	b.n	8012452 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123f8:	7bbb      	ldrb	r3, [r7, #14]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00d      	beq.n	801241a <USBD_StdEPReq+0x90>
 80123fe:	7bbb      	ldrb	r3, [r7, #14]
 8012400:	2b80      	cmp	r3, #128	; 0x80
 8012402:	d00a      	beq.n	801241a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012404:	7bbb      	ldrb	r3, [r7, #14]
 8012406:	4619      	mov	r1, r3
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f001 f9b7 	bl	801377c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801240e:	2180      	movs	r1, #128	; 0x80
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f001 f9b3 	bl	801377c <USBD_LL_StallEP>
 8012416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012418:	e020      	b.n	801245c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801241a:	6839      	ldr	r1, [r7, #0]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 fc6f 	bl	8012d00 <USBD_CtlError>
              break;
 8012422:	e01b      	b.n	801245c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	885b      	ldrh	r3, [r3, #2]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d10e      	bne.n	801244a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801242c:	7bbb      	ldrb	r3, [r7, #14]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00b      	beq.n	801244a <USBD_StdEPReq+0xc0>
 8012432:	7bbb      	ldrb	r3, [r7, #14]
 8012434:	2b80      	cmp	r3, #128	; 0x80
 8012436:	d008      	beq.n	801244a <USBD_StdEPReq+0xc0>
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	88db      	ldrh	r3, [r3, #6]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d104      	bne.n	801244a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012440:	7bbb      	ldrb	r3, [r7, #14]
 8012442:	4619      	mov	r1, r3
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f001 f999 	bl	801377c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 fd23 	bl	8012e96 <USBD_CtlSendStatus>

              break;
 8012450:	e004      	b.n	801245c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012452:	6839      	ldr	r1, [r7, #0]
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f000 fc53 	bl	8012d00 <USBD_CtlError>
              break;
 801245a:	bf00      	nop
          }
          break;
 801245c:	e0ec      	b.n	8012638 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012464:	b2db      	uxtb	r3, r3
 8012466:	2b02      	cmp	r3, #2
 8012468:	d002      	beq.n	8012470 <USBD_StdEPReq+0xe6>
 801246a:	2b03      	cmp	r3, #3
 801246c:	d016      	beq.n	801249c <USBD_StdEPReq+0x112>
 801246e:	e030      	b.n	80124d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012470:	7bbb      	ldrb	r3, [r7, #14]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d00d      	beq.n	8012492 <USBD_StdEPReq+0x108>
 8012476:	7bbb      	ldrb	r3, [r7, #14]
 8012478:	2b80      	cmp	r3, #128	; 0x80
 801247a:	d00a      	beq.n	8012492 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801247c:	7bbb      	ldrb	r3, [r7, #14]
 801247e:	4619      	mov	r1, r3
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f001 f97b 	bl	801377c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012486:	2180      	movs	r1, #128	; 0x80
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f001 f977 	bl	801377c <USBD_LL_StallEP>
 801248e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012490:	e025      	b.n	80124de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012492:	6839      	ldr	r1, [r7, #0]
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f000 fc33 	bl	8012d00 <USBD_CtlError>
              break;
 801249a:	e020      	b.n	80124de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	885b      	ldrh	r3, [r3, #2]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d11b      	bne.n	80124dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80124a4:	7bbb      	ldrb	r3, [r7, #14]
 80124a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d004      	beq.n	80124b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80124ae:	7bbb      	ldrb	r3, [r7, #14]
 80124b0:	4619      	mov	r1, r3
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f001 f998 	bl	80137e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f000 fcec 	bl	8012e96 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	6839      	ldr	r1, [r7, #0]
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	4798      	blx	r3
 80124cc:	4603      	mov	r3, r0
 80124ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80124d0:	e004      	b.n	80124dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80124d2:	6839      	ldr	r1, [r7, #0]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f000 fc13 	bl	8012d00 <USBD_CtlError>
              break;
 80124da:	e000      	b.n	80124de <USBD_StdEPReq+0x154>
              break;
 80124dc:	bf00      	nop
          }
          break;
 80124de:	e0ab      	b.n	8012638 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124e6:	b2db      	uxtb	r3, r3
 80124e8:	2b02      	cmp	r3, #2
 80124ea:	d002      	beq.n	80124f2 <USBD_StdEPReq+0x168>
 80124ec:	2b03      	cmp	r3, #3
 80124ee:	d032      	beq.n	8012556 <USBD_StdEPReq+0x1cc>
 80124f0:	e097      	b.n	8012622 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124f2:	7bbb      	ldrb	r3, [r7, #14]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d007      	beq.n	8012508 <USBD_StdEPReq+0x17e>
 80124f8:	7bbb      	ldrb	r3, [r7, #14]
 80124fa:	2b80      	cmp	r3, #128	; 0x80
 80124fc:	d004      	beq.n	8012508 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80124fe:	6839      	ldr	r1, [r7, #0]
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f000 fbfd 	bl	8012d00 <USBD_CtlError>
                break;
 8012506:	e091      	b.n	801262c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801250c:	2b00      	cmp	r3, #0
 801250e:	da0b      	bge.n	8012528 <USBD_StdEPReq+0x19e>
 8012510:	7bbb      	ldrb	r3, [r7, #14]
 8012512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012516:	4613      	mov	r3, r2
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	4413      	add	r3, r2
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	3310      	adds	r3, #16
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	4413      	add	r3, r2
 8012524:	3304      	adds	r3, #4
 8012526:	e00b      	b.n	8012540 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012528:	7bbb      	ldrb	r3, [r7, #14]
 801252a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801252e:	4613      	mov	r3, r2
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4413      	add	r3, r2
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	4413      	add	r3, r2
 801253e:	3304      	adds	r3, #4
 8012540:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	2200      	movs	r2, #0
 8012546:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	2202      	movs	r2, #2
 801254c:	4619      	mov	r1, r3
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 fc47 	bl	8012de2 <USBD_CtlSendData>
              break;
 8012554:	e06a      	b.n	801262c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801255a:	2b00      	cmp	r3, #0
 801255c:	da11      	bge.n	8012582 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801255e:	7bbb      	ldrb	r3, [r7, #14]
 8012560:	f003 020f 	and.w	r2, r3, #15
 8012564:	6879      	ldr	r1, [r7, #4]
 8012566:	4613      	mov	r3, r2
 8012568:	009b      	lsls	r3, r3, #2
 801256a:	4413      	add	r3, r2
 801256c:	009b      	lsls	r3, r3, #2
 801256e:	440b      	add	r3, r1
 8012570:	3324      	adds	r3, #36	; 0x24
 8012572:	881b      	ldrh	r3, [r3, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d117      	bne.n	80125a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012578:	6839      	ldr	r1, [r7, #0]
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 fbc0 	bl	8012d00 <USBD_CtlError>
                  break;
 8012580:	e054      	b.n	801262c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012582:	7bbb      	ldrb	r3, [r7, #14]
 8012584:	f003 020f 	and.w	r2, r3, #15
 8012588:	6879      	ldr	r1, [r7, #4]
 801258a:	4613      	mov	r3, r2
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	4413      	add	r3, r2
 8012590:	009b      	lsls	r3, r3, #2
 8012592:	440b      	add	r3, r1
 8012594:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012598:	881b      	ldrh	r3, [r3, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d104      	bne.n	80125a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 fbad 	bl	8012d00 <USBD_CtlError>
                  break;
 80125a6:	e041      	b.n	801262c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	da0b      	bge.n	80125c8 <USBD_StdEPReq+0x23e>
 80125b0:	7bbb      	ldrb	r3, [r7, #14]
 80125b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125b6:	4613      	mov	r3, r2
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	4413      	add	r3, r2
 80125bc:	009b      	lsls	r3, r3, #2
 80125be:	3310      	adds	r3, #16
 80125c0:	687a      	ldr	r2, [r7, #4]
 80125c2:	4413      	add	r3, r2
 80125c4:	3304      	adds	r3, #4
 80125c6:	e00b      	b.n	80125e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80125c8:	7bbb      	ldrb	r3, [r7, #14]
 80125ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125ce:	4613      	mov	r3, r2
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	4413      	add	r3, r2
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	4413      	add	r3, r2
 80125de:	3304      	adds	r3, #4
 80125e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80125e2:	7bbb      	ldrb	r3, [r7, #14]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <USBD_StdEPReq+0x264>
 80125e8:	7bbb      	ldrb	r3, [r7, #14]
 80125ea:	2b80      	cmp	r3, #128	; 0x80
 80125ec:	d103      	bne.n	80125f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	2200      	movs	r2, #0
 80125f2:	601a      	str	r2, [r3, #0]
 80125f4:	e00e      	b.n	8012614 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80125f6:	7bbb      	ldrb	r3, [r7, #14]
 80125f8:	4619      	mov	r1, r3
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f001 f92a 	bl	8013854 <USBD_LL_IsStallEP>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	d003      	beq.n	801260e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	2201      	movs	r2, #1
 801260a:	601a      	str	r2, [r3, #0]
 801260c:	e002      	b.n	8012614 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	2200      	movs	r2, #0
 8012612:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	2202      	movs	r2, #2
 8012618:	4619      	mov	r1, r3
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f000 fbe1 	bl	8012de2 <USBD_CtlSendData>
              break;
 8012620:	e004      	b.n	801262c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012622:	6839      	ldr	r1, [r7, #0]
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f000 fb6b 	bl	8012d00 <USBD_CtlError>
              break;
 801262a:	bf00      	nop
          }
          break;
 801262c:	e004      	b.n	8012638 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801262e:	6839      	ldr	r1, [r7, #0]
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f000 fb65 	bl	8012d00 <USBD_CtlError>
          break;
 8012636:	bf00      	nop
      }
      break;
 8012638:	e004      	b.n	8012644 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801263a:	6839      	ldr	r1, [r7, #0]
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 fb5f 	bl	8012d00 <USBD_CtlError>
      break;
 8012642:	bf00      	nop
  }

  return ret;
 8012644:	7bfb      	ldrb	r3, [r7, #15]
}
 8012646:	4618      	mov	r0, r3
 8012648:	3710      	adds	r7, #16
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
	...

08012650 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801265a:	2300      	movs	r3, #0
 801265c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801265e:	2300      	movs	r3, #0
 8012660:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012662:	2300      	movs	r3, #0
 8012664:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	885b      	ldrh	r3, [r3, #2]
 801266a:	0a1b      	lsrs	r3, r3, #8
 801266c:	b29b      	uxth	r3, r3
 801266e:	3b01      	subs	r3, #1
 8012670:	2b0e      	cmp	r3, #14
 8012672:	f200 8152 	bhi.w	801291a <USBD_GetDescriptor+0x2ca>
 8012676:	a201      	add	r2, pc, #4	; (adr r2, 801267c <USBD_GetDescriptor+0x2c>)
 8012678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801267c:	080126ed 	.word	0x080126ed
 8012680:	08012705 	.word	0x08012705
 8012684:	08012745 	.word	0x08012745
 8012688:	0801291b 	.word	0x0801291b
 801268c:	0801291b 	.word	0x0801291b
 8012690:	080128bb 	.word	0x080128bb
 8012694:	080128e7 	.word	0x080128e7
 8012698:	0801291b 	.word	0x0801291b
 801269c:	0801291b 	.word	0x0801291b
 80126a0:	0801291b 	.word	0x0801291b
 80126a4:	0801291b 	.word	0x0801291b
 80126a8:	0801291b 	.word	0x0801291b
 80126ac:	0801291b 	.word	0x0801291b
 80126b0:	0801291b 	.word	0x0801291b
 80126b4:	080126b9 	.word	0x080126b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126be:	69db      	ldr	r3, [r3, #28]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d00b      	beq.n	80126dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126ca:	69db      	ldr	r3, [r3, #28]
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	7c12      	ldrb	r2, [r2, #16]
 80126d0:	f107 0108 	add.w	r1, r7, #8
 80126d4:	4610      	mov	r0, r2
 80126d6:	4798      	blx	r3
 80126d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80126da:	e126      	b.n	801292a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80126dc:	6839      	ldr	r1, [r7, #0]
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 fb0e 	bl	8012d00 <USBD_CtlError>
        err++;
 80126e4:	7afb      	ldrb	r3, [r7, #11]
 80126e6:	3301      	adds	r3, #1
 80126e8:	72fb      	strb	r3, [r7, #11]
      break;
 80126ea:	e11e      	b.n	801292a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	7c12      	ldrb	r2, [r2, #16]
 80126f8:	f107 0108 	add.w	r1, r7, #8
 80126fc:	4610      	mov	r0, r2
 80126fe:	4798      	blx	r3
 8012700:	60f8      	str	r0, [r7, #12]
      break;
 8012702:	e112      	b.n	801292a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	7c1b      	ldrb	r3, [r3, #16]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d10d      	bne.n	8012728 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012714:	f107 0208 	add.w	r2, r7, #8
 8012718:	4610      	mov	r0, r2
 801271a:	4798      	blx	r3
 801271c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	3301      	adds	r3, #1
 8012722:	2202      	movs	r2, #2
 8012724:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012726:	e100      	b.n	801292a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012730:	f107 0208 	add.w	r2, r7, #8
 8012734:	4610      	mov	r0, r2
 8012736:	4798      	blx	r3
 8012738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	3301      	adds	r3, #1
 801273e:	2202      	movs	r2, #2
 8012740:	701a      	strb	r2, [r3, #0]
      break;
 8012742:	e0f2      	b.n	801292a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	885b      	ldrh	r3, [r3, #2]
 8012748:	b2db      	uxtb	r3, r3
 801274a:	2b05      	cmp	r3, #5
 801274c:	f200 80ac 	bhi.w	80128a8 <USBD_GetDescriptor+0x258>
 8012750:	a201      	add	r2, pc, #4	; (adr r2, 8012758 <USBD_GetDescriptor+0x108>)
 8012752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012756:	bf00      	nop
 8012758:	08012771 	.word	0x08012771
 801275c:	080127a5 	.word	0x080127a5
 8012760:	080127d9 	.word	0x080127d9
 8012764:	0801280d 	.word	0x0801280d
 8012768:	08012841 	.word	0x08012841
 801276c:	08012875 	.word	0x08012875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00b      	beq.n	8012794 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	7c12      	ldrb	r2, [r2, #16]
 8012788:	f107 0108 	add.w	r1, r7, #8
 801278c:	4610      	mov	r0, r2
 801278e:	4798      	blx	r3
 8012790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012792:	e091      	b.n	80128b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012794:	6839      	ldr	r1, [r7, #0]
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 fab2 	bl	8012d00 <USBD_CtlError>
            err++;
 801279c:	7afb      	ldrb	r3, [r7, #11]
 801279e:	3301      	adds	r3, #1
 80127a0:	72fb      	strb	r3, [r7, #11]
          break;
 80127a2:	e089      	b.n	80128b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127aa:	689b      	ldr	r3, [r3, #8]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d00b      	beq.n	80127c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127b6:	689b      	ldr	r3, [r3, #8]
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	7c12      	ldrb	r2, [r2, #16]
 80127bc:	f107 0108 	add.w	r1, r7, #8
 80127c0:	4610      	mov	r0, r2
 80127c2:	4798      	blx	r3
 80127c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127c6:	e077      	b.n	80128b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80127c8:	6839      	ldr	r1, [r7, #0]
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 fa98 	bl	8012d00 <USBD_CtlError>
            err++;
 80127d0:	7afb      	ldrb	r3, [r7, #11]
 80127d2:	3301      	adds	r3, #1
 80127d4:	72fb      	strb	r3, [r7, #11]
          break;
 80127d6:	e06f      	b.n	80128b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d00b      	beq.n	80127fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	7c12      	ldrb	r2, [r2, #16]
 80127f0:	f107 0108 	add.w	r1, r7, #8
 80127f4:	4610      	mov	r0, r2
 80127f6:	4798      	blx	r3
 80127f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127fa:	e05d      	b.n	80128b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80127fc:	6839      	ldr	r1, [r7, #0]
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f000 fa7e 	bl	8012d00 <USBD_CtlError>
            err++;
 8012804:	7afb      	ldrb	r3, [r7, #11]
 8012806:	3301      	adds	r3, #1
 8012808:	72fb      	strb	r3, [r7, #11]
          break;
 801280a:	e055      	b.n	80128b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d00b      	beq.n	8012830 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801281e:	691b      	ldr	r3, [r3, #16]
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	7c12      	ldrb	r2, [r2, #16]
 8012824:	f107 0108 	add.w	r1, r7, #8
 8012828:	4610      	mov	r0, r2
 801282a:	4798      	blx	r3
 801282c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801282e:	e043      	b.n	80128b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012830:	6839      	ldr	r1, [r7, #0]
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 fa64 	bl	8012d00 <USBD_CtlError>
            err++;
 8012838:	7afb      	ldrb	r3, [r7, #11]
 801283a:	3301      	adds	r3, #1
 801283c:	72fb      	strb	r3, [r7, #11]
          break;
 801283e:	e03b      	b.n	80128b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012846:	695b      	ldr	r3, [r3, #20]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d00b      	beq.n	8012864 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012852:	695b      	ldr	r3, [r3, #20]
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	7c12      	ldrb	r2, [r2, #16]
 8012858:	f107 0108 	add.w	r1, r7, #8
 801285c:	4610      	mov	r0, r2
 801285e:	4798      	blx	r3
 8012860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012862:	e029      	b.n	80128b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012864:	6839      	ldr	r1, [r7, #0]
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f000 fa4a 	bl	8012d00 <USBD_CtlError>
            err++;
 801286c:	7afb      	ldrb	r3, [r7, #11]
 801286e:	3301      	adds	r3, #1
 8012870:	72fb      	strb	r3, [r7, #11]
          break;
 8012872:	e021      	b.n	80128b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801287a:	699b      	ldr	r3, [r3, #24]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d00b      	beq.n	8012898 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012886:	699b      	ldr	r3, [r3, #24]
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	7c12      	ldrb	r2, [r2, #16]
 801288c:	f107 0108 	add.w	r1, r7, #8
 8012890:	4610      	mov	r0, r2
 8012892:	4798      	blx	r3
 8012894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012896:	e00f      	b.n	80128b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012898:	6839      	ldr	r1, [r7, #0]
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f000 fa30 	bl	8012d00 <USBD_CtlError>
            err++;
 80128a0:	7afb      	ldrb	r3, [r7, #11]
 80128a2:	3301      	adds	r3, #1
 80128a4:	72fb      	strb	r3, [r7, #11]
          break;
 80128a6:	e007      	b.n	80128b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80128a8:	6839      	ldr	r1, [r7, #0]
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fa28 	bl	8012d00 <USBD_CtlError>
          err++;
 80128b0:	7afb      	ldrb	r3, [r7, #11]
 80128b2:	3301      	adds	r3, #1
 80128b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80128b6:	bf00      	nop
      }
      break;
 80128b8:	e037      	b.n	801292a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	7c1b      	ldrb	r3, [r3, #16]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d109      	bne.n	80128d6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ca:	f107 0208 	add.w	r2, r7, #8
 80128ce:	4610      	mov	r0, r2
 80128d0:	4798      	blx	r3
 80128d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80128d4:	e029      	b.n	801292a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80128d6:	6839      	ldr	r1, [r7, #0]
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 fa11 	bl	8012d00 <USBD_CtlError>
        err++;
 80128de:	7afb      	ldrb	r3, [r7, #11]
 80128e0:	3301      	adds	r3, #1
 80128e2:	72fb      	strb	r3, [r7, #11]
      break;
 80128e4:	e021      	b.n	801292a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	7c1b      	ldrb	r3, [r3, #16]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d10d      	bne.n	801290a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128f6:	f107 0208 	add.w	r2, r7, #8
 80128fa:	4610      	mov	r0, r2
 80128fc:	4798      	blx	r3
 80128fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	3301      	adds	r3, #1
 8012904:	2207      	movs	r2, #7
 8012906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012908:	e00f      	b.n	801292a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801290a:	6839      	ldr	r1, [r7, #0]
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f000 f9f7 	bl	8012d00 <USBD_CtlError>
        err++;
 8012912:	7afb      	ldrb	r3, [r7, #11]
 8012914:	3301      	adds	r3, #1
 8012916:	72fb      	strb	r3, [r7, #11]
      break;
 8012918:	e007      	b.n	801292a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801291a:	6839      	ldr	r1, [r7, #0]
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 f9ef 	bl	8012d00 <USBD_CtlError>
      err++;
 8012922:	7afb      	ldrb	r3, [r7, #11]
 8012924:	3301      	adds	r3, #1
 8012926:	72fb      	strb	r3, [r7, #11]
      break;
 8012928:	bf00      	nop
  }

  if (err != 0U)
 801292a:	7afb      	ldrb	r3, [r7, #11]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d11e      	bne.n	801296e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	88db      	ldrh	r3, [r3, #6]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d016      	beq.n	8012966 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012938:	893b      	ldrh	r3, [r7, #8]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d00e      	beq.n	801295c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	88da      	ldrh	r2, [r3, #6]
 8012942:	893b      	ldrh	r3, [r7, #8]
 8012944:	4293      	cmp	r3, r2
 8012946:	bf28      	it	cs
 8012948:	4613      	movcs	r3, r2
 801294a:	b29b      	uxth	r3, r3
 801294c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801294e:	893b      	ldrh	r3, [r7, #8]
 8012950:	461a      	mov	r2, r3
 8012952:	68f9      	ldr	r1, [r7, #12]
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f000 fa44 	bl	8012de2 <USBD_CtlSendData>
 801295a:	e009      	b.n	8012970 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801295c:	6839      	ldr	r1, [r7, #0]
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f000 f9ce 	bl	8012d00 <USBD_CtlError>
 8012964:	e004      	b.n	8012970 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f000 fa95 	bl	8012e96 <USBD_CtlSendStatus>
 801296c:	e000      	b.n	8012970 <USBD_GetDescriptor+0x320>
    return;
 801296e:	bf00      	nop
  }
}
 8012970:	3710      	adds	r7, #16
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop

08012978 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	889b      	ldrh	r3, [r3, #4]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d131      	bne.n	80129ee <USBD_SetAddress+0x76>
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	88db      	ldrh	r3, [r3, #6]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d12d      	bne.n	80129ee <USBD_SetAddress+0x76>
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	885b      	ldrh	r3, [r3, #2]
 8012996:	2b7f      	cmp	r3, #127	; 0x7f
 8012998:	d829      	bhi.n	80129ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	885b      	ldrh	r3, [r3, #2]
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	2b03      	cmp	r3, #3
 80129b0:	d104      	bne.n	80129bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80129b2:	6839      	ldr	r1, [r7, #0]
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 f9a3 	bl	8012d00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129ba:	e01d      	b.n	80129f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	7bfa      	ldrb	r2, [r7, #15]
 80129c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80129c4:	7bfb      	ldrb	r3, [r7, #15]
 80129c6:	4619      	mov	r1, r3
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 ff6f 	bl	80138ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 fa61 	bl	8012e96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80129d4:	7bfb      	ldrb	r3, [r7, #15]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d004      	beq.n	80129e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2202      	movs	r2, #2
 80129de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129e2:	e009      	b.n	80129f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2201      	movs	r2, #1
 80129e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129ec:	e004      	b.n	80129f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80129ee:	6839      	ldr	r1, [r7, #0]
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 f985 	bl	8012d00 <USBD_CtlError>
  }
}
 80129f6:	bf00      	nop
 80129f8:	bf00      	nop
 80129fa:	3710      	adds	r7, #16
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	885b      	ldrh	r3, [r3, #2]
 8012a12:	b2da      	uxtb	r2, r3
 8012a14:	4b4c      	ldr	r3, [pc, #304]	; (8012b48 <USBD_SetConfig+0x148>)
 8012a16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012a18:	4b4b      	ldr	r3, [pc, #300]	; (8012b48 <USBD_SetConfig+0x148>)
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d905      	bls.n	8012a2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 f96c 	bl	8012d00 <USBD_CtlError>
    return USBD_FAIL;
 8012a28:	2303      	movs	r3, #3
 8012a2a:	e088      	b.n	8012b3e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	2b02      	cmp	r3, #2
 8012a36:	d002      	beq.n	8012a3e <USBD_SetConfig+0x3e>
 8012a38:	2b03      	cmp	r3, #3
 8012a3a:	d025      	beq.n	8012a88 <USBD_SetConfig+0x88>
 8012a3c:	e071      	b.n	8012b22 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012a3e:	4b42      	ldr	r3, [pc, #264]	; (8012b48 <USBD_SetConfig+0x148>)
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d01c      	beq.n	8012a80 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012a46:	4b40      	ldr	r3, [pc, #256]	; (8012b48 <USBD_SetConfig+0x148>)
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	461a      	mov	r2, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a50:	4b3d      	ldr	r3, [pc, #244]	; (8012b48 <USBD_SetConfig+0x148>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	4619      	mov	r1, r3
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7ff f91e 	bl	8011c98 <USBD_SetClassConfig>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012a60:	7bfb      	ldrb	r3, [r7, #15]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d004      	beq.n	8012a70 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012a66:	6839      	ldr	r1, [r7, #0]
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f000 f949 	bl	8012d00 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a6e:	e065      	b.n	8012b3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 fa10 	bl	8012e96 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2203      	movs	r2, #3
 8012a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012a7e:	e05d      	b.n	8012b3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f000 fa08 	bl	8012e96 <USBD_CtlSendStatus>
      break;
 8012a86:	e059      	b.n	8012b3c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012a88:	4b2f      	ldr	r3, [pc, #188]	; (8012b48 <USBD_SetConfig+0x148>)
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d112      	bne.n	8012ab6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2202      	movs	r2, #2
 8012a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012a98:	4b2b      	ldr	r3, [pc, #172]	; (8012b48 <USBD_SetConfig+0x148>)
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012aa2:	4b29      	ldr	r3, [pc, #164]	; (8012b48 <USBD_SetConfig+0x148>)
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7ff f911 	bl	8011cd0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 f9f1 	bl	8012e96 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012ab4:	e042      	b.n	8012b3c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012ab6:	4b24      	ldr	r3, [pc, #144]	; (8012b48 <USBD_SetConfig+0x148>)
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	461a      	mov	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d02a      	beq.n	8012b1a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	4619      	mov	r1, r3
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7ff f8ff 	bl	8011cd0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012ad2:	4b1d      	ldr	r3, [pc, #116]	; (8012b48 <USBD_SetConfig+0x148>)
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012adc:	4b1a      	ldr	r3, [pc, #104]	; (8012b48 <USBD_SetConfig+0x148>)
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7ff f8d8 	bl	8011c98 <USBD_SetClassConfig>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012aec:	7bfb      	ldrb	r3, [r7, #15]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00f      	beq.n	8012b12 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012af2:	6839      	ldr	r1, [r7, #0]
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f000 f903 	bl	8012d00 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	4619      	mov	r1, r3
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f7ff f8e4 	bl	8011cd0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2202      	movs	r2, #2
 8012b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012b10:	e014      	b.n	8012b3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f000 f9bf 	bl	8012e96 <USBD_CtlSendStatus>
      break;
 8012b18:	e010      	b.n	8012b3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 f9bb 	bl	8012e96 <USBD_CtlSendStatus>
      break;
 8012b20:	e00c      	b.n	8012b3c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012b22:	6839      	ldr	r1, [r7, #0]
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f000 f8eb 	bl	8012d00 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b2a:	4b07      	ldr	r3, [pc, #28]	; (8012b48 <USBD_SetConfig+0x148>)
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	4619      	mov	r1, r3
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7ff f8cd 	bl	8011cd0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012b36:	2303      	movs	r3, #3
 8012b38:	73fb      	strb	r3, [r7, #15]
      break;
 8012b3a:	bf00      	nop
  }

  return ret;
 8012b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3710      	adds	r7, #16
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	2001cfec 	.word	0x2001cfec

08012b4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b082      	sub	sp, #8
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
 8012b54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	88db      	ldrh	r3, [r3, #6]
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d004      	beq.n	8012b68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012b5e:	6839      	ldr	r1, [r7, #0]
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 f8cd 	bl	8012d00 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012b66:	e023      	b.n	8012bb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	2b02      	cmp	r3, #2
 8012b72:	dc02      	bgt.n	8012b7a <USBD_GetConfig+0x2e>
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	dc03      	bgt.n	8012b80 <USBD_GetConfig+0x34>
 8012b78:	e015      	b.n	8012ba6 <USBD_GetConfig+0x5a>
 8012b7a:	2b03      	cmp	r3, #3
 8012b7c:	d00b      	beq.n	8012b96 <USBD_GetConfig+0x4a>
 8012b7e:	e012      	b.n	8012ba6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	3308      	adds	r3, #8
 8012b8a:	2201      	movs	r2, #1
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f000 f927 	bl	8012de2 <USBD_CtlSendData>
        break;
 8012b94:	e00c      	b.n	8012bb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	3304      	adds	r3, #4
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f000 f91f 	bl	8012de2 <USBD_CtlSendData>
        break;
 8012ba4:	e004      	b.n	8012bb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012ba6:	6839      	ldr	r1, [r7, #0]
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f000 f8a9 	bl	8012d00 <USBD_CtlError>
        break;
 8012bae:	bf00      	nop
}
 8012bb0:	bf00      	nop
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	2b02      	cmp	r3, #2
 8012bce:	d81e      	bhi.n	8012c0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	88db      	ldrh	r3, [r3, #6]
 8012bd4:	2b02      	cmp	r3, #2
 8012bd6:	d004      	beq.n	8012be2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012bd8:	6839      	ldr	r1, [r7, #0]
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f000 f890 	bl	8012d00 <USBD_CtlError>
        break;
 8012be0:	e01a      	b.n	8012c18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2201      	movs	r2, #1
 8012be6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d005      	beq.n	8012bfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	68db      	ldr	r3, [r3, #12]
 8012bf6:	f043 0202 	orr.w	r2, r3, #2
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	330c      	adds	r3, #12
 8012c02:	2202      	movs	r2, #2
 8012c04:	4619      	mov	r1, r3
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 f8eb 	bl	8012de2 <USBD_CtlSendData>
      break;
 8012c0c:	e004      	b.n	8012c18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012c0e:	6839      	ldr	r1, [r7, #0]
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f000 f875 	bl	8012d00 <USBD_CtlError>
      break;
 8012c16:	bf00      	nop
  }
}
 8012c18:	bf00      	nop
 8012c1a:	3708      	adds	r7, #8
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	885b      	ldrh	r3, [r3, #2]
 8012c2e:	2b01      	cmp	r3, #1
 8012c30:	d106      	bne.n	8012c40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2201      	movs	r2, #1
 8012c36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f000 f92b 	bl	8012e96 <USBD_CtlSendStatus>
  }
}
 8012c40:	bf00      	nop
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c58:	b2db      	uxtb	r3, r3
 8012c5a:	3b01      	subs	r3, #1
 8012c5c:	2b02      	cmp	r3, #2
 8012c5e:	d80b      	bhi.n	8012c78 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	885b      	ldrh	r3, [r3, #2]
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d10c      	bne.n	8012c82 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f000 f910 	bl	8012e96 <USBD_CtlSendStatus>
      }
      break;
 8012c76:	e004      	b.n	8012c82 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012c78:	6839      	ldr	r1, [r7, #0]
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f000 f840 	bl	8012d00 <USBD_CtlError>
      break;
 8012c80:	e000      	b.n	8012c84 <USBD_ClrFeature+0x3c>
      break;
 8012c82:	bf00      	nop
  }
}
 8012c84:	bf00      	nop
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	781a      	ldrb	r2, [r3, #0]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	781a      	ldrb	r2, [r3, #0]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f7ff fa91 	bl	80121de <SWAPBYTE>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	3301      	adds	r3, #1
 8012cce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012cd0:	68f8      	ldr	r0, [r7, #12]
 8012cd2:	f7ff fa84 	bl	80121de <SWAPBYTE>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	461a      	mov	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012cea:	68f8      	ldr	r0, [r7, #12]
 8012cec:	f7ff fa77 	bl	80121de <SWAPBYTE>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	80da      	strh	r2, [r3, #6]
}
 8012cf8:	bf00      	nop
 8012cfa:	3710      	adds	r7, #16
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d0a:	2180      	movs	r1, #128	; 0x80
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f000 fd35 	bl	801377c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012d12:	2100      	movs	r1, #0
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f000 fd31 	bl	801377c <USBD_LL_StallEP>
}
 8012d1a:	bf00      	nop
 8012d1c:	3708      	adds	r7, #8
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}

08012d22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012d22:	b580      	push	{r7, lr}
 8012d24:	b086      	sub	sp, #24
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	60f8      	str	r0, [r7, #12]
 8012d2a:	60b9      	str	r1, [r7, #8]
 8012d2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d036      	beq.n	8012da6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012d3c:	6938      	ldr	r0, [r7, #16]
 8012d3e:	f000 f836 	bl	8012dae <USBD_GetLen>
 8012d42:	4603      	mov	r3, r0
 8012d44:	3301      	adds	r3, #1
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	005b      	lsls	r3, r3, #1
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012d50:	7dfb      	ldrb	r3, [r7, #23]
 8012d52:	68ba      	ldr	r2, [r7, #8]
 8012d54:	4413      	add	r3, r2
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	7812      	ldrb	r2, [r2, #0]
 8012d5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012d62:	7dfb      	ldrb	r3, [r7, #23]
 8012d64:	68ba      	ldr	r2, [r7, #8]
 8012d66:	4413      	add	r3, r2
 8012d68:	2203      	movs	r2, #3
 8012d6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d6c:	7dfb      	ldrb	r3, [r7, #23]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012d72:	e013      	b.n	8012d9c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	4413      	add	r3, r2
 8012d7a:	693a      	ldr	r2, [r7, #16]
 8012d7c:	7812      	ldrb	r2, [r2, #0]
 8012d7e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	3301      	adds	r3, #1
 8012d84:	613b      	str	r3, [r7, #16]
    idx++;
 8012d86:	7dfb      	ldrb	r3, [r7, #23]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012d8c:	7dfb      	ldrb	r3, [r7, #23]
 8012d8e:	68ba      	ldr	r2, [r7, #8]
 8012d90:	4413      	add	r3, r2
 8012d92:	2200      	movs	r2, #0
 8012d94:	701a      	strb	r2, [r3, #0]
    idx++;
 8012d96:	7dfb      	ldrb	r3, [r7, #23]
 8012d98:	3301      	adds	r3, #1
 8012d9a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1e7      	bne.n	8012d74 <USBD_GetString+0x52>
 8012da4:	e000      	b.n	8012da8 <USBD_GetString+0x86>
    return;
 8012da6:	bf00      	nop
  }
}
 8012da8:	3718      	adds	r7, #24
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}

08012dae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012dae:	b480      	push	{r7}
 8012db0:	b085      	sub	sp, #20
 8012db2:	af00      	add	r7, sp, #0
 8012db4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012db6:	2300      	movs	r3, #0
 8012db8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012dbe:	e005      	b.n	8012dcc <USBD_GetLen+0x1e>
  {
    len++;
 8012dc0:	7bfb      	ldrb	r3, [r7, #15]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d1f5      	bne.n	8012dc0 <USBD_GetLen+0x12>
  }

  return len;
 8012dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3714      	adds	r7, #20
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr

08012de2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b084      	sub	sp, #16
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	60f8      	str	r0, [r7, #12]
 8012dea:	60b9      	str	r1, [r7, #8]
 8012dec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2202      	movs	r2, #2
 8012df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	687a      	ldr	r2, [r7, #4]
 8012dfa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	68ba      	ldr	r2, [r7, #8]
 8012e06:	2100      	movs	r1, #0
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f000 fd85 	bl	8013918 <USBD_LL_Transmit>

  return USBD_OK;
 8012e0e:	2300      	movs	r3, #0
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3710      	adds	r7, #16
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}

08012e18 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	60f8      	str	r0, [r7, #12]
 8012e20:	60b9      	str	r1, [r7, #8]
 8012e22:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	68ba      	ldr	r2, [r7, #8]
 8012e28:	2100      	movs	r1, #0
 8012e2a:	68f8      	ldr	r0, [r7, #12]
 8012e2c:	f000 fd74 	bl	8013918 <USBD_LL_Transmit>

  return USBD_OK;
 8012e30:	2300      	movs	r3, #0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3710      	adds	r7, #16
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}

08012e3a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012e3a:	b580      	push	{r7, lr}
 8012e3c:	b084      	sub	sp, #16
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	60f8      	str	r0, [r7, #12]
 8012e42:	60b9      	str	r1, [r7, #8]
 8012e44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2203      	movs	r2, #3
 8012e4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	68ba      	ldr	r2, [r7, #8]
 8012e62:	2100      	movs	r1, #0
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f000 fd8f 	bl	8013988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e6a:	2300      	movs	r3, #0
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3710      	adds	r7, #16
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}

08012e74 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	60f8      	str	r0, [r7, #12]
 8012e7c:	60b9      	str	r1, [r7, #8]
 8012e7e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	68ba      	ldr	r2, [r7, #8]
 8012e84:	2100      	movs	r1, #0
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f000 fd7e 	bl	8013988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e8c:	2300      	movs	r3, #0
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b082      	sub	sp, #8
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2204      	movs	r2, #4
 8012ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	2100      	movs	r1, #0
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 fd33 	bl	8013918 <USBD_LL_Transmit>

  return USBD_OK;
 8012eb2:	2300      	movs	r3, #0
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3708      	adds	r7, #8
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2205      	movs	r2, #5
 8012ec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012ecc:	2300      	movs	r3, #0
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f000 fd58 	bl	8013988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ed8:	2300      	movs	r3, #0
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3708      	adds	r7, #8
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}
	...

08012ee4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012ee8:	2200      	movs	r2, #0
 8012eea:	4912      	ldr	r1, [pc, #72]	; (8012f34 <MX_USB_DEVICE_Init+0x50>)
 8012eec:	4812      	ldr	r0, [pc, #72]	; (8012f38 <MX_USB_DEVICE_Init+0x54>)
 8012eee:	f7fe fe65 	bl	8011bbc <USBD_Init>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d001      	beq.n	8012efc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012ef8:	f7ee fba2 	bl	8001640 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012efc:	490f      	ldr	r1, [pc, #60]	; (8012f3c <MX_USB_DEVICE_Init+0x58>)
 8012efe:	480e      	ldr	r0, [pc, #56]	; (8012f38 <MX_USB_DEVICE_Init+0x54>)
 8012f00:	f7fe fe8c 	bl	8011c1c <USBD_RegisterClass>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d001      	beq.n	8012f0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012f0a:	f7ee fb99 	bl	8001640 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012f0e:	490c      	ldr	r1, [pc, #48]	; (8012f40 <MX_USB_DEVICE_Init+0x5c>)
 8012f10:	4809      	ldr	r0, [pc, #36]	; (8012f38 <MX_USB_DEVICE_Init+0x54>)
 8012f12:	f7fe fddd 	bl	8011ad0 <USBD_CDC_RegisterInterface>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d001      	beq.n	8012f20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012f1c:	f7ee fb90 	bl	8001640 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012f20:	4805      	ldr	r0, [pc, #20]	; (8012f38 <MX_USB_DEVICE_Init+0x54>)
 8012f22:	f7fe fea2 	bl	8011c6a <USBD_Start>
 8012f26:	4603      	mov	r3, r0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d001      	beq.n	8012f30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012f2c:	f7ee fb88 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012f30:	bf00      	nop
 8012f32:	bd80      	pop	{r7, pc}
 8012f34:	2001c2bc 	.word	0x2001c2bc
 8012f38:	2001cff0 	.word	0x2001cff0
 8012f3c:	2001c1a4 	.word	0x2001c1a4
 8012f40:	2001c2a8 	.word	0x2001c2a8

08012f44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012f48:	2200      	movs	r2, #0
 8012f4a:	4905      	ldr	r1, [pc, #20]	; (8012f60 <CDC_Init_FS+0x1c>)
 8012f4c:	4805      	ldr	r0, [pc, #20]	; (8012f64 <CDC_Init_FS+0x20>)
 8012f4e:	f7fe fdd4 	bl	8011afa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012f52:	4905      	ldr	r1, [pc, #20]	; (8012f68 <CDC_Init_FS+0x24>)
 8012f54:	4803      	ldr	r0, [pc, #12]	; (8012f64 <CDC_Init_FS+0x20>)
 8012f56:	f7fe fdee 	bl	8011b36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012f5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	2001dac0 	.word	0x2001dac0
 8012f64:	2001cff0 	.word	0x2001cff0
 8012f68:	2001d2c0 	.word	0x2001d2c0

08012f6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012f70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	46bd      	mov	sp, r7
 8012f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7a:	4770      	bx	lr

08012f7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b083      	sub	sp, #12
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	4603      	mov	r3, r0
 8012f84:	6039      	str	r1, [r7, #0]
 8012f86:	71fb      	strb	r3, [r7, #7]
 8012f88:	4613      	mov	r3, r2
 8012f8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012f8c:	79fb      	ldrb	r3, [r7, #7]
 8012f8e:	2b23      	cmp	r3, #35	; 0x23
 8012f90:	d84a      	bhi.n	8013028 <CDC_Control_FS+0xac>
 8012f92:	a201      	add	r2, pc, #4	; (adr r2, 8012f98 <CDC_Control_FS+0x1c>)
 8012f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f98:	08013029 	.word	0x08013029
 8012f9c:	08013029 	.word	0x08013029
 8012fa0:	08013029 	.word	0x08013029
 8012fa4:	08013029 	.word	0x08013029
 8012fa8:	08013029 	.word	0x08013029
 8012fac:	08013029 	.word	0x08013029
 8012fb0:	08013029 	.word	0x08013029
 8012fb4:	08013029 	.word	0x08013029
 8012fb8:	08013029 	.word	0x08013029
 8012fbc:	08013029 	.word	0x08013029
 8012fc0:	08013029 	.word	0x08013029
 8012fc4:	08013029 	.word	0x08013029
 8012fc8:	08013029 	.word	0x08013029
 8012fcc:	08013029 	.word	0x08013029
 8012fd0:	08013029 	.word	0x08013029
 8012fd4:	08013029 	.word	0x08013029
 8012fd8:	08013029 	.word	0x08013029
 8012fdc:	08013029 	.word	0x08013029
 8012fe0:	08013029 	.word	0x08013029
 8012fe4:	08013029 	.word	0x08013029
 8012fe8:	08013029 	.word	0x08013029
 8012fec:	08013029 	.word	0x08013029
 8012ff0:	08013029 	.word	0x08013029
 8012ff4:	08013029 	.word	0x08013029
 8012ff8:	08013029 	.word	0x08013029
 8012ffc:	08013029 	.word	0x08013029
 8013000:	08013029 	.word	0x08013029
 8013004:	08013029 	.word	0x08013029
 8013008:	08013029 	.word	0x08013029
 801300c:	08013029 	.word	0x08013029
 8013010:	08013029 	.word	0x08013029
 8013014:	08013029 	.word	0x08013029
 8013018:	08013029 	.word	0x08013029
 801301c:	08013029 	.word	0x08013029
 8013020:	08013029 	.word	0x08013029
 8013024:	08013029 	.word	0x08013029
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013028:	bf00      	nop
  }

  return (USBD_OK);
 801302a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801302c:	4618      	mov	r0, r3
 801302e:	370c      	adds	r7, #12
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013042:	6879      	ldr	r1, [r7, #4]
 8013044:	4805      	ldr	r0, [pc, #20]	; (801305c <CDC_Receive_FS+0x24>)
 8013046:	f7fe fd76 	bl	8011b36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801304a:	4804      	ldr	r0, [pc, #16]	; (801305c <CDC_Receive_FS+0x24>)
 801304c:	f7fe fd8c 	bl	8011b68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013050:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013052:	4618      	mov	r0, r3
 8013054:	3708      	adds	r7, #8
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}
 801305a:	bf00      	nop
 801305c:	2001cff0 	.word	0x2001cff0

08013060 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013060:	b480      	push	{r7}
 8013062:	b087      	sub	sp, #28
 8013064:	af00      	add	r7, sp, #0
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	4613      	mov	r3, r2
 801306c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801306e:	2300      	movs	r3, #0
 8013070:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013076:	4618      	mov	r0, r3
 8013078:	371c      	adds	r7, #28
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
	...

08013084 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	6039      	str	r1, [r7, #0]
 801308e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	2212      	movs	r2, #18
 8013094:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013096:	4b03      	ldr	r3, [pc, #12]	; (80130a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013098:	4618      	mov	r0, r3
 801309a:	370c      	adds	r7, #12
 801309c:	46bd      	mov	sp, r7
 801309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a2:	4770      	bx	lr
 80130a4:	2001c2dc 	.word	0x2001c2dc

080130a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b083      	sub	sp, #12
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	4603      	mov	r3, r0
 80130b0:	6039      	str	r1, [r7, #0]
 80130b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	2204      	movs	r2, #4
 80130b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80130ba:	4b03      	ldr	r3, [pc, #12]	; (80130c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80130bc:	4618      	mov	r0, r3
 80130be:	370c      	adds	r7, #12
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr
 80130c8:	2001c2fc 	.word	0x2001c2fc

080130cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	4603      	mov	r3, r0
 80130d4:	6039      	str	r1, [r7, #0]
 80130d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80130d8:	79fb      	ldrb	r3, [r7, #7]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d105      	bne.n	80130ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80130de:	683a      	ldr	r2, [r7, #0]
 80130e0:	4907      	ldr	r1, [pc, #28]	; (8013100 <USBD_FS_ProductStrDescriptor+0x34>)
 80130e2:	4808      	ldr	r0, [pc, #32]	; (8013104 <USBD_FS_ProductStrDescriptor+0x38>)
 80130e4:	f7ff fe1d 	bl	8012d22 <USBD_GetString>
 80130e8:	e004      	b.n	80130f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80130ea:	683a      	ldr	r2, [r7, #0]
 80130ec:	4904      	ldr	r1, [pc, #16]	; (8013100 <USBD_FS_ProductStrDescriptor+0x34>)
 80130ee:	4805      	ldr	r0, [pc, #20]	; (8013104 <USBD_FS_ProductStrDescriptor+0x38>)
 80130f0:	f7ff fe17 	bl	8012d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 80130f4:	4b02      	ldr	r3, [pc, #8]	; (8013100 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3708      	adds	r7, #8
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	2001e2c0 	.word	0x2001e2c0
 8013104:	08014aa8 	.word	0x08014aa8

08013108 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b082      	sub	sp, #8
 801310c:	af00      	add	r7, sp, #0
 801310e:	4603      	mov	r3, r0
 8013110:	6039      	str	r1, [r7, #0]
 8013112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013114:	683a      	ldr	r2, [r7, #0]
 8013116:	4904      	ldr	r1, [pc, #16]	; (8013128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013118:	4804      	ldr	r0, [pc, #16]	; (801312c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801311a:	f7ff fe02 	bl	8012d22 <USBD_GetString>
  return USBD_StrDesc;
 801311e:	4b02      	ldr	r3, [pc, #8]	; (8013128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013120:	4618      	mov	r0, r3
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}
 8013128:	2001e2c0 	.word	0x2001e2c0
 801312c:	08014ac0 	.word	0x08014ac0

08013130 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	4603      	mov	r3, r0
 8013138:	6039      	str	r1, [r7, #0]
 801313a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	221a      	movs	r2, #26
 8013140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013142:	f000 f855 	bl	80131f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013146:	4b02      	ldr	r3, [pc, #8]	; (8013150 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	2001c300 	.word	0x2001c300

08013154 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	4603      	mov	r3, r0
 801315c:	6039      	str	r1, [r7, #0]
 801315e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013160:	79fb      	ldrb	r3, [r7, #7]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d105      	bne.n	8013172 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013166:	683a      	ldr	r2, [r7, #0]
 8013168:	4907      	ldr	r1, [pc, #28]	; (8013188 <USBD_FS_ConfigStrDescriptor+0x34>)
 801316a:	4808      	ldr	r0, [pc, #32]	; (801318c <USBD_FS_ConfigStrDescriptor+0x38>)
 801316c:	f7ff fdd9 	bl	8012d22 <USBD_GetString>
 8013170:	e004      	b.n	801317c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013172:	683a      	ldr	r2, [r7, #0]
 8013174:	4904      	ldr	r1, [pc, #16]	; (8013188 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013176:	4805      	ldr	r0, [pc, #20]	; (801318c <USBD_FS_ConfigStrDescriptor+0x38>)
 8013178:	f7ff fdd3 	bl	8012d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 801317c:	4b02      	ldr	r3, [pc, #8]	; (8013188 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801317e:	4618      	mov	r0, r3
 8013180:	3708      	adds	r7, #8
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	2001e2c0 	.word	0x2001e2c0
 801318c:	08014ad4 	.word	0x08014ad4

08013190 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	4603      	mov	r3, r0
 8013198:	6039      	str	r1, [r7, #0]
 801319a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801319c:	79fb      	ldrb	r3, [r7, #7]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d105      	bne.n	80131ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80131a2:	683a      	ldr	r2, [r7, #0]
 80131a4:	4907      	ldr	r1, [pc, #28]	; (80131c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80131a6:	4808      	ldr	r0, [pc, #32]	; (80131c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80131a8:	f7ff fdbb 	bl	8012d22 <USBD_GetString>
 80131ac:	e004      	b.n	80131b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80131ae:	683a      	ldr	r2, [r7, #0]
 80131b0:	4904      	ldr	r1, [pc, #16]	; (80131c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80131b2:	4805      	ldr	r0, [pc, #20]	; (80131c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80131b4:	f7ff fdb5 	bl	8012d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 80131b8:	4b02      	ldr	r3, [pc, #8]	; (80131c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	2001e2c0 	.word	0x2001e2c0
 80131c8:	08014ae0 	.word	0x08014ae0

080131cc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	4603      	mov	r3, r0
 80131d4:	6039      	str	r1, [r7, #0]
 80131d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	220c      	movs	r2, #12
 80131dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80131de:	4b03      	ldr	r3, [pc, #12]	; (80131ec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr
 80131ec:	2001c2f0 	.word	0x2001c2f0

080131f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80131f6:	4b0f      	ldr	r3, [pc, #60]	; (8013234 <Get_SerialNum+0x44>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80131fc:	4b0e      	ldr	r3, [pc, #56]	; (8013238 <Get_SerialNum+0x48>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013202:	4b0e      	ldr	r3, [pc, #56]	; (801323c <Get_SerialNum+0x4c>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013208:	68fa      	ldr	r2, [r7, #12]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	4413      	add	r3, r2
 801320e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d009      	beq.n	801322a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013216:	2208      	movs	r2, #8
 8013218:	4909      	ldr	r1, [pc, #36]	; (8013240 <Get_SerialNum+0x50>)
 801321a:	68f8      	ldr	r0, [r7, #12]
 801321c:	f000 f814 	bl	8013248 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013220:	2204      	movs	r2, #4
 8013222:	4908      	ldr	r1, [pc, #32]	; (8013244 <Get_SerialNum+0x54>)
 8013224:	68b8      	ldr	r0, [r7, #8]
 8013226:	f000 f80f 	bl	8013248 <IntToUnicode>
  }
}
 801322a:	bf00      	nop
 801322c:	3710      	adds	r7, #16
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	1fff7590 	.word	0x1fff7590
 8013238:	1fff7594 	.word	0x1fff7594
 801323c:	1fff7598 	.word	0x1fff7598
 8013240:	2001c302 	.word	0x2001c302
 8013244:	2001c312 	.word	0x2001c312

08013248 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013248:	b480      	push	{r7}
 801324a:	b087      	sub	sp, #28
 801324c:	af00      	add	r7, sp, #0
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	60b9      	str	r1, [r7, #8]
 8013252:	4613      	mov	r3, r2
 8013254:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013256:	2300      	movs	r3, #0
 8013258:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801325a:	2300      	movs	r3, #0
 801325c:	75fb      	strb	r3, [r7, #23]
 801325e:	e027      	b.n	80132b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	0f1b      	lsrs	r3, r3, #28
 8013264:	2b09      	cmp	r3, #9
 8013266:	d80b      	bhi.n	8013280 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	0f1b      	lsrs	r3, r3, #28
 801326c:	b2da      	uxtb	r2, r3
 801326e:	7dfb      	ldrb	r3, [r7, #23]
 8013270:	005b      	lsls	r3, r3, #1
 8013272:	4619      	mov	r1, r3
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	440b      	add	r3, r1
 8013278:	3230      	adds	r2, #48	; 0x30
 801327a:	b2d2      	uxtb	r2, r2
 801327c:	701a      	strb	r2, [r3, #0]
 801327e:	e00a      	b.n	8013296 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	0f1b      	lsrs	r3, r3, #28
 8013284:	b2da      	uxtb	r2, r3
 8013286:	7dfb      	ldrb	r3, [r7, #23]
 8013288:	005b      	lsls	r3, r3, #1
 801328a:	4619      	mov	r1, r3
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	440b      	add	r3, r1
 8013290:	3237      	adds	r2, #55	; 0x37
 8013292:	b2d2      	uxtb	r2, r2
 8013294:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	011b      	lsls	r3, r3, #4
 801329a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801329c:	7dfb      	ldrb	r3, [r7, #23]
 801329e:	005b      	lsls	r3, r3, #1
 80132a0:	3301      	adds	r3, #1
 80132a2:	68ba      	ldr	r2, [r7, #8]
 80132a4:	4413      	add	r3, r2
 80132a6:	2200      	movs	r2, #0
 80132a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80132aa:	7dfb      	ldrb	r3, [r7, #23]
 80132ac:	3301      	adds	r3, #1
 80132ae:	75fb      	strb	r3, [r7, #23]
 80132b0:	7dfa      	ldrb	r2, [r7, #23]
 80132b2:	79fb      	ldrb	r3, [r7, #7]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d3d3      	bcc.n	8013260 <IntToUnicode+0x18>
  }
}
 80132b8:	bf00      	nop
 80132ba:	bf00      	nop
 80132bc:	371c      	adds	r7, #28
 80132be:	46bd      	mov	sp, r7
 80132c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c4:	4770      	bx	lr
	...

080132c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b08a      	sub	sp, #40	; 0x28
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132d0:	f107 0314 	add.w	r3, r7, #20
 80132d4:	2200      	movs	r2, #0
 80132d6:	601a      	str	r2, [r3, #0]
 80132d8:	605a      	str	r2, [r3, #4]
 80132da:	609a      	str	r2, [r3, #8]
 80132dc:	60da      	str	r2, [r3, #12]
 80132de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80132e8:	d14e      	bne.n	8013388 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80132ea:	4b29      	ldr	r3, [pc, #164]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 80132ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132ee:	4a28      	ldr	r2, [pc, #160]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 80132f0:	f043 0301 	orr.w	r3, r3, #1
 80132f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80132f6:	4b26      	ldr	r3, [pc, #152]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 80132f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132fa:	f003 0301 	and.w	r3, r3, #1
 80132fe:	613b      	str	r3, [r7, #16]
 8013300:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8013302:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8013306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013308:	2302      	movs	r3, #2
 801330a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801330c:	2300      	movs	r3, #0
 801330e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013310:	2303      	movs	r3, #3
 8013312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013314:	230a      	movs	r3, #10
 8013316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013318:	f107 0314 	add.w	r3, r7, #20
 801331c:	4619      	mov	r1, r3
 801331e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013322:	f7f5 f843 	bl	80083ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013326:	4b1a      	ldr	r3, [pc, #104]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 8013328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801332a:	4a19      	ldr	r2, [pc, #100]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 801332c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013332:	4b17      	ldr	r3, [pc, #92]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 8013334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801333a:	60fb      	str	r3, [r7, #12]
 801333c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801333e:	4b14      	ldr	r3, [pc, #80]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 8013340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013346:	2b00      	cmp	r3, #0
 8013348:	d114      	bne.n	8013374 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801334a:	4b11      	ldr	r3, [pc, #68]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 801334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801334e:	4a10      	ldr	r2, [pc, #64]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 8013350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013354:	6593      	str	r3, [r2, #88]	; 0x58
 8013356:	4b0e      	ldr	r3, [pc, #56]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 8013358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801335e:	60bb      	str	r3, [r7, #8]
 8013360:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8013362:	f7f7 fc31 	bl	800abc8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8013366:	4b0a      	ldr	r3, [pc, #40]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 8013368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801336a:	4a09      	ldr	r2, [pc, #36]	; (8013390 <HAL_PCD_MspInit+0xc8>)
 801336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013370:	6593      	str	r3, [r2, #88]	; 0x58
 8013372:	e001      	b.n	8013378 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8013374:	f7f7 fc28 	bl	800abc8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013378:	2200      	movs	r2, #0
 801337a:	2100      	movs	r1, #0
 801337c:	2043      	movs	r0, #67	; 0x43
 801337e:	f7f4 fc26 	bl	8007bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013382:	2043      	movs	r0, #67	; 0x43
 8013384:	f7f4 fc3f 	bl	8007c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013388:	bf00      	nop
 801338a:	3728      	adds	r7, #40	; 0x28
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	40021000 	.word	0x40021000

08013394 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80133a8:	4619      	mov	r1, r3
 80133aa:	4610      	mov	r0, r2
 80133ac:	f7fe fca8 	bl	8011d00 <USBD_LL_SetupStage>
}
 80133b0:	bf00      	nop
 80133b2:	3708      	adds	r7, #8
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	460b      	mov	r3, r1
 80133c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80133ca:	78fa      	ldrb	r2, [r7, #3]
 80133cc:	6879      	ldr	r1, [r7, #4]
 80133ce:	4613      	mov	r3, r2
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	4413      	add	r3, r2
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	440b      	add	r3, r1
 80133d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	78fb      	ldrb	r3, [r7, #3]
 80133e0:	4619      	mov	r1, r3
 80133e2:	f7fe fce2 	bl	8011daa <USBD_LL_DataOutStage>
}
 80133e6:	bf00      	nop
 80133e8:	3708      	adds	r7, #8
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133ee:	b580      	push	{r7, lr}
 80133f0:	b082      	sub	sp, #8
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
 80133f6:	460b      	mov	r3, r1
 80133f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013400:	78fa      	ldrb	r2, [r7, #3]
 8013402:	6879      	ldr	r1, [r7, #4]
 8013404:	4613      	mov	r3, r2
 8013406:	00db      	lsls	r3, r3, #3
 8013408:	4413      	add	r3, r2
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	440b      	add	r3, r1
 801340e:	334c      	adds	r3, #76	; 0x4c
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	78fb      	ldrb	r3, [r7, #3]
 8013414:	4619      	mov	r1, r3
 8013416:	f7fe fd2b 	bl	8011e70 <USBD_LL_DataInStage>
}
 801341a:	bf00      	nop
 801341c:	3708      	adds	r7, #8
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}

08013422 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013422:	b580      	push	{r7, lr}
 8013424:	b082      	sub	sp, #8
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013430:	4618      	mov	r0, r3
 8013432:	f7fe fe3f 	bl	80120b4 <USBD_LL_SOF>
}
 8013436:	bf00      	nop
 8013438:	3708      	adds	r7, #8
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}

0801343e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801343e:	b580      	push	{r7, lr}
 8013440:	b084      	sub	sp, #16
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013446:	2301      	movs	r3, #1
 8013448:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	68db      	ldr	r3, [r3, #12]
 801344e:	2b02      	cmp	r3, #2
 8013450:	d001      	beq.n	8013456 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013452:	f7ee f8f5 	bl	8001640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801345c:	7bfa      	ldrb	r2, [r7, #15]
 801345e:	4611      	mov	r1, r2
 8013460:	4618      	mov	r0, r3
 8013462:	f7fe fde9 	bl	8012038 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801346c:	4618      	mov	r0, r3
 801346e:	f7fe fd95 	bl	8011f9c <USBD_LL_Reset>
}
 8013472:	bf00      	nop
 8013474:	3710      	adds	r7, #16
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
	...

0801347c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	6812      	ldr	r2, [r2, #0]
 8013492:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013496:	f043 0301 	orr.w	r3, r3, #1
 801349a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7fe fdd8 	bl	8012058 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	6a1b      	ldr	r3, [r3, #32]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d005      	beq.n	80134bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80134b0:	4b04      	ldr	r3, [pc, #16]	; (80134c4 <HAL_PCD_SuspendCallback+0x48>)
 80134b2:	691b      	ldr	r3, [r3, #16]
 80134b4:	4a03      	ldr	r2, [pc, #12]	; (80134c4 <HAL_PCD_SuspendCallback+0x48>)
 80134b6:	f043 0306 	orr.w	r3, r3, #6
 80134ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80134bc:	bf00      	nop
 80134be:	3708      	adds	r7, #8
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	e000ed00 	.word	0xe000ed00

080134c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b082      	sub	sp, #8
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	687a      	ldr	r2, [r7, #4]
 80134dc:	6812      	ldr	r2, [r2, #0]
 80134de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80134e2:	f023 0301 	bic.w	r3, r3, #1
 80134e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6a1b      	ldr	r3, [r3, #32]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d007      	beq.n	8013500 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80134f0:	4b08      	ldr	r3, [pc, #32]	; (8013514 <HAL_PCD_ResumeCallback+0x4c>)
 80134f2:	691b      	ldr	r3, [r3, #16]
 80134f4:	4a07      	ldr	r2, [pc, #28]	; (8013514 <HAL_PCD_ResumeCallback+0x4c>)
 80134f6:	f023 0306 	bic.w	r3, r3, #6
 80134fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80134fc:	f000 faf6 	bl	8013aec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013506:	4618      	mov	r0, r3
 8013508:	f7fe fdbc 	bl	8012084 <USBD_LL_Resume>
}
 801350c:	bf00      	nop
 801350e:	3708      	adds	r7, #8
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	e000ed00 	.word	0xe000ed00

08013518 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	460b      	mov	r3, r1
 8013522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801352a:	78fa      	ldrb	r2, [r7, #3]
 801352c:	4611      	mov	r1, r2
 801352e:	4618      	mov	r0, r3
 8013530:	f7fe fe08 	bl	8012144 <USBD_LL_IsoOUTIncomplete>
}
 8013534:	bf00      	nop
 8013536:	3708      	adds	r7, #8
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}

0801353c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801354e:	78fa      	ldrb	r2, [r7, #3]
 8013550:	4611      	mov	r1, r2
 8013552:	4618      	mov	r0, r3
 8013554:	f7fe fdd0 	bl	80120f8 <USBD_LL_IsoINIncomplete>
}
 8013558:	bf00      	nop
 801355a:	3708      	adds	r7, #8
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801356e:	4618      	mov	r0, r3
 8013570:	f7fe fe0e 	bl	8012190 <USBD_LL_DevConnected>
}
 8013574:	bf00      	nop
 8013576:	3708      	adds	r7, #8
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801358a:	4618      	mov	r0, r3
 801358c:	f7fe fe0b 	bl	80121a6 <USBD_LL_DevDisconnected>
}
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	781b      	ldrb	r3, [r3, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d13c      	bne.n	8013622 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80135a8:	4a20      	ldr	r2, [pc, #128]	; (801362c <USBD_LL_Init+0x94>)
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	4a1e      	ldr	r2, [pc, #120]	; (801362c <USBD_LL_Init+0x94>)
 80135b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80135b8:	4b1c      	ldr	r3, [pc, #112]	; (801362c <USBD_LL_Init+0x94>)
 80135ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80135be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80135c0:	4b1a      	ldr	r3, [pc, #104]	; (801362c <USBD_LL_Init+0x94>)
 80135c2:	2206      	movs	r2, #6
 80135c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80135c6:	4b19      	ldr	r3, [pc, #100]	; (801362c <USBD_LL_Init+0x94>)
 80135c8:	2202      	movs	r2, #2
 80135ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80135cc:	4b17      	ldr	r3, [pc, #92]	; (801362c <USBD_LL_Init+0x94>)
 80135ce:	2202      	movs	r2, #2
 80135d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80135d2:	4b16      	ldr	r3, [pc, #88]	; (801362c <USBD_LL_Init+0x94>)
 80135d4:	2200      	movs	r2, #0
 80135d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80135d8:	4b14      	ldr	r3, [pc, #80]	; (801362c <USBD_LL_Init+0x94>)
 80135da:	2200      	movs	r2, #0
 80135dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80135de:	4b13      	ldr	r3, [pc, #76]	; (801362c <USBD_LL_Init+0x94>)
 80135e0:	2200      	movs	r2, #0
 80135e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80135e4:	4b11      	ldr	r3, [pc, #68]	; (801362c <USBD_LL_Init+0x94>)
 80135e6:	2200      	movs	r2, #0
 80135e8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80135ea:	4b10      	ldr	r3, [pc, #64]	; (801362c <USBD_LL_Init+0x94>)
 80135ec:	2200      	movs	r2, #0
 80135ee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80135f0:	4b0e      	ldr	r3, [pc, #56]	; (801362c <USBD_LL_Init+0x94>)
 80135f2:	2200      	movs	r2, #0
 80135f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80135f6:	480d      	ldr	r0, [pc, #52]	; (801362c <USBD_LL_Init+0x94>)
 80135f8:	f7f6 f8b3 	bl	8009762 <HAL_PCD_Init>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d001      	beq.n	8013606 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013602:	f7ee f81d 	bl	8001640 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013606:	2180      	movs	r1, #128	; 0x80
 8013608:	4808      	ldr	r0, [pc, #32]	; (801362c <USBD_LL_Init+0x94>)
 801360a:	f7f7 fa34 	bl	800aa76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801360e:	2240      	movs	r2, #64	; 0x40
 8013610:	2100      	movs	r1, #0
 8013612:	4806      	ldr	r0, [pc, #24]	; (801362c <USBD_LL_Init+0x94>)
 8013614:	f7f7 f9e8 	bl	800a9e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013618:	2280      	movs	r2, #128	; 0x80
 801361a:	2101      	movs	r1, #1
 801361c:	4803      	ldr	r0, [pc, #12]	; (801362c <USBD_LL_Init+0x94>)
 801361e:	f7f7 f9e3 	bl	800a9e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013622:	2300      	movs	r3, #0
}
 8013624:	4618      	mov	r0, r3
 8013626:	3708      	adds	r7, #8
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	2001e4c0 	.word	0x2001e4c0

08013630 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801363c:	2300      	movs	r3, #0
 801363e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013646:	4618      	mov	r0, r3
 8013648:	f7f6 f9af 	bl	80099aa <HAL_PCD_Start>
 801364c:	4603      	mov	r3, r0
 801364e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013650:	7bbb      	ldrb	r3, [r7, #14]
 8013652:	2b03      	cmp	r3, #3
 8013654:	d816      	bhi.n	8013684 <USBD_LL_Start+0x54>
 8013656:	a201      	add	r2, pc, #4	; (adr r2, 801365c <USBD_LL_Start+0x2c>)
 8013658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801365c:	0801366d 	.word	0x0801366d
 8013660:	08013673 	.word	0x08013673
 8013664:	08013679 	.word	0x08013679
 8013668:	0801367f 	.word	0x0801367f
    case HAL_OK :
      usb_status = USBD_OK;
 801366c:	2300      	movs	r3, #0
 801366e:	73fb      	strb	r3, [r7, #15]
    break;
 8013670:	e00b      	b.n	801368a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013672:	2303      	movs	r3, #3
 8013674:	73fb      	strb	r3, [r7, #15]
    break;
 8013676:	e008      	b.n	801368a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013678:	2301      	movs	r3, #1
 801367a:	73fb      	strb	r3, [r7, #15]
    break;
 801367c:	e005      	b.n	801368a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801367e:	2303      	movs	r3, #3
 8013680:	73fb      	strb	r3, [r7, #15]
    break;
 8013682:	e002      	b.n	801368a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8013684:	2303      	movs	r3, #3
 8013686:	73fb      	strb	r3, [r7, #15]
    break;
 8013688:	bf00      	nop
  }
  return usb_status;
 801368a:	7bfb      	ldrb	r3, [r7, #15]
}
 801368c:	4618      	mov	r0, r3
 801368e:	3710      	adds	r7, #16
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	4608      	mov	r0, r1
 801369e:	4611      	mov	r1, r2
 80136a0:	461a      	mov	r2, r3
 80136a2:	4603      	mov	r3, r0
 80136a4:	70fb      	strb	r3, [r7, #3]
 80136a6:	460b      	mov	r3, r1
 80136a8:	70bb      	strb	r3, [r7, #2]
 80136aa:	4613      	mov	r3, r2
 80136ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136ae:	2300      	movs	r3, #0
 80136b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136b2:	2300      	movs	r3, #0
 80136b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80136bc:	78bb      	ldrb	r3, [r7, #2]
 80136be:	883a      	ldrh	r2, [r7, #0]
 80136c0:	78f9      	ldrb	r1, [r7, #3]
 80136c2:	f7f6 fe59 	bl	800a378 <HAL_PCD_EP_Open>
 80136c6:	4603      	mov	r3, r0
 80136c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80136ca:	7bbb      	ldrb	r3, [r7, #14]
 80136cc:	2b03      	cmp	r3, #3
 80136ce:	d817      	bhi.n	8013700 <USBD_LL_OpenEP+0x6c>
 80136d0:	a201      	add	r2, pc, #4	; (adr r2, 80136d8 <USBD_LL_OpenEP+0x44>)
 80136d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136d6:	bf00      	nop
 80136d8:	080136e9 	.word	0x080136e9
 80136dc:	080136ef 	.word	0x080136ef
 80136e0:	080136f5 	.word	0x080136f5
 80136e4:	080136fb 	.word	0x080136fb
    case HAL_OK :
      usb_status = USBD_OK;
 80136e8:	2300      	movs	r3, #0
 80136ea:	73fb      	strb	r3, [r7, #15]
    break;
 80136ec:	e00b      	b.n	8013706 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80136ee:	2303      	movs	r3, #3
 80136f0:	73fb      	strb	r3, [r7, #15]
    break;
 80136f2:	e008      	b.n	8013706 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80136f4:	2301      	movs	r3, #1
 80136f6:	73fb      	strb	r3, [r7, #15]
    break;
 80136f8:	e005      	b.n	8013706 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80136fa:	2303      	movs	r3, #3
 80136fc:	73fb      	strb	r3, [r7, #15]
    break;
 80136fe:	e002      	b.n	8013706 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013700:	2303      	movs	r3, #3
 8013702:	73fb      	strb	r3, [r7, #15]
    break;
 8013704:	bf00      	nop
  }
  return usb_status;
 8013706:	7bfb      	ldrb	r3, [r7, #15]
}
 8013708:	4618      	mov	r0, r3
 801370a:	3710      	adds	r7, #16
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}

08013710 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	460b      	mov	r3, r1
 801371a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801371c:	2300      	movs	r3, #0
 801371e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013720:	2300      	movs	r3, #0
 8013722:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801372a:	78fa      	ldrb	r2, [r7, #3]
 801372c:	4611      	mov	r1, r2
 801372e:	4618      	mov	r0, r3
 8013730:	f7f6 fe8a 	bl	800a448 <HAL_PCD_EP_Close>
 8013734:	4603      	mov	r3, r0
 8013736:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013738:	7bbb      	ldrb	r3, [r7, #14]
 801373a:	2b03      	cmp	r3, #3
 801373c:	d816      	bhi.n	801376c <USBD_LL_CloseEP+0x5c>
 801373e:	a201      	add	r2, pc, #4	; (adr r2, 8013744 <USBD_LL_CloseEP+0x34>)
 8013740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013744:	08013755 	.word	0x08013755
 8013748:	0801375b 	.word	0x0801375b
 801374c:	08013761 	.word	0x08013761
 8013750:	08013767 	.word	0x08013767
    case HAL_OK :
      usb_status = USBD_OK;
 8013754:	2300      	movs	r3, #0
 8013756:	73fb      	strb	r3, [r7, #15]
    break;
 8013758:	e00b      	b.n	8013772 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801375a:	2303      	movs	r3, #3
 801375c:	73fb      	strb	r3, [r7, #15]
    break;
 801375e:	e008      	b.n	8013772 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013760:	2301      	movs	r3, #1
 8013762:	73fb      	strb	r3, [r7, #15]
    break;
 8013764:	e005      	b.n	8013772 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013766:	2303      	movs	r3, #3
 8013768:	73fb      	strb	r3, [r7, #15]
    break;
 801376a:	e002      	b.n	8013772 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801376c:	2303      	movs	r3, #3
 801376e:	73fb      	strb	r3, [r7, #15]
    break;
 8013770:	bf00      	nop
  }
  return usb_status;
 8013772:	7bfb      	ldrb	r3, [r7, #15]
}
 8013774:	4618      	mov	r0, r3
 8013776:	3710      	adds	r7, #16
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	460b      	mov	r3, r1
 8013786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013788:	2300      	movs	r3, #0
 801378a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801378c:	2300      	movs	r3, #0
 801378e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013796:	78fa      	ldrb	r2, [r7, #3]
 8013798:	4611      	mov	r1, r2
 801379a:	4618      	mov	r0, r3
 801379c:	f7f6 ff31 	bl	800a602 <HAL_PCD_EP_SetStall>
 80137a0:	4603      	mov	r3, r0
 80137a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80137a4:	7bbb      	ldrb	r3, [r7, #14]
 80137a6:	2b03      	cmp	r3, #3
 80137a8:	d816      	bhi.n	80137d8 <USBD_LL_StallEP+0x5c>
 80137aa:	a201      	add	r2, pc, #4	; (adr r2, 80137b0 <USBD_LL_StallEP+0x34>)
 80137ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137b0:	080137c1 	.word	0x080137c1
 80137b4:	080137c7 	.word	0x080137c7
 80137b8:	080137cd 	.word	0x080137cd
 80137bc:	080137d3 	.word	0x080137d3
    case HAL_OK :
      usb_status = USBD_OK;
 80137c0:	2300      	movs	r3, #0
 80137c2:	73fb      	strb	r3, [r7, #15]
    break;
 80137c4:	e00b      	b.n	80137de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80137c6:	2303      	movs	r3, #3
 80137c8:	73fb      	strb	r3, [r7, #15]
    break;
 80137ca:	e008      	b.n	80137de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80137cc:	2301      	movs	r3, #1
 80137ce:	73fb      	strb	r3, [r7, #15]
    break;
 80137d0:	e005      	b.n	80137de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80137d2:	2303      	movs	r3, #3
 80137d4:	73fb      	strb	r3, [r7, #15]
    break;
 80137d6:	e002      	b.n	80137de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80137d8:	2303      	movs	r3, #3
 80137da:	73fb      	strb	r3, [r7, #15]
    break;
 80137dc:	bf00      	nop
  }
  return usb_status;
 80137de:	7bfb      	ldrb	r3, [r7, #15]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3710      	adds	r7, #16
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b084      	sub	sp, #16
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	460b      	mov	r3, r1
 80137f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137f4:	2300      	movs	r3, #0
 80137f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137f8:	2300      	movs	r3, #0
 80137fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013802:	78fa      	ldrb	r2, [r7, #3]
 8013804:	4611      	mov	r1, r2
 8013806:	4618      	mov	r0, r3
 8013808:	f7f6 ff5d 	bl	800a6c6 <HAL_PCD_EP_ClrStall>
 801380c:	4603      	mov	r3, r0
 801380e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013810:	7bbb      	ldrb	r3, [r7, #14]
 8013812:	2b03      	cmp	r3, #3
 8013814:	d816      	bhi.n	8013844 <USBD_LL_ClearStallEP+0x5c>
 8013816:	a201      	add	r2, pc, #4	; (adr r2, 801381c <USBD_LL_ClearStallEP+0x34>)
 8013818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801381c:	0801382d 	.word	0x0801382d
 8013820:	08013833 	.word	0x08013833
 8013824:	08013839 	.word	0x08013839
 8013828:	0801383f 	.word	0x0801383f
    case HAL_OK :
      usb_status = USBD_OK;
 801382c:	2300      	movs	r3, #0
 801382e:	73fb      	strb	r3, [r7, #15]
    break;
 8013830:	e00b      	b.n	801384a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013832:	2303      	movs	r3, #3
 8013834:	73fb      	strb	r3, [r7, #15]
    break;
 8013836:	e008      	b.n	801384a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013838:	2301      	movs	r3, #1
 801383a:	73fb      	strb	r3, [r7, #15]
    break;
 801383c:	e005      	b.n	801384a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801383e:	2303      	movs	r3, #3
 8013840:	73fb      	strb	r3, [r7, #15]
    break;
 8013842:	e002      	b.n	801384a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013844:	2303      	movs	r3, #3
 8013846:	73fb      	strb	r3, [r7, #15]
    break;
 8013848:	bf00      	nop
  }
  return usb_status;
 801384a:	7bfb      	ldrb	r3, [r7, #15]
}
 801384c:	4618      	mov	r0, r3
 801384e:	3710      	adds	r7, #16
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}

08013854 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013854:	b480      	push	{r7}
 8013856:	b085      	sub	sp, #20
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	460b      	mov	r3, r1
 801385e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013866:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801386c:	2b00      	cmp	r3, #0
 801386e:	da0b      	bge.n	8013888 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013870:	78fb      	ldrb	r3, [r7, #3]
 8013872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013876:	68f9      	ldr	r1, [r7, #12]
 8013878:	4613      	mov	r3, r2
 801387a:	00db      	lsls	r3, r3, #3
 801387c:	4413      	add	r3, r2
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	440b      	add	r3, r1
 8013882:	333e      	adds	r3, #62	; 0x3e
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	e00b      	b.n	80138a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013888:	78fb      	ldrb	r3, [r7, #3]
 801388a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801388e:	68f9      	ldr	r1, [r7, #12]
 8013890:	4613      	mov	r3, r2
 8013892:	00db      	lsls	r3, r3, #3
 8013894:	4413      	add	r3, r2
 8013896:	009b      	lsls	r3, r3, #2
 8013898:	440b      	add	r3, r1
 801389a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801389e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3714      	adds	r7, #20
 80138a4:	46bd      	mov	sp, r7
 80138a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138aa:	4770      	bx	lr

080138ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b084      	sub	sp, #16
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	460b      	mov	r3, r1
 80138b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138b8:	2300      	movs	r3, #0
 80138ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138bc:	2300      	movs	r3, #0
 80138be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80138c6:	78fa      	ldrb	r2, [r7, #3]
 80138c8:	4611      	mov	r1, r2
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7f6 fd2f 	bl	800a32e <HAL_PCD_SetAddress>
 80138d0:	4603      	mov	r3, r0
 80138d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80138d4:	7bbb      	ldrb	r3, [r7, #14]
 80138d6:	2b03      	cmp	r3, #3
 80138d8:	d816      	bhi.n	8013908 <USBD_LL_SetUSBAddress+0x5c>
 80138da:	a201      	add	r2, pc, #4	; (adr r2, 80138e0 <USBD_LL_SetUSBAddress+0x34>)
 80138dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138e0:	080138f1 	.word	0x080138f1
 80138e4:	080138f7 	.word	0x080138f7
 80138e8:	080138fd 	.word	0x080138fd
 80138ec:	08013903 	.word	0x08013903
    case HAL_OK :
      usb_status = USBD_OK;
 80138f0:	2300      	movs	r3, #0
 80138f2:	73fb      	strb	r3, [r7, #15]
    break;
 80138f4:	e00b      	b.n	801390e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80138f6:	2303      	movs	r3, #3
 80138f8:	73fb      	strb	r3, [r7, #15]
    break;
 80138fa:	e008      	b.n	801390e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80138fc:	2301      	movs	r3, #1
 80138fe:	73fb      	strb	r3, [r7, #15]
    break;
 8013900:	e005      	b.n	801390e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013902:	2303      	movs	r3, #3
 8013904:	73fb      	strb	r3, [r7, #15]
    break;
 8013906:	e002      	b.n	801390e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013908:	2303      	movs	r3, #3
 801390a:	73fb      	strb	r3, [r7, #15]
    break;
 801390c:	bf00      	nop
  }
  return usb_status;
 801390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013910:	4618      	mov	r0, r3
 8013912:	3710      	adds	r7, #16
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b086      	sub	sp, #24
 801391c:	af00      	add	r7, sp, #0
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	607a      	str	r2, [r7, #4]
 8013922:	603b      	str	r3, [r7, #0]
 8013924:	460b      	mov	r3, r1
 8013926:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013928:	2300      	movs	r3, #0
 801392a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801392c:	2300      	movs	r3, #0
 801392e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013936:	7af9      	ldrb	r1, [r7, #11]
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	f7f6 fe24 	bl	800a588 <HAL_PCD_EP_Transmit>
 8013940:	4603      	mov	r3, r0
 8013942:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013944:	7dbb      	ldrb	r3, [r7, #22]
 8013946:	2b03      	cmp	r3, #3
 8013948:	d816      	bhi.n	8013978 <USBD_LL_Transmit+0x60>
 801394a:	a201      	add	r2, pc, #4	; (adr r2, 8013950 <USBD_LL_Transmit+0x38>)
 801394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013950:	08013961 	.word	0x08013961
 8013954:	08013967 	.word	0x08013967
 8013958:	0801396d 	.word	0x0801396d
 801395c:	08013973 	.word	0x08013973
    case HAL_OK :
      usb_status = USBD_OK;
 8013960:	2300      	movs	r3, #0
 8013962:	75fb      	strb	r3, [r7, #23]
    break;
 8013964:	e00b      	b.n	801397e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013966:	2303      	movs	r3, #3
 8013968:	75fb      	strb	r3, [r7, #23]
    break;
 801396a:	e008      	b.n	801397e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801396c:	2301      	movs	r3, #1
 801396e:	75fb      	strb	r3, [r7, #23]
    break;
 8013970:	e005      	b.n	801397e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013972:	2303      	movs	r3, #3
 8013974:	75fb      	strb	r3, [r7, #23]
    break;
 8013976:	e002      	b.n	801397e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8013978:	2303      	movs	r3, #3
 801397a:	75fb      	strb	r3, [r7, #23]
    break;
 801397c:	bf00      	nop
  }
  return usb_status;
 801397e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013980:	4618      	mov	r0, r3
 8013982:	3718      	adds	r7, #24
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}

08013988 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b086      	sub	sp, #24
 801398c:	af00      	add	r7, sp, #0
 801398e:	60f8      	str	r0, [r7, #12]
 8013990:	607a      	str	r2, [r7, #4]
 8013992:	603b      	str	r3, [r7, #0]
 8013994:	460b      	mov	r3, r1
 8013996:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013998:	2300      	movs	r3, #0
 801399a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801399c:	2300      	movs	r3, #0
 801399e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80139a6:	7af9      	ldrb	r1, [r7, #11]
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	f7f6 fd96 	bl	800a4dc <HAL_PCD_EP_Receive>
 80139b0:	4603      	mov	r3, r0
 80139b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80139b4:	7dbb      	ldrb	r3, [r7, #22]
 80139b6:	2b03      	cmp	r3, #3
 80139b8:	d816      	bhi.n	80139e8 <USBD_LL_PrepareReceive+0x60>
 80139ba:	a201      	add	r2, pc, #4	; (adr r2, 80139c0 <USBD_LL_PrepareReceive+0x38>)
 80139bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139c0:	080139d1 	.word	0x080139d1
 80139c4:	080139d7 	.word	0x080139d7
 80139c8:	080139dd 	.word	0x080139dd
 80139cc:	080139e3 	.word	0x080139e3
    case HAL_OK :
      usb_status = USBD_OK;
 80139d0:	2300      	movs	r3, #0
 80139d2:	75fb      	strb	r3, [r7, #23]
    break;
 80139d4:	e00b      	b.n	80139ee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80139d6:	2303      	movs	r3, #3
 80139d8:	75fb      	strb	r3, [r7, #23]
    break;
 80139da:	e008      	b.n	80139ee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80139dc:	2301      	movs	r3, #1
 80139de:	75fb      	strb	r3, [r7, #23]
    break;
 80139e0:	e005      	b.n	80139ee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80139e2:	2303      	movs	r3, #3
 80139e4:	75fb      	strb	r3, [r7, #23]
    break;
 80139e6:	e002      	b.n	80139ee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80139e8:	2303      	movs	r3, #3
 80139ea:	75fb      	strb	r3, [r7, #23]
    break;
 80139ec:	bf00      	nop
  }
  return usb_status;
 80139ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3718      	adds	r7, #24
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b082      	sub	sp, #8
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	460b      	mov	r3, r1
 8013a02:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013a0a:	78fa      	ldrb	r2, [r7, #3]
 8013a0c:	4611      	mov	r1, r2
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7f6 fda2 	bl	800a558 <HAL_PCD_EP_GetRxCount>
 8013a14:	4603      	mov	r3, r0
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3708      	adds	r7, #8
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
	...

08013a20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b082      	sub	sp, #8
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	460b      	mov	r3, r1
 8013a2a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013a2c:	78fb      	ldrb	r3, [r7, #3]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d002      	beq.n	8013a38 <HAL_PCDEx_LPM_Callback+0x18>
 8013a32:	2b01      	cmp	r3, #1
 8013a34:	d01f      	beq.n	8013a76 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013a36:	e03b      	b.n	8013ab0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6a1b      	ldr	r3, [r3, #32]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d007      	beq.n	8013a50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013a40:	f000 f854 	bl	8013aec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013a44:	4b1c      	ldr	r3, [pc, #112]	; (8013ab8 <HAL_PCDEx_LPM_Callback+0x98>)
 8013a46:	691b      	ldr	r3, [r3, #16]
 8013a48:	4a1b      	ldr	r2, [pc, #108]	; (8013ab8 <HAL_PCDEx_LPM_Callback+0x98>)
 8013a4a:	f023 0306 	bic.w	r3, r3, #6
 8013a4e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	6812      	ldr	r2, [r2, #0]
 8013a5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a62:	f023 0301 	bic.w	r3, r3, #1
 8013a66:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fe fb08 	bl	8012084 <USBD_LL_Resume>
    break;
 8013a74:	e01c      	b.n	8013ab0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	6812      	ldr	r2, [r2, #0]
 8013a84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a88:	f043 0301 	orr.w	r3, r3, #1
 8013a8c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fe fadf 	bl	8012058 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6a1b      	ldr	r3, [r3, #32]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d005      	beq.n	8013aae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013aa2:	4b05      	ldr	r3, [pc, #20]	; (8013ab8 <HAL_PCDEx_LPM_Callback+0x98>)
 8013aa4:	691b      	ldr	r3, [r3, #16]
 8013aa6:	4a04      	ldr	r2, [pc, #16]	; (8013ab8 <HAL_PCDEx_LPM_Callback+0x98>)
 8013aa8:	f043 0306 	orr.w	r3, r3, #6
 8013aac:	6113      	str	r3, [r2, #16]
    break;
 8013aae:	bf00      	nop
}
 8013ab0:	bf00      	nop
 8013ab2:	3708      	adds	r7, #8
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}
 8013ab8:	e000ed00 	.word	0xe000ed00

08013abc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013ac4:	4b03      	ldr	r3, [pc, #12]	; (8013ad4 <USBD_static_malloc+0x18>)
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	370c      	adds	r7, #12
 8013aca:	46bd      	mov	sp, r7
 8013acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad0:	4770      	bx	lr
 8013ad2:	bf00      	nop
 8013ad4:	2001e9cc 	.word	0x2001e9cc

08013ad8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]

}
 8013ae0:	bf00      	nop
 8013ae2:	370c      	adds	r7, #12
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aea:	4770      	bx	lr

08013aec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013af0:	f7ec fe7c 	bl	80007ec <SystemClock_Config>
}
 8013af4:	bf00      	nop
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <__errno>:
 8013af8:	4b01      	ldr	r3, [pc, #4]	; (8013b00 <__errno+0x8>)
 8013afa:	6818      	ldr	r0, [r3, #0]
 8013afc:	4770      	bx	lr
 8013afe:	bf00      	nop
 8013b00:	2001c31c 	.word	0x2001c31c

08013b04 <__libc_init_array>:
 8013b04:	b570      	push	{r4, r5, r6, lr}
 8013b06:	4d0d      	ldr	r5, [pc, #52]	; (8013b3c <__libc_init_array+0x38>)
 8013b08:	4c0d      	ldr	r4, [pc, #52]	; (8013b40 <__libc_init_array+0x3c>)
 8013b0a:	1b64      	subs	r4, r4, r5
 8013b0c:	10a4      	asrs	r4, r4, #2
 8013b0e:	2600      	movs	r6, #0
 8013b10:	42a6      	cmp	r6, r4
 8013b12:	d109      	bne.n	8013b28 <__libc_init_array+0x24>
 8013b14:	4d0b      	ldr	r5, [pc, #44]	; (8013b44 <__libc_init_array+0x40>)
 8013b16:	4c0c      	ldr	r4, [pc, #48]	; (8013b48 <__libc_init_array+0x44>)
 8013b18:	f000 ffae 	bl	8014a78 <_init>
 8013b1c:	1b64      	subs	r4, r4, r5
 8013b1e:	10a4      	asrs	r4, r4, #2
 8013b20:	2600      	movs	r6, #0
 8013b22:	42a6      	cmp	r6, r4
 8013b24:	d105      	bne.n	8013b32 <__libc_init_array+0x2e>
 8013b26:	bd70      	pop	{r4, r5, r6, pc}
 8013b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b2c:	4798      	blx	r3
 8013b2e:	3601      	adds	r6, #1
 8013b30:	e7ee      	b.n	8013b10 <__libc_init_array+0xc>
 8013b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b36:	4798      	blx	r3
 8013b38:	3601      	adds	r6, #1
 8013b3a:	e7f2      	b.n	8013b22 <__libc_init_array+0x1e>
 8013b3c:	080179dc 	.word	0x080179dc
 8013b40:	080179dc 	.word	0x080179dc
 8013b44:	080179dc 	.word	0x080179dc
 8013b48:	080179e0 	.word	0x080179e0

08013b4c <memset>:
 8013b4c:	4402      	add	r2, r0
 8013b4e:	4603      	mov	r3, r0
 8013b50:	4293      	cmp	r3, r2
 8013b52:	d100      	bne.n	8013b56 <memset+0xa>
 8013b54:	4770      	bx	lr
 8013b56:	f803 1b01 	strb.w	r1, [r3], #1
 8013b5a:	e7f9      	b.n	8013b50 <memset+0x4>

08013b5c <_free_r>:
 8013b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b5e:	2900      	cmp	r1, #0
 8013b60:	d044      	beq.n	8013bec <_free_r+0x90>
 8013b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b66:	9001      	str	r0, [sp, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8013b6e:	bfb8      	it	lt
 8013b70:	18e4      	addlt	r4, r4, r3
 8013b72:	f000 f9f3 	bl	8013f5c <__malloc_lock>
 8013b76:	4a1e      	ldr	r2, [pc, #120]	; (8013bf0 <_free_r+0x94>)
 8013b78:	9801      	ldr	r0, [sp, #4]
 8013b7a:	6813      	ldr	r3, [r2, #0]
 8013b7c:	b933      	cbnz	r3, 8013b8c <_free_r+0x30>
 8013b7e:	6063      	str	r3, [r4, #4]
 8013b80:	6014      	str	r4, [r2, #0]
 8013b82:	b003      	add	sp, #12
 8013b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b88:	f000 b9ee 	b.w	8013f68 <__malloc_unlock>
 8013b8c:	42a3      	cmp	r3, r4
 8013b8e:	d908      	bls.n	8013ba2 <_free_r+0x46>
 8013b90:	6825      	ldr	r5, [r4, #0]
 8013b92:	1961      	adds	r1, r4, r5
 8013b94:	428b      	cmp	r3, r1
 8013b96:	bf01      	itttt	eq
 8013b98:	6819      	ldreq	r1, [r3, #0]
 8013b9a:	685b      	ldreq	r3, [r3, #4]
 8013b9c:	1949      	addeq	r1, r1, r5
 8013b9e:	6021      	streq	r1, [r4, #0]
 8013ba0:	e7ed      	b.n	8013b7e <_free_r+0x22>
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	b10b      	cbz	r3, 8013bac <_free_r+0x50>
 8013ba8:	42a3      	cmp	r3, r4
 8013baa:	d9fa      	bls.n	8013ba2 <_free_r+0x46>
 8013bac:	6811      	ldr	r1, [r2, #0]
 8013bae:	1855      	adds	r5, r2, r1
 8013bb0:	42a5      	cmp	r5, r4
 8013bb2:	d10b      	bne.n	8013bcc <_free_r+0x70>
 8013bb4:	6824      	ldr	r4, [r4, #0]
 8013bb6:	4421      	add	r1, r4
 8013bb8:	1854      	adds	r4, r2, r1
 8013bba:	42a3      	cmp	r3, r4
 8013bbc:	6011      	str	r1, [r2, #0]
 8013bbe:	d1e0      	bne.n	8013b82 <_free_r+0x26>
 8013bc0:	681c      	ldr	r4, [r3, #0]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	6053      	str	r3, [r2, #4]
 8013bc6:	4421      	add	r1, r4
 8013bc8:	6011      	str	r1, [r2, #0]
 8013bca:	e7da      	b.n	8013b82 <_free_r+0x26>
 8013bcc:	d902      	bls.n	8013bd4 <_free_r+0x78>
 8013bce:	230c      	movs	r3, #12
 8013bd0:	6003      	str	r3, [r0, #0]
 8013bd2:	e7d6      	b.n	8013b82 <_free_r+0x26>
 8013bd4:	6825      	ldr	r5, [r4, #0]
 8013bd6:	1961      	adds	r1, r4, r5
 8013bd8:	428b      	cmp	r3, r1
 8013bda:	bf04      	itt	eq
 8013bdc:	6819      	ldreq	r1, [r3, #0]
 8013bde:	685b      	ldreq	r3, [r3, #4]
 8013be0:	6063      	str	r3, [r4, #4]
 8013be2:	bf04      	itt	eq
 8013be4:	1949      	addeq	r1, r1, r5
 8013be6:	6021      	streq	r1, [r4, #0]
 8013be8:	6054      	str	r4, [r2, #4]
 8013bea:	e7ca      	b.n	8013b82 <_free_r+0x26>
 8013bec:	b003      	add	sp, #12
 8013bee:	bd30      	pop	{r4, r5, pc}
 8013bf0:	2001ebec 	.word	0x2001ebec

08013bf4 <sbrk_aligned>:
 8013bf4:	b570      	push	{r4, r5, r6, lr}
 8013bf6:	4e0e      	ldr	r6, [pc, #56]	; (8013c30 <sbrk_aligned+0x3c>)
 8013bf8:	460c      	mov	r4, r1
 8013bfa:	6831      	ldr	r1, [r6, #0]
 8013bfc:	4605      	mov	r5, r0
 8013bfe:	b911      	cbnz	r1, 8013c06 <sbrk_aligned+0x12>
 8013c00:	f000 f8a4 	bl	8013d4c <_sbrk_r>
 8013c04:	6030      	str	r0, [r6, #0]
 8013c06:	4621      	mov	r1, r4
 8013c08:	4628      	mov	r0, r5
 8013c0a:	f000 f89f 	bl	8013d4c <_sbrk_r>
 8013c0e:	1c43      	adds	r3, r0, #1
 8013c10:	d00a      	beq.n	8013c28 <sbrk_aligned+0x34>
 8013c12:	1cc4      	adds	r4, r0, #3
 8013c14:	f024 0403 	bic.w	r4, r4, #3
 8013c18:	42a0      	cmp	r0, r4
 8013c1a:	d007      	beq.n	8013c2c <sbrk_aligned+0x38>
 8013c1c:	1a21      	subs	r1, r4, r0
 8013c1e:	4628      	mov	r0, r5
 8013c20:	f000 f894 	bl	8013d4c <_sbrk_r>
 8013c24:	3001      	adds	r0, #1
 8013c26:	d101      	bne.n	8013c2c <sbrk_aligned+0x38>
 8013c28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	bd70      	pop	{r4, r5, r6, pc}
 8013c30:	2001ebf0 	.word	0x2001ebf0

08013c34 <_malloc_r>:
 8013c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c38:	1ccd      	adds	r5, r1, #3
 8013c3a:	f025 0503 	bic.w	r5, r5, #3
 8013c3e:	3508      	adds	r5, #8
 8013c40:	2d0c      	cmp	r5, #12
 8013c42:	bf38      	it	cc
 8013c44:	250c      	movcc	r5, #12
 8013c46:	2d00      	cmp	r5, #0
 8013c48:	4607      	mov	r7, r0
 8013c4a:	db01      	blt.n	8013c50 <_malloc_r+0x1c>
 8013c4c:	42a9      	cmp	r1, r5
 8013c4e:	d905      	bls.n	8013c5c <_malloc_r+0x28>
 8013c50:	230c      	movs	r3, #12
 8013c52:	603b      	str	r3, [r7, #0]
 8013c54:	2600      	movs	r6, #0
 8013c56:	4630      	mov	r0, r6
 8013c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c5c:	4e2e      	ldr	r6, [pc, #184]	; (8013d18 <_malloc_r+0xe4>)
 8013c5e:	f000 f97d 	bl	8013f5c <__malloc_lock>
 8013c62:	6833      	ldr	r3, [r6, #0]
 8013c64:	461c      	mov	r4, r3
 8013c66:	bb34      	cbnz	r4, 8013cb6 <_malloc_r+0x82>
 8013c68:	4629      	mov	r1, r5
 8013c6a:	4638      	mov	r0, r7
 8013c6c:	f7ff ffc2 	bl	8013bf4 <sbrk_aligned>
 8013c70:	1c43      	adds	r3, r0, #1
 8013c72:	4604      	mov	r4, r0
 8013c74:	d14d      	bne.n	8013d12 <_malloc_r+0xde>
 8013c76:	6834      	ldr	r4, [r6, #0]
 8013c78:	4626      	mov	r6, r4
 8013c7a:	2e00      	cmp	r6, #0
 8013c7c:	d140      	bne.n	8013d00 <_malloc_r+0xcc>
 8013c7e:	6823      	ldr	r3, [r4, #0]
 8013c80:	4631      	mov	r1, r6
 8013c82:	4638      	mov	r0, r7
 8013c84:	eb04 0803 	add.w	r8, r4, r3
 8013c88:	f000 f860 	bl	8013d4c <_sbrk_r>
 8013c8c:	4580      	cmp	r8, r0
 8013c8e:	d13a      	bne.n	8013d06 <_malloc_r+0xd2>
 8013c90:	6821      	ldr	r1, [r4, #0]
 8013c92:	3503      	adds	r5, #3
 8013c94:	1a6d      	subs	r5, r5, r1
 8013c96:	f025 0503 	bic.w	r5, r5, #3
 8013c9a:	3508      	adds	r5, #8
 8013c9c:	2d0c      	cmp	r5, #12
 8013c9e:	bf38      	it	cc
 8013ca0:	250c      	movcc	r5, #12
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	4638      	mov	r0, r7
 8013ca6:	f7ff ffa5 	bl	8013bf4 <sbrk_aligned>
 8013caa:	3001      	adds	r0, #1
 8013cac:	d02b      	beq.n	8013d06 <_malloc_r+0xd2>
 8013cae:	6823      	ldr	r3, [r4, #0]
 8013cb0:	442b      	add	r3, r5
 8013cb2:	6023      	str	r3, [r4, #0]
 8013cb4:	e00e      	b.n	8013cd4 <_malloc_r+0xa0>
 8013cb6:	6822      	ldr	r2, [r4, #0]
 8013cb8:	1b52      	subs	r2, r2, r5
 8013cba:	d41e      	bmi.n	8013cfa <_malloc_r+0xc6>
 8013cbc:	2a0b      	cmp	r2, #11
 8013cbe:	d916      	bls.n	8013cee <_malloc_r+0xba>
 8013cc0:	1961      	adds	r1, r4, r5
 8013cc2:	42a3      	cmp	r3, r4
 8013cc4:	6025      	str	r5, [r4, #0]
 8013cc6:	bf18      	it	ne
 8013cc8:	6059      	strne	r1, [r3, #4]
 8013cca:	6863      	ldr	r3, [r4, #4]
 8013ccc:	bf08      	it	eq
 8013cce:	6031      	streq	r1, [r6, #0]
 8013cd0:	5162      	str	r2, [r4, r5]
 8013cd2:	604b      	str	r3, [r1, #4]
 8013cd4:	4638      	mov	r0, r7
 8013cd6:	f104 060b 	add.w	r6, r4, #11
 8013cda:	f000 f945 	bl	8013f68 <__malloc_unlock>
 8013cde:	f026 0607 	bic.w	r6, r6, #7
 8013ce2:	1d23      	adds	r3, r4, #4
 8013ce4:	1af2      	subs	r2, r6, r3
 8013ce6:	d0b6      	beq.n	8013c56 <_malloc_r+0x22>
 8013ce8:	1b9b      	subs	r3, r3, r6
 8013cea:	50a3      	str	r3, [r4, r2]
 8013cec:	e7b3      	b.n	8013c56 <_malloc_r+0x22>
 8013cee:	6862      	ldr	r2, [r4, #4]
 8013cf0:	42a3      	cmp	r3, r4
 8013cf2:	bf0c      	ite	eq
 8013cf4:	6032      	streq	r2, [r6, #0]
 8013cf6:	605a      	strne	r2, [r3, #4]
 8013cf8:	e7ec      	b.n	8013cd4 <_malloc_r+0xa0>
 8013cfa:	4623      	mov	r3, r4
 8013cfc:	6864      	ldr	r4, [r4, #4]
 8013cfe:	e7b2      	b.n	8013c66 <_malloc_r+0x32>
 8013d00:	4634      	mov	r4, r6
 8013d02:	6876      	ldr	r6, [r6, #4]
 8013d04:	e7b9      	b.n	8013c7a <_malloc_r+0x46>
 8013d06:	230c      	movs	r3, #12
 8013d08:	603b      	str	r3, [r7, #0]
 8013d0a:	4638      	mov	r0, r7
 8013d0c:	f000 f92c 	bl	8013f68 <__malloc_unlock>
 8013d10:	e7a1      	b.n	8013c56 <_malloc_r+0x22>
 8013d12:	6025      	str	r5, [r4, #0]
 8013d14:	e7de      	b.n	8013cd4 <_malloc_r+0xa0>
 8013d16:	bf00      	nop
 8013d18:	2001ebec 	.word	0x2001ebec

08013d1c <iprintf>:
 8013d1c:	b40f      	push	{r0, r1, r2, r3}
 8013d1e:	4b0a      	ldr	r3, [pc, #40]	; (8013d48 <iprintf+0x2c>)
 8013d20:	b513      	push	{r0, r1, r4, lr}
 8013d22:	681c      	ldr	r4, [r3, #0]
 8013d24:	b124      	cbz	r4, 8013d30 <iprintf+0x14>
 8013d26:	69a3      	ldr	r3, [r4, #24]
 8013d28:	b913      	cbnz	r3, 8013d30 <iprintf+0x14>
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f000 f876 	bl	8013e1c <__sinit>
 8013d30:	ab05      	add	r3, sp, #20
 8013d32:	9a04      	ldr	r2, [sp, #16]
 8013d34:	68a1      	ldr	r1, [r4, #8]
 8013d36:	9301      	str	r3, [sp, #4]
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f000 f945 	bl	8013fc8 <_vfiprintf_r>
 8013d3e:	b002      	add	sp, #8
 8013d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d44:	b004      	add	sp, #16
 8013d46:	4770      	bx	lr
 8013d48:	2001c31c 	.word	0x2001c31c

08013d4c <_sbrk_r>:
 8013d4c:	b538      	push	{r3, r4, r5, lr}
 8013d4e:	4d06      	ldr	r5, [pc, #24]	; (8013d68 <_sbrk_r+0x1c>)
 8013d50:	2300      	movs	r3, #0
 8013d52:	4604      	mov	r4, r0
 8013d54:	4608      	mov	r0, r1
 8013d56:	602b      	str	r3, [r5, #0]
 8013d58:	f7ee fb34 	bl	80023c4 <_sbrk>
 8013d5c:	1c43      	adds	r3, r0, #1
 8013d5e:	d102      	bne.n	8013d66 <_sbrk_r+0x1a>
 8013d60:	682b      	ldr	r3, [r5, #0]
 8013d62:	b103      	cbz	r3, 8013d66 <_sbrk_r+0x1a>
 8013d64:	6023      	str	r3, [r4, #0]
 8013d66:	bd38      	pop	{r3, r4, r5, pc}
 8013d68:	2001ebf8 	.word	0x2001ebf8

08013d6c <std>:
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	b510      	push	{r4, lr}
 8013d70:	4604      	mov	r4, r0
 8013d72:	e9c0 3300 	strd	r3, r3, [r0]
 8013d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d7a:	6083      	str	r3, [r0, #8]
 8013d7c:	8181      	strh	r1, [r0, #12]
 8013d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8013d80:	81c2      	strh	r2, [r0, #14]
 8013d82:	6183      	str	r3, [r0, #24]
 8013d84:	4619      	mov	r1, r3
 8013d86:	2208      	movs	r2, #8
 8013d88:	305c      	adds	r0, #92	; 0x5c
 8013d8a:	f7ff fedf 	bl	8013b4c <memset>
 8013d8e:	4b05      	ldr	r3, [pc, #20]	; (8013da4 <std+0x38>)
 8013d90:	6263      	str	r3, [r4, #36]	; 0x24
 8013d92:	4b05      	ldr	r3, [pc, #20]	; (8013da8 <std+0x3c>)
 8013d94:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d96:	4b05      	ldr	r3, [pc, #20]	; (8013dac <std+0x40>)
 8013d98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d9a:	4b05      	ldr	r3, [pc, #20]	; (8013db0 <std+0x44>)
 8013d9c:	6224      	str	r4, [r4, #32]
 8013d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8013da0:	bd10      	pop	{r4, pc}
 8013da2:	bf00      	nop
 8013da4:	08014551 	.word	0x08014551
 8013da8:	08014573 	.word	0x08014573
 8013dac:	080145ab 	.word	0x080145ab
 8013db0:	080145cf 	.word	0x080145cf

08013db4 <_cleanup_r>:
 8013db4:	4901      	ldr	r1, [pc, #4]	; (8013dbc <_cleanup_r+0x8>)
 8013db6:	f000 b8af 	b.w	8013f18 <_fwalk_reent>
 8013dba:	bf00      	nop
 8013dbc:	080148a9 	.word	0x080148a9

08013dc0 <__sfmoreglue>:
 8013dc0:	b570      	push	{r4, r5, r6, lr}
 8013dc2:	2268      	movs	r2, #104	; 0x68
 8013dc4:	1e4d      	subs	r5, r1, #1
 8013dc6:	4355      	muls	r5, r2
 8013dc8:	460e      	mov	r6, r1
 8013dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013dce:	f7ff ff31 	bl	8013c34 <_malloc_r>
 8013dd2:	4604      	mov	r4, r0
 8013dd4:	b140      	cbz	r0, 8013de8 <__sfmoreglue+0x28>
 8013dd6:	2100      	movs	r1, #0
 8013dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8013ddc:	300c      	adds	r0, #12
 8013dde:	60a0      	str	r0, [r4, #8]
 8013de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013de4:	f7ff feb2 	bl	8013b4c <memset>
 8013de8:	4620      	mov	r0, r4
 8013dea:	bd70      	pop	{r4, r5, r6, pc}

08013dec <__sfp_lock_acquire>:
 8013dec:	4801      	ldr	r0, [pc, #4]	; (8013df4 <__sfp_lock_acquire+0x8>)
 8013dee:	f000 b8b3 	b.w	8013f58 <__retarget_lock_acquire_recursive>
 8013df2:	bf00      	nop
 8013df4:	2001ebf5 	.word	0x2001ebf5

08013df8 <__sfp_lock_release>:
 8013df8:	4801      	ldr	r0, [pc, #4]	; (8013e00 <__sfp_lock_release+0x8>)
 8013dfa:	f000 b8ae 	b.w	8013f5a <__retarget_lock_release_recursive>
 8013dfe:	bf00      	nop
 8013e00:	2001ebf5 	.word	0x2001ebf5

08013e04 <__sinit_lock_acquire>:
 8013e04:	4801      	ldr	r0, [pc, #4]	; (8013e0c <__sinit_lock_acquire+0x8>)
 8013e06:	f000 b8a7 	b.w	8013f58 <__retarget_lock_acquire_recursive>
 8013e0a:	bf00      	nop
 8013e0c:	2001ebf6 	.word	0x2001ebf6

08013e10 <__sinit_lock_release>:
 8013e10:	4801      	ldr	r0, [pc, #4]	; (8013e18 <__sinit_lock_release+0x8>)
 8013e12:	f000 b8a2 	b.w	8013f5a <__retarget_lock_release_recursive>
 8013e16:	bf00      	nop
 8013e18:	2001ebf6 	.word	0x2001ebf6

08013e1c <__sinit>:
 8013e1c:	b510      	push	{r4, lr}
 8013e1e:	4604      	mov	r4, r0
 8013e20:	f7ff fff0 	bl	8013e04 <__sinit_lock_acquire>
 8013e24:	69a3      	ldr	r3, [r4, #24]
 8013e26:	b11b      	cbz	r3, 8013e30 <__sinit+0x14>
 8013e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e2c:	f7ff bff0 	b.w	8013e10 <__sinit_lock_release>
 8013e30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013e34:	6523      	str	r3, [r4, #80]	; 0x50
 8013e36:	4b13      	ldr	r3, [pc, #76]	; (8013e84 <__sinit+0x68>)
 8013e38:	4a13      	ldr	r2, [pc, #76]	; (8013e88 <__sinit+0x6c>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013e3e:	42a3      	cmp	r3, r4
 8013e40:	bf04      	itt	eq
 8013e42:	2301      	moveq	r3, #1
 8013e44:	61a3      	streq	r3, [r4, #24]
 8013e46:	4620      	mov	r0, r4
 8013e48:	f000 f820 	bl	8013e8c <__sfp>
 8013e4c:	6060      	str	r0, [r4, #4]
 8013e4e:	4620      	mov	r0, r4
 8013e50:	f000 f81c 	bl	8013e8c <__sfp>
 8013e54:	60a0      	str	r0, [r4, #8]
 8013e56:	4620      	mov	r0, r4
 8013e58:	f000 f818 	bl	8013e8c <__sfp>
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	60e0      	str	r0, [r4, #12]
 8013e60:	2104      	movs	r1, #4
 8013e62:	6860      	ldr	r0, [r4, #4]
 8013e64:	f7ff ff82 	bl	8013d6c <std>
 8013e68:	68a0      	ldr	r0, [r4, #8]
 8013e6a:	2201      	movs	r2, #1
 8013e6c:	2109      	movs	r1, #9
 8013e6e:	f7ff ff7d 	bl	8013d6c <std>
 8013e72:	68e0      	ldr	r0, [r4, #12]
 8013e74:	2202      	movs	r2, #2
 8013e76:	2112      	movs	r1, #18
 8013e78:	f7ff ff78 	bl	8013d6c <std>
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	61a3      	str	r3, [r4, #24]
 8013e80:	e7d2      	b.n	8013e28 <__sinit+0xc>
 8013e82:	bf00      	nop
 8013e84:	0801793c 	.word	0x0801793c
 8013e88:	08013db5 	.word	0x08013db5

08013e8c <__sfp>:
 8013e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e8e:	4607      	mov	r7, r0
 8013e90:	f7ff ffac 	bl	8013dec <__sfp_lock_acquire>
 8013e94:	4b1e      	ldr	r3, [pc, #120]	; (8013f10 <__sfp+0x84>)
 8013e96:	681e      	ldr	r6, [r3, #0]
 8013e98:	69b3      	ldr	r3, [r6, #24]
 8013e9a:	b913      	cbnz	r3, 8013ea2 <__sfp+0x16>
 8013e9c:	4630      	mov	r0, r6
 8013e9e:	f7ff ffbd 	bl	8013e1c <__sinit>
 8013ea2:	3648      	adds	r6, #72	; 0x48
 8013ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013ea8:	3b01      	subs	r3, #1
 8013eaa:	d503      	bpl.n	8013eb4 <__sfp+0x28>
 8013eac:	6833      	ldr	r3, [r6, #0]
 8013eae:	b30b      	cbz	r3, 8013ef4 <__sfp+0x68>
 8013eb0:	6836      	ldr	r6, [r6, #0]
 8013eb2:	e7f7      	b.n	8013ea4 <__sfp+0x18>
 8013eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013eb8:	b9d5      	cbnz	r5, 8013ef0 <__sfp+0x64>
 8013eba:	4b16      	ldr	r3, [pc, #88]	; (8013f14 <__sfp+0x88>)
 8013ebc:	60e3      	str	r3, [r4, #12]
 8013ebe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013ec2:	6665      	str	r5, [r4, #100]	; 0x64
 8013ec4:	f000 f847 	bl	8013f56 <__retarget_lock_init_recursive>
 8013ec8:	f7ff ff96 	bl	8013df8 <__sfp_lock_release>
 8013ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013ed4:	6025      	str	r5, [r4, #0]
 8013ed6:	61a5      	str	r5, [r4, #24]
 8013ed8:	2208      	movs	r2, #8
 8013eda:	4629      	mov	r1, r5
 8013edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ee0:	f7ff fe34 	bl	8013b4c <memset>
 8013ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013eec:	4620      	mov	r0, r4
 8013eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ef0:	3468      	adds	r4, #104	; 0x68
 8013ef2:	e7d9      	b.n	8013ea8 <__sfp+0x1c>
 8013ef4:	2104      	movs	r1, #4
 8013ef6:	4638      	mov	r0, r7
 8013ef8:	f7ff ff62 	bl	8013dc0 <__sfmoreglue>
 8013efc:	4604      	mov	r4, r0
 8013efe:	6030      	str	r0, [r6, #0]
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d1d5      	bne.n	8013eb0 <__sfp+0x24>
 8013f04:	f7ff ff78 	bl	8013df8 <__sfp_lock_release>
 8013f08:	230c      	movs	r3, #12
 8013f0a:	603b      	str	r3, [r7, #0]
 8013f0c:	e7ee      	b.n	8013eec <__sfp+0x60>
 8013f0e:	bf00      	nop
 8013f10:	0801793c 	.word	0x0801793c
 8013f14:	ffff0001 	.word	0xffff0001

08013f18 <_fwalk_reent>:
 8013f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f1c:	4606      	mov	r6, r0
 8013f1e:	4688      	mov	r8, r1
 8013f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f24:	2700      	movs	r7, #0
 8013f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8013f2e:	d505      	bpl.n	8013f3c <_fwalk_reent+0x24>
 8013f30:	6824      	ldr	r4, [r4, #0]
 8013f32:	2c00      	cmp	r4, #0
 8013f34:	d1f7      	bne.n	8013f26 <_fwalk_reent+0xe>
 8013f36:	4638      	mov	r0, r7
 8013f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f3c:	89ab      	ldrh	r3, [r5, #12]
 8013f3e:	2b01      	cmp	r3, #1
 8013f40:	d907      	bls.n	8013f52 <_fwalk_reent+0x3a>
 8013f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f46:	3301      	adds	r3, #1
 8013f48:	d003      	beq.n	8013f52 <_fwalk_reent+0x3a>
 8013f4a:	4629      	mov	r1, r5
 8013f4c:	4630      	mov	r0, r6
 8013f4e:	47c0      	blx	r8
 8013f50:	4307      	orrs	r7, r0
 8013f52:	3568      	adds	r5, #104	; 0x68
 8013f54:	e7e9      	b.n	8013f2a <_fwalk_reent+0x12>

08013f56 <__retarget_lock_init_recursive>:
 8013f56:	4770      	bx	lr

08013f58 <__retarget_lock_acquire_recursive>:
 8013f58:	4770      	bx	lr

08013f5a <__retarget_lock_release_recursive>:
 8013f5a:	4770      	bx	lr

08013f5c <__malloc_lock>:
 8013f5c:	4801      	ldr	r0, [pc, #4]	; (8013f64 <__malloc_lock+0x8>)
 8013f5e:	f7ff bffb 	b.w	8013f58 <__retarget_lock_acquire_recursive>
 8013f62:	bf00      	nop
 8013f64:	2001ebf4 	.word	0x2001ebf4

08013f68 <__malloc_unlock>:
 8013f68:	4801      	ldr	r0, [pc, #4]	; (8013f70 <__malloc_unlock+0x8>)
 8013f6a:	f7ff bff6 	b.w	8013f5a <__retarget_lock_release_recursive>
 8013f6e:	bf00      	nop
 8013f70:	2001ebf4 	.word	0x2001ebf4

08013f74 <__sfputc_r>:
 8013f74:	6893      	ldr	r3, [r2, #8]
 8013f76:	3b01      	subs	r3, #1
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	b410      	push	{r4}
 8013f7c:	6093      	str	r3, [r2, #8]
 8013f7e:	da08      	bge.n	8013f92 <__sfputc_r+0x1e>
 8013f80:	6994      	ldr	r4, [r2, #24]
 8013f82:	42a3      	cmp	r3, r4
 8013f84:	db01      	blt.n	8013f8a <__sfputc_r+0x16>
 8013f86:	290a      	cmp	r1, #10
 8013f88:	d103      	bne.n	8013f92 <__sfputc_r+0x1e>
 8013f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f8e:	f000 bb23 	b.w	80145d8 <__swbuf_r>
 8013f92:	6813      	ldr	r3, [r2, #0]
 8013f94:	1c58      	adds	r0, r3, #1
 8013f96:	6010      	str	r0, [r2, #0]
 8013f98:	7019      	strb	r1, [r3, #0]
 8013f9a:	4608      	mov	r0, r1
 8013f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fa0:	4770      	bx	lr

08013fa2 <__sfputs_r>:
 8013fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa4:	4606      	mov	r6, r0
 8013fa6:	460f      	mov	r7, r1
 8013fa8:	4614      	mov	r4, r2
 8013faa:	18d5      	adds	r5, r2, r3
 8013fac:	42ac      	cmp	r4, r5
 8013fae:	d101      	bne.n	8013fb4 <__sfputs_r+0x12>
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	e007      	b.n	8013fc4 <__sfputs_r+0x22>
 8013fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fb8:	463a      	mov	r2, r7
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f7ff ffda 	bl	8013f74 <__sfputc_r>
 8013fc0:	1c43      	adds	r3, r0, #1
 8013fc2:	d1f3      	bne.n	8013fac <__sfputs_r+0xa>
 8013fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013fc8 <_vfiprintf_r>:
 8013fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fcc:	460d      	mov	r5, r1
 8013fce:	b09d      	sub	sp, #116	; 0x74
 8013fd0:	4614      	mov	r4, r2
 8013fd2:	4698      	mov	r8, r3
 8013fd4:	4606      	mov	r6, r0
 8013fd6:	b118      	cbz	r0, 8013fe0 <_vfiprintf_r+0x18>
 8013fd8:	6983      	ldr	r3, [r0, #24]
 8013fda:	b90b      	cbnz	r3, 8013fe0 <_vfiprintf_r+0x18>
 8013fdc:	f7ff ff1e 	bl	8013e1c <__sinit>
 8013fe0:	4b89      	ldr	r3, [pc, #548]	; (8014208 <_vfiprintf_r+0x240>)
 8013fe2:	429d      	cmp	r5, r3
 8013fe4:	d11b      	bne.n	801401e <_vfiprintf_r+0x56>
 8013fe6:	6875      	ldr	r5, [r6, #4]
 8013fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fea:	07d9      	lsls	r1, r3, #31
 8013fec:	d405      	bmi.n	8013ffa <_vfiprintf_r+0x32>
 8013fee:	89ab      	ldrh	r3, [r5, #12]
 8013ff0:	059a      	lsls	r2, r3, #22
 8013ff2:	d402      	bmi.n	8013ffa <_vfiprintf_r+0x32>
 8013ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ff6:	f7ff ffaf 	bl	8013f58 <__retarget_lock_acquire_recursive>
 8013ffa:	89ab      	ldrh	r3, [r5, #12]
 8013ffc:	071b      	lsls	r3, r3, #28
 8013ffe:	d501      	bpl.n	8014004 <_vfiprintf_r+0x3c>
 8014000:	692b      	ldr	r3, [r5, #16]
 8014002:	b9eb      	cbnz	r3, 8014040 <_vfiprintf_r+0x78>
 8014004:	4629      	mov	r1, r5
 8014006:	4630      	mov	r0, r6
 8014008:	f000 fb4a 	bl	80146a0 <__swsetup_r>
 801400c:	b1c0      	cbz	r0, 8014040 <_vfiprintf_r+0x78>
 801400e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014010:	07dc      	lsls	r4, r3, #31
 8014012:	d50e      	bpl.n	8014032 <_vfiprintf_r+0x6a>
 8014014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014018:	b01d      	add	sp, #116	; 0x74
 801401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801401e:	4b7b      	ldr	r3, [pc, #492]	; (801420c <_vfiprintf_r+0x244>)
 8014020:	429d      	cmp	r5, r3
 8014022:	d101      	bne.n	8014028 <_vfiprintf_r+0x60>
 8014024:	68b5      	ldr	r5, [r6, #8]
 8014026:	e7df      	b.n	8013fe8 <_vfiprintf_r+0x20>
 8014028:	4b79      	ldr	r3, [pc, #484]	; (8014210 <_vfiprintf_r+0x248>)
 801402a:	429d      	cmp	r5, r3
 801402c:	bf08      	it	eq
 801402e:	68f5      	ldreq	r5, [r6, #12]
 8014030:	e7da      	b.n	8013fe8 <_vfiprintf_r+0x20>
 8014032:	89ab      	ldrh	r3, [r5, #12]
 8014034:	0598      	lsls	r0, r3, #22
 8014036:	d4ed      	bmi.n	8014014 <_vfiprintf_r+0x4c>
 8014038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801403a:	f7ff ff8e 	bl	8013f5a <__retarget_lock_release_recursive>
 801403e:	e7e9      	b.n	8014014 <_vfiprintf_r+0x4c>
 8014040:	2300      	movs	r3, #0
 8014042:	9309      	str	r3, [sp, #36]	; 0x24
 8014044:	2320      	movs	r3, #32
 8014046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801404a:	f8cd 800c 	str.w	r8, [sp, #12]
 801404e:	2330      	movs	r3, #48	; 0x30
 8014050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014214 <_vfiprintf_r+0x24c>
 8014054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014058:	f04f 0901 	mov.w	r9, #1
 801405c:	4623      	mov	r3, r4
 801405e:	469a      	mov	sl, r3
 8014060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014064:	b10a      	cbz	r2, 801406a <_vfiprintf_r+0xa2>
 8014066:	2a25      	cmp	r2, #37	; 0x25
 8014068:	d1f9      	bne.n	801405e <_vfiprintf_r+0x96>
 801406a:	ebba 0b04 	subs.w	fp, sl, r4
 801406e:	d00b      	beq.n	8014088 <_vfiprintf_r+0xc0>
 8014070:	465b      	mov	r3, fp
 8014072:	4622      	mov	r2, r4
 8014074:	4629      	mov	r1, r5
 8014076:	4630      	mov	r0, r6
 8014078:	f7ff ff93 	bl	8013fa2 <__sfputs_r>
 801407c:	3001      	adds	r0, #1
 801407e:	f000 80aa 	beq.w	80141d6 <_vfiprintf_r+0x20e>
 8014082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014084:	445a      	add	r2, fp
 8014086:	9209      	str	r2, [sp, #36]	; 0x24
 8014088:	f89a 3000 	ldrb.w	r3, [sl]
 801408c:	2b00      	cmp	r3, #0
 801408e:	f000 80a2 	beq.w	80141d6 <_vfiprintf_r+0x20e>
 8014092:	2300      	movs	r3, #0
 8014094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801409c:	f10a 0a01 	add.w	sl, sl, #1
 80140a0:	9304      	str	r3, [sp, #16]
 80140a2:	9307      	str	r3, [sp, #28]
 80140a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140a8:	931a      	str	r3, [sp, #104]	; 0x68
 80140aa:	4654      	mov	r4, sl
 80140ac:	2205      	movs	r2, #5
 80140ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140b2:	4858      	ldr	r0, [pc, #352]	; (8014214 <_vfiprintf_r+0x24c>)
 80140b4:	f7ec f89c 	bl	80001f0 <memchr>
 80140b8:	9a04      	ldr	r2, [sp, #16]
 80140ba:	b9d8      	cbnz	r0, 80140f4 <_vfiprintf_r+0x12c>
 80140bc:	06d1      	lsls	r1, r2, #27
 80140be:	bf44      	itt	mi
 80140c0:	2320      	movmi	r3, #32
 80140c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140c6:	0713      	lsls	r3, r2, #28
 80140c8:	bf44      	itt	mi
 80140ca:	232b      	movmi	r3, #43	; 0x2b
 80140cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140d0:	f89a 3000 	ldrb.w	r3, [sl]
 80140d4:	2b2a      	cmp	r3, #42	; 0x2a
 80140d6:	d015      	beq.n	8014104 <_vfiprintf_r+0x13c>
 80140d8:	9a07      	ldr	r2, [sp, #28]
 80140da:	4654      	mov	r4, sl
 80140dc:	2000      	movs	r0, #0
 80140de:	f04f 0c0a 	mov.w	ip, #10
 80140e2:	4621      	mov	r1, r4
 80140e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140e8:	3b30      	subs	r3, #48	; 0x30
 80140ea:	2b09      	cmp	r3, #9
 80140ec:	d94e      	bls.n	801418c <_vfiprintf_r+0x1c4>
 80140ee:	b1b0      	cbz	r0, 801411e <_vfiprintf_r+0x156>
 80140f0:	9207      	str	r2, [sp, #28]
 80140f2:	e014      	b.n	801411e <_vfiprintf_r+0x156>
 80140f4:	eba0 0308 	sub.w	r3, r0, r8
 80140f8:	fa09 f303 	lsl.w	r3, r9, r3
 80140fc:	4313      	orrs	r3, r2
 80140fe:	9304      	str	r3, [sp, #16]
 8014100:	46a2      	mov	sl, r4
 8014102:	e7d2      	b.n	80140aa <_vfiprintf_r+0xe2>
 8014104:	9b03      	ldr	r3, [sp, #12]
 8014106:	1d19      	adds	r1, r3, #4
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	9103      	str	r1, [sp, #12]
 801410c:	2b00      	cmp	r3, #0
 801410e:	bfbb      	ittet	lt
 8014110:	425b      	neglt	r3, r3
 8014112:	f042 0202 	orrlt.w	r2, r2, #2
 8014116:	9307      	strge	r3, [sp, #28]
 8014118:	9307      	strlt	r3, [sp, #28]
 801411a:	bfb8      	it	lt
 801411c:	9204      	strlt	r2, [sp, #16]
 801411e:	7823      	ldrb	r3, [r4, #0]
 8014120:	2b2e      	cmp	r3, #46	; 0x2e
 8014122:	d10c      	bne.n	801413e <_vfiprintf_r+0x176>
 8014124:	7863      	ldrb	r3, [r4, #1]
 8014126:	2b2a      	cmp	r3, #42	; 0x2a
 8014128:	d135      	bne.n	8014196 <_vfiprintf_r+0x1ce>
 801412a:	9b03      	ldr	r3, [sp, #12]
 801412c:	1d1a      	adds	r2, r3, #4
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	9203      	str	r2, [sp, #12]
 8014132:	2b00      	cmp	r3, #0
 8014134:	bfb8      	it	lt
 8014136:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801413a:	3402      	adds	r4, #2
 801413c:	9305      	str	r3, [sp, #20]
 801413e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014224 <_vfiprintf_r+0x25c>
 8014142:	7821      	ldrb	r1, [r4, #0]
 8014144:	2203      	movs	r2, #3
 8014146:	4650      	mov	r0, sl
 8014148:	f7ec f852 	bl	80001f0 <memchr>
 801414c:	b140      	cbz	r0, 8014160 <_vfiprintf_r+0x198>
 801414e:	2340      	movs	r3, #64	; 0x40
 8014150:	eba0 000a 	sub.w	r0, r0, sl
 8014154:	fa03 f000 	lsl.w	r0, r3, r0
 8014158:	9b04      	ldr	r3, [sp, #16]
 801415a:	4303      	orrs	r3, r0
 801415c:	3401      	adds	r4, #1
 801415e:	9304      	str	r3, [sp, #16]
 8014160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014164:	482c      	ldr	r0, [pc, #176]	; (8014218 <_vfiprintf_r+0x250>)
 8014166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801416a:	2206      	movs	r2, #6
 801416c:	f7ec f840 	bl	80001f0 <memchr>
 8014170:	2800      	cmp	r0, #0
 8014172:	d03f      	beq.n	80141f4 <_vfiprintf_r+0x22c>
 8014174:	4b29      	ldr	r3, [pc, #164]	; (801421c <_vfiprintf_r+0x254>)
 8014176:	bb1b      	cbnz	r3, 80141c0 <_vfiprintf_r+0x1f8>
 8014178:	9b03      	ldr	r3, [sp, #12]
 801417a:	3307      	adds	r3, #7
 801417c:	f023 0307 	bic.w	r3, r3, #7
 8014180:	3308      	adds	r3, #8
 8014182:	9303      	str	r3, [sp, #12]
 8014184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014186:	443b      	add	r3, r7
 8014188:	9309      	str	r3, [sp, #36]	; 0x24
 801418a:	e767      	b.n	801405c <_vfiprintf_r+0x94>
 801418c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014190:	460c      	mov	r4, r1
 8014192:	2001      	movs	r0, #1
 8014194:	e7a5      	b.n	80140e2 <_vfiprintf_r+0x11a>
 8014196:	2300      	movs	r3, #0
 8014198:	3401      	adds	r4, #1
 801419a:	9305      	str	r3, [sp, #20]
 801419c:	4619      	mov	r1, r3
 801419e:	f04f 0c0a 	mov.w	ip, #10
 80141a2:	4620      	mov	r0, r4
 80141a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141a8:	3a30      	subs	r2, #48	; 0x30
 80141aa:	2a09      	cmp	r2, #9
 80141ac:	d903      	bls.n	80141b6 <_vfiprintf_r+0x1ee>
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d0c5      	beq.n	801413e <_vfiprintf_r+0x176>
 80141b2:	9105      	str	r1, [sp, #20]
 80141b4:	e7c3      	b.n	801413e <_vfiprintf_r+0x176>
 80141b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80141ba:	4604      	mov	r4, r0
 80141bc:	2301      	movs	r3, #1
 80141be:	e7f0      	b.n	80141a2 <_vfiprintf_r+0x1da>
 80141c0:	ab03      	add	r3, sp, #12
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	462a      	mov	r2, r5
 80141c6:	4b16      	ldr	r3, [pc, #88]	; (8014220 <_vfiprintf_r+0x258>)
 80141c8:	a904      	add	r1, sp, #16
 80141ca:	4630      	mov	r0, r6
 80141cc:	f3af 8000 	nop.w
 80141d0:	4607      	mov	r7, r0
 80141d2:	1c78      	adds	r0, r7, #1
 80141d4:	d1d6      	bne.n	8014184 <_vfiprintf_r+0x1bc>
 80141d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141d8:	07d9      	lsls	r1, r3, #31
 80141da:	d405      	bmi.n	80141e8 <_vfiprintf_r+0x220>
 80141dc:	89ab      	ldrh	r3, [r5, #12]
 80141de:	059a      	lsls	r2, r3, #22
 80141e0:	d402      	bmi.n	80141e8 <_vfiprintf_r+0x220>
 80141e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141e4:	f7ff feb9 	bl	8013f5a <__retarget_lock_release_recursive>
 80141e8:	89ab      	ldrh	r3, [r5, #12]
 80141ea:	065b      	lsls	r3, r3, #25
 80141ec:	f53f af12 	bmi.w	8014014 <_vfiprintf_r+0x4c>
 80141f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141f2:	e711      	b.n	8014018 <_vfiprintf_r+0x50>
 80141f4:	ab03      	add	r3, sp, #12
 80141f6:	9300      	str	r3, [sp, #0]
 80141f8:	462a      	mov	r2, r5
 80141fa:	4b09      	ldr	r3, [pc, #36]	; (8014220 <_vfiprintf_r+0x258>)
 80141fc:	a904      	add	r1, sp, #16
 80141fe:	4630      	mov	r0, r6
 8014200:	f000 f880 	bl	8014304 <_printf_i>
 8014204:	e7e4      	b.n	80141d0 <_vfiprintf_r+0x208>
 8014206:	bf00      	nop
 8014208:	08017960 	.word	0x08017960
 801420c:	08017980 	.word	0x08017980
 8014210:	08017940 	.word	0x08017940
 8014214:	080179a0 	.word	0x080179a0
 8014218:	080179aa 	.word	0x080179aa
 801421c:	00000000 	.word	0x00000000
 8014220:	08013fa3 	.word	0x08013fa3
 8014224:	080179a6 	.word	0x080179a6

08014228 <_printf_common>:
 8014228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801422c:	4616      	mov	r6, r2
 801422e:	4699      	mov	r9, r3
 8014230:	688a      	ldr	r2, [r1, #8]
 8014232:	690b      	ldr	r3, [r1, #16]
 8014234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014238:	4293      	cmp	r3, r2
 801423a:	bfb8      	it	lt
 801423c:	4613      	movlt	r3, r2
 801423e:	6033      	str	r3, [r6, #0]
 8014240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014244:	4607      	mov	r7, r0
 8014246:	460c      	mov	r4, r1
 8014248:	b10a      	cbz	r2, 801424e <_printf_common+0x26>
 801424a:	3301      	adds	r3, #1
 801424c:	6033      	str	r3, [r6, #0]
 801424e:	6823      	ldr	r3, [r4, #0]
 8014250:	0699      	lsls	r1, r3, #26
 8014252:	bf42      	ittt	mi
 8014254:	6833      	ldrmi	r3, [r6, #0]
 8014256:	3302      	addmi	r3, #2
 8014258:	6033      	strmi	r3, [r6, #0]
 801425a:	6825      	ldr	r5, [r4, #0]
 801425c:	f015 0506 	ands.w	r5, r5, #6
 8014260:	d106      	bne.n	8014270 <_printf_common+0x48>
 8014262:	f104 0a19 	add.w	sl, r4, #25
 8014266:	68e3      	ldr	r3, [r4, #12]
 8014268:	6832      	ldr	r2, [r6, #0]
 801426a:	1a9b      	subs	r3, r3, r2
 801426c:	42ab      	cmp	r3, r5
 801426e:	dc26      	bgt.n	80142be <_printf_common+0x96>
 8014270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014274:	1e13      	subs	r3, r2, #0
 8014276:	6822      	ldr	r2, [r4, #0]
 8014278:	bf18      	it	ne
 801427a:	2301      	movne	r3, #1
 801427c:	0692      	lsls	r2, r2, #26
 801427e:	d42b      	bmi.n	80142d8 <_printf_common+0xb0>
 8014280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014284:	4649      	mov	r1, r9
 8014286:	4638      	mov	r0, r7
 8014288:	47c0      	blx	r8
 801428a:	3001      	adds	r0, #1
 801428c:	d01e      	beq.n	80142cc <_printf_common+0xa4>
 801428e:	6823      	ldr	r3, [r4, #0]
 8014290:	68e5      	ldr	r5, [r4, #12]
 8014292:	6832      	ldr	r2, [r6, #0]
 8014294:	f003 0306 	and.w	r3, r3, #6
 8014298:	2b04      	cmp	r3, #4
 801429a:	bf08      	it	eq
 801429c:	1aad      	subeq	r5, r5, r2
 801429e:	68a3      	ldr	r3, [r4, #8]
 80142a0:	6922      	ldr	r2, [r4, #16]
 80142a2:	bf0c      	ite	eq
 80142a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80142a8:	2500      	movne	r5, #0
 80142aa:	4293      	cmp	r3, r2
 80142ac:	bfc4      	itt	gt
 80142ae:	1a9b      	subgt	r3, r3, r2
 80142b0:	18ed      	addgt	r5, r5, r3
 80142b2:	2600      	movs	r6, #0
 80142b4:	341a      	adds	r4, #26
 80142b6:	42b5      	cmp	r5, r6
 80142b8:	d11a      	bne.n	80142f0 <_printf_common+0xc8>
 80142ba:	2000      	movs	r0, #0
 80142bc:	e008      	b.n	80142d0 <_printf_common+0xa8>
 80142be:	2301      	movs	r3, #1
 80142c0:	4652      	mov	r2, sl
 80142c2:	4649      	mov	r1, r9
 80142c4:	4638      	mov	r0, r7
 80142c6:	47c0      	blx	r8
 80142c8:	3001      	adds	r0, #1
 80142ca:	d103      	bne.n	80142d4 <_printf_common+0xac>
 80142cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142d4:	3501      	adds	r5, #1
 80142d6:	e7c6      	b.n	8014266 <_printf_common+0x3e>
 80142d8:	18e1      	adds	r1, r4, r3
 80142da:	1c5a      	adds	r2, r3, #1
 80142dc:	2030      	movs	r0, #48	; 0x30
 80142de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80142e2:	4422      	add	r2, r4
 80142e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80142e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80142ec:	3302      	adds	r3, #2
 80142ee:	e7c7      	b.n	8014280 <_printf_common+0x58>
 80142f0:	2301      	movs	r3, #1
 80142f2:	4622      	mov	r2, r4
 80142f4:	4649      	mov	r1, r9
 80142f6:	4638      	mov	r0, r7
 80142f8:	47c0      	blx	r8
 80142fa:	3001      	adds	r0, #1
 80142fc:	d0e6      	beq.n	80142cc <_printf_common+0xa4>
 80142fe:	3601      	adds	r6, #1
 8014300:	e7d9      	b.n	80142b6 <_printf_common+0x8e>
	...

08014304 <_printf_i>:
 8014304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014308:	7e0f      	ldrb	r7, [r1, #24]
 801430a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801430c:	2f78      	cmp	r7, #120	; 0x78
 801430e:	4691      	mov	r9, r2
 8014310:	4680      	mov	r8, r0
 8014312:	460c      	mov	r4, r1
 8014314:	469a      	mov	sl, r3
 8014316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801431a:	d807      	bhi.n	801432c <_printf_i+0x28>
 801431c:	2f62      	cmp	r7, #98	; 0x62
 801431e:	d80a      	bhi.n	8014336 <_printf_i+0x32>
 8014320:	2f00      	cmp	r7, #0
 8014322:	f000 80d8 	beq.w	80144d6 <_printf_i+0x1d2>
 8014326:	2f58      	cmp	r7, #88	; 0x58
 8014328:	f000 80a3 	beq.w	8014472 <_printf_i+0x16e>
 801432c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014334:	e03a      	b.n	80143ac <_printf_i+0xa8>
 8014336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801433a:	2b15      	cmp	r3, #21
 801433c:	d8f6      	bhi.n	801432c <_printf_i+0x28>
 801433e:	a101      	add	r1, pc, #4	; (adr r1, 8014344 <_printf_i+0x40>)
 8014340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014344:	0801439d 	.word	0x0801439d
 8014348:	080143b1 	.word	0x080143b1
 801434c:	0801432d 	.word	0x0801432d
 8014350:	0801432d 	.word	0x0801432d
 8014354:	0801432d 	.word	0x0801432d
 8014358:	0801432d 	.word	0x0801432d
 801435c:	080143b1 	.word	0x080143b1
 8014360:	0801432d 	.word	0x0801432d
 8014364:	0801432d 	.word	0x0801432d
 8014368:	0801432d 	.word	0x0801432d
 801436c:	0801432d 	.word	0x0801432d
 8014370:	080144bd 	.word	0x080144bd
 8014374:	080143e1 	.word	0x080143e1
 8014378:	0801449f 	.word	0x0801449f
 801437c:	0801432d 	.word	0x0801432d
 8014380:	0801432d 	.word	0x0801432d
 8014384:	080144df 	.word	0x080144df
 8014388:	0801432d 	.word	0x0801432d
 801438c:	080143e1 	.word	0x080143e1
 8014390:	0801432d 	.word	0x0801432d
 8014394:	0801432d 	.word	0x0801432d
 8014398:	080144a7 	.word	0x080144a7
 801439c:	682b      	ldr	r3, [r5, #0]
 801439e:	1d1a      	adds	r2, r3, #4
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	602a      	str	r2, [r5, #0]
 80143a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80143ac:	2301      	movs	r3, #1
 80143ae:	e0a3      	b.n	80144f8 <_printf_i+0x1f4>
 80143b0:	6820      	ldr	r0, [r4, #0]
 80143b2:	6829      	ldr	r1, [r5, #0]
 80143b4:	0606      	lsls	r6, r0, #24
 80143b6:	f101 0304 	add.w	r3, r1, #4
 80143ba:	d50a      	bpl.n	80143d2 <_printf_i+0xce>
 80143bc:	680e      	ldr	r6, [r1, #0]
 80143be:	602b      	str	r3, [r5, #0]
 80143c0:	2e00      	cmp	r6, #0
 80143c2:	da03      	bge.n	80143cc <_printf_i+0xc8>
 80143c4:	232d      	movs	r3, #45	; 0x2d
 80143c6:	4276      	negs	r6, r6
 80143c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143cc:	485e      	ldr	r0, [pc, #376]	; (8014548 <_printf_i+0x244>)
 80143ce:	230a      	movs	r3, #10
 80143d0:	e019      	b.n	8014406 <_printf_i+0x102>
 80143d2:	680e      	ldr	r6, [r1, #0]
 80143d4:	602b      	str	r3, [r5, #0]
 80143d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80143da:	bf18      	it	ne
 80143dc:	b236      	sxthne	r6, r6
 80143de:	e7ef      	b.n	80143c0 <_printf_i+0xbc>
 80143e0:	682b      	ldr	r3, [r5, #0]
 80143e2:	6820      	ldr	r0, [r4, #0]
 80143e4:	1d19      	adds	r1, r3, #4
 80143e6:	6029      	str	r1, [r5, #0]
 80143e8:	0601      	lsls	r1, r0, #24
 80143ea:	d501      	bpl.n	80143f0 <_printf_i+0xec>
 80143ec:	681e      	ldr	r6, [r3, #0]
 80143ee:	e002      	b.n	80143f6 <_printf_i+0xf2>
 80143f0:	0646      	lsls	r6, r0, #25
 80143f2:	d5fb      	bpl.n	80143ec <_printf_i+0xe8>
 80143f4:	881e      	ldrh	r6, [r3, #0]
 80143f6:	4854      	ldr	r0, [pc, #336]	; (8014548 <_printf_i+0x244>)
 80143f8:	2f6f      	cmp	r7, #111	; 0x6f
 80143fa:	bf0c      	ite	eq
 80143fc:	2308      	moveq	r3, #8
 80143fe:	230a      	movne	r3, #10
 8014400:	2100      	movs	r1, #0
 8014402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014406:	6865      	ldr	r5, [r4, #4]
 8014408:	60a5      	str	r5, [r4, #8]
 801440a:	2d00      	cmp	r5, #0
 801440c:	bfa2      	ittt	ge
 801440e:	6821      	ldrge	r1, [r4, #0]
 8014410:	f021 0104 	bicge.w	r1, r1, #4
 8014414:	6021      	strge	r1, [r4, #0]
 8014416:	b90e      	cbnz	r6, 801441c <_printf_i+0x118>
 8014418:	2d00      	cmp	r5, #0
 801441a:	d04d      	beq.n	80144b8 <_printf_i+0x1b4>
 801441c:	4615      	mov	r5, r2
 801441e:	fbb6 f1f3 	udiv	r1, r6, r3
 8014422:	fb03 6711 	mls	r7, r3, r1, r6
 8014426:	5dc7      	ldrb	r7, [r0, r7]
 8014428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801442c:	4637      	mov	r7, r6
 801442e:	42bb      	cmp	r3, r7
 8014430:	460e      	mov	r6, r1
 8014432:	d9f4      	bls.n	801441e <_printf_i+0x11a>
 8014434:	2b08      	cmp	r3, #8
 8014436:	d10b      	bne.n	8014450 <_printf_i+0x14c>
 8014438:	6823      	ldr	r3, [r4, #0]
 801443a:	07de      	lsls	r6, r3, #31
 801443c:	d508      	bpl.n	8014450 <_printf_i+0x14c>
 801443e:	6923      	ldr	r3, [r4, #16]
 8014440:	6861      	ldr	r1, [r4, #4]
 8014442:	4299      	cmp	r1, r3
 8014444:	bfde      	ittt	le
 8014446:	2330      	movle	r3, #48	; 0x30
 8014448:	f805 3c01 	strble.w	r3, [r5, #-1]
 801444c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014450:	1b52      	subs	r2, r2, r5
 8014452:	6122      	str	r2, [r4, #16]
 8014454:	f8cd a000 	str.w	sl, [sp]
 8014458:	464b      	mov	r3, r9
 801445a:	aa03      	add	r2, sp, #12
 801445c:	4621      	mov	r1, r4
 801445e:	4640      	mov	r0, r8
 8014460:	f7ff fee2 	bl	8014228 <_printf_common>
 8014464:	3001      	adds	r0, #1
 8014466:	d14c      	bne.n	8014502 <_printf_i+0x1fe>
 8014468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801446c:	b004      	add	sp, #16
 801446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014472:	4835      	ldr	r0, [pc, #212]	; (8014548 <_printf_i+0x244>)
 8014474:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014478:	6829      	ldr	r1, [r5, #0]
 801447a:	6823      	ldr	r3, [r4, #0]
 801447c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014480:	6029      	str	r1, [r5, #0]
 8014482:	061d      	lsls	r5, r3, #24
 8014484:	d514      	bpl.n	80144b0 <_printf_i+0x1ac>
 8014486:	07df      	lsls	r7, r3, #31
 8014488:	bf44      	itt	mi
 801448a:	f043 0320 	orrmi.w	r3, r3, #32
 801448e:	6023      	strmi	r3, [r4, #0]
 8014490:	b91e      	cbnz	r6, 801449a <_printf_i+0x196>
 8014492:	6823      	ldr	r3, [r4, #0]
 8014494:	f023 0320 	bic.w	r3, r3, #32
 8014498:	6023      	str	r3, [r4, #0]
 801449a:	2310      	movs	r3, #16
 801449c:	e7b0      	b.n	8014400 <_printf_i+0xfc>
 801449e:	6823      	ldr	r3, [r4, #0]
 80144a0:	f043 0320 	orr.w	r3, r3, #32
 80144a4:	6023      	str	r3, [r4, #0]
 80144a6:	2378      	movs	r3, #120	; 0x78
 80144a8:	4828      	ldr	r0, [pc, #160]	; (801454c <_printf_i+0x248>)
 80144aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80144ae:	e7e3      	b.n	8014478 <_printf_i+0x174>
 80144b0:	0659      	lsls	r1, r3, #25
 80144b2:	bf48      	it	mi
 80144b4:	b2b6      	uxthmi	r6, r6
 80144b6:	e7e6      	b.n	8014486 <_printf_i+0x182>
 80144b8:	4615      	mov	r5, r2
 80144ba:	e7bb      	b.n	8014434 <_printf_i+0x130>
 80144bc:	682b      	ldr	r3, [r5, #0]
 80144be:	6826      	ldr	r6, [r4, #0]
 80144c0:	6961      	ldr	r1, [r4, #20]
 80144c2:	1d18      	adds	r0, r3, #4
 80144c4:	6028      	str	r0, [r5, #0]
 80144c6:	0635      	lsls	r5, r6, #24
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	d501      	bpl.n	80144d0 <_printf_i+0x1cc>
 80144cc:	6019      	str	r1, [r3, #0]
 80144ce:	e002      	b.n	80144d6 <_printf_i+0x1d2>
 80144d0:	0670      	lsls	r0, r6, #25
 80144d2:	d5fb      	bpl.n	80144cc <_printf_i+0x1c8>
 80144d4:	8019      	strh	r1, [r3, #0]
 80144d6:	2300      	movs	r3, #0
 80144d8:	6123      	str	r3, [r4, #16]
 80144da:	4615      	mov	r5, r2
 80144dc:	e7ba      	b.n	8014454 <_printf_i+0x150>
 80144de:	682b      	ldr	r3, [r5, #0]
 80144e0:	1d1a      	adds	r2, r3, #4
 80144e2:	602a      	str	r2, [r5, #0]
 80144e4:	681d      	ldr	r5, [r3, #0]
 80144e6:	6862      	ldr	r2, [r4, #4]
 80144e8:	2100      	movs	r1, #0
 80144ea:	4628      	mov	r0, r5
 80144ec:	f7eb fe80 	bl	80001f0 <memchr>
 80144f0:	b108      	cbz	r0, 80144f6 <_printf_i+0x1f2>
 80144f2:	1b40      	subs	r0, r0, r5
 80144f4:	6060      	str	r0, [r4, #4]
 80144f6:	6863      	ldr	r3, [r4, #4]
 80144f8:	6123      	str	r3, [r4, #16]
 80144fa:	2300      	movs	r3, #0
 80144fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014500:	e7a8      	b.n	8014454 <_printf_i+0x150>
 8014502:	6923      	ldr	r3, [r4, #16]
 8014504:	462a      	mov	r2, r5
 8014506:	4649      	mov	r1, r9
 8014508:	4640      	mov	r0, r8
 801450a:	47d0      	blx	sl
 801450c:	3001      	adds	r0, #1
 801450e:	d0ab      	beq.n	8014468 <_printf_i+0x164>
 8014510:	6823      	ldr	r3, [r4, #0]
 8014512:	079b      	lsls	r3, r3, #30
 8014514:	d413      	bmi.n	801453e <_printf_i+0x23a>
 8014516:	68e0      	ldr	r0, [r4, #12]
 8014518:	9b03      	ldr	r3, [sp, #12]
 801451a:	4298      	cmp	r0, r3
 801451c:	bfb8      	it	lt
 801451e:	4618      	movlt	r0, r3
 8014520:	e7a4      	b.n	801446c <_printf_i+0x168>
 8014522:	2301      	movs	r3, #1
 8014524:	4632      	mov	r2, r6
 8014526:	4649      	mov	r1, r9
 8014528:	4640      	mov	r0, r8
 801452a:	47d0      	blx	sl
 801452c:	3001      	adds	r0, #1
 801452e:	d09b      	beq.n	8014468 <_printf_i+0x164>
 8014530:	3501      	adds	r5, #1
 8014532:	68e3      	ldr	r3, [r4, #12]
 8014534:	9903      	ldr	r1, [sp, #12]
 8014536:	1a5b      	subs	r3, r3, r1
 8014538:	42ab      	cmp	r3, r5
 801453a:	dcf2      	bgt.n	8014522 <_printf_i+0x21e>
 801453c:	e7eb      	b.n	8014516 <_printf_i+0x212>
 801453e:	2500      	movs	r5, #0
 8014540:	f104 0619 	add.w	r6, r4, #25
 8014544:	e7f5      	b.n	8014532 <_printf_i+0x22e>
 8014546:	bf00      	nop
 8014548:	080179b1 	.word	0x080179b1
 801454c:	080179c2 	.word	0x080179c2

08014550 <__sread>:
 8014550:	b510      	push	{r4, lr}
 8014552:	460c      	mov	r4, r1
 8014554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014558:	f000 fa5a 	bl	8014a10 <_read_r>
 801455c:	2800      	cmp	r0, #0
 801455e:	bfab      	itete	ge
 8014560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014562:	89a3      	ldrhlt	r3, [r4, #12]
 8014564:	181b      	addge	r3, r3, r0
 8014566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801456a:	bfac      	ite	ge
 801456c:	6563      	strge	r3, [r4, #84]	; 0x54
 801456e:	81a3      	strhlt	r3, [r4, #12]
 8014570:	bd10      	pop	{r4, pc}

08014572 <__swrite>:
 8014572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014576:	461f      	mov	r7, r3
 8014578:	898b      	ldrh	r3, [r1, #12]
 801457a:	05db      	lsls	r3, r3, #23
 801457c:	4605      	mov	r5, r0
 801457e:	460c      	mov	r4, r1
 8014580:	4616      	mov	r6, r2
 8014582:	d505      	bpl.n	8014590 <__swrite+0x1e>
 8014584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014588:	2302      	movs	r3, #2
 801458a:	2200      	movs	r2, #0
 801458c:	f000 f9c8 	bl	8014920 <_lseek_r>
 8014590:	89a3      	ldrh	r3, [r4, #12]
 8014592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801459a:	81a3      	strh	r3, [r4, #12]
 801459c:	4632      	mov	r2, r6
 801459e:	463b      	mov	r3, r7
 80145a0:	4628      	mov	r0, r5
 80145a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145a6:	f000 b869 	b.w	801467c <_write_r>

080145aa <__sseek>:
 80145aa:	b510      	push	{r4, lr}
 80145ac:	460c      	mov	r4, r1
 80145ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145b2:	f000 f9b5 	bl	8014920 <_lseek_r>
 80145b6:	1c43      	adds	r3, r0, #1
 80145b8:	89a3      	ldrh	r3, [r4, #12]
 80145ba:	bf15      	itete	ne
 80145bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80145be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80145c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80145c6:	81a3      	strheq	r3, [r4, #12]
 80145c8:	bf18      	it	ne
 80145ca:	81a3      	strhne	r3, [r4, #12]
 80145cc:	bd10      	pop	{r4, pc}

080145ce <__sclose>:
 80145ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145d2:	f000 b8d3 	b.w	801477c <_close_r>
	...

080145d8 <__swbuf_r>:
 80145d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145da:	460e      	mov	r6, r1
 80145dc:	4614      	mov	r4, r2
 80145de:	4605      	mov	r5, r0
 80145e0:	b118      	cbz	r0, 80145ea <__swbuf_r+0x12>
 80145e2:	6983      	ldr	r3, [r0, #24]
 80145e4:	b90b      	cbnz	r3, 80145ea <__swbuf_r+0x12>
 80145e6:	f7ff fc19 	bl	8013e1c <__sinit>
 80145ea:	4b21      	ldr	r3, [pc, #132]	; (8014670 <__swbuf_r+0x98>)
 80145ec:	429c      	cmp	r4, r3
 80145ee:	d12b      	bne.n	8014648 <__swbuf_r+0x70>
 80145f0:	686c      	ldr	r4, [r5, #4]
 80145f2:	69a3      	ldr	r3, [r4, #24]
 80145f4:	60a3      	str	r3, [r4, #8]
 80145f6:	89a3      	ldrh	r3, [r4, #12]
 80145f8:	071a      	lsls	r2, r3, #28
 80145fa:	d52f      	bpl.n	801465c <__swbuf_r+0x84>
 80145fc:	6923      	ldr	r3, [r4, #16]
 80145fe:	b36b      	cbz	r3, 801465c <__swbuf_r+0x84>
 8014600:	6923      	ldr	r3, [r4, #16]
 8014602:	6820      	ldr	r0, [r4, #0]
 8014604:	1ac0      	subs	r0, r0, r3
 8014606:	6963      	ldr	r3, [r4, #20]
 8014608:	b2f6      	uxtb	r6, r6
 801460a:	4283      	cmp	r3, r0
 801460c:	4637      	mov	r7, r6
 801460e:	dc04      	bgt.n	801461a <__swbuf_r+0x42>
 8014610:	4621      	mov	r1, r4
 8014612:	4628      	mov	r0, r5
 8014614:	f000 f948 	bl	80148a8 <_fflush_r>
 8014618:	bb30      	cbnz	r0, 8014668 <__swbuf_r+0x90>
 801461a:	68a3      	ldr	r3, [r4, #8]
 801461c:	3b01      	subs	r3, #1
 801461e:	60a3      	str	r3, [r4, #8]
 8014620:	6823      	ldr	r3, [r4, #0]
 8014622:	1c5a      	adds	r2, r3, #1
 8014624:	6022      	str	r2, [r4, #0]
 8014626:	701e      	strb	r6, [r3, #0]
 8014628:	6963      	ldr	r3, [r4, #20]
 801462a:	3001      	adds	r0, #1
 801462c:	4283      	cmp	r3, r0
 801462e:	d004      	beq.n	801463a <__swbuf_r+0x62>
 8014630:	89a3      	ldrh	r3, [r4, #12]
 8014632:	07db      	lsls	r3, r3, #31
 8014634:	d506      	bpl.n	8014644 <__swbuf_r+0x6c>
 8014636:	2e0a      	cmp	r6, #10
 8014638:	d104      	bne.n	8014644 <__swbuf_r+0x6c>
 801463a:	4621      	mov	r1, r4
 801463c:	4628      	mov	r0, r5
 801463e:	f000 f933 	bl	80148a8 <_fflush_r>
 8014642:	b988      	cbnz	r0, 8014668 <__swbuf_r+0x90>
 8014644:	4638      	mov	r0, r7
 8014646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014648:	4b0a      	ldr	r3, [pc, #40]	; (8014674 <__swbuf_r+0x9c>)
 801464a:	429c      	cmp	r4, r3
 801464c:	d101      	bne.n	8014652 <__swbuf_r+0x7a>
 801464e:	68ac      	ldr	r4, [r5, #8]
 8014650:	e7cf      	b.n	80145f2 <__swbuf_r+0x1a>
 8014652:	4b09      	ldr	r3, [pc, #36]	; (8014678 <__swbuf_r+0xa0>)
 8014654:	429c      	cmp	r4, r3
 8014656:	bf08      	it	eq
 8014658:	68ec      	ldreq	r4, [r5, #12]
 801465a:	e7ca      	b.n	80145f2 <__swbuf_r+0x1a>
 801465c:	4621      	mov	r1, r4
 801465e:	4628      	mov	r0, r5
 8014660:	f000 f81e 	bl	80146a0 <__swsetup_r>
 8014664:	2800      	cmp	r0, #0
 8014666:	d0cb      	beq.n	8014600 <__swbuf_r+0x28>
 8014668:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801466c:	e7ea      	b.n	8014644 <__swbuf_r+0x6c>
 801466e:	bf00      	nop
 8014670:	08017960 	.word	0x08017960
 8014674:	08017980 	.word	0x08017980
 8014678:	08017940 	.word	0x08017940

0801467c <_write_r>:
 801467c:	b538      	push	{r3, r4, r5, lr}
 801467e:	4d07      	ldr	r5, [pc, #28]	; (801469c <_write_r+0x20>)
 8014680:	4604      	mov	r4, r0
 8014682:	4608      	mov	r0, r1
 8014684:	4611      	mov	r1, r2
 8014686:	2200      	movs	r2, #0
 8014688:	602a      	str	r2, [r5, #0]
 801468a:	461a      	mov	r2, r3
 801468c:	f7ed fe49 	bl	8002322 <_write>
 8014690:	1c43      	adds	r3, r0, #1
 8014692:	d102      	bne.n	801469a <_write_r+0x1e>
 8014694:	682b      	ldr	r3, [r5, #0]
 8014696:	b103      	cbz	r3, 801469a <_write_r+0x1e>
 8014698:	6023      	str	r3, [r4, #0]
 801469a:	bd38      	pop	{r3, r4, r5, pc}
 801469c:	2001ebf8 	.word	0x2001ebf8

080146a0 <__swsetup_r>:
 80146a0:	4b32      	ldr	r3, [pc, #200]	; (801476c <__swsetup_r+0xcc>)
 80146a2:	b570      	push	{r4, r5, r6, lr}
 80146a4:	681d      	ldr	r5, [r3, #0]
 80146a6:	4606      	mov	r6, r0
 80146a8:	460c      	mov	r4, r1
 80146aa:	b125      	cbz	r5, 80146b6 <__swsetup_r+0x16>
 80146ac:	69ab      	ldr	r3, [r5, #24]
 80146ae:	b913      	cbnz	r3, 80146b6 <__swsetup_r+0x16>
 80146b0:	4628      	mov	r0, r5
 80146b2:	f7ff fbb3 	bl	8013e1c <__sinit>
 80146b6:	4b2e      	ldr	r3, [pc, #184]	; (8014770 <__swsetup_r+0xd0>)
 80146b8:	429c      	cmp	r4, r3
 80146ba:	d10f      	bne.n	80146dc <__swsetup_r+0x3c>
 80146bc:	686c      	ldr	r4, [r5, #4]
 80146be:	89a3      	ldrh	r3, [r4, #12]
 80146c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146c4:	0719      	lsls	r1, r3, #28
 80146c6:	d42c      	bmi.n	8014722 <__swsetup_r+0x82>
 80146c8:	06dd      	lsls	r5, r3, #27
 80146ca:	d411      	bmi.n	80146f0 <__swsetup_r+0x50>
 80146cc:	2309      	movs	r3, #9
 80146ce:	6033      	str	r3, [r6, #0]
 80146d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80146d4:	81a3      	strh	r3, [r4, #12]
 80146d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146da:	e03e      	b.n	801475a <__swsetup_r+0xba>
 80146dc:	4b25      	ldr	r3, [pc, #148]	; (8014774 <__swsetup_r+0xd4>)
 80146de:	429c      	cmp	r4, r3
 80146e0:	d101      	bne.n	80146e6 <__swsetup_r+0x46>
 80146e2:	68ac      	ldr	r4, [r5, #8]
 80146e4:	e7eb      	b.n	80146be <__swsetup_r+0x1e>
 80146e6:	4b24      	ldr	r3, [pc, #144]	; (8014778 <__swsetup_r+0xd8>)
 80146e8:	429c      	cmp	r4, r3
 80146ea:	bf08      	it	eq
 80146ec:	68ec      	ldreq	r4, [r5, #12]
 80146ee:	e7e6      	b.n	80146be <__swsetup_r+0x1e>
 80146f0:	0758      	lsls	r0, r3, #29
 80146f2:	d512      	bpl.n	801471a <__swsetup_r+0x7a>
 80146f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146f6:	b141      	cbz	r1, 801470a <__swsetup_r+0x6a>
 80146f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146fc:	4299      	cmp	r1, r3
 80146fe:	d002      	beq.n	8014706 <__swsetup_r+0x66>
 8014700:	4630      	mov	r0, r6
 8014702:	f7ff fa2b 	bl	8013b5c <_free_r>
 8014706:	2300      	movs	r3, #0
 8014708:	6363      	str	r3, [r4, #52]	; 0x34
 801470a:	89a3      	ldrh	r3, [r4, #12]
 801470c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014710:	81a3      	strh	r3, [r4, #12]
 8014712:	2300      	movs	r3, #0
 8014714:	6063      	str	r3, [r4, #4]
 8014716:	6923      	ldr	r3, [r4, #16]
 8014718:	6023      	str	r3, [r4, #0]
 801471a:	89a3      	ldrh	r3, [r4, #12]
 801471c:	f043 0308 	orr.w	r3, r3, #8
 8014720:	81a3      	strh	r3, [r4, #12]
 8014722:	6923      	ldr	r3, [r4, #16]
 8014724:	b94b      	cbnz	r3, 801473a <__swsetup_r+0x9a>
 8014726:	89a3      	ldrh	r3, [r4, #12]
 8014728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801472c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014730:	d003      	beq.n	801473a <__swsetup_r+0x9a>
 8014732:	4621      	mov	r1, r4
 8014734:	4630      	mov	r0, r6
 8014736:	f000 f92b 	bl	8014990 <__smakebuf_r>
 801473a:	89a0      	ldrh	r0, [r4, #12]
 801473c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014740:	f010 0301 	ands.w	r3, r0, #1
 8014744:	d00a      	beq.n	801475c <__swsetup_r+0xbc>
 8014746:	2300      	movs	r3, #0
 8014748:	60a3      	str	r3, [r4, #8]
 801474a:	6963      	ldr	r3, [r4, #20]
 801474c:	425b      	negs	r3, r3
 801474e:	61a3      	str	r3, [r4, #24]
 8014750:	6923      	ldr	r3, [r4, #16]
 8014752:	b943      	cbnz	r3, 8014766 <__swsetup_r+0xc6>
 8014754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014758:	d1ba      	bne.n	80146d0 <__swsetup_r+0x30>
 801475a:	bd70      	pop	{r4, r5, r6, pc}
 801475c:	0781      	lsls	r1, r0, #30
 801475e:	bf58      	it	pl
 8014760:	6963      	ldrpl	r3, [r4, #20]
 8014762:	60a3      	str	r3, [r4, #8]
 8014764:	e7f4      	b.n	8014750 <__swsetup_r+0xb0>
 8014766:	2000      	movs	r0, #0
 8014768:	e7f7      	b.n	801475a <__swsetup_r+0xba>
 801476a:	bf00      	nop
 801476c:	2001c31c 	.word	0x2001c31c
 8014770:	08017960 	.word	0x08017960
 8014774:	08017980 	.word	0x08017980
 8014778:	08017940 	.word	0x08017940

0801477c <_close_r>:
 801477c:	b538      	push	{r3, r4, r5, lr}
 801477e:	4d06      	ldr	r5, [pc, #24]	; (8014798 <_close_r+0x1c>)
 8014780:	2300      	movs	r3, #0
 8014782:	4604      	mov	r4, r0
 8014784:	4608      	mov	r0, r1
 8014786:	602b      	str	r3, [r5, #0]
 8014788:	f7ed fde7 	bl	800235a <_close>
 801478c:	1c43      	adds	r3, r0, #1
 801478e:	d102      	bne.n	8014796 <_close_r+0x1a>
 8014790:	682b      	ldr	r3, [r5, #0]
 8014792:	b103      	cbz	r3, 8014796 <_close_r+0x1a>
 8014794:	6023      	str	r3, [r4, #0]
 8014796:	bd38      	pop	{r3, r4, r5, pc}
 8014798:	2001ebf8 	.word	0x2001ebf8

0801479c <__sflush_r>:
 801479c:	898a      	ldrh	r2, [r1, #12]
 801479e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147a2:	4605      	mov	r5, r0
 80147a4:	0710      	lsls	r0, r2, #28
 80147a6:	460c      	mov	r4, r1
 80147a8:	d458      	bmi.n	801485c <__sflush_r+0xc0>
 80147aa:	684b      	ldr	r3, [r1, #4]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	dc05      	bgt.n	80147bc <__sflush_r+0x20>
 80147b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	dc02      	bgt.n	80147bc <__sflush_r+0x20>
 80147b6:	2000      	movs	r0, #0
 80147b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80147be:	2e00      	cmp	r6, #0
 80147c0:	d0f9      	beq.n	80147b6 <__sflush_r+0x1a>
 80147c2:	2300      	movs	r3, #0
 80147c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80147c8:	682f      	ldr	r7, [r5, #0]
 80147ca:	602b      	str	r3, [r5, #0]
 80147cc:	d032      	beq.n	8014834 <__sflush_r+0x98>
 80147ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	075a      	lsls	r2, r3, #29
 80147d4:	d505      	bpl.n	80147e2 <__sflush_r+0x46>
 80147d6:	6863      	ldr	r3, [r4, #4]
 80147d8:	1ac0      	subs	r0, r0, r3
 80147da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80147dc:	b10b      	cbz	r3, 80147e2 <__sflush_r+0x46>
 80147de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80147e0:	1ac0      	subs	r0, r0, r3
 80147e2:	2300      	movs	r3, #0
 80147e4:	4602      	mov	r2, r0
 80147e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80147e8:	6a21      	ldr	r1, [r4, #32]
 80147ea:	4628      	mov	r0, r5
 80147ec:	47b0      	blx	r6
 80147ee:	1c43      	adds	r3, r0, #1
 80147f0:	89a3      	ldrh	r3, [r4, #12]
 80147f2:	d106      	bne.n	8014802 <__sflush_r+0x66>
 80147f4:	6829      	ldr	r1, [r5, #0]
 80147f6:	291d      	cmp	r1, #29
 80147f8:	d82c      	bhi.n	8014854 <__sflush_r+0xb8>
 80147fa:	4a2a      	ldr	r2, [pc, #168]	; (80148a4 <__sflush_r+0x108>)
 80147fc:	40ca      	lsrs	r2, r1
 80147fe:	07d6      	lsls	r6, r2, #31
 8014800:	d528      	bpl.n	8014854 <__sflush_r+0xb8>
 8014802:	2200      	movs	r2, #0
 8014804:	6062      	str	r2, [r4, #4]
 8014806:	04d9      	lsls	r1, r3, #19
 8014808:	6922      	ldr	r2, [r4, #16]
 801480a:	6022      	str	r2, [r4, #0]
 801480c:	d504      	bpl.n	8014818 <__sflush_r+0x7c>
 801480e:	1c42      	adds	r2, r0, #1
 8014810:	d101      	bne.n	8014816 <__sflush_r+0x7a>
 8014812:	682b      	ldr	r3, [r5, #0]
 8014814:	b903      	cbnz	r3, 8014818 <__sflush_r+0x7c>
 8014816:	6560      	str	r0, [r4, #84]	; 0x54
 8014818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801481a:	602f      	str	r7, [r5, #0]
 801481c:	2900      	cmp	r1, #0
 801481e:	d0ca      	beq.n	80147b6 <__sflush_r+0x1a>
 8014820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014824:	4299      	cmp	r1, r3
 8014826:	d002      	beq.n	801482e <__sflush_r+0x92>
 8014828:	4628      	mov	r0, r5
 801482a:	f7ff f997 	bl	8013b5c <_free_r>
 801482e:	2000      	movs	r0, #0
 8014830:	6360      	str	r0, [r4, #52]	; 0x34
 8014832:	e7c1      	b.n	80147b8 <__sflush_r+0x1c>
 8014834:	6a21      	ldr	r1, [r4, #32]
 8014836:	2301      	movs	r3, #1
 8014838:	4628      	mov	r0, r5
 801483a:	47b0      	blx	r6
 801483c:	1c41      	adds	r1, r0, #1
 801483e:	d1c7      	bne.n	80147d0 <__sflush_r+0x34>
 8014840:	682b      	ldr	r3, [r5, #0]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d0c4      	beq.n	80147d0 <__sflush_r+0x34>
 8014846:	2b1d      	cmp	r3, #29
 8014848:	d001      	beq.n	801484e <__sflush_r+0xb2>
 801484a:	2b16      	cmp	r3, #22
 801484c:	d101      	bne.n	8014852 <__sflush_r+0xb6>
 801484e:	602f      	str	r7, [r5, #0]
 8014850:	e7b1      	b.n	80147b6 <__sflush_r+0x1a>
 8014852:	89a3      	ldrh	r3, [r4, #12]
 8014854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014858:	81a3      	strh	r3, [r4, #12]
 801485a:	e7ad      	b.n	80147b8 <__sflush_r+0x1c>
 801485c:	690f      	ldr	r7, [r1, #16]
 801485e:	2f00      	cmp	r7, #0
 8014860:	d0a9      	beq.n	80147b6 <__sflush_r+0x1a>
 8014862:	0793      	lsls	r3, r2, #30
 8014864:	680e      	ldr	r6, [r1, #0]
 8014866:	bf08      	it	eq
 8014868:	694b      	ldreq	r3, [r1, #20]
 801486a:	600f      	str	r7, [r1, #0]
 801486c:	bf18      	it	ne
 801486e:	2300      	movne	r3, #0
 8014870:	eba6 0807 	sub.w	r8, r6, r7
 8014874:	608b      	str	r3, [r1, #8]
 8014876:	f1b8 0f00 	cmp.w	r8, #0
 801487a:	dd9c      	ble.n	80147b6 <__sflush_r+0x1a>
 801487c:	6a21      	ldr	r1, [r4, #32]
 801487e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014880:	4643      	mov	r3, r8
 8014882:	463a      	mov	r2, r7
 8014884:	4628      	mov	r0, r5
 8014886:	47b0      	blx	r6
 8014888:	2800      	cmp	r0, #0
 801488a:	dc06      	bgt.n	801489a <__sflush_r+0xfe>
 801488c:	89a3      	ldrh	r3, [r4, #12]
 801488e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014892:	81a3      	strh	r3, [r4, #12]
 8014894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014898:	e78e      	b.n	80147b8 <__sflush_r+0x1c>
 801489a:	4407      	add	r7, r0
 801489c:	eba8 0800 	sub.w	r8, r8, r0
 80148a0:	e7e9      	b.n	8014876 <__sflush_r+0xda>
 80148a2:	bf00      	nop
 80148a4:	20400001 	.word	0x20400001

080148a8 <_fflush_r>:
 80148a8:	b538      	push	{r3, r4, r5, lr}
 80148aa:	690b      	ldr	r3, [r1, #16]
 80148ac:	4605      	mov	r5, r0
 80148ae:	460c      	mov	r4, r1
 80148b0:	b913      	cbnz	r3, 80148b8 <_fflush_r+0x10>
 80148b2:	2500      	movs	r5, #0
 80148b4:	4628      	mov	r0, r5
 80148b6:	bd38      	pop	{r3, r4, r5, pc}
 80148b8:	b118      	cbz	r0, 80148c2 <_fflush_r+0x1a>
 80148ba:	6983      	ldr	r3, [r0, #24]
 80148bc:	b90b      	cbnz	r3, 80148c2 <_fflush_r+0x1a>
 80148be:	f7ff faad 	bl	8013e1c <__sinit>
 80148c2:	4b14      	ldr	r3, [pc, #80]	; (8014914 <_fflush_r+0x6c>)
 80148c4:	429c      	cmp	r4, r3
 80148c6:	d11b      	bne.n	8014900 <_fflush_r+0x58>
 80148c8:	686c      	ldr	r4, [r5, #4]
 80148ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d0ef      	beq.n	80148b2 <_fflush_r+0xa>
 80148d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80148d4:	07d0      	lsls	r0, r2, #31
 80148d6:	d404      	bmi.n	80148e2 <_fflush_r+0x3a>
 80148d8:	0599      	lsls	r1, r3, #22
 80148da:	d402      	bmi.n	80148e2 <_fflush_r+0x3a>
 80148dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148de:	f7ff fb3b 	bl	8013f58 <__retarget_lock_acquire_recursive>
 80148e2:	4628      	mov	r0, r5
 80148e4:	4621      	mov	r1, r4
 80148e6:	f7ff ff59 	bl	801479c <__sflush_r>
 80148ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80148ec:	07da      	lsls	r2, r3, #31
 80148ee:	4605      	mov	r5, r0
 80148f0:	d4e0      	bmi.n	80148b4 <_fflush_r+0xc>
 80148f2:	89a3      	ldrh	r3, [r4, #12]
 80148f4:	059b      	lsls	r3, r3, #22
 80148f6:	d4dd      	bmi.n	80148b4 <_fflush_r+0xc>
 80148f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148fa:	f7ff fb2e 	bl	8013f5a <__retarget_lock_release_recursive>
 80148fe:	e7d9      	b.n	80148b4 <_fflush_r+0xc>
 8014900:	4b05      	ldr	r3, [pc, #20]	; (8014918 <_fflush_r+0x70>)
 8014902:	429c      	cmp	r4, r3
 8014904:	d101      	bne.n	801490a <_fflush_r+0x62>
 8014906:	68ac      	ldr	r4, [r5, #8]
 8014908:	e7df      	b.n	80148ca <_fflush_r+0x22>
 801490a:	4b04      	ldr	r3, [pc, #16]	; (801491c <_fflush_r+0x74>)
 801490c:	429c      	cmp	r4, r3
 801490e:	bf08      	it	eq
 8014910:	68ec      	ldreq	r4, [r5, #12]
 8014912:	e7da      	b.n	80148ca <_fflush_r+0x22>
 8014914:	08017960 	.word	0x08017960
 8014918:	08017980 	.word	0x08017980
 801491c:	08017940 	.word	0x08017940

08014920 <_lseek_r>:
 8014920:	b538      	push	{r3, r4, r5, lr}
 8014922:	4d07      	ldr	r5, [pc, #28]	; (8014940 <_lseek_r+0x20>)
 8014924:	4604      	mov	r4, r0
 8014926:	4608      	mov	r0, r1
 8014928:	4611      	mov	r1, r2
 801492a:	2200      	movs	r2, #0
 801492c:	602a      	str	r2, [r5, #0]
 801492e:	461a      	mov	r2, r3
 8014930:	f7ed fd3a 	bl	80023a8 <_lseek>
 8014934:	1c43      	adds	r3, r0, #1
 8014936:	d102      	bne.n	801493e <_lseek_r+0x1e>
 8014938:	682b      	ldr	r3, [r5, #0]
 801493a:	b103      	cbz	r3, 801493e <_lseek_r+0x1e>
 801493c:	6023      	str	r3, [r4, #0]
 801493e:	bd38      	pop	{r3, r4, r5, pc}
 8014940:	2001ebf8 	.word	0x2001ebf8

08014944 <__swhatbuf_r>:
 8014944:	b570      	push	{r4, r5, r6, lr}
 8014946:	460e      	mov	r6, r1
 8014948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801494c:	2900      	cmp	r1, #0
 801494e:	b096      	sub	sp, #88	; 0x58
 8014950:	4614      	mov	r4, r2
 8014952:	461d      	mov	r5, r3
 8014954:	da08      	bge.n	8014968 <__swhatbuf_r+0x24>
 8014956:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801495a:	2200      	movs	r2, #0
 801495c:	602a      	str	r2, [r5, #0]
 801495e:	061a      	lsls	r2, r3, #24
 8014960:	d410      	bmi.n	8014984 <__swhatbuf_r+0x40>
 8014962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014966:	e00e      	b.n	8014986 <__swhatbuf_r+0x42>
 8014968:	466a      	mov	r2, sp
 801496a:	f000 f863 	bl	8014a34 <_fstat_r>
 801496e:	2800      	cmp	r0, #0
 8014970:	dbf1      	blt.n	8014956 <__swhatbuf_r+0x12>
 8014972:	9a01      	ldr	r2, [sp, #4]
 8014974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801497c:	425a      	negs	r2, r3
 801497e:	415a      	adcs	r2, r3
 8014980:	602a      	str	r2, [r5, #0]
 8014982:	e7ee      	b.n	8014962 <__swhatbuf_r+0x1e>
 8014984:	2340      	movs	r3, #64	; 0x40
 8014986:	2000      	movs	r0, #0
 8014988:	6023      	str	r3, [r4, #0]
 801498a:	b016      	add	sp, #88	; 0x58
 801498c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014990 <__smakebuf_r>:
 8014990:	898b      	ldrh	r3, [r1, #12]
 8014992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014994:	079d      	lsls	r5, r3, #30
 8014996:	4606      	mov	r6, r0
 8014998:	460c      	mov	r4, r1
 801499a:	d507      	bpl.n	80149ac <__smakebuf_r+0x1c>
 801499c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149a0:	6023      	str	r3, [r4, #0]
 80149a2:	6123      	str	r3, [r4, #16]
 80149a4:	2301      	movs	r3, #1
 80149a6:	6163      	str	r3, [r4, #20]
 80149a8:	b002      	add	sp, #8
 80149aa:	bd70      	pop	{r4, r5, r6, pc}
 80149ac:	ab01      	add	r3, sp, #4
 80149ae:	466a      	mov	r2, sp
 80149b0:	f7ff ffc8 	bl	8014944 <__swhatbuf_r>
 80149b4:	9900      	ldr	r1, [sp, #0]
 80149b6:	4605      	mov	r5, r0
 80149b8:	4630      	mov	r0, r6
 80149ba:	f7ff f93b 	bl	8013c34 <_malloc_r>
 80149be:	b948      	cbnz	r0, 80149d4 <__smakebuf_r+0x44>
 80149c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149c4:	059a      	lsls	r2, r3, #22
 80149c6:	d4ef      	bmi.n	80149a8 <__smakebuf_r+0x18>
 80149c8:	f023 0303 	bic.w	r3, r3, #3
 80149cc:	f043 0302 	orr.w	r3, r3, #2
 80149d0:	81a3      	strh	r3, [r4, #12]
 80149d2:	e7e3      	b.n	801499c <__smakebuf_r+0xc>
 80149d4:	4b0d      	ldr	r3, [pc, #52]	; (8014a0c <__smakebuf_r+0x7c>)
 80149d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80149d8:	89a3      	ldrh	r3, [r4, #12]
 80149da:	6020      	str	r0, [r4, #0]
 80149dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149e0:	81a3      	strh	r3, [r4, #12]
 80149e2:	9b00      	ldr	r3, [sp, #0]
 80149e4:	6163      	str	r3, [r4, #20]
 80149e6:	9b01      	ldr	r3, [sp, #4]
 80149e8:	6120      	str	r0, [r4, #16]
 80149ea:	b15b      	cbz	r3, 8014a04 <__smakebuf_r+0x74>
 80149ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149f0:	4630      	mov	r0, r6
 80149f2:	f000 f831 	bl	8014a58 <_isatty_r>
 80149f6:	b128      	cbz	r0, 8014a04 <__smakebuf_r+0x74>
 80149f8:	89a3      	ldrh	r3, [r4, #12]
 80149fa:	f023 0303 	bic.w	r3, r3, #3
 80149fe:	f043 0301 	orr.w	r3, r3, #1
 8014a02:	81a3      	strh	r3, [r4, #12]
 8014a04:	89a0      	ldrh	r0, [r4, #12]
 8014a06:	4305      	orrs	r5, r0
 8014a08:	81a5      	strh	r5, [r4, #12]
 8014a0a:	e7cd      	b.n	80149a8 <__smakebuf_r+0x18>
 8014a0c:	08013db5 	.word	0x08013db5

08014a10 <_read_r>:
 8014a10:	b538      	push	{r3, r4, r5, lr}
 8014a12:	4d07      	ldr	r5, [pc, #28]	; (8014a30 <_read_r+0x20>)
 8014a14:	4604      	mov	r4, r0
 8014a16:	4608      	mov	r0, r1
 8014a18:	4611      	mov	r1, r2
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	602a      	str	r2, [r5, #0]
 8014a1e:	461a      	mov	r2, r3
 8014a20:	f7ed fc62 	bl	80022e8 <_read>
 8014a24:	1c43      	adds	r3, r0, #1
 8014a26:	d102      	bne.n	8014a2e <_read_r+0x1e>
 8014a28:	682b      	ldr	r3, [r5, #0]
 8014a2a:	b103      	cbz	r3, 8014a2e <_read_r+0x1e>
 8014a2c:	6023      	str	r3, [r4, #0]
 8014a2e:	bd38      	pop	{r3, r4, r5, pc}
 8014a30:	2001ebf8 	.word	0x2001ebf8

08014a34 <_fstat_r>:
 8014a34:	b538      	push	{r3, r4, r5, lr}
 8014a36:	4d07      	ldr	r5, [pc, #28]	; (8014a54 <_fstat_r+0x20>)
 8014a38:	2300      	movs	r3, #0
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	4608      	mov	r0, r1
 8014a3e:	4611      	mov	r1, r2
 8014a40:	602b      	str	r3, [r5, #0]
 8014a42:	f7ed fc96 	bl	8002372 <_fstat>
 8014a46:	1c43      	adds	r3, r0, #1
 8014a48:	d102      	bne.n	8014a50 <_fstat_r+0x1c>
 8014a4a:	682b      	ldr	r3, [r5, #0]
 8014a4c:	b103      	cbz	r3, 8014a50 <_fstat_r+0x1c>
 8014a4e:	6023      	str	r3, [r4, #0]
 8014a50:	bd38      	pop	{r3, r4, r5, pc}
 8014a52:	bf00      	nop
 8014a54:	2001ebf8 	.word	0x2001ebf8

08014a58 <_isatty_r>:
 8014a58:	b538      	push	{r3, r4, r5, lr}
 8014a5a:	4d06      	ldr	r5, [pc, #24]	; (8014a74 <_isatty_r+0x1c>)
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	4604      	mov	r4, r0
 8014a60:	4608      	mov	r0, r1
 8014a62:	602b      	str	r3, [r5, #0]
 8014a64:	f7ed fc95 	bl	8002392 <_isatty>
 8014a68:	1c43      	adds	r3, r0, #1
 8014a6a:	d102      	bne.n	8014a72 <_isatty_r+0x1a>
 8014a6c:	682b      	ldr	r3, [r5, #0]
 8014a6e:	b103      	cbz	r3, 8014a72 <_isatty_r+0x1a>
 8014a70:	6023      	str	r3, [r4, #0]
 8014a72:	bd38      	pop	{r3, r4, r5, pc}
 8014a74:	2001ebf8 	.word	0x2001ebf8

08014a78 <_init>:
 8014a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a7a:	bf00      	nop
 8014a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a7e:	bc08      	pop	{r3}
 8014a80:	469e      	mov	lr, r3
 8014a82:	4770      	bx	lr

08014a84 <_fini>:
 8014a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a86:	bf00      	nop
 8014a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a8a:	bc08      	pop	{r3}
 8014a8c:	469e      	mov	lr, r3
 8014a8e:	4770      	bx	lr
