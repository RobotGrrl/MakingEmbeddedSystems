
testing21_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b4c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc8  08012cf8  08012cf8  00022cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014cc0  08014cc0  0003028c  2**0
                  CONTENTS
  4 .ARM          00000008  08014cc0  08014cc0  00024cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014cc8  08014cc8  0003028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014cc8  08014cc8  00024cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014ccc  08014ccc  00024ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08014cd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025f0  2000028c  08014f5c  0003028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000287c  08014f5c  0003287c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000366ce  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066bd  00000000  00000000  0006698a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fb0  00000000  00000000  0006d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d30  00000000  00000000  0006fff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000362c9  00000000  00000000  00072d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000378a9  00000000  00000000  000a8ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001370b4  00000000  00000000  000e089a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021794e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cd8c  00000000  00000000  002179a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000028c 	.word	0x2000028c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08012ce0 	.word	0x08012ce0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000290 	.word	0x20000290
 80001e8:	08012ce0 	.word	0x08012ce0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <drawCircle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void drawCircle(uint16_t x, uint16_t y) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	80fb      	strh	r3, [r7, #6]
 80004fc:	4613      	mov	r3, r2
 80004fe:	80bb      	strh	r3, [r7, #4]

	if(!circle_selected) {
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <drawCircle+0x50>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f083 0301 	eor.w	r3, r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00a      	beq.n	8000524 <drawCircle+0x34>
		BSP_LCD_SetTextColor( LCD_COLOR_DARKMAGENTA );
 800050e:	f248 0010 	movw	r0, #32784	; 0x8010
 8000512:	f004 fbc5 	bl	8004ca0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 20);
 8000516:	88b9      	ldrh	r1, [r7, #4]
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	2214      	movs	r2, #20
 800051c:	4618      	mov	r0, r3
 800051e:	f004 fddd 	bl	80050dc <BSP_LCD_FillCircle>
	} else {
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
		BSP_LCD_FillCircle(x, y, 40);
	}

}
 8000522:	e009      	b.n	8000538 <drawCircle+0x48>
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
 8000524:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000528:	f004 fbba 	bl	8004ca0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 40);
 800052c:	88b9      	ldrh	r1, [r7, #4]
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	2228      	movs	r2, #40	; 0x28
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fdd2 	bl	80050dc <BSP_LCD_FillCircle>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000a32 	.word	0x20000a32

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f005 fa33 	bl	80059b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8e9 	bl	8000724 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000552:	f000 f949 	bl	80007e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 fe97 	bl	8001288 <MX_GPIO_Init>
  MX_ADC1_Init();
 800055a:	f000 f97b 	bl	8000854 <MX_ADC1_Init>
  MX_ADC2_Init();
 800055e:	f000 f9ef 	bl	8000940 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000562:	f000 fa51 	bl	8000a08 <MX_ADC3_Init>
  MX_DCMI_Init();
 8000566:	f000 fab3 	bl	8000ad0 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800056a:	f000 fae5 	bl	8000b38 <MX_DFSDM1_Init>
  MX_FMC_Init();
 800056e:	f000 fddd 	bl	800112c <MX_FMC_Init>
  MX_I2C1_Init();
 8000572:	f000 fb4d 	bl	8000c10 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000576:	f000 fb8b 	bl	8000c90 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800057a:	f000 fbc9 	bl	8000d10 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800057e:	f000 fbf5 	bl	8000d6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000582:	f000 fc23 	bl	8000dcc <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8000586:	f000 fc51 	bl	8000e2c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800058a:	f000 fc7b 	bl	8000e84 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800058e:	f000 fd21 	bl	8000fd4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000592:	f000 fd4f 	bl	8001034 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000596:	f000 fd8b 	bl	80010b0 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800059a:	f011 fd6b 	bl	8012074 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 800059e:	2001      	movs	r0, #1
 80005a0:	f004 fac0 	bl	8004b24 <BSP_LCD_InitEx>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d101      	bne.n	80005ae <main+0x6a>
	{
		/* Initialization Error */
		Error_Handler();
 80005aa:	f000 ffe5 	bl	8001578 <Error_Handler>
	}

	// the lcd bsp includes the fontNN.c files in the Utilities directory
	// in that file, a struct is declared: FontNN
	//BSP_LCD_SetFont(&Font20);
	BSP_LCD_SetFont(&Font24);
 80005ae:	4857      	ldr	r0, [pc, #348]	; (800070c <main+0x1c8>)
 80005b0:	f004 fb86 	bl	8004cc0 <BSP_LCD_SetFont>

	// the display is 240 px tall, XYZ px wide
	BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Purple Ball", CENTER_MODE);
 80005b4:	2301      	movs	r3, #1
 80005b6:	4a56      	ldr	r2, [pc, #344]	; (8000710 <main+0x1cc>)
 80005b8:	21af      	movs	r1, #175	; 0xaf
 80005ba:	2000      	movs	r0, #0
 80005bc:	f004 fbf0 	bl	8004da0 <BSP_LCD_DisplayStringAt>



	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 80005c0:	f004 fb56 	bl	8004c70 <BSP_LCD_GetXSize>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b29c      	uxth	r4, r3
 80005c8:	f004 fb5e 	bl	8004c88 <BSP_LCD_GetYSize>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	4620      	mov	r0, r4
 80005d6:	f005 f883 	bl	80056e0 <BSP_TS_InitEx>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <main+0xa0>
		Error_Handler();
 80005e0:	f000 ffca 	bl	8001578 <Error_Handler>
	}

	BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 80005e4:	2314      	movs	r3, #20
 80005e6:	2201      	movs	r2, #1
 80005e8:	2105      	movs	r1, #5
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f004 fe08 	bl	8005200 <BSP_LCD_ScreenDimmingConfig>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	if(HAL_GetTick()-last_ts >= 1000 && dimmed_screen == false) {
 80005f0:	f005 fa48 	bl	8005a84 <HAL_GetTick>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b47      	ldr	r3, [pc, #284]	; (8000714 <main+0x1d0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000600:	d311      	bcc.n	8000626 <main+0xe2>
 8000602:	4b45      	ldr	r3, [pc, #276]	; (8000718 <main+0x1d4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00a      	beq.n	8000626 <main+0xe2>
  		BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 8000610:	2314      	movs	r3, #20
 8000612:	2201      	movs	r2, #1
 8000614:	2105      	movs	r1, #5
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f004 fdf2 	bl	8005200 <BSP_LCD_ScreenDimmingConfig>
  		BSP_LCD_ScreenDimmingOn();
 800061c:	f004 fe22 	bl	8005264 <BSP_LCD_ScreenDimmingOn>
  		dimmed_screen = true;
 8000620:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <main+0x1d4>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
  	}


  	uint8_t circle_x = 100;
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	72fb      	strb	r3, [r7, #11]
  	uint8_t circle_y = 100;
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	72bb      	strb	r3, [r7, #10]
  	drawCircle(circle_x, circle_y);
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	b29b      	uxth	r3, r3
 8000632:	7aba      	ldrb	r2, [r7, #10]
 8000634:	b292      	uxth	r2, r2
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff59 	bl	80004f0 <drawCircle>

  	BSP_TS_GetState(&ts_result);
 800063e:	4837      	ldr	r0, [pc, #220]	; (800071c <main+0x1d8>)
 8000640:	f005 f8a6 	bl	8005790 <BSP_TS_GetState>

		uint8_t num_touches = ts_result.touchDetected;
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <main+0x1d8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	727b      	strb	r3, [r7, #9]

		for(int i=0; i<num_touches; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e057      	b.n	8000700 <main+0x1bc>
			Point touch;
			touch.X = ts_result.touchX[i];
 8000650:	4a32      	ldr	r2, [pc, #200]	; (800071c <main+0x1d8>)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	885b      	ldrh	r3, [r3, #2]
 800065a:	b21b      	sxth	r3, r3
 800065c:	80bb      	strh	r3, [r7, #4]
			touch.Y = ts_result.touchY[i];
 800065e:	4a2f      	ldr	r2, [pc, #188]	; (800071c <main+0x1d8>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	88db      	ldrh	r3, [r3, #6]
 8000668:	b21b      	sxth	r3, r3
 800066a:	80fb      	strh	r3, [r7, #6]

			if(dimmed_screen) {
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <main+0x1d4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d004      	beq.n	800067e <main+0x13a>
				//BSP_LCD_ScreenDimmingConfig(5, 100, 1, 20);
				//BSP_LCD_ScreenDimmingOn();
				BSP_LCD_ScreenDimmingOff();
 8000674:	f004 fef0 	bl	8005458 <BSP_LCD_ScreenDimmingOff>
				dimmed_screen = false;
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <main+0x1d4>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			}

			last_ts = HAL_GetTick();
 800067e:	f005 fa01 	bl	8005a84 <HAL_GetTick>
 8000682:	4603      	mov	r3, r0
 8000684:	4a23      	ldr	r2, [pc, #140]	; (8000714 <main+0x1d0>)
 8000686:	6013      	str	r3, [r2, #0]

			if(touch.X < circle_x+70 && touch.X > circle_x-70) {
 8000688:	7afb      	ldrb	r3, [r7, #11]
 800068a:	3345      	adds	r3, #69	; 0x45
 800068c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000690:	4293      	cmp	r3, r2
 8000692:	db25      	blt.n	80006e0 <main+0x19c>
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	3b45      	subs	r3, #69	; 0x45
 8000698:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800069c:	4293      	cmp	r3, r2
 800069e:	dc1f      	bgt.n	80006e0 <main+0x19c>
				if(touch.Y < circle_y+70 && touch.Y > circle_y-70) {
 80006a0:	7abb      	ldrb	r3, [r7, #10]
 80006a2:	3345      	adds	r3, #69	; 0x45
 80006a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006a8:	4293      	cmp	r3, r2
 80006aa:	db19      	blt.n	80006e0 <main+0x19c>
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	3b45      	subs	r3, #69	; 0x45
 80006b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006b4:	4293      	cmp	r3, r2
 80006b6:	dc13      	bgt.n	80006e0 <main+0x19c>
					circle_selected = !circle_selected;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <main+0x1dc>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f083 0301 	eor.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <main+0x1dc>)
 80006d4:	701a      	strb	r2, [r3, #0]
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 80006d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006da:	f004 fb01 	bl	8004ce0 <BSP_LCD_Clear>
 80006de:	e787      	b.n	80005f0 <main+0xac>
					break;
				}
			}

			BSP_LCD_SetTextColor( LCD_COLOR_BLUE );
 80006e0:	201f      	movs	r0, #31
 80006e2:	f004 fadd 	bl	8004ca0 <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(touch.X, touch.Y, 10);
 80006e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006f0:	b291      	uxth	r1, r2
 80006f2:	220a      	movs	r2, #10
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fcf1 	bl	80050dc <BSP_LCD_FillCircle>
		for(int i=0; i<num_touches; i++) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	7a7b      	ldrb	r3, [r7, #9]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	dba3      	blt.n	8000650 <main+0x10c>
  {
 8000708:	e772      	b.n	80005f0 <main+0xac>
 800070a:	bf00      	nop
 800070c:	200000e4 	.word	0x200000e4
 8000710:	08012cf8 	.word	0x08012cf8
 8000714:	20000a34 	.word	0x20000a34
 8000718:	20000a38 	.word	0x20000a38
 800071c:	20000a28 	.word	0x20000a28
 8000720:	20000a32 	.word	0x20000a32

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	; 0x58
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2244      	movs	r2, #68	; 0x44
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f012 facc 	bl	8012cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000746:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074a:	f009 f835 	bl	80097b8 <HAL_PWREx_ControlVoltageScaling>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000754:	f000 ff10 	bl	8001578 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000758:	f009 f810 	bl	800977c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <SystemClock_Config+0xc0>)
 800075e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000762:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <SystemClock_Config+0xc0>)
 8000764:	f023 0318 	bic.w	r3, r3, #24
 8000768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800076c:	2314      	movs	r3, #20
 800076e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800077c:	2360      	movs	r3, #96	; 0x60
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000784:	2301      	movs	r3, #1
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 800078c:	2318      	movs	r3, #24
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4618      	mov	r0, r3
 80007a2:	f009 f941 	bl	8009a28 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007ac:	f000 fee4 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2303      	movs	r3, #3
 80007b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2102      	movs	r1, #2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f009 fd47 	bl	800a25c <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007d4:	f000 fed0 	bl	8001578 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007d8:	f00b f818 	bl	800b80c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007dc:	bf00      	nop
 80007de:	3758      	adds	r7, #88	; 0x58
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000

080007e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0a4      	sub	sp, #144	; 0x90
 80007ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	228c      	movs	r2, #140	; 0x8c
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f012 fa6b 	bl	8012cd0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <PeriphCommonClock_Config+0x64>)
 80007fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80007fe:	2300      	movs	r3, #0
 8000800:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000802:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800080a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800080e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000810:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000814:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000816:	2301      	movs	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800081e:	2318      	movs	r3, #24
 8000820:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <PeriphCommonClock_Config+0x68>)
 8000830:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f009 ff35 	bl	800a6a4 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000840:	f000 fe9a 	bl	8001578 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3790      	adds	r7, #144	; 0x90
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	00086800 	.word	0x00086800
 8000850:	01110000 	.word	0x01110000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000876:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <MX_ADC1_Init+0xe0>)
 8000878:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <MX_ADC1_Init+0xe4>)
 800087a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800087c:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <MX_ADC1_Init+0xe0>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000882:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_ADC1_Init+0xe0>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000888:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <MX_ADC1_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_ADC1_Init+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <MX_ADC1_Init+0xe0>)
 8000896:	2204      	movs	r2, #4
 8000898:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_ADC1_Init+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008a0:	4b24      	ldr	r3, [pc, #144]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d6:	4817      	ldr	r0, [pc, #92]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008d8:	f005 faa4 	bl	8005e24 <HAL_ADC_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008e2:	f000 fe49 	bl	8001578 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <MX_ADC1_Init+0xe0>)
 80008f2:	f006 f823 	bl	800693c <HAL_ADCEx_MultiModeConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008fc:	f000 fe3c 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_ADC1_Init+0xe8>)
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000904:	2306      	movs	r3, #6
 8000906:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800090c:	237f      	movs	r3, #127	; 0x7f
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000910:	2304      	movs	r3, #4
 8000912:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_ADC1_Init+0xe0>)
 800091e:	f005 fbdb 	bl	80060d8 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000928:	f000 fe26 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200002a8 	.word	0x200002a8
 8000938:	50040000 	.word	0x50040000
 800093c:	10c00010 	.word	0x10c00010

08000940 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000956:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC2_Init+0xbc>)
 8000958:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <MX_ADC2_Init+0xc0>)
 800095a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_ADC2_Init+0xbc>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC2_Init+0xbc>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC2_Init+0xbc>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC2_Init+0xbc>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC2_Init+0xbc>)
 8000976:	2204      	movs	r2, #4
 8000978:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC2_Init+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC2_Init+0xbc>)
 8000982:	2200      	movs	r2, #0
 8000984:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC2_Init+0xbc>)
 8000988:	2201      	movs	r2, #1
 800098a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_ADC2_Init+0xbc>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_ADC2_Init+0xbc>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_ADC2_Init+0xbc>)
 800099c:	2200      	movs	r2, #0
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_ADC2_Init+0xbc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_ADC2_Init+0xbc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_ADC2_Init+0xbc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_ADC2_Init+0xbc>)
 80009b8:	f005 fa34 	bl	8005e24 <HAL_ADC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80009c2:	f000 fdd9 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_ADC2_Init+0xc4>)
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ca:	2306      	movs	r3, #6
 80009cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d2:	237f      	movs	r3, #127	; 0x7f
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d6:	2304      	movs	r3, #4
 80009d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_ADC2_Init+0xbc>)
 80009e4:	f005 fb78 	bl	80060d8 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80009ee:	f000 fdc3 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000310 	.word	0x20000310
 8000a00:	50040100 	.word	0x50040100
 8000a04:	25b00200 	.word	0x25b00200

08000a08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <MX_ADC3_Init+0xc0>)
 8000a22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a36:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a80:	f005 f9d0 	bl	8005e24 <HAL_ADC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000a8a:	f000 fd75 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_ADC3_Init+0xc4>)
 8000a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a92:	2306      	movs	r3, #6
 8000a94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9a:	237f      	movs	r3, #127	; 0x7f
 8000a9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000aac:	f005 fb14 	bl	80060d8 <HAL_ADC_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000ab6:	f000 fd5f 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000378 	.word	0x20000378
 8000ac8:	50040200 	.word	0x50040200
 8000acc:	36902000 	.word	0x36902000

08000ad0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <MX_DCMI_Init+0x64>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_DCMI_Init+0x60>)
 8000b1e:	f006 f901 	bl	8006d24 <HAL_DCMI_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000b28:	f000 fd26 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200003e0 	.word	0x200003e0
 8000b34:	50050000 	.word	0x50050000

08000b38 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b3e:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <MX_DFSDM1_Init+0xcc>)
 8000b40:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b50:	2202      	movs	r2, #2
 8000b52:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b8a:	481d      	ldr	r0, [pc, #116]	; (8000c00 <MX_DFSDM1_Init+0xc8>)
 8000b8c:	f006 f950 	bl	8006e30 <HAL_DFSDM_ChannelInit>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000b96:	f000 fcef 	bl	8001578 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <MX_DFSDM1_Init+0xd4>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bae:	2202      	movs	r2, #2
 8000bb0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_DFSDM1_Init+0xd0>)
 8000bec:	f006 f920 	bl	8006e30 <HAL_DFSDM_ChannelInit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000bf6:	f000 fcbf 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000444 	.word	0x20000444
 8000c04:	40016020 	.word	0x40016020
 8000c08:	2000047c 	.word	0x2000047c
 8000c0c:	40016040 	.word	0x40016040

08000c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <MX_I2C1_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <MX_I2C1_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c4c:	f006 fc98 	bl	8007580 <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 fc8f 	bl	8001578 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c5e:	f007 fb37 	bl	80082d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 fc86 	bl	8001578 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_I2C1_Init+0x74>)
 8000c70:	f007 fb79 	bl	8008366 <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 fc7d 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200004b4 	.word	0x200004b4
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	20303e5d 	.word	0x20303e5d

08000c90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_I2C2_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <MX_I2C2_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000ccc:	f006 fc58 	bl	8007580 <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 fc4f 	bl	8001578 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cde:	f007 faf7 	bl	80082d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 fc46 	bl	8001578 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_I2C2_Init+0x74>)
 8000cf0:	f007 fb39 	bl	8008366 <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 fc3d 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000508 	.word	0x20000508
 8000d08:	40005800 	.word	0x40005800
 8000d0c:	20303e5d 	.word	0x20303e5d

08000d10 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_LPUART1_UART_Init+0x58>)
 8000d1e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_LPUART1_UART_Init+0x50>)
 8000d4e:	f00c ff62 	bl	800dc16 <HAL_UART_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000d58:	f000 fc0e 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000055c 	.word	0x2000055c
 8000d64:	40008000 	.word	0x40008000
 8000d68:	00033324 	.word	0x00033324

08000d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <MX_USART1_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d98:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d9c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000db2:	f00c ff30 	bl	800dc16 <HAL_UART_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000dbc:	f000 fbdc 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200005e0 	.word	0x200005e0
 8000dc8:	40013800 	.word	0x40013800

08000dcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <MX_USART2_UART_Init+0x5c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e10:	f00c ff01 	bl	800dc16 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 fbad 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000664 	.word	0x20000664
 8000e28:	40004400 	.word	0x40004400

08000e2c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_QUADSPI_Init+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e44:	2210      	movs	r2, #16
 8000e46:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e4a:	2217      	movs	r2, #23
 8000e4c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_QUADSPI_Init+0x50>)
 8000e68:	f008 fd1c 	bl	80098a4 <HAL_QSPI_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000e72:	f000 fb81 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200006e8 	.word	0x200006e8
 8000e80:	a0001000 	.word	0xa0001000

08000e84 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e88:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000e8a:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <MX_SAI1_Init+0x140>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ea0:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ea6:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000eac:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000eb8:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <MX_SAI1_Init+0x144>)
 8000ec8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000edc:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000f00:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000f18:	4829      	ldr	r0, [pc, #164]	; (8000fc0 <MX_SAI1_Init+0x13c>)
 8000f1a:	f00a ff57 	bl	800bdcc <HAL_SAI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000f24:	f000 fb28 	bl	8001578 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f2a:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <MX_SAI1_Init+0x14c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f78:	2208      	movs	r2, #8
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_SAI1_Init+0x148>)
 8000fae:	f00a ff0d 	bl	800bdcc <HAL_SAI_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000fb8:	f000 fade 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000734 	.word	0x20000734
 8000fc4:	40015404 	.word	0x40015404
 8000fc8:	0002ee00 	.word	0x0002ee00
 8000fcc:	200007b8 	.word	0x200007b8
 8000fd0:	40015424 	.word	0x40015424

08000fd4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_SDMMC1_SD_Init+0x5c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001002:	480a      	ldr	r0, [pc, #40]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8001004:	f00b f88e 	bl	800c124 <HAL_SD_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800100e:	f000 fab3 	bl	8001578 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_SDMMC1_SD_Init+0x58>)
 8001018:	f00b fafe 	bl	800c618 <HAL_SD_ConfigWideBusOperation>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001022:	f000 faa9 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000083c 	.word	0x2000083c
 8001030:	40012800 	.word	0x40012800

08001034 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_SPI1_Init+0x74>)
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_SPI1_Init+0x78>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001044:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI1_Init+0x74>)
 800104e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001052:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_SPI1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001062:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001066:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_SPI1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001082:	2207      	movs	r2, #7
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI1_Init+0x74>)
 800108e:	2208      	movs	r2, #8
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_SPI1_Init+0x74>)
 8001094:	f00b fe38 	bl	800cd08 <HAL_SPI_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 fa6b 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200008c0 	.word	0x200008c0
 80010ac:	40013000 	.word	0x40013000

080010b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_SPI2_Init+0x74>)
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <MX_SPI2_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_SPI2_Init+0x74>)
 80010bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_SPI2_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_SPI2_Init+0x74>)
 80010ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_SPI2_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_SPI2_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_SPI2_Init+0x74>)
 80010de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_SPI2_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_SPI2_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_SPI2_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_SPI2_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_SPI2_Init+0x74>)
 80010fe:	2207      	movs	r2, #7
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_SPI2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_SPI2_Init+0x74>)
 800110a:	2208      	movs	r2, #8
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_SPI2_Init+0x74>)
 8001110:	f00b fdfa 	bl	800cd08 <HAL_SPI_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 fa2d 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000924 	.word	0x20000924
 8001128:	40003800 	.word	0x40003800

0800112c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f011 fdc9 	bl	8012cd0 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800113e:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MX_FMC_Init+0x150>)
 8001140:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001144:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001146:	4b4d      	ldr	r3, [pc, #308]	; (800127c <MX_FMC_Init+0x150>)
 8001148:	4a4d      	ldr	r2, [pc, #308]	; (8001280 <MX_FMC_Init+0x154>)
 800114a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800114c:	4b4b      	ldr	r3, [pc, #300]	; (800127c <MX_FMC_Init+0x150>)
 800114e:	2202      	movs	r2, #2
 8001150:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001152:	4b4a      	ldr	r3, [pc, #296]	; (800127c <MX_FMC_Init+0x150>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001158:	4b48      	ldr	r3, [pc, #288]	; (800127c <MX_FMC_Init+0x150>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <MX_FMC_Init+0x150>)
 8001160:	2210      	movs	r2, #16
 8001162:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001164:	4b45      	ldr	r3, [pc, #276]	; (800127c <MX_FMC_Init+0x150>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800116a:	4b44      	ldr	r3, [pc, #272]	; (800127c <MX_FMC_Init+0x150>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001170:	4b42      	ldr	r3, [pc, #264]	; (800127c <MX_FMC_Init+0x150>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <MX_FMC_Init+0x150>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <MX_FMC_Init+0x150>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <MX_FMC_Init+0x150>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001188:	4b3c      	ldr	r3, [pc, #240]	; (800127c <MX_FMC_Init+0x150>)
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <MX_FMC_Init+0x150>)
 8001190:	2200      	movs	r2, #0
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <MX_FMC_Init+0x150>)
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <MX_FMC_Init+0x150>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <MX_FMC_Init+0x150>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011a6:	230f      	movs	r3, #15
 80011a8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80011ae:	23ff      	movs	r3, #255	; 0xff
 80011b0:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80011b2:	230f      	movs	r3, #15
 80011b4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011b6:	2310      	movs	r3, #16
 80011b8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011ba:	2311      	movs	r3, #17
 80011bc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	482c      	ldr	r0, [pc, #176]	; (800127c <MX_FMC_Init+0x150>)
 80011ca:	f00b fe40 	bl	800ce4e <HAL_SRAM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80011d4:	f000 f9d0 	bl	8001578 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_FMC_Init+0x158>)
 80011da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011de:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <MX_FMC_Init+0x158>)
 80011e2:	4a27      	ldr	r2, [pc, #156]	; (8001280 <MX_FMC_Init+0x154>)
 80011e4:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <MX_FMC_Init+0x158>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <MX_FMC_Init+0x158>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_FMC_Init+0x158>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <MX_FMC_Init+0x158>)
 80011fa:	2210      	movs	r2, #16
 80011fc:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_FMC_Init+0x158>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_FMC_Init+0x158>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_FMC_Init+0x158>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_FMC_Init+0x158>)
 8001212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_FMC_Init+0x158>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_FMC_Init+0x158>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_FMC_Init+0x158>)
 8001226:	2200      	movs	r2, #0
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_FMC_Init+0x158>)
 800122c:	2200      	movs	r2, #0
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_FMC_Init+0x158>)
 8001232:	2200      	movs	r2, #0
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_FMC_Init+0x158>)
 8001238:	2200      	movs	r2, #0
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_FMC_Init+0x158>)
 800123e:	2200      	movs	r2, #0
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001242:	230f      	movs	r3, #15
 8001244:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001246:	230f      	movs	r3, #15
 8001248:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800124a:	23ff      	movs	r3, #255	; 0xff
 800124c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800124e:	230f      	movs	r3, #15
 8001250:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001252:	2310      	movs	r3, #16
 8001254:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001256:	2311      	movs	r3, #17
 8001258:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <MX_FMC_Init+0x158>)
 8001266:	f00b fdf2 	bl	800ce4e <HAL_SRAM_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001270:	f000 f982 	bl	8001578 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000988 	.word	0x20000988
 8001280:	a0000104 	.word	0xa0000104
 8001284:	200009d8 	.word	0x200009d8

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800129e:	4baf      	ldr	r3, [pc, #700]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4aae      	ldr	r2, [pc, #696]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4bac      	ldr	r3, [pc, #688]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	623b      	str	r3, [r7, #32]
 80012b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	4ba9      	ldr	r3, [pc, #676]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4aa8      	ldr	r2, [pc, #672]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4ba6      	ldr	r3, [pc, #664]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ce:	4ba3      	ldr	r3, [pc, #652]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4aa2      	ldr	r2, [pc, #648]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4ba0      	ldr	r3, [pc, #640]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b9d      	ldr	r3, [pc, #628]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a9c      	ldr	r2, [pc, #624]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b9a      	ldr	r3, [pc, #616]	; (800155c <MX_GPIO_Init+0x2d4>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b97      	ldr	r3, [pc, #604]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a96      	ldr	r2, [pc, #600]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b94      	ldr	r3, [pc, #592]	; (800155c <MX_GPIO_Init+0x2d4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001316:	4b91      	ldr	r3, [pc, #580]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a90      	ldr	r2, [pc, #576]	; (800155c <MX_GPIO_Init+0x2d4>)
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b8e      	ldr	r3, [pc, #568]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800132e:	f008 faa9 	bl	8009884 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4b8a      	ldr	r3, [pc, #552]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a89      	ldr	r2, [pc, #548]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b87      	ldr	r3, [pc, #540]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b84      	ldr	r3, [pc, #528]	; (800155c <MX_GPIO_Init+0x2d4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a83      	ldr	r2, [pc, #524]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b81      	ldr	r3, [pc, #516]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001362:	4b7e      	ldr	r3, [pc, #504]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a7d      	ldr	r2, [pc, #500]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001368:	f043 0320 	orr.w	r3, r3, #32
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b7b      	ldr	r3, [pc, #492]	; (800155c <MX_GPIO_Init+0x2d4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	4878      	ldr	r0, [pc, #480]	; (8001560 <MX_GPIO_Init+0x2d8>)
 8001380:	f006 f8e6 	bl	8007550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2143      	movs	r1, #67	; 0x43
 8001388:	4876      	ldr	r0, [pc, #472]	; (8001564 <MX_GPIO_Init+0x2dc>)
 800138a:	f006 f8e1 	bl	8007550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2140      	movs	r1, #64	; 0x40
 8001392:	4875      	ldr	r0, [pc, #468]	; (8001568 <MX_GPIO_Init+0x2e0>)
 8001394:	f006 f8dc 	bl	8007550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139e:	4873      	ldr	r0, [pc, #460]	; (800156c <MX_GPIO_Init+0x2e4>)
 80013a0:	f006 f8d6 	bl	8007550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 80013a4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ae:	2302      	movs	r3, #2
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4869      	ldr	r0, [pc, #420]	; (8001560 <MX_GPIO_Init+0x2d8>)
 80013ba:	f005 fe45 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80013be:	2304      	movs	r3, #4
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4864      	ldr	r0, [pc, #400]	; (8001564 <MX_GPIO_Init+0x2dc>)
 80013d4:	f005 fe38 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	485c      	ldr	r0, [pc, #368]	; (8001560 <MX_GPIO_Init+0x2d8>)
 80013f0:	f005 fe2a 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001404:	2303      	movs	r3, #3
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4854      	ldr	r0, [pc, #336]	; (8001560 <MX_GPIO_Init+0x2d8>)
 8001410:	f005 fe1a 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001414:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001426:	2303      	movs	r3, #3
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	484c      	ldr	r0, [pc, #304]	; (8001564 <MX_GPIO_Init+0x2dc>)
 8001432:	f005 fe09 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001448:	2302      	movs	r3, #2
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	4846      	ldr	r0, [pc, #280]	; (800156c <MX_GPIO_Init+0x2e4>)
 8001454:	f005 fdf8 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	4619      	mov	r1, r3
 800146a:	483e      	ldr	r0, [pc, #248]	; (8001564 <MX_GPIO_Init+0x2dc>)
 800146c:	f005 fdec 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001470:	2343      	movs	r3, #67	; 0x43
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4837      	ldr	r0, [pc, #220]	; (8001564 <MX_GPIO_Init+0x2dc>)
 8001488:	f005 fdde 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	4831      	ldr	r0, [pc, #196]	; (8001568 <MX_GPIO_Init+0x2e0>)
 80014a4:	f005 fdd0 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80014a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	482c      	ldr	r0, [pc, #176]	; (8001570 <MX_GPIO_Init+0x2e8>)
 80014c0:	f005 fdc2 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80014d6:	230e      	movs	r3, #14
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f005 fdb0 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80014e8:	2320      	movs	r3, #32
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	481a      	ldr	r0, [pc, #104]	; (8001568 <MX_GPIO_Init+0x2e0>)
 80014fe:	f005 fda3 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800150c:	2302      	movs	r3, #2
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	4817      	ldr	r0, [pc, #92]	; (8001574 <MX_GPIO_Init+0x2ec>)
 8001518:	f005 fd96 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 800151c:	2304      	movs	r3, #4
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	480f      	ldr	r0, [pc, #60]	; (800156c <MX_GPIO_Init+0x2e4>)
 8001530:	f005 fd8a 	bl	8007048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800153a:	2311      	movs	r3, #17
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_GPIO_Init+0x2e4>)
 800154e:	f005 fd7b 	bl	8007048 <HAL_GPIO_Init>

}
 8001552:	bf00      	nop
 8001554:	3738      	adds	r7, #56	; 0x38
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	48002000 	.word	0x48002000
 8001564:	48001c00 	.word	0x48001c00
 8001568:	48000800 	.word	0x48000800
 800156c:	48000400 	.word	0x48000400
 8001570:	48001800 	.word	0x48001800
 8001574:	48001400 	.word	0x48001400

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_MspInit+0x44>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_MspInit+0x44>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6613      	str	r3, [r2, #96]	; 0x60
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_MspInit+0x44>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_MspInit+0x44>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_MspInit+0x44>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6593      	str	r3, [r2, #88]	; 0x58
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_MspInit+0x44>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000

080015cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a59      	ldr	r2, [pc, #356]	; (8001750 <HAL_ADC_MspInit+0x184>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12d      	bne.n	800164a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80015ee:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_ADC_MspInit+0x188>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a57      	ldr	r2, [pc, #348]	; (8001754 <HAL_ADC_MspInit+0x188>)
 80015f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80015f8:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_ADC_MspInit+0x188>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d10b      	bne.n	8001618 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001600:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800160a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160c:	4b52      	ldr	r3, [pc, #328]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001614:	623b      	str	r3, [r7, #32]
 8001616:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	4b4f      	ldr	r3, [pc, #316]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	4a4e      	ldr	r2, [pc, #312]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8001630:	2318      	movs	r3, #24
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001634:	230b      	movs	r3, #11
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	4846      	ldr	r0, [pc, #280]	; (800175c <HAL_ADC_MspInit+0x190>)
 8001644:	f005 fd00 	bl	8007048 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001648:	e07e      	b.n	8001748 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a44      	ldr	r2, [pc, #272]	; (8001760 <HAL_ADC_MspInit+0x194>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d146      	bne.n	80016e2 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001654:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <HAL_ADC_MspInit+0x188>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a3e      	ldr	r2, [pc, #248]	; (8001754 <HAL_ADC_MspInit+0x188>)
 800165c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_ADC_MspInit+0x188>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d10b      	bne.n	800167e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001666:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a3b      	ldr	r2, [pc, #236]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 800166c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b39      	ldr	r3, [pc, #228]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a35      	ldr	r2, [pc, #212]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80016ae:	2303      	movs	r3, #3
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016b2:	230b      	movs	r3, #11
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4826      	ldr	r0, [pc, #152]	; (800175c <HAL_ADC_MspInit+0x190>)
 80016c2:	f005 fcc1 	bl	8007048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 80016c6:	2312      	movs	r3, #18
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ca:	230b      	movs	r3, #11
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f005 fcb4 	bl	8007048 <HAL_GPIO_Init>
}
 80016e0:	e032      	b.n	8001748 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <HAL_ADC_MspInit+0x198>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d12d      	bne.n	8001748 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_ADC_MspInit+0x188>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_ADC_MspInit+0x188>)
 80016f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_ADC_MspInit+0x188>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10b      	bne.n	8001716 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001704:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_ADC_MspInit+0x18c>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001734:	230b      	movs	r3, #11
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <HAL_ADC_MspInit+0x19c>)
 8001744:	f005 fc80 	bl	8007048 <HAL_GPIO_Init>
}
 8001748:	bf00      	nop
 800174a:	3738      	adds	r7, #56	; 0x38
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	50040000 	.word	0x50040000
 8001754:	20000a3c 	.word	0x20000a3c
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800
 8001760:	50040100 	.word	0x50040100
 8001764:	50040200 	.word	0x50040200
 8001768:	48001400 	.word	0x48001400

0800176c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a33      	ldr	r2, [pc, #204]	; (8001858 <HAL_DCMI_MspInit+0xec>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d160      	bne.n	8001850 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a32      	ldr	r2, [pc, #200]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a2c      	ldr	r2, [pc, #176]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_DCMI_MspInit+0xf0>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80017ee:	f645 7320 	movw	r3, #24352	; 0x5f20
 80017f2:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001800:	230a      	movs	r3, #10
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	4815      	ldr	r0, [pc, #84]	; (8001860 <HAL_DCMI_MspInit+0xf4>)
 800180c:	f005 fc1c 	bl	8007048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001810:	23b0      	movs	r3, #176	; 0xb0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001820:	230a      	movs	r3, #10
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <HAL_DCMI_MspInit+0xf8>)
 800182c:	f005 fc0c 	bl	8007048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001830:	2320      	movs	r3, #32
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001840:	230a      	movs	r3, #10
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <HAL_DCMI_MspInit+0xfc>)
 800184c:	f005 fbfc 	bl	8007048 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	50050000 	.word	0x50050000
 800185c:	40021000 	.word	0x40021000
 8001860:	48001c00 	.word	0x48001c00
 8001864:	48002000 	.word	0x48002000
 8001868:	48001000 	.word	0x48001000

0800186c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0ae      	sub	sp, #184	; 0xb8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	228c      	movs	r2, #140	; 0x8c
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f011 fa1f 	bl	8012cd0 <memset>
  if(DFSDM1_Init == 0)
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d163      	bne.n	8001962 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800189a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	4618      	mov	r0, r3
 80018ac:	f008 fefa 	bl	800a6a4 <HAL_RCCEx_PeriphCLKConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80018b6:	f7ff fe5f 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	4a2c      	ldr	r2, [pc, #176]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c4:	6613      	str	r3, [r2, #96]	; 0x60
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	4a26      	ldr	r2, [pc, #152]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	4a20      	ldr	r2, [pc, #128]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_DFSDM_ChannelMspInit+0x104>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001902:	2384      	movs	r3, #132	; 0x84
 8001904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800191a:	2306      	movs	r3, #6
 800191c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001924:	4619      	mov	r1, r3
 8001926:	4813      	ldr	r0, [pc, #76]	; (8001974 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001928:	f005 fb8e 	bl	8007048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800192c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001946:	2306      	movs	r3, #6
 8001948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001950:	4619      	mov	r1, r3
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001954:	f005 fb78 	bl	8007048 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_DFSDM_ChannelMspInit+0x100>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001960:	6013      	str	r3, [r2, #0]
  }

}
 8001962:	bf00      	nop
 8001964:	37b8      	adds	r7, #184	; 0xb8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000a40 	.word	0x20000a40
 8001970:	40021000 	.word	0x40021000
 8001974:	48000800 	.word	0x48000800
 8001978:	48000400 	.word	0x48000400

0800197c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0b0      	sub	sp, #192	; 0xc0
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	228c      	movs	r2, #140	; 0x8c
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f011 f997 	bl	8012cd0 <memset>
  if(hi2c->Instance==I2C1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a53      	ldr	r2, [pc, #332]	; (8001af4 <HAL_I2C_MspInit+0x178>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d13c      	bne.n	8001a26 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019ac:	2340      	movs	r3, #64	; 0x40
 80019ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	f107 0320 	add.w	r3, r7, #32
 80019b8:	4618      	mov	r0, r3
 80019ba:	f008 fe73 	bl	800a6a4 <HAL_RCCEx_PeriphCLKConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019c4:	f7ff fdd8 	bl	8001578 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a4a      	ldr	r2, [pc, #296]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d4:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80019e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e8:	2312      	movs	r3, #18
 80019ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fa:	2304      	movs	r3, #4
 80019fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a04:	4619      	mov	r1, r3
 8001a06:	483d      	ldr	r0, [pc, #244]	; (8001afc <HAL_I2C_MspInit+0x180>)
 8001a08:	f005 fb1e 	bl	8007048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	4a39      	ldr	r2, [pc, #228]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a16:	6593      	str	r3, [r2, #88]	; 0x58
 8001a18:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a24:	e061      	b.n	8001aea <HAL_I2C_MspInit+0x16e>
  else if(hi2c->Instance==I2C2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <HAL_I2C_MspInit+0x184>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d15c      	bne.n	8001aea <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f008 fe31 	bl	800a6a4 <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001a48:	f7ff fd96 	bl	8001578 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	4a29      	ldr	r2, [pc, #164]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a82:	2312      	movs	r3, #18
 8001a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a94:	2304      	movs	r3, #4
 8001a96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <HAL_I2C_MspInit+0x188>)
 8001aa2:	f005 fad1 	bl	8007048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aae:	2312      	movs	r3, #18
 8001ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aca:	4619      	mov	r1, r3
 8001acc:	480b      	ldr	r0, [pc, #44]	; (8001afc <HAL_I2C_MspInit+0x180>)
 8001ace:	f005 fabb 	bl	8007048 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_I2C_MspInit+0x17c>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	bf00      	nop
 8001aec:	37c0      	adds	r7, #192	; 0xc0
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40005400 	.word	0x40005400
 8001af8:	40021000 	.word	0x40021000
 8001afc:	48000400 	.word	0x48000400
 8001b00:	40005800 	.word	0x40005800
 8001b04:	48001c00 	.word	0x48001c00

08001b08 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <HAL_I2C_MspDeInit+0x64>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10f      	bne.n	8001b3a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_I2C_MspDeInit+0x68>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <HAL_I2C_MspDeInit+0x68>)
 8001b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2a:	4812      	ldr	r0, [pc, #72]	; (8001b74 <HAL_I2C_MspDeInit+0x6c>)
 8001b2c:	f005 fc1e 	bl	800736c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	4810      	ldr	r0, [pc, #64]	; (8001b74 <HAL_I2C_MspDeInit+0x6c>)
 8001b34:	f005 fc1a 	bl	800736c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001b38:	e013      	b.n	8001b62 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_I2C_MspDeInit+0x70>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d10e      	bne.n	8001b62 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_I2C_MspDeInit+0x68>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_I2C_MspDeInit+0x68>)
 8001b4a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001b50:	2110      	movs	r1, #16
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <HAL_I2C_MspDeInit+0x74>)
 8001b54:	f005 fc0a 	bl	800736c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_I2C_MspDeInit+0x6c>)
 8001b5e:	f005 fc05 	bl	800736c <HAL_GPIO_DeInit>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	40005800 	.word	0x40005800
 8001b7c:	48001c00 	.word	0x48001c00

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0b2      	sub	sp, #200	; 0xc8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9c:	228c      	movs	r2, #140	; 0x8c
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f011 f895 	bl	8012cd0 <memset>
  if(huart->Instance==LPUART1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a86      	ldr	r2, [pc, #536]	; (8001dc4 <HAL_UART_MspInit+0x244>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d13e      	bne.n	8001c2e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f008 fd71 	bl	800a6a4 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc8:	f7ff fcd6 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bcc:	4b7e      	ldr	r3, [pc, #504]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	4a7d      	ldr	r2, [pc, #500]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001bd8:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be4:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	623b      	str	r3, [r7, #32]
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8001bfc:	f007 fe42 	bl	8009884 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001c00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4869      	ldr	r0, [pc, #420]	; (8001dcc <HAL_UART_MspInit+0x24c>)
 8001c28:	f005 fa0e 	bl	8007048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c2c:	e0c6      	b.n	8001dbc <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_UART_MspInit+0x250>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d15f      	bne.n	8001cf8 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c44:	4618      	mov	r0, r3
 8001c46:	f008 fd2d 	bl	800a6a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001c50:	f7ff fc92 	bl	8001578 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c54:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c58:	4a5b      	ldr	r2, [pc, #364]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c90:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001c9c:	f007 fdf2 	bl	8009884 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4843      	ldr	r0, [pc, #268]	; (8001dd4 <HAL_UART_MspInit+0x254>)
 8001cc6:	f005 f9bf 	bl	8007048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8001cca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4836      	ldr	r0, [pc, #216]	; (8001dcc <HAL_UART_MspInit+0x24c>)
 8001cf2:	f005 f9a9 	bl	8007048 <HAL_GPIO_Init>
}
 8001cf6:	e061      	b.n	8001dbc <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a36      	ldr	r2, [pc, #216]	; (8001dd8 <HAL_UART_MspInit+0x258>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d15c      	bne.n	8001dbc <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f008 fcc8 	bl	800a6a4 <HAL_RCCEx_PeriphCLKConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001d1a:	f7ff fc2d 	bl	8001578 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a29      	ldr	r2, [pc, #164]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2a:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_UART_MspInit+0x248>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001d66:	2340      	movs	r3, #64	; 0x40
 8001d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7e:	2307      	movs	r3, #7
 8001d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4814      	ldr	r0, [pc, #80]	; (8001ddc <HAL_UART_MspInit+0x25c>)
 8001d8c:	f005 f95c 	bl	8007048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001d90:	2304      	movs	r3, #4
 8001d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001da8:	2307      	movs	r3, #7
 8001daa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db8:	f005 f946 	bl	8007048 <HAL_GPIO_Init>
}
 8001dbc:	bf00      	nop
 8001dbe:	37c8      	adds	r7, #200	; 0xc8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40008000 	.word	0x40008000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	48001800 	.word	0x48001800
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	40004400 	.word	0x40004400
 8001ddc:	48000c00 	.word	0x48000c00

08001de0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <HAL_QSPI_MspInit+0xb8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d145      	bne.n	8001e8e <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e02:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e06:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6513      	str	r3, [r2, #80]	; 0x50
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_QSPI_MspInit+0xbc>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001e4a:	f640 0303 	movw	r3, #2051	; 0x803
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <HAL_QSPI_MspInit+0xc0>)
 8001e68:	f005 f8ee 	bl	8007048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001e6c:	23c8      	movs	r3, #200	; 0xc8
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e7c:	230a      	movs	r3, #10
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8a:	f005 f8dd 	bl	8007048 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	a0001000 	.word	0xa0001000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000400 	.word	0x48000400

08001ea4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_SD_MspInit+0xb4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d144      	bne.n	8001f50 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ec6:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_SD_MspInit+0xb8>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f1e:	230c      	movs	r3, #12
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <HAL_SD_MspInit+0xbc>)
 8001f2a:	f005 f88d 	bl	8007048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001f2e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f32:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f40:	230c      	movs	r3, #12
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <HAL_SD_MspInit+0xc0>)
 8001f4c:	f005 f87c 	bl	8007048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40012800 	.word	0x40012800
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	48000800 	.word	0x48000800

08001f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08e      	sub	sp, #56	; 0x38
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a4b      	ldr	r2, [pc, #300]	; (80020b4 <HAL_SPI_MspInit+0x14c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d146      	bne.n	8002018 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f94:	6613      	str	r3, [r2, #96]	; 0x60
 8001f96:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	4a44      	ldr	r2, [pc, #272]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	4b42      	ldr	r3, [pc, #264]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a3e      	ldr	r2, [pc, #248]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001fd2:	2330      	movs	r3, #48	; 0x30
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	4833      	ldr	r0, [pc, #204]	; (80020bc <HAL_SPI_MspInit+0x154>)
 8001fee:	f005 f82b 	bl	8007048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001ff2:	f248 0320 	movw	r3, #32800	; 0x8020
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002004:	2305      	movs	r3, #5
 8002006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200c:	4619      	mov	r1, r3
 800200e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002012:	f005 f819 	bl	8007048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002016:	e049      	b.n	80020ac <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_SPI_MspInit+0x158>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d144      	bne.n	80020ac <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_SPI_MspInit+0x150>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 800206a:	2306      	movs	r3, #6
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800207a:	2305      	movs	r3, #5
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800207e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002082:	4619      	mov	r1, r3
 8002084:	480f      	ldr	r0, [pc, #60]	; (80020c4 <HAL_SPI_MspInit+0x15c>)
 8002086:	f004 ffdf 	bl	8007048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800208a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800209c:	2305      	movs	r3, #5
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	4619      	mov	r1, r3
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_SPI_MspInit+0x154>)
 80020a8:	f004 ffce 	bl	8007048 <HAL_GPIO_Init>
}
 80020ac:	bf00      	nop
 80020ae:	3738      	adds	r7, #56	; 0x38
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40013000 	.word	0x40013000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	48000400 	.word	0x48000400
 80020c0:	40003800 	.word	0x40003800
 80020c4:	48002000 	.word	0x48002000

080020c8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_FMC_MspInit+0xc4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d14f      	bne.n	8002184 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_FMC_MspInit+0xc4>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_FMC_MspInit+0xc8>)
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	4a28      	ldr	r2, [pc, #160]	; (8002190 <HAL_FMC_MspInit+0xc8>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6513      	str	r3, [r2, #80]	; 0x50
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_FMC_MspInit+0xc8>)
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8002102:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002106:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002114:	230c      	movs	r3, #12
 8002116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	4619      	mov	r1, r3
 800211c:	481d      	ldr	r0, [pc, #116]	; (8002194 <HAL_FMC_MspInit+0xcc>)
 800211e:	f004 ff93 	bl	8007048 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8002122:	f240 233f 	movw	r3, #575	; 0x23f
 8002126:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002134:	230c      	movs	r3, #12
 8002136:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	4619      	mov	r1, r3
 800213c:	4816      	ldr	r0, [pc, #88]	; (8002198 <HAL_FMC_MspInit+0xd0>)
 800213e:	f004 ff83 	bl	8007048 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8002142:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8002146:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002154:	230c      	movs	r3, #12
 8002156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	480f      	ldr	r0, [pc, #60]	; (800219c <HAL_FMC_MspInit+0xd4>)
 800215e:	f004 ff73 	bl	8007048 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8002162:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002166:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002174:	230c      	movs	r3, #12
 8002176:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <HAL_FMC_MspInit+0xd8>)
 800217e:	f004 ff63 	bl	8007048 <HAL_GPIO_Init>
 8002182:	e000      	b.n	8002186 <HAL_FMC_MspInit+0xbe>
    return;
 8002184:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000a44 	.word	0x20000a44
 8002190:	40021000 	.word	0x40021000
 8002194:	48001000 	.word	0x48001000
 8002198:	48001800 	.word	0x48001800
 800219c:	48000c00 	.word	0x48000c00
 80021a0:	48001400 	.word	0x48001400

080021a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80021ac:	f7ff ff8c 	bl	80020c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a33      	ldr	r2, [pc, #204]	; (8002294 <HAL_SAI_MspInit+0xdc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d135      	bne.n	8002236 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80021ca:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_SAI_MspInit+0xe0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10b      	bne.n	80021ea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_SAI_MspInit+0xe4>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d6:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_SAI_MspInit+0xe4>)
 80021d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021dc:	6613      	str	r3, [r2, #96]	; 0x60
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_SAI_MspInit+0xe4>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_SAI_MspInit+0xe0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	4a29      	ldr	r2, [pc, #164]	; (8002298 <HAL_SAI_MspInit+0xe0>)
 80021f2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80021f4:	2354      	movs	r3, #84	; 0x54
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002204:	230d      	movs	r3, #13
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4824      	ldr	r0, [pc, #144]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 8002210:	f004 ff1a 	bl	8007048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002226:	230d      	movs	r3, #13
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	481c      	ldr	r0, [pc, #112]	; (80022a4 <HAL_SAI_MspInit+0xec>)
 8002232:	f004 ff09 	bl	8007048 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <HAL_SAI_MspInit+0xf0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d124      	bne.n	800228a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_SAI_MspInit+0xe0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_SAI_MspInit+0xe4>)
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_SAI_MspInit+0xe4>)
 800224e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002252:	6613      	str	r3, [r2, #96]	; 0x60
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_SAI_MspInit+0xe4>)
 8002256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_SAI_MspInit+0xe0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <HAL_SAI_MspInit+0xe0>)
 8002268:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800226a:	2308      	movs	r3, #8
 800226c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800227a:	230d      	movs	r3, #13
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4806      	ldr	r0, [pc, #24]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 8002286:	f004 fedf 	bl	8007048 <HAL_GPIO_Init>

    }
}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	; 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40015404 	.word	0x40015404
 8002298:	20000a48 	.word	0x20000a48
 800229c:	40021000 	.word	0x40021000
 80022a0:	48001000 	.word	0x48001000
 80022a4:	48000400 	.word	0x48000400
 80022a8:	40015424 	.word	0x40015424

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <NMI_Handler+0x4>

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f8:	f003 fbb0 	bl	8005a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <OTG_FS_IRQHandler+0x10>)
 8002306:	f006 f9cd 	bl	80086a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20002150 	.word	0x20002150

08002314 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <SystemInit+0x20>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <SystemInit+0x20>)
 8002320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002370 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800233c:	f7ff ffea 	bl	8002314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <LoopForever+0x6>)
  ldr r1, =_edata
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <LoopForever+0xe>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002358:	4c0a      	ldr	r4, [pc, #40]	; (8002384 <LoopForever+0x16>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002366:	f010 fc8f 	bl	8012c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800236a:	f7fe f8eb 	bl	8000544 <main>

0800236e <LoopForever>:

LoopForever:
    b LoopForever
 800236e:	e7fe      	b.n	800236e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002370:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 800237c:	08014cd0 	.word	0x08014cd0
  ldr r2, =_sbss
 8002380:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8002384:	2000287c 	.word	0x2000287c

08002388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC1_2_IRQHandler>
	...

0800238c <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f90d 	bl	80025b8 <ft6x06_GetInstance>
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2bff      	cmp	r3, #255	; 0xff
 80023a6:	d10e      	bne.n	80023c6 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f000 f905 	bl	80025b8 <ft6x06_GetInstance>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80023b2:	7bbb      	ldrb	r3, [r7, #14]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d806      	bhi.n	80023c6 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80023b8:	7bbb      	ldrb	r3, [r7, #14]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	b2d1      	uxtb	r1, r2
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <ft6x06_Init+0x44>)
 80023c0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 80023c2:	f002 fab1 	bl	8004928 <TS_IO_Init>
    }
  }
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000a4c 	.word	0x20000a4c

080023d4 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80023f4:	f002 fa98 	bl	8004928 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	21a8      	movs	r1, #168	; 0xa8
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fad8 	bl	80049b4 <TS_IO_Read>
 8002404:	4603      	mov	r3, r0
 8002406:	b29b      	uxth	r3, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f8bc 	bl	800259a <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f88d 	bl	8002544 <ft6x06_TS_DisableIT>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2102      	movs	r1, #2
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fab3 	bl	80049b4 <TS_IO_Read>
 800244e:	4603      	mov	r3, r0
 8002450:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	b2db      	uxtb	r3, r3
 800245c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <ft6x06_TS_DetectTouch+0x50>)
 8002470:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <ft6x06_TS_DetectTouch+0x50>)
 8002474:	2200      	movs	r2, #0
 8002476:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	b2db      	uxtb	r3, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000a50 	.word	0x20000a50

08002488 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <ft6x06_TS_GetXY+0x90>)
 800249c:	789a      	ldrb	r2, [r3, #2]
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <ft6x06_TS_GetXY+0x90>)
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d234      	bcs.n	8002510 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <ft6x06_TS_GetXY+0x90>)
 80024a8:	789b      	ldrb	r3, [r3, #2]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <ft6x06_TS_GetXY+0x2c>
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d003      	beq.n	80024ba <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80024b2:	e005      	b.n	80024c0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80024b4:	2303      	movs	r3, #3
 80024b6:	75fb      	strb	r3, [r7, #23]
      break;
 80024b8:	e002      	b.n	80024c0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80024ba:	2309      	movs	r3, #9
 80024bc:	75fb      	strb	r3, [r7, #23]
      break;
 80024be:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80024c0:	89fb      	ldrh	r3, [r7, #14]
 80024c2:	b2d8      	uxtb	r0, r3
 80024c4:	f107 0210 	add.w	r2, r7, #16
 80024c8:	7df9      	ldrb	r1, [r7, #23]
 80024ca:	2304      	movs	r3, #4
 80024cc:	f002 fa88 	bl	80049e0 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80024d0:	7c3b      	ldrb	r3, [r7, #16]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024da:	b21a      	sxth	r2, r3
 80024dc:	7c7b      	ldrb	r3, [r7, #17]
 80024de:	b21b      	sxth	r3, r3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80024ea:	7cbb      	ldrb	r3, [r7, #18]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	4313      	orrs	r3, r2
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <ft6x06_TS_GetXY+0x90>)
 8002506:	789b      	ldrb	r3, [r3, #2]
 8002508:	3301      	adds	r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b02      	ldr	r3, [pc, #8]	; (8002518 <ft6x06_TS_GetXY+0x90>)
 800250e:	709a      	strb	r2, [r3, #2]
  }
}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000a50 	.word	0x20000a50

0800251c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	21a4      	movs	r1, #164	; 0xa4
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fa22 	bl	8004980 <TS_IO_Write>
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	21a4      	movs	r1, #164	; 0xa4
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fa0e 	bl	8004980 <TS_IO_Write>
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80025a8:	68fb      	ldr	r3, [r7, #12]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e00b      	b.n	80025e4 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <ft6x06_GetInstance+0x40>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d101      	bne.n	80025de <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	e006      	b.n	80025ec <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	3301      	adds	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d9f0      	bls.n	80025cc <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80025ea:	23ff      	movs	r3, #255	; 0xff
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	20000a4c 	.word	0x20000a4c

080025fc <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 ffd1 	bl	80035b0 <mfxstm32l152_GetInstance>
 800260e:	4603      	mov	r3, r0
 8002610:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2bff      	cmp	r3, #255	; 0xff
 8002616:	d10e      	bne.n	8002636 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8002618:	2000      	movs	r0, #0
 800261a:	f000 ffc9 	bl	80035b0 <mfxstm32l152_GetInstance>
 800261e:	4603      	mov	r3, r0
 8002620:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d806      	bhi.n	8002636 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8002628:	7bbb      	ldrb	r3, [r7, #14]
 800262a:	88fa      	ldrh	r2, [r7, #6]
 800262c:	b2d1      	uxtb	r1, r2
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <mfxstm32l152_Init+0x58>)
 8002630:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8002632:	f001 ff4b 	bl	80044cc <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	2102      	movs	r1, #2
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f8db 	bl	80027f6 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f8fc 	bl	8002842 <mfxstm32l152_SetIrqOutPinType>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000a54 	.word	0x20000a54

08002658 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 ffc3 	bl	80035f0 <mfxstm32l152_ReleaseInstance>
 800266a:	4603      	mov	r3, r0
 800266c:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2bff      	cmp	r3, #255	; 0xff
 8002672:	d001      	beq.n	8002678 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8002674:	f001 ff3a 	bl	80044ec <MFX_IO_DeInit>
  }
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	2140      	movs	r1, #64	; 0x40
 8002690:	4618      	mov	r0, r3
 8002692:	f001 ffcd 	bl	8004630 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8002696:	200a      	movs	r0, #10
 8002698:	f002 f80c 	bl	80046b4 <MFX_IO_Delay>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2240      	movs	r2, #64	; 0x40
 80026b2:	2140      	movs	r1, #64	; 0x40
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 ffbb 	bl	8004630 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80026ba:	f001 ff81 	bl	80045c0 <MFX_IO_EnableWakeupPin>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff6c 	bl	80035b0 <mfxstm32l152_GetInstance>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2bff      	cmp	r3, #255	; 0xff
 80026e0:	d101      	bne.n	80026e6 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 80026e2:	f001 ff6d 	bl	80045c0 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 80026e6:	f001 ff8f 	bl	8004608 <MFX_IO_Wakeup>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f001 ffd9 	bl	80046b4 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8002702:	f001 fee3 	bl	80044cc <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f001 ffa4 	bl	8004658 <MFX_IO_Read>
 8002710:	4603      	mov	r3, r0
 8002712:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	b29b      	uxth	r3, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	460a      	mov	r2, r1
 800272a:	80fb      	strh	r3, [r7, #6]
 800272c:	4613      	mov	r3, r2
 800272e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	2142      	movs	r1, #66	; 0x42
 8002738:	4618      	mov	r0, r3
 800273a:	f001 ff8d 	bl	8004658 <MFX_IO_Read>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	797b      	ldrb	r3, [r7, #5]
 8002746:	4313      	orrs	r3, r2
 8002748:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	2142      	movs	r1, #66	; 0x42
 8002750:	4618      	mov	r0, r3
 8002752:	f001 ff6d 	bl	8004630 <MFX_IO_Write>
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	460a      	mov	r2, r1
 8002768:	80fb      	strh	r3, [r7, #6]
 800276a:	4613      	mov	r3, r2
 800276c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	2142      	movs	r1, #66	; 0x42
 8002776:	4618      	mov	r0, r3
 8002778:	f001 ff6e 	bl	8004658 <MFX_IO_Read>
 800277c:	4603      	mov	r3, r0
 800277e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8002780:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002784:	43db      	mvns	r3, r3
 8002786:	b25a      	sxtb	r2, r3
 8002788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278c:	4013      	ands	r3, r2
 800278e:	b25b      	sxtb	r3, r3
 8002790:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	2142      	movs	r1, #66	; 0x42
 8002798:	4618      	mov	r0, r3
 800279a:	f001 ff49 	bl	8004630 <MFX_IO_Write>
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	460a      	mov	r2, r1
 80027b0:	80fb      	strh	r3, [r7, #6]
 80027b2:	4613      	mov	r3, r2
 80027b4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	2108      	movs	r1, #8
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 ff4c 	bl	8004658 <MFX_IO_Read>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	797b      	ldrb	r3, [r7, #5]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b2db      	uxtb	r3, r3
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	460a      	mov	r2, r1
 80027dc:	80fb      	strh	r3, [r7, #6]
 80027de:	4613      	mov	r3, r2
 80027e0:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 80027e2:	797a      	ldrb	r2, [r7, #5]
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2144      	movs	r1, #68	; 0x44
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 ff21 	bl	8004630 <MFX_IO_Write>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	460a      	mov	r2, r1
 8002800:	80fb      	strh	r3, [r7, #6]
 8002802:	4613      	mov	r3, r2
 8002804:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2141      	movs	r1, #65	; 0x41
 800280e:	4618      	mov	r0, r3
 8002810:	f001 ff22 	bl	8004658 <MFX_IO_Read>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	f023 0302 	bic.w	r3, r3, #2
 800281e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	797b      	ldrb	r3, [r7, #5]
 8002824:	4313      	orrs	r3, r2
 8002826:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	2141      	movs	r1, #65	; 0x41
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fefe 	bl	8004630 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8002834:	2001      	movs	r0, #1
 8002836:	f001 ff3d 	bl	80046b4 <MFX_IO_Delay>

}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	460a      	mov	r2, r1
 800284c:	80fb      	strh	r3, [r7, #6]
 800284e:	4613      	mov	r3, r2
 8002850:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	2141      	movs	r1, #65	; 0x41
 800285a:	4618      	mov	r0, r3
 800285c:	f001 fefc 	bl	8004658 <MFX_IO_Read>
 8002860:	4603      	mov	r3, r0
 8002862:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	797b      	ldrb	r3, [r7, #5]
 8002870:	4313      	orrs	r3, r2
 8002872:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	2141      	movs	r1, #65	; 0x41
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fed8 	bl	8004630 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8002880:	2001      	movs	r0, #1
 8002882:	f001 ff17 	bl	80046b4 <MFX_IO_Delay>

}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	6039      	str	r1, [r7, #0]
 8002898:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 feda 	bl	8004658 <MFX_IO_Read>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b6:	d304      	bcc.n	80028c2 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	f043 0308 	orr.w	r3, r3, #8
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e003      	b.n	80028ca <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	f023 0308 	bic.w	r3, r3, #8
 80028c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 fead 	bl	8004630 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80028d6:	2001      	movs	r0, #1
 80028d8:	f001 feec 	bl	80046b4 <MFX_IO_Delay>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	80fb      	strh	r3, [r7, #6]
 80028f0:	4613      	mov	r3, r2
 80028f2:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 80028f8:	797b      	ldrb	r3, [r7, #5]
 80028fa:	2b17      	cmp	r3, #23
 80028fc:	f200 82d4 	bhi.w	8002ea8 <mfxstm32l152_IO_Config+0x5c4>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <mfxstm32l152_IO_Config+0x24>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002999 	.word	0x08002999
 800290c:	08002a29 	.word	0x08002a29
 8002910:	08002ae9 	.word	0x08002ae9
 8002914:	08002bd9 	.word	0x08002bd9
 8002918:	08002cc9 	.word	0x08002cc9
 800291c:	08002db9 	.word	0x08002db9
 8002920:	08002969 	.word	0x08002969
 8002924:	08002969 	.word	0x08002969
 8002928:	080029c9 	.word	0x080029c9
 800292c:	080029f9 	.word	0x080029f9
 8002930:	08002ea9 	.word	0x08002ea9
 8002934:	08002ab9 	.word	0x08002ab9
 8002938:	08002a89 	.word	0x08002a89
 800293c:	08002ea9 	.word	0x08002ea9
 8002940:	08002a59 	.word	0x08002a59
 8002944:	08002a29 	.word	0x08002a29
 8002948:	08002b39 	.word	0x08002b39
 800294c:	08002b89 	.word	0x08002b89
 8002950:	08002c29 	.word	0x08002c29
 8002954:	08002c79 	.word	0x08002c79
 8002958:	08002d19 	.word	0x08002d19
 800295c:	08002d69 	.word	0x08002d69
 8002960:	08002e09 	.word	0x08002e09
 8002964:	08002e59 	.word	0x08002e59
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	6839      	ldr	r1, [r7, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fb67 	bl	8003040 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	2200      	movs	r2, #0
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fa9d 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800297e:	88f8      	ldrh	r0, [r7, #6]
 8002980:	2300      	movs	r3, #0
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	2164      	movs	r1, #100	; 0x64
 8002986:	f000 fe57 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800298a:	88f8      	ldrh	r0, [r7, #6]
 800298c:	2300      	movs	r3, #0
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	2168      	movs	r1, #104	; 0x68
 8002992:	f000 fe51 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    break;
 8002996:	e28a      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fb4f 	bl	8003040 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2200      	movs	r2, #0
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fa85 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80029ae:	88f8      	ldrh	r0, [r7, #6]
 80029b0:	2300      	movs	r3, #0
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	2164      	movs	r1, #100	; 0x64
 80029b6:	f000 fe3f 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80029ba:	88f8      	ldrh	r0, [r7, #6]
 80029bc:	2301      	movs	r3, #1
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	2168      	movs	r1, #104	; 0x68
 80029c2:	f000 fe39 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    break;
 80029c6:	e272      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fb37 	bl	8003040 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	2200      	movs	r2, #0
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fa6d 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80029de:	88f8      	ldrh	r0, [r7, #6]
 80029e0:	2301      	movs	r3, #1
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	2164      	movs	r1, #100	; 0x64
 80029e6:	f000 fe27 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80029ea:	88f8      	ldrh	r0, [r7, #6]
 80029ec:	2301      	movs	r3, #1
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	2168      	movs	r1, #104	; 0x68
 80029f2:	f000 fe21 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    break;
 80029f6:	e25a      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	6839      	ldr	r1, [r7, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fb1f 	bl	8003040 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2200      	movs	r2, #0
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fa55 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002a0e:	88f8      	ldrh	r0, [r7, #6]
 8002a10:	2301      	movs	r3, #1
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	2164      	movs	r1, #100	; 0x64
 8002a16:	f000 fe0f 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002a1a:	88f8      	ldrh	r0, [r7, #6]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	2168      	movs	r1, #104	; 0x68
 8002a22:	f000 fe09 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    break;
 8002a26:	e242      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	6839      	ldr	r1, [r7, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fb07 	bl	8003040 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2201      	movs	r2, #1
 8002a36:	6839      	ldr	r1, [r7, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fa3d 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8002a3e:	88f8      	ldrh	r0, [r7, #6]
 8002a40:	2300      	movs	r3, #0
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	2164      	movs	r1, #100	; 0x64
 8002a46:	f000 fdf7 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002a4a:	88f8      	ldrh	r0, [r7, #6]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	2168      	movs	r1, #104	; 0x68
 8002a52:	f000 fdf1 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    break;
 8002a56:	e22a      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 faef 	bl	8003040 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	2201      	movs	r2, #1
 8002a66:	6839      	ldr	r1, [r7, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fa25 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8002a6e:	88f8      	ldrh	r0, [r7, #6]
 8002a70:	2300      	movs	r3, #0
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	2164      	movs	r1, #100	; 0x64
 8002a76:	f000 fddf 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002a7a:	88f8      	ldrh	r0, [r7, #6]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	2168      	movs	r1, #104	; 0x68
 8002a82:	f000 fdd9 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    break;
 8002a86:	e212      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	6839      	ldr	r1, [r7, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fad7 	bl	8003040 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2201      	movs	r2, #1
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fa0d 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8002a9e:	88f8      	ldrh	r0, [r7, #6]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	f000 fdc7 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002aaa:	88f8      	ldrh	r0, [r7, #6]
 8002aac:	2300      	movs	r3, #0
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	2168      	movs	r1, #104	; 0x68
 8002ab2:	f000 fdc1 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    break;
 8002ab6:	e1fa      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fabf 	bl	8003040 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f9f5 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8002ace:	88f8      	ldrh	r0, [r7, #6]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	2164      	movs	r1, #100	; 0x64
 8002ad6:	f000 fdaf 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002ada:	88f8      	ldrh	r0, [r7, #6]
 8002adc:	2301      	movs	r3, #1
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	2168      	movs	r1, #104	; 0x68
 8002ae2:	f000 fda9 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    break;
 8002ae6:	e1e2      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fa7a 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	2200      	movs	r2, #0
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f9de 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8002afc:	88f8      	ldrh	r0, [r7, #6]
 8002afe:	2300      	movs	r3, #0
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	2164      	movs	r1, #100	; 0x64
 8002b04:	f000 fd98 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002b08:	88f8      	ldrh	r0, [r7, #6]
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	2168      	movs	r1, #104	; 0x68
 8002b10:	f000 fd92 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	2201      	movs	r2, #1
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f9de 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2201      	movs	r2, #1
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f9ed 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	6839      	ldr	r1, [r7, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fa75 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002b36:	e1ba      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fa52 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	2200      	movs	r2, #0
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f9b6 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002b4c:	88f8      	ldrh	r0, [r7, #6]
 8002b4e:	2301      	movs	r3, #1
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	2164      	movs	r1, #100	; 0x64
 8002b54:	f000 fd70 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002b58:	88f8      	ldrh	r0, [r7, #6]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	2168      	movs	r1, #104	; 0x68
 8002b60:	f000 fd6a 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2201      	movs	r2, #1
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f9b6 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	2201      	movs	r2, #1
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f9c5 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fa4d 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002b86:	e192      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fa2a 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	2200      	movs	r2, #0
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f98e 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002b9c:	88f8      	ldrh	r0, [r7, #6]
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	2164      	movs	r1, #100	; 0x64
 8002ba4:	f000 fd48 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002ba8:	88f8      	ldrh	r0, [r7, #6]
 8002baa:	2300      	movs	r3, #0
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	2168      	movs	r1, #104	; 0x68
 8002bb0:	f000 fd42 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f98e 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f99d 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fa25 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002bd6:	e16a      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fa02 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	2200      	movs	r2, #0
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f966 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8002bec:	88f8      	ldrh	r0, [r7, #6]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	2164      	movs	r1, #100	; 0x64
 8002bf4:	f000 fd20 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002bf8:	88f8      	ldrh	r0, [r7, #6]
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	2168      	movs	r1, #104	; 0x68
 8002c00:	f000 fd1a 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2201      	movs	r2, #1
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f966 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2200      	movs	r2, #0
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f975 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f9fd 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002c26:	e142      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f9da 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	2200      	movs	r2, #0
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f93e 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002c3c:	88f8      	ldrh	r0, [r7, #6]
 8002c3e:	2301      	movs	r3, #1
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	2164      	movs	r1, #100	; 0x64
 8002c44:	f000 fcf8 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002c48:	88f8      	ldrh	r0, [r7, #6]
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	2168      	movs	r1, #104	; 0x68
 8002c50:	f000 fcf2 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	2201      	movs	r2, #1
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f93e 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2200      	movs	r2, #0
 8002c64:	6839      	ldr	r1, [r7, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f94d 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f9d5 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002c76:	e11a      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f9b2 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2200      	movs	r2, #0
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f916 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002c8c:	88f8      	ldrh	r0, [r7, #6]
 8002c8e:	2301      	movs	r3, #1
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	2164      	movs	r1, #100	; 0x64
 8002c94:	f000 fcd0 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002c98:	88f8      	ldrh	r0, [r7, #6]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	2168      	movs	r1, #104	; 0x68
 8002ca0:	f000 fcca 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f916 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f925 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f9ad 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002cc6:	e0f2      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f98a 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	6839      	ldr	r1, [r7, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f8ee 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8002cdc:	88f8      	ldrh	r0, [r7, #6]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	2164      	movs	r1, #100	; 0x64
 8002ce4:	f000 fca8 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002ce8:	88f8      	ldrh	r0, [r7, #6]
 8002cea:	2301      	movs	r3, #1
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	2168      	movs	r1, #104	; 0x68
 8002cf0:	f000 fca2 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f8ee 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	2200      	movs	r2, #0
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f8fd 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	6839      	ldr	r1, [r7, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f985 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002d16:	e0ca      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f962 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	2200      	movs	r2, #0
 8002d24:	6839      	ldr	r1, [r7, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f8c6 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002d2c:	88f8      	ldrh	r0, [r7, #6]
 8002d2e:	2301      	movs	r3, #1
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	2164      	movs	r1, #100	; 0x64
 8002d34:	f000 fc80 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002d38:	88f8      	ldrh	r0, [r7, #6]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	2168      	movs	r1, #104	; 0x68
 8002d40:	f000 fc7a 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2200      	movs	r2, #0
 8002d48:	6839      	ldr	r1, [r7, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f8c6 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2200      	movs	r2, #0
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f8d5 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 f95d 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002d66:	e0a2      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f93a 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	2200      	movs	r2, #0
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f89e 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002d7c:	88f8      	ldrh	r0, [r7, #6]
 8002d7e:	2301      	movs	r3, #1
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	2164      	movs	r1, #100	; 0x64
 8002d84:	f000 fc58 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002d88:	88f8      	ldrh	r0, [r7, #6]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	2168      	movs	r1, #104	; 0x68
 8002d90:	f000 fc52 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	2200      	movs	r2, #0
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f89e 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	2200      	movs	r2, #0
 8002da4:	6839      	ldr	r1, [r7, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8ad 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	6839      	ldr	r1, [r7, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f935 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002db6:	e07a      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f912 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f876 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8002dcc:	88f8      	ldrh	r0, [r7, #6]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	2164      	movs	r1, #100	; 0x64
 8002dd4:	f000 fc30 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002dd8:	88f8      	ldrh	r0, [r7, #6]
 8002dda:	2301      	movs	r3, #1
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	2168      	movs	r1, #104	; 0x68
 8002de0:	f000 fc2a 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	2200      	movs	r2, #0
 8002de8:	6839      	ldr	r1, [r7, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f876 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2201      	movs	r2, #1
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f885 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f90d 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002e06:	e052      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f8ea 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	2200      	movs	r2, #0
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f84e 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002e1c:	88f8      	ldrh	r0, [r7, #6]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	2164      	movs	r1, #100	; 0x64
 8002e24:	f000 fc08 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8002e28:	88f8      	ldrh	r0, [r7, #6]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	2168      	movs	r1, #104	; 0x68
 8002e30:	f000 fc02 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	2200      	movs	r2, #0
 8002e38:	6839      	ldr	r1, [r7, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f84e 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	2201      	movs	r2, #1
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f85d 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f8e5 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002e56:	e02a      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f8c2 	bl	8002fe4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2200      	movs	r2, #0
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f826 	bl	8002eb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8002e6c:	88f8      	ldrh	r0, [r7, #6]
 8002e6e:	2301      	movs	r3, #1
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	2164      	movs	r1, #100	; 0x64
 8002e74:	f000 fbe0 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8002e78:	88f8      	ldrh	r0, [r7, #6]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	2168      	movs	r1, #104	; 0x68
 8002e80:	f000 fbda 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	2200      	movs	r2, #0
 8002e88:	6839      	ldr	r1, [r7, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f826 	bl	8002edc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	2201      	movs	r2, #1
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f835 	bl	8002f06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	6839      	ldr	r1, [r7, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f8bd 	bl	8003020 <mfxstm32l152_IO_EnablePinIT>
    break;
 8002ea6:	e002      	b.n	8002eae <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8002ea8:	797b      	ldrb	r3, [r7, #5]
 8002eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8002eac:	bf00      	nop
  }

  return error_code;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	80fb      	strh	r3, [r7, #6]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8002ec8:	797b      	ldrb	r3, [r7, #5]
 8002eca:	88f8      	ldrh	r0, [r7, #6]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	2160      	movs	r1, #96	; 0x60
 8002ed0:	f000 fbb2 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	80fb      	strh	r3, [r7, #6]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8002eec:	797b      	ldrb	r3, [r7, #5]
 8002eee:	88f8      	ldrh	r0, [r7, #6]
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	214c      	movs	r1, #76	; 0x4c
 8002ef4:	f000 fba0 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f001 fbdb 	bl	80046b4 <MFX_IO_Delay>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	6039      	str	r1, [r7, #0]
 8002f10:	80fb      	strh	r3, [r7, #6]
 8002f12:	4613      	mov	r3, r2
 8002f14:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8002f16:	797b      	ldrb	r3, [r7, #5]
 8002f18:	88f8      	ldrh	r0, [r7, #6]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	2150      	movs	r1, #80	; 0x50
 8002f1e:	f000 fb8b 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f001 fbc6 	bl	80046b4 <MFX_IO_Delay>
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	80fb      	strh	r3, [r7, #6]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8002f40:	797b      	ldrb	r3, [r7, #5]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8002f46:	88f8      	ldrh	r0, [r7, #6]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	216c      	movs	r1, #108	; 0x6c
 8002f4e:	f000 fb73 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8002f52:	e005      	b.n	8002f60 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8002f54:	88f8      	ldrh	r0, [r7, #6]
 8002f56:	2301      	movs	r3, #1
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	2170      	movs	r1, #112	; 0x70
 8002f5c:	f000 fb6c 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	2110      	movs	r1, #16
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 fb63 	bl	8004658 <MFX_IO_Read>
 8002f92:	4603      	mov	r3, r0
 8002f94:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d006      	beq.n	8002fae <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	2111      	movs	r1, #17
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fb57 	bl	8004658 <MFX_IO_Read>
 8002faa:	4603      	mov	r3, r0
 8002fac:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d006      	beq.n	8002fc6 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	2112      	movs	r1, #18
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 fb4b 	bl	8004658 <MFX_IO_Read>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	021a      	lsls	r2, r3, #8
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4013      	ands	r3, r2
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8002fee:	f001 fab9 	bl	8004564 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fb92 	bl	8002720 <mfxstm32l152_EnableITSource>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	2101      	movs	r1, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fba3 	bl	800275e <mfxstm32l152_DisableITSource>
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 800302c:	88f8      	ldrh	r0, [r7, #6]
 800302e:	2301      	movs	r3, #1
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	2148      	movs	r1, #72	; 0x48
 8003034:	f000 fb00 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 800304c:	88f8      	ldrh	r0, [r7, #6]
 800304e:	2300      	movs	r3, #0
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	2148      	movs	r1, #72	; 0x48
 8003054:	f000 faf0 	bl	8003638 <mfxstm32l152_reg24_setPinValue>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	210c      	movs	r1, #12
 8003084:	4618      	mov	r0, r3
 8003086:	f001 fae7 	bl	8004658 <MFX_IO_Read>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003094:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	210d      	movs	r1, #13
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 fad9 	bl	8004658 <MFX_IO_Read>
 80030a6:	4603      	mov	r3, r0
 80030a8:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	210e      	movs	r1, #14
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 facd 	bl	8004658 <MFX_IO_Read>
 80030be:	4603      	mov	r3, r0
 80030c0:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	89bb      	ldrh	r3, [r7, #12]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	4413      	add	r3, r2
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	4413      	add	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	4013      	ands	r3, r2
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	6039      	str	r1, [r7, #0]
 80030ec:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	0c1b      	lsrs	r3, r3, #16
 80030fc:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2154      	movs	r1, #84	; 0x54
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fa90 	bl	8004630 <MFX_IO_Write>
  }
  if (pin_8_15)
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8003116:	7bba      	ldrb	r2, [r7, #14]
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	2155      	movs	r1, #85	; 0x55
 800311c:	4618      	mov	r0, r3
 800311e:	f001 fa87 	bl	8004630 <MFX_IO_Write>
  }
  if (pin_16_23)
 8003122:	7b7b      	ldrb	r3, [r7, #13]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8003128:	7b7a      	ldrb	r2, [r7, #13]
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2156      	movs	r1, #86	; 0x56
 800312e:	4618      	mov	r0, r3
 8003130:	f001 fa7e 	bl	8004630 <MFX_IO_Write>
  }
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	b29b      	uxth	r3, r3
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fa80 	bl	8004658 <MFX_IO_Read>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	2180      	movs	r1, #128	; 0x80
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fa5e 	bl	8004630 <MFX_IO_Write>
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 800317c:	b084      	sub	sp, #16
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	4604      	mov	r4, r0
 8003186:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800318a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800318e:	4623      	mov	r3, r4
 8003190:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 fa58 	bl	8004658 <MFX_IO_Read>
 80031a8:	4603      	mov	r3, r0
 80031aa:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80031ac:	7bbb      	ldrb	r3, [r7, #14]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80031b6:	7bbb      	ldrb	r3, [r7, #14]
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	7bba      	ldrb	r2, [r7, #14]
 80031c6:	2140      	movs	r1, #64	; 0x40
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 fa31 	bl	8004630 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 80031ce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 030e 	and.w	r3, r3, #14
 80031da:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 80031dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 80031f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031fc:	b25a      	sxtb	r2, r3
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	4313      	orrs	r3, r2
 8003204:	b25b      	sxtb	r3, r3
 8003206:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	b29b      	uxth	r3, r3
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	2180      	movs	r1, #128	; 0x80
 8003212:	4618      	mov	r0, r3
 8003214:	f001 fa0c 	bl	8004630 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003218:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800321c:	b25b      	sxtb	r3, r3
 800321e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003222:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8003224:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003228:	b25b      	sxtb	r3, r3
 800322a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800322e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003230:	4313      	orrs	r3, r2
 8003232:	b25b      	sxtb	r3, r3
 8003234:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	b29b      	uxth	r3, r3
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	2181      	movs	r1, #129	; 0x81
 8003240:	4618      	mov	r0, r3
 8003242:	f001 f9f5 	bl	8004630 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8003246:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	b29b      	uxth	r3, r3
 800324c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	b29b      	uxth	r3, r3
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	2182      	movs	r1, #130	; 0x82
 8003258:	4618      	mov	r0, r3
 800325a:	f001 f9e9 	bl	8004630 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 800325e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003260:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	2183      	movs	r1, #131	; 0x83
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f9df 	bl	8004630 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8003272:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	b29b      	uxth	r3, r3
 8003278:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	b29b      	uxth	r3, r3
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	2184      	movs	r1, #132	; 0x84
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f9d3 	bl	8004630 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 800328a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800328c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	b29b      	uxth	r3, r3
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	2185      	movs	r1, #133	; 0x85
 8003298:	4618      	mov	r0, r3
 800329a:	f001 f9c9 	bl	8004630 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 800329e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	2186      	movs	r1, #134	; 0x86
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 f9bd 	bl	8004630 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80032b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	b29b      	uxth	r3, r3
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	2187      	movs	r1, #135	; 0x87
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f9b3 	bl	8004630 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 80032ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	2188      	movs	r1, #136	; 0x88
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 f9a7 	bl	8004630 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 80032e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032e4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	2189      	movs	r1, #137	; 0x89
 80032f0:	4618      	mov	r0, r3
 80032f2:	f001 f99d 	bl	8004630 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 80032f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	b29b      	uxth	r3, r3
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	218a      	movs	r1, #138	; 0x8a
 8003308:	4618      	mov	r0, r3
 800330a:	f001 f991 	bl	8004630 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 800330e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003310:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	b29b      	uxth	r3, r3
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	218b      	movs	r1, #139	; 0x8b
 800331c:	4618      	mov	r0, r3
 800331e:	f001 f987 	bl	8004630 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8003322:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003324:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	2190      	movs	r1, #144	; 0x90
 8003330:	4618      	mov	r0, r3
 8003332:	f001 f97d 	bl	8004630 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8003336:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003338:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	2191      	movs	r1, #145	; 0x91
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f973 	bl	8004630 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 800334a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800334c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	b29b      	uxth	r3, r3
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	2192      	movs	r1, #146	; 0x92
 8003358:	4618      	mov	r0, r3
 800335a:	f001 f969 	bl	8004630 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 800335e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003360:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	b29b      	uxth	r3, r3
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	2193      	movs	r1, #147	; 0x93
 800336c:	4618      	mov	r0, r3
 800336e:	f001 f95f 	bl	8004630 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8003372:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003374:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	b29b      	uxth	r3, r3
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	2194      	movs	r1, #148	; 0x94
 8003380:	4618      	mov	r0, r3
 8003382:	f001 f955 	bl	8004630 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8003386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	b29b      	uxth	r3, r3
 800338c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	218c      	movs	r1, #140	; 0x8c
 8003398:	4618      	mov	r0, r3
 800339a:	f001 f949 	bl	8004630 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 800339e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033a0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	218d      	movs	r1, #141	; 0x8d
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 f93f 	bl	8004630 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80033b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	b29b      	uxth	r3, r3
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	218e      	movs	r1, #142	; 0x8e
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 f933 	bl	8004630 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 80033ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033cc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	218f      	movs	r1, #143	; 0x8f
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 f929 	bl	8004630 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 80033de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80033e2:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	2196      	movs	r1, #150	; 0x96
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 f91e 	bl	8004630 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80033f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80033fe:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8003400:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003404:	b25b      	sxtb	r3, r3
 8003406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800340a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800340c:	4313      	orrs	r3, r2
 800340e:	b25b      	sxtb	r3, r3
 8003410:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	b29b      	uxth	r3, r3
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	2197      	movs	r1, #151	; 0x97
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f907 	bl	8004630 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8003422:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003426:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	b29b      	uxth	r3, r3
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	2198      	movs	r1, #152	; 0x98
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f8fc 	bl	8004630 <MFX_IO_Write>
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003442:	b004      	add	sp, #16
 8003444:	4770      	bx	lr

08003446 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	6039      	str	r1, [r7, #0]
 8003450:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	b298      	uxth	r0, r3
 8003458:	f107 020c 	add.w	r2, r7, #12
 800345c:	2303      	movs	r3, #3
 800345e:	2114      	movs	r1, #20
 8003460:	f001 f90e 	bl	8004680 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8003464:	7b3b      	ldrb	r3, [r7, #12]
 8003466:	041a      	lsls	r2, r3, #16
 8003468:	7b7b      	ldrb	r3, [r7, #13]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	4313      	orrs	r3, r2
 800346e:	7bba      	ldrb	r2, [r7, #14]
 8003470:	4313      	orrs	r3, r2
 8003472:	461a      	mov	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	601a      	str	r2, [r3, #0]

}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800348a:	f001 f86b 	bl	8004564 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f944 	bl	8002720 <mfxstm32l152_EnableITSource>
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2102      	movs	r1, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f98f 	bl	80027d2 <mfxstm32l152_ClearGlobalIT>
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2102      	movs	r1, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f96b 	bl	80027a6 <mfxstm32l152_GlobalITStatus>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff f938 	bl	800275e <mfxstm32l152_DisableITSource>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	2103      	movs	r1, #3
 8003508:	4618      	mov	r0, r3
 800350a:	f001 f8a5 	bl	8004658 <MFX_IO_Read>
 800350e:	4603      	mov	r3, r0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	2104      	movs	r1, #4
 800352a:	4618      	mov	r0, r3
 800352c:	f001 f894 	bl	8004658 <MFX_IO_Read>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003544:	f001 f80e 	bl	8004564 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	2104      	movs	r1, #4
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff f8e7 	bl	8002720 <mfxstm32l152_EnableITSource>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2104      	movs	r1, #4
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff f932 	bl	80027d2 <mfxstm32l152_ClearGlobalIT>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	2104      	movs	r1, #4
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff f90e 	bl	80027a6 <mfxstm32l152_GlobalITStatus>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2104      	movs	r1, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f8db 	bl	800275e <mfxstm32l152_DisableITSource>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e00b      	b.n	80035d8 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <mfxstm32l152_GetInstance+0x3c>)
 80035c4:	5cd3      	ldrb	r3, [r2, r3]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d101      	bne.n	80035d2 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	e006      	b.n	80035e0 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	3301      	adds	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d9f0      	bls.n	80035c0 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 80035de:	23ff      	movs	r3, #255	; 0xff
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	20000a54 	.word	0x20000a54

080035f0 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e00f      	b.n	8003620 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	4a0c      	ldr	r2, [pc, #48]	; (8003634 <mfxstm32l152_ReleaseInstance+0x44>)
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	b29b      	uxth	r3, r3
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	429a      	cmp	r2, r3
 800360c:	d105      	bne.n	800361a <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	4a08      	ldr	r2, [pc, #32]	; (8003634 <mfxstm32l152_ReleaseInstance+0x44>)
 8003612:	2100      	movs	r1, #0
 8003614:	54d1      	strb	r1, [r2, r3]
      return idx;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	e006      	b.n	8003628 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	3301      	adds	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d9ec      	bls.n	8003600 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8003626:	23ff      	movs	r3, #255	; 0xff
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	20000a54 	.word	0x20000a54

08003638 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	603a      	str	r2, [r7, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
 8003646:	460b      	mov	r3, r1
 8003648:	717b      	strb	r3, [r7, #5]
 800364a:	4613      	mov	r3, r2
 800364c:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8003662:	7bbb      	ldrb	r3, [r7, #14]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01e      	beq.n	80036a6 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8003668:	797a      	ldrb	r2, [r7, #5]
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fff2 	bl	8004658 <MFX_IO_Read>
 8003674:	4603      	mov	r3, r0
 8003676:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003678:	793b      	ldrb	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d004      	beq.n	8003688 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	7bbb      	ldrb	r3, [r7, #14]
 8003682:	4313      	orrs	r3, r2
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	e008      	b.n	800369a <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8003688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800368c:	43db      	mvns	r3, r3
 800368e:	b25a      	sxtb	r2, r3
 8003690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003694:	4013      	ands	r3, r2
 8003696:	b25b      	sxtb	r3, r3
 8003698:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	7979      	ldrb	r1, [r7, #5]
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 ffc5 	bl	8004630 <MFX_IO_Write>
  }

  if (pin_8_15)
 80036a6:	7b7b      	ldrb	r3, [r7, #13]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d022      	beq.n	80036f2 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80036ac:	797b      	ldrb	r3, [r7, #5]
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 ffce 	bl	8004658 <MFX_IO_Read>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80036c0:	793b      	ldrb	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	7b7b      	ldrb	r3, [r7, #13]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e008      	b.n	80036e2 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 80036d0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	b25a      	sxtb	r2, r3
 80036d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036dc:	4013      	ands	r3, r2
 80036de:	b25b      	sxtb	r3, r3
 80036e0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80036e2:	797b      	ldrb	r3, [r7, #5]
 80036e4:	3301      	adds	r3, #1
 80036e6:	b2d9      	uxtb	r1, r3
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 ff9f 	bl	8004630 <MFX_IO_Write>
  }

  if (pin_16_23)
 80036f2:	7b3b      	ldrb	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d022      	beq.n	800373e <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80036f8:	797b      	ldrb	r3, [r7, #5]
 80036fa:	3302      	adds	r3, #2
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f000 ffa8 	bl	8004658 <MFX_IO_Read>
 8003708:	4603      	mov	r3, r0
 800370a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 800370c:	793b      	ldrb	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	7b3b      	ldrb	r3, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	e008      	b.n	800372e <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 800371c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003720:	43db      	mvns	r3, r3
 8003722:	b25a      	sxtb	r2, r3
 8003724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003728:	4013      	ands	r3, r2
 800372a:	b25b      	sxtb	r3, r3
 800372c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 800372e:	797b      	ldrb	r3, [r7, #5]
 8003730:	3302      	adds	r3, #2
 8003732:	b2d9      	uxtb	r1, r3
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 ff79 	bl	8004630 <MFX_IO_Write>
  }
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800374c:	f001 f8ba 	bl	80048c4 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8003750:	2200      	movs	r2, #0
 8003752:	2100      	movs	r1, #0
 8003754:	2010      	movs	r0, #16
 8003756:	f000 f9e4 	bl	8003b22 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800375a:	200a      	movs	r0, #10
 800375c:	f001 f8d9 	bl	8004912 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8003760:	2200      	movs	r2, #0
 8003762:	2100      	movs	r1, #0
 8003764:	2001      	movs	r0, #1
 8003766:	f000 f9dc 	bl	8003b22 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800376a:	20c8      	movs	r0, #200	; 0xc8
 800376c:	f001 f8d1 	bl	8004912 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	2011      	movs	r0, #17
 8003776:	f000 f9d4 	bl	8003b22 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 800377a:	2078      	movs	r0, #120	; 0x78
 800377c:	f001 f8c9 	bl	8004912 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8003780:	2300      	movs	r3, #0
 8003782:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8003784:	463b      	mov	r3, r7
 8003786:	2201      	movs	r2, #1
 8003788:	4619      	mov	r1, r3
 800378a:	2036      	movs	r0, #54	; 0x36
 800378c:	f000 f9c9 	bl	8003b22 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8003790:	2305      	movs	r3, #5
 8003792:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8003794:	463b      	mov	r3, r7
 8003796:	2201      	movs	r2, #1
 8003798:	4619      	mov	r1, r3
 800379a:	203a      	movs	r0, #58	; 0x3a
 800379c:	f000 f9c1 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80037a0:	2200      	movs	r2, #0
 80037a2:	2100      	movs	r1, #0
 80037a4:	2021      	movs	r0, #33	; 0x21
 80037a6:	f000 f9bc 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80037aa:	2300      	movs	r3, #0
 80037ac:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80037ae:	2300      	movs	r3, #0
 80037b0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80037b2:	2300      	movs	r3, #0
 80037b4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80037b6:	23ef      	movs	r3, #239	; 0xef
 80037b8:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80037ba:	463b      	mov	r3, r7
 80037bc:	2204      	movs	r2, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	202a      	movs	r0, #42	; 0x2a
 80037c2:	f000 f9ae 	bl	8003b22 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80037c6:	2300      	movs	r3, #0
 80037c8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80037ca:	2300      	movs	r3, #0
 80037cc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80037ce:	2300      	movs	r3, #0
 80037d0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80037d2:	23ef      	movs	r3, #239	; 0xef
 80037d4:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80037d6:	463b      	mov	r3, r7
 80037d8:	2204      	movs	r2, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	202b      	movs	r0, #43	; 0x2b
 80037de:	f000 f9a0 	bl	8003b22 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80037e2:	230c      	movs	r3, #12
 80037e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80037e6:	230c      	movs	r3, #12
 80037e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80037ea:	2300      	movs	r3, #0
 80037ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80037ee:	2333      	movs	r3, #51	; 0x33
 80037f0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80037f2:	2333      	movs	r3, #51	; 0x33
 80037f4:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80037f6:	463b      	mov	r3, r7
 80037f8:	2205      	movs	r2, #5
 80037fa:	4619      	mov	r1, r3
 80037fc:	20b2      	movs	r0, #178	; 0xb2
 80037fe:	f000 f990 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8003802:	2335      	movs	r3, #53	; 0x35
 8003804:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8003806:	463b      	mov	r3, r7
 8003808:	2201      	movs	r2, #1
 800380a:	4619      	mov	r1, r3
 800380c:	20b7      	movs	r0, #183	; 0xb7
 800380e:	f000 f988 	bl	8003b22 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8003812:	231f      	movs	r3, #31
 8003814:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8003816:	463b      	mov	r3, r7
 8003818:	2201      	movs	r2, #1
 800381a:	4619      	mov	r1, r3
 800381c:	20bb      	movs	r0, #187	; 0xbb
 800381e:	f000 f980 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8003822:	232c      	movs	r3, #44	; 0x2c
 8003824:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8003826:	463b      	mov	r3, r7
 8003828:	2201      	movs	r2, #1
 800382a:	4619      	mov	r1, r3
 800382c:	20c0      	movs	r0, #192	; 0xc0
 800382e:	f000 f978 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8003832:	2301      	movs	r3, #1
 8003834:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8003836:	23c3      	movs	r3, #195	; 0xc3
 8003838:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 800383a:	463b      	mov	r3, r7
 800383c:	2202      	movs	r2, #2
 800383e:	4619      	mov	r1, r3
 8003840:	20c2      	movs	r0, #194	; 0xc2
 8003842:	f000 f96e 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8003846:	2320      	movs	r3, #32
 8003848:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 800384a:	463b      	mov	r3, r7
 800384c:	2201      	movs	r2, #1
 800384e:	4619      	mov	r1, r3
 8003850:	20c4      	movs	r0, #196	; 0xc4
 8003852:	f000 f966 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8003856:	230f      	movs	r3, #15
 8003858:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 800385a:	463b      	mov	r3, r7
 800385c:	2201      	movs	r2, #1
 800385e:	4619      	mov	r1, r3
 8003860:	20c6      	movs	r0, #198	; 0xc6
 8003862:	f000 f95e 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8003866:	23a4      	movs	r3, #164	; 0xa4
 8003868:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 800386a:	23a1      	movs	r3, #161	; 0xa1
 800386c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 800386e:	463b      	mov	r3, r7
 8003870:	2202      	movs	r2, #2
 8003872:	4619      	mov	r1, r3
 8003874:	20d0      	movs	r0, #208	; 0xd0
 8003876:	f000 f954 	bl	8003b22 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 800387a:	23d0      	movs	r3, #208	; 0xd0
 800387c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800387e:	2308      	movs	r3, #8
 8003880:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8003882:	2311      	movs	r3, #17
 8003884:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8003886:	2308      	movs	r3, #8
 8003888:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 800388a:	230c      	movs	r3, #12
 800388c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800388e:	2315      	movs	r3, #21
 8003890:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8003892:	2339      	movs	r3, #57	; 0x39
 8003894:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8003896:	2333      	movs	r3, #51	; 0x33
 8003898:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 800389a:	2350      	movs	r3, #80	; 0x50
 800389c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800389e:	2336      	movs	r3, #54	; 0x36
 80038a0:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80038a2:	2313      	movs	r3, #19
 80038a4:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80038a6:	2314      	movs	r3, #20
 80038a8:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80038aa:	2329      	movs	r3, #41	; 0x29
 80038ac:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80038ae:	232d      	movs	r3, #45	; 0x2d
 80038b0:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80038b2:	463b      	mov	r3, r7
 80038b4:	220e      	movs	r2, #14
 80038b6:	4619      	mov	r1, r3
 80038b8:	20e0      	movs	r0, #224	; 0xe0
 80038ba:	f000 f932 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80038be:	23d0      	movs	r3, #208	; 0xd0
 80038c0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80038c2:	2308      	movs	r3, #8
 80038c4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80038c6:	2310      	movs	r3, #16
 80038c8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80038ca:	2308      	movs	r3, #8
 80038cc:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 80038ce:	2306      	movs	r3, #6
 80038d0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80038d2:	2306      	movs	r3, #6
 80038d4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80038d6:	2339      	movs	r3, #57	; 0x39
 80038d8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80038da:	2344      	movs	r3, #68	; 0x44
 80038dc:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80038de:	2351      	movs	r3, #81	; 0x51
 80038e0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80038e2:	230b      	movs	r3, #11
 80038e4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80038e6:	2316      	movs	r3, #22
 80038e8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80038ea:	2314      	movs	r3, #20
 80038ec:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80038ee:	232f      	movs	r3, #47	; 0x2f
 80038f0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80038f2:	2331      	movs	r3, #49	; 0x31
 80038f4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80038f6:	463b      	mov	r3, r7
 80038f8:	220e      	movs	r2, #14
 80038fa:	4619      	mov	r1, r3
 80038fc:	20e1      	movs	r0, #225	; 0xe1
 80038fe:	f000 f910 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8003902:	f000 f847 	bl	8003994 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8003906:	2300      	movs	r3, #0
 8003908:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800390a:	463b      	mov	r3, r7
 800390c:	2201      	movs	r2, #1
 800390e:	4619      	mov	r1, r3
 8003910:	2035      	movs	r0, #53	; 0x35
 8003912:	f000 f906 	bl	8003b22 <ST7789H2_WriteReg>

}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 800392c:	2300      	movs	r3, #0
 800392e:	723b      	strb	r3, [r7, #8]
 8003930:	e025      	b.n	800397e <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d120      	bne.n	800397a <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8003938:	2300      	movs	r3, #0
 800393a:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 800393c:	2300      	movs	r3, #0
 800393e:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8003940:	2301      	movs	r3, #1
 8003942:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8003944:	23f0      	movs	r3, #240	; 0xf0
 8003946:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8003948:	2300      	movs	r3, #0
 800394a:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 800394c:	2300      	movs	r3, #0
 800394e:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8003950:	f107 0308 	add.w	r3, r7, #8
 8003954:	2206      	movs	r2, #6
 8003956:	4619      	mov	r1, r3
 8003958:	2033      	movs	r0, #51	; 0x33
 800395a:	f000 f8e2 	bl	8003b22 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800395e:	2300      	movs	r3, #0
 8003960:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8003962:	2350      	movs	r3, #80	; 0x50
 8003964:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	2202      	movs	r2, #2
 800396c:	4619      	mov	r1, r3
 800396e:	2037      	movs	r0, #55	; 0x37
 8003970:	f000 f8d7 	bl	8003b22 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	723b      	strb	r3, [r7, #8]
 8003978:	e001      	b.n	800397e <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 800397a:	2360      	movs	r3, #96	; 0x60
 800397c:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800397e:	f107 0308 	add.w	r3, r7, #8
 8003982:	2201      	movs	r2, #1
 8003984:	4619      	mov	r1, r3
 8003986:	2036      	movs	r0, #54	; 0x36
 8003988:	f000 f8cb 	bl	8003b22 <ST7789H2_WriteReg>
}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8003998:	2200      	movs	r2, #0
 800399a:	2100      	movs	r1, #0
 800399c:	2029      	movs	r0, #41	; 0x29
 800399e:	f000 f8c0 	bl	8003b22 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	2011      	movs	r0, #17
 80039a8:	f000 f8bb 	bl	8003b22 <ST7789H2_WriteReg>
}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80039b6:	23fe      	movs	r3, #254	; 0xfe
 80039b8:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	2201      	movs	r2, #1
 80039be:	4619      	mov	r1, r3
 80039c0:	20bd      	movs	r0, #189	; 0xbd
 80039c2:	f000 f8ae 	bl	8003b22 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80039c6:	2200      	movs	r2, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	2010      	movs	r0, #16
 80039cc:	f000 f8a9 	bl	8003b22 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80039d0:	200a      	movs	r0, #10
 80039d2:	f000 ff9e 	bl	8004912 <LCD_IO_Delay>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80039e2:	23f0      	movs	r3, #240	; 0xf0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80039f2:	23f0      	movs	r3, #240	; 0xf0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003a02:	f000 ff5f 	bl	80048c4 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8003a06:	2004      	movs	r0, #4
 8003a08:	f000 f8ae 	bl	8003b68 <ST7789H2_ReadReg>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	b29b      	uxth	r3, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	80fb      	strh	r3, [r7, #6]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8003a24:	2300      	movs	r3, #0
 8003a26:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3b11      	subs	r3, #17
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	2204      	movs	r2, #4
 8003a42:	4619      	mov	r1, r3
 8003a44:	202a      	movs	r0, #42	; 0x2a
 8003a46:	f000 f86c 	bl	8003b22 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8003a4e:	88bb      	ldrh	r3, [r7, #4]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8003a58:	88bb      	ldrh	r3, [r7, #4]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	3b11      	subs	r3, #17
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8003a62:	f107 030c 	add.w	r3, r7, #12
 8003a66:	2204      	movs	r2, #4
 8003a68:	4619      	mov	r1, r3
 8003a6a:	202b      	movs	r0, #43	; 0x2b
 8003a6c:	f000 f859 	bl	8003b22 <ST7789H2_WriteReg>
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	80fb      	strh	r3, [r7, #6]
 8003a82:	460b      	mov	r3, r1
 8003a84:	80bb      	strh	r3, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003a8a:	88ba      	ldrh	r2, [r7, #4]
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ffbf 	bl	8003a14 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	202c      	movs	r0, #44	; 0x2c
 8003a9c:	f000 f841 	bl	8003b22 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 ff14 	bl	80048d0 <LCD_IO_WriteData>
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	460a      	mov	r2, r1
 8003aba:	80fb      	strh	r3, [r7, #6]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003ac0:	88ba      	ldrh	r2, [r7, #4]
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ffa4 	bl	8003a14 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8003acc:	88ba      	ldrh	r2, [r7, #4]
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f9c0 	bl	8003e58 <ST7789H2_ReadPixel_rgb888>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	733a      	strb	r2, [r7, #12]
 8003ade:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003ae2:	737a      	strb	r2, [r7, #13]
 8003ae4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003ae8:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8003aea:	7b3b      	ldrb	r3, [r7, #12]
 8003aec:	08db      	lsrs	r3, r3, #3
 8003aee:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8003af0:	7b7b      	ldrb	r3, [r7, #13]
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	08db      	lsrs	r3, r3, #3
 8003afa:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	02db      	lsls	r3, r3, #11
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	7dbb      	ldrb	r3, [r7, #22]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	015b      	lsls	r3, r3, #5
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	7d7b      	ldrb	r3, [r7, #21]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8003b18:	8a7b      	ldrh	r3, [r7, #18]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	6039      	str	r1, [r7, #0]
 8003b2c:	71fb      	strb	r3, [r7, #7]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fed8 	bl	80048ea <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	e00a      	b.n	8003b56 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fec0 	bl	80048d0 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	3301      	adds	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	79bb      	ldrb	r3, [r7, #6]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3f0      	bcc.n	8003b40 <ST7789H2_WriteReg+0x1e>
  }
}
 8003b5e:	bf00      	nop
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 feb8 	bl	80048ea <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8003b7a:	f000 fec3 	bl	8004904 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8003b7e:	f000 fec1 	bl	8004904 <LCD_IO_ReadData>
 8003b82:	4603      	mov	r3, r0
 8003b84:	b2db      	uxtb	r3, r3
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003b90:	b490      	push	{r4, r7}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	80fb      	strh	r3, [r7, #6]
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	80bb      	strh	r3, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	807b      	strh	r3, [r7, #2]
 8003baa:	4613      	mov	r3, r2
 8003bac:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	2bef      	cmp	r3, #239	; 0xef
 8003bb2:	d803      	bhi.n	8003bbc <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <ST7789H2_SetDisplayWindow+0x94>)
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	8013      	strh	r3, [r2, #0]
 8003bba:	e002      	b.n	8003bc2 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <ST7789H2_SetDisplayWindow+0x94>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8003bc2:	88bb      	ldrh	r3, [r7, #4]
 8003bc4:	2bef      	cmp	r3, #239	; 0xef
 8003bc6:	d803      	bhi.n	8003bd0 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8003bc8:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <ST7789H2_SetDisplayWindow+0x98>)
 8003bca:	88bb      	ldrh	r3, [r7, #4]
 8003bcc:	8013      	strh	r3, [r2, #0]
 8003bce:	e002      	b.n	8003bd6 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8003bd0:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <ST7789H2_SetDisplayWindow+0x98>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	4413      	add	r3, r2
 8003bdc:	2bf0      	cmp	r3, #240	; 0xf0
 8003bde:	dc08      	bgt.n	8003bf2 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8003be0:	887a      	ldrh	r2, [r7, #2]
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	4413      	add	r3, r2
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <ST7789H2_SetDisplayWindow+0x9c>)
 8003bee:	801a      	strh	r2, [r3, #0]
 8003bf0:	e002      	b.n	8003bf8 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <ST7789H2_SetDisplayWindow+0x9c>)
 8003bf4:	22ef      	movs	r2, #239	; 0xef
 8003bf6:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8003bf8:	883a      	ldrh	r2, [r7, #0]
 8003bfa:	88bb      	ldrh	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	2bf0      	cmp	r3, #240	; 0xf0
 8003c00:	dc08      	bgt.n	8003c14 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8003c02:	883a      	ldrh	r2, [r7, #0]
 8003c04:	88bb      	ldrh	r3, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <ST7789H2_SetDisplayWindow+0xa0>)
 8003c10:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8003c12:	e002      	b.n	8003c1a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <ST7789H2_SetDisplayWindow+0xa0>)
 8003c16:	22ef      	movs	r2, #239	; 0xef
 8003c18:	801a      	strh	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc90      	pop	{r4, r7}
 8003c22:	4770      	bx	lr
 8003c24:	20000a58 	.word	0x20000a58
 8003c28:	20000a5a 	.word	0x20000a5a
 8003c2c:	200000dc 	.word	0x200000dc
 8003c30:	200000de 	.word	0x200000de

08003c34 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4623      	mov	r3, r4
 8003c44:	80fb      	strh	r3, [r7, #6]
 8003c46:	4603      	mov	r3, r0
 8003c48:	80bb      	strh	r3, [r7, #4]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	807b      	strh	r3, [r7, #2]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	88bb      	ldrh	r3, [r7, #4]
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fedb 	bl	8003a14 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2100      	movs	r1, #0
 8003c62:	202c      	movs	r0, #44	; 0x2c
 8003c64:	f7ff ff5d 	bl	8003b22 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	81fb      	strh	r3, [r7, #14]
 8003c6c:	e006      	b.n	8003c7c <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fe2d 	bl	80048d0 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8003c76:	89fb      	ldrh	r3, [r7, #14]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	81fb      	strh	r3, [r7, #14]
 8003c7c:	89fa      	ldrh	r2, [r7, #14]
 8003c7e:	883b      	ldrh	r3, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3f4      	bcc.n	8003c6e <ST7789H2_DrawHLine+0x3a>
  }  
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd90      	pop	{r4, r7, pc}

08003c8e <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003c8e:	b590      	push	{r4, r7, lr}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4604      	mov	r4, r0
 8003c96:	4608      	mov	r0, r1
 8003c98:	4611      	mov	r1, r2
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	80fb      	strh	r3, [r7, #6]
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	80bb      	strh	r3, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003cac:	887a      	ldrh	r2, [r7, #2]
 8003cae:	88bb      	ldrh	r3, [r7, #4]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff feae 	bl	8003a14 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	202c      	movs	r0, #44	; 0x2c
 8003cbe:	f7ff ff30 	bl	8003b22 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	81fb      	strh	r3, [r7, #14]
 8003cc6:	e00b      	b.n	8003ce0 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8003cc8:	887a      	ldrh	r2, [r7, #2]
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	4413      	add	r3, r2
 8003cce:	b299      	uxth	r1, r3
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	88bb      	ldrh	r3, [r7, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fecf 	bl	8003a78 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	81fb      	strh	r3, [r7, #14]
 8003ce0:	89fa      	ldrh	r2, [r7, #14]
 8003ce2:	883b      	ldrh	r3, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d3ef      	bcc.n	8003cc8 <ST7789H2_DrawVLine+0x3a>
  }
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd90      	pop	{r4, r7, pc}
	...

08003cf4 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	603a      	str	r2, [r7, #0]
 8003cfe:	80fb      	strh	r3, [r7, #6]
 8003d00:	460b      	mov	r3, r1
 8003d02:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8003d10:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <ST7789H2_DrawBitmap+0xe0>)
 8003d12:	881a      	ldrh	r2, [r3, #0]
 8003d14:	4b30      	ldr	r3, [pc, #192]	; (8003dd8 <ST7789H2_DrawBitmap+0xe4>)
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <ST7789H2_DrawBitmap+0xe8>)
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <ST7789H2_DrawBitmap+0xec>)
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	3302      	adds	r3, #2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	461a      	mov	r2, r3
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	330a      	adds	r3, #10
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	461a      	mov	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4413      	add	r3, r2
 8003d78:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003d7a:	88ba      	ldrh	r2, [r7, #4]
 8003d7c:	89bb      	ldrh	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	e01d      	b.n	8003dc0 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fe3f 	bl	8003a14 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b299      	uxth	r1, r3
 8003d9e:	89fb      	ldrh	r3, [r7, #14]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	4413      	add	r3, r2
 8003dac:	89fa      	ldrh	r2, [r7, #14]
 8003dae:	88f8      	ldrh	r0, [r7, #6]
 8003db0:	f000 f89c 	bl	8003eec <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	88bb      	ldrh	r3, [r7, #4]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d8dd      	bhi.n	8003d84 <ST7789H2_DrawBitmap+0x90>
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200000dc 	.word	0x200000dc
 8003dd8:	20000a58 	.word	0x20000a58
 8003ddc:	200000de 	.word	0x200000de
 8003de0:	20000a5a 	.word	0x20000a5a

08003de4 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4604      	mov	r4, r0
 8003dec:	4608      	mov	r0, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	461a      	mov	r2, r3
 8003df2:	4623      	mov	r3, r4
 8003df4:	80fb      	strh	r3, [r7, #6]
 8003df6:	4603      	mov	r3, r0
 8003df8:	80bb      	strh	r3, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	807b      	strh	r3, [r7, #2]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003e06:	88bb      	ldrh	r3, [r7, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e019      	b.n	8003e40 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fdfd 	bl	8003a14 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	b299      	uxth	r1, r3
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	887a      	ldrh	r2, [r7, #2]
 8003e2e:	88f8      	ldrh	r0, [r7, #6]
 8003e30:	f000 f85c 	bl	8003eec <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	88ba      	ldrh	r2, [r7, #4]
 8003e42:	883b      	ldrh	r3, [r7, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d3de      	bcc.n	8003e0c <ST7789H2_DrawRGBImage+0x28>
  }
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}

08003e58 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	460a      	mov	r2, r1
 8003e62:	80fb      	strh	r3, [r7, #6]
 8003e64:	4613      	mov	r3, r2
 8003e66:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003e68:	88ba      	ldrh	r2, [r7, #4]
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fdd0 	bl	8003a14 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8003e74:	2200      	movs	r2, #0
 8003e76:	2100      	movs	r1, #0
 8003e78:	202e      	movs	r0, #46	; 0x2e
 8003e7a:	f7ff fe52 	bl	8003b22 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8003e7e:	f000 fd41 	bl	8004904 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8003e82:	f000 fd3f 	bl	8004904 <LCD_IO_ReadData>
 8003e86:	4603      	mov	r3, r0
 8003e88:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8003e8a:	f000 fd3b 	bl	8004904 <LCD_IO_ReadData>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8003e92:	8afb      	ldrh	r3, [r7, #22]
 8003e94:	121b      	asrs	r3, r3, #8
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f023 0303 	bic.w	r3, r3, #3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8003ea0:	8afb      	ldrh	r3, [r7, #22]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f023 0303 	bic.w	r3, r3, #3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8003eac:	8abb      	ldrh	r3, [r7, #20]
 8003eae:	121b      	asrs	r3, r3, #8
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8003eba:	f107 0310 	add.w	r3, r7, #16
 8003ebe:	f107 020c 	add.w	r2, r7, #12
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	8019      	strh	r1, [r3, #0]
 8003ec8:	3302      	adds	r3, #2
 8003eca:	0c12      	lsrs	r2, r2, #16
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	7c3a      	ldrb	r2, [r7, #16]
 8003ed2:	f362 0307 	bfi	r3, r2, #0, #8
 8003ed6:	7c7a      	ldrb	r2, [r7, #17]
 8003ed8:	f362 230f 	bfi	r3, r2, #8, #8
 8003edc:	7cba      	ldrb	r2, [r7, #18]
 8003ede:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	81fb      	strh	r3, [r7, #14]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	81bb      	strh	r3, [r7, #12]
 8003efc:	4613      	mov	r3, r2
 8003efe:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	202c      	movs	r0, #44	; 0x2c
 8003f0e:	f7ff fe08 	bl	8003b22 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003f12:	89fb      	ldrh	r3, [r7, #14]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e029      	b.n	8003f6c <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <ST7789H2_DrawRGBHLine+0x98>)
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d320      	bcc.n	8003f66 <ST7789H2_DrawRGBHLine+0x7a>
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <ST7789H2_DrawRGBHLine+0x9c>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	89ba      	ldrh	r2, [r7, #12]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d31b      	bcc.n	8003f66 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003f2e:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <ST7789H2_DrawRGBHLine+0xa0>)
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d815      	bhi.n	8003f66 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <ST7789H2_DrawRGBHLine+0xa4>)
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	89ba      	ldrh	r2, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d810      	bhi.n	8003f66 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8003f44:	897a      	ldrh	r2, [r7, #10]
 8003f46:	89fb      	ldrh	r3, [r7, #14]
 8003f48:	441a      	add	r2, r3
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d007      	beq.n	8003f60 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fcb8 	bl	80048d0 <LCD_IO_WriteData>
      }      
      i++;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3301      	adds	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	897a      	ldrh	r2, [r7, #10]
 8003f6e:	89fb      	ldrh	r3, [r7, #14]
 8003f70:	4413      	add	r3, r2
 8003f72:	461a      	mov	r2, r3
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d3ce      	bcc.n	8003f18 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000a58 	.word	0x20000a58
 8003f88:	20000a5a 	.word	0x20000a5a
 8003f8c:	200000dc 	.word	0x200000dc
 8003f90:	200000de 	.word	0x200000de

08003f94 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  while (1);
 8003f98:	e7fe      	b.n	8003f98 <BSP_ErrorHandler+0x4>
	...

08003f9c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8003fa0:	4812      	ldr	r0, [pc, #72]	; (8003fec <I2C2_Init+0x50>)
 8003fa2:	f003 fee0 	bl	8007d66 <HAL_I2C_GetState>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d11d      	bne.n	8003fe8 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <I2C2_Init+0x50>)
 8003fae:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <I2C2_Init+0x54>)
 8003fb0:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <I2C2_Init+0x50>)
 8003fb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <I2C2_Init+0x58>)
 8003fb6:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <I2C2_Init+0x50>)
 8003fba:	2270      	movs	r2, #112	; 0x70
 8003fbc:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <I2C2_Init+0x50>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <I2C2_Init+0x50>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <I2C2_Init+0x50>)
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <I2C2_Init+0x50>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <I2C2_Init+0x50>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8003fdc:	4803      	ldr	r0, [pc, #12]	; (8003fec <I2C2_Init+0x50>)
 8003fde:	f000 f80b 	bl	8003ff8 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8003fe2:	4802      	ldr	r0, [pc, #8]	; (8003fec <I2C2_Init+0x50>)
 8003fe4:	f003 facc 	bl	8007580 <HAL_I2C_Init>
  }
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000a60 	.word	0x20000a60
 8003ff0:	40005800 	.word	0x40005800
 8003ff4:	40403e5d 	.word	0x40403e5d

08003ff8 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b0ae      	sub	sp, #184	; 0xb8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a37      	ldr	r2, [pc, #220]	; (80040e4 <I2C2_MspInit+0xec>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d168      	bne.n	80040dc <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800400e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004012:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8004014:	f107 0318 	add.w	r3, r7, #24
 8004018:	4618      	mov	r0, r3
 800401a:	f006 fb43 	bl	800a6a4 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800401e:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <I2C2_MspInit+0xf0>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	4a31      	ldr	r2, [pc, #196]	; (80040e8 <I2C2_MspInit+0xf0>)
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <I2C2_MspInit+0xf0>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <I2C2_MspInit+0xf0>)
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <I2C2_MspInit+0xf0>)
 800403c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004042:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <I2C2_MspInit+0xf0>)
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800404e:	2310      	movs	r3, #16
 8004050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8004054:	2312      	movs	r3, #18
 8004056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800405a:	2301      	movs	r3, #1
 800405c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8004060:	2303      	movs	r3, #3
 8004062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8004066:	2304      	movs	r3, #4
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 800406c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004070:	4619      	mov	r1, r3
 8004072:	481e      	ldr	r0, [pc, #120]	; (80040ec <I2C2_MspInit+0xf4>)
 8004074:	f002 ffe8 	bl	8007048 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8004078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800407c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8004080:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004084:	4619      	mov	r1, r3
 8004086:	481a      	ldr	r0, [pc, #104]	; (80040f0 <I2C2_MspInit+0xf8>)
 8004088:	f002 ffde 	bl	8007048 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800408c:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <I2C2_MspInit+0xf0>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <I2C2_MspInit+0xf0>)
 8004092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <I2C2_MspInit+0xf0>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <I2C2_MspInit+0xf0>)
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	4a0f      	ldr	r2, [pc, #60]	; (80040e8 <I2C2_MspInit+0xf0>)
 80040aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ae:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <I2C2_MspInit+0xf0>)
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <I2C2_MspInit+0xf0>)
 80040b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80040ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	2021      	movs	r0, #33	; 0x21
 80040c2:	f002 fdea 	bl	8006c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80040c6:	2021      	movs	r0, #33	; 0x21
 80040c8:	f002 fe03 	bl	8006cd2 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 80040cc:	2200      	movs	r2, #0
 80040ce:	2100      	movs	r1, #0
 80040d0:	2022      	movs	r0, #34	; 0x22
 80040d2:	f002 fde2 	bl	8006c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80040d6:	2022      	movs	r0, #34	; 0x22
 80040d8:	f002 fdfb 	bl	8006cd2 <HAL_NVIC_EnableIRQ>
  }
}
 80040dc:	bf00      	nop
 80040de:	37b8      	adds	r7, #184	; 0xb8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40005800 	.word	0x40005800
 80040e8:	40021000 	.word	0x40021000
 80040ec:	48001c00 	.word	0x48001c00
 80040f0:	48000400 	.word	0x48000400

080040f4 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 80040f8:	4806      	ldr	r0, [pc, #24]	; (8004114 <I2C2_DeInit+0x20>)
 80040fa:	f003 fe34 	bl	8007d66 <HAL_I2C_GetState>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8004104:	4803      	ldr	r0, [pc, #12]	; (8004114 <I2C2_DeInit+0x20>)
 8004106:	f003 faca 	bl	800769e <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 800410a:	4802      	ldr	r0, [pc, #8]	; (8004114 <I2C2_DeInit+0x20>)
 800410c:	f000 f804 	bl	8004118 <I2C2_MspDeInit>
  }
}
 8004110:	bf00      	nop
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000a60 	.word	0x20000a60

08004118 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1f      	ldr	r2, [pc, #124]	; (80041a4 <I2C2_MspDeInit+0x8c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d138      	bne.n	800419c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <I2C2_MspDeInit+0x90>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <I2C2_MspDeInit+0x90>)
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <I2C2_MspDeInit+0x90>)
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8004142:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <I2C2_MspDeInit+0x90>)
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <I2C2_MspDeInit+0x90>)
 8004148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <I2C2_MspDeInit+0x90>)
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800415a:	2110      	movs	r1, #16
 800415c:	4813      	ldr	r0, [pc, #76]	; (80041ac <I2C2_MspDeInit+0x94>)
 800415e:	f003 f905 	bl	800736c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8004162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004166:	4812      	ldr	r0, [pc, #72]	; (80041b0 <I2C2_MspDeInit+0x98>)
 8004168:	f003 f900 	bl	800736c <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <I2C2_MspDeInit+0x90>)
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <I2C2_MspDeInit+0x90>)
 8004172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004176:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <I2C2_MspDeInit+0x90>)
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <I2C2_MspDeInit+0x90>)
 800417e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004182:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <I2C2_MspDeInit+0x90>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <I2C2_MspDeInit+0x90>)
 800418a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800418e:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8004190:	2021      	movs	r0, #33	; 0x21
 8004192:	f002 fdac 	bl	8006cee <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8004196:	2022      	movs	r0, #34	; 0x22
 8004198:	f002 fda9 	bl	8006cee <HAL_NVIC_DisableIRQ>
  }
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40005800 	.word	0x40005800
 80041a8:	40021000 	.word	0x40021000
 80041ac:	48001c00 	.word	0x48001c00
 80041b0:	48000400 	.word	0x48000400

080041b4 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 80041b4:	b590      	push	{r4, r7, lr}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af04      	add	r7, sp, #16
 80041ba:	4604      	mov	r4, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	80fb      	strh	r3, [r7, #6]
 80041c6:	4603      	mov	r3, r0
 80041c8:	80bb      	strh	r3, [r7, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	807b      	strh	r3, [r7, #2]
 80041ce:	4613      	mov	r3, r2
 80041d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80041d6:	b672      	cpsid	i
}
 80041d8:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <I2C2_WriteData+0x5c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	8878      	ldrh	r0, [r7, #2]
 80041e0:	88ba      	ldrh	r2, [r7, #4]
 80041e2:	88f9      	ldrh	r1, [r7, #6]
 80041e4:	9302      	str	r3, [sp, #8]
 80041e6:	2301      	movs	r3, #1
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	1c7b      	adds	r3, r7, #1
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	4603      	mov	r3, r0
 80041f0:	4808      	ldr	r0, [pc, #32]	; (8004214 <I2C2_WriteData+0x60>)
 80041f2:	f003 fa83 	bl	80076fc <HAL_I2C_Mem_Write>
 80041f6:	4603      	mov	r3, r0
 80041f8:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80041fa:	b662      	cpsie	i
}
 80041fc:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004204:	f000 f890 	bl	8004328 <I2C2_Error>
  }
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bd90      	pop	{r4, r7, pc}
 8004210:	200000e0 	.word	0x200000e0
 8004214:	20000a60 	.word	0x20000a60

08004218 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af04      	add	r7, sp, #16
 800421e:	4603      	mov	r3, r0
 8004220:	80fb      	strh	r3, [r7, #6]
 8004222:	460b      	mov	r3, r1
 8004224:	80bb      	strh	r3, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800422e:	2300      	movs	r3, #0
 8004230:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8004232:	b672      	cpsid	i
}
 8004234:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <I2C2_ReadData+0x60>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	8878      	ldrh	r0, [r7, #2]
 800423c:	88ba      	ldrh	r2, [r7, #4]
 800423e:	88f9      	ldrh	r1, [r7, #6]
 8004240:	9302      	str	r3, [sp, #8]
 8004242:	2301      	movs	r3, #1
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	f107 030e 	add.w	r3, r7, #14
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4603      	mov	r3, r0
 800424e:	480b      	ldr	r0, [pc, #44]	; (800427c <I2C2_ReadData+0x64>)
 8004250:	f003 fb68 	bl	8007924 <HAL_I2C_Mem_Read>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004258:	b662      	cpsie	i
}
 800425a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004262:	f000 f861 	bl	8004328 <I2C2_Error>
    HAL_Delay(200);
 8004266:	20c8      	movs	r0, #200	; 0xc8
 8004268:	f001 fc18 	bl	8005a9c <HAL_Delay>
  }

  return value;
 800426c:	7bbb      	ldrb	r3, [r7, #14]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200000e0 	.word	0x200000e0
 800427c:	20000a60 	.word	0x20000a60

08004280 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	6039      	str	r1, [r7, #0]
 800428a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8004290:	2300      	movs	r3, #0
 8004292:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8004294:	b672      	cpsid	i
}
 8004296:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8004298:	88f9      	ldrh	r1, [r7, #6]
 800429a:	2332      	movs	r3, #50	; 0x32
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	480a      	ldr	r0, [pc, #40]	; (80042c8 <I2C2_isDeviceReady+0x48>)
 80042a0:	f003 fc5a 	bl	8007b58 <HAL_I2C_IsDeviceReady>
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80042a8:	b662      	cpsie	i
}
 80042aa:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80042b2:	f000 f839 	bl	8004328 <I2C2_Error>
    HAL_Delay(200);
 80042b6:	20c8      	movs	r0, #200	; 0xc8
 80042b8:	f001 fbf0 	bl	8005a9c <HAL_Delay>
  }

  return value;
 80042bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000a60 	.word	0x20000a60

080042cc <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af04      	add	r7, sp, #16
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	4603      	mov	r3, r0
 80042d6:	81fb      	strh	r3, [r7, #14]
 80042d8:	460b      	mov	r3, r1
 80042da:	81bb      	strh	r3, [r7, #12]
 80042dc:	4613      	mov	r3, r2
 80042de:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80042e4:	b672      	cpsid	i
}
 80042e6:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <I2C2_ReadBuffer+0x54>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	8978      	ldrh	r0, [r7, #10]
 80042ee:	89ba      	ldrh	r2, [r7, #12]
 80042f0:	89f9      	ldrh	r1, [r7, #14]
 80042f2:	9302      	str	r3, [sp, #8]
 80042f4:	8c3b      	ldrh	r3, [r7, #32]
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4603      	mov	r3, r0
 80042fe:	4809      	ldr	r0, [pc, #36]	; (8004324 <I2C2_ReadBuffer+0x58>)
 8004300:	f003 fb10 	bl	8007924 <HAL_I2C_Mem_Read>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8004308:	b662      	cpsie	i
}
 800430a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8004312:	f000 f809 	bl	8004328 <I2C2_Error>
  }

  return status;
 8004316:	7dfb      	ldrb	r3, [r7, #23]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200000e0 	.word	0x200000e0
 8004324:	20000a60 	.word	0x20000a60

08004328 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 800432c:	f7ff fe32 	bl	8003f94 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8004330:	4803      	ldr	r0, [pc, #12]	; (8004340 <I2C2_Error+0x18>)
 8004332:	f003 f9b4 	bl	800769e <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8004336:	f7ff fe31 	bl	8003f9c <I2C2_Init>
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000a60 	.word	0x20000a60

08004344 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f003 fd0a 	bl	8007d66 <HAL_I2C_GetState>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d132      	bne.n	80043be <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <I2Cx_Init+0x84>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d103      	bne.n	8004368 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <I2Cx_Init+0x88>)
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e012      	b.n	800438e <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <I2Cx_Init+0x8c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d103      	bne.n	8004378 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <I2Cx_Init+0x90>)
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e00a      	b.n	800438e <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <I2Cx_Init+0x94>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d103      	bne.n	8004388 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a12      	ldr	r2, [pc, #72]	; (80043cc <I2Cx_Init+0x88>)
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e002      	b.n	800438e <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <I2Cx_Init+0x88>)
 800438c:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a12      	ldr	r2, [pc, #72]	; (80043dc <I2Cx_Init+0x98>)
 8004392:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2270      	movs	r2, #112	; 0x70
 8004398:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	22ff      	movs	r2, #255	; 0xff
 80043aa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f003 f8e1 	bl	8007580 <HAL_I2C_Init>

  }

}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000ab4 	.word	0x20000ab4
 80043cc:	40005800 	.word	0x40005800
 80043d0:	20000b08 	.word	0x20000b08
 80043d4:	40005400 	.word	0x40005400
 80043d8:	20000b5c 	.word	0x20000b5c
 80043dc:	90112626 	.word	0x90112626

080043e0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af04      	add	r7, sp, #16
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	72fb      	strb	r3, [r7, #11]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	b299      	uxth	r1, r3
 8004402:	88f8      	ldrh	r0, [r7, #6]
 8004404:	893a      	ldrh	r2, [r7, #8]
 8004406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	4603      	mov	r3, r0
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f003 fa84 	bl	8007924 <HAL_I2C_Mem_Read>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	4619      	mov	r1, r3
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f832 	bl	8004494 <I2Cx_Error>
  }
  return status;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b08a      	sub	sp, #40	; 0x28
 800443e:	af04      	add	r7, sp, #16
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	4608      	mov	r0, r1
 8004444:	4611      	mov	r1, r2
 8004446:	461a      	mov	r2, r3
 8004448:	4603      	mov	r3, r0
 800444a:	72fb      	strb	r3, [r7, #11]
 800444c:	460b      	mov	r3, r1
 800444e:	813b      	strh	r3, [r7, #8]
 8004450:	4613      	mov	r3, r2
 8004452:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004458:	7afb      	ldrb	r3, [r7, #11]
 800445a:	b299      	uxth	r1, r3
 800445c:	88f8      	ldrh	r0, [r7, #6]
 800445e:	893a      	ldrh	r2, [r7, #8]
 8004460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004464:	9302      	str	r3, [sp, #8]
 8004466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	4603      	mov	r3, r0
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f003 f943 	bl	80076fc <HAL_I2C_Mem_Write>
 8004476:	4603      	mov	r3, r0
 8004478:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800447a:	7dfb      	ldrb	r3, [r7, #23]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004480:	7afb      	ldrb	r3, [r7, #11]
 8004482:	4619      	mov	r1, r3
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f805 	bl	8004494 <I2Cx_Error>
  }
  return status;
 800448a:	7dfb      	ldrb	r3, [r7, #23]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 80044a0:	f7ff fd78 	bl	8003f94 <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <I2Cx_Error+0x34>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d102      	bne.n	80044b2 <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 80044ac:	f7ff fe22 	bl	80040f4 <I2C2_DeInit>
 80044b0:	e002      	b.n	80044b8 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f003 f8f3 	bl	800769e <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ff43 	bl	8004344 <I2Cx_Init>
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000ab4 	.word	0x20000ab4

080044cc <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 80044d0:	f7ff fd64 	bl	8003f9c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 80044d4:	2104      	movs	r1, #4
 80044d6:	2084      	movs	r0, #132	; 0x84
 80044d8:	f7ff fed2 	bl	8004280 <I2C2_isDeviceReady>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 80044e2:	f7ff fd57 	bl	8003f94 <BSP_ErrorHandler>
  }
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80044f2:	4b19      	ldr	r3, [pc, #100]	; (8004558 <MFX_IO_DeInit+0x6c>)
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <MFX_IO_DeInit+0x6c>)
 80044f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044fe:	4b16      	ldr	r3, [pc, #88]	; (8004558 <MFX_IO_DeInit+0x6c>)
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800450a:	2340      	movs	r3, #64	; 0x40
 800450c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800450e:	2301      	movs	r3, #1
 8004510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8004516:	2302      	movs	r3, #2
 8004518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	4619      	mov	r1, r3
 8004520:	480e      	ldr	r0, [pc, #56]	; (800455c <MFX_IO_DeInit+0x70>)
 8004522:	f002 fd91 	bl	8007048 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8004526:	2017      	movs	r0, #23
 8004528:	f002 fbe1 	bl	8006cee <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <MFX_IO_DeInit+0x6c>)
 800452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004530:	4a09      	ldr	r2, [pc, #36]	; (8004558 <MFX_IO_DeInit+0x6c>)
 8004532:	f043 0304 	orr.w	r3, r3, #4
 8004536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004538:	4b07      	ldr	r3, [pc, #28]	; (8004558 <MFX_IO_DeInit+0x6c>)
 800453a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8004544:	2120      	movs	r1, #32
 8004546:	4806      	ldr	r0, [pc, #24]	; (8004560 <MFX_IO_DeInit+0x74>)
 8004548:	f002 ff10 	bl	800736c <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 800454c:	f7ff fdd2 	bl	80040f4 <I2C2_DeInit>
}
 8004550:	bf00      	nop
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	48001c00 	.word	0x48001c00
 8004560:	48000800 	.word	0x48000800

08004564 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <MFX_IO_ITConfig+0x54>)
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456e:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <MFX_IO_ITConfig+0x54>)
 8004570:	f043 0304 	orr.w	r3, r3, #4
 8004574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <MFX_IO_ITConfig+0x54>)
 8004578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8004582:	2320      	movs	r3, #32
 8004584:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800458e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004592:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	4619      	mov	r1, r3
 8004598:	4808      	ldr	r0, [pc, #32]	; (80045bc <MFX_IO_ITConfig+0x58>)
 800459a:	f002 fd55 	bl	8007048 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 800459e:	220f      	movs	r2, #15
 80045a0:	210f      	movs	r1, #15
 80045a2:	2017      	movs	r0, #23
 80045a4:	f002 fb79 	bl	8006c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80045a8:	2017      	movs	r0, #23
 80045aa:	f002 fb92 	bl	8006cd2 <HAL_NVIC_EnableIRQ>
}
 80045ae:	bf00      	nop
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	48000800 	.word	0x48000800

080045c0 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <MFX_IO_EnableWakeupPin+0x40>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <MFX_IO_EnableWakeupPin+0x40>)
 80045cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <MFX_IO_EnableWakeupPin+0x40>)
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80045de:	2340      	movs	r3, #64	; 0x40
 80045e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80045e2:	2301      	movs	r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045e6:	2302      	movs	r3, #2
 80045e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4804      	ldr	r0, [pc, #16]	; (8004604 <MFX_IO_EnableWakeupPin+0x44>)
 80045f4:	f002 fd28 	bl	8007048 <HAL_GPIO_Init>
}
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	48001c00 	.word	0x48001c00

08004608 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 800460c:	2201      	movs	r2, #1
 800460e:	2140      	movs	r1, #64	; 0x40
 8004610:	4806      	ldr	r0, [pc, #24]	; (800462c <MFX_IO_Wakeup+0x24>)
 8004612:	f002 ff9d 	bl	8007550 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 8004616:	2001      	movs	r0, #1
 8004618:	f001 fa40 	bl	8005a9c <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 800461c:	2200      	movs	r2, #0
 800461e:	2140      	movs	r1, #64	; 0x40
 8004620:	4802      	ldr	r0, [pc, #8]	; (800462c <MFX_IO_Wakeup+0x24>)
 8004622:	f002 ff95 	bl	8007550 <HAL_GPIO_WritePin>
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	48001c00 	.word	0x48001c00

08004630 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	80fb      	strh	r3, [r7, #6]
 800463a:	460b      	mov	r3, r1
 800463c:	717b      	strb	r3, [r7, #5]
 800463e:	4613      	mov	r3, r2
 8004640:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8004642:	797b      	ldrb	r3, [r7, #5]
 8004644:	b299      	uxth	r1, r3
 8004646:	793b      	ldrb	r3, [r7, #4]
 8004648:	88f8      	ldrh	r0, [r7, #6]
 800464a:	2201      	movs	r2, #1
 800464c:	f7ff fdb2 	bl	80041b4 <I2C2_WriteData>
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	460a      	mov	r2, r1
 8004662:	80fb      	strh	r3, [r7, #6]
 8004664:	4613      	mov	r3, r2
 8004666:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8004668:	797b      	ldrb	r3, [r7, #5]
 800466a:	b299      	uxth	r1, r3
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	2201      	movs	r2, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fdd1 	bl	8004218 <I2C2_ReadData>
 8004676:	4603      	mov	r3, r0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af02      	add	r7, sp, #8
 8004686:	60ba      	str	r2, [r7, #8]
 8004688:	461a      	mov	r2, r3
 800468a:	4603      	mov	r3, r0
 800468c:	81fb      	strh	r3, [r7, #14]
 800468e:	460b      	mov	r3, r1
 8004690:	737b      	strb	r3, [r7, #13]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004696:	7b7b      	ldrb	r3, [r7, #13]
 8004698:	b299      	uxth	r1, r3
 800469a:	89f8      	ldrh	r0, [r7, #14]
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f7ff fe12 	bl	80042cc <I2C2_ReadBuffer>
 80046a8:	4603      	mov	r3, r0
 80046aa:	b29b      	uxth	r3, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 f9ed 	bl	8005a9c <HAL_Delay>
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80046d2:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	6513      	str	r3, [r2, #80]	; 0x50
 80046de:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 80046e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ea:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 80046ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ee:	4a31      	ldr	r2, [pc, #196]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 80046f0:	f043 0308 	orr.w	r3, r3, #8
 80046f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 80046f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004706:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004708:	f043 0310 	orr.w	r3, r3, #16
 800470c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800471a:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004720:	f043 0320 	orr.w	r3, r3, #32
 8004724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004726:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004736:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
 8004756:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <FMC_BANK1_MspInit+0xe8>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8004762:	f005 f88f 	bl	8009884 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800476a:	2301      	movs	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800476e:	2303      	movs	r3, #3
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8004772:	230c      	movs	r3, #12
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 8004776:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800477a:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800477c:	f107 031c 	add.w	r3, r7, #28
 8004780:	4619      	mov	r1, r3
 8004782:	480d      	ldr	r0, [pc, #52]	; (80047b8 <FMC_BANK1_MspInit+0xec>)
 8004784:	f002 fc60 	bl	8007048 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 8004788:	f64f 7380 	movw	r3, #65408	; 0xff80
 800478c:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800478e:	f107 031c 	add.w	r3, r7, #28
 8004792:	4619      	mov	r1, r3
 8004794:	4809      	ldr	r0, [pc, #36]	; (80047bc <FMC_BANK1_MspInit+0xf0>)
 8004796:	f002 fc57 	bl	8007048 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800479a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800479e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80047a0:	f107 031c 	add.w	r3, r7, #28
 80047a4:	4619      	mov	r1, r3
 80047a6:	4804      	ldr	r0, [pc, #16]	; (80047b8 <FMC_BANK1_MspInit+0xec>)
 80047a8:	f002 fc4e 	bl	8007048 <HAL_GPIO_Init>

}
 80047ac:	bf00      	nop
 80047ae:	3730      	adds	r7, #48	; 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	48000c00 	.word	0x48000c00
 80047bc:	48001000 	.word	0x48001000

080047c0 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b0a4      	sub	sp, #144	; 0x90
 80047c4:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 80047c6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 80047cc:	4b26      	ldr	r3, [pc, #152]	; (8004868 <FMC_BANK1_Init+0xa8>)
 80047ce:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 80047d0:	2301      	movs	r3, #1
 80047d2:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 80047d4:	2301      	movs	r3, #1
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 80047d8:	2301      	movs	r3, #1
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 80047e0:	2302      	movs	r3, #2
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 80047e4:	2302      	movs	r3, #2
 80047e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 80047e8:	2300      	movs	r3, #0
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 80047ec:	2305      	movs	r3, #5
 80047ee:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 80047f4:	2303      	movs	r3, #3
 80047f6:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 80047f8:	2302      	movs	r3, #2
 80047fa:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 80047fc:	2302      	movs	r3, #2
 80047fe:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 8004800:	2302      	movs	r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 8004808:	2300      	movs	r3, #0
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 800480c:	2300      	movs	r3, #0
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8004810:	2300      	movs	r3, #0
 8004812:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004814:	2310      	movs	r3, #16
 8004816:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800481c:	2300      	movs	r3, #0
 800481e:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8004820:	2300      	movs	r3, #0
 8004822:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 8004824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004828:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 800482a:	2300      	movs	r3, #0
 800482c:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 800482e:	2300      	movs	r3, #0
 8004830:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004832:	2300      	movs	r3, #0
 8004834:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 8004836:	2300      	movs	r3, #0
 8004838:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 800483a:	2300      	movs	r3, #0
 800483c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8004840:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004844:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8004846:	2300      	movs	r3, #0
 8004848:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800484a:	f7ff ff3f 	bl	80046cc <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800484e:	463a      	mov	r2, r7
 8004850:	f107 0120 	add.w	r1, r7, #32
 8004854:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004858:	4618      	mov	r0, r3
 800485a:	f008 faf8 	bl	800ce4e <HAL_SRAM_Init>

}
 800485e:	bf00      	nop
 8004860:	3790      	adds	r7, #144	; 0x90
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	a0000104 	.word	0xa0000104

0800486c <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 8004876:	4a04      	ldr	r2, [pc, #16]	; (8004888 <FMC_BANK1_WriteData+0x1c>)
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	8013      	strh	r3, [r2, #0]
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	60080000 	.word	0x60080000

0800488c <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 8004896:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800489a:	79fa      	ldrb	r2, [r7, #7]
 800489c:	b292      	uxth	r2, r2
 800489e:	801a      	strh	r2, [r3, #0]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <FMC_BANK1_ReadData+0x14>)
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	60080000 	.word	0x60080000

080048c4 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 80048c8:	f7ff ff7a 	bl	80047c0 <FMC_BANK1_Init>
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ffc5 	bl	800486c <FMC_BANK1_WriteData>
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4603      	mov	r3, r0
 80048f2:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ffc8 	bl	800488c <FMC_BANK1_WriteReg>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8004908:	f7ff ffd0 	bl	80048ac <FMC_BANK1_ReadData>
 800490c:	4603      	mov	r3, r0
}
 800490e:	4618      	mov	r0, r3
 8004910:	bd80      	pop	{r7, pc}

08004912 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 f8be 	bl	8005a9c <HAL_Delay>
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 800492c:	4812      	ldr	r0, [pc, #72]	; (8004978 <TS_IO_Init+0x50>)
 800492e:	f7ff fd09 	bl	8004344 <I2Cx_Init>

  if (ts_io_init == 0)
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <TS_IO_Init+0x54>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11b      	bne.n	8004972 <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 800493a:	f000 f8eb 	bl	8004b14 <BSP_LCD_Init>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 8004944:	f7ff fb26 	bl	8003f94 <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 8004948:	2101      	movs	r1, #1
 800494a:	2002      	movs	r0, #2
 800494c:	f000 f8aa 	bl	8004aa4 <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 8004950:	2100      	movs	r1, #0
 8004952:	2002      	movs	r0, #2
 8004954:	f000 f8c2 	bl	8004adc <BSP_IO_WritePin>
    HAL_Delay(10);
 8004958:	200a      	movs	r0, #10
 800495a:	f001 f89f 	bl	8005a9c <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 800495e:	2101      	movs	r1, #1
 8004960:	2002      	movs	r0, #2
 8004962:	f000 f8bb 	bl	8004adc <BSP_IO_WritePin>
    HAL_Delay(200);
 8004966:	20c8      	movs	r0, #200	; 0xc8
 8004968:	f001 f898 	bl	8005a9c <HAL_Delay>

    ts_io_init = 1;
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <TS_IO_Init+0x54>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]
  }
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000ab4 	.word	0x20000ab4
 800497c:	20000a5c 	.word	0x20000a5c

08004980 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af02      	add	r7, sp, #8
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	460b      	mov	r3, r1
 800498c:	71bb      	strb	r3, [r7, #6]
 800498e:	4613      	mov	r3, r2
 8004990:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 8004992:	79bb      	ldrb	r3, [r7, #6]
 8004994:	b29a      	uxth	r2, r3
 8004996:	79f9      	ldrb	r1, [r7, #7]
 8004998:	2301      	movs	r3, #1
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	1d7b      	adds	r3, r7, #5
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2301      	movs	r3, #1
 80049a2:	4803      	ldr	r0, [pc, #12]	; (80049b0 <TS_IO_Write+0x30>)
 80049a4:	f7ff fd49 	bl	800443a <I2Cx_WriteMultiple>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000ab4 	.word	0x20000ab4

080049b4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	460a      	mov	r2, r1
 80049be:	71fb      	strb	r3, [r7, #7]
 80049c0:	4613      	mov	r3, r2
 80049c2:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	79ba      	ldrb	r2, [r7, #6]
 80049ca:	b291      	uxth	r1, r2
 80049cc:	2201      	movs	r2, #1
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fc22 	bl	8004218 <I2C2_ReadData>
 80049d4:	4603      	mov	r3, r0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	603a      	str	r2, [r7, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
 80049ee:	460b      	mov	r3, r1
 80049f0:	71bb      	strb	r3, [r7, #6]
 80049f2:	4613      	mov	r3, r2
 80049f4:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80049f6:	79bb      	ldrb	r3, [r7, #6]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	79f9      	ldrb	r1, [r7, #7]
 80049fc:	88bb      	ldrh	r3, [r7, #4]
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2301      	movs	r3, #1
 8004a06:	4804      	ldr	r0, [pc, #16]	; (8004a18 <TS_IO_ReadMultiple+0x38>)
 8004a08:	f7ff fcea 	bl	80043e0 <I2Cx_ReadMultiple>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	b29b      	uxth	r3, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000ab4 	.word	0x20000ab4

08004a1c <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <BSP_IO_Init+0x78>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d128      	bne.n	8004a84 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8004a32:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <BSP_IO_Init+0x7c>)
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	2084      	movs	r0, #132	; 0x84
 8004a38:	4798      	blx	r3

    HAL_Delay(10);
 8004a3a:	200a      	movs	r0, #10
 8004a3c:	f001 f82e 	bl	8005a9c <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <BSP_IO_Init+0x80>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2084      	movs	r0, #132	; 0x84
 8004a46:	4798      	blx	r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8004a4c:	79bb      	ldrb	r3, [r7, #6]
 8004a4e:	2b7b      	cmp	r3, #123	; 0x7b
 8004a50:	d002      	beq.n	8004a58 <BSP_IO_Init+0x3c>
 8004a52:	79bb      	ldrb	r3, [r7, #6]
 8004a54:	2b79      	cmp	r3, #121	; 0x79
 8004a56:	d117      	bne.n	8004a88 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8004a58:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <BSP_IO_Init+0x78>)
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <BSP_IO_Init+0x80>)
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <BSP_IO_Init+0x78>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00f      	beq.n	8004a88 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <BSP_IO_Init+0x78>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2084      	movs	r0, #132	; 0x84
 8004a70:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8004a72:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <BSP_IO_Init+0x78>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4909      	ldr	r1, [pc, #36]	; (8004aa0 <BSP_IO_Init+0x84>)
 8004a7a:	2084      	movs	r0, #132	; 0x84
 8004a7c:	4798      	blx	r3

        ret = IO_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	71fb      	strb	r3, [r7, #7]
 8004a82:	e001      	b.n	8004a88 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8004a84:	2303      	movs	r3, #3
 8004a86:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8004a88:	79fb      	ldrb	r3, [r7, #7]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000bb0 	.word	0x20000bb0
 8004a98:	20000058 	.word	0x20000058
 8004a9c:	2000002c 	.word	0x2000002c
 8004aa0:	000301ff 	.word	0x000301ff

08004aa4 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <BSP_IO_ConfigPin+0x30>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <BSP_IO_ConfigPin+0x34>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	2084      	movs	r0, #132	; 0x84
 8004ac8:	4798      	blx	r3

  return IO_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	000301ff 	.word	0x000301ff
 8004ad8:	20000bb0 	.word	0x20000bb0

08004adc <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <BSP_IO_WritePin+0x30>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <BSP_IO_WritePin+0x34>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	2084      	movs	r0, #132	; 0x84
 8004b00:	4798      	blx	r3

}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	000301ff 	.word	0x000301ff
 8004b10:	20000bb0 	.word	0x20000bb0

08004b14 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8004b18:	2001      	movs	r0, #1
 8004b1a:	f000 f803 	bl	8004b24 <BSP_LCD_InitEx>
 8004b1e:	4603      	mov	r3, r0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8004b34:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <BSP_LCD_InitEx+0xe0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d102      	bne.n	8004b42 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]
 8004b40:	e05b      	b.n	8004bfa <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 8004b42:	f7ff ff6b 	bl	8004a1c <BSP_IO_Init>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 8004b4c:	f7ff fa22 	bl	8003f94 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8004b50:	f000 fcd0 	bl	80054f4 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8004b54:	2200      	movs	r2, #0
 8004b56:	2101      	movs	r1, #1
 8004b58:	482b      	ldr	r0, [pc, #172]	; (8004c08 <BSP_LCD_InitEx+0xe4>)
 8004b5a:	f002 fcf9 	bl	8007550 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8004b5e:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <BSP_LCD_InitEx+0xe8>)
 8004b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b64:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <BSP_LCD_InitEx+0xe8>)
 8004b68:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <BSP_LCD_InitEx+0xec>)
 8004b6a:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8004b6c:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <BSP_LCD_InitEx+0xe8>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8004b72:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <BSP_LCD_InitEx+0xf0>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d108      	bne.n	8004b8c <BSP_LCD_InitEx+0x68>
 8004b7a:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <BSP_LCD_InitEx+0xf4>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004b82:	2201      	movs	r2, #1
 8004b84:	2101      	movs	r1, #1
 8004b86:	4825      	ldr	r0, [pc, #148]	; (8004c1c <BSP_LCD_InitEx+0xf8>)
 8004b88:	f002 fce2 	bl	8007550 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8004b8c:	f000 f850 	bl	8004c30 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8004b90:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <BSP_LCD_InitEx+0xfc>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4798      	blx	r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b85      	cmp	r3, #133	; 0x85
 8004b9a:	d12e      	bne.n	8004bfa <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <BSP_LCD_InitEx+0x100>)
 8004b9e:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <BSP_LCD_InitEx+0xfc>)
 8004ba0:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8004ba2:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <BSP_LCD_InitEx+0x100>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8004baa:	2200      	movs	r2, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	202c      	movs	r0, #44	; 0x2c
 8004bb0:	f7fe ffb7 	bl	8003b22 <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	e006      	b.n	8004bc8 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8004bba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004bbe:	f7ff fe87 	bl	80048d0 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8004bce:	d3f4      	bcc.n	8004bba <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7fe fea1 	bl	800391e <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <BSP_LCD_InitEx+0x104>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e002      	b.n	8004bea <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8004be4:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <BSP_LCD_InitEx+0x104>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004bea:	4810      	ldr	r0, [pc, #64]	; (8004c2c <BSP_LCD_InitEx+0x108>)
 8004bec:	f000 f868 	bl	8004cc0 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <BSP_LCD_InitEx+0xe0>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000bb4 	.word	0x20000bb4
 8004c08:	48001c00 	.word	0x48001c00
 8004c0c:	20000c28 	.word	0x20000c28
 8004c10:	200000e4 	.word	0x200000e4
 8004c14:	20000c24 	.word	0x20000c24
 8004c18:	20000c25 	.word	0x20000c25
 8004c1c:	48002000 	.word	0x48002000
 8004c20:	200000a4 	.word	0x200000a4
 8004c24:	20000c34 	.word	0x20000c34
 8004c28:	200000f4 	.word	0x200000f4
 8004c2c:	200000ec 	.word	0x200000ec

08004c30 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8004c34:	2100      	movs	r1, #0
 8004c36:	2004      	movs	r0, #4
 8004c38:	f7ff ff50 	bl	8004adc <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8004c3c:	2005      	movs	r0, #5
 8004c3e:	f000 ff2d 	bl	8005a9c <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8004c42:	2101      	movs	r1, #1
 8004c44:	2004      	movs	r0, #4
 8004c46:	f7ff ff49 	bl	8004adc <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8004c4a:	200a      	movs	r0, #10
 8004c4c:	f000 ff26 	bl	8005a9c <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8004c50:	2100      	movs	r1, #0
 8004c52:	2004      	movs	r0, #4
 8004c54:	f7ff ff42 	bl	8004adc <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8004c58:	2014      	movs	r0, #20
 8004c5a:	f000 ff1f 	bl	8005a9c <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8004c5e:	2101      	movs	r1, #1
 8004c60:	2004      	movs	r0, #4
 8004c62:	f7ff ff3b 	bl	8004adc <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8004c66:	200a      	movs	r0, #10
 8004c68:	f000 ff18 	bl	8005a9c <HAL_Delay>
}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <BSP_LCD_GetXSize+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	4798      	blx	r3
 8004c7c:	4603      	mov	r3, r0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000c34 	.word	0x20000c34

08004c88 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <BSP_LCD_GetYSize+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	4798      	blx	r3
 8004c94:	4603      	mov	r3, r0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000c34 	.word	0x20000c34

08004ca0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	4a03      	ldr	r2, [pc, #12]	; (8004cbc <BSP_LCD_SetTextColor+0x1c>)
 8004cae:	6013      	str	r3, [r2, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	20000c28 	.word	0x20000c28

08004cc0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <BSP_LCD_SetFont+0x1c>)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6093      	str	r3, [r2, #8]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000c28 	.word	0x20000c28

08004ce0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <BSP_LCD_Clear+0x68>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <BSP_LCD_Clear+0x68>)
 8004cfc:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8004cfe:	f7ff ffc3 	bl	8004c88 <BSP_LCD_GetYSize>
 8004d02:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	e00d      	b.n	8004d26 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	b29c      	uxth	r4, r3
 8004d0e:	f7ff ffaf 	bl	8004c70 <BSP_LCD_GetXSize>
 8004d12:	4603      	mov	r3, r0
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	4621      	mov	r1, r4
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f000 f8e8 	bl	8004ef0 <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3301      	adds	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d3ed      	bcc.n	8004d0a <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 8004d2e:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <BSP_LCD_Clear+0x68>)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <BSP_LCD_Clear+0x68>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ffb0 	bl	8004ca0 <BSP_LCD_SetTextColor>
}
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd90      	pop	{r4, r7, pc}
 8004d48:	20000c28 	.word	0x20000c28

08004d4c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	80fb      	strh	r3, [r7, #6]
 8004d56:	460b      	mov	r3, r1
 8004d58:	80bb      	strh	r3, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <BSP_LCD_DisplayChar+0x50>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8004d68:	490c      	ldr	r1, [pc, #48]	; (8004d9c <BSP_LCD_DisplayChar+0x50>)
 8004d6a:	6889      	ldr	r1, [r1, #8]
 8004d6c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8004d6e:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <BSP_LCD_DisplayChar+0x50>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	889b      	ldrh	r3, [r3, #4]
 8004d78:	3307      	adds	r3, #7
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	da00      	bge.n	8004d80 <BSP_LCD_DisplayChar+0x34>
 8004d7e:	3307      	adds	r3, #7
 8004d80:	10db      	asrs	r3, r3, #3
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8004d86:	441a      	add	r2, r3
 8004d88:	88b9      	ldrh	r1, [r7, #4]
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fc0d 	bl	80055ac <DrawChar>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000c28 	.word	0x20000c28

08004da0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60ba      	str	r2, [r7, #8]
 8004da8:	461a      	mov	r2, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	81fb      	strh	r3, [r7, #14]
 8004dae:	460b      	mov	r3, r1
 8004db0:	81bb      	strh	r3, [r7, #12]
 8004db2:	4613      	mov	r3, r2
 8004db4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004db6:	2301      	movs	r3, #1
 8004db8:	83fb      	strh	r3, [r7, #30]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 8004dca:	e002      	b.n	8004dd2 <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	617a      	str	r2, [r7, #20]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f6      	bne.n	8004dcc <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 8004dde:	f7ff ff47 	bl	8004c70 <BSP_LCD_GetXSize>
 8004de2:	4602      	mov	r2, r0
 8004de4:	4b33      	ldr	r3, [pc, #204]	; (8004eb4 <BSP_LCD_DisplayStringAt+0x114>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	889b      	ldrh	r3, [r3, #4]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d014      	beq.n	8004e20 <BSP_LCD_DisplayStringAt+0x80>
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	dc23      	bgt.n	8004e42 <BSP_LCD_DisplayStringAt+0xa2>
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d002      	beq.n	8004e04 <BSP_LCD_DisplayStringAt+0x64>
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d011      	beq.n	8004e26 <BSP_LCD_DisplayStringAt+0x86>
 8004e02:	e01e      	b.n	8004e42 <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	4a2a      	ldr	r2, [pc, #168]	; (8004eb4 <BSP_LCD_DisplayStringAt+0x114>)
 8004e0c:	6892      	ldr	r2, [r2, #8]
 8004e0e:	8892      	ldrh	r2, [r2, #4]
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	89fb      	ldrh	r3, [r7, #14]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	83fb      	strh	r3, [r7, #30]
      break;
 8004e1e:	e013      	b.n	8004e48 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	83fb      	strh	r3, [r7, #30]
      break;
 8004e24:	e010      	b.n	8004e48 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <BSP_LCD_DisplayStringAt+0x114>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	889b      	ldrh	r3, [r3, #4]
 8004e34:	fb12 f303 	smulbb	r3, r2, r3
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	89fb      	ldrh	r3, [r7, #14]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	83fb      	strh	r3, [r7, #30]
      break;
 8004e40:	e002      	b.n	8004e48 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 8004e42:	89fb      	ldrh	r3, [r7, #14]
 8004e44:	83fb      	strh	r3, [r7, #30]
      break;
 8004e46:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8004e48:	8bfb      	ldrh	r3, [r7, #30]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <BSP_LCD_DisplayStringAt+0xb6>
 8004e4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da15      	bge.n	8004e82 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8004e56:	2301      	movs	r3, #1
 8004e58:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8004e5a:	e012      	b.n	8004e82 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	89b9      	ldrh	r1, [r7, #12]
 8004e62:	8bfb      	ldrh	r3, [r7, #30]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff ff71 	bl	8004d4c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <BSP_LCD_DisplayStringAt+0x114>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	889a      	ldrh	r2, [r3, #4]
 8004e70:	8bfb      	ldrh	r3, [r7, #30]
 8004e72:	4413      	add	r3, r2
 8004e74:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	60bb      	str	r3, [r7, #8]
    i++;
 8004e7c:	8bbb      	ldrh	r3, [r7, #28]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00f      	beq.n	8004eaa <BSP_LCD_DisplayStringAt+0x10a>
 8004e8a:	f7ff fef1 	bl	8004c70 <BSP_LCD_GetXSize>
 8004e8e:	4601      	mov	r1, r0
 8004e90:	8bbb      	ldrh	r3, [r7, #28]
 8004e92:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <BSP_LCD_DisplayStringAt+0x114>)
 8004e94:	6892      	ldr	r2, [r2, #8]
 8004e96:	8892      	ldrh	r2, [r2, #4]
 8004e98:	fb02 f303 	mul.w	r3, r2, r3
 8004e9c:	1acb      	subs	r3, r1, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <BSP_LCD_DisplayStringAt+0x114>)
 8004ea2:	6892      	ldr	r2, [r2, #8]
 8004ea4:	8892      	ldrh	r2, [r2, #4]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d2d8      	bcs.n	8004e5c <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8004eaa:	bf00      	nop
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000c28 	.word	0x20000c28

08004eb8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	80fb      	strh	r3, [r7, #6]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	80bb      	strh	r3, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 8004eca:	4b08      	ldr	r3, [pc, #32]	; (8004eec <BSP_LCD_DrawPixel+0x34>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d006      	beq.n	8004ee2 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <BSP_LCD_DrawPixel+0x34>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	88b9      	ldrh	r1, [r7, #4]
 8004ede:	88f8      	ldrh	r0, [r7, #6]
 8004ee0:	4798      	blx	r3
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000c34 	.word	0x20000c34

08004ef0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	80fb      	strh	r3, [r7, #6]
 8004efa:	460b      	mov	r3, r1
 8004efc:	80bb      	strh	r3, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <BSP_LCD_DrawHLine+0x6c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8004f10:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <BSP_LCD_DrawHLine+0x6c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6a1c      	ldr	r4, [r3, #32]
 8004f16:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <BSP_LCD_DrawHLine+0x70>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	b298      	uxth	r0, r3
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	88ba      	ldrh	r2, [r7, #4]
 8004f20:	88f9      	ldrh	r1, [r7, #6]
 8004f22:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8004f24:	e015      	b.n	8004f52 <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e00e      	b.n	8004f4a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	4413      	add	r3, r2
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <BSP_LCD_DrawHLine+0x70>)
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	88b9      	ldrh	r1, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ffba 	bl	8004eb8 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d3ec      	bcc.n	8004f2c <BSP_LCD_DrawHLine+0x3c>
}
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd90      	pop	{r4, r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000c34 	.word	0x20000c34
 8004f60:	20000c28 	.word	0x20000c28

08004f64 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	80fb      	strh	r3, [r7, #6]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	80bb      	strh	r3, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 8004f76:	887b      	ldrh	r3, [r7, #2]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	f1c3 0303 	rsb	r3, r3, #3
 8004f7e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004f84:	887b      	ldrh	r3, [r7, #2]
 8004f86:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 8004f88:	e09a      	b.n	80050c0 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	4413      	add	r3, r2
 8004f92:	b298      	uxth	r0, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	88ba      	ldrh	r2, [r7, #4]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	4a4d      	ldr	r2, [pc, #308]	; (80050d4 <BSP_LCD_DrawCircle+0x170>)
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	b292      	uxth	r2, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f7ff ff87 	bl	8004eb8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	b298      	uxth	r0, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	88ba      	ldrh	r2, [r7, #4]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4a45      	ldr	r2, [pc, #276]	; (80050d4 <BSP_LCD_DrawCircle+0x170>)
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	f7ff ff77 	bl	8004eb8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	b298      	uxth	r0, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	88ba      	ldrh	r2, [r7, #4]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <BSP_LCD_DrawCircle+0x170>)
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	f7ff ff67 	bl	8004eb8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	88fa      	ldrh	r2, [r7, #6]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	b298      	uxth	r0, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	88ba      	ldrh	r2, [r7, #4]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4a35      	ldr	r2, [pc, #212]	; (80050d4 <BSP_LCD_DrawCircle+0x170>)
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	b292      	uxth	r2, r2
 8005004:	4619      	mov	r1, r3
 8005006:	f7ff ff57 	bl	8004eb8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	b29a      	uxth	r2, r3
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	4413      	add	r3, r2
 8005012:	b298      	uxth	r0, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	b29a      	uxth	r2, r3
 8005018:	88bb      	ldrh	r3, [r7, #4]
 800501a:	4413      	add	r3, r2
 800501c:	b29b      	uxth	r3, r3
 800501e:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <BSP_LCD_DrawCircle+0x170>)
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	b292      	uxth	r2, r2
 8005024:	4619      	mov	r1, r3
 8005026:	f7ff ff47 	bl	8004eb8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	b29b      	uxth	r3, r3
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	b298      	uxth	r0, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	b29a      	uxth	r2, r3
 8005038:	88bb      	ldrh	r3, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	b29b      	uxth	r3, r3
 800503e:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <BSP_LCD_DrawCircle+0x170>)
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	b292      	uxth	r2, r2
 8005044:	4619      	mov	r1, r3
 8005046:	f7ff ff37 	bl	8004eb8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	b29a      	uxth	r2, r3
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	4413      	add	r3, r2
 8005052:	b298      	uxth	r0, r3
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	b29a      	uxth	r2, r3
 8005058:	88bb      	ldrh	r3, [r7, #4]
 800505a:	4413      	add	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <BSP_LCD_DrawCircle+0x170>)
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	b292      	uxth	r2, r2
 8005064:	4619      	mov	r1, r3
 8005066:	f7ff ff27 	bl	8004eb8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	b29b      	uxth	r3, r3
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	b298      	uxth	r0, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	b29a      	uxth	r2, r3
 8005078:	88bb      	ldrh	r3, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	b29b      	uxth	r3, r3
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <BSP_LCD_DrawCircle+0x170>)
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	b292      	uxth	r2, r2
 8005084:	4619      	mov	r1, r3
 8005086:	f7ff ff17 	bl	8004eb8 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800508a:	4813      	ldr	r0, [pc, #76]	; (80050d8 <BSP_LCD_DrawCircle+0x174>)
 800508c:	f7ff fe18 	bl	8004cc0 <BSP_LCD_SetFont>

    if (decision < 0)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	da06      	bge.n	80050a4 <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	009a      	lsls	r2, r3, #2
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	4413      	add	r3, r2
 800509e:	3306      	adds	r3, #6
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e00a      	b.n	80050ba <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	009a      	lsls	r2, r3, #2
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	330a      	adds	r3, #10
 80050b2:	617b      	str	r3, [r7, #20]
      current_y--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	3301      	adds	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f67f af60 	bls.w	8004f8a <BSP_LCD_DrawCircle+0x26>
  }
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000c28 	.word	0x20000c28
 80050d8:	200000ec 	.word	0x200000ec

080050dc <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	80fb      	strh	r3, [r7, #6]
 80050e6:	460b      	mov	r3, r1
 80050e8:	80bb      	strh	r3, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 80050ee:	887b      	ldrh	r3, [r7, #2]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	f1c3 0303 	rsb	r3, r3, #3
 80050f6:	617b      	str	r3, [r7, #20]

  current_x = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8005100:	4b3e      	ldr	r3, [pc, #248]	; (80051fc <BSP_LCD_FillCircle+0x120>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fdca 	bl	8004ca0 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800510c:	e061      	b.n	80051d2 <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d021      	beq.n	8005158 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	b29b      	uxth	r3, r3
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	b298      	uxth	r0, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	b29a      	uxth	r2, r3
 8005122:	88bb      	ldrh	r3, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	b299      	uxth	r1, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	b29b      	uxth	r3, r3
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	f7ff fedd 	bl	8004ef0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	b29b      	uxth	r3, r3
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	b298      	uxth	r0, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	b29b      	uxth	r3, r3
 8005144:	88ba      	ldrh	r2, [r7, #4]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	b299      	uxth	r1, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	b29b      	uxth	r3, r3
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	f7ff fecc 	bl	8004ef0 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d021      	beq.n	80051a2 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	b29b      	uxth	r3, r3
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	b298      	uxth	r0, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	b29b      	uxth	r3, r3
 800516c:	88ba      	ldrh	r2, [r7, #4]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	b299      	uxth	r1, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	b29b      	uxth	r3, r3
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	f7ff feb8 	bl	8004ef0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	b29b      	uxth	r3, r3
 8005184:	88fa      	ldrh	r2, [r7, #6]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	b298      	uxth	r0, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	b29a      	uxth	r2, r3
 800518e:	88bb      	ldrh	r3, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	b299      	uxth	r1, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	b29b      	uxth	r3, r3
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	f7ff fea7 	bl	8004ef0 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	da06      	bge.n	80051b6 <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	009a      	lsls	r2, r3, #2
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	3306      	adds	r3, #6
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e00a      	b.n	80051cc <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	009a      	lsls	r2, r3, #2
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	330a      	adds	r3, #10
 80051c4:	617b      	str	r3, [r7, #20]
      current_y--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3301      	adds	r3, #1
 80051d0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d999      	bls.n	800510e <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <BSP_LCD_FillCircle+0x120>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff fd5d 	bl	8004ca0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	88b9      	ldrh	r1, [r7, #4]
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff feb9 	bl	8004f64 <BSP_LCD_DrawCircle>
}
 80051f2:	bf00      	nop
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000c28 	.word	0x20000c28

08005200 <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 8005200:	b490      	push	{r4, r7}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	461a      	mov	r2, r3
 800520e:	4623      	mov	r3, r4
 8005210:	71fb      	strb	r3, [r7, #7]
 8005212:	4603      	mov	r3, r0
 8005214:	71bb      	strb	r3, [r7, #6]
 8005216:	460b      	mov	r3, r1
 8005218:	717b      	strb	r3, [r7, #5]
 800521a:	4613      	mov	r3, r2
 800521c:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <BSP_LCD_ScreenDimmingConfig+0x60>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d117      	bne.n	8005256 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	2b64      	cmp	r3, #100	; 0x64
 800522a:	d814      	bhi.n	8005256 <BSP_LCD_ScreenDimmingConfig+0x56>
 800522c:	79bb      	ldrb	r3, [r7, #6]
 800522e:	2b64      	cmp	r3, #100	; 0x64
 8005230:	d811      	bhi.n	8005256 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 8005232:	797b      	ldrb	r3, [r7, #5]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00e      	beq.n	8005256 <BSP_LCD_ScreenDimmingConfig+0x56>
 8005238:	797b      	ldrb	r3, [r7, #5]
 800523a:	2b63      	cmp	r3, #99	; 0x63
 800523c:	d80b      	bhi.n	8005256 <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800523e:	4a08      	ldr	r2, [pc, #32]	; (8005260 <BSP_LCD_ScreenDimmingConfig+0x60>)
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 8005244:	4a06      	ldr	r2, [pc, #24]	; (8005260 <BSP_LCD_ScreenDimmingConfig+0x60>)
 8005246:	79bb      	ldrb	r3, [r7, #6]
 8005248:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800524a:	4a05      	ldr	r2, [pc, #20]	; (8005260 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800524c:	797b      	ldrb	r3, [r7, #5]
 800524e:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 8005250:	4a03      	ldr	r2, [pc, #12]	; (8005260 <BSP_LCD_ScreenDimmingConfig+0x60>)
 8005252:	793b      	ldrb	r3, [r7, #4]
 8005254:	7113      	strb	r3, [r2, #4]
  }
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bc90      	pop	{r4, r7}
 800525e:	4770      	bx	lr
 8005260:	200000f8 	.word	0x200000f8

08005264 <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800526e:	4b71      	ldr	r3, [pc, #452]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f040 80d9 	bne.w	800542a <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 8005278:	4b6f      	ldr	r3, [pc, #444]	; (8005438 <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800527e:	4b6d      	ldr	r3, [pc, #436]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 8005284:	4b6b      	ldr	r3, [pc, #428]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 8005286:	789a      	ldrb	r2, [r3, #2]
 8005288:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	429a      	cmp	r2, r3
 800528e:	d903      	bls.n	8005298 <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 8005290:	4b68      	ldr	r3, [pc, #416]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 8005292:	78db      	ldrb	r3, [r3, #3]
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	e003      	b.n	80052a0 <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 8005298:	4b66      	ldr	r3, [pc, #408]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800529a:	78db      	ldrb	r3, [r3, #3]
 800529c:	425b      	negs	r3, r3
 800529e:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 80052a0:	4b66      	ldr	r3, [pc, #408]	; (800543c <BSP_LCD_ScreenDimmingOn+0x1d8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a66      	ldr	r2, [pc, #408]	; (8005440 <BSP_LCD_ScreenDimmingOn+0x1dc>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	0d9b      	lsrs	r3, r3, #22
 80052ac:	3b01      	subs	r3, #1
 80052ae:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 80052b0:	4b64      	ldr	r3, [pc, #400]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052b2:	4a65      	ldr	r2, [pc, #404]	; (8005448 <BSP_LCD_ScreenDimmingOn+0x1e4>)
 80052b4:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 80052b6:	4b63      	ldr	r3, [pc, #396]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052be:	4b61      	ldr	r3, [pc, #388]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c6:	4b5f      	ldr	r3, [pc, #380]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ce:	4b5d      	ldr	r3, [pc, #372]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d6:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052de:	4b59      	ldr	r3, [pc, #356]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e6:	4b57      	ldr	r3, [pc, #348]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ee:	4b55      	ldr	r3, [pc, #340]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f6:	4b53      	ldr	r3, [pc, #332]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052fe:	4b51      	ldr	r3, [pc, #324]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005306:	4b4f      	ldr	r3, [pc, #316]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800530e:	4b4d      	ldr	r3, [pc, #308]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 8005316:	4a4b      	ldr	r2, [pc, #300]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800531c:	4b49      	ldr	r3, [pc, #292]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800531e:	f240 2299 	movw	r2, #665	; 0x299
 8005322:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 8005324:	4b47      	ldr	r3, [pc, #284]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 8005326:	2200      	movs	r2, #0
 8005328:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	dd01      	ble.n	8005334 <BSP_LCD_ScreenDimmingOn+0xd0>
 8005330:	2310      	movs	r3, #16
 8005332:	e000      	b.n	8005336 <BSP_LCD_ScreenDimmingOn+0xd2>
 8005334:	2300      	movs	r3, #0
 8005336:	4a43      	ldr	r2, [pc, #268]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 8005338:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800533a:	4b42      	ldr	r3, [pc, #264]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800533c:	2200      	movs	r2, #0
 800533e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 8005340:	4840      	ldr	r0, [pc, #256]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 8005342:	f007 fdcc 	bl	800cede <HAL_TIM_PWM_Init>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800534c:	f7fe fe22 	bl	8003f94 <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 8005350:	4b3e      	ldr	r3, [pc, #248]	; (800544c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 8005352:	2260      	movs	r2, #96	; 0x60
 8005354:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8005356:	4b3d      	ldr	r3, [pc, #244]	; (800544c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 8005358:	2200      	movs	r2, #0
 800535a:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800535c:	4b3b      	ldr	r3, [pc, #236]	; (800544c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8005362:	4b3a      	ldr	r3, [pc, #232]	; (800544c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 8005364:	2200      	movs	r2, #0
 8005366:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005368:	4b38      	ldr	r3, [pc, #224]	; (800544c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800536a:	2200      	movs	r2, #0
 800536c:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800536e:	4b37      	ldr	r3, [pc, #220]	; (800544c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 8005370:	2200      	movs	r2, #0
 8005372:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 8005374:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	461a      	mov	r2, r3
 800537a:	f240 2399 	movw	r3, #665	; 0x299
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	4a33      	ldr	r2, [pc, #204]	; (8005450 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	4a30      	ldr	r2, [pc, #192]	; (800544c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800538c:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800538e:	220c      	movs	r2, #12
 8005390:	492e      	ldr	r1, [pc, #184]	; (800544c <BSP_LCD_ScreenDimmingOn+0x1e8>)
 8005392:	482c      	ldr	r0, [pc, #176]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 8005394:	f007 ff96 	bl	800d2c4 <HAL_TIM_PWM_ConfigChannel>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800539e:	f7fe fdf9 	bl	8003f94 <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 80053a2:	210c      	movs	r1, #12
 80053a4:	4827      	ldr	r0, [pc, #156]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80053a6:	f007 fdf1 	bl	800cf8c <HAL_TIM_PWM_Start>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 80053b0:	f7fe fdf0 	bl	8003f94 <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 80053b4:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b26      	ldr	r3, [pc, #152]	; (8005454 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 80053bc:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 80053be:	e02f      	b.n	8005420 <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 80053c0:	4b24      	ldr	r3, [pc, #144]	; (8005454 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f240 2299 	movw	r2, #665	; 0x299
 80053c8:	fb03 f202 	mul.w	r2, r3, r2
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	491f      	ldr	r1, [pc, #124]	; (8005450 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 80053d2:	fba1 1202 	umull	r1, r2, r1, r2
 80053d6:	0952      	lsrs	r2, r2, #5
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	dd06      	ble.n	80053ee <BSP_LCD_ScreenDimmingOn+0x18a>
 80053e0:	4b14      	ldr	r3, [pc, #80]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 80053e2:	789b      	ldrb	r3, [r3, #2]
 80053e4:	461a      	mov	r2, r3
 80053e6:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d909      	bls.n	8005402 <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da0a      	bge.n	800540a <BSP_LCD_ScreenDimmingOn+0x1a6>
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 80053f6:	789b      	ldrb	r3, [r3, #2]
 80053f8:	461a      	mov	r2, r3
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d303      	bcc.n	800540a <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	e00a      	b.n	8005420 <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800540c:	791b      	ldrb	r3, [r3, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fb44 	bl	8005a9c <HAL_Delay>
      i += step;
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	4a0d      	ldr	r2, [pc, #52]	; (8005454 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800541e:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1cb      	bne.n	80053c0 <BSP_LCD_ScreenDimmingOn+0x15c>
 8005428:	e000      	b.n	800542c <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800542a:	bf00      	nop
    }
  }
#endif
}
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200000f8 	.word	0x200000f8
 8005438:	20000bb8 	.word	0x20000bb8
 800543c:	20000000 	.word	0x20000000
 8005440:	431bde83 	.word	0x431bde83
 8005444:	20000bbc 	.word	0x20000bbc
 8005448:	40000c00 	.word	0x40000c00
 800544c:	20000c08 	.word	0x20000c08
 8005450:	51eb851f 	.word	0x51eb851f
 8005454:	20000c38 	.word	0x20000c38

08005458 <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d114      	bne.n	800548e <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <BSP_LCD_ScreenDimmingOff+0x40>)
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800546a:	210c      	movs	r1, #12
 800546c:	480b      	ldr	r0, [pc, #44]	; (800549c <BSP_LCD_ScreenDimmingOff+0x44>)
 800546e:	f007 fe93 	bl	800d198 <HAL_TIM_PWM_Stop>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 8005478:	f7fe fd8c 	bl	8003f94 <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <BSP_LCD_ScreenDimmingOff+0x48>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <BSP_LCD_ScreenDimmingOff+0x48>)
 8005482:	f023 0308 	bic.w	r3, r3, #8
 8005486:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
  }
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000bb8 	.word	0x20000bb8
 8005498:	200000f8 	.word	0x200000f8
 800549c:	20000bbc 	.word	0x20000bbc
 80054a0:	40021000 	.word	0x40021000

080054a4 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 80054ac:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <HAL_TIM_PWM_MspInit+0x48>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <HAL_TIM_PWM_MspInit+0x48>)
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	6593      	str	r3, [r2, #88]	; 0x58
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <HAL_TIM_PWM_MspInit+0x48>)
 80054ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c4:	2302      	movs	r3, #2
 80054c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054c8:	2301      	movs	r3, #1
 80054ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054cc:	2303      	movs	r3, #3
 80054ce:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 80054d0:	2302      	movs	r3, #2
 80054d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80054d4:	2301      	movs	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	4619      	mov	r1, r3
 80054de:	4804      	ldr	r0, [pc, #16]	; (80054f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80054e0:	f001 fdb2 	bl	8007048 <HAL_GPIO_Init>
}
 80054e4:	bf00      	nop
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000
 80054f0:	48002000 	.word	0x48002000

080054f4 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 8005500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005506:	4b26      	ldr	r3, [pc, #152]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005512:	4b23      	ldr	r3, [pc, #140]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 8005514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005516:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800551e:	4b20      	ldr	r3, [pc, #128]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800552a:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005536:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <BSP_LCD_MspInit+0xac>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8005542:	f7ff fa6b 	bl	8004a1c <BSP_IO_Init>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800554c:	f7fe fd22 	bl	8003f94 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8005550:	2101      	movs	r1, #1
 8005552:	2004      	movs	r0, #4
 8005554:	f7ff faa6 	bl	8004aa4 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8005558:	2301      	movs	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800555c:	2301      	movs	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 8005568:	2300      	movs	r3, #0
 800556a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800556c:	f107 030c 	add.w	r3, r7, #12
 8005570:	4619      	mov	r1, r3
 8005572:	480c      	ldr	r0, [pc, #48]	; (80055a4 <BSP_LCD_MspInit+0xb0>)
 8005574:	f001 fd68 	bl	8007048 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 8005578:	2301      	movs	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800557c:	2301      	movs	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8005588:	2300      	movs	r3, #0
 800558a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800558c:	f107 030c 	add.w	r3, r7, #12
 8005590:	4619      	mov	r1, r3
 8005592:	4805      	ldr	r0, [pc, #20]	; (80055a8 <BSP_LCD_MspInit+0xb4>)
 8005594:	f001 fd58 	bl	8007048 <HAL_GPIO_Init>
}
 8005598:	bf00      	nop
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40021000 	.word	0x40021000
 80055a4:	48002000 	.word	0x48002000
 80055a8:	48001c00 	.word	0x48001c00

080055ac <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	603a      	str	r2, [r7, #0]
 80055b6:	80fb      	strh	r3, [r7, #6]
 80055b8:	460b      	mov	r3, r1
 80055ba:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	2300      	movs	r3, #0
 80055c2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 80055c4:	4b45      	ldr	r3, [pc, #276]	; (80056dc <DrawChar+0x130>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	88db      	ldrh	r3, [r3, #6]
 80055ca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 80055cc:	4b43      	ldr	r3, [pc, #268]	; (80056dc <DrawChar+0x130>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	889b      	ldrh	r3, [r3, #4]
 80055d2:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 80055d4:	8a3b      	ldrh	r3, [r7, #16]
 80055d6:	3307      	adds	r3, #7
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da00      	bge.n	80055de <DrawChar+0x32>
 80055dc:	3307      	adds	r3, #7
 80055de:	10db      	asrs	r3, r3, #3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	8a3b      	ldrh	r3, [r7, #16]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
 80055f2:	e069      	b.n	80056c8 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80055f4:	8a3b      	ldrh	r3, [r7, #16]
 80055f6:	3307      	adds	r3, #7
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da00      	bge.n	80055fe <DrawChar+0x52>
 80055fc:	3307      	adds	r3, #7
 80055fe:	10db      	asrs	r3, r3, #3
 8005600:	461a      	mov	r2, r3
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	4413      	add	r3, r2
 800560c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800560e:	8a3b      	ldrh	r3, [r7, #16]
 8005610:	3307      	adds	r3, #7
 8005612:	2b00      	cmp	r3, #0
 8005614:	da00      	bge.n	8005618 <DrawChar+0x6c>
 8005616:	3307      	adds	r3, #7
 8005618:	10db      	asrs	r3, r3, #3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d002      	beq.n	8005624 <DrawChar+0x78>
 800561e:	2b02      	cmp	r3, #2
 8005620:	d004      	beq.n	800562c <DrawChar+0x80>
 8005622:	e00c      	b.n	800563e <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	617b      	str	r3, [r7, #20]
        break;
 800562a:	e016      	b.n	800565a <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	3201      	adds	r2, #1
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
        break;
 800563c:	e00d      	b.n	800565a <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	041a      	lsls	r2, r3, #16
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	3301      	adds	r3, #1
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	4313      	orrs	r3, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	3202      	adds	r2, #2
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
        break;
 8005658:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	e029      	b.n	80056b4 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 8005660:	8a3a      	ldrh	r2, [r7, #16]
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	1ad2      	subs	r2, r2, r3
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	4413      	add	r3, r2
 800566a:	3b01      	subs	r3, #1
 800566c:	2201      	movs	r2, #1
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	461a      	mov	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4013      	ands	r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	b29a      	uxth	r2, r3
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	4413      	add	r3, r2
 8005684:	b29b      	uxth	r3, r3
 8005686:	4a15      	ldr	r2, [pc, #84]	; (80056dc <DrawChar+0x130>)
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	b292      	uxth	r2, r2
 800568c:	88b9      	ldrh	r1, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fc12 	bl	8004eb8 <BSP_LCD_DrawPixel>
 8005694:	e00b      	b.n	80056ae <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	b29a      	uxth	r2, r3
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	4413      	add	r3, r2
 800569e:	b29b      	uxth	r3, r3
 80056a0:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <DrawChar+0x130>)
 80056a2:	6852      	ldr	r2, [r2, #4]
 80056a4:	b292      	uxth	r2, r2
 80056a6:	88b9      	ldrh	r1, [r7, #4]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fc05 	bl	8004eb8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	3301      	adds	r3, #1
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	8a3b      	ldrh	r3, [r7, #16]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d3d1      	bcc.n	8005660 <DrawChar+0xb4>
      }
    }
    Ypos++;
 80056bc:	88bb      	ldrh	r3, [r7, #4]
 80056be:	3301      	adds	r3, #1
 80056c0:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	8a7b      	ldrh	r3, [r7, #18]
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d391      	bcc.n	80055f4 <DrawChar+0x48>
  }
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000c28 	.word	0x20000c28

080056e0 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	80fb      	strh	r3, [r7, #6]
 80056ea:	460b      	mov	r3, r1
 80056ec:	80bb      	strh	r3, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80056fa:	4b20      	ldr	r3, [pc, #128]	; (800577c <BSP_TS_InitEx+0x9c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a20      	ldr	r2, [pc, #128]	; (8005780 <BSP_TS_InitEx+0xa0>)
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	b292      	uxth	r2, r2
 8005704:	4610      	mov	r0, r2
 8005706:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8005708:	4b1c      	ldr	r3, [pc, #112]	; (800577c <BSP_TS_InitEx+0x9c>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2070      	movs	r0, #112	; 0x70
 800570e:	4798      	blx	r3
 8005710:	4603      	mov	r3, r0
 8005712:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 8005714:	89bb      	ldrh	r3, [r7, #12]
 8005716:	2bcd      	cmp	r3, #205	; 0xcd
 8005718:	d12a      	bne.n	8005770 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800571a:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <BSP_TS_InitEx+0xa4>)
 800571c:	4a17      	ldr	r2, [pc, #92]	; (800577c <BSP_TS_InitEx+0x9c>)
 800571e:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 8005720:	4b17      	ldr	r3, [pc, #92]	; (8005780 <BSP_TS_InitEx+0xa0>)
 8005722:	2270      	movs	r2, #112	; 0x70
 8005724:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800572c:	4b16      	ldr	r3, [pc, #88]	; (8005788 <BSP_TS_InitEx+0xa8>)
 800572e:	2206      	movs	r2, #6
 8005730:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 8005732:	4b16      	ldr	r3, [pc, #88]	; (800578c <BSP_TS_InitEx+0xac>)
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e005      	b.n	8005746 <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800573a:	4b13      	ldr	r3, [pc, #76]	; (8005788 <BSP_TS_InitEx+0xa8>)
 800573c:	220c      	movs	r2, #12
 800573e:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <BSP_TS_InitEx+0xac>)
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d111      	bne.n	8005770 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <BSP_TS_InitEx+0xa4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <BSP_TS_InitEx+0xa0>)
 8005754:	7812      	ldrb	r2, [r2, #0]
 8005756:	b292      	uxth	r2, r2
 8005758:	4610      	mov	r0, r2
 800575a:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <BSP_TS_InitEx+0xa4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4a07      	ldr	r2, [pc, #28]	; (8005780 <BSP_TS_InitEx+0xa0>)
 8005764:	7812      	ldrb	r2, [r2, #0]
 8005766:	b292      	uxth	r2, r2
 8005768:	4610      	mov	r0, r2
 800576a:	4798      	blx	r3

      return TS_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	e000      	b.n	8005772 <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 8005770:	2303      	movs	r3, #3


}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000004 	.word	0x20000004
 8005780:	20000c40 	.word	0x20000c40
 8005784:	20000c3c 	.word	0x20000c3c
 8005788:	200000fd 	.word	0x200000fd
 800578c:	200000fe 	.word	0x200000fe

08005790 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800579c:	4b80      	ldr	r3, [pc, #512]	; (80059a0 <BSP_TS_GetState+0x210>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	4a80      	ldr	r2, [pc, #512]	; (80059a4 <BSP_TS_GetState+0x214>)
 80057a4:	7812      	ldrb	r2, [r2, #0]
 80057a6:	b292      	uxth	r2, r2
 80057a8:	4610      	mov	r0, r2
 80057aa:	4798      	blx	r3
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80ec 	beq.w	8005996 <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e0e1      	b.n	8005988 <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80057c4:	4b76      	ldr	r3, [pc, #472]	; (80059a0 <BSP_TS_GetState+0x210>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	4a76      	ldr	r2, [pc, #472]	; (80059a4 <BSP_TS_GetState+0x214>)
 80057cc:	7812      	ldrb	r2, [r2, #0]
 80057ce:	b290      	uxth	r0, r2
 80057d0:	f107 0110 	add.w	r1, r7, #16
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	0052      	lsls	r2, r2, #1
 80057d8:	188c      	adds	r4, r1, r2
 80057da:	f107 010c 	add.w	r1, r7, #12
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	0052      	lsls	r2, r2, #1
 80057e2:	440a      	add	r2, r1
 80057e4:	4621      	mov	r1, r4
 80057e6:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 80057e8:	4b6f      	ldr	r3, [pc, #444]	; (80059a8 <BSP_TS_GetState+0x218>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d019      	beq.n	8005828 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	3320      	adds	r3, #32
 80057fa:	443b      	add	r3, r7
 80057fc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8005800:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	3320      	adds	r3, #32
 8005808:	443b      	add	r3, r7
 800580a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	3320      	adds	r3, #32
 8005814:	443b      	add	r3, r7
 8005816:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	3320      	adds	r3, #32
 8005820:	443b      	add	r3, r7
 8005822:	8b3a      	ldrh	r2, [r7, #24]
 8005824:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 8005828:	4b5f      	ldr	r3, [pc, #380]	; (80059a8 <BSP_TS_GetState+0x218>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00e      	beq.n	8005852 <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	3320      	adds	r3, #32
 800583a:	443b      	add	r3, r7
 800583c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8005840:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005844:	b29a      	uxth	r2, r3
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	3320      	adds	r3, #32
 800584c:	443b      	add	r3, r7
 800584e:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 8005852:	4b55      	ldr	r3, [pc, #340]	; (80059a8 <BSP_TS_GetState+0x218>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00e      	beq.n	800587c <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	3320      	adds	r3, #32
 8005864:	443b      	add	r3, r7
 8005866:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800586a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800586e:	b29a      	uxth	r2, r3
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	3320      	adds	r3, #32
 8005876:	443b      	add	r3, r7
 8005878:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	3320      	adds	r3, #32
 8005882:	443b      	add	r3, r7
 8005884:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8005888:	4619      	mov	r1, r3
 800588a:	4a48      	ldr	r2, [pc, #288]	; (80059ac <BSP_TS_GetState+0x21c>)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005892:	4299      	cmp	r1, r3
 8005894:	d90d      	bls.n	80058b2 <BSP_TS_GetState+0x122>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	3320      	adds	r3, #32
 800589c:	443b      	add	r3, r7
 800589e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80058a2:	4942      	ldr	r1, [pc, #264]	; (80059ac <BSP_TS_GetState+0x21c>)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	e00c      	b.n	80058cc <BSP_TS_GetState+0x13c>
 80058b2:	4a3e      	ldr	r2, [pc, #248]	; (80059ac <BSP_TS_GetState+0x21c>)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	3320      	adds	r3, #32
 80058c2:	443b      	add	r3, r7
 80058c4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	3320      	adds	r3, #32
 80058d4:	443b      	add	r3, r7
 80058d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80058da:	4619      	mov	r1, r3
 80058dc:	4a34      	ldr	r2, [pc, #208]	; (80059b0 <BSP_TS_GetState+0x220>)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e4:	4299      	cmp	r1, r3
 80058e6:	d90d      	bls.n	8005904 <BSP_TS_GetState+0x174>
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	3320      	adds	r3, #32
 80058ee:	443b      	add	r3, r7
 80058f0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80058f4:	492e      	ldr	r1, [pc, #184]	; (80059b0 <BSP_TS_GetState+0x220>)
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	b29b      	uxth	r3, r3
 8005902:	e00c      	b.n	800591e <BSP_TS_GetState+0x18e>
 8005904:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <BSP_TS_GetState+0x220>)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590c:	b29a      	uxth	r2, r3
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	3320      	adds	r3, #32
 8005914:	443b      	add	r3, r7
 8005916:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	b29b      	uxth	r3, r3
 800591e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8005920:	8afa      	ldrh	r2, [r7, #22]
 8005922:	8abb      	ldrh	r3, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	2b05      	cmp	r3, #5
 8005928:	dd15      	ble.n	8005956 <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	3320      	adds	r3, #32
 8005930:	443b      	add	r3, r7
 8005932:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8005936:	4619      	mov	r1, r3
 8005938:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <BSP_TS_GetState+0x21c>)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	3320      	adds	r3, #32
 8005946:	443b      	add	r3, r7
 8005948:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800594c:	4619      	mov	r1, r3
 800594e:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <BSP_TS_GetState+0x220>)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8005956:	4a15      	ldr	r2, [pc, #84]	; (80059ac <BSP_TS_GetState+0x21c>)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595e:	b299      	uxth	r1, r3
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4413      	add	r3, r2
 8005968:	460a      	mov	r2, r1
 800596a:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800596c:	4a10      	ldr	r2, [pc, #64]	; (80059b0 <BSP_TS_GetState+0x220>)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005974:	b299      	uxth	r1, r3
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	4413      	add	r3, r2
 800597e:	460a      	mov	r2, r1
 8005980:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4293      	cmp	r3, r2
 8005992:	f4ff af17 	bcc.w	80057c4 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005996:	7efb      	ldrb	r3, [r7, #27]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3724      	adds	r7, #36	; 0x24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd90      	pop	{r4, r7, pc}
 80059a0:	20000c3c 	.word	0x20000c3c
 80059a4:	20000c40 	.word	0x20000c40
 80059a8:	200000fd 	.word	0x200000fd
 80059ac:	20000c44 	.word	0x20000c44
 80059b0:	20000c4c 	.word	0x20000c4c

080059b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059be:	2003      	movs	r0, #3
 80059c0:	f001 f960 	bl	8006c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059c4:	2000      	movs	r0, #0
 80059c6:	f000 f80d 	bl	80059e4 <HAL_InitTick>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	71fb      	strb	r3, [r7, #7]
 80059d4:	e001      	b.n	80059da <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059d6:	f7fb fdd5 	bl	8001584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059da:	79fb      	ldrb	r3, [r7, #7]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <HAL_InitTick+0x6c>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d023      	beq.n	8005a40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80059f8:	4b16      	ldr	r3, [pc, #88]	; (8005a54 <HAL_InitTick+0x70>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <HAL_InitTick+0x6c>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	4619      	mov	r1, r3
 8005a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 f97b 	bl	8006d0a <HAL_SYSTICK_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b0f      	cmp	r3, #15
 8005a1e:	d809      	bhi.n	8005a34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a20:	2200      	movs	r2, #0
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a28:	f001 f937 	bl	8006c9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a2c:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <HAL_InitTick+0x74>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e007      	b.n	8005a44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e004      	b.n	8005a44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	e001      	b.n	8005a44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000104 	.word	0x20000104
 8005a54:	20000000 	.word	0x20000000
 8005a58:	20000100 	.word	0x20000100

08005a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <HAL_IncTick+0x20>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_IncTick+0x24>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <HAL_IncTick+0x24>)
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000104 	.word	0x20000104
 8005a80:	20000c54 	.word	0x20000c54

08005a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return uwTick;
 8005a88:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <HAL_GetTick+0x14>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000c54 	.word	0x20000c54

08005a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005aa4:	f7ff ffee 	bl	8005a84 <HAL_GetTick>
 8005aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab4:	d005      	beq.n	8005ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <HAL_Delay+0x44>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ac2:	bf00      	nop
 8005ac4:	f7ff ffde 	bl	8005a84 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d8f7      	bhi.n	8005ac4 <HAL_Delay+0x28>
  {
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000104 	.word	0x20000104

08005ae4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	609a      	str	r2, [r3, #8]
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3360      	adds	r3, #96	; 0x60
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b08      	ldr	r3, [pc, #32]	; (8005b90 <LL_ADC_SetOffset+0x44>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	03fff000 	.word	0x03fff000

08005b94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3360      	adds	r3, #96	; 0x60
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3360      	adds	r3, #96	; 0x60
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	615a      	str	r2, [r3, #20]
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3330      	adds	r3, #48	; 0x30
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	f003 030c 	and.w	r3, r3, #12
 8005c38:	4413      	add	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	211f      	movs	r1, #31
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	0e9b      	lsrs	r3, r3, #26
 8005c54:	f003 011f 	and.w	r1, r3, #31
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c62:	431a      	orrs	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3314      	adds	r3, #20
 8005c84:	461a      	mov	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	0e5b      	lsrs	r3, r3, #25
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	4413      	add	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	0d1b      	lsrs	r3, r3, #20
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2107      	movs	r1, #7
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	401a      	ands	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	0d1b      	lsrs	r3, r3, #20
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f003 0318 	and.w	r3, r3, #24
 8005cee:	4908      	ldr	r1, [pc, #32]	; (8005d10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005cf0:	40d9      	lsrs	r1, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	400b      	ands	r3, r1
 8005cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d02:	bf00      	nop
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	0007ffff 	.word	0x0007ffff

08005d14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6093      	str	r3, [r2, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4c:	d101      	bne.n	8005d52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d9c:	d101      	bne.n	8005da2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <LL_ADC_IsEnabled+0x18>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <LL_ADC_IsEnabled+0x1a>
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d101      	bne.n	8005dee <LL_ADC_REG_IsConversionOngoing+0x18>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d101      	bne.n	8005e14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e139      	b.n	80060b2 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d109      	bne.n	8005e60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fb fbbd 	bl	80015cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff ff67 	bl	8005d38 <LL_ADC_IsDeepPowerDownEnabled>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff ff4d 	bl	8005d14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff ff82 	bl	8005d88 <LL_ADC_IsInternalRegulatorEnabled>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d115      	bne.n	8005eb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff ff66 	bl	8005d60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e94:	4b89      	ldr	r3, [pc, #548]	; (80060bc <HAL_ADC_Init+0x298>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	099b      	lsrs	r3, r3, #6
 8005e9a:	4a89      	ldr	r2, [pc, #548]	; (80060c0 <HAL_ADC_Init+0x29c>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	099b      	lsrs	r3, r3, #6
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ea8:	e002      	b.n	8005eb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f9      	bne.n	8005eaa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff ff64 	bl	8005d88 <LL_ADC_IsInternalRegulatorEnabled>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10d      	bne.n	8005ee2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eca:	f043 0210 	orr.w	r2, r3, #16
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed6:	f043 0201 	orr.w	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff ff75 	bl	8005dd6 <LL_ADC_REG_IsConversionOngoing>
 8005eec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 80d2 	bne.w	80060a0 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 80ce 	bne.w	80060a0 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005f0c:	f043 0202 	orr.w	r2, r3, #2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff ff49 	bl	8005db0 <LL_ADC_IsEnabled>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d115      	bne.n	8005f50 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f24:	4867      	ldr	r0, [pc, #412]	; (80060c4 <HAL_ADC_Init+0x2a0>)
 8005f26:	f7ff ff43 	bl	8005db0 <LL_ADC_IsEnabled>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4866      	ldr	r0, [pc, #408]	; (80060c8 <HAL_ADC_Init+0x2a4>)
 8005f2e:	f7ff ff3f 	bl	8005db0 <LL_ADC_IsEnabled>
 8005f32:	4603      	mov	r3, r0
 8005f34:	431c      	orrs	r4, r3
 8005f36:	4865      	ldr	r0, [pc, #404]	; (80060cc <HAL_ADC_Init+0x2a8>)
 8005f38:	f7ff ff3a 	bl	8005db0 <LL_ADC_IsEnabled>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4323      	orrs	r3, r4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d105      	bne.n	8005f50 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4861      	ldr	r0, [pc, #388]	; (80060d0 <HAL_ADC_Init+0x2ac>)
 8005f4c:	f7ff fdca 	bl	8005ae4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7e5b      	ldrb	r3, [r3, #25]
 8005f54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005f5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005f60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005f66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005f70:	4313      	orrs	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d106      	bne.n	8005f8c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	3b01      	subs	r3, #1
 8005f84:	045b      	lsls	r3, r3, #17
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <HAL_ADC_Init+0x2b0>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	69b9      	ldr	r1, [r7, #24]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ff08 	bl	8005dd6 <LL_ADC_REG_IsConversionOngoing>
 8005fc6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff ff15 	bl	8005dfc <LL_ADC_INJ_IsConversionOngoing>
 8005fd2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d140      	bne.n	800605c <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d13d      	bne.n	800605c <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	7e1b      	ldrb	r3, [r3, #24]
 8005fe8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005fea:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ff2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006002:	f023 0306 	bic.w	r3, r3, #6
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	69b9      	ldr	r1, [r7, #24]
 800600c:	430b      	orrs	r3, r1
 800600e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006016:	2b01      	cmp	r3, #1
 8006018:	d118      	bne.n	800604c <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006030:	4311      	orrs	r1, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006036:	4311      	orrs	r1, r2
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800603c:	430a      	orrs	r2, r1
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	611a      	str	r2, [r3, #16]
 800604a:	e007      	b.n	800605c <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0201 	bic.w	r2, r2, #1
 800605a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d10c      	bne.n	800607e <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	f023 010f 	bic.w	r1, r3, #15
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
 800607c:	e007      	b.n	800608e <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 020f 	bic.w	r2, r2, #15
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	f043 0201 	orr.w	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	659a      	str	r2, [r3, #88]	; 0x58
 800609e:	e007      	b.n	80060b0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	f043 0210 	orr.w	r2, r3, #16
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80060b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3724      	adds	r7, #36	; 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd90      	pop	{r4, r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000000 	.word	0x20000000
 80060c0:	053e2d63 	.word	0x053e2d63
 80060c4:	50040000 	.word	0x50040000
 80060c8:	50040100 	.word	0x50040100
 80060cc:	50040200 	.word	0x50040200
 80060d0:	50040300 	.word	0x50040300
 80060d4:	fff0c007 	.word	0xfff0c007

080060d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b0b6      	sub	sp, #216	; 0xd8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_ADC_ConfigChannel+0x22>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e3e3      	b.n	80068c2 <HAL_ADC_ConfigChannel+0x7ea>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fe65 	bl	8005dd6 <LL_ADC_REG_IsConversionOngoing>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 83c4 	bne.w	800689c <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b05      	cmp	r3, #5
 800611a:	d824      	bhi.n	8006166 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	3b02      	subs	r3, #2
 8006122:	2b03      	cmp	r3, #3
 8006124:	d81b      	bhi.n	800615e <HAL_ADC_ConfigChannel+0x86>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <HAL_ADC_ConfigChannel+0x54>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	0800613d 	.word	0x0800613d
 8006130:	08006145 	.word	0x08006145
 8006134:	0800614d 	.word	0x0800614d
 8006138:	08006155 	.word	0x08006155
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	220c      	movs	r2, #12
 8006140:	605a      	str	r2, [r3, #4]
          break;
 8006142:	e011      	b.n	8006168 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2212      	movs	r2, #18
 8006148:	605a      	str	r2, [r3, #4]
          break;
 800614a:	e00d      	b.n	8006168 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2218      	movs	r2, #24
 8006150:	605a      	str	r2, [r3, #4]
          break;
 8006152:	e009      	b.n	8006168 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800615a:	605a      	str	r2, [r3, #4]
          break;
 800615c:	e004      	b.n	8006168 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2206      	movs	r2, #6
 8006162:	605a      	str	r2, [r3, #4]
          break;
 8006164:	e000      	b.n	8006168 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8006166:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	f7ff fd51 	bl	8005c1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fe29 	bl	8005dd6 <LL_ADC_REG_IsConversionOngoing>
 8006184:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fe35 	bl	8005dfc <LL_ADC_INJ_IsConversionOngoing>
 8006192:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006196:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 81c1 	bne.w	8006522 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f040 81bc 	bne.w	8006522 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b2:	d10f      	bne.n	80061d4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	4619      	mov	r1, r3
 80061c0:	f7ff fd58 	bl	8005c74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fd12 	bl	8005bf6 <LL_ADC_SetSamplingTimeCommonConfig>
 80061d2:	e00e      	b.n	80061f2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6819      	ldr	r1, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	461a      	mov	r2, r3
 80061e2:	f7ff fd47 	bl	8005c74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fd02 	bl	8005bf6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	08db      	lsrs	r3, r3, #3
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d00a      	beq.n	800622a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	6919      	ldr	r1, [r3, #16]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006224:	f7ff fc92 	bl	8005b4c <LL_ADC_SetOffset>
 8006228:	e17b      	b.n	8006522 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fcaf 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 8006236:	4603      	mov	r3, r0
 8006238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <HAL_ADC_ConfigChannel+0x17e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2100      	movs	r1, #0
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fca4 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 800624c:	4603      	mov	r3, r0
 800624e:	0e9b      	lsrs	r3, r3, #26
 8006250:	f003 021f 	and.w	r2, r3, #31
 8006254:	e01e      	b.n	8006294 <HAL_ADC_ConfigChannel+0x1bc>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff fc99 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 8006262:	4603      	mov	r3, r0
 8006264:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006268:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800626c:	fa93 f3a3 	rbit	r3, r3
 8006270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800627c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8006284:	2320      	movs	r3, #32
 8006286:	e004      	b.n	8006292 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8006288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800628c:	fab3 f383 	clz	r3, r3
 8006290:	b2db      	uxtb	r3, r3
 8006292:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x1d4>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	0e9b      	lsrs	r3, r3, #26
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	e018      	b.n	80062de <HAL_ADC_ConfigChannel+0x206>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062b8:	fa93 f3a3 	rbit	r3, r3
 80062bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80062c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80062c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80062d0:	2320      	movs	r3, #32
 80062d2:	e004      	b.n	80062de <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80062d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062d8:	fab3 f383 	clz	r3, r3
 80062dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80062de:	429a      	cmp	r2, r3
 80062e0:	d106      	bne.n	80062f0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fc68 	bl	8005bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2101      	movs	r1, #1
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fc4c 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <HAL_ADC_ConfigChannel+0x244>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2101      	movs	r1, #1
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fc41 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 8006312:	4603      	mov	r3, r0
 8006314:	0e9b      	lsrs	r3, r3, #26
 8006316:	f003 021f 	and.w	r2, r3, #31
 800631a:	e01e      	b.n	800635a <HAL_ADC_ConfigChannel+0x282>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2101      	movs	r1, #1
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fc36 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 8006328:	4603      	mov	r3, r0
 800632a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006332:	fa93 f3a3 	rbit	r3, r3
 8006336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800633a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800633e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800634a:	2320      	movs	r3, #32
 800634c:	e004      	b.n	8006358 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800634e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006352:	fab3 f383 	clz	r3, r3
 8006356:	b2db      	uxtb	r3, r3
 8006358:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_ADC_ConfigChannel+0x29a>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	0e9b      	lsrs	r3, r3, #26
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	e018      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x2cc>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800637e:	fa93 f3a3 	rbit	r3, r3
 8006382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006386:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800638a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800638e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8006396:	2320      	movs	r3, #32
 8006398:	e004      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800639a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800639e:	fab3 f383 	clz	r3, r3
 80063a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d106      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	2101      	movs	r1, #1
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fc05 	bl	8005bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2102      	movs	r1, #2
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fbe9 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <HAL_ADC_ConfigChannel+0x30a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2102      	movs	r1, #2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fbde 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 80063d8:	4603      	mov	r3, r0
 80063da:	0e9b      	lsrs	r3, r3, #26
 80063dc:	f003 021f 	and.w	r2, r3, #31
 80063e0:	e01e      	b.n	8006420 <HAL_ADC_ConfigChannel+0x348>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2102      	movs	r1, #2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fbd3 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063f8:	fa93 f3a3 	rbit	r3, r3
 80063fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8006410:	2320      	movs	r3, #32
 8006412:	e004      	b.n	800641e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8006414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006418:	fab3 f383 	clz	r3, r3
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006428:	2b00      	cmp	r3, #0
 800642a:	d105      	bne.n	8006438 <HAL_ADC_ConfigChannel+0x360>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	0e9b      	lsrs	r3, r3, #26
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	e016      	b.n	8006466 <HAL_ADC_ConfigChannel+0x38e>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006444:	fa93 f3a3 	rbit	r3, r3
 8006448:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800644a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800644c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8006458:	2320      	movs	r3, #32
 800645a:	e004      	b.n	8006466 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800645c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006460:	fab3 f383 	clz	r3, r3
 8006464:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006466:	429a      	cmp	r2, r3
 8006468:	d106      	bne.n	8006478 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2200      	movs	r2, #0
 8006470:	2102      	movs	r1, #2
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fba4 	bl	8005bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2103      	movs	r1, #3
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fb88 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 8006484:	4603      	mov	r3, r0
 8006486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <HAL_ADC_ConfigChannel+0x3cc>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2103      	movs	r1, #3
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fb7d 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 800649a:	4603      	mov	r3, r0
 800649c:	0e9b      	lsrs	r3, r3, #26
 800649e:	f003 021f 	and.w	r2, r3, #31
 80064a2:	e017      	b.n	80064d4 <HAL_ADC_ConfigChannel+0x3fc>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2103      	movs	r1, #3
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fb72 	bl	8005b94 <LL_ADC_GetOffsetChannel>
 80064b0:	4603      	mov	r3, r0
 80064b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b6:	fa93 f3a3 	rbit	r3, r3
 80064ba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80064bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064be:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80064c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80064c6:	2320      	movs	r3, #32
 80064c8:	e003      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80064ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064cc:	fab3 f383 	clz	r3, r3
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x414>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	0e9b      	lsrs	r3, r3, #26
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	e011      	b.n	8006510 <HAL_ADC_ConfigChannel+0x438>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064f4:	fa93 f3a3 	rbit	r3, r3
 80064f8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80064fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80064fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8006504:	2320      	movs	r3, #32
 8006506:	e003      	b.n	8006510 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8006508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650a:	fab3 f383 	clz	r3, r3
 800650e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006510:	429a      	cmp	r2, r3
 8006512:	d106      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2200      	movs	r2, #0
 800651a:	2103      	movs	r1, #3
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fb4f 	bl	8005bc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fc42 	bl	8005db0 <LL_ADC_IsEnabled>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	f040 8140 	bne.w	80067b4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	461a      	mov	r2, r3
 8006542:	f7ff fbc3 	bl	8005ccc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	4a8f      	ldr	r2, [pc, #572]	; (8006788 <HAL_ADC_ConfigChannel+0x6b0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	f040 8131 	bne.w	80067b4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <HAL_ADC_ConfigChannel+0x4a2>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	0e9b      	lsrs	r3, r3, #26
 8006568:	3301      	adds	r3, #1
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2b09      	cmp	r3, #9
 8006570:	bf94      	ite	ls
 8006572:	2301      	movls	r3, #1
 8006574:	2300      	movhi	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	e019      	b.n	80065ae <HAL_ADC_ConfigChannel+0x4d6>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006582:	fa93 f3a3 	rbit	r3, r3
 8006586:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800658a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800658c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8006592:	2320      	movs	r3, #32
 8006594:	e003      	b.n	800659e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8006596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006598:	fab3 f383 	clz	r3, r3
 800659c:	b2db      	uxtb	r3, r3
 800659e:	3301      	adds	r3, #1
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2b09      	cmp	r3, #9
 80065a6:	bf94      	ite	ls
 80065a8:	2301      	movls	r3, #1
 80065aa:	2300      	movhi	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d079      	beq.n	80066a6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d107      	bne.n	80065ce <HAL_ADC_ConfigChannel+0x4f6>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	0e9b      	lsrs	r3, r3, #26
 80065c4:	3301      	adds	r3, #1
 80065c6:	069b      	lsls	r3, r3, #26
 80065c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065cc:	e015      	b.n	80065fa <HAL_ADC_ConfigChannel+0x522>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d6:	fa93 f3a3 	rbit	r3, r3
 80065da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80065dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065de:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80065e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80065e6:	2320      	movs	r3, #32
 80065e8:	e003      	b.n	80065f2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80065ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ec:	fab3 f383 	clz	r3, r3
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	3301      	adds	r3, #1
 80065f4:	069b      	lsls	r3, r3, #26
 80065f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_ADC_ConfigChannel+0x542>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	0e9b      	lsrs	r3, r3, #26
 800660c:	3301      	adds	r3, #1
 800660e:	f003 031f 	and.w	r3, r3, #31
 8006612:	2101      	movs	r1, #1
 8006614:	fa01 f303 	lsl.w	r3, r1, r3
 8006618:	e017      	b.n	800664a <HAL_ADC_ConfigChannel+0x572>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006622:	fa93 f3a3 	rbit	r3, r3
 8006626:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800662c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8006632:	2320      	movs	r3, #32
 8006634:	e003      	b.n	800663e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8006636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006638:	fab3 f383 	clz	r3, r3
 800663c:	b2db      	uxtb	r3, r3
 800663e:	3301      	adds	r3, #1
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	2101      	movs	r1, #1
 8006646:	fa01 f303 	lsl.w	r3, r1, r3
 800664a:	ea42 0103 	orr.w	r1, r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <HAL_ADC_ConfigChannel+0x598>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	0e9b      	lsrs	r3, r3, #26
 8006660:	3301      	adds	r3, #1
 8006662:	f003 021f 	and.w	r2, r3, #31
 8006666:	4613      	mov	r3, r2
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	4413      	add	r3, r2
 800666c:	051b      	lsls	r3, r3, #20
 800666e:	e018      	b.n	80066a2 <HAL_ADC_ConfigChannel+0x5ca>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	fa93 f3a3 	rbit	r3, r3
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8006688:	2320      	movs	r3, #32
 800668a:	e003      	b.n	8006694 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	fab3 f383 	clz	r3, r3
 8006692:	b2db      	uxtb	r3, r3
 8006694:	3301      	adds	r3, #1
 8006696:	f003 021f 	and.w	r2, r3, #31
 800669a:	4613      	mov	r3, r2
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	4413      	add	r3, r2
 80066a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066a2:	430b      	orrs	r3, r1
 80066a4:	e081      	b.n	80067aa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x5ea>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	0e9b      	lsrs	r3, r3, #26
 80066b8:	3301      	adds	r3, #1
 80066ba:	069b      	lsls	r3, r3, #26
 80066bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066c0:	e015      	b.n	80066ee <HAL_ADC_ConfigChannel+0x616>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	fa93 f3a3 	rbit	r3, r3
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80066da:	2320      	movs	r3, #32
 80066dc:	e003      	b.n	80066e6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	fab3 f383 	clz	r3, r3
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	3301      	adds	r3, #1
 80066e8:	069b      	lsls	r3, r3, #26
 80066ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <HAL_ADC_ConfigChannel+0x636>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	0e9b      	lsrs	r3, r3, #26
 8006700:	3301      	adds	r3, #1
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2101      	movs	r1, #1
 8006708:	fa01 f303 	lsl.w	r3, r1, r3
 800670c:	e017      	b.n	800673e <HAL_ADC_ConfigChannel+0x666>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	fa93 f3a3 	rbit	r3, r3
 800671a:	61fb      	str	r3, [r7, #28]
  return result;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8006726:	2320      	movs	r3, #32
 8006728:	e003      	b.n	8006732 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	fab3 f383 	clz	r3, r3
 8006730:	b2db      	uxtb	r3, r3
 8006732:	3301      	adds	r3, #1
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2101      	movs	r1, #1
 800673a:	fa01 f303 	lsl.w	r3, r1, r3
 800673e:	ea42 0103 	orr.w	r1, r2, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <HAL_ADC_ConfigChannel+0x692>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	0e9b      	lsrs	r3, r3, #26
 8006754:	3301      	adds	r3, #1
 8006756:	f003 021f 	and.w	r2, r3, #31
 800675a:	4613      	mov	r3, r2
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	4413      	add	r3, r2
 8006760:	3b1e      	subs	r3, #30
 8006762:	051b      	lsls	r3, r3, #20
 8006764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006768:	e01e      	b.n	80067a8 <HAL_ADC_ConfigChannel+0x6d0>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	fa93 f3a3 	rbit	r3, r3
 8006776:	613b      	str	r3, [r7, #16]
  return result;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d104      	bne.n	800678c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006782:	2320      	movs	r3, #32
 8006784:	e006      	b.n	8006794 <HAL_ADC_ConfigChannel+0x6bc>
 8006786:	bf00      	nop
 8006788:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	fab3 f383 	clz	r3, r3
 8006792:	b2db      	uxtb	r3, r3
 8006794:	3301      	adds	r3, #1
 8006796:	f003 021f 	and.w	r2, r3, #31
 800679a:	4613      	mov	r3, r2
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	4413      	add	r3, r2
 80067a0:	3b1e      	subs	r3, #30
 80067a2:	051b      	lsls	r3, r3, #20
 80067a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067a8:	430b      	orrs	r3, r1
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	6892      	ldr	r2, [r2, #8]
 80067ae:	4619      	mov	r1, r3
 80067b0:	f7ff fa60 	bl	8005c74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	4b44      	ldr	r3, [pc, #272]	; (80068cc <HAL_ADC_ConfigChannel+0x7f4>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d07a      	beq.n	80068b6 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067c0:	4843      	ldr	r0, [pc, #268]	; (80068d0 <HAL_ADC_ConfigChannel+0x7f8>)
 80067c2:	f7ff f9b5 	bl	8005b30 <LL_ADC_GetCommonPathInternalCh>
 80067c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a41      	ldr	r2, [pc, #260]	; (80068d4 <HAL_ADC_ConfigChannel+0x7fc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d12c      	bne.n	800682e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d126      	bne.n	800682e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a3c      	ldr	r2, [pc, #240]	; (80068d8 <HAL_ADC_ConfigChannel+0x800>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <HAL_ADC_ConfigChannel+0x71c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a3b      	ldr	r2, [pc, #236]	; (80068dc <HAL_ADC_ConfigChannel+0x804>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d15d      	bne.n	80068b0 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067fc:	4619      	mov	r1, r3
 80067fe:	4834      	ldr	r0, [pc, #208]	; (80068d0 <HAL_ADC_ConfigChannel+0x7f8>)
 8006800:	f7ff f983 	bl	8005b0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006804:	4b36      	ldr	r3, [pc, #216]	; (80068e0 <HAL_ADC_ConfigChannel+0x808>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	099b      	lsrs	r3, r3, #6
 800680a:	4a36      	ldr	r2, [pc, #216]	; (80068e4 <HAL_ADC_ConfigChannel+0x80c>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	099b      	lsrs	r3, r3, #6
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	4613      	mov	r3, r2
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800681e:	e002      	b.n	8006826 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3b01      	subs	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f9      	bne.n	8006820 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800682c:	e040      	b.n	80068b0 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2d      	ldr	r2, [pc, #180]	; (80068e8 <HAL_ADC_ConfigChannel+0x810>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d118      	bne.n	800686a <HAL_ADC_ConfigChannel+0x792>
 8006838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800683c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d112      	bne.n	800686a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a23      	ldr	r2, [pc, #140]	; (80068d8 <HAL_ADC_ConfigChannel+0x800>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_ADC_ConfigChannel+0x780>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a22      	ldr	r2, [pc, #136]	; (80068dc <HAL_ADC_ConfigChannel+0x804>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d12d      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800685c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006860:	4619      	mov	r1, r3
 8006862:	481b      	ldr	r0, [pc, #108]	; (80068d0 <HAL_ADC_ConfigChannel+0x7f8>)
 8006864:	f7ff f951 	bl	8005b0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006868:	e024      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1f      	ldr	r2, [pc, #124]	; (80068ec <HAL_ADC_ConfigChannel+0x814>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d120      	bne.n	80068b6 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11a      	bne.n	80068b6 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a14      	ldr	r2, [pc, #80]	; (80068d8 <HAL_ADC_ConfigChannel+0x800>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d115      	bne.n	80068b6 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800688a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800688e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006892:	4619      	mov	r1, r3
 8006894:	480e      	ldr	r0, [pc, #56]	; (80068d0 <HAL_ADC_ConfigChannel+0x7f8>)
 8006896:	f7ff f938 	bl	8005b0a <LL_ADC_SetCommonPathInternalCh>
 800689a:	e00c      	b.n	80068b6 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	f043 0220 	orr.w	r2, r3, #32
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80068ae:	e002      	b.n	80068b6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068b0:	bf00      	nop
 80068b2:	e000      	b.n	80068b6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80068be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	37d8      	adds	r7, #216	; 0xd8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	80080000 	.word	0x80080000
 80068d0:	50040300 	.word	0x50040300
 80068d4:	c7520000 	.word	0xc7520000
 80068d8:	50040000 	.word	0x50040000
 80068dc:	50040200 	.word	0x50040200
 80068e0:	20000000 	.word	0x20000000
 80068e4:	053e2d63 	.word	0x053e2d63
 80068e8:	cb840000 	.word	0xcb840000
 80068ec:	80000001 	.word	0x80000001

080068f0 <LL_ADC_IsEnabled>:
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <LL_ADC_IsEnabled+0x18>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <LL_ADC_IsEnabled+0x1a>
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <LL_ADC_REG_IsConversionOngoing>:
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b04      	cmp	r3, #4
 8006928:	d101      	bne.n	800692e <LL_ADC_REG_IsConversionOngoing+0x18>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b0a1      	sub	sp, #132	; 0x84
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006956:	2302      	movs	r3, #2
 8006958:	e093      	b.n	8006a82 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006962:	2300      	movs	r3, #0
 8006964:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006966:	2300      	movs	r3, #0
 8006968:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a47      	ldr	r2, [pc, #284]	; (8006a8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d102      	bne.n	800697a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006974:	4b46      	ldr	r3, [pc, #280]	; (8006a90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	e001      	b.n	800697e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10b      	bne.n	800699c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e072      	b.n	8006a82 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff ffb9 	bl	8006916 <LL_ADC_REG_IsConversionOngoing>
 80069a4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff ffb3 	bl	8006916 <LL_ADC_REG_IsConversionOngoing>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d154      	bne.n	8006a60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80069b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d151      	bne.n	8006a60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80069bc:	4b35      	ldr	r3, [pc, #212]	; (8006a94 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80069be:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d02c      	beq.n	8006a22 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80069c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	6859      	ldr	r1, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069da:	035b      	lsls	r3, r3, #13
 80069dc:	430b      	orrs	r3, r1
 80069de:	431a      	orrs	r2, r3
 80069e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069e4:	4829      	ldr	r0, [pc, #164]	; (8006a8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80069e6:	f7ff ff83 	bl	80068f0 <LL_ADC_IsEnabled>
 80069ea:	4604      	mov	r4, r0
 80069ec:	4828      	ldr	r0, [pc, #160]	; (8006a90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80069ee:	f7ff ff7f 	bl	80068f0 <LL_ADC_IsEnabled>
 80069f2:	4603      	mov	r3, r0
 80069f4:	431c      	orrs	r4, r3
 80069f6:	4828      	ldr	r0, [pc, #160]	; (8006a98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80069f8:	f7ff ff7a 	bl	80068f0 <LL_ADC_IsEnabled>
 80069fc:	4603      	mov	r3, r0
 80069fe:	4323      	orrs	r3, r4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d137      	bne.n	8006a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006a0c:	f023 030f 	bic.w	r3, r3, #15
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	6811      	ldr	r1, [r2, #0]
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	6892      	ldr	r2, [r2, #8]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a20:	e028      	b.n	8006a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a2e:	4817      	ldr	r0, [pc, #92]	; (8006a8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006a30:	f7ff ff5e 	bl	80068f0 <LL_ADC_IsEnabled>
 8006a34:	4604      	mov	r4, r0
 8006a36:	4816      	ldr	r0, [pc, #88]	; (8006a90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006a38:	f7ff ff5a 	bl	80068f0 <LL_ADC_IsEnabled>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	431c      	orrs	r4, r3
 8006a40:	4815      	ldr	r0, [pc, #84]	; (8006a98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006a42:	f7ff ff55 	bl	80068f0 <LL_ADC_IsEnabled>
 8006a46:	4603      	mov	r3, r0
 8006a48:	4323      	orrs	r3, r4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d112      	bne.n	8006a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006a56:	f023 030f 	bic.w	r3, r3, #15
 8006a5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a5e:	e009      	b.n	8006a74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a64:	f043 0220 	orr.w	r2, r3, #32
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006a72:	e000      	b.n	8006a76 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006a7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3784      	adds	r7, #132	; 0x84
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd90      	pop	{r4, r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	50040000 	.word	0x50040000
 8006a90:	50040100 	.word	0x50040100
 8006a94:	50040300 	.word	0x50040300
 8006a98:	50040200 	.word	0x50040200

08006a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aac:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	60d3      	str	r3, [r2, #12]
}
 8006ad4:	bf00      	nop
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	e000ed00 	.word	0xe000ed00

08006ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <__NVIC_GetPriorityGrouping+0x18>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	f003 0307 	and.w	r3, r3, #7
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	e000ed00 	.word	0xe000ed00

08006b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	db0b      	blt.n	8006b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	f003 021f 	and.w	r2, r3, #31
 8006b18:	4907      	ldr	r1, [pc, #28]	; (8006b38 <__NVIC_EnableIRQ+0x38>)
 8006b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	2001      	movs	r0, #1
 8006b22:	fa00 f202 	lsl.w	r2, r0, r2
 8006b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	e000e100 	.word	0xe000e100

08006b3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	db12      	blt.n	8006b74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	f003 021f 	and.w	r2, r3, #31
 8006b54:	490a      	ldr	r1, [pc, #40]	; (8006b80 <__NVIC_DisableIRQ+0x44>)
 8006b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b62:	3320      	adds	r3, #32
 8006b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b68:	f3bf 8f4f 	dsb	sy
}
 8006b6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b6e:	f3bf 8f6f 	isb	sy
}
 8006b72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	e000e100 	.word	0xe000e100

08006b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	6039      	str	r1, [r7, #0]
 8006b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	db0a      	blt.n	8006bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	490c      	ldr	r1, [pc, #48]	; (8006bd0 <__NVIC_SetPriority+0x4c>)
 8006b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba2:	0112      	lsls	r2, r2, #4
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bac:	e00a      	b.n	8006bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	4908      	ldr	r1, [pc, #32]	; (8006bd4 <__NVIC_SetPriority+0x50>)
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	3b04      	subs	r3, #4
 8006bbc:	0112      	lsls	r2, r2, #4
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	761a      	strb	r2, [r3, #24]
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	e000e100 	.word	0xe000e100
 8006bd4:	e000ed00 	.word	0xe000ed00

08006bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b089      	sub	sp, #36	; 0x24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f1c3 0307 	rsb	r3, r3, #7
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	bf28      	it	cs
 8006bf6:	2304      	movcs	r3, #4
 8006bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	2b06      	cmp	r3, #6
 8006c00:	d902      	bls.n	8006c08 <NVIC_EncodePriority+0x30>
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	3b03      	subs	r3, #3
 8006c06:	e000      	b.n	8006c0a <NVIC_EncodePriority+0x32>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	43da      	mvns	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2a:	43d9      	mvns	r1, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c30:	4313      	orrs	r3, r2
         );
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3724      	adds	r7, #36	; 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c50:	d301      	bcc.n	8006c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c52:	2301      	movs	r3, #1
 8006c54:	e00f      	b.n	8006c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c56:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <SysTick_Config+0x40>)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c5e:	210f      	movs	r1, #15
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c64:	f7ff ff8e 	bl	8006b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <SysTick_Config+0x40>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c6e:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <SysTick_Config+0x40>)
 8006c70:	2207      	movs	r2, #7
 8006c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	e000e010 	.word	0xe000e010

08006c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff05 	bl	8006a9c <__NVIC_SetPriorityGrouping>
}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006cac:	f7ff ff1a 	bl	8006ae4 <__NVIC_GetPriorityGrouping>
 8006cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	6978      	ldr	r0, [r7, #20]
 8006cb8:	f7ff ff8e 	bl	8006bd8 <NVIC_EncodePriority>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff ff5d 	bl	8006b84 <__NVIC_SetPriority>
}
 8006cca:	bf00      	nop
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	4603      	mov	r3, r0
 8006cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff ff0d 	bl	8006b00 <__NVIC_EnableIRQ>
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff ff1d 	bl	8006b3c <__NVIC_DisableIRQ>
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff ff94 	bl	8006c40 <SysTick_Config>
 8006d18:	4603      	mov	r3, r0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e075      	b.n	8006e22 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fa fd0e 	bl	800176c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d66:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6819      	ldr	r1, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	4b2a      	ldr	r3, [pc, #168]	; (8006e2c <HAL_DCMI_Init+0x108>)
 8006d82:	400b      	ands	r3, r1
 8006d84:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6819      	ldr	r1, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8006d9a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8006da6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8006db2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006dbe:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006dca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d112      	bne.n	8006e02 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	7f1b      	ldrb	r3, [r3, #28]
 8006de0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	7f5b      	ldrb	r3, [r3, #29]
 8006de6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006de8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7f9b      	ldrb	r3, [r3, #30]
 8006dee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8006df0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	7fdb      	ldrb	r3, [r3, #31]
 8006df8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8006dfe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006e00:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 021f 	orr.w	r2, r2, #31
 8006e10:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	ffe0f007 	.word	0xffe0f007

08006e30 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e0ac      	b.n	8006f9c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f8b2 	bl	8006fb0 <DFSDM_GetChannelFromInstance>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4a55      	ldr	r2, [pc, #340]	; (8006fa4 <HAL_DFSDM_ChannelInit+0x174>)
 8006e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e09f      	b.n	8006f9c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fa fd05 	bl	800186c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8006e62:	4b51      	ldr	r3, [pc, #324]	; (8006fa8 <HAL_DFSDM_ChannelInit+0x178>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3301      	adds	r3, #1
 8006e68:	4a4f      	ldr	r2, [pc, #316]	; (8006fa8 <HAL_DFSDM_ChannelInit+0x178>)
 8006e6a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8006e6c:	4b4e      	ldr	r3, [pc, #312]	; (8006fa8 <HAL_DFSDM_ChannelInit+0x178>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d125      	bne.n	8006ec0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8006e74:	4b4d      	ldr	r3, [pc, #308]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a4c      	ldr	r2, [pc, #304]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006e7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e7e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8006e80:	4b4a      	ldr	r3, [pc, #296]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	4948      	ldr	r1, [pc, #288]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8006e8e:	4b47      	ldr	r3, [pc, #284]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a46      	ldr	r2, [pc, #280]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006e94:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006e98:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d108      	bne.n	8006eb4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8006ea2:	4b42      	ldr	r3, [pc, #264]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	493f      	ldr	r1, [pc, #252]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8006eb4:	4b3d      	ldr	r3, [pc, #244]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a3c      	ldr	r2, [pc, #240]	; (8006fac <HAL_DFSDM_ChannelInit+0x17c>)
 8006eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ebe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8006ece:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6819      	ldr	r1, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006ede:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006ee4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 020f 	bic.w	r2, r2, #15
 8006efc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8006f24:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6899      	ldr	r1, [r3, #8]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	3b01      	subs	r3, #1
 8006f36:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f002 0207 	and.w	r2, r2, #7
 8006f50:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6859      	ldr	r1, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f7c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f810 	bl	8006fb0 <DFSDM_GetChannelFromInstance>
 8006f90:	4602      	mov	r2, r0
 8006f92:	4904      	ldr	r1, [pc, #16]	; (8006fa4 <HAL_DFSDM_ChannelInit+0x174>)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000c5c 	.word	0x20000c5c
 8006fa8:	20000c58 	.word	0x20000c58
 8006fac:	40016000 	.word	0x40016000

08006fb0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a1c      	ldr	r2, [pc, #112]	; (800702c <DFSDM_GetChannelFromInstance+0x7c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d102      	bne.n	8006fc6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e02b      	b.n	800701e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a19      	ldr	r2, [pc, #100]	; (8007030 <DFSDM_GetChannelFromInstance+0x80>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d102      	bne.n	8006fd4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e024      	b.n	800701e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a17      	ldr	r2, [pc, #92]	; (8007034 <DFSDM_GetChannelFromInstance+0x84>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d102      	bne.n	8006fe2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e01d      	b.n	800701e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a14      	ldr	r2, [pc, #80]	; (8007038 <DFSDM_GetChannelFromInstance+0x88>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d102      	bne.n	8006ff0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8006fea:	2304      	movs	r3, #4
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e016      	b.n	800701e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a12      	ldr	r2, [pc, #72]	; (800703c <DFSDM_GetChannelFromInstance+0x8c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d102      	bne.n	8006ffe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8006ff8:	2305      	movs	r3, #5
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e00f      	b.n	800701e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a0f      	ldr	r2, [pc, #60]	; (8007040 <DFSDM_GetChannelFromInstance+0x90>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d102      	bne.n	800700c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8007006:	2306      	movs	r3, #6
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e008      	b.n	800701e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a0d      	ldr	r2, [pc, #52]	; (8007044 <DFSDM_GetChannelFromInstance+0x94>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d102      	bne.n	800701a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8007014:	2307      	movs	r3, #7
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e001      	b.n	800701e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800701a:	2303      	movs	r3, #3
 800701c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800701e:	68fb      	ldr	r3, [r7, #12]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	40016000 	.word	0x40016000
 8007030:	40016020 	.word	0x40016020
 8007034:	40016040 	.word	0x40016040
 8007038:	40016080 	.word	0x40016080
 800703c:	400160a0 	.word	0x400160a0
 8007040:	400160c0 	.word	0x400160c0
 8007044:	400160e0 	.word	0x400160e0

08007048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007056:	e166      	b.n	8007326 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	2101      	movs	r1, #1
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	fa01 f303 	lsl.w	r3, r1, r3
 8007064:	4013      	ands	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8158 	beq.w	8007320 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	2b01      	cmp	r3, #1
 800707a:	d005      	beq.n	8007088 <HAL_GPIO_Init+0x40>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d130      	bne.n	80070ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	2203      	movs	r2, #3
 8007094:	fa02 f303 	lsl.w	r3, r2, r3
 8007098:	43db      	mvns	r3, r3
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4013      	ands	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070be:	2201      	movs	r2, #1
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43db      	mvns	r3, r3
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4013      	ands	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	091b      	lsrs	r3, r3, #4
 80070d4:	f003 0201 	and.w	r2, r3, #1
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d017      	beq.n	8007126 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	2203      	movs	r2, #3
 8007102:	fa02 f303 	lsl.w	r3, r2, r3
 8007106:	43db      	mvns	r3, r3
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4013      	ands	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d123      	bne.n	800717a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	08da      	lsrs	r2, r3, #3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3208      	adds	r2, #8
 800713a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	220f      	movs	r2, #15
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	43db      	mvns	r3, r3
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4013      	ands	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	08da      	lsrs	r2, r3, #3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3208      	adds	r2, #8
 8007174:	6939      	ldr	r1, [r7, #16]
 8007176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	2203      	movs	r2, #3
 8007186:	fa02 f303 	lsl.w	r3, r2, r3
 800718a:	43db      	mvns	r3, r3
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4013      	ands	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f003 0203 	and.w	r2, r3, #3
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 80b2 	beq.w	8007320 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071bc:	4b61      	ldr	r3, [pc, #388]	; (8007344 <HAL_GPIO_Init+0x2fc>)
 80071be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c0:	4a60      	ldr	r2, [pc, #384]	; (8007344 <HAL_GPIO_Init+0x2fc>)
 80071c2:	f043 0301 	orr.w	r3, r3, #1
 80071c6:	6613      	str	r3, [r2, #96]	; 0x60
 80071c8:	4b5e      	ldr	r3, [pc, #376]	; (8007344 <HAL_GPIO_Init+0x2fc>)
 80071ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80071d4:	4a5c      	ldr	r2, [pc, #368]	; (8007348 <HAL_GPIO_Init+0x300>)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	089b      	lsrs	r3, r3, #2
 80071da:	3302      	adds	r3, #2
 80071dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	220f      	movs	r2, #15
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	43db      	mvns	r3, r3
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4013      	ands	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80071fe:	d02b      	beq.n	8007258 <HAL_GPIO_Init+0x210>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a52      	ldr	r2, [pc, #328]	; (800734c <HAL_GPIO_Init+0x304>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d025      	beq.n	8007254 <HAL_GPIO_Init+0x20c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a51      	ldr	r2, [pc, #324]	; (8007350 <HAL_GPIO_Init+0x308>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d01f      	beq.n	8007250 <HAL_GPIO_Init+0x208>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a50      	ldr	r2, [pc, #320]	; (8007354 <HAL_GPIO_Init+0x30c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d019      	beq.n	800724c <HAL_GPIO_Init+0x204>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a4f      	ldr	r2, [pc, #316]	; (8007358 <HAL_GPIO_Init+0x310>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <HAL_GPIO_Init+0x200>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a4e      	ldr	r2, [pc, #312]	; (800735c <HAL_GPIO_Init+0x314>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00d      	beq.n	8007244 <HAL_GPIO_Init+0x1fc>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a4d      	ldr	r2, [pc, #308]	; (8007360 <HAL_GPIO_Init+0x318>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <HAL_GPIO_Init+0x1f8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a4c      	ldr	r2, [pc, #304]	; (8007364 <HAL_GPIO_Init+0x31c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d101      	bne.n	800723c <HAL_GPIO_Init+0x1f4>
 8007238:	2307      	movs	r3, #7
 800723a:	e00e      	b.n	800725a <HAL_GPIO_Init+0x212>
 800723c:	2308      	movs	r3, #8
 800723e:	e00c      	b.n	800725a <HAL_GPIO_Init+0x212>
 8007240:	2306      	movs	r3, #6
 8007242:	e00a      	b.n	800725a <HAL_GPIO_Init+0x212>
 8007244:	2305      	movs	r3, #5
 8007246:	e008      	b.n	800725a <HAL_GPIO_Init+0x212>
 8007248:	2304      	movs	r3, #4
 800724a:	e006      	b.n	800725a <HAL_GPIO_Init+0x212>
 800724c:	2303      	movs	r3, #3
 800724e:	e004      	b.n	800725a <HAL_GPIO_Init+0x212>
 8007250:	2302      	movs	r3, #2
 8007252:	e002      	b.n	800725a <HAL_GPIO_Init+0x212>
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <HAL_GPIO_Init+0x212>
 8007258:	2300      	movs	r3, #0
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	f002 0203 	and.w	r2, r2, #3
 8007260:	0092      	lsls	r2, r2, #2
 8007262:	4093      	lsls	r3, r2
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800726a:	4937      	ldr	r1, [pc, #220]	; (8007348 <HAL_GPIO_Init+0x300>)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	089b      	lsrs	r3, r3, #2
 8007270:	3302      	adds	r3, #2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007278:	4b3b      	ldr	r3, [pc, #236]	; (8007368 <HAL_GPIO_Init+0x320>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	43db      	mvns	r3, r3
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4013      	ands	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800729c:	4a32      	ldr	r2, [pc, #200]	; (8007368 <HAL_GPIO_Init+0x320>)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80072a2:	4b31      	ldr	r3, [pc, #196]	; (8007368 <HAL_GPIO_Init+0x320>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	43db      	mvns	r3, r3
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4013      	ands	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80072c6:	4a28      	ldr	r2, [pc, #160]	; (8007368 <HAL_GPIO_Init+0x320>)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80072cc:	4b26      	ldr	r3, [pc, #152]	; (8007368 <HAL_GPIO_Init+0x320>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	43db      	mvns	r3, r3
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4013      	ands	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80072f0:	4a1d      	ldr	r2, [pc, #116]	; (8007368 <HAL_GPIO_Init+0x320>)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80072f6:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <HAL_GPIO_Init+0x320>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	43db      	mvns	r3, r3
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4013      	ands	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800731a:	4a13      	ldr	r2, [pc, #76]	; (8007368 <HAL_GPIO_Init+0x320>)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	3301      	adds	r3, #1
 8007324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	fa22 f303 	lsr.w	r3, r2, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	f47f ae91 	bne.w	8007058 <HAL_GPIO_Init+0x10>
  }
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40021000 	.word	0x40021000
 8007348:	40010000 	.word	0x40010000
 800734c:	48000400 	.word	0x48000400
 8007350:	48000800 	.word	0x48000800
 8007354:	48000c00 	.word	0x48000c00
 8007358:	48001000 	.word	0x48001000
 800735c:	48001400 	.word	0x48001400
 8007360:	48001800 	.word	0x48001800
 8007364:	48001c00 	.word	0x48001c00
 8007368:	40010400 	.word	0x40010400

0800736c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800737a:	e0c9      	b.n	8007510 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800737c:	2201      	movs	r2, #1
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	4013      	ands	r3, r2
 8007388:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80bc 	beq.w	800750a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007392:	4a66      	ldr	r2, [pc, #408]	; (800752c <HAL_GPIO_DeInit+0x1c0>)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	089b      	lsrs	r3, r3, #2
 8007398:	3302      	adds	r3, #2
 800739a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800739e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	220f      	movs	r2, #15
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4013      	ands	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073ba:	d02b      	beq.n	8007414 <HAL_GPIO_DeInit+0xa8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a5c      	ldr	r2, [pc, #368]	; (8007530 <HAL_GPIO_DeInit+0x1c4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d025      	beq.n	8007410 <HAL_GPIO_DeInit+0xa4>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a5b      	ldr	r2, [pc, #364]	; (8007534 <HAL_GPIO_DeInit+0x1c8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d01f      	beq.n	800740c <HAL_GPIO_DeInit+0xa0>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a5a      	ldr	r2, [pc, #360]	; (8007538 <HAL_GPIO_DeInit+0x1cc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d019      	beq.n	8007408 <HAL_GPIO_DeInit+0x9c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a59      	ldr	r2, [pc, #356]	; (800753c <HAL_GPIO_DeInit+0x1d0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <HAL_GPIO_DeInit+0x98>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a58      	ldr	r2, [pc, #352]	; (8007540 <HAL_GPIO_DeInit+0x1d4>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00d      	beq.n	8007400 <HAL_GPIO_DeInit+0x94>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a57      	ldr	r2, [pc, #348]	; (8007544 <HAL_GPIO_DeInit+0x1d8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d007      	beq.n	80073fc <HAL_GPIO_DeInit+0x90>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a56      	ldr	r2, [pc, #344]	; (8007548 <HAL_GPIO_DeInit+0x1dc>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d101      	bne.n	80073f8 <HAL_GPIO_DeInit+0x8c>
 80073f4:	2307      	movs	r3, #7
 80073f6:	e00e      	b.n	8007416 <HAL_GPIO_DeInit+0xaa>
 80073f8:	2308      	movs	r3, #8
 80073fa:	e00c      	b.n	8007416 <HAL_GPIO_DeInit+0xaa>
 80073fc:	2306      	movs	r3, #6
 80073fe:	e00a      	b.n	8007416 <HAL_GPIO_DeInit+0xaa>
 8007400:	2305      	movs	r3, #5
 8007402:	e008      	b.n	8007416 <HAL_GPIO_DeInit+0xaa>
 8007404:	2304      	movs	r3, #4
 8007406:	e006      	b.n	8007416 <HAL_GPIO_DeInit+0xaa>
 8007408:	2303      	movs	r3, #3
 800740a:	e004      	b.n	8007416 <HAL_GPIO_DeInit+0xaa>
 800740c:	2302      	movs	r3, #2
 800740e:	e002      	b.n	8007416 <HAL_GPIO_DeInit+0xaa>
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <HAL_GPIO_DeInit+0xaa>
 8007414:	2300      	movs	r3, #0
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	f002 0203 	and.w	r2, r2, #3
 800741c:	0092      	lsls	r2, r2, #2
 800741e:	4093      	lsls	r3, r2
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	429a      	cmp	r2, r3
 8007424:	d132      	bne.n	800748c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007426:	4b49      	ldr	r3, [pc, #292]	; (800754c <HAL_GPIO_DeInit+0x1e0>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	43db      	mvns	r3, r3
 800742e:	4947      	ldr	r1, [pc, #284]	; (800754c <HAL_GPIO_DeInit+0x1e0>)
 8007430:	4013      	ands	r3, r2
 8007432:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007434:	4b45      	ldr	r3, [pc, #276]	; (800754c <HAL_GPIO_DeInit+0x1e0>)
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	43db      	mvns	r3, r3
 800743c:	4943      	ldr	r1, [pc, #268]	; (800754c <HAL_GPIO_DeInit+0x1e0>)
 800743e:	4013      	ands	r3, r2
 8007440:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007442:	4b42      	ldr	r3, [pc, #264]	; (800754c <HAL_GPIO_DeInit+0x1e0>)
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	43db      	mvns	r3, r3
 800744a:	4940      	ldr	r1, [pc, #256]	; (800754c <HAL_GPIO_DeInit+0x1e0>)
 800744c:	4013      	ands	r3, r2
 800744e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007450:	4b3e      	ldr	r3, [pc, #248]	; (800754c <HAL_GPIO_DeInit+0x1e0>)
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	43db      	mvns	r3, r3
 8007458:	493c      	ldr	r1, [pc, #240]	; (800754c <HAL_GPIO_DeInit+0x1e0>)
 800745a:	4013      	ands	r3, r2
 800745c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	220f      	movs	r2, #15
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800746e:	4a2f      	ldr	r2, [pc, #188]	; (800752c <HAL_GPIO_DeInit+0x1c0>)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	3302      	adds	r3, #2
 8007476:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	43da      	mvns	r2, r3
 800747e:	482b      	ldr	r0, [pc, #172]	; (800752c <HAL_GPIO_DeInit+0x1c0>)
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	089b      	lsrs	r3, r3, #2
 8007484:	400a      	ands	r2, r1
 8007486:	3302      	adds	r3, #2
 8007488:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	2103      	movs	r1, #3
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	08da      	lsrs	r2, r3, #3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3208      	adds	r2, #8
 80074a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	220f      	movs	r2, #15
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43db      	mvns	r3, r3
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	08d2      	lsrs	r2, r2, #3
 80074c0:	4019      	ands	r1, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3208      	adds	r2, #8
 80074c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	2103      	movs	r1, #3
 80074d4:	fa01 f303 	lsl.w	r3, r1, r3
 80074d8:	43db      	mvns	r3, r3
 80074da:	401a      	ands	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	2101      	movs	r1, #1
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ec:	43db      	mvns	r3, r3
 80074ee:	401a      	ands	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	2103      	movs	r1, #3
 80074fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007502:	43db      	mvns	r3, r3
 8007504:	401a      	ands	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	3301      	adds	r3, #1
 800750e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	fa22 f303 	lsr.w	r3, r2, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	f47f af2f 	bne.w	800737c <HAL_GPIO_DeInit+0x10>
  }
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40010000 	.word	0x40010000
 8007530:	48000400 	.word	0x48000400
 8007534:	48000800 	.word	0x48000800
 8007538:	48000c00 	.word	0x48000c00
 800753c:	48001000 	.word	0x48001000
 8007540:	48001400 	.word	0x48001400
 8007544:	48001800 	.word	0x48001800
 8007548:	48001c00 	.word	0x48001c00
 800754c:	40010400 	.word	0x40010400

08007550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	807b      	strh	r3, [r7, #2]
 800755c:	4613      	mov	r3, r2
 800755e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007560:	787b      	ldrb	r3, [r7, #1]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007566:	887a      	ldrh	r2, [r7, #2]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800756c:	e002      	b.n	8007574 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800756e:	887a      	ldrh	r2, [r7, #2]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e081      	b.n	8007696 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fa f9e8 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2224      	movs	r2, #36	; 0x24
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0201 	bic.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d107      	bne.n	80075fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	e006      	b.n	8007608 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007606:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d104      	bne.n	800761a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007618:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800763c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	69d9      	ldr	r1, [r3, #28]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a1a      	ldr	r2, [r3, #32]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e021      	b.n	80076f4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2224      	movs	r2, #36	; 0x24
 80076b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fa fa1d 	bl	8001b08 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	461a      	mov	r2, r3
 800770a:	4603      	mov	r3, r0
 800770c:	817b      	strh	r3, [r7, #10]
 800770e:	460b      	mov	r3, r1
 8007710:	813b      	strh	r3, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b20      	cmp	r3, #32
 8007720:	f040 80f9 	bne.w	8007916 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_I2C_Mem_Write+0x34>
 800772a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800772c:	2b00      	cmp	r3, #0
 800772e:	d105      	bne.n	800773c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007736:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e0ed      	b.n	8007918 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_I2C_Mem_Write+0x4e>
 8007746:	2302      	movs	r3, #2
 8007748:	e0e6      	b.n	8007918 <HAL_I2C_Mem_Write+0x21c>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007752:	f7fe f997 	bl	8005a84 <HAL_GetTick>
 8007756:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	2319      	movs	r3, #25
 800775e:	2201      	movs	r2, #1
 8007760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fbd9 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0d1      	b.n	8007918 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2221      	movs	r2, #33	; 0x21
 8007778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2240      	movs	r2, #64	; 0x40
 8007780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a3a      	ldr	r2, [r7, #32]
 800778e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007794:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800779c:	88f8      	ldrh	r0, [r7, #6]
 800779e:	893a      	ldrh	r2, [r7, #8]
 80077a0:	8979      	ldrh	r1, [r7, #10]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	4603      	mov	r3, r0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fae9 	bl	8007d84 <I2C_RequestMemoryWrite>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e0a9      	b.n	8007918 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	2bff      	cmp	r3, #255	; 0xff
 80077cc:	d90e      	bls.n	80077ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	22ff      	movs	r2, #255	; 0xff
 80077d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	8979      	ldrh	r1, [r7, #10]
 80077dc:	2300      	movs	r3, #0
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fd41 	bl	800826c <I2C_TransferConfig>
 80077ea:	e00f      	b.n	800780c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	8979      	ldrh	r1, [r7, #10]
 80077fe:	2300      	movs	r3, #0
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fd30 	bl	800826c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fbc3 	bl	8007f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e07b      	b.n	8007918 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783a:	b29b      	uxth	r3, r3
 800783c:	3b01      	subs	r3, #1
 800783e:	b29a      	uxth	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d034      	beq.n	80078c4 <HAL_I2C_Mem_Write+0x1c8>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800785e:	2b00      	cmp	r3, #0
 8007860:	d130      	bne.n	80078c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	2200      	movs	r2, #0
 800786a:	2180      	movs	r1, #128	; 0x80
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 fb55 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e04d      	b.n	8007918 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007880:	b29b      	uxth	r3, r3
 8007882:	2bff      	cmp	r3, #255	; 0xff
 8007884:	d90e      	bls.n	80078a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	22ff      	movs	r2, #255	; 0xff
 800788a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007890:	b2da      	uxtb	r2, r3
 8007892:	8979      	ldrh	r1, [r7, #10]
 8007894:	2300      	movs	r3, #0
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fce5 	bl	800826c <I2C_TransferConfig>
 80078a2:	e00f      	b.n	80078c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	8979      	ldrh	r1, [r7, #10]
 80078b6:	2300      	movs	r3, #0
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fcd4 	bl	800826c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d19e      	bne.n	800780c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fba2 	bl	800801c <I2C_WaitOnSTOPFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e01a      	b.n	8007918 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2220      	movs	r2, #32
 80078e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6859      	ldr	r1, [r3, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <HAL_I2C_Mem_Write+0x224>)
 80078f6:	400b      	ands	r3, r1
 80078f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	e000      	b.n	8007918 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007916:	2302      	movs	r3, #2
  }
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	fe00e800 	.word	0xfe00e800

08007924 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	4608      	mov	r0, r1
 800792e:	4611      	mov	r1, r2
 8007930:	461a      	mov	r2, r3
 8007932:	4603      	mov	r3, r0
 8007934:	817b      	strh	r3, [r7, #10]
 8007936:	460b      	mov	r3, r1
 8007938:	813b      	strh	r3, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b20      	cmp	r3, #32
 8007948:	f040 80fd 	bne.w	8007b46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_I2C_Mem_Read+0x34>
 8007952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	d105      	bne.n	8007964 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800795e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e0f1      	b.n	8007b48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_I2C_Mem_Read+0x4e>
 800796e:	2302      	movs	r3, #2
 8007970:	e0ea      	b.n	8007b48 <HAL_I2C_Mem_Read+0x224>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800797a:	f7fe f883 	bl	8005a84 <HAL_GetTick>
 800797e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	2319      	movs	r3, #25
 8007986:	2201      	movs	r2, #1
 8007988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fac5 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e0d5      	b.n	8007b48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2222      	movs	r2, #34	; 0x22
 80079a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2240      	movs	r2, #64	; 0x40
 80079a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a3a      	ldr	r2, [r7, #32]
 80079b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079c4:	88f8      	ldrh	r0, [r7, #6]
 80079c6:	893a      	ldrh	r2, [r7, #8]
 80079c8:	8979      	ldrh	r1, [r7, #10]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	4603      	mov	r3, r0
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fa29 	bl	8007e2c <I2C_RequestMemoryRead>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0ad      	b.n	8007b48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2bff      	cmp	r3, #255	; 0xff
 80079f4:	d90e      	bls.n	8007a14 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	22ff      	movs	r2, #255	; 0xff
 80079fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	8979      	ldrh	r1, [r7, #10]
 8007a04:	4b52      	ldr	r3, [pc, #328]	; (8007b50 <HAL_I2C_Mem_Read+0x22c>)
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fc2d 	bl	800826c <I2C_TransferConfig>
 8007a12:	e00f      	b.n	8007a34 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	8979      	ldrh	r1, [r7, #10]
 8007a26:	4b4a      	ldr	r3, [pc, #296]	; (8007b50 <HAL_I2C_Mem_Read+0x22c>)
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 fc1c 	bl	800826c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2104      	movs	r1, #4
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 fa6c 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e07c      	b.n	8007b48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d034      	beq.n	8007af4 <HAL_I2C_Mem_Read+0x1d0>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d130      	bne.n	8007af4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2180      	movs	r1, #128	; 0x80
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 fa3d 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e04d      	b.n	8007b48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2bff      	cmp	r3, #255	; 0xff
 8007ab4:	d90e      	bls.n	8007ad4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	22ff      	movs	r2, #255	; 0xff
 8007aba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	8979      	ldrh	r1, [r7, #10]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fbcd 	bl	800826c <I2C_TransferConfig>
 8007ad2:	e00f      	b.n	8007af4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	8979      	ldrh	r1, [r7, #10]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fbbc 	bl	800826c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d19a      	bne.n	8007a34 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fa8a 	bl	800801c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e01a      	b.n	8007b48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2220      	movs	r2, #32
 8007b18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6859      	ldr	r1, [r3, #4]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <HAL_I2C_Mem_Read+0x230>)
 8007b26:	400b      	ands	r3, r1
 8007b28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e000      	b.n	8007b48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007b46:	2302      	movs	r3, #2
  }
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	80002400 	.word	0x80002400
 8007b54:	fe00e800 	.word	0xfe00e800

08007b58 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	460b      	mov	r3, r1
 8007b66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	f040 80f1 	bne.w	8007d5c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b88:	d101      	bne.n	8007b8e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e0e7      	b.n	8007d5e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_I2C_IsDeviceReady+0x44>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0e0      	b.n	8007d5e <HAL_I2C_IsDeviceReady+0x206>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2224      	movs	r2, #36	; 0x24
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d107      	bne.n	8007bca <HAL_I2C_IsDeviceReady+0x72>
 8007bba:	897b      	ldrh	r3, [r7, #10]
 8007bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007bc8:	e004      	b.n	8007bd4 <HAL_I2C_IsDeviceReady+0x7c>
 8007bca:	897b      	ldrh	r3, [r7, #10]
 8007bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bd0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	6812      	ldr	r2, [r2, #0]
 8007bd8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007bda:	f7fd ff53 	bl	8005a84 <HAL_GetTick>
 8007bde:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	bf0c      	ite	eq
 8007bee:	2301      	moveq	r3, #1
 8007bf0:	2300      	movne	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	f003 0310 	and.w	r3, r3, #16
 8007c00:	2b10      	cmp	r3, #16
 8007c02:	bf0c      	ite	eq
 8007c04:	2301      	moveq	r3, #1
 8007c06:	2300      	movne	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007c0c:	e034      	b.n	8007c78 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c14:	d01a      	beq.n	8007c4c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c16:	f7fd ff35 	bl	8005a84 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d302      	bcc.n	8007c2c <HAL_I2C_IsDeviceReady+0xd4>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10f      	bne.n	8007c4c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c38:	f043 0220 	orr.w	r2, r3, #32
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e088      	b.n	8007d5e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b20      	cmp	r3, #32
 8007c58:	bf0c      	ite	eq
 8007c5a:	2301      	moveq	r3, #1
 8007c5c:	2300      	movne	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b10      	cmp	r3, #16
 8007c6e:	bf0c      	ite	eq
 8007c70:	2301      	moveq	r3, #1
 8007c72:	2300      	movne	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007c78:	7ffb      	ldrb	r3, [r7, #31]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <HAL_I2C_IsDeviceReady+0x12c>
 8007c7e:	7fbb      	ldrb	r3, [r7, #30]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0c4      	beq.n	8007c0e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b10      	cmp	r3, #16
 8007c90:	d01a      	beq.n	8007cc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2120      	movs	r1, #32
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f93d 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e058      	b.n	8007d5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	e04a      	b.n	8007d5e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2120      	movs	r1, #32
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f922 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e03d      	b.n	8007d5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d118      	bne.n	8007d2c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d08:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2200      	movs	r2, #0
 8007d12:	2120      	movs	r1, #32
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f901 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e01c      	b.n	8007d5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	f63f af3b 	bhi.w	8007bb2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d48:	f043 0220 	orr.w	r2, r3, #32
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007d5c:	2302      	movs	r3, #2
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3720      	adds	r7, #32
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d74:	b2db      	uxtb	r3, r3
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	817b      	strh	r3, [r7, #10]
 8007d96:	460b      	mov	r3, r1
 8007d98:	813b      	strh	r3, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	8979      	ldrh	r1, [r7, #10]
 8007da4:	4b20      	ldr	r3, [pc, #128]	; (8007e28 <I2C_RequestMemoryWrite+0xa4>)
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fa5d 	bl	800826c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	69b9      	ldr	r1, [r7, #24]
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f8f0 	bl	8007f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e02c      	b.n	8007e20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d105      	bne.n	8007dd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dcc:	893b      	ldrh	r3, [r7, #8]
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	629a      	str	r2, [r3, #40]	; 0x28
 8007dd6:	e015      	b.n	8007e04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007dd8:	893b      	ldrh	r3, [r7, #8]
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	69b9      	ldr	r1, [r7, #24]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f8d6 	bl	8007f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e012      	b.n	8007e20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dfa:	893b      	ldrh	r3, [r7, #8]
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2180      	movs	r1, #128	; 0x80
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f884 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	80002000 	.word	0x80002000

08007e2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	4608      	mov	r0, r1
 8007e36:	4611      	mov	r1, r2
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	817b      	strh	r3, [r7, #10]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	813b      	strh	r3, [r7, #8]
 8007e42:	4613      	mov	r3, r2
 8007e44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	8979      	ldrh	r1, [r7, #10]
 8007e4c:	4b20      	ldr	r3, [pc, #128]	; (8007ed0 <I2C_RequestMemoryRead+0xa4>)
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2300      	movs	r3, #0
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fa0a 	bl	800826c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	69b9      	ldr	r1, [r7, #24]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f89d 	bl	8007f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e02c      	b.n	8007ec6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e6c:	88fb      	ldrh	r3, [r7, #6]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d105      	bne.n	8007e7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e72:	893b      	ldrh	r3, [r7, #8]
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8007e7c:	e015      	b.n	8007eaa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007e7e:	893b      	ldrh	r3, [r7, #8]
 8007e80:	0a1b      	lsrs	r3, r3, #8
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	69b9      	ldr	r1, [r7, #24]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f883 	bl	8007f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e012      	b.n	8007ec6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ea0:	893b      	ldrh	r3, [r7, #8]
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2140      	movs	r1, #64	; 0x40
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f831 	bl	8007f1c <I2C_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	80002000 	.word	0x80002000

08007ed4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d103      	bne.n	8007ef2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d007      	beq.n	8007f10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0201 	orr.w	r2, r2, #1
 8007f0e:	619a      	str	r2, [r3, #24]
  }
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f2c:	e022      	b.n	8007f74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f34:	d01e      	beq.n	8007f74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f36:	f7fd fda5 	bl	8005a84 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d302      	bcc.n	8007f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d113      	bne.n	8007f74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f50:	f043 0220 	orr.w	r2, r3, #32
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e00f      	b.n	8007f94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	bf0c      	ite	eq
 8007f84:	2301      	moveq	r3, #1
 8007f86:	2300      	movne	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d0cd      	beq.n	8007f2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fa8:	e02c      	b.n	8008004 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f870 	bl	8008094 <I2C_IsErrorOccurred>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e02a      	b.n	8008014 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fc4:	d01e      	beq.n	8008004 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc6:	f7fd fd5d 	bl	8005a84 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d302      	bcc.n	8007fdc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d113      	bne.n	8008004 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe0:	f043 0220 	orr.w	r2, r3, #32
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e007      	b.n	8008014 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b02      	cmp	r3, #2
 8008010:	d1cb      	bne.n	8007faa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008028:	e028      	b.n	800807c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 f830 	bl	8008094 <I2C_IsErrorOccurred>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e026      	b.n	800808c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803e:	f7fd fd21 	bl	8005a84 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	429a      	cmp	r2, r3
 800804c:	d302      	bcc.n	8008054 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d113      	bne.n	800807c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008058:	f043 0220 	orr.w	r2, r3, #32
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e007      	b.n	800808c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b20      	cmp	r3, #32
 8008088:	d1cf      	bne.n	800802a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	; 0x28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d075      	beq.n	80081ac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2210      	movs	r2, #16
 80080c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80080c8:	e056      	b.n	8008178 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d0:	d052      	beq.n	8008178 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80080d2:	f7fd fcd7 	bl	8005a84 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d302      	bcc.n	80080e8 <I2C_IsErrorOccurred+0x54>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d147      	bne.n	8008178 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800810a:	d12e      	bne.n	800816a <I2C_IsErrorOccurred+0xd6>
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008112:	d02a      	beq.n	800816a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008114:	7cfb      	ldrb	r3, [r7, #19]
 8008116:	2b20      	cmp	r3, #32
 8008118:	d027      	beq.n	800816a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008128:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800812a:	f7fd fcab 	bl	8005a84 <HAL_GetTick>
 800812e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008130:	e01b      	b.n	800816a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008132:	f7fd fca7 	bl	8005a84 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b19      	cmp	r3, #25
 800813e:	d914      	bls.n	800816a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008144:	f043 0220 	orr.w	r2, r3, #32
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2220      	movs	r2, #32
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f003 0320 	and.w	r3, r3, #32
 8008174:	2b20      	cmp	r3, #32
 8008176:	d1dc      	bne.n	8008132 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b20      	cmp	r3, #32
 8008184:	d003      	beq.n	800818e <I2C_IsErrorOccurred+0xfa>
 8008186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800818a:	2b00      	cmp	r3, #0
 800818c:	d09d      	beq.n	80080ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800818e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008192:	2b00      	cmp	r3, #0
 8008194:	d103      	bne.n	800819e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2220      	movs	r2, #32
 800819c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	f043 0304 	orr.w	r3, r3, #4
 80081a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	f043 0301 	orr.w	r3, r3, #1
 80081c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	f043 0308 	orr.w	r3, r3, #8
 80081e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00b      	beq.n	800821a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	f043 0302 	orr.w	r3, r3, #2
 8008208:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800821a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01c      	beq.n	800825c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff fe56 	bl	8007ed4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6859      	ldr	r1, [r3, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b0d      	ldr	r3, [pc, #52]	; (8008268 <I2C_IsErrorOccurred+0x1d4>)
 8008234:	400b      	ands	r3, r1
 8008236:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	431a      	orrs	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800825c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008260:	4618      	mov	r0, r3
 8008262:	3728      	adds	r7, #40	; 0x28
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	fe00e800 	.word	0xfe00e800

0800826c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	607b      	str	r3, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	817b      	strh	r3, [r7, #10]
 800827a:	4613      	mov	r3, r2
 800827c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800827e:	897b      	ldrh	r3, [r7, #10]
 8008280:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008284:	7a7b      	ldrb	r3, [r7, #9]
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800828c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	4313      	orrs	r3, r2
 8008296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800829a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	0d5b      	lsrs	r3, r3, #21
 80082a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80082aa:	4b08      	ldr	r3, [pc, #32]	; (80082cc <I2C_TransferConfig+0x60>)
 80082ac:	430b      	orrs	r3, r1
 80082ae:	43db      	mvns	r3, r3
 80082b0:	ea02 0103 	and.w	r1, r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	03ff63ff 	.word	0x03ff63ff

080082d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d138      	bne.n	8008358 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d101      	bne.n	80082f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80082f0:	2302      	movs	r3, #2
 80082f2:	e032      	b.n	800835a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2224      	movs	r2, #36	; 0x24
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0201 	bic.w	r2, r2, #1
 8008312:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008322:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6819      	ldr	r1, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	e000      	b.n	800835a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008358:	2302      	movs	r3, #2
  }
}
 800835a:	4618      	mov	r0, r3
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008366:	b480      	push	{r7}
 8008368:	b085      	sub	sp, #20
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b20      	cmp	r3, #32
 800837a:	d139      	bne.n	80083f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008386:	2302      	movs	r3, #2
 8008388:	e033      	b.n	80083f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2224      	movs	r2, #36	; 0x24
 8008396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 0201 	bic.w	r2, r2, #1
 80083a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80083b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e000      	b.n	80083f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80083f0:	2302      	movs	r3, #2
  }
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80083fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008400:	b08f      	sub	sp, #60	; 0x3c
 8008402:	af0a      	add	r7, sp, #40	; 0x28
 8008404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e116      	b.n	800863e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f00a f814 	bl	8012458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2203      	movs	r2, #3
 8008434:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f006 ff23 	bl	800f29a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	603b      	str	r3, [r7, #0]
 800845a:	687e      	ldr	r6, [r7, #4]
 800845c:	466d      	mov	r5, sp
 800845e:	f106 0410 	add.w	r4, r6, #16
 8008462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800846a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800846e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008472:	1d33      	adds	r3, r6, #4
 8008474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008476:	6838      	ldr	r0, [r7, #0]
 8008478:	f006 fe36 	bl	800f0e8 <USB_CoreInit>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d005      	beq.n	800848e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e0d7      	b.n	800863e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2100      	movs	r1, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f006 ff11 	bl	800f2bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800849a:	2300      	movs	r3, #0
 800849c:	73fb      	strb	r3, [r7, #15]
 800849e:	e04a      	b.n	8008536 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80084a0:	7bfa      	ldrb	r2, [r7, #15]
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	4613      	mov	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	440b      	add	r3, r1
 80084ae:	333d      	adds	r3, #61	; 0x3d
 80084b0:	2201      	movs	r2, #1
 80084b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80084b4:	7bfa      	ldrb	r2, [r7, #15]
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	4613      	mov	r3, r2
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	440b      	add	r3, r1
 80084c2:	333c      	adds	r3, #60	; 0x3c
 80084c4:	7bfa      	ldrb	r2, [r7, #15]
 80084c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	b298      	uxth	r0, r3
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4613      	mov	r3, r2
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	440b      	add	r3, r1
 80084da:	3344      	adds	r3, #68	; 0x44
 80084dc:	4602      	mov	r2, r0
 80084de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80084e0:	7bfa      	ldrb	r2, [r7, #15]
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4613      	mov	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	3340      	adds	r3, #64	; 0x40
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80084f4:	7bfa      	ldrb	r2, [r7, #15]
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	3348      	adds	r3, #72	; 0x48
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008508:	7bfa      	ldrb	r2, [r7, #15]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	334c      	adds	r3, #76	; 0x4c
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800851c:	7bfa      	ldrb	r2, [r7, #15]
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	3354      	adds	r3, #84	; 0x54
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	3301      	adds	r3, #1
 8008534:	73fb      	strb	r3, [r7, #15]
 8008536:	7bfa      	ldrb	r2, [r7, #15]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	429a      	cmp	r2, r3
 800853e:	d3af      	bcc.n	80084a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
 8008544:	e044      	b.n	80085d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008546:	7bfa      	ldrb	r2, [r7, #15]
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	4613      	mov	r3, r2
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008558:	2200      	movs	r2, #0
 800855a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800855c:	7bfa      	ldrb	r2, [r7, #15]
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800856e:	7bfa      	ldrb	r2, [r7, #15]
 8008570:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008572:	7bfa      	ldrb	r2, [r7, #15]
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	4613      	mov	r3, r2
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008588:	7bfa      	ldrb	r2, [r7, #15]
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800859e:	7bfa      	ldrb	r2, [r7, #15]
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80085b4:	7bfa      	ldrb	r2, [r7, #15]
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4613      	mov	r3, r2
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	3301      	adds	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
 80085d0:	7bfa      	ldrb	r2, [r7, #15]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d3b5      	bcc.n	8008546 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	687e      	ldr	r6, [r7, #4]
 80085e2:	466d      	mov	r5, sp
 80085e4:	f106 0410 	add.w	r4, r6, #16
 80085e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80085f8:	1d33      	adds	r3, r6, #4
 80085fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085fc:	6838      	ldr	r0, [r7, #0]
 80085fe:	f006 fea9 	bl	800f354 <USB_DevInit>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d005      	beq.n	8008614 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e014      	b.n	800863e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	2b01      	cmp	r3, #1
 800862a:	d102      	bne.n	8008632 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f001 f881 	bl	8009734 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4618      	mov	r0, r3
 8008638:	f007 ff31 	bl	801049e <USB_DevDisconnect>

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008646 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800865a:	2b01      	cmp	r3, #1
 800865c:	d101      	bne.n	8008662 <HAL_PCD_Start+0x1c>
 800865e:	2302      	movs	r3, #2
 8008660:	e01c      	b.n	800869c <HAL_PCD_Start+0x56>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	2b01      	cmp	r3, #1
 8008670:	d105      	bne.n	800867e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f006 fdf8 	bl	800f278 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f007 fee5 	bl	801045c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80086a4:	b590      	push	{r4, r7, lr}
 80086a6:	b08d      	sub	sp, #52	; 0x34
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f007 ffa3 	bl	8010606 <USB_GetMode>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f040 847e 	bne.w	8008fc4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f007 ff07 	bl	80104e0 <USB_ReadInterrupts>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 8474 	beq.w	8008fc2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	0a1b      	lsrs	r3, r3, #8
 80086e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f007 fef4 	bl	80104e0 <USB_ReadInterrupts>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d107      	bne.n	8008712 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	695a      	ldr	r2, [r3, #20]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f002 0202 	and.w	r2, r2, #2
 8008710:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f007 fee2 	bl	80104e0 <USB_ReadInterrupts>
 800871c:	4603      	mov	r3, r0
 800871e:	f003 0310 	and.w	r3, r3, #16
 8008722:	2b10      	cmp	r3, #16
 8008724:	d161      	bne.n	80087ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	699a      	ldr	r2, [r3, #24]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 0210 	bic.w	r2, r2, #16
 8008734:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	f003 020f 	and.w	r2, r3, #15
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	3304      	adds	r3, #4
 8008754:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	0c5b      	lsrs	r3, r3, #17
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	2b02      	cmp	r3, #2
 8008760:	d124      	bne.n	80087ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008768:	4013      	ands	r3, r2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d035      	beq.n	80087da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	091b      	lsrs	r3, r3, #4
 8008776:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800877c:	b29b      	uxth	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	6a38      	ldr	r0, [r7, #32]
 8008782:	f007 fd19 	bl	80101b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	091b      	lsrs	r3, r3, #4
 800878e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008792:	441a      	add	r2, r3
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	6a1a      	ldr	r2, [r3, #32]
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	091b      	lsrs	r3, r3, #4
 80087a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087a4:	441a      	add	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	621a      	str	r2, [r3, #32]
 80087aa:	e016      	b.n	80087da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	0c5b      	lsrs	r3, r3, #17
 80087b0:	f003 030f 	and.w	r3, r3, #15
 80087b4:	2b06      	cmp	r3, #6
 80087b6:	d110      	bne.n	80087da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087be:	2208      	movs	r2, #8
 80087c0:	4619      	mov	r1, r3
 80087c2:	6a38      	ldr	r0, [r7, #32]
 80087c4:	f007 fcf8 	bl	80101b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	6a1a      	ldr	r2, [r3, #32]
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	091b      	lsrs	r3, r3, #4
 80087d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087d4:	441a      	add	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	699a      	ldr	r2, [r3, #24]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0210 	orr.w	r2, r2, #16
 80087e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f007 fe76 	bl	80104e0 <USB_ReadInterrupts>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087fe:	f040 80a7 	bne.w	8008950 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f007 fe7b 	bl	8010506 <USB_ReadDevAllOutEpInterrupt>
 8008810:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008812:	e099      	b.n	8008948 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 808e 	beq.w	800893c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f007 fe9f 	bl	801056e <USB_ReadDevOutEPInterrupt>
 8008830:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00c      	beq.n	8008856 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	461a      	mov	r2, r3
 800884a:	2301      	movs	r3, #1
 800884c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800884e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fe95 	bl	8009580 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f003 0308 	and.w	r3, r3, #8
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00c      	beq.n	800887a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886c:	461a      	mov	r2, r3
 800886e:	2308      	movs	r3, #8
 8008870:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fed1 	bl	800961c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	2b00      	cmp	r3, #0
 8008882:	d008      	beq.n	8008896 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008890:	461a      	mov	r2, r3
 8008892:	2310      	movs	r3, #16
 8008894:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d030      	beq.n	8008902 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a8:	2b80      	cmp	r3, #128	; 0x80
 80088aa:	d109      	bne.n	80088c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80088c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c2:	4613      	mov	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	4413      	add	r3, r2
 80088d2:	3304      	adds	r3, #4
 80088d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	78db      	ldrb	r3, [r3, #3]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d108      	bne.n	80088f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2200      	movs	r2, #0
 80088e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f009 fedc 	bl	80126a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fc:	461a      	mov	r2, r3
 80088fe:	2302      	movs	r3, #2
 8008900:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f003 0320 	and.w	r3, r3, #32
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008918:	461a      	mov	r2, r3
 800891a:	2320      	movs	r3, #32
 800891c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008934:	461a      	mov	r2, r3
 8008936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800893a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	3301      	adds	r3, #1
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	2b00      	cmp	r3, #0
 800894c:	f47f af62 	bne.w	8008814 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f007 fdc3 	bl	80104e0 <USB_ReadInterrupts>
 800895a:	4603      	mov	r3, r0
 800895c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008960:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008964:	f040 80a4 	bne.w	8008ab0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4618      	mov	r0, r3
 800896e:	f007 fde4 	bl	801053a <USB_ReadDevAllInEpInterrupt>
 8008972:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008974:	2300      	movs	r3, #0
 8008976:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008978:	e096      	b.n	8008aa8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 808b 	beq.w	8008a9c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f007 fe0a 	bl	80105aa <USB_ReadDevInEPInterrupt>
 8008996:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d020      	beq.n	80089e4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	2201      	movs	r2, #1
 80089aa:	fa02 f303 	lsl.w	r3, r2, r3
 80089ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	43db      	mvns	r3, r3
 80089bc:	69f9      	ldr	r1, [r7, #28]
 80089be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c2:	4013      	ands	r3, r2
 80089c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d2:	461a      	mov	r2, r3
 80089d4:	2301      	movs	r3, #1
 80089d6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f009 fdcd 	bl	801257e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d008      	beq.n	8008a00 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fa:	461a      	mov	r2, r3
 80089fc:	2308      	movs	r3, #8
 80089fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f003 0310 	and.w	r3, r3, #16
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d008      	beq.n	8008a1c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	461a      	mov	r2, r3
 8008a18:	2310      	movs	r3, #16
 8008a1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d008      	beq.n	8008a38 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a32:	461a      	mov	r2, r3
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d023      	beq.n	8008a8a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a44:	6a38      	ldr	r0, [r7, #32]
 8008a46:	f006 fdd1 	bl	800f5ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	3338      	adds	r3, #56	; 0x38
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	4413      	add	r3, r2
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	78db      	ldrb	r3, [r3, #3]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d108      	bne.n	8008a78 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f009 fe2a 	bl	80126cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a84:	461a      	mov	r2, r3
 8008a86:	2302      	movs	r3, #2
 8008a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fcea 	bl	8009470 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	085b      	lsrs	r3, r3, #1
 8008aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f47f af65 	bne.w	800897a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f007 fd13 	bl	80104e0 <USB_ReadInterrupts>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac4:	d122      	bne.n	8008b0c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ad4:	f023 0301 	bic.w	r3, r3, #1
 8008ad8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d108      	bne.n	8008af6 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f00a f85e 	bl	8012bb0 <HAL_PCDEx_LPM_Callback>
 8008af4:	e002      	b.n	8008afc <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f009 fdae 	bl	8012658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f007 fce5 	bl	80104e0 <USB_ReadInterrupts>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b20:	d112      	bne.n	8008b48 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d102      	bne.n	8008b38 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f009 fd6a 	bl	801260c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695a      	ldr	r2, [r3, #20]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f007 fcc7 	bl	80104e0 <USB_ReadInterrupts>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b5c:	d121      	bne.n	8008ba2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	695a      	ldr	r2, [r3, #20]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008b6c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d111      	bne.n	8008b9c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b86:	089b      	lsrs	r3, r3, #2
 8008b88:	f003 020f 	and.w	r2, r3, #15
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b92:	2101      	movs	r1, #1
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f00a f80b 	bl	8012bb0 <HAL_PCDEx_LPM_Callback>
 8008b9a:	e002      	b.n	8008ba2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f009 fd35 	bl	801260c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f007 fc9a 	bl	80104e0 <USB_ReadInterrupts>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb6:	f040 80b5 	bne.w	8008d24 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2110      	movs	r1, #16
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f006 fd09 	bl	800f5ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bda:	2300      	movs	r3, #0
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bde:	e046      	b.n	8008c6e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bec:	461a      	mov	r2, r3
 8008bee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bf2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c04:	0151      	lsls	r1, r2, #5
 8008c06:	69fa      	ldr	r2, [r7, #28]
 8008c08:	440a      	add	r2, r1
 8008c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c20:	461a      	mov	r2, r3
 8008c22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c26:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c66:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d3b3      	bcc.n	8008be0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c86:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c8a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d016      	beq.n	8008cc2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca4:	f043 030b 	orr.w	r3, r3, #11
 8008ca8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cba:	f043 030b 	orr.w	r3, r3, #11
 8008cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8008cc0:	e015      	b.n	8008cee <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008cd4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008cd8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ce8:	f043 030b 	orr.w	r3, r3, #11
 8008cec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f007 fcaa 	bl	8010668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695a      	ldr	r2, [r3, #20]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f007 fbd9 	bl	80104e0 <USB_ReadInterrupts>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d38:	d124      	bne.n	8008d84 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f007 fc6f 	bl	8010622 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f006 fccc 	bl	800f6e6 <USB_GetDevSpeed>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681c      	ldr	r4, [r3, #0]
 8008d5a:	f001 fc0b 	bl	800a574 <HAL_RCC_GetHCLKFreq>
 8008d5e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	461a      	mov	r2, r3
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f006 f9e9 	bl	800f140 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f009 fc2d 	bl	80125ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	695a      	ldr	r2, [r3, #20]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f007 fba9 	bl	80104e0 <USB_ReadInterrupts>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b08      	cmp	r3, #8
 8008d96:	d10a      	bne.n	8008dae <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f009 fc0a 	bl	80125b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695a      	ldr	r2, [r3, #20]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f002 0208 	and.w	r2, r2, #8
 8008dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f007 fb94 	bl	80104e0 <USB_ReadInterrupts>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbe:	2b80      	cmp	r3, #128	; 0x80
 8008dc0:	d122      	bne.n	8008e08 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dce:	2301      	movs	r3, #1
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd2:	e014      	b.n	8008dfe <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd8:	4613      	mov	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d105      	bne.n	8008df8 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fb0b 	bl	800940e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d3e5      	bcc.n	8008dd4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f007 fb67 	bl	80104e0 <USB_ReadInterrupts>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1c:	d13b      	bne.n	8008e96 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e1e:	2301      	movs	r3, #1
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
 8008e22:	e02b      	b.n	8008e7c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e38:	4613      	mov	r3, r2
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	3340      	adds	r3, #64	; 0x40
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d115      	bne.n	8008e76 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008e4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	da12      	bge.n	8008e76 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e54:	4613      	mov	r3, r2
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	333f      	adds	r3, #63	; 0x3f
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 facc 	bl	800940e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	3301      	adds	r3, #1
 8008e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d3ce      	bcc.n	8008e24 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	695a      	ldr	r2, [r3, #20]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f007 fb20 	bl	80104e0 <USB_ReadInterrupts>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eaa:	d155      	bne.n	8008f58 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008eac:	2301      	movs	r3, #1
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb0:	e045      	b.n	8008f3e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	440b      	add	r3, r1
 8008ed0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d12e      	bne.n	8008f38 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008eda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	da2b      	bge.n	8008f38 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008eec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d121      	bne.n	8008f38 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef8:	4613      	mov	r3, r2
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	4413      	add	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	440b      	add	r3, r1
 8008f02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008f06:	2201      	movs	r2, #1
 8008f08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f34:	6053      	str	r3, [r2, #4]
            break;
 8008f36:	e007      	b.n	8008f48 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3b4      	bcc.n	8008eb2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695a      	ldr	r2, [r3, #20]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f007 fabf 	bl	80104e0 <USB_ReadInterrupts>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f6c:	d10a      	bne.n	8008f84 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f009 fbbe 	bl	80126f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f007 faa9 	bl	80104e0 <USB_ReadInterrupts>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d115      	bne.n	8008fc4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f009 fbae 	bl	801270c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6859      	ldr	r1, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	605a      	str	r2, [r3, #4]
 8008fc0:	e000      	b.n	8008fc4 <HAL_PCD_IRQHandler+0x920>
      return;
 8008fc2:	bf00      	nop
    }
  }
}
 8008fc4:	3734      	adds	r7, #52	; 0x34
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd90      	pop	{r4, r7, pc}

08008fca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d101      	bne.n	8008fe4 <HAL_PCD_SetAddress+0x1a>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	e013      	b.n	800900c <HAL_PCD_SetAddress+0x42>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	78fa      	ldrb	r2, [r7, #3]
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f007 fa07 	bl	8010410 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	4608      	mov	r0, r1
 800901e:	4611      	mov	r1, r2
 8009020:	461a      	mov	r2, r3
 8009022:	4603      	mov	r3, r0
 8009024:	70fb      	strb	r3, [r7, #3]
 8009026:	460b      	mov	r3, r1
 8009028:	803b      	strh	r3, [r7, #0]
 800902a:	4613      	mov	r3, r2
 800902c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009036:	2b00      	cmp	r3, #0
 8009038:	da0f      	bge.n	800905a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	f003 020f 	and.w	r2, r3, #15
 8009040:	4613      	mov	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	3338      	adds	r3, #56	; 0x38
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	3304      	adds	r3, #4
 8009050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	705a      	strb	r2, [r3, #1]
 8009058:	e00f      	b.n	800907a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	f003 020f 	and.w	r2, r3, #15
 8009060:	4613      	mov	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	3304      	adds	r3, #4
 8009072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	b2da      	uxtb	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009086:	883a      	ldrh	r2, [r7, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	78ba      	ldrb	r2, [r7, #2]
 8009090:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	785b      	ldrb	r3, [r3, #1]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d004      	beq.n	80090a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80090a4:	78bb      	ldrb	r3, [r7, #2]
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d102      	bne.n	80090b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_PCD_EP_Open+0xaa>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e00e      	b.n	80090dc <HAL_PCD_EP_Open+0xc8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f006 fb29 	bl	800f724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80090da:	7afb      	ldrb	r3, [r7, #11]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80090f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da0f      	bge.n	8009118 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090f8:	78fb      	ldrb	r3, [r7, #3]
 80090fa:	f003 020f 	and.w	r2, r3, #15
 80090fe:	4613      	mov	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	3338      	adds	r3, #56	; 0x38
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	4413      	add	r3, r2
 800910c:	3304      	adds	r3, #4
 800910e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	705a      	strb	r2, [r3, #1]
 8009116:	e00f      	b.n	8009138 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	f003 020f 	and.w	r2, r3, #15
 800911e:	4613      	mov	r3, r2
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	3304      	adds	r3, #4
 8009130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	b2da      	uxtb	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800914a:	2b01      	cmp	r3, #1
 800914c:	d101      	bne.n	8009152 <HAL_PCD_EP_Close+0x6e>
 800914e:	2302      	movs	r3, #2
 8009150:	e00e      	b.n	8009170 <HAL_PCD_EP_Close+0x8c>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	4618      	mov	r0, r3
 8009162:	f006 fb67 	bl	800f834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	607a      	str	r2, [r7, #4]
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	460b      	mov	r3, r1
 8009186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009188:	7afb      	ldrb	r3, [r7, #11]
 800918a:	f003 020f 	and.w	r2, r3, #15
 800918e:	4613      	mov	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	4413      	add	r3, r2
 800919e:	3304      	adds	r3, #4
 80091a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2200      	movs	r2, #0
 80091b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2200      	movs	r2, #0
 80091b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091c6:	7afb      	ldrb	r3, [r7, #11]
 80091c8:	f003 030f 	and.w	r3, r3, #15
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6979      	ldr	r1, [r7, #20]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f006 fde8 	bl	800fdac <USB_EP0StartXfer>
 80091dc:	e005      	b.n	80091ea <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6979      	ldr	r1, [r7, #20]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f006 fc01 	bl	800f9ec <USB_EPStartXfer>
  }

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	f003 020f 	and.w	r2, r3, #15
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009216:	681b      	ldr	r3, [r3, #0]
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	460b      	mov	r3, r1
 8009232:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009234:	7afb      	ldrb	r3, [r7, #11]
 8009236:	f003 020f 	and.w	r2, r3, #15
 800923a:	4613      	mov	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	3338      	adds	r3, #56	; 0x38
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	3304      	adds	r3, #4
 800924a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2200      	movs	r2, #0
 800925c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2201      	movs	r2, #1
 8009262:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009264:	7afb      	ldrb	r3, [r7, #11]
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	b2da      	uxtb	r2, r3
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009270:	7afb      	ldrb	r3, [r7, #11]
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6979      	ldr	r1, [r7, #20]
 8009280:	4618      	mov	r0, r3
 8009282:	f006 fd93 	bl	800fdac <USB_EP0StartXfer>
 8009286:	e005      	b.n	8009294 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6979      	ldr	r1, [r7, #20]
 800928e:	4618      	mov	r0, r3
 8009290:	f006 fbac 	bl	800f9ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	f003 020f 	and.w	r2, r3, #15
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d901      	bls.n	80092bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e04e      	b.n	800935a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	da0f      	bge.n	80092e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	f003 020f 	and.w	r2, r3, #15
 80092ca:	4613      	mov	r3, r2
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	3338      	adds	r3, #56	; 0x38
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4413      	add	r3, r2
 80092d8:	3304      	adds	r3, #4
 80092da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	705a      	strb	r2, [r3, #1]
 80092e2:	e00d      	b.n	8009300 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80092e4:	78fa      	ldrb	r2, [r7, #3]
 80092e6:	4613      	mov	r3, r2
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	4413      	add	r3, r2
 80092f6:	3304      	adds	r3, #4
 80092f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2201      	movs	r2, #1
 8009304:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	b2da      	uxtb	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_PCD_EP_SetStall+0x82>
 800931c:	2302      	movs	r3, #2
 800931e:	e01c      	b.n	800935a <HAL_PCD_EP_SetStall+0xbc>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68f9      	ldr	r1, [r7, #12]
 800932e:	4618      	mov	r0, r3
 8009330:	f006 ff9a 	bl	8010268 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	2b00      	cmp	r3, #0
 800933c:	d108      	bne.n	8009350 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f007 f98c 	bl	8010668 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	429a      	cmp	r2, r3
 800937a:	d901      	bls.n	8009380 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e042      	b.n	8009406 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009384:	2b00      	cmp	r3, #0
 8009386:	da0f      	bge.n	80093a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	f003 020f 	and.w	r2, r3, #15
 800938e:	4613      	mov	r3, r2
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	3338      	adds	r3, #56	; 0x38
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	4413      	add	r3, r2
 800939c:	3304      	adds	r3, #4
 800939e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	705a      	strb	r2, [r3, #1]
 80093a6:	e00f      	b.n	80093c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	f003 020f 	and.w	r2, r3, #15
 80093ae:	4613      	mov	r3, r2
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	4413      	add	r3, r2
 80093be:	3304      	adds	r3, #4
 80093c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	f003 030f 	and.w	r3, r3, #15
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_PCD_EP_ClrStall+0x86>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e00e      	b.n	8009406 <HAL_PCD_EP_ClrStall+0xa4>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68f9      	ldr	r1, [r7, #12]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f006 ffa4 	bl	8010344 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800941a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800941e:	2b00      	cmp	r3, #0
 8009420:	da0c      	bge.n	800943c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009422:	78fb      	ldrb	r3, [r7, #3]
 8009424:	f003 020f 	and.w	r2, r3, #15
 8009428:	4613      	mov	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	3338      	adds	r3, #56	; 0x38
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	4413      	add	r3, r2
 8009436:	3304      	adds	r3, #4
 8009438:	60fb      	str	r3, [r7, #12]
 800943a:	e00c      	b.n	8009456 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	f003 020f 	and.w	r2, r3, #15
 8009442:	4613      	mov	r3, r2
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	4413      	add	r3, r2
 8009452:	3304      	adds	r3, #4
 8009454:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68f9      	ldr	r1, [r7, #12]
 800945c:	4618      	mov	r0, r3
 800945e:	f006 fdc7 	bl	800fff0 <USB_EPStopXfer>
 8009462:	4603      	mov	r3, r0
 8009464:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009466:	7afb      	ldrb	r3, [r7, #11]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	00db      	lsls	r3, r3, #3
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	3338      	adds	r3, #56	; 0x38
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	4413      	add	r3, r2
 8009494:	3304      	adds	r3, #4
 8009496:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1a      	ldr	r2, [r3, #32]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d901      	bls.n	80094a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e067      	b.n	8009578 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	699a      	ldr	r2, [r3, #24]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	69fa      	ldr	r2, [r7, #28]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d902      	bls.n	80094c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	3303      	adds	r3, #3
 80094c8:	089b      	lsrs	r3, r3, #2
 80094ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094cc:	e026      	b.n	800951c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d902      	bls.n	80094ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	3303      	adds	r3, #3
 80094ee:	089b      	lsrs	r3, r3, #2
 80094f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6919      	ldr	r1, [r3, #16]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	6978      	ldr	r0, [r7, #20]
 8009500:	f006 fe20 	bl	8010144 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	441a      	add	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6a1a      	ldr	r2, [r3, #32]
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	441a      	add	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	b29b      	uxth	r3, r3
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	429a      	cmp	r2, r3
 8009530:	d809      	bhi.n	8009546 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a1a      	ldr	r2, [r3, #32]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800953a:	429a      	cmp	r2, r3
 800953c:	d203      	bcs.n	8009546 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1c3      	bne.n	80094ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	429a      	cmp	r2, r3
 8009550:	d811      	bhi.n	8009576 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	2201      	movs	r2, #1
 800955a:	fa02 f303 	lsl.w	r3, r2, r3
 800955e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	43db      	mvns	r3, r3
 800956c:	6939      	ldr	r1, [r7, #16]
 800956e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009572:	4013      	ands	r3, r2
 8009574:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	333c      	adds	r3, #60	; 0x3c
 8009598:	3304      	adds	r3, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4a19      	ldr	r2, [pc, #100]	; (8009618 <PCD_EP_OutXfrComplete_int+0x98>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d124      	bne.n	8009600 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	461a      	mov	r2, r3
 80095ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095d2:	6093      	str	r3, [r2, #8]
 80095d4:	e01a      	b.n	800960c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d008      	beq.n	80095f2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	461a      	mov	r2, r3
 80095ee:	2320      	movs	r3, #32
 80095f0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f008 ffa5 	bl	8012548 <HAL_PCD_DataOutStageCallback>
 80095fe:	e005      	b.n	800960c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f008 ff9e 	bl	8012548 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	4f54310a 	.word	0x4f54310a

0800961c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	333c      	adds	r3, #60	; 0x3c
 8009634:	3304      	adds	r3, #4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4a0c      	ldr	r2, [pc, #48]	; (8009680 <PCD_EP_OutSetupPacket_int+0x64>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d90e      	bls.n	8009670 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009658:	2b00      	cmp	r3, #0
 800965a:	d009      	beq.n	8009670 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009668:	461a      	mov	r2, r3
 800966a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800966e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f008 ff57 	bl	8012524 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	4f54300a 	.word	0x4f54300a

08009684 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
 8009690:	4613      	mov	r3, r2
 8009692:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d107      	bne.n	80096b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80096a2:	883b      	ldrh	r3, [r7, #0]
 80096a4:	0419      	lsls	r1, r3, #16
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	629a      	str	r2, [r3, #40]	; 0x28
 80096b0:	e028      	b.n	8009704 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	0c1b      	lsrs	r3, r3, #16
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	4413      	add	r3, r2
 80096be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
 80096c4:	e00d      	b.n	80096e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	3340      	adds	r3, #64	; 0x40
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	0c1b      	lsrs	r3, r3, #16
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	4413      	add	r3, r2
 80096da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	3301      	adds	r3, #1
 80096e0:	73fb      	strb	r3, [r7, #15]
 80096e2:	7bfa      	ldrb	r2, [r7, #15]
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d3ec      	bcc.n	80096c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80096ec:	883b      	ldrh	r3, [r7, #0]
 80096ee:	0418      	lsls	r0, r3, #16
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	4302      	orrs	r2, r0
 80096fc:	3340      	adds	r3, #64	; 0x40
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	887a      	ldrh	r2, [r7, #2]
 8009724:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009766:	f043 0303 	orr.w	r3, r3, #3
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800977c:	b480      	push	{r7}
 800977e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009780:	4b05      	ldr	r3, [pc, #20]	; (8009798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a04      	ldr	r2, [pc, #16]	; (8009798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800978a:	6013      	str	r3, [r2, #0]
}
 800978c:	bf00      	nop
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	40007000 	.word	0x40007000

0800979c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80097a0:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	40007000 	.word	0x40007000

080097b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097c6:	d130      	bne.n	800982a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80097c8:	4b23      	ldr	r3, [pc, #140]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d4:	d038      	beq.n	8009848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097d6:	4b20      	ldr	r3, [pc, #128]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097de:	4a1e      	ldr	r2, [pc, #120]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80097e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80097e6:	4b1d      	ldr	r3, [pc, #116]	; (800985c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2232      	movs	r2, #50	; 0x32
 80097ec:	fb02 f303 	mul.w	r3, r2, r3
 80097f0:	4a1b      	ldr	r2, [pc, #108]	; (8009860 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	0c9b      	lsrs	r3, r3, #18
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097fc:	e002      	b.n	8009804 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3b01      	subs	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009804:	4b14      	ldr	r3, [pc, #80]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800980c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009810:	d102      	bne.n	8009818 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1f2      	bne.n	80097fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009818:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009824:	d110      	bne.n	8009848 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e00f      	b.n	800984a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800982a:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009836:	d007      	beq.n	8009848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009838:	4b07      	ldr	r3, [pc, #28]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009840:	4a05      	ldr	r2, [pc, #20]	; (8009858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009846:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	40007000 	.word	0x40007000
 800985c:	20000000 	.word	0x20000000
 8009860:	431bde83 	.word	0x431bde83

08009864 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009868:	4b05      	ldr	r3, [pc, #20]	; (8009880 <HAL_PWREx_EnableVddUSB+0x1c>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	4a04      	ldr	r2, [pc, #16]	; (8009880 <HAL_PWREx_EnableVddUSB+0x1c>)
 800986e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009872:	6053      	str	r3, [r2, #4]
}
 8009874:	bf00      	nop
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	40007000 	.word	0x40007000

08009884 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009888:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	4a04      	ldr	r2, [pc, #16]	; (80098a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800988e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009892:	6053      	str	r3, [r2, #4]
}
 8009894:	bf00      	nop
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	40007000 	.word	0x40007000

080098a4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80098ac:	f7fc f8ea 	bl	8005a84 <HAL_GetTick>
 80098b0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e069      	b.n	8009990 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10b      	bne.n	80098e0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7f8 fa85 	bl	8001de0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80098d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f85e 	bl	800999c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	021a      	lsls	r2, r3, #8
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	2120      	movs	r1, #32
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f856 	bl	80099b8 <QSPI_WaitFlagStateUntilTimeout>
 800990c:	4603      	mov	r3, r0
 800990e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d137      	bne.n	8009986 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009920:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6852      	ldr	r2, [r2, #4]
 8009928:	0611      	lsls	r1, r2, #24
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	68d2      	ldr	r2, [r2, #12]
 800992e:	4311      	orrs	r1, r2
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	69d2      	ldr	r2, [r2, #28]
 8009934:	4311      	orrs	r1, r2
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	6a12      	ldr	r2, [r2, #32]
 800993a:	4311      	orrs	r1, r2
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	430b      	orrs	r3, r1
 8009942:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	4b13      	ldr	r3, [pc, #76]	; (8009998 <HAL_QSPI_Init+0xf4>)
 800994c:	4013      	ands	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6912      	ldr	r2, [r2, #16]
 8009952:	0411      	lsls	r1, r2, #16
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6952      	ldr	r2, [r2, #20]
 8009958:	4311      	orrs	r1, r2
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6992      	ldr	r2, [r2, #24]
 800995e:	4311      	orrs	r1, r2
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	6812      	ldr	r2, [r2, #0]
 8009964:	430b      	orrs	r3, r1
 8009966:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 0201 	orr.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800998e:	7afb      	ldrb	r3, [r7, #11]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	ffe0f8fe 	.word	0xffe0f8fe

0800999c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	4613      	mov	r3, r2
 80099c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80099c8:	e01a      	b.n	8009a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099d0:	d016      	beq.n	8009a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d2:	f7fc f857 	bl	8005a84 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	69ba      	ldr	r2, [r7, #24]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d302      	bcc.n	80099e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10b      	bne.n	8009a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2204      	movs	r2, #4
 80099ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f4:	f043 0201 	orr.w	r2, r3, #1
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e00e      	b.n	8009a1e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	4013      	ands	r3, r2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bf14      	ite	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	2300      	moveq	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	461a      	mov	r2, r3
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d1d6      	bne.n	80099ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d102      	bne.n	8009a3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	f000 bc08 	b.w	800a24c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a3c:	4b96      	ldr	r3, [pc, #600]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f003 030c 	and.w	r3, r3, #12
 8009a44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a46:	4b94      	ldr	r3, [pc, #592]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f003 0303 	and.w	r3, r3, #3
 8009a4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0310 	and.w	r3, r3, #16
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 80e4 	beq.w	8009c26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d007      	beq.n	8009a74 <HAL_RCC_OscConfig+0x4c>
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2b0c      	cmp	r3, #12
 8009a68:	f040 808b 	bne.w	8009b82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	f040 8087 	bne.w	8009b82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009a74:	4b88      	ldr	r3, [pc, #544]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d005      	beq.n	8009a8c <HAL_RCC_OscConfig+0x64>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e3df      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a1a      	ldr	r2, [r3, #32]
 8009a90:	4b81      	ldr	r3, [pc, #516]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0308 	and.w	r3, r3, #8
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <HAL_RCC_OscConfig+0x7e>
 8009a9c:	4b7e      	ldr	r3, [pc, #504]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aa4:	e005      	b.n	8009ab2 <HAL_RCC_OscConfig+0x8a>
 8009aa6:	4b7c      	ldr	r3, [pc, #496]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aac:	091b      	lsrs	r3, r3, #4
 8009aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d223      	bcs.n	8009afe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fd92 	bl	800a5e4 <RCC_SetFlashLatencyFromMSIRange>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e3c0      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009aca:	4b73      	ldr	r3, [pc, #460]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a72      	ldr	r2, [pc, #456]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009ad0:	f043 0308 	orr.w	r3, r3, #8
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	4b70      	ldr	r3, [pc, #448]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	496d      	ldr	r1, [pc, #436]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ae8:	4b6b      	ldr	r3, [pc, #428]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	4968      	ldr	r1, [pc, #416]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	604b      	str	r3, [r1, #4]
 8009afc:	e025      	b.n	8009b4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009afe:	4b66      	ldr	r3, [pc, #408]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a65      	ldr	r2, [pc, #404]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b04:	f043 0308 	orr.w	r3, r3, #8
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	4b63      	ldr	r3, [pc, #396]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	4960      	ldr	r1, [pc, #384]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b1c:	4b5e      	ldr	r3, [pc, #376]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	495b      	ldr	r1, [pc, #364]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d109      	bne.n	8009b4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 fd52 	bl	800a5e4 <RCC_SetFlashLatencyFromMSIRange>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e380      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009b4a:	f000 fc87 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	4b51      	ldr	r3, [pc, #324]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	091b      	lsrs	r3, r3, #4
 8009b56:	f003 030f 	and.w	r3, r3, #15
 8009b5a:	4950      	ldr	r1, [pc, #320]	; (8009c9c <HAL_RCC_OscConfig+0x274>)
 8009b5c:	5ccb      	ldrb	r3, [r1, r3]
 8009b5e:	f003 031f 	and.w	r3, r3, #31
 8009b62:	fa22 f303 	lsr.w	r3, r2, r3
 8009b66:	4a4e      	ldr	r2, [pc, #312]	; (8009ca0 <HAL_RCC_OscConfig+0x278>)
 8009b68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009b6a:	4b4e      	ldr	r3, [pc, #312]	; (8009ca4 <HAL_RCC_OscConfig+0x27c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fb ff38 	bl	80059e4 <HAL_InitTick>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d052      	beq.n	8009c24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	e364      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d032      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009b8a:	4b43      	ldr	r3, [pc, #268]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a42      	ldr	r2, [pc, #264]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009b90:	f043 0301 	orr.w	r3, r3, #1
 8009b94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009b96:	f7fb ff75 	bl	8005a84 <HAL_GetTick>
 8009b9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009b9c:	e008      	b.n	8009bb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b9e:	f7fb ff71 	bl	8005a84 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d901      	bls.n	8009bb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e34d      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009bb0:	4b39      	ldr	r3, [pc, #228]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0f0      	beq.n	8009b9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009bbc:	4b36      	ldr	r3, [pc, #216]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a35      	ldr	r2, [pc, #212]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bc2:	f043 0308 	orr.w	r3, r3, #8
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	4b33      	ldr	r3, [pc, #204]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	4930      	ldr	r1, [pc, #192]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009bda:	4b2f      	ldr	r3, [pc, #188]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	492b      	ldr	r1, [pc, #172]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	604b      	str	r3, [r1, #4]
 8009bee:	e01a      	b.n	8009c26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009bf0:	4b29      	ldr	r3, [pc, #164]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a28      	ldr	r2, [pc, #160]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009bf6:	f023 0301 	bic.w	r3, r3, #1
 8009bfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009bfc:	f7fb ff42 	bl	8005a84 <HAL_GetTick>
 8009c00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009c02:	e008      	b.n	8009c16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c04:	f7fb ff3e 	bl	8005a84 <HAL_GetTick>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d901      	bls.n	8009c16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e31a      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009c16:	4b20      	ldr	r3, [pc, #128]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f0      	bne.n	8009c04 <HAL_RCC_OscConfig+0x1dc>
 8009c22:	e000      	b.n	8009c26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d073      	beq.n	8009d1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	2b08      	cmp	r3, #8
 8009c36:	d005      	beq.n	8009c44 <HAL_RCC_OscConfig+0x21c>
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	2b0c      	cmp	r3, #12
 8009c3c:	d10e      	bne.n	8009c5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d10b      	bne.n	8009c5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c44:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d063      	beq.n	8009d18 <HAL_RCC_OscConfig+0x2f0>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d15f      	bne.n	8009d18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e2f7      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c64:	d106      	bne.n	8009c74 <HAL_RCC_OscConfig+0x24c>
 8009c66:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a0b      	ldr	r2, [pc, #44]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e025      	b.n	8009cc0 <HAL_RCC_OscConfig+0x298>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c7c:	d114      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x280>
 8009c7e:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a05      	ldr	r2, [pc, #20]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	4b03      	ldr	r3, [pc, #12]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a02      	ldr	r2, [pc, #8]	; (8009c98 <HAL_RCC_OscConfig+0x270>)
 8009c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	e013      	b.n	8009cc0 <HAL_RCC_OscConfig+0x298>
 8009c98:	40021000 	.word	0x40021000
 8009c9c:	08012d4c 	.word	0x08012d4c
 8009ca0:	20000000 	.word	0x20000000
 8009ca4:	20000100 	.word	0x20000100
 8009ca8:	4ba0      	ldr	r3, [pc, #640]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a9f      	ldr	r2, [pc, #636]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	4b9d      	ldr	r3, [pc, #628]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a9c      	ldr	r2, [pc, #624]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d013      	beq.n	8009cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc8:	f7fb fedc 	bl	8005a84 <HAL_GetTick>
 8009ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cce:	e008      	b.n	8009ce2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cd0:	f7fb fed8 	bl	8005a84 <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	2b64      	cmp	r3, #100	; 0x64
 8009cdc:	d901      	bls.n	8009ce2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e2b4      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ce2:	4b92      	ldr	r3, [pc, #584]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0f0      	beq.n	8009cd0 <HAL_RCC_OscConfig+0x2a8>
 8009cee:	e014      	b.n	8009d1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf0:	f7fb fec8 	bl	8005a84 <HAL_GetTick>
 8009cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009cf6:	e008      	b.n	8009d0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cf8:	f7fb fec4 	bl	8005a84 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	2b64      	cmp	r3, #100	; 0x64
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e2a0      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d0a:	4b88      	ldr	r3, [pc, #544]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1f0      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x2d0>
 8009d16:	e000      	b.n	8009d1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d060      	beq.n	8009de8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d005      	beq.n	8009d38 <HAL_RCC_OscConfig+0x310>
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2b0c      	cmp	r3, #12
 8009d30:	d119      	bne.n	8009d66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d116      	bne.n	8009d66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d38:	4b7c      	ldr	r3, [pc, #496]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <HAL_RCC_OscConfig+0x328>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d101      	bne.n	8009d50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e27d      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d50:	4b76      	ldr	r3, [pc, #472]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	061b      	lsls	r3, r3, #24
 8009d5e:	4973      	ldr	r1, [pc, #460]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d64:	e040      	b.n	8009de8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d023      	beq.n	8009db6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d6e:	4b6f      	ldr	r3, [pc, #444]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a6e      	ldr	r2, [pc, #440]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7a:	f7fb fe83 	bl	8005a84 <HAL_GetTick>
 8009d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d80:	e008      	b.n	8009d94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d82:	f7fb fe7f 	bl	8005a84 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d901      	bls.n	8009d94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e25b      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d94:	4b65      	ldr	r3, [pc, #404]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0f0      	beq.n	8009d82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009da0:	4b62      	ldr	r3, [pc, #392]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	061b      	lsls	r3, r3, #24
 8009dae:	495f      	ldr	r1, [pc, #380]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	604b      	str	r3, [r1, #4]
 8009db4:	e018      	b.n	8009de8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009db6:	4b5d      	ldr	r3, [pc, #372]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a5c      	ldr	r2, [pc, #368]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc2:	f7fb fe5f 	bl	8005a84 <HAL_GetTick>
 8009dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009dc8:	e008      	b.n	8009ddc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dca:	f7fb fe5b 	bl	8005a84 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d901      	bls.n	8009ddc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e237      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ddc:	4b53      	ldr	r3, [pc, #332]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1f0      	bne.n	8009dca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0308 	and.w	r3, r3, #8
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d03c      	beq.n	8009e6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d01c      	beq.n	8009e36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dfc:	4b4b      	ldr	r3, [pc, #300]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e02:	4a4a      	ldr	r2, [pc, #296]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e04:	f043 0301 	orr.w	r3, r3, #1
 8009e08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e0c:	f7fb fe3a 	bl	8005a84 <HAL_GetTick>
 8009e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e12:	e008      	b.n	8009e26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e14:	f7fb fe36 	bl	8005a84 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d901      	bls.n	8009e26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e212      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e26:	4b41      	ldr	r3, [pc, #260]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e2c:	f003 0302 	and.w	r3, r3, #2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d0ef      	beq.n	8009e14 <HAL_RCC_OscConfig+0x3ec>
 8009e34:	e01b      	b.n	8009e6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e36:	4b3d      	ldr	r3, [pc, #244]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e3c:	4a3b      	ldr	r2, [pc, #236]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e3e:	f023 0301 	bic.w	r3, r3, #1
 8009e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e46:	f7fb fe1d 	bl	8005a84 <HAL_GetTick>
 8009e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e4c:	e008      	b.n	8009e60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e4e:	f7fb fe19 	bl	8005a84 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d901      	bls.n	8009e60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e1f5      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e60:	4b32      	ldr	r3, [pc, #200]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1ef      	bne.n	8009e4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 80a6 	beq.w	8009fc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009e80:	4b2a      	ldr	r3, [pc, #168]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10d      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e8c:	4b27      	ldr	r3, [pc, #156]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e90:	4a26      	ldr	r2, [pc, #152]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e96:	6593      	str	r3, [r2, #88]	; 0x58
 8009e98:	4b24      	ldr	r3, [pc, #144]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ea0:	60bb      	str	r3, [r7, #8]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ea8:	4b21      	ldr	r3, [pc, #132]	; (8009f30 <HAL_RCC_OscConfig+0x508>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d118      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009eb4:	4b1e      	ldr	r3, [pc, #120]	; (8009f30 <HAL_RCC_OscConfig+0x508>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a1d      	ldr	r2, [pc, #116]	; (8009f30 <HAL_RCC_OscConfig+0x508>)
 8009eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ebe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ec0:	f7fb fde0 	bl	8005a84 <HAL_GetTick>
 8009ec4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ec8:	f7fb fddc 	bl	8005a84 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e1b8      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009eda:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <HAL_RCC_OscConfig+0x508>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0f0      	beq.n	8009ec8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d108      	bne.n	8009f00 <HAL_RCC_OscConfig+0x4d8>
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009ef6:	f043 0301 	orr.w	r3, r3, #1
 8009efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009efe:	e029      	b.n	8009f54 <HAL_RCC_OscConfig+0x52c>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	2b05      	cmp	r3, #5
 8009f06:	d115      	bne.n	8009f34 <HAL_RCC_OscConfig+0x50c>
 8009f08:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0e:	4a07      	ldr	r2, [pc, #28]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009f10:	f043 0304 	orr.w	r3, r3, #4
 8009f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f18:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1e:	4a03      	ldr	r2, [pc, #12]	; (8009f2c <HAL_RCC_OscConfig+0x504>)
 8009f20:	f043 0301 	orr.w	r3, r3, #1
 8009f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f28:	e014      	b.n	8009f54 <HAL_RCC_OscConfig+0x52c>
 8009f2a:	bf00      	nop
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	40007000 	.word	0x40007000
 8009f34:	4b9d      	ldr	r3, [pc, #628]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f3a:	4a9c      	ldr	r2, [pc, #624]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009f3c:	f023 0301 	bic.w	r3, r3, #1
 8009f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f44:	4b99      	ldr	r3, [pc, #612]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f4a:	4a98      	ldr	r2, [pc, #608]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009f4c:	f023 0304 	bic.w	r3, r3, #4
 8009f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d016      	beq.n	8009f8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f5c:	f7fb fd92 	bl	8005a84 <HAL_GetTick>
 8009f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f62:	e00a      	b.n	8009f7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f64:	f7fb fd8e 	bl	8005a84 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d901      	bls.n	8009f7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e168      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f7a:	4b8c      	ldr	r3, [pc, #560]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f80:	f003 0302 	and.w	r3, r3, #2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0ed      	beq.n	8009f64 <HAL_RCC_OscConfig+0x53c>
 8009f88:	e015      	b.n	8009fb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f8a:	f7fb fd7b 	bl	8005a84 <HAL_GetTick>
 8009f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f90:	e00a      	b.n	8009fa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f92:	f7fb fd77 	bl	8005a84 <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d901      	bls.n	8009fa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e151      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009fa8:	4b80      	ldr	r3, [pc, #512]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1ed      	bne.n	8009f92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fb6:	7ffb      	ldrb	r3, [r7, #31]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d105      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fbc:	4b7b      	ldr	r3, [pc, #492]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc0:	4a7a      	ldr	r2, [pc, #488]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0320 	and.w	r3, r3, #32
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d03c      	beq.n	800a04e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01c      	beq.n	800a016 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009fdc:	4b73      	ldr	r3, [pc, #460]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fe2:	4a72      	ldr	r2, [pc, #456]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 8009fe4:	f043 0301 	orr.w	r3, r3, #1
 8009fe8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fec:	f7fb fd4a 	bl	8005a84 <HAL_GetTick>
 8009ff0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ff2:	e008      	b.n	800a006 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ff4:	f7fb fd46 	bl	8005a84 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d901      	bls.n	800a006 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e122      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a006:	4b69      	ldr	r3, [pc, #420]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0ef      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x5cc>
 800a014:	e01b      	b.n	800a04e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a016:	4b65      	ldr	r3, [pc, #404]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a01c:	4a63      	ldr	r2, [pc, #396]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a01e:	f023 0301 	bic.w	r3, r3, #1
 800a022:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a026:	f7fb fd2d 	bl	8005a84 <HAL_GetTick>
 800a02a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a02c:	e008      	b.n	800a040 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a02e:	f7fb fd29 	bl	8005a84 <HAL_GetTick>
 800a032:	4602      	mov	r2, r0
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d901      	bls.n	800a040 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e105      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a040:	4b5a      	ldr	r3, [pc, #360]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1ef      	bne.n	800a02e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 80f9 	beq.w	800a24a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	f040 80cf 	bne.w	800a200 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a062:	4b52      	ldr	r3, [pc, #328]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f003 0203 	and.w	r2, r3, #3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	429a      	cmp	r2, r3
 800a074:	d12c      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a080:	3b01      	subs	r3, #1
 800a082:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a084:	429a      	cmp	r2, r3
 800a086:	d123      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a092:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a094:	429a      	cmp	r2, r3
 800a096:	d11b      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d113      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b2:	085b      	lsrs	r3, r3, #1
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d109      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	085b      	lsrs	r3, r3, #1
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d071      	beq.n	800a1b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	2b0c      	cmp	r3, #12
 800a0d4:	d068      	beq.n	800a1a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a0d6:	4b35      	ldr	r3, [pc, #212]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d105      	bne.n	800a0ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a0e2:	4b32      	ldr	r3, [pc, #200]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e0ac      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a0f2:	4b2e      	ldr	r3, [pc, #184]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a2d      	ldr	r2, [pc, #180]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a0f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a0fe:	f7fb fcc1 	bl	8005a84 <HAL_GetTick>
 800a102:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a104:	e008      	b.n	800a118 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a106:	f7fb fcbd 	bl	8005a84 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d901      	bls.n	800a118 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e099      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a118:	4b24      	ldr	r3, [pc, #144]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1f0      	bne.n	800a106 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a124:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a126:	68da      	ldr	r2, [r3, #12]
 800a128:	4b21      	ldr	r3, [pc, #132]	; (800a1b0 <HAL_RCC_OscConfig+0x788>)
 800a12a:	4013      	ands	r3, r2
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a134:	3a01      	subs	r2, #1
 800a136:	0112      	lsls	r2, r2, #4
 800a138:	4311      	orrs	r1, r2
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a13e:	0212      	lsls	r2, r2, #8
 800a140:	4311      	orrs	r1, r2
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a146:	0852      	lsrs	r2, r2, #1
 800a148:	3a01      	subs	r2, #1
 800a14a:	0552      	lsls	r2, r2, #21
 800a14c:	4311      	orrs	r1, r2
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a152:	0852      	lsrs	r2, r2, #1
 800a154:	3a01      	subs	r2, #1
 800a156:	0652      	lsls	r2, r2, #25
 800a158:	4311      	orrs	r1, r2
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a15e:	06d2      	lsls	r2, r2, #27
 800a160:	430a      	orrs	r2, r1
 800a162:	4912      	ldr	r1, [pc, #72]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a164:	4313      	orrs	r3, r2
 800a166:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a168:	4b10      	ldr	r3, [pc, #64]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a0f      	ldr	r2, [pc, #60]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a16e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a172:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a174:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	4a0c      	ldr	r2, [pc, #48]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a17a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a17e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a180:	f7fb fc80 	bl	8005a84 <HAL_GetTick>
 800a184:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a186:	e008      	b.n	800a19a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a188:	f7fb fc7c 	bl	8005a84 <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b02      	cmp	r3, #2
 800a194:	d901      	bls.n	800a19a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e058      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a19a:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <HAL_RCC_OscConfig+0x784>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0f0      	beq.n	800a188 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1a6:	e050      	b.n	800a24a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e04f      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
 800a1ac:	40021000 	.word	0x40021000
 800a1b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1b4:	4b27      	ldr	r3, [pc, #156]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d144      	bne.n	800a24a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a1c0:	4b24      	ldr	r3, [pc, #144]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a23      	ldr	r2, [pc, #140]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a1c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a1cc:	4b21      	ldr	r3, [pc, #132]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	4a20      	ldr	r2, [pc, #128]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a1d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a1d8:	f7fb fc54 	bl	8005a84 <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1de:	e008      	b.n	800a1f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1e0:	f7fb fc50 	bl	8005a84 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e02c      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1f2:	4b18      	ldr	r3, [pc, #96]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0f0      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x7b8>
 800a1fe:	e024      	b.n	800a24a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b0c      	cmp	r3, #12
 800a204:	d01f      	beq.n	800a246 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a206:	4b13      	ldr	r3, [pc, #76]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a12      	ldr	r2, [pc, #72]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a20c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a212:	f7fb fc37 	bl	8005a84 <HAL_GetTick>
 800a216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a218:	e008      	b.n	800a22c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a21a:	f7fb fc33 	bl	8005a84 <HAL_GetTick>
 800a21e:	4602      	mov	r2, r0
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	2b02      	cmp	r3, #2
 800a226:	d901      	bls.n	800a22c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e00f      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a22c:	4b09      	ldr	r3, [pc, #36]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1f0      	bne.n	800a21a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a238:	4b06      	ldr	r3, [pc, #24]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	4905      	ldr	r1, [pc, #20]	; (800a254 <HAL_RCC_OscConfig+0x82c>)
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <HAL_RCC_OscConfig+0x830>)
 800a240:	4013      	ands	r3, r2
 800a242:	60cb      	str	r3, [r1, #12]
 800a244:	e001      	b.n	800a24a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3720      	adds	r7, #32
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	40021000 	.word	0x40021000
 800a258:	feeefffc 	.word	0xfeeefffc

0800a25c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e0e7      	b.n	800a440 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a270:	4b75      	ldr	r3, [pc, #468]	; (800a448 <HAL_RCC_ClockConfig+0x1ec>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0307 	and.w	r3, r3, #7
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d910      	bls.n	800a2a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a27e:	4b72      	ldr	r3, [pc, #456]	; (800a448 <HAL_RCC_ClockConfig+0x1ec>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f023 0207 	bic.w	r2, r3, #7
 800a286:	4970      	ldr	r1, [pc, #448]	; (800a448 <HAL_RCC_ClockConfig+0x1ec>)
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a28e:	4b6e      	ldr	r3, [pc, #440]	; (800a448 <HAL_RCC_ClockConfig+0x1ec>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d001      	beq.n	800a2a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e0cf      	b.n	800a440 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0302 	and.w	r3, r3, #2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d010      	beq.n	800a2ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689a      	ldr	r2, [r3, #8]
 800a2b0:	4b66      	ldr	r3, [pc, #408]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d908      	bls.n	800a2ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2bc:	4b63      	ldr	r3, [pc, #396]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	4960      	ldr	r1, [pc, #384]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d04c      	beq.n	800a374 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d107      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2e2:	4b5a      	ldr	r3, [pc, #360]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d121      	bne.n	800a332 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e0a6      	b.n	800a440 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d107      	bne.n	800a30a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2fa:	4b54      	ldr	r3, [pc, #336]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d115      	bne.n	800a332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e09a      	b.n	800a440 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d107      	bne.n	800a322 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a312:	4b4e      	ldr	r3, [pc, #312]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d109      	bne.n	800a332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e08e      	b.n	800a440 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a322:	4b4a      	ldr	r3, [pc, #296]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e086      	b.n	800a440 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a332:	4b46      	ldr	r3, [pc, #280]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f023 0203 	bic.w	r2, r3, #3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	4943      	ldr	r1, [pc, #268]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a340:	4313      	orrs	r3, r2
 800a342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a344:	f7fb fb9e 	bl	8005a84 <HAL_GetTick>
 800a348:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a34a:	e00a      	b.n	800a362 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a34c:	f7fb fb9a 	bl	8005a84 <HAL_GetTick>
 800a350:	4602      	mov	r2, r0
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	f241 3288 	movw	r2, #5000	; 0x1388
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d901      	bls.n	800a362 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e06e      	b.n	800a440 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a362:	4b3a      	ldr	r3, [pc, #232]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f003 020c 	and.w	r2, r3, #12
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	429a      	cmp	r2, r3
 800a372:	d1eb      	bne.n	800a34c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d010      	beq.n	800a3a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	4b31      	ldr	r3, [pc, #196]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d208      	bcs.n	800a3a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a390:	4b2e      	ldr	r3, [pc, #184]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	492b      	ldr	r1, [pc, #172]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3a2:	4b29      	ldr	r3, [pc, #164]	; (800a448 <HAL_RCC_ClockConfig+0x1ec>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d210      	bcs.n	800a3d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3b0:	4b25      	ldr	r3, [pc, #148]	; (800a448 <HAL_RCC_ClockConfig+0x1ec>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f023 0207 	bic.w	r2, r3, #7
 800a3b8:	4923      	ldr	r1, [pc, #140]	; (800a448 <HAL_RCC_ClockConfig+0x1ec>)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3c0:	4b21      	ldr	r3, [pc, #132]	; (800a448 <HAL_RCC_ClockConfig+0x1ec>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 0307 	and.w	r3, r3, #7
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d001      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e036      	b.n	800a440 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0304 	and.w	r3, r3, #4
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d008      	beq.n	800a3f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3de:	4b1b      	ldr	r3, [pc, #108]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	4918      	ldr	r1, [pc, #96]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0308 	and.w	r3, r3, #8
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a3fc:	4b13      	ldr	r3, [pc, #76]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	4910      	ldr	r1, [pc, #64]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a410:	f000 f824 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800a414:	4602      	mov	r2, r0
 800a416:	4b0d      	ldr	r3, [pc, #52]	; (800a44c <HAL_RCC_ClockConfig+0x1f0>)
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	091b      	lsrs	r3, r3, #4
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	490b      	ldr	r1, [pc, #44]	; (800a450 <HAL_RCC_ClockConfig+0x1f4>)
 800a422:	5ccb      	ldrb	r3, [r1, r3]
 800a424:	f003 031f 	and.w	r3, r3, #31
 800a428:	fa22 f303 	lsr.w	r3, r2, r3
 800a42c:	4a09      	ldr	r2, [pc, #36]	; (800a454 <HAL_RCC_ClockConfig+0x1f8>)
 800a42e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a430:	4b09      	ldr	r3, [pc, #36]	; (800a458 <HAL_RCC_ClockConfig+0x1fc>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f7fb fad5 	bl	80059e4 <HAL_InitTick>
 800a43a:	4603      	mov	r3, r0
 800a43c:	72fb      	strb	r3, [r7, #11]

  return status;
 800a43e:	7afb      	ldrb	r3, [r7, #11]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	40022000 	.word	0x40022000
 800a44c:	40021000 	.word	0x40021000
 800a450:	08012d4c 	.word	0x08012d4c
 800a454:	20000000 	.word	0x20000000
 800a458:	20000100 	.word	0x20000100

0800a45c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b089      	sub	sp, #36	; 0x24
 800a460:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a462:	2300      	movs	r3, #0
 800a464:	61fb      	str	r3, [r7, #28]
 800a466:	2300      	movs	r3, #0
 800a468:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a46a:	4b3e      	ldr	r3, [pc, #248]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f003 030c 	and.w	r3, r3, #12
 800a472:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a474:	4b3b      	ldr	r3, [pc, #236]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d005      	beq.n	800a490 <HAL_RCC_GetSysClockFreq+0x34>
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	2b0c      	cmp	r3, #12
 800a488:	d121      	bne.n	800a4ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d11e      	bne.n	800a4ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a490:	4b34      	ldr	r3, [pc, #208]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0308 	and.w	r3, r3, #8
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d107      	bne.n	800a4ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a49c:	4b31      	ldr	r3, [pc, #196]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a49e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4a2:	0a1b      	lsrs	r3, r3, #8
 800a4a4:	f003 030f 	and.w	r3, r3, #15
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	e005      	b.n	800a4b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a4ac:	4b2d      	ldr	r3, [pc, #180]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	091b      	lsrs	r3, r3, #4
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a4b8:	4a2b      	ldr	r2, [pc, #172]	; (800a568 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10d      	bne.n	800a4e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4cc:	e00a      	b.n	800a4e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d102      	bne.n	800a4da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a4d4:	4b25      	ldr	r3, [pc, #148]	; (800a56c <HAL_RCC_GetSysClockFreq+0x110>)
 800a4d6:	61bb      	str	r3, [r7, #24]
 800a4d8:	e004      	b.n	800a4e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2b08      	cmp	r3, #8
 800a4de:	d101      	bne.n	800a4e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a4e0:	4b23      	ldr	r3, [pc, #140]	; (800a570 <HAL_RCC_GetSysClockFreq+0x114>)
 800a4e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2b0c      	cmp	r3, #12
 800a4e8:	d134      	bne.n	800a554 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a4ea:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d003      	beq.n	800a502 <HAL_RCC_GetSysClockFreq+0xa6>
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d003      	beq.n	800a508 <HAL_RCC_GetSysClockFreq+0xac>
 800a500:	e005      	b.n	800a50e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a502:	4b1a      	ldr	r3, [pc, #104]	; (800a56c <HAL_RCC_GetSysClockFreq+0x110>)
 800a504:	617b      	str	r3, [r7, #20]
      break;
 800a506:	e005      	b.n	800a514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a508:	4b19      	ldr	r3, [pc, #100]	; (800a570 <HAL_RCC_GetSysClockFreq+0x114>)
 800a50a:	617b      	str	r3, [r7, #20]
      break;
 800a50c:	e002      	b.n	800a514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	617b      	str	r3, [r7, #20]
      break;
 800a512:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a514:	4b13      	ldr	r3, [pc, #76]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	091b      	lsrs	r3, r3, #4
 800a51a:	f003 0307 	and.w	r3, r3, #7
 800a51e:	3301      	adds	r3, #1
 800a520:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a522:	4b10      	ldr	r3, [pc, #64]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	0a1b      	lsrs	r3, r3, #8
 800a528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	fb03 f202 	mul.w	r2, r3, r2
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	fbb2 f3f3 	udiv	r3, r2, r3
 800a538:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <HAL_RCC_GetSysClockFreq+0x108>)
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	0e5b      	lsrs	r3, r3, #25
 800a540:	f003 0303 	and.w	r3, r3, #3
 800a544:	3301      	adds	r3, #1
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a552:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a554:	69bb      	ldr	r3, [r7, #24]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3724      	adds	r7, #36	; 0x24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	40021000 	.word	0x40021000
 800a568:	08012d64 	.word	0x08012d64
 800a56c:	00f42400 	.word	0x00f42400
 800a570:	007a1200 	.word	0x007a1200

0800a574 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a578:	4b03      	ldr	r3, [pc, #12]	; (800a588 <HAL_RCC_GetHCLKFreq+0x14>)
 800a57a:	681b      	ldr	r3, [r3, #0]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	20000000 	.word	0x20000000

0800a58c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a590:	f7ff fff0 	bl	800a574 <HAL_RCC_GetHCLKFreq>
 800a594:	4602      	mov	r2, r0
 800a596:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	0a1b      	lsrs	r3, r3, #8
 800a59c:	f003 0307 	and.w	r3, r3, #7
 800a5a0:	4904      	ldr	r1, [pc, #16]	; (800a5b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a5a2:	5ccb      	ldrb	r3, [r1, r3]
 800a5a4:	f003 031f 	and.w	r3, r3, #31
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	40021000 	.word	0x40021000
 800a5b4:	08012d5c 	.word	0x08012d5c

0800a5b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a5bc:	f7ff ffda 	bl	800a574 <HAL_RCC_GetHCLKFreq>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	0adb      	lsrs	r3, r3, #11
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	4904      	ldr	r1, [pc, #16]	; (800a5e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5ce:	5ccb      	ldrb	r3, [r1, r3]
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	40021000 	.word	0x40021000
 800a5e0:	08012d5c 	.word	0x08012d5c

0800a5e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a5f0:	4b2a      	ldr	r3, [pc, #168]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a5f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d003      	beq.n	800a604 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a5fc:	f7ff f8ce 	bl	800979c <HAL_PWREx_GetVoltageRange>
 800a600:	6178      	str	r0, [r7, #20]
 800a602:	e014      	b.n	800a62e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a604:	4b25      	ldr	r3, [pc, #148]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a608:	4a24      	ldr	r2, [pc, #144]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a60a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a60e:	6593      	str	r3, [r2, #88]	; 0x58
 800a610:	4b22      	ldr	r3, [pc, #136]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a61c:	f7ff f8be 	bl	800979c <HAL_PWREx_GetVoltageRange>
 800a620:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a622:	4b1e      	ldr	r3, [pc, #120]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	4a1d      	ldr	r2, [pc, #116]	; (800a69c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a62c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a634:	d10b      	bne.n	800a64e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b80      	cmp	r3, #128	; 0x80
 800a63a:	d919      	bls.n	800a670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2ba0      	cmp	r3, #160	; 0xa0
 800a640:	d902      	bls.n	800a648 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a642:	2302      	movs	r3, #2
 800a644:	613b      	str	r3, [r7, #16]
 800a646:	e013      	b.n	800a670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a648:	2301      	movs	r3, #1
 800a64a:	613b      	str	r3, [r7, #16]
 800a64c:	e010      	b.n	800a670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b80      	cmp	r3, #128	; 0x80
 800a652:	d902      	bls.n	800a65a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a654:	2303      	movs	r3, #3
 800a656:	613b      	str	r3, [r7, #16]
 800a658:	e00a      	b.n	800a670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b80      	cmp	r3, #128	; 0x80
 800a65e:	d102      	bne.n	800a666 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a660:	2302      	movs	r3, #2
 800a662:	613b      	str	r3, [r7, #16]
 800a664:	e004      	b.n	800a670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b70      	cmp	r3, #112	; 0x70
 800a66a:	d101      	bne.n	800a670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a66c:	2301      	movs	r3, #1
 800a66e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a670:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f023 0207 	bic.w	r2, r3, #7
 800a678:	4909      	ldr	r1, [pc, #36]	; (800a6a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0307 	and.w	r3, r3, #7
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d001      	beq.n	800a692 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	40021000 	.word	0x40021000
 800a6a0:	40022000 	.word	0x40022000

0800a6a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d041      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a6c8:	d02a      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a6ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a6ce:	d824      	bhi.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a6d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6d4:	d008      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a6d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6da:	d81e      	bhi.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00a      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a6e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6e4:	d010      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a6e6:	e018      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a6e8:	4b86      	ldr	r3, [pc, #536]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	4a85      	ldr	r2, [pc, #532]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a6ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a6f4:	e015      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 f895 	bl	800b82c <RCCEx_PLLSAI1_Config>
 800a702:	4603      	mov	r3, r0
 800a704:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a706:	e00c      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3320      	adds	r3, #32
 800a70c:	2100      	movs	r1, #0
 800a70e:	4618      	mov	r0, r3
 800a710:	f001 f97e 	bl	800ba10 <RCCEx_PLLSAI2_Config>
 800a714:	4603      	mov	r3, r0
 800a716:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a718:	e003      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	74fb      	strb	r3, [r7, #19]
      break;
 800a71e:	e000      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a720:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a722:	7cfb      	ldrb	r3, [r7, #19]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a728:	4b76      	ldr	r3, [pc, #472]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a736:	4973      	ldr	r1, [pc, #460]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a73e:	e001      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a740:	7cfb      	ldrb	r3, [r7, #19]
 800a742:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d041      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a754:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a758:	d02a      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a75a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a75e:	d824      	bhi.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a764:	d008      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a76a:	d81e      	bhi.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a774:	d010      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a776:	e018      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a778:	4b62      	ldr	r3, [pc, #392]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	4a61      	ldr	r2, [pc, #388]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a77e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a782:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a784:	e015      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3304      	adds	r3, #4
 800a78a:	2100      	movs	r1, #0
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 f84d 	bl	800b82c <RCCEx_PLLSAI1_Config>
 800a792:	4603      	mov	r3, r0
 800a794:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a796:	e00c      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3320      	adds	r3, #32
 800a79c:	2100      	movs	r1, #0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 f936 	bl	800ba10 <RCCEx_PLLSAI2_Config>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a7a8:	e003      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	74fb      	strb	r3, [r7, #19]
      break;
 800a7ae:	e000      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a7b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7b2:	7cfb      	ldrb	r3, [r7, #19]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10b      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a7b8:	4b52      	ldr	r3, [pc, #328]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7c6:	494f      	ldr	r1, [pc, #316]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a7ce:	e001      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d0:	7cfb      	ldrb	r3, [r7, #19]
 800a7d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 80a0 	beq.w	800a922 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a7e6:	4b47      	ldr	r3, [pc, #284]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00d      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7fc:	4b41      	ldr	r3, [pc, #260]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a7fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a800:	4a40      	ldr	r2, [pc, #256]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a806:	6593      	str	r3, [r2, #88]	; 0x58
 800a808:	4b3e      	ldr	r3, [pc, #248]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a810:	60bb      	str	r3, [r7, #8]
 800a812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a814:	2301      	movs	r3, #1
 800a816:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a818:	4b3b      	ldr	r3, [pc, #236]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a3a      	ldr	r2, [pc, #232]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a81e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a822:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a824:	f7fb f92e 	bl	8005a84 <HAL_GetTick>
 800a828:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a82a:	e009      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a82c:	f7fb f92a 	bl	8005a84 <HAL_GetTick>
 800a830:	4602      	mov	r2, r0
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	2b02      	cmp	r3, #2
 800a838:	d902      	bls.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	74fb      	strb	r3, [r7, #19]
        break;
 800a83e:	e005      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a840:	4b31      	ldr	r3, [pc, #196]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0ef      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a84c:	7cfb      	ldrb	r3, [r7, #19]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d15c      	bne.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a852:	4b2c      	ldr	r3, [pc, #176]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a85c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01f      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d019      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a870:	4b24      	ldr	r3, [pc, #144]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a87a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a87c:	4b21      	ldr	r3, [pc, #132]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a87e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a882:	4a20      	ldr	r2, [pc, #128]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a88c:	4b1d      	ldr	r3, [pc, #116]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a892:	4a1c      	ldr	r2, [pc, #112]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a89c:	4a19      	ldr	r2, [pc, #100]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d016      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ae:	f7fb f8e9 	bl	8005a84 <HAL_GetTick>
 800a8b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8b4:	e00b      	b.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8b6:	f7fb f8e5 	bl	8005a84 <HAL_GetTick>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d902      	bls.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	74fb      	strb	r3, [r7, #19]
            break;
 800a8cc:	e006      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8ce:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8d4:	f003 0302 	and.w	r3, r3, #2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d0ec      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a8dc:	7cfb      	ldrb	r3, [r7, #19]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10c      	bne.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8e2:	4b08      	ldr	r3, [pc, #32]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f2:	4904      	ldr	r1, [pc, #16]	; (800a904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a8fa:	e009      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a8fc:	7cfb      	ldrb	r3, [r7, #19]
 800a8fe:	74bb      	strb	r3, [r7, #18]
 800a900:	e006      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a902:	bf00      	nop
 800a904:	40021000 	.word	0x40021000
 800a908:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90c:	7cfb      	ldrb	r3, [r7, #19]
 800a90e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a910:	7c7b      	ldrb	r3, [r7, #17]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d105      	bne.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a916:	4ba6      	ldr	r3, [pc, #664]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91a:	4aa5      	ldr	r2, [pc, #660]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a91c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a920:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00a      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a92e:	4ba0      	ldr	r3, [pc, #640]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a934:	f023 0203 	bic.w	r2, r3, #3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93c:	499c      	ldr	r1, [pc, #624]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00a      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a950:	4b97      	ldr	r3, [pc, #604]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a956:	f023 020c 	bic.w	r2, r3, #12
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95e:	4994      	ldr	r1, [pc, #592]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a960:	4313      	orrs	r3, r2
 800a962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0304 	and.w	r3, r3, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00a      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a972:	4b8f      	ldr	r3, [pc, #572]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a978:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a980:	498b      	ldr	r1, [pc, #556]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a982:	4313      	orrs	r3, r2
 800a984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00a      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a994:	4b86      	ldr	r3, [pc, #536]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	4983      	ldr	r1, [pc, #524]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0310 	and.w	r3, r3, #16
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a9b6:	4b7e      	ldr	r3, [pc, #504]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c4:	497a      	ldr	r1, [pc, #488]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 0320 	and.w	r3, r3, #32
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00a      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9d8:	4b75      	ldr	r3, [pc, #468]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e6:	4972      	ldr	r1, [pc, #456]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9fa:	4b6d      	ldr	r3, [pc, #436]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa08:	4969      	ldr	r1, [pc, #420]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa1c:	4b64      	ldr	r3, [pc, #400]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa2a:	4961      	ldr	r1, [pc, #388]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aa3e:	4b5c      	ldr	r3, [pc, #368]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4c:	4958      	ldr	r1, [pc, #352]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00a      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aa60:	4b53      	ldr	r3, [pc, #332]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6e:	4950      	ldr	r1, [pc, #320]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00a      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aa82:	4b4b      	ldr	r3, [pc, #300]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa90:	4947      	ldr	r1, [pc, #284]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aa92:	4313      	orrs	r3, r2
 800aa94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00a      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aaa4:	4b42      	ldr	r3, [pc, #264]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aaa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aaaa:	f023 0203 	bic.w	r2, r3, #3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab2:	493f      	ldr	r1, [pc, #252]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aab4:	4313      	orrs	r3, r2
 800aab6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d028      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aac6:	4b3a      	ldr	r3, [pc, #232]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aacc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad4:	4936      	ldr	r1, [pc, #216]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aae4:	d106      	bne.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aae6:	4b32      	ldr	r3, [pc, #200]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	4a31      	ldr	r2, [pc, #196]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aaec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaf0:	60d3      	str	r3, [r2, #12]
 800aaf2:	e011      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aafc:	d10c      	bne.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3304      	adds	r3, #4
 800ab02:	2101      	movs	r1, #1
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 fe91 	bl	800b82c <RCCEx_PLLSAI1_Config>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ab0e:	7cfb      	ldrb	r3, [r7, #19]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d001      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800ab14:	7cfb      	ldrb	r3, [r7, #19]
 800ab16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d028      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ab24:	4b22      	ldr	r3, [pc, #136]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ab26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab32:	491f      	ldr	r1, [pc, #124]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab42:	d106      	bne.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab44:	4b1a      	ldr	r3, [pc, #104]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	4a19      	ldr	r2, [pc, #100]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ab4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab4e:	60d3      	str	r3, [r2, #12]
 800ab50:	e011      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab5a:	d10c      	bne.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	2101      	movs	r1, #1
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 fe62 	bl	800b82c <RCCEx_PLLSAI1_Config>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ab6c:	7cfb      	ldrb	r3, [r7, #19]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800ab72:	7cfb      	ldrb	r3, [r7, #19]
 800ab74:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d02a      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab82:	4b0b      	ldr	r3, [pc, #44]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ab84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab90:	4907      	ldr	r1, [pc, #28]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ab92:	4313      	orrs	r3, r2
 800ab94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aba0:	d108      	bne.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aba2:	4b03      	ldr	r3, [pc, #12]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	4a02      	ldr	r2, [pc, #8]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800aba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abac:	60d3      	str	r3, [r2, #12]
 800abae:	e013      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800abb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abbc:	d10c      	bne.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3304      	adds	r3, #4
 800abc2:	2101      	movs	r1, #1
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fe31 	bl	800b82c <RCCEx_PLLSAI1_Config>
 800abca:	4603      	mov	r3, r0
 800abcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800abce:	7cfb      	ldrb	r3, [r7, #19]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800abd4:	7cfb      	ldrb	r3, [r7, #19]
 800abd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d02f      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abe4:	4b2c      	ldr	r3, [pc, #176]	; (800ac98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800abe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abf2:	4929      	ldr	r1, [pc, #164]	; (800ac98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac02:	d10d      	bne.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	3304      	adds	r3, #4
 800ac08:	2102      	movs	r1, #2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fe0e 	bl	800b82c <RCCEx_PLLSAI1_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ac14:	7cfb      	ldrb	r3, [r7, #19]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d014      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800ac1a:	7cfb      	ldrb	r3, [r7, #19]
 800ac1c:	74bb      	strb	r3, [r7, #18]
 800ac1e:	e011      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac28:	d10c      	bne.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	3320      	adds	r3, #32
 800ac2e:	2102      	movs	r1, #2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 feed 	bl	800ba10 <RCCEx_PLLSAI2_Config>
 800ac36:	4603      	mov	r3, r0
 800ac38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ac3a:	7cfb      	ldrb	r3, [r7, #19]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800ac40:	7cfb      	ldrb	r3, [r7, #19]
 800ac42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00b      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac50:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800ac52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac60:	490d      	ldr	r1, [pc, #52]	; (800ac98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ac74:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800ac76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac84:	4904      	ldr	r1, [pc, #16]	; (800ac98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ac8c:	7cbb      	ldrb	r3, [r7, #18]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	40021000 	.word	0x40021000

0800ac9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800aca4:	2300      	movs	r3, #0
 800aca6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acae:	d13e      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800acb0:	4bb4      	ldr	r3, [pc, #720]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800acb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acba:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acc2:	d028      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acca:	f200 858c 	bhi.w	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acd4:	d005      	beq.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acdc:	d00e      	beq.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800acde:	f000 bd82 	b.w	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ace2:	4ba8      	ldr	r3, [pc, #672]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800ace4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ace8:	f003 0302 	and.w	r3, r3, #2
 800acec:	2b02      	cmp	r3, #2
 800acee:	f040 857c 	bne.w	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 800acf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acf6:	61fb      	str	r3, [r7, #28]
      break;
 800acf8:	f000 bd77 	b.w	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800acfc:	4ba1      	ldr	r3, [pc, #644]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800acfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	f040 8571 	bne.w	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 800ad0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ad10:	61fb      	str	r3, [r7, #28]
      break;
 800ad12:	f000 bd6c 	b.w	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad16:	4b9b      	ldr	r3, [pc, #620]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad22:	f040 8566 	bne.w	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800ad26:	4b98      	ldr	r3, [pc, #608]	; (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800ad28:	61fb      	str	r3, [r7, #28]
      break;
 800ad2a:	f000 bd62 	b.w	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad2e:	4b95      	ldr	r3, [pc, #596]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	f003 0303 	and.w	r3, r3, #3
 800ad36:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d036      	beq.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d840      	bhi.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d003      	beq.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d020      	beq.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800ad50:	e039      	b.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ad52:	4b8c      	ldr	r3, [pc, #560]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0302 	and.w	r3, r3, #2
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d116      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ad5e:	4b89      	ldr	r3, [pc, #548]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0308 	and.w	r3, r3, #8
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800ad6a:	4b86      	ldr	r3, [pc, #536]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	091b      	lsrs	r3, r3, #4
 800ad70:	f003 030f 	and.w	r3, r3, #15
 800ad74:	e005      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800ad76:	4b83      	ldr	r3, [pc, #524]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800ad78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad7c:	0a1b      	lsrs	r3, r3, #8
 800ad7e:	f003 030f 	and.w	r3, r3, #15
 800ad82:	4a82      	ldr	r2, [pc, #520]	; (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800ad84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800ad8a:	e01f      	b.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	61bb      	str	r3, [r7, #24]
      break;
 800ad90:	e01c      	b.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad92:	4b7c      	ldr	r3, [pc, #496]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad9e:	d102      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800ada0:	4b7b      	ldr	r3, [pc, #492]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ada2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800ada4:	e012      	b.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	61bb      	str	r3, [r7, #24]
      break;
 800adaa:	e00f      	b.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adac:	4b75      	ldr	r3, [pc, #468]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adb8:	d102      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800adba:	4b76      	ldr	r3, [pc, #472]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800adbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800adbe:	e005      	b.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	61bb      	str	r3, [r7, #24]
      break;
 800adc4:	e002      	b.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61bb      	str	r3, [r7, #24]
      break;
 800adca:	bf00      	nop
    }

    switch(PeriphClk)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800add2:	f000 842a 	beq.w	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800addc:	f200 850b 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ade6:	f000 80df 	beq.w	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800adf0:	f200 8501 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800adfa:	f000 80d5 	beq.w	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae04:	f200 84f7 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae0e:	f000 8377 	beq.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae18:	f200 84ed 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae22:	f000 84c3 	beq.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae2c:	f200 84e3 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae36:	f000 82e6 	beq.w	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae40:	f200 84d9 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae4a:	f000 80ad 	beq.w	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae54:	f200 84cf 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae5e:	f000 809b 	beq.w	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae68:	f200 84c5 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae72:	d07f      	beq.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae7a:	f200 84bc 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae84:	f000 8448 	beq.w	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae8e:	f200 84b2 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae98:	f000 83f0 	beq.w	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aea2:	f200 84a8 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeac:	f000 8391 	beq.w	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb6:	f200 849e 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b80      	cmp	r3, #128	; 0x80
 800aebe:	f000 835c 	beq.w	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b80      	cmp	r3, #128	; 0x80
 800aec6:	f200 8496 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b20      	cmp	r3, #32
 800aece:	d84b      	bhi.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f000 848f 	beq.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	2b1f      	cmp	r3, #31
 800aede:	f200 848a 	bhi.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800aee2:	a201      	add	r2, pc, #4	; (adr r2, 800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800b0ff 	.word	0x0800b0ff
 800aeec:	0800b16f 	.word	0x0800b16f
 800aef0:	0800b7f7 	.word	0x0800b7f7
 800aef4:	0800b203 	.word	0x0800b203
 800aef8:	0800b7f7 	.word	0x0800b7f7
 800aefc:	0800b7f7 	.word	0x0800b7f7
 800af00:	0800b7f7 	.word	0x0800b7f7
 800af04:	0800b28b 	.word	0x0800b28b
 800af08:	0800b7f7 	.word	0x0800b7f7
 800af0c:	0800b7f7 	.word	0x0800b7f7
 800af10:	0800b7f7 	.word	0x0800b7f7
 800af14:	0800b7f7 	.word	0x0800b7f7
 800af18:	0800b7f7 	.word	0x0800b7f7
 800af1c:	0800b7f7 	.word	0x0800b7f7
 800af20:	0800b7f7 	.word	0x0800b7f7
 800af24:	0800b303 	.word	0x0800b303
 800af28:	0800b7f7 	.word	0x0800b7f7
 800af2c:	0800b7f7 	.word	0x0800b7f7
 800af30:	0800b7f7 	.word	0x0800b7f7
 800af34:	0800b7f7 	.word	0x0800b7f7
 800af38:	0800b7f7 	.word	0x0800b7f7
 800af3c:	0800b7f7 	.word	0x0800b7f7
 800af40:	0800b7f7 	.word	0x0800b7f7
 800af44:	0800b7f7 	.word	0x0800b7f7
 800af48:	0800b7f7 	.word	0x0800b7f7
 800af4c:	0800b7f7 	.word	0x0800b7f7
 800af50:	0800b7f7 	.word	0x0800b7f7
 800af54:	0800b7f7 	.word	0x0800b7f7
 800af58:	0800b7f7 	.word	0x0800b7f7
 800af5c:	0800b7f7 	.word	0x0800b7f7
 800af60:	0800b7f7 	.word	0x0800b7f7
 800af64:	0800b385 	.word	0x0800b385
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b40      	cmp	r3, #64	; 0x40
 800af6c:	f000 82d9 	beq.w	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800af70:	f000 bc41 	b.w	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800af74:	69b9      	ldr	r1, [r7, #24]
 800af76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af7a:	f000 fe25 	bl	800bbc8 <RCCEx_GetSAIxPeriphCLKFreq>
 800af7e:	61f8      	str	r0, [r7, #28]
      break;
 800af80:	f000 bc3a 	b.w	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800af84:	40021000 	.word	0x40021000
 800af88:	0003d090 	.word	0x0003d090
 800af8c:	08012d64 	.word	0x08012d64
 800af90:	00f42400 	.word	0x00f42400
 800af94:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800af98:	69b9      	ldr	r1, [r7, #24]
 800af9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800af9e:	f000 fe13 	bl	800bbc8 <RCCEx_GetSAIxPeriphCLKFreq>
 800afa2:	61f8      	str	r0, [r7, #28]
      break;
 800afa4:	f000 bc28 	b.w	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800afa8:	4ba6      	ldr	r3, [pc, #664]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800afaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afae:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800afb2:	613b      	str	r3, [r7, #16]
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800afba:	d015      	beq.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800afc2:	f200 8092 	bhi.w	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afcc:	d029      	beq.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afd4:	f200 8089 	bhi.w	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d07b      	beq.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afe4:	d04a      	beq.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800afe6:	e080      	b.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800afe8:	4b96      	ldr	r3, [pc, #600]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 0302 	and.w	r3, r3, #2
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d17c      	bne.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800aff4:	4b93      	ldr	r3, [pc, #588]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 0308 	and.w	r3, r3, #8
 800affc:	2b00      	cmp	r3, #0
 800affe:	d005      	beq.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b000:	4b90      	ldr	r3, [pc, #576]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	091b      	lsrs	r3, r3, #4
 800b006:	f003 030f 	and.w	r3, r3, #15
 800b00a:	e005      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800b00c:	4b8d      	ldr	r3, [pc, #564]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b00e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	f003 030f 	and.w	r3, r3, #15
 800b018:	4a8b      	ldr	r2, [pc, #556]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b01e:	61fb      	str	r3, [r7, #28]
          break;
 800b020:	e065      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b022:	4b88      	ldr	r3, [pc, #544]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b02a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b02e:	d160      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b030:	4b84      	ldr	r3, [pc, #528]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b03c:	d159      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b03e:	4b81      	ldr	r3, [pc, #516]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	0a1b      	lsrs	r3, r3, #8
 800b044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b048:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	fb03 f202 	mul.w	r2, r3, r2
 800b052:	4b7c      	ldr	r3, [pc, #496]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	091b      	lsrs	r3, r3, #4
 800b058:	f003 0307 	and.w	r3, r3, #7
 800b05c:	3301      	adds	r3, #1
 800b05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b062:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b064:	4b77      	ldr	r3, [pc, #476]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	0d5b      	lsrs	r3, r3, #21
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	3301      	adds	r3, #1
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	fbb2 f3f3 	udiv	r3, r2, r3
 800b078:	61fb      	str	r3, [r7, #28]
          break;
 800b07a:	e03a      	b.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800b07c:	4b71      	ldr	r3, [pc, #452]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b088:	d135      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800b08a:	4b6e      	ldr	r3, [pc, #440]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b096:	d12e      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b098:	4b6a      	ldr	r3, [pc, #424]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	0a1b      	lsrs	r3, r3, #8
 800b09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	fb03 f202 	mul.w	r2, r3, r2
 800b0ac:	4b65      	ldr	r3, [pc, #404]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	091b      	lsrs	r3, r3, #4
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0bc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800b0be:	4b61      	ldr	r3, [pc, #388]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	0d5b      	lsrs	r3, r3, #21
 800b0c4:	f003 0303 	and.w	r3, r3, #3
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	005b      	lsls	r3, r3, #1
 800b0cc:	69ba      	ldr	r2, [r7, #24]
 800b0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d2:	61fb      	str	r3, [r7, #28]
          break;
 800b0d4:	e00f      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800b0d6:	4b5b      	ldr	r3, [pc, #364]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b0d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0dc:	f003 0302 	and.w	r3, r3, #2
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d10a      	bne.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800b0e4:	4b59      	ldr	r3, [pc, #356]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800b0e6:	61fb      	str	r3, [r7, #28]
          break;
 800b0e8:	e007      	b.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800b0ea:	bf00      	nop
 800b0ec:	e384      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b0ee:	bf00      	nop
 800b0f0:	e382      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b0f2:	bf00      	nop
 800b0f4:	e380      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b0f6:	bf00      	nop
 800b0f8:	e37e      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b0fa:	bf00      	nop
        break;
 800b0fc:	e37c      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b0fe:	4b51      	ldr	r3, [pc, #324]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	613b      	str	r3, [r7, #16]
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2b03      	cmp	r3, #3
 800b10e:	d828      	bhi.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800b110:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800b112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b116:	bf00      	nop
 800b118:	0800b129 	.word	0x0800b129
 800b11c:	0800b131 	.word	0x0800b131
 800b120:	0800b139 	.word	0x0800b139
 800b124:	0800b14d 	.word	0x0800b14d
          frequency = HAL_RCC_GetPCLK2Freq();
 800b128:	f7ff fa46 	bl	800a5b8 <HAL_RCC_GetPCLK2Freq>
 800b12c:	61f8      	str	r0, [r7, #28]
          break;
 800b12e:	e01d      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 800b130:	f7ff f994 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b134:	61f8      	str	r0, [r7, #28]
          break;
 800b136:	e019      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b138:	4b42      	ldr	r3, [pc, #264]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b144:	d10f      	bne.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800b146:	4b42      	ldr	r3, [pc, #264]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800b148:	61fb      	str	r3, [r7, #28]
          break;
 800b14a:	e00c      	b.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b14c:	4b3d      	ldr	r3, [pc, #244]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b152:	f003 0302 	and.w	r3, r3, #2
 800b156:	2b02      	cmp	r3, #2
 800b158:	d107      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800b15a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b15e:	61fb      	str	r3, [r7, #28]
          break;
 800b160:	e003      	b.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800b162:	bf00      	nop
 800b164:	e348      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b166:	bf00      	nop
 800b168:	e346      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b16a:	bf00      	nop
        break;
 800b16c:	e344      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b16e:	4b35      	ldr	r3, [pc, #212]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b174:	f003 030c 	and.w	r3, r3, #12
 800b178:	613b      	str	r3, [r7, #16]
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	2b0c      	cmp	r3, #12
 800b17e:	d83a      	bhi.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800b180:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b186:	bf00      	nop
 800b188:	0800b1bd 	.word	0x0800b1bd
 800b18c:	0800b1f7 	.word	0x0800b1f7
 800b190:	0800b1f7 	.word	0x0800b1f7
 800b194:	0800b1f7 	.word	0x0800b1f7
 800b198:	0800b1c5 	.word	0x0800b1c5
 800b19c:	0800b1f7 	.word	0x0800b1f7
 800b1a0:	0800b1f7 	.word	0x0800b1f7
 800b1a4:	0800b1f7 	.word	0x0800b1f7
 800b1a8:	0800b1cd 	.word	0x0800b1cd
 800b1ac:	0800b1f7 	.word	0x0800b1f7
 800b1b0:	0800b1f7 	.word	0x0800b1f7
 800b1b4:	0800b1f7 	.word	0x0800b1f7
 800b1b8:	0800b1e1 	.word	0x0800b1e1
          frequency = HAL_RCC_GetPCLK1Freq();
 800b1bc:	f7ff f9e6 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b1c0:	61f8      	str	r0, [r7, #28]
          break;
 800b1c2:	e01d      	b.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800b1c4:	f7ff f94a 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b1c8:	61f8      	str	r0, [r7, #28]
          break;
 800b1ca:	e019      	b.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1cc:	4b1d      	ldr	r3, [pc, #116]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1d8:	d10f      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800b1da:	4b1d      	ldr	r3, [pc, #116]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800b1dc:	61fb      	str	r3, [r7, #28]
          break;
 800b1de:	e00c      	b.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b1e0:	4b18      	ldr	r3, [pc, #96]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1e6:	f003 0302 	and.w	r3, r3, #2
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d107      	bne.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800b1ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1f2:	61fb      	str	r3, [r7, #28]
          break;
 800b1f4:	e003      	b.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800b1f6:	bf00      	nop
 800b1f8:	e2fe      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b1fa:	bf00      	nop
 800b1fc:	e2fc      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b1fe:	bf00      	nop
        break;
 800b200:	e2fa      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b202:	4b10      	ldr	r3, [pc, #64]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800b204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b208:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b20c:	613b      	str	r3, [r7, #16]
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b30      	cmp	r3, #48	; 0x30
 800b212:	d029      	beq.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	2b30      	cmp	r3, #48	; 0x30
 800b218:	d831      	bhi.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	2b20      	cmp	r3, #32
 800b21e:	d019      	beq.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	2b20      	cmp	r3, #32
 800b224:	d82b      	bhi.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	2b10      	cmp	r3, #16
 800b230:	d004      	beq.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 800b232:	e024      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b234:	f7ff f9aa 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b238:	61f8      	str	r0, [r7, #28]
          break;
 800b23a:	e025      	b.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800b23c:	f7ff f90e 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b240:	61f8      	str	r0, [r7, #28]
          break;
 800b242:	e021      	b.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800b244:	40021000 	.word	0x40021000
 800b248:	08012d64 	.word	0x08012d64
 800b24c:	02dc6c00 	.word	0x02dc6c00
 800b250:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b254:	4b8f      	ldr	r3, [pc, #572]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b25c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b260:	d10f      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 800b262:	4b8d      	ldr	r3, [pc, #564]	; (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800b264:	61fb      	str	r3, [r7, #28]
          break;
 800b266:	e00c      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b268:	4b8a      	ldr	r3, [pc, #552]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b02      	cmp	r3, #2
 800b274:	d107      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 800b276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b27a:	61fb      	str	r3, [r7, #28]
          break;
 800b27c:	e003      	b.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800b27e:	bf00      	nop
 800b280:	e2ba      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b282:	bf00      	nop
 800b284:	e2b8      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b286:	bf00      	nop
        break;
 800b288:	e2b6      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b28a:	4b82      	ldr	r3, [pc, #520]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b290:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b294:	613b      	str	r3, [r7, #16]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2bc0      	cmp	r3, #192	; 0xc0
 800b29a:	d021      	beq.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	2bc0      	cmp	r3, #192	; 0xc0
 800b2a0:	d829      	bhi.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b80      	cmp	r3, #128	; 0x80
 800b2a6:	d011      	beq.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	2b80      	cmp	r3, #128	; 0x80
 800b2ac:	d823      	bhi.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	2b40      	cmp	r3, #64	; 0x40
 800b2b8:	d004      	beq.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 800b2ba:	e01c      	b.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b2bc:	f7ff f966 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b2c0:	61f8      	str	r0, [r7, #28]
          break;
 800b2c2:	e01d      	b.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 800b2c4:	f7ff f8ca 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b2c8:	61f8      	str	r0, [r7, #28]
          break;
 800b2ca:	e019      	b.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2cc:	4b71      	ldr	r3, [pc, #452]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2d8:	d10f      	bne.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 800b2da:	4b6f      	ldr	r3, [pc, #444]	; (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800b2dc:	61fb      	str	r3, [r7, #28]
          break;
 800b2de:	e00c      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b2e0:	4b6c      	ldr	r3, [pc, #432]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e6:	f003 0302 	and.w	r3, r3, #2
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d107      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 800b2ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2f2:	61fb      	str	r3, [r7, #28]
          break;
 800b2f4:	e003      	b.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 800b2f6:	bf00      	nop
 800b2f8:	e27e      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b2fa:	bf00      	nop
 800b2fc:	e27c      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b2fe:	bf00      	nop
        break;
 800b300:	e27a      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b302:	4b64      	ldr	r3, [pc, #400]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b30c:	613b      	str	r3, [r7, #16]
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b314:	d025      	beq.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b31c:	d82c      	bhi.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b324:	d013      	beq.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b32c:	d824      	bhi.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b33a:	d004      	beq.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 800b33c:	e01c      	b.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b33e:	f7ff f925 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b342:	61f8      	str	r0, [r7, #28]
          break;
 800b344:	e01d      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 800b346:	f7ff f889 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b34a:	61f8      	str	r0, [r7, #28]
          break;
 800b34c:	e019      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b34e:	4b51      	ldr	r3, [pc, #324]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b35a:	d10f      	bne.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 800b35c:	4b4e      	ldr	r3, [pc, #312]	; (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800b35e:	61fb      	str	r3, [r7, #28]
          break;
 800b360:	e00c      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b362:	4b4c      	ldr	r3, [pc, #304]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b368:	f003 0302 	and.w	r3, r3, #2
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d107      	bne.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 800b370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b374:	61fb      	str	r3, [r7, #28]
          break;
 800b376:	e003      	b.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 800b378:	bf00      	nop
 800b37a:	e23d      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b37c:	bf00      	nop
 800b37e:	e23b      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b380:	bf00      	nop
        break;
 800b382:	e239      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b384:	4b43      	ldr	r3, [pc, #268]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b38e:	613b      	str	r3, [r7, #16]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b396:	d025      	beq.n	800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b39e:	d82c      	bhi.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3a6:	d013      	beq.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3ae:	d824      	bhi.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d004      	beq.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3bc:	d004      	beq.n	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 800b3be:	e01c      	b.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b3c0:	f7ff f8e4 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b3c4:	61f8      	str	r0, [r7, #28]
          break;
 800b3c6:	e01d      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 800b3c8:	f7ff f848 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b3cc:	61f8      	str	r0, [r7, #28]
          break;
 800b3ce:	e019      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b3d0:	4b30      	ldr	r3, [pc, #192]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3dc:	d10f      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 800b3de:	4b2e      	ldr	r3, [pc, #184]	; (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800b3e0:	61fb      	str	r3, [r7, #28]
          break;
 800b3e2:	e00c      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b3e4:	4b2b      	ldr	r3, [pc, #172]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ea:	f003 0302 	and.w	r3, r3, #2
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d107      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 800b3f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3f6:	61fb      	str	r3, [r7, #28]
          break;
 800b3f8:	e003      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800b3fa:	bf00      	nop
 800b3fc:	e1fc      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b3fe:	bf00      	nop
 800b400:	e1fa      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b402:	bf00      	nop
        break;
 800b404:	e1f8      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b406:	4b23      	ldr	r3, [pc, #140]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b40c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b410:	613b      	str	r3, [r7, #16]
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b418:	d00c      	beq.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b420:	d868      	bhi.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b428:	d008      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b430:	d034      	beq.n	800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 800b432:	e05f      	b.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 800b434:	f7ff f812 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b438:	61f8      	str	r0, [r7, #28]
          break;
 800b43a:	e060      	b.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800b43c:	4b15      	ldr	r3, [pc, #84]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b448:	d156      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800b44a:	4b12      	ldr	r3, [pc, #72]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d050      	beq.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b456:	4b0f      	ldr	r3, [pc, #60]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	0a1b      	lsrs	r3, r3, #8
 800b45c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b460:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	fb03 f202 	mul.w	r2, r3, r2
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	091b      	lsrs	r3, r3, #4
 800b470:	f003 0307 	and.w	r3, r3, #7
 800b474:	3301      	adds	r3, #1
 800b476:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800b47c:	4b05      	ldr	r3, [pc, #20]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	0e5b      	lsrs	r3, r3, #25
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	3301      	adds	r3, #1
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	69ba      	ldr	r2, [r7, #24]
 800b48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b490:	61fb      	str	r3, [r7, #28]
          break;
 800b492:	e031      	b.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800b494:	40021000 	.word	0x40021000
 800b498:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800b49c:	4b9c      	ldr	r3, [pc, #624]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4a8:	d128      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800b4aa:	4b99      	ldr	r3, [pc, #612]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d022      	beq.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b4b6:	4b96      	ldr	r3, [pc, #600]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	0a1b      	lsrs	r3, r3, #8
 800b4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4c0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	fb03 f202 	mul.w	r2, r3, r2
 800b4ca:	4b91      	ldr	r3, [pc, #580]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	091b      	lsrs	r3, r3, #4
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4da:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800b4dc:	4b8c      	ldr	r3, [pc, #560]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	0e5b      	lsrs	r3, r3, #25
 800b4e2:	f003 0303 	and.w	r3, r3, #3
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f0:	61fb      	str	r3, [r7, #28]
          break;
 800b4f2:	e003      	b.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800b4f4:	bf00      	nop
 800b4f6:	e17f      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b4f8:	bf00      	nop
 800b4fa:	e17d      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b4fc:	bf00      	nop
        break;
 800b4fe:	e17b      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800b500:	4b83      	ldr	r3, [pc, #524]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b50a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d103      	bne.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 800b512:	f7ff f851 	bl	800a5b8 <HAL_RCC_GetPCLK2Freq>
 800b516:	61f8      	str	r0, [r7, #28]
        break;
 800b518:	e16e      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800b51a:	f7fe ff9f 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b51e:	61f8      	str	r0, [r7, #28]
        break;
 800b520:	e16a      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b522:	4b7b      	ldr	r3, [pc, #492]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b528:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b52c:	613b      	str	r3, [r7, #16]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b534:	d013      	beq.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b53c:	d819      	bhi.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d004      	beq.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b54a:	d004      	beq.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800b54c:	e011      	b.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b54e:	f7ff f81d 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b552:	61f8      	str	r0, [r7, #28]
          break;
 800b554:	e010      	b.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800b556:	f7fe ff81 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b55a:	61f8      	str	r0, [r7, #28]
          break;
 800b55c:	e00c      	b.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b55e:	4b6c      	ldr	r3, [pc, #432]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b56a:	d104      	bne.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800b56c:	4b69      	ldr	r3, [pc, #420]	; (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800b56e:	61fb      	str	r3, [r7, #28]
          break;
 800b570:	e001      	b.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 800b572:	bf00      	nop
 800b574:	e140      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b576:	bf00      	nop
        break;
 800b578:	e13e      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b57a:	4b65      	ldr	r3, [pc, #404]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b584:	613b      	str	r3, [r7, #16]
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b58c:	d013      	beq.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b594:	d819      	bhi.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d004      	beq.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5a2:	d004      	beq.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 800b5a4:	e011      	b.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b5a6:	f7fe fff1 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b5aa:	61f8      	str	r0, [r7, #28]
          break;
 800b5ac:	e010      	b.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 800b5ae:	f7fe ff55 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b5b2:	61f8      	str	r0, [r7, #28]
          break;
 800b5b4:	e00c      	b.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5b6:	4b56      	ldr	r3, [pc, #344]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5c2:	d104      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 800b5c4:	4b53      	ldr	r3, [pc, #332]	; (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800b5c6:	61fb      	str	r3, [r7, #28]
          break;
 800b5c8:	e001      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800b5ca:	bf00      	nop
 800b5cc:	e114      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b5ce:	bf00      	nop
        break;
 800b5d0:	e112      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b5d2:	4b4f      	ldr	r3, [pc, #316]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5dc:	613b      	str	r3, [r7, #16]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5e4:	d013      	beq.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ec:	d819      	bhi.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d004      	beq.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5fa:	d004      	beq.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 800b5fc:	e011      	b.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b5fe:	f7fe ffc5 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b602:	61f8      	str	r0, [r7, #28]
          break;
 800b604:	e010      	b.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800b606:	f7fe ff29 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b60a:	61f8      	str	r0, [r7, #28]
          break;
 800b60c:	e00c      	b.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b60e:	4b40      	ldr	r3, [pc, #256]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b61a:	d104      	bne.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 800b61c:	4b3d      	ldr	r3, [pc, #244]	; (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800b61e:	61fb      	str	r3, [r7, #28]
          break;
 800b620:	e001      	b.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 800b622:	bf00      	nop
 800b624:	e0e8      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b626:	bf00      	nop
        break;
 800b628:	e0e6      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b62a:	4b39      	ldr	r3, [pc, #228]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b62c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b630:	f003 0303 	and.w	r3, r3, #3
 800b634:	613b      	str	r3, [r7, #16]
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d011      	beq.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2b02      	cmp	r3, #2
 800b640:	d818      	bhi.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d003      	beq.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d004      	beq.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800b64e:	e011      	b.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b650:	f7fe ff9c 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b654:	61f8      	str	r0, [r7, #28]
          break;
 800b656:	e010      	b.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800b658:	f7fe ff00 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800b65c:	61f8      	str	r0, [r7, #28]
          break;
 800b65e:	e00c      	b.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b660:	4b2b      	ldr	r3, [pc, #172]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b66c:	d104      	bne.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800b66e:	4b29      	ldr	r3, [pc, #164]	; (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800b670:	61fb      	str	r3, [r7, #28]
          break;
 800b672:	e001      	b.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800b674:	bf00      	nop
 800b676:	e0bf      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b678:	bf00      	nop
        break;
 800b67a:	e0bd      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b67c:	4b24      	ldr	r3, [pc, #144]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b682:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b686:	613b      	str	r3, [r7, #16]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b68e:	d02c      	beq.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b696:	d833      	bhi.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b69e:	d01a      	beq.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b6a6:	d82b      	bhi.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d004      	beq.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b6b4:	d004      	beq.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800b6b6:	e023      	b.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b6b8:	f7fe ff68 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b6bc:	61f8      	str	r0, [r7, #28]
          break;
 800b6be:	e026      	b.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b6c0:	4b13      	ldr	r3, [pc, #76]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b6c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d11a      	bne.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800b6ce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b6d2:	61fb      	str	r3, [r7, #28]
          break;
 800b6d4:	e016      	b.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6d6:	4b0e      	ldr	r3, [pc, #56]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6e2:	d111      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800b6e4:	4b0b      	ldr	r3, [pc, #44]	; (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800b6e6:	61fb      	str	r3, [r7, #28]
          break;
 800b6e8:	e00e      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b6ea:	4b09      	ldr	r3, [pc, #36]	; (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800b6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f0:	f003 0302 	and.w	r3, r3, #2
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d109      	bne.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800b6f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6fc:	61fb      	str	r3, [r7, #28]
          break;
 800b6fe:	e005      	b.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800b700:	bf00      	nop
 800b702:	e079      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b704:	bf00      	nop
 800b706:	e077      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b708:	bf00      	nop
 800b70a:	e075      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b70c:	bf00      	nop
        break;
 800b70e:	e073      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800b710:	40021000 	.word	0x40021000
 800b714:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b718:	4b3a      	ldr	r3, [pc, #232]	; (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800b71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b71e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b722:	613b      	str	r3, [r7, #16]
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b72a:	d02c      	beq.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b732:	d833      	bhi.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b73a:	d01a      	beq.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b742:	d82b      	bhi.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d004      	beq.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b750:	d004      	beq.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800b752:	e023      	b.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b754:	f7fe ff1a 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b758:	61f8      	str	r0, [r7, #28]
          break;
 800b75a:	e026      	b.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b75c:	4b29      	ldr	r3, [pc, #164]	; (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800b75e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b762:	f003 0302 	and.w	r3, r3, #2
 800b766:	2b02      	cmp	r3, #2
 800b768:	d11a      	bne.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800b76a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b76e:	61fb      	str	r3, [r7, #28]
          break;
 800b770:	e016      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b772:	4b24      	ldr	r3, [pc, #144]	; (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b77a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b77e:	d111      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 800b780:	4b21      	ldr	r3, [pc, #132]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800b782:	61fb      	str	r3, [r7, #28]
          break;
 800b784:	e00e      	b.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b786:	4b1f      	ldr	r3, [pc, #124]	; (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800b788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b78c:	f003 0302 	and.w	r3, r3, #2
 800b790:	2b02      	cmp	r3, #2
 800b792:	d109      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 800b794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b798:	61fb      	str	r3, [r7, #28]
          break;
 800b79a:	e005      	b.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800b79c:	bf00      	nop
 800b79e:	e02b      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b7a0:	bf00      	nop
 800b7a2:	e029      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b7a4:	bf00      	nop
 800b7a6:	e027      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800b7a8:	bf00      	nop
        break;
 800b7aa:	e025      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800b7ac:	4b15      	ldr	r3, [pc, #84]	; (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800b7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7b6:	613b      	str	r3, [r7, #16]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d004      	beq.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c4:	d004      	beq.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 800b7c6:	e00d      	b.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b7c8:	f7fe fee0 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800b7cc:	61f8      	str	r0, [r7, #28]
          break;
 800b7ce:	e009      	b.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7d0:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7dc:	d101      	bne.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 800b7de:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800b7e0:	61fb      	str	r3, [r7, #28]
          break;
 800b7e2:	bf00      	nop
        break;
 800b7e4:	e008      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800b7e6:	bf00      	nop
 800b7e8:	e006      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800b7ea:	bf00      	nop
 800b7ec:	e004      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800b7ee:	bf00      	nop
 800b7f0:	e002      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800b7f2:	bf00      	nop
 800b7f4:	e000      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800b7f6:	bf00      	nop
    }
  }

  return(frequency);
 800b7f8:	69fb      	ldr	r3, [r7, #28]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3720      	adds	r7, #32
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	40021000 	.word	0x40021000
 800b808:	00f42400 	.word	0x00f42400

0800b80c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b80c:	b480      	push	{r7}
 800b80e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a04      	ldr	r2, [pc, #16]	; (800b828 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b816:	f043 0304 	orr.w	r3, r3, #4
 800b81a:	6013      	str	r3, [r2, #0]
}
 800b81c:	bf00      	nop
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	40021000 	.word	0x40021000

0800b82c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b83a:	4b74      	ldr	r3, [pc, #464]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	f003 0303 	and.w	r3, r3, #3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d018      	beq.n	800b878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b846:	4b71      	ldr	r3, [pc, #452]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	f003 0203 	and.w	r2, r3, #3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	429a      	cmp	r2, r3
 800b854:	d10d      	bne.n	800b872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
       ||
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d009      	beq.n	800b872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b85e:	4b6b      	ldr	r3, [pc, #428]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	091b      	lsrs	r3, r3, #4
 800b864:	f003 0307 	and.w	r3, r3, #7
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
       ||
 800b86e:	429a      	cmp	r2, r3
 800b870:	d047      	beq.n	800b902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	73fb      	strb	r3, [r7, #15]
 800b876:	e044      	b.n	800b902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d018      	beq.n	800b8b2 <RCCEx_PLLSAI1_Config+0x86>
 800b880:	2b03      	cmp	r3, #3
 800b882:	d825      	bhi.n	800b8d0 <RCCEx_PLLSAI1_Config+0xa4>
 800b884:	2b01      	cmp	r3, #1
 800b886:	d002      	beq.n	800b88e <RCCEx_PLLSAI1_Config+0x62>
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d009      	beq.n	800b8a0 <RCCEx_PLLSAI1_Config+0x74>
 800b88c:	e020      	b.n	800b8d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b88e:	4b5f      	ldr	r3, [pc, #380]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 0302 	and.w	r3, r3, #2
 800b896:	2b00      	cmp	r3, #0
 800b898:	d11d      	bne.n	800b8d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b89e:	e01a      	b.n	800b8d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b8a0:	4b5a      	ldr	r3, [pc, #360]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d116      	bne.n	800b8da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8b0:	e013      	b.n	800b8da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b8b2:	4b56      	ldr	r3, [pc, #344]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10f      	bne.n	800b8de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b8be:	4b53      	ldr	r3, [pc, #332]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b8ce:	e006      	b.n	800b8de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8d4:	e004      	b.n	800b8e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b8d6:	bf00      	nop
 800b8d8:	e002      	b.n	800b8e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b8da:	bf00      	nop
 800b8dc:	e000      	b.n	800b8e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b8de:	bf00      	nop
    }

    if(status == HAL_OK)
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d10d      	bne.n	800b902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b8e6:	4b49      	ldr	r3, [pc, #292]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6819      	ldr	r1, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	011b      	lsls	r3, r3, #4
 800b8fa:	430b      	orrs	r3, r1
 800b8fc:	4943      	ldr	r1, [pc, #268]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d17c      	bne.n	800ba02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b908:	4b40      	ldr	r3, [pc, #256]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a3f      	ldr	r2, [pc, #252]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b90e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b914:	f7fa f8b6 	bl	8005a84 <HAL_GetTick>
 800b918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b91a:	e009      	b.n	800b930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b91c:	f7fa f8b2 	bl	8005a84 <HAL_GetTick>
 800b920:	4602      	mov	r2, r0
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	2b02      	cmp	r3, #2
 800b928:	d902      	bls.n	800b930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b92a:	2303      	movs	r3, #3
 800b92c:	73fb      	strb	r3, [r7, #15]
        break;
 800b92e:	e005      	b.n	800b93c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b930:	4b36      	ldr	r3, [pc, #216]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1ef      	bne.n	800b91c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d15f      	bne.n	800ba02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d110      	bne.n	800b96a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b948:	4b30      	ldr	r3, [pc, #192]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b950:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	6892      	ldr	r2, [r2, #8]
 800b958:	0211      	lsls	r1, r2, #8
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	68d2      	ldr	r2, [r2, #12]
 800b95e:	06d2      	lsls	r2, r2, #27
 800b960:	430a      	orrs	r2, r1
 800b962:	492a      	ldr	r1, [pc, #168]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b964:	4313      	orrs	r3, r2
 800b966:	610b      	str	r3, [r1, #16]
 800b968:	e027      	b.n	800b9ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d112      	bne.n	800b996 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b970:	4b26      	ldr	r3, [pc, #152]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6892      	ldr	r2, [r2, #8]
 800b980:	0211      	lsls	r1, r2, #8
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	6912      	ldr	r2, [r2, #16]
 800b986:	0852      	lsrs	r2, r2, #1
 800b988:	3a01      	subs	r2, #1
 800b98a:	0552      	lsls	r2, r2, #21
 800b98c:	430a      	orrs	r2, r1
 800b98e:	491f      	ldr	r1, [pc, #124]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b990:	4313      	orrs	r3, r2
 800b992:	610b      	str	r3, [r1, #16]
 800b994:	e011      	b.n	800b9ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b996:	4b1d      	ldr	r3, [pc, #116]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b99e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	6892      	ldr	r2, [r2, #8]
 800b9a6:	0211      	lsls	r1, r2, #8
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	6952      	ldr	r2, [r2, #20]
 800b9ac:	0852      	lsrs	r2, r2, #1
 800b9ae:	3a01      	subs	r2, #1
 800b9b0:	0652      	lsls	r2, r2, #25
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	4915      	ldr	r1, [pc, #84]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b9ba:	4b14      	ldr	r3, [pc, #80]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a13      	ldr	r2, [pc, #76]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9c6:	f7fa f85d 	bl	8005a84 <HAL_GetTick>
 800b9ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b9cc:	e009      	b.n	800b9e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b9ce:	f7fa f859 	bl	8005a84 <HAL_GetTick>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d902      	bls.n	800b9e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	73fb      	strb	r3, [r7, #15]
          break;
 800b9e0:	e005      	b.n	800b9ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b9e2:	4b0a      	ldr	r3, [pc, #40]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0ef      	beq.n	800b9ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d106      	bne.n	800ba02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9f6:	691a      	ldr	r2, [r3, #16]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	4903      	ldr	r1, [pc, #12]	; (800ba0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	40021000 	.word	0x40021000

0800ba10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ba1e:	4b69      	ldr	r3, [pc, #420]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f003 0303 	and.w	r3, r3, #3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d018      	beq.n	800ba5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ba2a:	4b66      	ldr	r3, [pc, #408]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	f003 0203 	and.w	r2, r3, #3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d10d      	bne.n	800ba56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
       ||
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d009      	beq.n	800ba56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800ba42:	4b60      	ldr	r3, [pc, #384]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	091b      	lsrs	r3, r3, #4
 800ba48:	f003 0307 	and.w	r3, r3, #7
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
       ||
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d047      	beq.n	800bae6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	73fb      	strb	r3, [r7, #15]
 800ba5a:	e044      	b.n	800bae6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d018      	beq.n	800ba96 <RCCEx_PLLSAI2_Config+0x86>
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d825      	bhi.n	800bab4 <RCCEx_PLLSAI2_Config+0xa4>
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d002      	beq.n	800ba72 <RCCEx_PLLSAI2_Config+0x62>
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d009      	beq.n	800ba84 <RCCEx_PLLSAI2_Config+0x74>
 800ba70:	e020      	b.n	800bab4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ba72:	4b54      	ldr	r3, [pc, #336]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f003 0302 	and.w	r3, r3, #2
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d11d      	bne.n	800baba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba82:	e01a      	b.n	800baba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ba84:	4b4f      	ldr	r3, [pc, #316]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d116      	bne.n	800babe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba94:	e013      	b.n	800babe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ba96:	4b4b      	ldr	r3, [pc, #300]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10f      	bne.n	800bac2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800baa2:	4b48      	ldr	r3, [pc, #288]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d109      	bne.n	800bac2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bab2:	e006      	b.n	800bac2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
      break;
 800bab8:	e004      	b.n	800bac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800baba:	bf00      	nop
 800babc:	e002      	b.n	800bac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800babe:	bf00      	nop
 800bac0:	e000      	b.n	800bac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800bac2:	bf00      	nop
    }

    if(status == HAL_OK)
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10d      	bne.n	800bae6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800baca:	4b3e      	ldr	r3, [pc, #248]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6819      	ldr	r1, [r3, #0]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	3b01      	subs	r3, #1
 800badc:	011b      	lsls	r3, r3, #4
 800bade:	430b      	orrs	r3, r1
 800bae0:	4938      	ldr	r1, [pc, #224]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d166      	bne.n	800bbba <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800baec:	4b35      	ldr	r3, [pc, #212]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a34      	ldr	r2, [pc, #208]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800baf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800baf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baf8:	f7f9 ffc4 	bl	8005a84 <HAL_GetTick>
 800bafc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bafe:	e009      	b.n	800bb14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bb00:	f7f9 ffc0 	bl	8005a84 <HAL_GetTick>
 800bb04:	4602      	mov	r2, r0
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d902      	bls.n	800bb14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	73fb      	strb	r3, [r7, #15]
        break;
 800bb12:	e005      	b.n	800bb20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bb14:	4b2b      	ldr	r3, [pc, #172]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d1ef      	bne.n	800bb00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d149      	bne.n	800bbba <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d110      	bne.n	800bb4e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bb2c:	4b25      	ldr	r3, [pc, #148]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800bb34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	6892      	ldr	r2, [r2, #8]
 800bb3c:	0211      	lsls	r1, r2, #8
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	68d2      	ldr	r2, [r2, #12]
 800bb42:	06d2      	lsls	r2, r2, #27
 800bb44:	430a      	orrs	r2, r1
 800bb46:	491f      	ldr	r1, [pc, #124]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	614b      	str	r3, [r1, #20]
 800bb4c:	e011      	b.n	800bb72 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bb4e:	4b1d      	ldr	r3, [pc, #116]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bb56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	6892      	ldr	r2, [r2, #8]
 800bb5e:	0211      	lsls	r1, r2, #8
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	6912      	ldr	r2, [r2, #16]
 800bb64:	0852      	lsrs	r2, r2, #1
 800bb66:	3a01      	subs	r2, #1
 800bb68:	0652      	lsls	r2, r2, #25
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	4915      	ldr	r1, [pc, #84]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800bb72:	4b14      	ldr	r3, [pc, #80]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a13      	ldr	r2, [pc, #76]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bb78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb7e:	f7f9 ff81 	bl	8005a84 <HAL_GetTick>
 800bb82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bb84:	e009      	b.n	800bb9a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bb86:	f7f9 ff7d 	bl	8005a84 <HAL_GetTick>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d902      	bls.n	800bb9a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	73fb      	strb	r3, [r7, #15]
          break;
 800bb98:	e005      	b.n	800bba6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bb9a:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0ef      	beq.n	800bb86 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d106      	bne.n	800bbba <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800bbac:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bbae:	695a      	ldr	r2, [r3, #20]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	4903      	ldr	r1, [pc, #12]	; (800bbc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	40021000 	.word	0x40021000

0800bbc8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b089      	sub	sp, #36	; 0x24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbe4:	d10c      	bne.n	800bc00 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800bbe6:	4b77      	ldr	r3, [pc, #476]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bbe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bbf0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bbf8:	d112      	bne.n	800bc20 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bbfa:	4b73      	ldr	r3, [pc, #460]	; (800bdc8 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800bbfc:	61fb      	str	r3, [r7, #28]
 800bbfe:	e00f      	b.n	800bc20 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc06:	d10b      	bne.n	800bc20 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800bc08:	4b6e      	ldr	r3, [pc, #440]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bc0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc0e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bc12:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc1a:	d101      	bne.n	800bc20 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800bc1c:	4b6a      	ldr	r3, [pc, #424]	; (800bdc8 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800bc1e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f040 80c6 	bne.w	800bdb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc32:	d003      	beq.n	800bc3c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc3a:	d13b      	bne.n	800bcb4 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800bc3c:	4b61      	ldr	r3, [pc, #388]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc48:	f040 80b3 	bne.w	800bdb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800bc4c:	4b5d      	ldr	r3, [pc, #372]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 80ac 	beq.w	800bdb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bc5a:	4b5a      	ldr	r3, [pc, #360]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	091b      	lsrs	r3, r3, #4
 800bc60:	f003 0307 	and.w	r3, r3, #7
 800bc64:	3301      	adds	r3, #1
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800bc6e:	4b55      	ldr	r3, [pc, #340]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	0a1b      	lsrs	r3, r3, #8
 800bc74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc78:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800bc7a:	4b52      	ldr	r3, [pc, #328]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	0edb      	lsrs	r3, r3, #27
 800bc80:	f003 031f 	and.w	r3, r3, #31
 800bc84:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800bc8c:	4b4d      	ldr	r3, [pc, #308]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800bc98:	2311      	movs	r3, #17
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	e001      	b.n	800bca2 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800bc9e:	2307      	movs	r3, #7
 800bca0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	fb03 f202 	mul.w	r2, r3, r2
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800bcb2:	e07e      	b.n	800bdb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d139      	bne.n	800bd2e <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800bcba:	4b42      	ldr	r3, [pc, #264]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcc6:	d175      	bne.n	800bdb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800bcc8:	4b3e      	ldr	r3, [pc, #248]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d06f      	beq.n	800bdb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bcd4:	4b3b      	ldr	r3, [pc, #236]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	091b      	lsrs	r3, r3, #4
 800bcda:	f003 0307 	and.w	r3, r3, #7
 800bcde:	3301      	adds	r3, #1
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800bce8:	4b36      	ldr	r3, [pc, #216]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	0a1b      	lsrs	r3, r3, #8
 800bcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcf2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800bcf4:	4b33      	ldr	r3, [pc, #204]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	0edb      	lsrs	r3, r3, #27
 800bcfa:	f003 031f 	and.w	r3, r3, #31
 800bcfe:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10a      	bne.n	800bd1c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800bd06:	4b2f      	ldr	r3, [pc, #188]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d002      	beq.n	800bd18 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800bd12:	2311      	movs	r3, #17
 800bd14:	617b      	str	r3, [r7, #20]
 800bd16:	e001      	b.n	800bd1c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800bd18:	2307      	movs	r3, #7
 800bd1a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	fb03 f202 	mul.w	r2, r3, r2
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd2a:	61fb      	str	r3, [r7, #28]
 800bd2c:	e042      	b.n	800bdb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd34:	d003      	beq.n	800bd3e <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd3c:	d13a      	bne.n	800bdb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800bd3e:	4b21      	ldr	r3, [pc, #132]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd4a:	d133      	bne.n	800bdb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800bd4c:	4b1d      	ldr	r3, [pc, #116]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d02d      	beq.n	800bdb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bd58:	4b1a      	ldr	r3, [pc, #104]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	091b      	lsrs	r3, r3, #4
 800bd5e:	f003 0307 	and.w	r3, r3, #7
 800bd62:	3301      	adds	r3, #1
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd6a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800bd6c:	4b15      	ldr	r3, [pc, #84]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	0a1b      	lsrs	r3, r3, #8
 800bd72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd76:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800bd78:	4b12      	ldr	r3, [pc, #72]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bd7a:	695b      	ldr	r3, [r3, #20]
 800bd7c:	0edb      	lsrs	r3, r3, #27
 800bd7e:	f003 031f 	and.w	r3, r3, #31
 800bd82:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10a      	bne.n	800bda0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800bd96:	2311      	movs	r3, #17
 800bd98:	617b      	str	r3, [r7, #20]
 800bd9a:	e001      	b.n	800bda0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800bd9c:	2307      	movs	r3, #7
 800bd9e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	fb03 f202 	mul.w	r2, r3, r2
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdae:	61fb      	str	r3, [r7, #28]
 800bdb0:	e000      	b.n	800bdb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800bdb2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800bdb4:	69fb      	ldr	r3, [r7, #28]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3724      	adds	r7, #36	; 0x24
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	40021000 	.word	0x40021000
 800bdc8:	001fff68 	.word	0x001fff68

0800bdcc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e155      	b.n	800c08a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d106      	bne.n	800bdf8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7f6 f9e0 	bl	80021b8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f959 	bl	800c0b0 <SAI_Disable>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d001      	beq.n	800be08 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800be04:	2301      	movs	r3, #1
 800be06:	e140      	b.n	800c08a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2202      	movs	r2, #2
 800be0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d00c      	beq.n	800be32 <HAL_SAI_Init+0x66>
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d80d      	bhi.n	800be38 <HAL_SAI_Init+0x6c>
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <HAL_SAI_Init+0x5a>
 800be20:	2b01      	cmp	r3, #1
 800be22:	d003      	beq.n	800be2c <HAL_SAI_Init+0x60>
 800be24:	e008      	b.n	800be38 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	61fb      	str	r3, [r7, #28]
      break;
 800be2a:	e008      	b.n	800be3e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800be2c:	2310      	movs	r3, #16
 800be2e:	61fb      	str	r3, [r7, #28]
      break;
 800be30:	e005      	b.n	800be3e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800be32:	2320      	movs	r3, #32
 800be34:	61fb      	str	r3, [r7, #28]
      break;
 800be36:	e002      	b.n	800be3e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	61fb      	str	r3, [r7, #28]
      break;
 800be3c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	2b03      	cmp	r3, #3
 800be44:	d81d      	bhi.n	800be82 <HAL_SAI_Init+0xb6>
 800be46:	a201      	add	r2, pc, #4	; (adr r2, 800be4c <HAL_SAI_Init+0x80>)
 800be48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4c:	0800be5d 	.word	0x0800be5d
 800be50:	0800be63 	.word	0x0800be63
 800be54:	0800be6b 	.word	0x0800be6b
 800be58:	0800be73 	.word	0x0800be73
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]
      break;
 800be60:	e012      	b.n	800be88 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800be62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be66:	617b      	str	r3, [r7, #20]
      break;
 800be68:	e00e      	b.n	800be88 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800be6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be6e:	617b      	str	r3, [r7, #20]
      break;
 800be70:	e00a      	b.n	800be88 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800be72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be76:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	f043 0301 	orr.w	r3, r3, #1
 800be7e:	61fb      	str	r3, [r7, #28]
      break;
 800be80:	e002      	b.n	800be88 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	617b      	str	r3, [r7, #20]
      break;
 800be86:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a81      	ldr	r2, [pc, #516]	; (800c094 <HAL_SAI_Init+0x2c8>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d004      	beq.n	800be9c <HAL_SAI_Init+0xd0>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a80      	ldr	r2, [pc, #512]	; (800c098 <HAL_SAI_Init+0x2cc>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d103      	bne.n	800bea4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800be9c:	4a7f      	ldr	r2, [pc, #508]	; (800c09c <HAL_SAI_Init+0x2d0>)
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	e002      	b.n	800beaa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bea4:	4a7e      	ldr	r2, [pc, #504]	; (800c0a0 <HAL_SAI_Init+0x2d4>)
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d041      	beq.n	800bf36 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a77      	ldr	r2, [pc, #476]	; (800c094 <HAL_SAI_Init+0x2c8>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d004      	beq.n	800bec6 <HAL_SAI_Init+0xfa>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a75      	ldr	r2, [pc, #468]	; (800c098 <HAL_SAI_Init+0x2cc>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d105      	bne.n	800bed2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bec6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800beca:	f7fe fee7 	bl	800ac9c <HAL_RCCEx_GetPeriphCLKFreq>
 800bece:	6138      	str	r0, [r7, #16]
 800bed0:	e004      	b.n	800bedc <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bed2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bed6:	f7fe fee1 	bl	800ac9c <HAL_RCCEx_GetPeriphCLKFreq>
 800beda:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	4613      	mov	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	461a      	mov	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	69db      	ldr	r3, [r3, #28]
 800beec:	025b      	lsls	r3, r3, #9
 800beee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bef2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4a6b      	ldr	r2, [pc, #428]	; (800c0a4 <HAL_SAI_Init+0x2d8>)
 800bef8:	fba2 2303 	umull	r2, r3, r2, r3
 800befc:	08da      	lsrs	r2, r3, #3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800bf02:	68f9      	ldr	r1, [r7, #12]
 800bf04:	4b67      	ldr	r3, [pc, #412]	; (800c0a4 <HAL_SAI_Init+0x2d8>)
 800bf06:	fba3 2301 	umull	r2, r3, r3, r1
 800bf0a:	08da      	lsrs	r2, r3, #3
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	1aca      	subs	r2, r1, r3
 800bf16:	2a08      	cmp	r2, #8
 800bf18:	d904      	bls.n	800bf24 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf28:	2b04      	cmp	r3, #4
 800bf2a:	d104      	bne.n	800bf36 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	085a      	lsrs	r2, r3, #1
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <HAL_SAI_Init+0x17a>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d109      	bne.n	800bf5a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d101      	bne.n	800bf52 <HAL_SAI_Init+0x186>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e001      	b.n	800bf56 <HAL_SAI_Init+0x18a>
 800bf52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf56:	61bb      	str	r3, [r7, #24]
 800bf58:	e008      	b.n	800bf6c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d102      	bne.n	800bf68 <HAL_SAI_Init+0x19c>
 800bf62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf66:	e000      	b.n	800bf6a <HAL_SAI_Init+0x19e>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6819      	ldr	r1, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	4b4c      	ldr	r3, [pc, #304]	; (800c0a8 <HAL_SAI_Init+0x2dc>)
 800bf78:	400b      	ands	r3, r1
 800bf7a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6819      	ldr	r1, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685a      	ldr	r2, [r3, #4]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bf90:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf96:	431a      	orrs	r2, r3
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800bfa4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bfb0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	051b      	lsls	r3, r3, #20
 800bfb8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	6812      	ldr	r2, [r2, #0]
 800bfcc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800bfd0:	f023 030f 	bic.w	r3, r3, #15
 800bfd4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6859      	ldr	r1, [r3, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	699a      	ldr	r2, [r3, #24]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	431a      	orrs	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	430a      	orrs	r2, r1
 800bff2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6899      	ldr	r1, [r3, #8]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	4b2b      	ldr	r3, [pc, #172]	; (800c0ac <HAL_SAI_Init+0x2e0>)
 800c000:	400b      	ands	r3, r1
 800c002:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6899      	ldr	r1, [r3, #8]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c014:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800c01a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800c020:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c026:	3b01      	subs	r3, #1
 800c028:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c02a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	430a      	orrs	r2, r1
 800c032:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68d9      	ldr	r1, [r3, #12]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c042:	400b      	ands	r3, r1
 800c044:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68d9      	ldr	r1, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c054:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c05a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c05c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c062:	3b01      	subs	r3, #1
 800c064:	021b      	lsls	r3, r3, #8
 800c066:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3720      	adds	r7, #32
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	40015404 	.word	0x40015404
 800c098:	40015424 	.word	0x40015424
 800c09c:	40015400 	.word	0x40015400
 800c0a0:	40015800 	.word	0x40015800
 800c0a4:	cccccccd 	.word	0xcccccccd
 800c0a8:	ff05c010 	.word	0xff05c010
 800c0ac:	fff88000 	.word	0xfff88000

0800c0b0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c0b8:	4b18      	ldr	r3, [pc, #96]	; (800c11c <SAI_Disable+0x6c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a18      	ldr	r2, [pc, #96]	; (800c120 <SAI_Disable+0x70>)
 800c0be:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c2:	0b1b      	lsrs	r3, r3, #12
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c0da:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10a      	bne.n	800c0f8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	72fb      	strb	r3, [r7, #11]
      break;
 800c0f6:	e009      	b.n	800c10c <SAI_Disable+0x5c>
    }
    count--;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1e7      	bne.n	800c0dc <SAI_Disable+0x2c>

  return status;
 800c10c:	7afb      	ldrb	r3, [r7, #11]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3714      	adds	r7, #20
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	20000000 	.word	0x20000000
 800c120:	95cbec1b 	.word	0x95cbec1b

0800c124 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d101      	bne.n	800c136 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	e022      	b.n	800c17c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d105      	bne.n	800c14e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7f5 feab 	bl	8001ea4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2203      	movs	r2, #3
 800c152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f814 	bl	800c184 <HAL_SD_InitCard>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e00a      	b.n	800c17c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c184:	b5b0      	push	{r4, r5, r7, lr}
 800c186:	b08e      	sub	sp, #56	; 0x38
 800c188:	af04      	add	r7, sp, #16
 800c18a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c18c:	2300      	movs	r3, #0
 800c18e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c190:	2300      	movs	r3, #0
 800c192:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c194:	2300      	movs	r3, #0
 800c196:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c19c:	2300      	movs	r3, #0
 800c19e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800c1a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c1a4:	f7fe fd7a 	bl	800ac9c <HAL_RCCEx_GetPeriphCLKFreq>
 800c1a8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d109      	bne.n	800c1c4 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c1be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e07b      	b.n	800c2bc <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	09db      	lsrs	r3, r3, #7
 800c1c8:	4a3e      	ldr	r2, [pc, #248]	; (800c2c4 <HAL_SD_InitCard+0x140>)
 800c1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ce:	091b      	lsrs	r3, r3, #4
 800c1d0:	3b02      	subs	r3, #2
 800c1d2:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681d      	ldr	r5, [r3, #0]
 800c1d8:	466c      	mov	r4, sp
 800c1da:	f107 0314 	add.w	r3, r7, #20
 800c1de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c1e6:	f107 0308 	add.w	r3, r7, #8
 800c1ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	f002 fae1 	bl	800e7b4 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c200:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f002 fb0e 	bl	800e828 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c21a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	3302      	adds	r3, #2
 800c220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c222:	fbb2 f3f3 	udiv	r3, r2, r3
 800c226:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800c228:	4a27      	ldr	r2, [pc, #156]	; (800c2c8 <HAL_SD_InitCard+0x144>)
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c230:	3301      	adds	r3, #1
 800c232:	4618      	mov	r0, r3
 800c234:	f7f9 fc32 	bl	8005a9c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fb77 	bl	800c92c <SD_PowerON>
 800c23e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00b      	beq.n	800c25e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	431a      	orrs	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e02e      	b.n	800c2bc <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fa96 	bl	800c790 <SD_InitCard>
 800c264:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00b      	beq.n	800c284 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	431a      	orrs	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	e01b      	b.n	800c2bc <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c28c:	4618      	mov	r0, r3
 800c28e:	f002 fb5e 	bl	800e94e <SDMMC_CmdBlockLength>
 800c292:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00f      	beq.n	800c2ba <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a0b      	ldr	r2, [pc, #44]	; (800c2cc <HAL_SD_InitCard+0x148>)
 800c2a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	431a      	orrs	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3728      	adds	r7, #40	; 0x28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bdb0      	pop	{r4, r5, r7, pc}
 800c2c4:	014f8b59 	.word	0x014f8b59
 800c2c8:	00012110 	.word	0x00012110
 800c2cc:	004005ff 	.word	0x004005ff

0800c2d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2de:	0f9b      	lsrs	r3, r3, #30
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2ea:	0e9b      	lsrs	r3, r3, #26
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f003 030f 	and.w	r3, r3, #15
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2fc:	0e1b      	lsrs	r3, r3, #24
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	f003 0303 	and.w	r3, r3, #3
 800c304:	b2da      	uxtb	r2, r3
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c30e:	0c1b      	lsrs	r3, r3, #16
 800c310:	b2da      	uxtb	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c326:	b2da      	uxtb	r2, r3
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c330:	0d1b      	lsrs	r3, r3, #20
 800c332:	b29a      	uxth	r2, r3
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c33c:	0c1b      	lsrs	r3, r3, #16
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	f003 030f 	and.w	r3, r3, #15
 800c344:	b2da      	uxtb	r2, r3
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c34e:	0bdb      	lsrs	r3, r3, #15
 800c350:	b2db      	uxtb	r3, r3
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	b2da      	uxtb	r2, r3
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c360:	0b9b      	lsrs	r3, r3, #14
 800c362:	b2db      	uxtb	r3, r3
 800c364:	f003 0301 	and.w	r3, r3, #1
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c372:	0b5b      	lsrs	r3, r3, #13
 800c374:	b2db      	uxtb	r3, r3
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	b2da      	uxtb	r2, r3
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c384:	0b1b      	lsrs	r3, r3, #12
 800c386:	b2db      	uxtb	r3, r3
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2200      	movs	r2, #0
 800c396:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d163      	bne.n	800c468 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3a4:	009a      	lsls	r2, r3, #2
 800c3a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c3b0:	0f92      	lsrs	r2, r2, #30
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3bc:	0edb      	lsrs	r3, r3, #27
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	f003 0307 	and.w	r3, r3, #7
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ce:	0e1b      	lsrs	r3, r3, #24
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	f003 0307 	and.w	r3, r3, #7
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3e0:	0d5b      	lsrs	r3, r3, #21
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	f003 0307 	and.w	r3, r3, #7
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f2:	0c9b      	lsrs	r3, r3, #18
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c404:	0bdb      	lsrs	r3, r3, #15
 800c406:	b2db      	uxtb	r3, r3
 800c408:	f003 0307 	and.w	r3, r3, #7
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	1c5a      	adds	r2, r3, #1
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	7e1b      	ldrb	r3, [r3, #24]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	f003 0307 	and.w	r3, r3, #7
 800c426:	3302      	adds	r3, #2
 800c428:	2201      	movs	r2, #1
 800c42a:	fa02 f303 	lsl.w	r3, r2, r3
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c432:	fb03 f202 	mul.w	r2, r3, r2
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	7a1b      	ldrb	r3, [r3, #8]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f003 030f 	and.w	r3, r3, #15
 800c444:	2201      	movs	r2, #1
 800c446:	409a      	lsls	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c454:	0a52      	lsrs	r2, r2, #9
 800c456:	fb03 f202 	mul.w	r2, r3, r2
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c464:	661a      	str	r2, [r3, #96]	; 0x60
 800c466:	e031      	b.n	800c4cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d11d      	bne.n	800c4ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c474:	041b      	lsls	r3, r3, #16
 800c476:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c47e:	0c1b      	lsrs	r3, r3, #16
 800c480:	431a      	orrs	r2, r3
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	3301      	adds	r3, #1
 800c48c:	029a      	lsls	r2, r3, #10
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	661a      	str	r2, [r3, #96]	; 0x60
 800c4aa:	e00f      	b.n	800c4cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a58      	ldr	r2, [pc, #352]	; (800c614 <HAL_SD_GetCardCSD+0x344>)
 800c4b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e09d      	b.n	800c608 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d0:	0b9b      	lsrs	r3, r3, #14
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4e2:	09db      	lsrs	r3, r3, #7
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4fa:	b2da      	uxtb	r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c504:	0fdb      	lsrs	r3, r3, #31
 800c506:	b2da      	uxtb	r2, r3
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c510:	0f5b      	lsrs	r3, r3, #29
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f003 0303 	and.w	r3, r3, #3
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c522:	0e9b      	lsrs	r3, r3, #26
 800c524:	b2db      	uxtb	r3, r3
 800c526:	f003 0307 	and.w	r3, r3, #7
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c534:	0d9b      	lsrs	r3, r3, #22
 800c536:	b2db      	uxtb	r3, r3
 800c538:	f003 030f 	and.w	r3, r3, #15
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c546:	0d5b      	lsrs	r3, r3, #21
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c562:	0c1b      	lsrs	r3, r3, #16
 800c564:	b2db      	uxtb	r3, r3
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c576:	0bdb      	lsrs	r3, r3, #15
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c58a:	0b9b      	lsrs	r3, r3, #14
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	b2da      	uxtb	r2, r3
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c59e:	0b5b      	lsrs	r3, r3, #13
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b2:	0b1b      	lsrs	r3, r3, #12
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c6:	0a9b      	lsrs	r3, r3, #10
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	f003 0303 	and.w	r3, r3, #3
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5da:	0a1b      	lsrs	r3, r3, #8
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	f003 0303 	and.w	r3, r3, #3
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ee:	085b      	lsrs	r3, r3, #1
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr
 800c614:	004005ff 	.word	0x004005ff

0800c618 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c618:	b5b0      	push	{r4, r5, r7, lr}
 800c61a:	b090      	sub	sp, #64	; 0x40
 800c61c:	af04      	add	r7, sp, #16
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c622:	2300      	movs	r3, #0
 800c624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2203      	movs	r2, #3
 800c62c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c634:	2b03      	cmp	r3, #3
 800c636:	d02e      	beq.n	800c696 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c63e:	d106      	bne.n	800c64e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c644:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	639a      	str	r2, [r3, #56]	; 0x38
 800c64c:	e029      	b.n	800c6a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c654:	d10a      	bne.n	800c66c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f9f6 	bl	800ca48 <SD_WideBus_Enable>
 800c65c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	431a      	orrs	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	639a      	str	r2, [r3, #56]	; 0x38
 800c66a:	e01a      	b.n	800c6a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10a      	bne.n	800c688 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fa33 	bl	800cade <SD_WideBus_Disable>
 800c678:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	431a      	orrs	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	639a      	str	r2, [r3, #56]	; 0x38
 800c686:	e00c      	b.n	800c6a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	639a      	str	r2, [r3, #56]	; 0x38
 800c694:	e005      	b.n	800c6a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d007      	beq.n	800c6ba <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a35      	ldr	r2, [pc, #212]	; (800c784 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800c6b0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6b8:	e042      	b.n	800c740 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800c6ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c6be:	f7fe faed 	bl	800ac9c <HAL_RCCEx_GetPeriphCLKFreq>
 800c6c2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d031      	beq.n	800c72e <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	3302      	adds	r3, #2
 800c6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f2:	4a25      	ldr	r2, [pc, #148]	; (800c788 <HAL_SD_ConfigWideBusOperation+0x170>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d907      	bls.n	800c708 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fa:	4a24      	ldr	r2, [pc, #144]	; (800c78c <HAL_SD_ConfigWideBusOperation+0x174>)
 800c6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c700:	0ddb      	lsrs	r3, r3, #23
 800c702:	3b02      	subs	r3, #2
 800c704:	623b      	str	r3, [r7, #32]
 800c706:	e002      	b.n	800c70e <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681d      	ldr	r5, [r3, #0]
 800c712:	466c      	mov	r4, sp
 800c714:	f107 0318 	add.w	r3, r7, #24
 800c718:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c71c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c720:	f107 030c 	add.w	r3, r7, #12
 800c724:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c726:	4628      	mov	r0, r5
 800c728:	f002 f844 	bl	800e7b4 <SDMMC_Init>
 800c72c:	e008      	b.n	800c740 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c732:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800c73a:	2301      	movs	r3, #1
 800c73c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c748:	4618      	mov	r0, r3
 800c74a:	f002 f900 	bl	800e94e <SDMMC_CmdBlockLength>
 800c74e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00c      	beq.n	800c770 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a0a      	ldr	r2, [pc, #40]	; (800c784 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800c75c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	431a      	orrs	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3730      	adds	r7, #48	; 0x30
 800c780:	46bd      	mov	sp, r7
 800c782:	bdb0      	pop	{r4, r5, r7, pc}
 800c784:	004005ff 	.word	0x004005ff
 800c788:	017d7840 	.word	0x017d7840
 800c78c:	55e63b89 	.word	0x55e63b89

0800c790 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c790:	b5b0      	push	{r4, r5, r7, lr}
 800c792:	b094      	sub	sp, #80	; 0x50
 800c794:	af04      	add	r7, sp, #16
 800c796:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c798:	2301      	movs	r3, #1
 800c79a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f002 f850 	bl	800e846 <SDMMC_GetPowerState>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c7b0:	e0b8      	b.n	800c924 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	d02f      	beq.n	800c81a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f002 f9cf 	bl	800eb62 <SDMMC_CmdSendCID>
 800c7c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <SD_InitCard+0x40>
    {
      return errorstate;
 800c7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ce:	e0a9      	b.n	800c924 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f002 f87a 	bl	800e8d0 <SDMMC_GetResponse>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2104      	movs	r1, #4
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f002 f871 	bl	800e8d0 <SDMMC_GetResponse>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2108      	movs	r1, #8
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f002 f868 	bl	800e8d0 <SDMMC_GetResponse>
 800c800:	4602      	mov	r2, r0
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	210c      	movs	r1, #12
 800c80c:	4618      	mov	r0, r3
 800c80e:	f002 f85f 	bl	800e8d0 <SDMMC_GetResponse>
 800c812:	4602      	mov	r2, r0
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d00d      	beq.n	800c83e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f107 020e 	add.w	r2, r7, #14
 800c82a:	4611      	mov	r1, r2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f002 f9d5 	bl	800ebdc <SDMMC_CmdSetRelAdd>
 800c832:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <SD_InitCard+0xae>
    {
      return errorstate;
 800c83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c83c:	e072      	b.n	800c924 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c842:	2b03      	cmp	r3, #3
 800c844:	d036      	beq.n	800c8b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c846:	89fb      	ldrh	r3, [r7, #14]
 800c848:	461a      	mov	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c856:	041b      	lsls	r3, r3, #16
 800c858:	4619      	mov	r1, r3
 800c85a:	4610      	mov	r0, r2
 800c85c:	f002 f99f 	bl	800eb9e <SDMMC_CmdSendCSD>
 800c860:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <SD_InitCard+0xdc>
    {
      return errorstate;
 800c868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86a:	e05b      	b.n	800c924 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2100      	movs	r1, #0
 800c872:	4618      	mov	r0, r3
 800c874:	f002 f82c 	bl	800e8d0 <SDMMC_GetResponse>
 800c878:	4602      	mov	r2, r0
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2104      	movs	r1, #4
 800c884:	4618      	mov	r0, r3
 800c886:	f002 f823 	bl	800e8d0 <SDMMC_GetResponse>
 800c88a:	4602      	mov	r2, r0
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2108      	movs	r1, #8
 800c896:	4618      	mov	r0, r3
 800c898:	f002 f81a 	bl	800e8d0 <SDMMC_GetResponse>
 800c89c:	4602      	mov	r2, r0
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	210c      	movs	r1, #12
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f002 f811 	bl	800e8d0 <SDMMC_GetResponse>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2104      	movs	r1, #4
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f002 f808 	bl	800e8d0 <SDMMC_GetResponse>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	0d1a      	lsrs	r2, r3, #20
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c8c8:	f107 0310 	add.w	r3, r7, #16
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7ff fcfe 	bl	800c2d0 <HAL_SD_GetCardCSD>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c8da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c8de:	e021      	b.n	800c924 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6819      	ldr	r1, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8e8:	041b      	lsls	r3, r3, #16
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	461c      	mov	r4, r3
 800c8ee:	4615      	mov	r5, r2
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	462b      	mov	r3, r5
 800c8f4:	4608      	mov	r0, r1
 800c8f6:	f002 f84c 	bl	800e992 <SDMMC_CmdSelDesel>
 800c8fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <SD_InitCard+0x176>
  {
    return errorstate;
 800c902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c904:	e00e      	b.n	800c924 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681d      	ldr	r5, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	466c      	mov	r4, sp
 800c90e:	f103 0210 	add.w	r2, r3, #16
 800c912:	ca07      	ldmia	r2, {r0, r1, r2}
 800c914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c918:	3304      	adds	r3, #4
 800c91a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c91c:	4628      	mov	r0, r5
 800c91e:	f001 ff49 	bl	800e7b4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3740      	adds	r7, #64	; 0x40
 800c928:	46bd      	mov	sp, r7
 800c92a:	bdb0      	pop	{r4, r5, r7, pc}

0800c92c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c934:	2300      	movs	r3, #0
 800c936:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c938:	2300      	movs	r3, #0
 800c93a:	617b      	str	r3, [r7, #20]
 800c93c:	2300      	movs	r3, #0
 800c93e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4618      	mov	r0, r3
 800c946:	f002 f847 	bl	800e9d8 <SDMMC_CmdGoIdleState>
 800c94a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	e072      	b.n	800ca3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f002 f85a 	bl	800ea14 <SDMMC_CmdOperCond>
 800c960:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00d      	beq.n	800c984 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	f002 f830 	bl	800e9d8 <SDMMC_CmdGoIdleState>
 800c978:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <SD_PowerON+0x5e>
    {
      return errorstate;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	e05b      	b.n	800ca3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d137      	bne.n	800ca02 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2100      	movs	r1, #0
 800c998:	4618      	mov	r0, r3
 800c99a:	f002 f85a 	bl	800ea52 <SDMMC_CmdAppCommand>
 800c99e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d02d      	beq.n	800ca02 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c9aa:	e047      	b.n	800ca3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f002 f84d 	bl	800ea52 <SDMMC_CmdAppCommand>
 800c9b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <SD_PowerON+0x98>
    {
      return errorstate;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	e03b      	b.n	800ca3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	491e      	ldr	r1, [pc, #120]	; (800ca44 <SD_PowerON+0x118>)
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f002 f863 	bl	800ea96 <SDMMC_CmdAppOperCommand>
 800c9d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c9dc:	e02e      	b.n	800ca3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f001 ff73 	bl	800e8d0 <SDMMC_GetResponse>
 800c9ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	0fdb      	lsrs	r3, r3, #31
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d101      	bne.n	800c9f8 <SD_PowerON+0xcc>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e000      	b.n	800c9fa <SD_PowerON+0xce>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	613b      	str	r3, [r7, #16]

    count++;
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d802      	bhi.n	800ca12 <SD_PowerON+0xe6>
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0cc      	beq.n	800c9ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d902      	bls.n	800ca22 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ca1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca20:	e00c      	b.n	800ca3c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	645a      	str	r2, [r3, #68]	; 0x44
 800ca32:	e002      	b.n	800ca3a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	c1100000 	.word	0xc1100000

0800ca48 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ca50:	2300      	movs	r3, #0
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	2300      	movs	r3, #0
 800ca56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f001 ff36 	bl	800e8d0 <SDMMC_GetResponse>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca6e:	d102      	bne.n	800ca76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ca70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca74:	e02f      	b.n	800cad6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ca76:	f107 030c 	add.w	r3, r7, #12
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f879 	bl	800cb74 <SD_FindSCR>
 800ca82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	e023      	b.n	800cad6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d01c      	beq.n	800cad2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caa0:	041b      	lsls	r3, r3, #16
 800caa2:	4619      	mov	r1, r3
 800caa4:	4610      	mov	r0, r2
 800caa6:	f001 ffd4 	bl	800ea52 <SDMMC_CmdAppCommand>
 800caaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	e00f      	b.n	800cad6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2102      	movs	r1, #2
 800cabc:	4618      	mov	r0, r3
 800cabe:	f002 f80d 	bl	800eadc <SDMMC_CmdBusWidth>
 800cac2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	e003      	b.n	800cad6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cace:	2300      	movs	r3, #0
 800cad0:	e001      	b.n	800cad6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cad2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b086      	sub	sp, #24
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cae6:	2300      	movs	r3, #0
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	2300      	movs	r3, #0
 800caec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2100      	movs	r1, #0
 800caf4:	4618      	mov	r0, r3
 800caf6:	f001 feeb 	bl	800e8d0 <SDMMC_GetResponse>
 800cafa:	4603      	mov	r3, r0
 800cafc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb04:	d102      	bne.n	800cb0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb0a:	e02f      	b.n	800cb6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cb0c:	f107 030c 	add.w	r3, r7, #12
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f82e 	bl	800cb74 <SD_FindSCR>
 800cb18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	e023      	b.n	800cb6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d01c      	beq.n	800cb68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb36:	041b      	lsls	r3, r3, #16
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	f001 ff89 	bl	800ea52 <SDMMC_CmdAppCommand>
 800cb40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	e00f      	b.n	800cb6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2100      	movs	r1, #0
 800cb52:	4618      	mov	r0, r3
 800cb54:	f001 ffc2 	bl	800eadc <SDMMC_CmdBusWidth>
 800cb58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	e003      	b.n	800cb6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cb64:	2300      	movs	r3, #0
 800cb66:	e001      	b.n	800cb6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3718      	adds	r7, #24
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cb74:	b590      	push	{r4, r7, lr}
 800cb76:	b08f      	sub	sp, #60	; 0x3c
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cb7e:	f7f8 ff81 	bl	8005a84 <HAL_GetTick>
 800cb82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60bb      	str	r3, [r7, #8]
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2108      	movs	r1, #8
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f001 fed7 	bl	800e94e <SDMMC_CmdBlockLength>
 800cba0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <SD_FindSCR+0x38>
  {
    return errorstate;
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	e0a9      	b.n	800cd00 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbb4:	041b      	lsls	r3, r3, #16
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	4610      	mov	r0, r2
 800cbba:	f001 ff4a 	bl	800ea52 <SDMMC_CmdAppCommand>
 800cbbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d001      	beq.n	800cbca <SD_FindSCR+0x56>
  {
    return errorstate;
 800cbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc8:	e09a      	b.n	800cd00 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cbd0:	2308      	movs	r3, #8
 800cbd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cbd4:	2330      	movs	r3, #48	; 0x30
 800cbd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cbd8:	2302      	movs	r3, #2
 800cbda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f107 0210 	add.w	r2, r7, #16
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f001 fe81 	bl	800e8f6 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f001 ff91 	bl	800eb20 <SDMMC_CmdSendSCR>
 800cbfe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d022      	beq.n	800cc4c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800cc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc08:	e07a      	b.n	800cd00 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00e      	beq.n	800cc36 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6819      	ldr	r1, [r3, #0]
 800cc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	f107 0208 	add.w	r2, r7, #8
 800cc24:	18d4      	adds	r4, r2, r3
 800cc26:	4608      	mov	r0, r1
 800cc28:	f001 fdf1 	bl	800e80e <SDMMC_ReadFIFO>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	6023      	str	r3, [r4, #0]
      index++;
 800cc30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc32:	3301      	adds	r3, #1
 800cc34:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cc36:	f7f8 ff25 	bl	8005a84 <HAL_GetTick>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc44:	d102      	bne.n	800cc4c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cc46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc4a:	e059      	b.n	800cd00 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc52:	f240 432a 	movw	r3, #1066	; 0x42a
 800cc56:	4013      	ands	r3, r2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d0d6      	beq.n	800cc0a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc62:	f003 0308 	and.w	r3, r3, #8
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d005      	beq.n	800cc76 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2208      	movs	r2, #8
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cc72:	2308      	movs	r3, #8
 800cc74:	e044      	b.n	800cd00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc7c:	f003 0302 	and.w	r3, r3, #2
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d005      	beq.n	800cc90 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2202      	movs	r2, #2
 800cc8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	e037      	b.n	800cd00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc96:	f003 0320 	and.w	r3, r3, #32
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d005      	beq.n	800ccaa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2220      	movs	r2, #32
 800cca4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cca6:	2320      	movs	r3, #32
 800cca8:	e02a      	b.n	800cd00 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f240 523a 	movw	r2, #1338	; 0x53a
 800ccb2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	061a      	lsls	r2, r3, #24
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccc0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	0a1b      	lsrs	r3, r3, #8
 800ccc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ccca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	0e1b      	lsrs	r3, r3, #24
 800ccd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	601a      	str	r2, [r3, #0]
    scr++;
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	3304      	adds	r3, #4
 800ccda:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	061a      	lsls	r2, r3, #24
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	021b      	lsls	r3, r3, #8
 800cce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cce8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	0a1b      	lsrs	r3, r3, #8
 800ccee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ccf2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	0e1b      	lsrs	r3, r3, #24
 800ccf8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	373c      	adds	r7, #60	; 0x3c
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd90      	pop	{r4, r7, pc}

0800cd08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d101      	bne.n	800cd1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e095      	b.n	800ce46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d108      	bne.n	800cd34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd2a:	d009      	beq.n	800cd40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	61da      	str	r2, [r3, #28]
 800cd32:	e005      	b.n	800cd40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d106      	bne.n	800cd60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7f5 f904 	bl	8001f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd80:	d902      	bls.n	800cd88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cd82:	2300      	movs	r3, #0
 800cd84:	60fb      	str	r3, [r7, #12]
 800cd86:	e002      	b.n	800cd8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cd88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cd96:	d007      	beq.n	800cda8 <HAL_SPI_Init+0xa0>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cda0:	d002      	beq.n	800cda8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cdb8:	431a      	orrs	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	f003 0302 	and.w	r3, r3, #2
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	f003 0301 	and.w	r3, r3, #1
 800cdcc:	431a      	orrs	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cdd6:	431a      	orrs	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	69db      	ldr	r3, [r3, #28]
 800cddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cde0:	431a      	orrs	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a1b      	ldr	r3, [r3, #32]
 800cde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdea:	ea42 0103 	orr.w	r1, r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	430a      	orrs	r2, r1
 800cdfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	0c1b      	lsrs	r3, r3, #16
 800ce04:	f003 0204 	and.w	r2, r3, #4
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0c:	f003 0310 	and.w	r3, r3, #16
 800ce10:	431a      	orrs	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce16:	f003 0308 	and.w	r3, r3, #8
 800ce1a:	431a      	orrs	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ce24:	ea42 0103 	orr.w	r1, r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	430a      	orrs	r2, r1
 800ce34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e038      	b.n	800ced6 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d106      	bne.n	800ce7e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f7f5 f993 	bl	80021a4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	3308      	adds	r3, #8
 800ce86:	4619      	mov	r1, r3
 800ce88:	4610      	mov	r0, r2
 800ce8a:	f001 fb7b 	bl	800e584 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6818      	ldr	r0, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	461a      	mov	r2, r3
 800ce98:	68b9      	ldr	r1, [r7, #8]
 800ce9a:	f001 fc03 	bl	800e6a4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6858      	ldr	r0, [r3, #4]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	689a      	ldr	r2, [r3, #8]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	f001 fc4a 	bl	800e744 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	6892      	ldr	r2, [r2, #8]
 800ceb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	6892      	ldr	r2, [r2, #8]
 800cec4:	f041 0101 	orr.w	r1, r1, #1
 800cec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ceec:	2301      	movs	r3, #1
 800ceee:	e049      	b.n	800cf84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d106      	bne.n	800cf0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7f8 facd 	bl	80054a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2202      	movs	r2, #2
 800cf0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	3304      	adds	r3, #4
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	f000 fae5 	bl	800d4ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d109      	bne.n	800cfb0 <HAL_TIM_PWM_Start+0x24>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	bf14      	ite	ne
 800cfa8:	2301      	movne	r3, #1
 800cfaa:	2300      	moveq	r3, #0
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	e03c      	b.n	800d02a <HAL_TIM_PWM_Start+0x9e>
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	2b04      	cmp	r3, #4
 800cfb4:	d109      	bne.n	800cfca <HAL_TIM_PWM_Start+0x3e>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	bf14      	ite	ne
 800cfc2:	2301      	movne	r3, #1
 800cfc4:	2300      	moveq	r3, #0
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	e02f      	b.n	800d02a <HAL_TIM_PWM_Start+0x9e>
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b08      	cmp	r3, #8
 800cfce:	d109      	bne.n	800cfe4 <HAL_TIM_PWM_Start+0x58>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	bf14      	ite	ne
 800cfdc:	2301      	movne	r3, #1
 800cfde:	2300      	moveq	r3, #0
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	e022      	b.n	800d02a <HAL_TIM_PWM_Start+0x9e>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2b0c      	cmp	r3, #12
 800cfe8:	d109      	bne.n	800cffe <HAL_TIM_PWM_Start+0x72>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	bf14      	ite	ne
 800cff6:	2301      	movne	r3, #1
 800cff8:	2300      	moveq	r3, #0
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	e015      	b.n	800d02a <HAL_TIM_PWM_Start+0x9e>
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b10      	cmp	r3, #16
 800d002:	d109      	bne.n	800d018 <HAL_TIM_PWM_Start+0x8c>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	bf14      	ite	ne
 800d010:	2301      	movne	r3, #1
 800d012:	2300      	moveq	r3, #0
 800d014:	b2db      	uxtb	r3, r3
 800d016:	e008      	b.n	800d02a <HAL_TIM_PWM_Start+0x9e>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	2b01      	cmp	r3, #1
 800d022:	bf14      	ite	ne
 800d024:	2301      	movne	r3, #1
 800d026:	2300      	moveq	r3, #0
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d001      	beq.n	800d032 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e09c      	b.n	800d16c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d104      	bne.n	800d042 <HAL_TIM_PWM_Start+0xb6>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2202      	movs	r2, #2
 800d03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d040:	e023      	b.n	800d08a <HAL_TIM_PWM_Start+0xfe>
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	2b04      	cmp	r3, #4
 800d046:	d104      	bne.n	800d052 <HAL_TIM_PWM_Start+0xc6>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2202      	movs	r2, #2
 800d04c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d050:	e01b      	b.n	800d08a <HAL_TIM_PWM_Start+0xfe>
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b08      	cmp	r3, #8
 800d056:	d104      	bne.n	800d062 <HAL_TIM_PWM_Start+0xd6>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2202      	movs	r2, #2
 800d05c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d060:	e013      	b.n	800d08a <HAL_TIM_PWM_Start+0xfe>
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b0c      	cmp	r3, #12
 800d066:	d104      	bne.n	800d072 <HAL_TIM_PWM_Start+0xe6>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2202      	movs	r2, #2
 800d06c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d070:	e00b      	b.n	800d08a <HAL_TIM_PWM_Start+0xfe>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b10      	cmp	r3, #16
 800d076:	d104      	bne.n	800d082 <HAL_TIM_PWM_Start+0xf6>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2202      	movs	r2, #2
 800d07c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d080:	e003      	b.n	800d08a <HAL_TIM_PWM_Start+0xfe>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2202      	movs	r2, #2
 800d086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2201      	movs	r2, #1
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	4618      	mov	r0, r3
 800d094:	f000 fd9a 	bl	800dbcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a35      	ldr	r2, [pc, #212]	; (800d174 <HAL_TIM_PWM_Start+0x1e8>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d013      	beq.n	800d0ca <HAL_TIM_PWM_Start+0x13e>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a34      	ldr	r2, [pc, #208]	; (800d178 <HAL_TIM_PWM_Start+0x1ec>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d00e      	beq.n	800d0ca <HAL_TIM_PWM_Start+0x13e>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a32      	ldr	r2, [pc, #200]	; (800d17c <HAL_TIM_PWM_Start+0x1f0>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d009      	beq.n	800d0ca <HAL_TIM_PWM_Start+0x13e>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a31      	ldr	r2, [pc, #196]	; (800d180 <HAL_TIM_PWM_Start+0x1f4>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d004      	beq.n	800d0ca <HAL_TIM_PWM_Start+0x13e>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a2f      	ldr	r2, [pc, #188]	; (800d184 <HAL_TIM_PWM_Start+0x1f8>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d101      	bne.n	800d0ce <HAL_TIM_PWM_Start+0x142>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e000      	b.n	800d0d0 <HAL_TIM_PWM_Start+0x144>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d007      	beq.n	800d0e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d0e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a22      	ldr	r2, [pc, #136]	; (800d174 <HAL_TIM_PWM_Start+0x1e8>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d01d      	beq.n	800d12a <HAL_TIM_PWM_Start+0x19e>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0f6:	d018      	beq.n	800d12a <HAL_TIM_PWM_Start+0x19e>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a22      	ldr	r2, [pc, #136]	; (800d188 <HAL_TIM_PWM_Start+0x1fc>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d013      	beq.n	800d12a <HAL_TIM_PWM_Start+0x19e>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a21      	ldr	r2, [pc, #132]	; (800d18c <HAL_TIM_PWM_Start+0x200>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d00e      	beq.n	800d12a <HAL_TIM_PWM_Start+0x19e>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a1f      	ldr	r2, [pc, #124]	; (800d190 <HAL_TIM_PWM_Start+0x204>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d009      	beq.n	800d12a <HAL_TIM_PWM_Start+0x19e>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a17      	ldr	r2, [pc, #92]	; (800d178 <HAL_TIM_PWM_Start+0x1ec>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d004      	beq.n	800d12a <HAL_TIM_PWM_Start+0x19e>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a15      	ldr	r2, [pc, #84]	; (800d17c <HAL_TIM_PWM_Start+0x1f0>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d115      	bne.n	800d156 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	689a      	ldr	r2, [r3, #8]
 800d130:	4b18      	ldr	r3, [pc, #96]	; (800d194 <HAL_TIM_PWM_Start+0x208>)
 800d132:	4013      	ands	r3, r2
 800d134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2b06      	cmp	r3, #6
 800d13a:	d015      	beq.n	800d168 <HAL_TIM_PWM_Start+0x1dc>
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d142:	d011      	beq.n	800d168 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f042 0201 	orr.w	r2, r2, #1
 800d152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d154:	e008      	b.n	800d168 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f042 0201 	orr.w	r2, r2, #1
 800d164:	601a      	str	r2, [r3, #0]
 800d166:	e000      	b.n	800d16a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d168:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	40012c00 	.word	0x40012c00
 800d178:	40013400 	.word	0x40013400
 800d17c:	40014000 	.word	0x40014000
 800d180:	40014400 	.word	0x40014400
 800d184:	40014800 	.word	0x40014800
 800d188:	40000400 	.word	0x40000400
 800d18c:	40000800 	.word	0x40000800
 800d190:	40000c00 	.word	0x40000c00
 800d194:	00010007 	.word	0x00010007

0800d198 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fd0e 	bl	800dbcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a3e      	ldr	r2, [pc, #248]	; (800d2b0 <HAL_TIM_PWM_Stop+0x118>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d013      	beq.n	800d1e2 <HAL_TIM_PWM_Stop+0x4a>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a3d      	ldr	r2, [pc, #244]	; (800d2b4 <HAL_TIM_PWM_Stop+0x11c>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d00e      	beq.n	800d1e2 <HAL_TIM_PWM_Stop+0x4a>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a3b      	ldr	r2, [pc, #236]	; (800d2b8 <HAL_TIM_PWM_Stop+0x120>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d009      	beq.n	800d1e2 <HAL_TIM_PWM_Stop+0x4a>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a3a      	ldr	r2, [pc, #232]	; (800d2bc <HAL_TIM_PWM_Stop+0x124>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d004      	beq.n	800d1e2 <HAL_TIM_PWM_Stop+0x4a>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a38      	ldr	r2, [pc, #224]	; (800d2c0 <HAL_TIM_PWM_Stop+0x128>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d101      	bne.n	800d1e6 <HAL_TIM_PWM_Stop+0x4e>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e000      	b.n	800d1e8 <HAL_TIM_PWM_Stop+0x50>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d017      	beq.n	800d21c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6a1a      	ldr	r2, [r3, #32]
 800d1f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10f      	bne.n	800d21c <HAL_TIM_PWM_Stop+0x84>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6a1a      	ldr	r2, [r3, #32]
 800d202:	f240 4344 	movw	r3, #1092	; 0x444
 800d206:	4013      	ands	r3, r2
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d107      	bne.n	800d21c <HAL_TIM_PWM_Stop+0x84>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d21a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6a1a      	ldr	r2, [r3, #32]
 800d222:	f241 1311 	movw	r3, #4369	; 0x1111
 800d226:	4013      	ands	r3, r2
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10f      	bne.n	800d24c <HAL_TIM_PWM_Stop+0xb4>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6a1a      	ldr	r2, [r3, #32]
 800d232:	f240 4344 	movw	r3, #1092	; 0x444
 800d236:	4013      	ands	r3, r2
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d107      	bne.n	800d24c <HAL_TIM_PWM_Stop+0xb4>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f022 0201 	bic.w	r2, r2, #1
 800d24a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d104      	bne.n	800d25c <HAL_TIM_PWM_Stop+0xc4>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d25a:	e023      	b.n	800d2a4 <HAL_TIM_PWM_Stop+0x10c>
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	2b04      	cmp	r3, #4
 800d260:	d104      	bne.n	800d26c <HAL_TIM_PWM_Stop+0xd4>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2201      	movs	r2, #1
 800d266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d26a:	e01b      	b.n	800d2a4 <HAL_TIM_PWM_Stop+0x10c>
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	2b08      	cmp	r3, #8
 800d270:	d104      	bne.n	800d27c <HAL_TIM_PWM_Stop+0xe4>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2201      	movs	r2, #1
 800d276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d27a:	e013      	b.n	800d2a4 <HAL_TIM_PWM_Stop+0x10c>
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b0c      	cmp	r3, #12
 800d280:	d104      	bne.n	800d28c <HAL_TIM_PWM_Stop+0xf4>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d28a:	e00b      	b.n	800d2a4 <HAL_TIM_PWM_Stop+0x10c>
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	2b10      	cmp	r3, #16
 800d290:	d104      	bne.n	800d29c <HAL_TIM_PWM_Stop+0x104>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d29a:	e003      	b.n	800d2a4 <HAL_TIM_PWM_Stop+0x10c>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	40012c00 	.word	0x40012c00
 800d2b4:	40013400 	.word	0x40013400
 800d2b8:	40014000 	.word	0x40014000
 800d2bc:	40014400 	.word	0x40014400
 800d2c0:	40014800 	.word	0x40014800

0800d2c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d101      	bne.n	800d2e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d2de:	2302      	movs	r3, #2
 800d2e0:	e0ff      	b.n	800d4e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b14      	cmp	r3, #20
 800d2ee:	f200 80f0 	bhi.w	800d4d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d2f2:	a201      	add	r2, pc, #4	; (adr r2, 800d2f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f8:	0800d34d 	.word	0x0800d34d
 800d2fc:	0800d4d3 	.word	0x0800d4d3
 800d300:	0800d4d3 	.word	0x0800d4d3
 800d304:	0800d4d3 	.word	0x0800d4d3
 800d308:	0800d38d 	.word	0x0800d38d
 800d30c:	0800d4d3 	.word	0x0800d4d3
 800d310:	0800d4d3 	.word	0x0800d4d3
 800d314:	0800d4d3 	.word	0x0800d4d3
 800d318:	0800d3cf 	.word	0x0800d3cf
 800d31c:	0800d4d3 	.word	0x0800d4d3
 800d320:	0800d4d3 	.word	0x0800d4d3
 800d324:	0800d4d3 	.word	0x0800d4d3
 800d328:	0800d40f 	.word	0x0800d40f
 800d32c:	0800d4d3 	.word	0x0800d4d3
 800d330:	0800d4d3 	.word	0x0800d4d3
 800d334:	0800d4d3 	.word	0x0800d4d3
 800d338:	0800d451 	.word	0x0800d451
 800d33c:	0800d4d3 	.word	0x0800d4d3
 800d340:	0800d4d3 	.word	0x0800d4d3
 800d344:	0800d4d3 	.word	0x0800d4d3
 800d348:	0800d491 	.word	0x0800d491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	4618      	mov	r0, r3
 800d354:	f000 f964 	bl	800d620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	699a      	ldr	r2, [r3, #24]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f042 0208 	orr.w	r2, r2, #8
 800d366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	699a      	ldr	r2, [r3, #24]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f022 0204 	bic.w	r2, r2, #4
 800d376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6999      	ldr	r1, [r3, #24]
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	691a      	ldr	r2, [r3, #16]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	430a      	orrs	r2, r1
 800d388:	619a      	str	r2, [r3, #24]
      break;
 800d38a:	e0a5      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68b9      	ldr	r1, [r7, #8]
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f9d4 	bl	800d740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	699a      	ldr	r2, [r3, #24]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6999      	ldr	r1, [r3, #24]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	021a      	lsls	r2, r3, #8
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	430a      	orrs	r2, r1
 800d3ca:	619a      	str	r2, [r3, #24]
      break;
 800d3cc:	e084      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 fa3d 	bl	800d854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69da      	ldr	r2, [r3, #28]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f042 0208 	orr.w	r2, r2, #8
 800d3e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	69da      	ldr	r2, [r3, #28]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f022 0204 	bic.w	r2, r2, #4
 800d3f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	69d9      	ldr	r1, [r3, #28]
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	691a      	ldr	r2, [r3, #16]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	430a      	orrs	r2, r1
 800d40a:	61da      	str	r2, [r3, #28]
      break;
 800d40c:	e064      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	4618      	mov	r0, r3
 800d416:	f000 faa5 	bl	800d964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	69da      	ldr	r2, [r3, #28]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	69da      	ldr	r2, [r3, #28]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	69d9      	ldr	r1, [r3, #28]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	021a      	lsls	r2, r3, #8
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	430a      	orrs	r2, r1
 800d44c:	61da      	str	r2, [r3, #28]
      break;
 800d44e:	e043      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68b9      	ldr	r1, [r7, #8]
 800d456:	4618      	mov	r0, r3
 800d458:	f000 faee 	bl	800da38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f042 0208 	orr.w	r2, r2, #8
 800d46a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f022 0204 	bic.w	r2, r2, #4
 800d47a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	691a      	ldr	r2, [r3, #16]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	430a      	orrs	r2, r1
 800d48c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d48e:	e023      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68b9      	ldr	r1, [r7, #8]
 800d496:	4618      	mov	r0, r3
 800d498:	f000 fb32 	bl	800db00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	021a      	lsls	r2, r3, #8
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d4d0:	e002      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800d4d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop

0800d4ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a40      	ldr	r2, [pc, #256]	; (800d600 <TIM_Base_SetConfig+0x114>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d013      	beq.n	800d52c <TIM_Base_SetConfig+0x40>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d50a:	d00f      	beq.n	800d52c <TIM_Base_SetConfig+0x40>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4a3d      	ldr	r2, [pc, #244]	; (800d604 <TIM_Base_SetConfig+0x118>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d00b      	beq.n	800d52c <TIM_Base_SetConfig+0x40>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4a3c      	ldr	r2, [pc, #240]	; (800d608 <TIM_Base_SetConfig+0x11c>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d007      	beq.n	800d52c <TIM_Base_SetConfig+0x40>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	4a3b      	ldr	r2, [pc, #236]	; (800d60c <TIM_Base_SetConfig+0x120>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d003      	beq.n	800d52c <TIM_Base_SetConfig+0x40>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a3a      	ldr	r2, [pc, #232]	; (800d610 <TIM_Base_SetConfig+0x124>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d108      	bne.n	800d53e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a2f      	ldr	r2, [pc, #188]	; (800d600 <TIM_Base_SetConfig+0x114>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d01f      	beq.n	800d586 <TIM_Base_SetConfig+0x9a>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d54c:	d01b      	beq.n	800d586 <TIM_Base_SetConfig+0x9a>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a2c      	ldr	r2, [pc, #176]	; (800d604 <TIM_Base_SetConfig+0x118>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d017      	beq.n	800d586 <TIM_Base_SetConfig+0x9a>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a2b      	ldr	r2, [pc, #172]	; (800d608 <TIM_Base_SetConfig+0x11c>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d013      	beq.n	800d586 <TIM_Base_SetConfig+0x9a>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a2a      	ldr	r2, [pc, #168]	; (800d60c <TIM_Base_SetConfig+0x120>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d00f      	beq.n	800d586 <TIM_Base_SetConfig+0x9a>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a29      	ldr	r2, [pc, #164]	; (800d610 <TIM_Base_SetConfig+0x124>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d00b      	beq.n	800d586 <TIM_Base_SetConfig+0x9a>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a28      	ldr	r2, [pc, #160]	; (800d614 <TIM_Base_SetConfig+0x128>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d007      	beq.n	800d586 <TIM_Base_SetConfig+0x9a>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4a27      	ldr	r2, [pc, #156]	; (800d618 <TIM_Base_SetConfig+0x12c>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d003      	beq.n	800d586 <TIM_Base_SetConfig+0x9a>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a26      	ldr	r2, [pc, #152]	; (800d61c <TIM_Base_SetConfig+0x130>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d108      	bne.n	800d598 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d58c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	4313      	orrs	r3, r2
 800d596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	689a      	ldr	r2, [r3, #8]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a10      	ldr	r2, [pc, #64]	; (800d600 <TIM_Base_SetConfig+0x114>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d00f      	beq.n	800d5e4 <TIM_Base_SetConfig+0xf8>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a12      	ldr	r2, [pc, #72]	; (800d610 <TIM_Base_SetConfig+0x124>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d00b      	beq.n	800d5e4 <TIM_Base_SetConfig+0xf8>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4a11      	ldr	r2, [pc, #68]	; (800d614 <TIM_Base_SetConfig+0x128>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d007      	beq.n	800d5e4 <TIM_Base_SetConfig+0xf8>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	4a10      	ldr	r2, [pc, #64]	; (800d618 <TIM_Base_SetConfig+0x12c>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d003      	beq.n	800d5e4 <TIM_Base_SetConfig+0xf8>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4a0f      	ldr	r2, [pc, #60]	; (800d61c <TIM_Base_SetConfig+0x130>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d103      	bne.n	800d5ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	691a      	ldr	r2, [r3, #16]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	615a      	str	r2, [r3, #20]
}
 800d5f2:	bf00      	nop
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	40012c00 	.word	0x40012c00
 800d604:	40000400 	.word	0x40000400
 800d608:	40000800 	.word	0x40000800
 800d60c:	40000c00 	.word	0x40000c00
 800d610:	40013400 	.word	0x40013400
 800d614:	40014000 	.word	0x40014000
 800d618:	40014400 	.word	0x40014400
 800d61c:	40014800 	.word	0x40014800

0800d620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d620:	b480      	push	{r7}
 800d622:	b087      	sub	sp, #28
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	f023 0201 	bic.w	r2, r3, #1
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f023 0303 	bic.w	r3, r3, #3
 800d65a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	4313      	orrs	r3, r2
 800d664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f023 0302 	bic.w	r3, r3, #2
 800d66c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	697a      	ldr	r2, [r7, #20]
 800d674:	4313      	orrs	r3, r2
 800d676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a2c      	ldr	r2, [pc, #176]	; (800d72c <TIM_OC1_SetConfig+0x10c>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d00f      	beq.n	800d6a0 <TIM_OC1_SetConfig+0x80>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a2b      	ldr	r2, [pc, #172]	; (800d730 <TIM_OC1_SetConfig+0x110>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d00b      	beq.n	800d6a0 <TIM_OC1_SetConfig+0x80>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a2a      	ldr	r2, [pc, #168]	; (800d734 <TIM_OC1_SetConfig+0x114>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d007      	beq.n	800d6a0 <TIM_OC1_SetConfig+0x80>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4a29      	ldr	r2, [pc, #164]	; (800d738 <TIM_OC1_SetConfig+0x118>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d003      	beq.n	800d6a0 <TIM_OC1_SetConfig+0x80>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	4a28      	ldr	r2, [pc, #160]	; (800d73c <TIM_OC1_SetConfig+0x11c>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d10c      	bne.n	800d6ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	f023 0308 	bic.w	r3, r3, #8
 800d6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	697a      	ldr	r2, [r7, #20]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f023 0304 	bic.w	r3, r3, #4
 800d6b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a1b      	ldr	r2, [pc, #108]	; (800d72c <TIM_OC1_SetConfig+0x10c>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d00f      	beq.n	800d6e2 <TIM_OC1_SetConfig+0xc2>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a1a      	ldr	r2, [pc, #104]	; (800d730 <TIM_OC1_SetConfig+0x110>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d00b      	beq.n	800d6e2 <TIM_OC1_SetConfig+0xc2>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a19      	ldr	r2, [pc, #100]	; (800d734 <TIM_OC1_SetConfig+0x114>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d007      	beq.n	800d6e2 <TIM_OC1_SetConfig+0xc2>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a18      	ldr	r2, [pc, #96]	; (800d738 <TIM_OC1_SetConfig+0x118>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d003      	beq.n	800d6e2 <TIM_OC1_SetConfig+0xc2>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a17      	ldr	r2, [pc, #92]	; (800d73c <TIM_OC1_SetConfig+0x11c>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d111      	bne.n	800d706 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	699b      	ldr	r3, [r3, #24]
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	4313      	orrs	r3, r2
 800d704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	685a      	ldr	r2, [r3, #4]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	697a      	ldr	r2, [r7, #20]
 800d71e:	621a      	str	r2, [r3, #32]
}
 800d720:	bf00      	nop
 800d722:	371c      	adds	r7, #28
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	40012c00 	.word	0x40012c00
 800d730:	40013400 	.word	0x40013400
 800d734:	40014000 	.word	0x40014000
 800d738:	40014400 	.word	0x40014400
 800d73c:	40014800 	.word	0x40014800

0800d740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d740:	b480      	push	{r7}
 800d742:	b087      	sub	sp, #28
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a1b      	ldr	r3, [r3, #32]
 800d74e:	f023 0210 	bic.w	r2, r3, #16
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a1b      	ldr	r3, [r3, #32]
 800d75a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d76e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d77a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	021b      	lsls	r3, r3, #8
 800d782:	68fa      	ldr	r2, [r7, #12]
 800d784:	4313      	orrs	r3, r2
 800d786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	f023 0320 	bic.w	r3, r3, #32
 800d78e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	011b      	lsls	r3, r3, #4
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	4313      	orrs	r3, r2
 800d79a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a28      	ldr	r2, [pc, #160]	; (800d840 <TIM_OC2_SetConfig+0x100>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d003      	beq.n	800d7ac <TIM_OC2_SetConfig+0x6c>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a27      	ldr	r2, [pc, #156]	; (800d844 <TIM_OC2_SetConfig+0x104>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d10d      	bne.n	800d7c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	011b      	lsls	r3, r3, #4
 800d7ba:	697a      	ldr	r2, [r7, #20]
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a1d      	ldr	r2, [pc, #116]	; (800d840 <TIM_OC2_SetConfig+0x100>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d00f      	beq.n	800d7f0 <TIM_OC2_SetConfig+0xb0>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a1c      	ldr	r2, [pc, #112]	; (800d844 <TIM_OC2_SetConfig+0x104>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d00b      	beq.n	800d7f0 <TIM_OC2_SetConfig+0xb0>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a1b      	ldr	r2, [pc, #108]	; (800d848 <TIM_OC2_SetConfig+0x108>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d007      	beq.n	800d7f0 <TIM_OC2_SetConfig+0xb0>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a1a      	ldr	r2, [pc, #104]	; (800d84c <TIM_OC2_SetConfig+0x10c>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d003      	beq.n	800d7f0 <TIM_OC2_SetConfig+0xb0>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a19      	ldr	r2, [pc, #100]	; (800d850 <TIM_OC2_SetConfig+0x110>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d113      	bne.n	800d818 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	4313      	orrs	r3, r2
 800d80a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	4313      	orrs	r3, r2
 800d816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	685a      	ldr	r2, [r3, #4]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	621a      	str	r2, [r3, #32]
}
 800d832:	bf00      	nop
 800d834:	371c      	adds	r7, #28
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	40012c00 	.word	0x40012c00
 800d844:	40013400 	.word	0x40013400
 800d848:	40014000 	.word	0x40014000
 800d84c:	40014400 	.word	0x40014400
 800d850:	40014800 	.word	0x40014800

0800d854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d854:	b480      	push	{r7}
 800d856:	b087      	sub	sp, #28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	69db      	ldr	r3, [r3, #28]
 800d87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f023 0303 	bic.w	r3, r3, #3
 800d88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	4313      	orrs	r3, r2
 800d898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	021b      	lsls	r3, r3, #8
 800d8a8:	697a      	ldr	r2, [r7, #20]
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4a27      	ldr	r2, [pc, #156]	; (800d950 <TIM_OC3_SetConfig+0xfc>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d003      	beq.n	800d8be <TIM_OC3_SetConfig+0x6a>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4a26      	ldr	r2, [pc, #152]	; (800d954 <TIM_OC3_SetConfig+0x100>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d10d      	bne.n	800d8da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	021b      	lsls	r3, r3, #8
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d8d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a1c      	ldr	r2, [pc, #112]	; (800d950 <TIM_OC3_SetConfig+0xfc>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d00f      	beq.n	800d902 <TIM_OC3_SetConfig+0xae>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4a1b      	ldr	r2, [pc, #108]	; (800d954 <TIM_OC3_SetConfig+0x100>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d00b      	beq.n	800d902 <TIM_OC3_SetConfig+0xae>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4a1a      	ldr	r2, [pc, #104]	; (800d958 <TIM_OC3_SetConfig+0x104>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d007      	beq.n	800d902 <TIM_OC3_SetConfig+0xae>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4a19      	ldr	r2, [pc, #100]	; (800d95c <TIM_OC3_SetConfig+0x108>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d003      	beq.n	800d902 <TIM_OC3_SetConfig+0xae>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4a18      	ldr	r2, [pc, #96]	; (800d960 <TIM_OC3_SetConfig+0x10c>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d113      	bne.n	800d92a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	695b      	ldr	r3, [r3, #20]
 800d916:	011b      	lsls	r3, r3, #4
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	011b      	lsls	r3, r3, #4
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	4313      	orrs	r3, r2
 800d928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	693a      	ldr	r2, [r7, #16]
 800d92e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	685a      	ldr	r2, [r3, #4]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	621a      	str	r2, [r3, #32]
}
 800d944:	bf00      	nop
 800d946:	371c      	adds	r7, #28
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr
 800d950:	40012c00 	.word	0x40012c00
 800d954:	40013400 	.word	0x40013400
 800d958:	40014000 	.word	0x40014000
 800d95c:	40014400 	.word	0x40014400
 800d960:	40014800 	.word	0x40014800

0800d964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d964:	b480      	push	{r7}
 800d966:	b087      	sub	sp, #28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a1b      	ldr	r3, [r3, #32]
 800d97e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d99e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	021b      	lsls	r3, r3, #8
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d9b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	031b      	lsls	r3, r3, #12
 800d9ba:	693a      	ldr	r2, [r7, #16]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a18      	ldr	r2, [pc, #96]	; (800da24 <TIM_OC4_SetConfig+0xc0>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d00f      	beq.n	800d9e8 <TIM_OC4_SetConfig+0x84>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a17      	ldr	r2, [pc, #92]	; (800da28 <TIM_OC4_SetConfig+0xc4>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d00b      	beq.n	800d9e8 <TIM_OC4_SetConfig+0x84>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a16      	ldr	r2, [pc, #88]	; (800da2c <TIM_OC4_SetConfig+0xc8>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d007      	beq.n	800d9e8 <TIM_OC4_SetConfig+0x84>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a15      	ldr	r2, [pc, #84]	; (800da30 <TIM_OC4_SetConfig+0xcc>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d003      	beq.n	800d9e8 <TIM_OC4_SetConfig+0x84>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a14      	ldr	r2, [pc, #80]	; (800da34 <TIM_OC4_SetConfig+0xd0>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d109      	bne.n	800d9fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d9ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	695b      	ldr	r3, [r3, #20]
 800d9f4:	019b      	lsls	r3, r3, #6
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	693a      	ldr	r2, [r7, #16]
 800da14:	621a      	str	r2, [r3, #32]
}
 800da16:	bf00      	nop
 800da18:	371c      	adds	r7, #28
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	40012c00 	.word	0x40012c00
 800da28:	40013400 	.word	0x40013400
 800da2c:	40014000 	.word	0x40014000
 800da30:	40014400 	.word	0x40014400
 800da34:	40014800 	.word	0x40014800

0800da38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800da38:	b480      	push	{r7}
 800da3a:	b087      	sub	sp, #28
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	4313      	orrs	r3, r2
 800da74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800da7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	041b      	lsls	r3, r3, #16
 800da84:	693a      	ldr	r2, [r7, #16]
 800da86:	4313      	orrs	r3, r2
 800da88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a17      	ldr	r2, [pc, #92]	; (800daec <TIM_OC5_SetConfig+0xb4>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d00f      	beq.n	800dab2 <TIM_OC5_SetConfig+0x7a>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a16      	ldr	r2, [pc, #88]	; (800daf0 <TIM_OC5_SetConfig+0xb8>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d00b      	beq.n	800dab2 <TIM_OC5_SetConfig+0x7a>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a15      	ldr	r2, [pc, #84]	; (800daf4 <TIM_OC5_SetConfig+0xbc>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d007      	beq.n	800dab2 <TIM_OC5_SetConfig+0x7a>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a14      	ldr	r2, [pc, #80]	; (800daf8 <TIM_OC5_SetConfig+0xc0>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d003      	beq.n	800dab2 <TIM_OC5_SetConfig+0x7a>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4a13      	ldr	r2, [pc, #76]	; (800dafc <TIM_OC5_SetConfig+0xc4>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d109      	bne.n	800dac6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	695b      	ldr	r3, [r3, #20]
 800dabe:	021b      	lsls	r3, r3, #8
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	4313      	orrs	r3, r2
 800dac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	685a      	ldr	r2, [r3, #4]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	621a      	str	r2, [r3, #32]
}
 800dae0:	bf00      	nop
 800dae2:	371c      	adds	r7, #28
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr
 800daec:	40012c00 	.word	0x40012c00
 800daf0:	40013400 	.word	0x40013400
 800daf4:	40014000 	.word	0x40014000
 800daf8:	40014400 	.word	0x40014400
 800dafc:	40014800 	.word	0x40014800

0800db00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800db00:	b480      	push	{r7}
 800db02:	b087      	sub	sp, #28
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a1b      	ldr	r3, [r3, #32]
 800db1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	021b      	lsls	r3, r3, #8
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	051b      	lsls	r3, r3, #20
 800db4e:	693a      	ldr	r2, [r7, #16]
 800db50:	4313      	orrs	r3, r2
 800db52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a18      	ldr	r2, [pc, #96]	; (800dbb8 <TIM_OC6_SetConfig+0xb8>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d00f      	beq.n	800db7c <TIM_OC6_SetConfig+0x7c>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a17      	ldr	r2, [pc, #92]	; (800dbbc <TIM_OC6_SetConfig+0xbc>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d00b      	beq.n	800db7c <TIM_OC6_SetConfig+0x7c>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a16      	ldr	r2, [pc, #88]	; (800dbc0 <TIM_OC6_SetConfig+0xc0>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d007      	beq.n	800db7c <TIM_OC6_SetConfig+0x7c>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4a15      	ldr	r2, [pc, #84]	; (800dbc4 <TIM_OC6_SetConfig+0xc4>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d003      	beq.n	800db7c <TIM_OC6_SetConfig+0x7c>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	4a14      	ldr	r2, [pc, #80]	; (800dbc8 <TIM_OC6_SetConfig+0xc8>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d109      	bne.n	800db90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	695b      	ldr	r3, [r3, #20]
 800db88:	029b      	lsls	r3, r3, #10
 800db8a:	697a      	ldr	r2, [r7, #20]
 800db8c:	4313      	orrs	r3, r2
 800db8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	697a      	ldr	r2, [r7, #20]
 800db94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	685a      	ldr	r2, [r3, #4]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	621a      	str	r2, [r3, #32]
}
 800dbaa:	bf00      	nop
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	40012c00 	.word	0x40012c00
 800dbbc:	40013400 	.word	0x40013400
 800dbc0:	40014000 	.word	0x40014000
 800dbc4:	40014400 	.word	0x40014400
 800dbc8:	40014800 	.word	0x40014800

0800dbcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b087      	sub	sp, #28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	f003 031f 	and.w	r3, r3, #31
 800dbde:	2201      	movs	r2, #1
 800dbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6a1a      	ldr	r2, [r3, #32]
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	43db      	mvns	r3, r3
 800dbee:	401a      	ands	r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6a1a      	ldr	r2, [r3, #32]
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	f003 031f 	and.w	r3, r3, #31
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	fa01 f303 	lsl.w	r3, r1, r3
 800dc04:	431a      	orrs	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	621a      	str	r2, [r3, #32]
}
 800dc0a:	bf00      	nop
 800dc0c:	371c      	adds	r7, #28
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b082      	sub	sp, #8
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e040      	b.n	800dcaa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d106      	bne.n	800dc3e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7f3 ffa1 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2224      	movs	r2, #36	; 0x24
 800dc42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f022 0201 	bic.w	r2, r2, #1
 800dc52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f82d 	bl	800dcb4 <UART_SetConfig>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d101      	bne.n	800dc64 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dc60:	2301      	movs	r3, #1
 800dc62:	e022      	b.n	800dcaa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fad9 	bl	800e224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	685a      	ldr	r2, [r3, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	689a      	ldr	r2, [r3, #8]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f042 0201 	orr.w	r2, r2, #1
 800dca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fb60 	bl	800e368 <UART_CheckIdleState>
 800dca8:	4603      	mov	r3, r0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
	...

0800dcb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dcb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcb8:	b08a      	sub	sp, #40	; 0x28
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	689a      	ldr	r2, [r3, #8]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	431a      	orrs	r2, r3
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	69db      	ldr	r3, [r3, #28]
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	4ba4      	ldr	r3, [pc, #656]	; (800df74 <UART_SetConfig+0x2c0>)
 800dce4:	4013      	ands	r3, r2
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	6812      	ldr	r2, [r2, #0]
 800dcea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcec:	430b      	orrs	r3, r1
 800dcee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	68da      	ldr	r2, [r3, #12]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	430a      	orrs	r2, r1
 800dd04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a99      	ldr	r2, [pc, #612]	; (800df78 <UART_SetConfig+0x2c4>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d004      	beq.n	800dd20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6a1b      	ldr	r3, [r3, #32]
 800dd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd30:	430a      	orrs	r2, r1
 800dd32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a90      	ldr	r2, [pc, #576]	; (800df7c <UART_SetConfig+0x2c8>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d126      	bne.n	800dd8c <UART_SetConfig+0xd8>
 800dd3e:	4b90      	ldr	r3, [pc, #576]	; (800df80 <UART_SetConfig+0x2cc>)
 800dd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd44:	f003 0303 	and.w	r3, r3, #3
 800dd48:	2b03      	cmp	r3, #3
 800dd4a:	d81b      	bhi.n	800dd84 <UART_SetConfig+0xd0>
 800dd4c:	a201      	add	r2, pc, #4	; (adr r2, 800dd54 <UART_SetConfig+0xa0>)
 800dd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd52:	bf00      	nop
 800dd54:	0800dd65 	.word	0x0800dd65
 800dd58:	0800dd75 	.word	0x0800dd75
 800dd5c:	0800dd6d 	.word	0x0800dd6d
 800dd60:	0800dd7d 	.word	0x0800dd7d
 800dd64:	2301      	movs	r3, #1
 800dd66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd6a:	e116      	b.n	800df9a <UART_SetConfig+0x2e6>
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd72:	e112      	b.n	800df9a <UART_SetConfig+0x2e6>
 800dd74:	2304      	movs	r3, #4
 800dd76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd7a:	e10e      	b.n	800df9a <UART_SetConfig+0x2e6>
 800dd7c:	2308      	movs	r3, #8
 800dd7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd82:	e10a      	b.n	800df9a <UART_SetConfig+0x2e6>
 800dd84:	2310      	movs	r3, #16
 800dd86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd8a:	e106      	b.n	800df9a <UART_SetConfig+0x2e6>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a7c      	ldr	r2, [pc, #496]	; (800df84 <UART_SetConfig+0x2d0>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d138      	bne.n	800de08 <UART_SetConfig+0x154>
 800dd96:	4b7a      	ldr	r3, [pc, #488]	; (800df80 <UART_SetConfig+0x2cc>)
 800dd98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd9c:	f003 030c 	and.w	r3, r3, #12
 800dda0:	2b0c      	cmp	r3, #12
 800dda2:	d82d      	bhi.n	800de00 <UART_SetConfig+0x14c>
 800dda4:	a201      	add	r2, pc, #4	; (adr r2, 800ddac <UART_SetConfig+0xf8>)
 800dda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddaa:	bf00      	nop
 800ddac:	0800dde1 	.word	0x0800dde1
 800ddb0:	0800de01 	.word	0x0800de01
 800ddb4:	0800de01 	.word	0x0800de01
 800ddb8:	0800de01 	.word	0x0800de01
 800ddbc:	0800ddf1 	.word	0x0800ddf1
 800ddc0:	0800de01 	.word	0x0800de01
 800ddc4:	0800de01 	.word	0x0800de01
 800ddc8:	0800de01 	.word	0x0800de01
 800ddcc:	0800dde9 	.word	0x0800dde9
 800ddd0:	0800de01 	.word	0x0800de01
 800ddd4:	0800de01 	.word	0x0800de01
 800ddd8:	0800de01 	.word	0x0800de01
 800dddc:	0800ddf9 	.word	0x0800ddf9
 800dde0:	2300      	movs	r3, #0
 800dde2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dde6:	e0d8      	b.n	800df9a <UART_SetConfig+0x2e6>
 800dde8:	2302      	movs	r3, #2
 800ddea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddee:	e0d4      	b.n	800df9a <UART_SetConfig+0x2e6>
 800ddf0:	2304      	movs	r3, #4
 800ddf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddf6:	e0d0      	b.n	800df9a <UART_SetConfig+0x2e6>
 800ddf8:	2308      	movs	r3, #8
 800ddfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddfe:	e0cc      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de00:	2310      	movs	r3, #16
 800de02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de06:	e0c8      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4a5e      	ldr	r2, [pc, #376]	; (800df88 <UART_SetConfig+0x2d4>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d125      	bne.n	800de5e <UART_SetConfig+0x1aa>
 800de12:	4b5b      	ldr	r3, [pc, #364]	; (800df80 <UART_SetConfig+0x2cc>)
 800de14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800de1c:	2b30      	cmp	r3, #48	; 0x30
 800de1e:	d016      	beq.n	800de4e <UART_SetConfig+0x19a>
 800de20:	2b30      	cmp	r3, #48	; 0x30
 800de22:	d818      	bhi.n	800de56 <UART_SetConfig+0x1a2>
 800de24:	2b20      	cmp	r3, #32
 800de26:	d00a      	beq.n	800de3e <UART_SetConfig+0x18a>
 800de28:	2b20      	cmp	r3, #32
 800de2a:	d814      	bhi.n	800de56 <UART_SetConfig+0x1a2>
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <UART_SetConfig+0x182>
 800de30:	2b10      	cmp	r3, #16
 800de32:	d008      	beq.n	800de46 <UART_SetConfig+0x192>
 800de34:	e00f      	b.n	800de56 <UART_SetConfig+0x1a2>
 800de36:	2300      	movs	r3, #0
 800de38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de3c:	e0ad      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de3e:	2302      	movs	r3, #2
 800de40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de44:	e0a9      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de46:	2304      	movs	r3, #4
 800de48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de4c:	e0a5      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de4e:	2308      	movs	r3, #8
 800de50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de54:	e0a1      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de56:	2310      	movs	r3, #16
 800de58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de5c:	e09d      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a4a      	ldr	r2, [pc, #296]	; (800df8c <UART_SetConfig+0x2d8>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d125      	bne.n	800deb4 <UART_SetConfig+0x200>
 800de68:	4b45      	ldr	r3, [pc, #276]	; (800df80 <UART_SetConfig+0x2cc>)
 800de6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800de72:	2bc0      	cmp	r3, #192	; 0xc0
 800de74:	d016      	beq.n	800dea4 <UART_SetConfig+0x1f0>
 800de76:	2bc0      	cmp	r3, #192	; 0xc0
 800de78:	d818      	bhi.n	800deac <UART_SetConfig+0x1f8>
 800de7a:	2b80      	cmp	r3, #128	; 0x80
 800de7c:	d00a      	beq.n	800de94 <UART_SetConfig+0x1e0>
 800de7e:	2b80      	cmp	r3, #128	; 0x80
 800de80:	d814      	bhi.n	800deac <UART_SetConfig+0x1f8>
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <UART_SetConfig+0x1d8>
 800de86:	2b40      	cmp	r3, #64	; 0x40
 800de88:	d008      	beq.n	800de9c <UART_SetConfig+0x1e8>
 800de8a:	e00f      	b.n	800deac <UART_SetConfig+0x1f8>
 800de8c:	2300      	movs	r3, #0
 800de8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de92:	e082      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de94:	2302      	movs	r3, #2
 800de96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de9a:	e07e      	b.n	800df9a <UART_SetConfig+0x2e6>
 800de9c:	2304      	movs	r3, #4
 800de9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dea2:	e07a      	b.n	800df9a <UART_SetConfig+0x2e6>
 800dea4:	2308      	movs	r3, #8
 800dea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deaa:	e076      	b.n	800df9a <UART_SetConfig+0x2e6>
 800deac:	2310      	movs	r3, #16
 800deae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deb2:	e072      	b.n	800df9a <UART_SetConfig+0x2e6>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a35      	ldr	r2, [pc, #212]	; (800df90 <UART_SetConfig+0x2dc>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d12a      	bne.n	800df14 <UART_SetConfig+0x260>
 800debe:	4b30      	ldr	r3, [pc, #192]	; (800df80 <UART_SetConfig+0x2cc>)
 800dec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800decc:	d01a      	beq.n	800df04 <UART_SetConfig+0x250>
 800dece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ded2:	d81b      	bhi.n	800df0c <UART_SetConfig+0x258>
 800ded4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ded8:	d00c      	beq.n	800def4 <UART_SetConfig+0x240>
 800deda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dede:	d815      	bhi.n	800df0c <UART_SetConfig+0x258>
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d003      	beq.n	800deec <UART_SetConfig+0x238>
 800dee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dee8:	d008      	beq.n	800defc <UART_SetConfig+0x248>
 800deea:	e00f      	b.n	800df0c <UART_SetConfig+0x258>
 800deec:	2300      	movs	r3, #0
 800deee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800def2:	e052      	b.n	800df9a <UART_SetConfig+0x2e6>
 800def4:	2302      	movs	r3, #2
 800def6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800defa:	e04e      	b.n	800df9a <UART_SetConfig+0x2e6>
 800defc:	2304      	movs	r3, #4
 800defe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df02:	e04a      	b.n	800df9a <UART_SetConfig+0x2e6>
 800df04:	2308      	movs	r3, #8
 800df06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df0a:	e046      	b.n	800df9a <UART_SetConfig+0x2e6>
 800df0c:	2310      	movs	r3, #16
 800df0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df12:	e042      	b.n	800df9a <UART_SetConfig+0x2e6>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a17      	ldr	r2, [pc, #92]	; (800df78 <UART_SetConfig+0x2c4>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d13a      	bne.n	800df94 <UART_SetConfig+0x2e0>
 800df1e:	4b18      	ldr	r3, [pc, #96]	; (800df80 <UART_SetConfig+0x2cc>)
 800df20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800df28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800df2c:	d01a      	beq.n	800df64 <UART_SetConfig+0x2b0>
 800df2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800df32:	d81b      	bhi.n	800df6c <UART_SetConfig+0x2b8>
 800df34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df38:	d00c      	beq.n	800df54 <UART_SetConfig+0x2a0>
 800df3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df3e:	d815      	bhi.n	800df6c <UART_SetConfig+0x2b8>
 800df40:	2b00      	cmp	r3, #0
 800df42:	d003      	beq.n	800df4c <UART_SetConfig+0x298>
 800df44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df48:	d008      	beq.n	800df5c <UART_SetConfig+0x2a8>
 800df4a:	e00f      	b.n	800df6c <UART_SetConfig+0x2b8>
 800df4c:	2300      	movs	r3, #0
 800df4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df52:	e022      	b.n	800df9a <UART_SetConfig+0x2e6>
 800df54:	2302      	movs	r3, #2
 800df56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df5a:	e01e      	b.n	800df9a <UART_SetConfig+0x2e6>
 800df5c:	2304      	movs	r3, #4
 800df5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df62:	e01a      	b.n	800df9a <UART_SetConfig+0x2e6>
 800df64:	2308      	movs	r3, #8
 800df66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df6a:	e016      	b.n	800df9a <UART_SetConfig+0x2e6>
 800df6c:	2310      	movs	r3, #16
 800df6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df72:	e012      	b.n	800df9a <UART_SetConfig+0x2e6>
 800df74:	efff69f3 	.word	0xefff69f3
 800df78:	40008000 	.word	0x40008000
 800df7c:	40013800 	.word	0x40013800
 800df80:	40021000 	.word	0x40021000
 800df84:	40004400 	.word	0x40004400
 800df88:	40004800 	.word	0x40004800
 800df8c:	40004c00 	.word	0x40004c00
 800df90:	40005000 	.word	0x40005000
 800df94:	2310      	movs	r3, #16
 800df96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a9f      	ldr	r2, [pc, #636]	; (800e21c <UART_SetConfig+0x568>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d17a      	bne.n	800e09a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dfa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfa8:	2b08      	cmp	r3, #8
 800dfaa:	d824      	bhi.n	800dff6 <UART_SetConfig+0x342>
 800dfac:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <UART_SetConfig+0x300>)
 800dfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb2:	bf00      	nop
 800dfb4:	0800dfd9 	.word	0x0800dfd9
 800dfb8:	0800dff7 	.word	0x0800dff7
 800dfbc:	0800dfe1 	.word	0x0800dfe1
 800dfc0:	0800dff7 	.word	0x0800dff7
 800dfc4:	0800dfe7 	.word	0x0800dfe7
 800dfc8:	0800dff7 	.word	0x0800dff7
 800dfcc:	0800dff7 	.word	0x0800dff7
 800dfd0:	0800dff7 	.word	0x0800dff7
 800dfd4:	0800dfef 	.word	0x0800dfef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfd8:	f7fc fad8 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800dfdc:	61f8      	str	r0, [r7, #28]
        break;
 800dfde:	e010      	b.n	800e002 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dfe0:	4b8f      	ldr	r3, [pc, #572]	; (800e220 <UART_SetConfig+0x56c>)
 800dfe2:	61fb      	str	r3, [r7, #28]
        break;
 800dfe4:	e00d      	b.n	800e002 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dfe6:	f7fc fa39 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800dfea:	61f8      	str	r0, [r7, #28]
        break;
 800dfec:	e009      	b.n	800e002 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dff2:	61fb      	str	r3, [r7, #28]
        break;
 800dff4:	e005      	b.n	800e002 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800dff6:	2300      	movs	r3, #0
 800dff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e000:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 80fb 	beq.w	800e200 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	4613      	mov	r3, r2
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	4413      	add	r3, r2
 800e014:	69fa      	ldr	r2, [r7, #28]
 800e016:	429a      	cmp	r2, r3
 800e018:	d305      	bcc.n	800e026 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e020:	69fa      	ldr	r2, [r7, #28]
 800e022:	429a      	cmp	r2, r3
 800e024:	d903      	bls.n	800e02e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e02c:	e0e8      	b.n	800e200 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	2200      	movs	r2, #0
 800e032:	461c      	mov	r4, r3
 800e034:	4615      	mov	r5, r2
 800e036:	f04f 0200 	mov.w	r2, #0
 800e03a:	f04f 0300 	mov.w	r3, #0
 800e03e:	022b      	lsls	r3, r5, #8
 800e040:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e044:	0222      	lsls	r2, r4, #8
 800e046:	68f9      	ldr	r1, [r7, #12]
 800e048:	6849      	ldr	r1, [r1, #4]
 800e04a:	0849      	lsrs	r1, r1, #1
 800e04c:	2000      	movs	r0, #0
 800e04e:	4688      	mov	r8, r1
 800e050:	4681      	mov	r9, r0
 800e052:	eb12 0a08 	adds.w	sl, r2, r8
 800e056:	eb43 0b09 	adc.w	fp, r3, r9
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	603b      	str	r3, [r7, #0]
 800e062:	607a      	str	r2, [r7, #4]
 800e064:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e068:	4650      	mov	r0, sl
 800e06a:	4659      	mov	r1, fp
 800e06c:	f7f2 f8be 	bl	80001ec <__aeabi_uldivmod>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4613      	mov	r3, r2
 800e076:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e07e:	d308      	bcc.n	800e092 <UART_SetConfig+0x3de>
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e086:	d204      	bcs.n	800e092 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	69ba      	ldr	r2, [r7, #24]
 800e08e:	60da      	str	r2, [r3, #12]
 800e090:	e0b6      	b.n	800e200 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800e092:	2301      	movs	r3, #1
 800e094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e098:	e0b2      	b.n	800e200 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	69db      	ldr	r3, [r3, #28]
 800e09e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0a2:	d15e      	bne.n	800e162 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800e0a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0a8:	2b08      	cmp	r3, #8
 800e0aa:	d828      	bhi.n	800e0fe <UART_SetConfig+0x44a>
 800e0ac:	a201      	add	r2, pc, #4	; (adr r2, 800e0b4 <UART_SetConfig+0x400>)
 800e0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b2:	bf00      	nop
 800e0b4:	0800e0d9 	.word	0x0800e0d9
 800e0b8:	0800e0e1 	.word	0x0800e0e1
 800e0bc:	0800e0e9 	.word	0x0800e0e9
 800e0c0:	0800e0ff 	.word	0x0800e0ff
 800e0c4:	0800e0ef 	.word	0x0800e0ef
 800e0c8:	0800e0ff 	.word	0x0800e0ff
 800e0cc:	0800e0ff 	.word	0x0800e0ff
 800e0d0:	0800e0ff 	.word	0x0800e0ff
 800e0d4:	0800e0f7 	.word	0x0800e0f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0d8:	f7fc fa58 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800e0dc:	61f8      	str	r0, [r7, #28]
        break;
 800e0de:	e014      	b.n	800e10a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0e0:	f7fc fa6a 	bl	800a5b8 <HAL_RCC_GetPCLK2Freq>
 800e0e4:	61f8      	str	r0, [r7, #28]
        break;
 800e0e6:	e010      	b.n	800e10a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e0e8:	4b4d      	ldr	r3, [pc, #308]	; (800e220 <UART_SetConfig+0x56c>)
 800e0ea:	61fb      	str	r3, [r7, #28]
        break;
 800e0ec:	e00d      	b.n	800e10a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e0ee:	f7fc f9b5 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800e0f2:	61f8      	str	r0, [r7, #28]
        break;
 800e0f4:	e009      	b.n	800e10a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0fa:	61fb      	str	r3, [r7, #28]
        break;
 800e0fc:	e005      	b.n	800e10a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800e0fe:	2300      	movs	r3, #0
 800e100:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e102:	2301      	movs	r3, #1
 800e104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d077      	beq.n	800e200 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	005a      	lsls	r2, r3, #1
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	085b      	lsrs	r3, r3, #1
 800e11a:	441a      	add	r2, r3
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	fbb2 f3f3 	udiv	r3, r2, r3
 800e124:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	2b0f      	cmp	r3, #15
 800e12a:	d916      	bls.n	800e15a <UART_SetConfig+0x4a6>
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e132:	d212      	bcs.n	800e15a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	b29b      	uxth	r3, r3
 800e138:	f023 030f 	bic.w	r3, r3, #15
 800e13c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	085b      	lsrs	r3, r3, #1
 800e142:	b29b      	uxth	r3, r3
 800e144:	f003 0307 	and.w	r3, r3, #7
 800e148:	b29a      	uxth	r2, r3
 800e14a:	8afb      	ldrh	r3, [r7, #22]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	8afa      	ldrh	r2, [r7, #22]
 800e156:	60da      	str	r2, [r3, #12]
 800e158:	e052      	b.n	800e200 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e15a:	2301      	movs	r3, #1
 800e15c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e160:	e04e      	b.n	800e200 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e166:	2b08      	cmp	r3, #8
 800e168:	d827      	bhi.n	800e1ba <UART_SetConfig+0x506>
 800e16a:	a201      	add	r2, pc, #4	; (adr r2, 800e170 <UART_SetConfig+0x4bc>)
 800e16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e170:	0800e195 	.word	0x0800e195
 800e174:	0800e19d 	.word	0x0800e19d
 800e178:	0800e1a5 	.word	0x0800e1a5
 800e17c:	0800e1bb 	.word	0x0800e1bb
 800e180:	0800e1ab 	.word	0x0800e1ab
 800e184:	0800e1bb 	.word	0x0800e1bb
 800e188:	0800e1bb 	.word	0x0800e1bb
 800e18c:	0800e1bb 	.word	0x0800e1bb
 800e190:	0800e1b3 	.word	0x0800e1b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e194:	f7fc f9fa 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800e198:	61f8      	str	r0, [r7, #28]
        break;
 800e19a:	e014      	b.n	800e1c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e19c:	f7fc fa0c 	bl	800a5b8 <HAL_RCC_GetPCLK2Freq>
 800e1a0:	61f8      	str	r0, [r7, #28]
        break;
 800e1a2:	e010      	b.n	800e1c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e1a4:	4b1e      	ldr	r3, [pc, #120]	; (800e220 <UART_SetConfig+0x56c>)
 800e1a6:	61fb      	str	r3, [r7, #28]
        break;
 800e1a8:	e00d      	b.n	800e1c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e1aa:	f7fc f957 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800e1ae:	61f8      	str	r0, [r7, #28]
        break;
 800e1b0:	e009      	b.n	800e1c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1b6:	61fb      	str	r3, [r7, #28]
        break;
 800e1b8:	e005      	b.n	800e1c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e1c4:	bf00      	nop
    }

    if (pclk != 0U)
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d019      	beq.n	800e200 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	085a      	lsrs	r2, r3, #1
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	441a      	add	r2, r3
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	2b0f      	cmp	r3, #15
 800e1e4:	d909      	bls.n	800e1fa <UART_SetConfig+0x546>
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1ec:	d205      	bcs.n	800e1fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	60da      	str	r2, [r3, #12]
 800e1f8:	e002      	b.n	800e200 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2200      	movs	r2, #0
 800e204:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e20c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e210:	4618      	mov	r0, r3
 800e212:	3728      	adds	r7, #40	; 0x28
 800e214:	46bd      	mov	sp, r7
 800e216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e21a:	bf00      	nop
 800e21c:	40008000 	.word	0x40008000
 800e220:	00f42400 	.word	0x00f42400

0800e224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e230:	f003 0301 	and.w	r3, r3, #1
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00a      	beq.n	800e24e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	430a      	orrs	r2, r1
 800e24c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e252:	f003 0302 	and.w	r3, r3, #2
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00a      	beq.n	800e270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	430a      	orrs	r2, r1
 800e26e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	f003 0304 	and.w	r3, r3, #4
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00a      	beq.n	800e292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	430a      	orrs	r2, r1
 800e290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00a      	beq.n	800e2b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	430a      	orrs	r2, r1
 800e2b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b8:	f003 0310 	and.w	r3, r3, #16
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00a      	beq.n	800e2d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	430a      	orrs	r2, r1
 800e2d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2da:	f003 0320 	and.w	r3, r3, #32
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	430a      	orrs	r2, r1
 800e2f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e300:	2b00      	cmp	r3, #0
 800e302:	d01a      	beq.n	800e33a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	430a      	orrs	r2, r1
 800e318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e322:	d10a      	bne.n	800e33a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	430a      	orrs	r2, r1
 800e338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00a      	beq.n	800e35c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	430a      	orrs	r2, r1
 800e35a:	605a      	str	r2, [r3, #4]
  }
}
 800e35c:	bf00      	nop
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af02      	add	r7, sp, #8
 800e36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e378:	f7f7 fb84 	bl	8005a84 <HAL_GetTick>
 800e37c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f003 0308 	and.w	r3, r3, #8
 800e388:	2b08      	cmp	r3, #8
 800e38a:	d10e      	bne.n	800e3aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e38c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2200      	movs	r2, #0
 800e396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f82d 	bl	800e3fa <UART_WaitOnFlagUntilTimeout>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d001      	beq.n	800e3aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3a6:	2303      	movs	r3, #3
 800e3a8:	e023      	b.n	800e3f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f003 0304 	and.w	r3, r3, #4
 800e3b4:	2b04      	cmp	r3, #4
 800e3b6:	d10e      	bne.n	800e3d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f817 	bl	800e3fa <UART_WaitOnFlagUntilTimeout>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	e00d      	b.n	800e3f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2220      	movs	r2, #32
 800e3da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2220      	movs	r2, #32
 800e3e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b09c      	sub	sp, #112	; 0x70
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	60f8      	str	r0, [r7, #12]
 800e402:	60b9      	str	r1, [r7, #8]
 800e404:	603b      	str	r3, [r7, #0]
 800e406:	4613      	mov	r3, r2
 800e408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e40a:	e0a5      	b.n	800e558 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e40c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e40e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e412:	f000 80a1 	beq.w	800e558 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e416:	f7f7 fb35 	bl	8005a84 <HAL_GetTick>
 800e41a:	4602      	mov	r2, r0
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e422:	429a      	cmp	r2, r3
 800e424:	d302      	bcc.n	800e42c <UART_WaitOnFlagUntilTimeout+0x32>
 800e426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d13e      	bne.n	800e4aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e434:	e853 3f00 	ldrex	r3, [r3]
 800e438:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e43a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e43c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e440:	667b      	str	r3, [r7, #100]	; 0x64
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e44a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e44c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e450:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e452:	e841 2300 	strex	r3, r2, [r1]
 800e456:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1e6      	bne.n	800e42c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3308      	adds	r3, #8
 800e464:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e468:	e853 3f00 	ldrex	r3, [r3]
 800e46c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e470:	f023 0301 	bic.w	r3, r3, #1
 800e474:	663b      	str	r3, [r7, #96]	; 0x60
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	3308      	adds	r3, #8
 800e47c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e47e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e480:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e486:	e841 2300 	strex	r3, r2, [r1]
 800e48a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1e5      	bne.n	800e45e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2220      	movs	r2, #32
 800e496:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2220      	movs	r2, #32
 800e49c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e4a6:	2303      	movs	r3, #3
 800e4a8:	e067      	b.n	800e57a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f003 0304 	and.w	r3, r3, #4
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d04f      	beq.n	800e558 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	69db      	ldr	r3, [r3, #28]
 800e4be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4c6:	d147      	bne.n	800e558 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4da:	e853 3f00 	ldrex	r3, [r3]
 800e4de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e4e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e4f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4f8:	e841 2300 	strex	r3, r2, [r1]
 800e4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1e6      	bne.n	800e4d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3308      	adds	r3, #8
 800e50a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	e853 3f00 	ldrex	r3, [r3]
 800e512:	613b      	str	r3, [r7, #16]
   return(result);
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	f023 0301 	bic.w	r3, r3, #1
 800e51a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3308      	adds	r3, #8
 800e522:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e524:	623a      	str	r2, [r7, #32]
 800e526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e528:	69f9      	ldr	r1, [r7, #28]
 800e52a:	6a3a      	ldr	r2, [r7, #32]
 800e52c:	e841 2300 	strex	r3, r2, [r1]
 800e530:	61bb      	str	r3, [r7, #24]
   return(result);
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d1e5      	bne.n	800e504 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2220      	movs	r2, #32
 800e53c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2220      	movs	r2, #32
 800e542:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2220      	movs	r2, #32
 800e548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e554:	2303      	movs	r3, #3
 800e556:	e010      	b.n	800e57a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	69da      	ldr	r2, [r3, #28]
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	4013      	ands	r3, r2
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	429a      	cmp	r2, r3
 800e566:	bf0c      	ite	eq
 800e568:	2301      	moveq	r3, #1
 800e56a:	2300      	movne	r3, #0
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	461a      	mov	r2, r3
 800e570:	79fb      	ldrb	r3, [r7, #7]
 800e572:	429a      	cmp	r2, r3
 800e574:	f43f af4a 	beq.w	800e40c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3770      	adds	r7, #112	; 0x70
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
	...

0800e584 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800e584:	b480      	push	{r7}
 800e586:	b087      	sub	sp, #28
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	6812      	ldr	r2, [r2, #0]
 800e59c:	f023 0101 	bic.w	r1, r3, #1
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	2b08      	cmp	r3, #8
 800e5ac:	d102      	bne.n	800e5b4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800e5ae:	2340      	movs	r3, #64	; 0x40
 800e5b0:	617b      	str	r3, [r7, #20]
 800e5b2:	e001      	b.n	800e5b8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800e5c4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800e5ca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800e5d0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800e5d6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800e5dc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800e5e2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800e5e8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800e5ee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800e5f4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e602:	693a      	ldr	r2, [r7, #16]
 800e604:	4313      	orrs	r3, r2
 800e606:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	4313      	orrs	r3, r2
 800e610:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e616:	693a      	ldr	r2, [r7, #16]
 800e618:	4313      	orrs	r3, r2
 800e61a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800e61c:	4b20      	ldr	r3, [pc, #128]	; (800e6a0 <FMC_NORSRAM_Init+0x11c>)
 800e61e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e626:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e62e:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800e636:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	43db      	mvns	r3, r3
 800e646:	ea02 0103 	and.w	r1, r2, r3
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	4319      	orrs	r1, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e660:	d10c      	bne.n	800e67c <FMC_NORSRAM_Init+0xf8>
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d008      	beq.n	800e67c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e676:	431a      	orrs	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d006      	beq.n	800e692 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e68c:	431a      	orrs	r2, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	371c      	adds	r7, #28
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	0008fb7f 	.word	0x0008fb7f

0800e6a4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b087      	sub	sp, #28
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	011b      	lsls	r3, r3, #4
 800e6c8:	431a      	orrs	r2, r3
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	021b      	lsls	r3, r3, #8
 800e6d0:	431a      	orrs	r2, r3
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	041b      	lsls	r3, r3, #16
 800e6d8:	431a      	orrs	r2, r3
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	695b      	ldr	r3, [r3, #20]
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	051b      	lsls	r3, r3, #20
 800e6e2:	431a      	orrs	r2, r3
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	699b      	ldr	r3, [r3, #24]
 800e6e8:	3b02      	subs	r3, #2
 800e6ea:	061b      	lsls	r3, r3, #24
 800e6ec:	431a      	orrs	r2, r3
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	69db      	ldr	r3, [r3, #28]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	3201      	adds	r2, #1
 800e6f8:	4319      	orrs	r1, r3
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e70c:	d113      	bne.n	800e736 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e716:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	695b      	ldr	r3, [r3, #20]
 800e71c:	3b01      	subs	r3, #1
 800e71e:	051b      	lsls	r3, r3, #20
 800e720:	697a      	ldr	r2, [r7, #20]
 800e722:	4313      	orrs	r3, r2
 800e724:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	431a      	orrs	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	371c      	adds	r7, #28
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
 800e750:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e758:	d11d      	bne.n	800e796 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e762:	4b13      	ldr	r3, [pc, #76]	; (800e7b0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800e764:	4013      	ands	r3, r2
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	6811      	ldr	r1, [r2, #0]
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	6852      	ldr	r2, [r2, #4]
 800e76e:	0112      	lsls	r2, r2, #4
 800e770:	4311      	orrs	r1, r2
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	6892      	ldr	r2, [r2, #8]
 800e776:	0212      	lsls	r2, r2, #8
 800e778:	4311      	orrs	r1, r2
 800e77a:	68ba      	ldr	r2, [r7, #8]
 800e77c:	69d2      	ldr	r2, [r2, #28]
 800e77e:	4311      	orrs	r1, r2
 800e780:	68ba      	ldr	r2, [r7, #8]
 800e782:	6912      	ldr	r2, [r2, #16]
 800e784:	0412      	lsls	r2, r2, #16
 800e786:	430a      	orrs	r2, r1
 800e788:	ea43 0102 	orr.w	r1, r3, r2
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e794:	e005      	b.n	800e7a2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e79e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3714      	adds	r7, #20
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	cff00000 	.word	0xcff00000

0800e7b4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	b480      	push	{r7}
 800e7b8:	b085      	sub	sp, #20
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
 800e7be:	f107 001c 	add.w	r0, r7, #28
 800e7c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800e7d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800e7d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e7da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e7de:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e7e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e7f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	431a      	orrs	r2, r3
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3714      	adds	r7, #20
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	b004      	add	sp, #16
 800e80c:	4770      	bx	lr

0800e80e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e80e:	b480      	push	{r7}
 800e810:	b083      	sub	sp, #12
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2203      	movs	r2, #3
 800e834:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e836:	2002      	movs	r0, #2
 800e838:	f7f7 f930 	bl	8005a9c <HAL_Delay>

  return HAL_OK;
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e846:	b480      	push	{r7}
 800e848:	b083      	sub	sp, #12
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 0303 	and.w	r3, r3, #3
}
 800e856:	4618      	mov	r0, r3
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e862:	b480      	push	{r7}
 800e864:	b085      	sub	sp, #20
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e880:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e886:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e88c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e88e:	68fa      	ldr	r2, [r7, #12]
 800e890:	4313      	orrs	r3, r2
 800e892:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e89c:	f023 030f 	bic.w	r3, r3, #15
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	431a      	orrs	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr

0800e8b6 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e8b6:	b480      	push	{r7}
 800e8b8:	b083      	sub	sp, #12
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	b2db      	uxtb	r3, r3
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3314      	adds	r3, #20
 800e8de:	461a      	mov	r2, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3714      	adds	r7, #20
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr

0800e8f6 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e8f6:	b480      	push	{r7}
 800e8f8:	b085      	sub	sp, #20
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e900:	2300      	movs	r3, #0
 800e902:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e91c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e922:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e928:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	4313      	orrs	r3, r2
 800e92e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e934:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	431a      	orrs	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e940:	2300      	movs	r3, #0

}
 800e942:	4618      	mov	r0, r3
 800e944:	3714      	adds	r7, #20
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr

0800e94e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b088      	sub	sp, #32
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e95c:	2310      	movs	r3, #16
 800e95e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e960:	2340      	movs	r3, #64	; 0x40
 800e962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e964:	2300      	movs	r3, #0
 800e966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e96c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e96e:	f107 0308 	add.w	r3, r7, #8
 800e972:	4619      	mov	r1, r3
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f7ff ff74 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e97a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e97e:	2110      	movs	r1, #16
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 f94d 	bl	800ec20 <SDMMC_GetCmdResp1>
 800e986:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e988:	69fb      	ldr	r3, [r7, #28]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3720      	adds	r7, #32
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e992:	b580      	push	{r7, lr}
 800e994:	b08a      	sub	sp, #40	; 0x28
 800e996:	af00      	add	r7, sp, #0
 800e998:	60f8      	str	r0, [r7, #12]
 800e99a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e9a2:	2307      	movs	r3, #7
 800e9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9a6:	2340      	movs	r3, #64	; 0x40
 800e9a8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9b2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9b4:	f107 0310 	add.w	r3, r7, #16
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f7ff ff51 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e9c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9c4:	2107      	movs	r1, #7
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f000 f92a 	bl	800ec20 <SDMMC_GetCmdResp1>
 800e9cc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3728      	adds	r7, #40	; 0x28
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b088      	sub	sp, #32
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9f6:	f107 0308 	add.w	r3, r7, #8
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7ff ff30 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 fb44 	bl	800f090 <SDMMC_GetCmdError>
 800ea08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea0a:	69fb      	ldr	r3, [r7, #28]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3720      	adds	r7, #32
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b088      	sub	sp, #32
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ea1c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ea20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ea22:	2308      	movs	r3, #8
 800ea24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea26:	2340      	movs	r3, #64	; 0x40
 800ea28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea34:	f107 0308 	add.w	r3, r7, #8
 800ea38:	4619      	mov	r1, r3
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7ff ff11 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f000 fad7 	bl	800eff4 <SDMMC_GetCmdResp7>
 800ea46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea48:	69fb      	ldr	r3, [r7, #28]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3720      	adds	r7, #32
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b088      	sub	sp, #32
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ea60:	2337      	movs	r3, #55	; 0x37
 800ea62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea64:	2340      	movs	r3, #64	; 0x40
 800ea66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea72:	f107 0308 	add.w	r3, r7, #8
 800ea76:	4619      	mov	r1, r3
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f7ff fef2 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ea7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea82:	2137      	movs	r1, #55	; 0x37
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f8cb 	bl	800ec20 <SDMMC_GetCmdResp1>
 800ea8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea8c:	69fb      	ldr	r3, [r7, #28]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3720      	adds	r7, #32
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b088      	sub	sp, #32
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eaa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaaa:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800eaac:	2329      	movs	r3, #41	; 0x29
 800eaae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eab0:	2340      	movs	r3, #64	; 0x40
 800eab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eab4:	2300      	movs	r3, #0
 800eab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eabc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eabe:	f107 0308 	add.w	r3, r7, #8
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fecc 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f9de 	bl	800ee8c <SDMMC_GetCmdResp3>
 800ead0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ead2:	69fb      	ldr	r3, [r7, #28]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3720      	adds	r7, #32
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b088      	sub	sp, #32
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800eaea:	2306      	movs	r3, #6
 800eaec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eaee:	2340      	movs	r3, #64	; 0x40
 800eaf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eaf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eafa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eafc:	f107 0308 	add.w	r3, r7, #8
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7ff fead 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800eb08:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb0c:	2106      	movs	r1, #6
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 f886 	bl	800ec20 <SDMMC_GetCmdResp1>
 800eb14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb16:	69fb      	ldr	r3, [r7, #28]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3720      	adds	r7, #32
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b088      	sub	sp, #32
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800eb2c:	2333      	movs	r3, #51	; 0x33
 800eb2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb30:	2340      	movs	r3, #64	; 0x40
 800eb32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb34:	2300      	movs	r3, #0
 800eb36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb3e:	f107 0308 	add.w	r3, r7, #8
 800eb42:	4619      	mov	r1, r3
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff fe8c 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800eb4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb4e:	2133      	movs	r1, #51	; 0x33
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 f865 	bl	800ec20 <SDMMC_GetCmdResp1>
 800eb56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb58:	69fb      	ldr	r3, [r7, #28]
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3720      	adds	r7, #32
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b088      	sub	sp, #32
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eb6e:	2302      	movs	r3, #2
 800eb70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800eb72:	23c0      	movs	r3, #192	; 0xc0
 800eb74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb76:	2300      	movs	r3, #0
 800eb78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb80:	f107 0308 	add.w	r3, r7, #8
 800eb84:	4619      	mov	r1, r3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff fe6b 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f935 	bl	800edfc <SDMMC_GetCmdResp2>
 800eb92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb94:	69fb      	ldr	r3, [r7, #28]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3720      	adds	r7, #32
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b088      	sub	sp, #32
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ebac:	2309      	movs	r3, #9
 800ebae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ebb0:	23c0      	movs	r3, #192	; 0xc0
 800ebb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebbe:	f107 0308 	add.w	r3, r7, #8
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff fe4c 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 f916 	bl	800edfc <SDMMC_GetCmdResp2>
 800ebd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebd2:	69fb      	ldr	r3, [r7, #28]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3720      	adds	r7, #32
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b088      	sub	sp, #32
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ebea:	2303      	movs	r3, #3
 800ebec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebee:	2340      	movs	r3, #64	; 0x40
 800ebf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebfc:	f107 0308 	add.w	r3, r7, #8
 800ec00:	4619      	mov	r1, r3
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f7ff fe2d 	bl	800e862 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ec08:	683a      	ldr	r2, [r7, #0]
 800ec0a:	2103      	movs	r1, #3
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f97b 	bl	800ef08 <SDMMC_GetCmdResp6>
 800ec12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec14:	69fb      	ldr	r3, [r7, #28]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3720      	adds	r7, #32
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b088      	sub	sp, #32
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	607a      	str	r2, [r7, #4]
 800ec2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ec2e:	4b70      	ldr	r3, [pc, #448]	; (800edf0 <SDMMC_GetCmdResp1+0x1d0>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4a70      	ldr	r2, [pc, #448]	; (800edf4 <SDMMC_GetCmdResp1+0x1d4>)
 800ec34:	fba2 2303 	umull	r2, r3, r2, r3
 800ec38:	0a5a      	lsrs	r2, r3, #9
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	fb02 f303 	mul.w	r3, r2, r3
 800ec40:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	1e5a      	subs	r2, r3, #1
 800ec46:	61fa      	str	r2, [r7, #28]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d102      	bne.n	800ec52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec50:	e0c9      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec56:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d0ef      	beq.n	800ec42 <SDMMC_GetCmdResp1+0x22>
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1ea      	bne.n	800ec42 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec70:	f003 0304 	and.w	r3, r3, #4
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d004      	beq.n	800ec82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2204      	movs	r2, #4
 800ec7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec7e:	2304      	movs	r3, #4
 800ec80:	e0b1      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec86:	f003 0301 	and.w	r3, r3, #1
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d004      	beq.n	800ec98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2201      	movs	r2, #1
 800ec92:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec94:	2301      	movs	r3, #1
 800ec96:	e0a6      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	22c5      	movs	r2, #197	; 0xc5
 800ec9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f7ff fe09 	bl	800e8b6 <SDMMC_GetCommandResponse>
 800eca4:	4603      	mov	r3, r0
 800eca6:	461a      	mov	r2, r3
 800eca8:	7afb      	ldrb	r3, [r7, #11]
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d001      	beq.n	800ecb2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e099      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f7ff fe0b 	bl	800e8d0 <SDMMC_GetResponse>
 800ecba:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ecbc:	697a      	ldr	r2, [r7, #20]
 800ecbe:	4b4e      	ldr	r3, [pc, #312]	; (800edf8 <SDMMC_GetCmdResp1+0x1d8>)
 800ecc0:	4013      	ands	r3, r2
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d101      	bne.n	800ecca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	e08d      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	da02      	bge.n	800ecd6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ecd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ecd4:	e087      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d001      	beq.n	800ece4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ece0:	2340      	movs	r3, #64	; 0x40
 800ece2:	e080      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d001      	beq.n	800ecf2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ecee:	2380      	movs	r3, #128	; 0x80
 800ecf0:	e079      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ecfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed00:	e071      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ed0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed10:	e069      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d002      	beq.n	800ed22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ed1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed20:	e061      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d002      	beq.n	800ed32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ed2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed30:	e059      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d002      	beq.n	800ed42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed40:	e051      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ed4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed50:	e049      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d002      	beq.n	800ed62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ed5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed60:	e041      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ed6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed70:	e039      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d002      	beq.n	800ed82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ed7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed80:	e031      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ed8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed90:	e029      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d002      	beq.n	800eda2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ed9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eda0:	e021      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d002      	beq.n	800edb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800edac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800edb0:	e019      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800edbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800edc0:	e011      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800edcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800edd0:	e009      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f003 0308 	and.w	r3, r3, #8
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eddc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ede0:	e001      	b.n	800ede6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ede2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3720      	adds	r7, #32
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	20000000 	.word	0x20000000
 800edf4:	10624dd3 	.word	0x10624dd3
 800edf8:	fdffe008 	.word	0xfdffe008

0800edfc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee04:	4b1f      	ldr	r3, [pc, #124]	; (800ee84 <SDMMC_GetCmdResp2+0x88>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a1f      	ldr	r2, [pc, #124]	; (800ee88 <SDMMC_GetCmdResp2+0x8c>)
 800ee0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee0e:	0a5b      	lsrs	r3, r3, #9
 800ee10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee14:	fb02 f303 	mul.w	r3, r2, r3
 800ee18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	1e5a      	subs	r2, r3, #1
 800ee1e:	60fa      	str	r2, [r7, #12]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d102      	bne.n	800ee2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee28:	e026      	b.n	800ee78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d0ef      	beq.n	800ee1a <SDMMC_GetCmdResp2+0x1e>
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1ea      	bne.n	800ee1a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee48:	f003 0304 	and.w	r3, r3, #4
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d004      	beq.n	800ee5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2204      	movs	r2, #4
 800ee54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee56:	2304      	movs	r3, #4
 800ee58:	e00e      	b.n	800ee78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee5e:	f003 0301 	and.w	r3, r3, #1
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d004      	beq.n	800ee70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2201      	movs	r2, #1
 800ee6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e003      	b.n	800ee78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	22c5      	movs	r2, #197	; 0xc5
 800ee74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ee76:	2300      	movs	r3, #0
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3714      	adds	r7, #20
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr
 800ee84:	20000000 	.word	0x20000000
 800ee88:	10624dd3 	.word	0x10624dd3

0800ee8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee94:	4b1a      	ldr	r3, [pc, #104]	; (800ef00 <SDMMC_GetCmdResp3+0x74>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a1a      	ldr	r2, [pc, #104]	; (800ef04 <SDMMC_GetCmdResp3+0x78>)
 800ee9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee9e:	0a5b      	lsrs	r3, r3, #9
 800eea0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eea4:	fb02 f303 	mul.w	r3, r2, r3
 800eea8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	1e5a      	subs	r2, r3, #1
 800eeae:	60fa      	str	r2, [r7, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d102      	bne.n	800eeba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eeb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eeb8:	e01b      	b.n	800eef2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eebe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d0ef      	beq.n	800eeaa <SDMMC_GetCmdResp3+0x1e>
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1ea      	bne.n	800eeaa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eed8:	f003 0304 	and.w	r3, r3, #4
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d004      	beq.n	800eeea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2204      	movs	r2, #4
 800eee4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eee6:	2304      	movs	r3, #4
 800eee8:	e003      	b.n	800eef2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	22c5      	movs	r2, #197	; 0xc5
 800eeee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3714      	adds	r7, #20
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop
 800ef00:	20000000 	.word	0x20000000
 800ef04:	10624dd3 	.word	0x10624dd3

0800ef08 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	460b      	mov	r3, r1
 800ef12:	607a      	str	r2, [r7, #4]
 800ef14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef16:	4b35      	ldr	r3, [pc, #212]	; (800efec <SDMMC_GetCmdResp6+0xe4>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a35      	ldr	r2, [pc, #212]	; (800eff0 <SDMMC_GetCmdResp6+0xe8>)
 800ef1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef20:	0a5b      	lsrs	r3, r3, #9
 800ef22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef26:	fb02 f303 	mul.w	r3, r2, r3
 800ef2a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	1e5a      	subs	r2, r3, #1
 800ef30:	61fa      	str	r2, [r7, #28]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d102      	bne.n	800ef3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef3a:	e052      	b.n	800efe2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d0ef      	beq.n	800ef2c <SDMMC_GetCmdResp6+0x24>
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1ea      	bne.n	800ef2c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef5a:	f003 0304 	and.w	r3, r3, #4
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d004      	beq.n	800ef6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2204      	movs	r2, #4
 800ef66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef68:	2304      	movs	r3, #4
 800ef6a:	e03a      	b.n	800efe2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef70:	f003 0301 	and.w	r3, r3, #1
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e02f      	b.n	800efe2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ef82:	68f8      	ldr	r0, [r7, #12]
 800ef84:	f7ff fc97 	bl	800e8b6 <SDMMC_GetCommandResponse>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	7afb      	ldrb	r3, [r7, #11]
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d001      	beq.n	800ef96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef92:	2301      	movs	r3, #1
 800ef94:	e025      	b.n	800efe2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	22c5      	movs	r2, #197	; 0xc5
 800ef9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	f7ff fc96 	bl	800e8d0 <SDMMC_GetResponse>
 800efa4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800efac:	2b00      	cmp	r3, #0
 800efae:	d106      	bne.n	800efbe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	0c1b      	lsrs	r3, r3, #16
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800efba:	2300      	movs	r3, #0
 800efbc:	e011      	b.n	800efe2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800efc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800efcc:	e009      	b.n	800efe2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800efd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efdc:	e001      	b.n	800efe2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800efde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3720      	adds	r7, #32
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	20000000 	.word	0x20000000
 800eff0:	10624dd3 	.word	0x10624dd3

0800eff4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800effc:	4b22      	ldr	r3, [pc, #136]	; (800f088 <SDMMC_GetCmdResp7+0x94>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a22      	ldr	r2, [pc, #136]	; (800f08c <SDMMC_GetCmdResp7+0x98>)
 800f002:	fba2 2303 	umull	r2, r3, r2, r3
 800f006:	0a5b      	lsrs	r3, r3, #9
 800f008:	f241 3288 	movw	r2, #5000	; 0x1388
 800f00c:	fb02 f303 	mul.w	r3, r2, r3
 800f010:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	1e5a      	subs	r2, r3, #1
 800f016:	60fa      	str	r2, [r7, #12]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d102      	bne.n	800f022 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f01c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f020:	e02c      	b.n	800f07c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f026:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d0ef      	beq.n	800f012 <SDMMC_GetCmdResp7+0x1e>
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1ea      	bne.n	800f012 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f040:	f003 0304 	and.w	r3, r3, #4
 800f044:	2b00      	cmp	r3, #0
 800f046:	d004      	beq.n	800f052 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2204      	movs	r2, #4
 800f04c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f04e:	2304      	movs	r3, #4
 800f050:	e014      	b.n	800f07c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f056:	f003 0301 	and.w	r3, r3, #1
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d004      	beq.n	800f068 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2201      	movs	r2, #1
 800f062:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f064:	2301      	movs	r3, #1
 800f066:	e009      	b.n	800f07c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2240      	movs	r2, #64	; 0x40
 800f078:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f07a:	2300      	movs	r3, #0

}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3714      	adds	r7, #20
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr
 800f088:	20000000 	.word	0x20000000
 800f08c:	10624dd3 	.word	0x10624dd3

0800f090 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f090:	b480      	push	{r7}
 800f092:	b085      	sub	sp, #20
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f098:	4b11      	ldr	r3, [pc, #68]	; (800f0e0 <SDMMC_GetCmdError+0x50>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a11      	ldr	r2, [pc, #68]	; (800f0e4 <SDMMC_GetCmdError+0x54>)
 800f09e:	fba2 2303 	umull	r2, r3, r2, r3
 800f0a2:	0a5b      	lsrs	r3, r3, #9
 800f0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0a8:	fb02 f303 	mul.w	r3, r2, r3
 800f0ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	1e5a      	subs	r2, r3, #1
 800f0b2:	60fa      	str	r2, [r7, #12]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0bc:	e009      	b.n	800f0d2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d0f1      	beq.n	800f0ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	22c5      	movs	r2, #197	; 0xc5
 800f0ce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	20000000 	.word	0x20000000
 800f0e4:	10624dd3 	.word	0x10624dd3

0800f0e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b084      	sub	sp, #16
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
 800f0f2:	f107 001c 	add.w	r0, r7, #28
 800f0f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f001 faf6 	bl	80106f8 <USB_CoreReset>
 800f10c:	4603      	mov	r3, r0
 800f10e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800f110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f112:	2b00      	cmp	r3, #0
 800f114:	d106      	bne.n	800f124 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f11a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	639a      	str	r2, [r3, #56]	; 0x38
 800f122:	e005      	b.n	800f130 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f128:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800f130:	7bfb      	ldrb	r3, [r7, #15]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f13c:	b004      	add	sp, #16
 800f13e:	4770      	bx	lr

0800f140 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f140:	b480      	push	{r7}
 800f142:	b087      	sub	sp, #28
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	4613      	mov	r3, r2
 800f14c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f14e:	79fb      	ldrb	r3, [r7, #7]
 800f150:	2b02      	cmp	r3, #2
 800f152:	d165      	bne.n	800f220 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	4a3e      	ldr	r2, [pc, #248]	; (800f250 <USB_SetTurnaroundTime+0x110>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d906      	bls.n	800f16a <USB_SetTurnaroundTime+0x2a>
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	4a3d      	ldr	r2, [pc, #244]	; (800f254 <USB_SetTurnaroundTime+0x114>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d202      	bcs.n	800f16a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f164:	230f      	movs	r3, #15
 800f166:	617b      	str	r3, [r7, #20]
 800f168:	e05c      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	4a39      	ldr	r2, [pc, #228]	; (800f254 <USB_SetTurnaroundTime+0x114>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	d306      	bcc.n	800f180 <USB_SetTurnaroundTime+0x40>
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	4a38      	ldr	r2, [pc, #224]	; (800f258 <USB_SetTurnaroundTime+0x118>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d202      	bcs.n	800f180 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f17a:	230e      	movs	r3, #14
 800f17c:	617b      	str	r3, [r7, #20]
 800f17e:	e051      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	4a35      	ldr	r2, [pc, #212]	; (800f258 <USB_SetTurnaroundTime+0x118>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d306      	bcc.n	800f196 <USB_SetTurnaroundTime+0x56>
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	4a34      	ldr	r2, [pc, #208]	; (800f25c <USB_SetTurnaroundTime+0x11c>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d202      	bcs.n	800f196 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f190:	230d      	movs	r3, #13
 800f192:	617b      	str	r3, [r7, #20]
 800f194:	e046      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	4a30      	ldr	r2, [pc, #192]	; (800f25c <USB_SetTurnaroundTime+0x11c>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d306      	bcc.n	800f1ac <USB_SetTurnaroundTime+0x6c>
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	4a2f      	ldr	r2, [pc, #188]	; (800f260 <USB_SetTurnaroundTime+0x120>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d802      	bhi.n	800f1ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f1a6:	230c      	movs	r3, #12
 800f1a8:	617b      	str	r3, [r7, #20]
 800f1aa:	e03b      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	4a2c      	ldr	r2, [pc, #176]	; (800f260 <USB_SetTurnaroundTime+0x120>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d906      	bls.n	800f1c2 <USB_SetTurnaroundTime+0x82>
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	4a2b      	ldr	r2, [pc, #172]	; (800f264 <USB_SetTurnaroundTime+0x124>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d802      	bhi.n	800f1c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f1bc:	230b      	movs	r3, #11
 800f1be:	617b      	str	r3, [r7, #20]
 800f1c0:	e030      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	4a27      	ldr	r2, [pc, #156]	; (800f264 <USB_SetTurnaroundTime+0x124>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d906      	bls.n	800f1d8 <USB_SetTurnaroundTime+0x98>
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	4a26      	ldr	r2, [pc, #152]	; (800f268 <USB_SetTurnaroundTime+0x128>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d802      	bhi.n	800f1d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f1d2:	230a      	movs	r3, #10
 800f1d4:	617b      	str	r3, [r7, #20]
 800f1d6:	e025      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	4a23      	ldr	r2, [pc, #140]	; (800f268 <USB_SetTurnaroundTime+0x128>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d906      	bls.n	800f1ee <USB_SetTurnaroundTime+0xae>
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	4a22      	ldr	r2, [pc, #136]	; (800f26c <USB_SetTurnaroundTime+0x12c>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d202      	bcs.n	800f1ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f1e8:	2309      	movs	r3, #9
 800f1ea:	617b      	str	r3, [r7, #20]
 800f1ec:	e01a      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	4a1e      	ldr	r2, [pc, #120]	; (800f26c <USB_SetTurnaroundTime+0x12c>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d306      	bcc.n	800f204 <USB_SetTurnaroundTime+0xc4>
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	4a1d      	ldr	r2, [pc, #116]	; (800f270 <USB_SetTurnaroundTime+0x130>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d802      	bhi.n	800f204 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f1fe:	2308      	movs	r3, #8
 800f200:	617b      	str	r3, [r7, #20]
 800f202:	e00f      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	4a1a      	ldr	r2, [pc, #104]	; (800f270 <USB_SetTurnaroundTime+0x130>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d906      	bls.n	800f21a <USB_SetTurnaroundTime+0xda>
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	4a19      	ldr	r2, [pc, #100]	; (800f274 <USB_SetTurnaroundTime+0x134>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d202      	bcs.n	800f21a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f214:	2307      	movs	r3, #7
 800f216:	617b      	str	r3, [r7, #20]
 800f218:	e004      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f21a:	2306      	movs	r3, #6
 800f21c:	617b      	str	r3, [r7, #20]
 800f21e:	e001      	b.n	800f224 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f220:	2309      	movs	r3, #9
 800f222:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	68da      	ldr	r2, [r3, #12]
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	029b      	lsls	r3, r3, #10
 800f238:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f23c:	431a      	orrs	r2, r3
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	371c      	adds	r7, #28
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr
 800f250:	00d8acbf 	.word	0x00d8acbf
 800f254:	00e4e1c0 	.word	0x00e4e1c0
 800f258:	00f42400 	.word	0x00f42400
 800f25c:	01067380 	.word	0x01067380
 800f260:	011a499f 	.word	0x011a499f
 800f264:	01312cff 	.word	0x01312cff
 800f268:	014ca43f 	.word	0x014ca43f
 800f26c:	016e3600 	.word	0x016e3600
 800f270:	01a6ab1f 	.word	0x01a6ab1f
 800f274:	01e84800 	.word	0x01e84800

0800f278 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	f043 0201 	orr.w	r2, r3, #1
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f28c:	2300      	movs	r3, #0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	370c      	adds	r7, #12
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b083      	sub	sp, #12
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	f023 0201 	bic.w	r2, r3, #1
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f2d8:	78fb      	ldrb	r3, [r7, #3]
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d115      	bne.n	800f30a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	f7f6 fbd6 	bl	8005a9c <HAL_Delay>
      ms++;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f001 f985 	bl	8010606 <USB_GetMode>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d01e      	beq.n	800f340 <USB_SetCurrentMode+0x84>
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b31      	cmp	r3, #49	; 0x31
 800f306:	d9f0      	bls.n	800f2ea <USB_SetCurrentMode+0x2e>
 800f308:	e01a      	b.n	800f340 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f30a:	78fb      	ldrb	r3, [r7, #3]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d115      	bne.n	800f33c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f31c:	2001      	movs	r0, #1
 800f31e:	f7f6 fbbd 	bl	8005a9c <HAL_Delay>
      ms++;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	3301      	adds	r3, #1
 800f326:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f001 f96c 	bl	8010606 <USB_GetMode>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d005      	beq.n	800f340 <USB_SetCurrentMode+0x84>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2b31      	cmp	r3, #49	; 0x31
 800f338:	d9f0      	bls.n	800f31c <USB_SetCurrentMode+0x60>
 800f33a:	e001      	b.n	800f340 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f33c:	2301      	movs	r3, #1
 800f33e:	e005      	b.n	800f34c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2b32      	cmp	r3, #50	; 0x32
 800f344:	d101      	bne.n	800f34a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f346:	2301      	movs	r3, #1
 800f348:	e000      	b.n	800f34c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f34a:	2300      	movs	r3, #0
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f354:	b084      	sub	sp, #16
 800f356:	b580      	push	{r7, lr}
 800f358:	b086      	sub	sp, #24
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f366:	2300      	movs	r3, #0
 800f368:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f36e:	2300      	movs	r3, #0
 800f370:	613b      	str	r3, [r7, #16]
 800f372:	e009      	b.n	800f388 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	3340      	adds	r3, #64	; 0x40
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4413      	add	r3, r2
 800f37e:	2200      	movs	r2, #0
 800f380:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	3301      	adds	r3, #1
 800f386:	613b      	str	r3, [r7, #16]
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	2b0e      	cmp	r3, #14
 800f38c:	d9f2      	bls.n	800f374 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f390:	2b00      	cmp	r3, #0
 800f392:	d11c      	bne.n	800f3ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3a2:	f043 0302 	orr.w	r3, r3, #2
 800f3a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	601a      	str	r2, [r3, #0]
 800f3cc:	e005      	b.n	800f3da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	680b      	ldr	r3, [r1, #0]
 800f3f8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f3fa:	2103      	movs	r1, #3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 f959 	bl	800f6b4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f402:	2110      	movs	r1, #16
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 f8f1 	bl	800f5ec <USB_FlushTxFifo>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d001      	beq.n	800f414 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 f91d 	bl	800f654 <USB_FlushRxFifo>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800f420:	2301      	movs	r3, #1
 800f422:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f42a:	461a      	mov	r2, r3
 800f42c:	2300      	movs	r3, #0
 800f42e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f436:	461a      	mov	r2, r3
 800f438:	2300      	movs	r3, #0
 800f43a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f442:	461a      	mov	r2, r3
 800f444:	2300      	movs	r3, #0
 800f446:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f448:	2300      	movs	r3, #0
 800f44a:	613b      	str	r3, [r7, #16]
 800f44c:	e043      	b.n	800f4d6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	015a      	lsls	r2, r3, #5
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	4413      	add	r3, r2
 800f456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f464:	d118      	bne.n	800f498 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10a      	bne.n	800f482 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	015a      	lsls	r2, r3, #5
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4413      	add	r3, r2
 800f474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f478:	461a      	mov	r2, r3
 800f47a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f47e:	6013      	str	r3, [r2, #0]
 800f480:	e013      	b.n	800f4aa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	015a      	lsls	r2, r3, #5
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	4413      	add	r3, r2
 800f48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f48e:	461a      	mov	r2, r3
 800f490:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f494:	6013      	str	r3, [r2, #0]
 800f496:	e008      	b.n	800f4aa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	015a      	lsls	r2, r3, #5
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	4413      	add	r3, r2
 800f4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	015a      	lsls	r2, r3, #5
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	015a      	lsls	r2, r3, #5
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f4ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	613b      	str	r3, [r7, #16]
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d3b7      	bcc.n	800f44e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4de:	2300      	movs	r3, #0
 800f4e0:	613b      	str	r3, [r7, #16]
 800f4e2:	e043      	b.n	800f56c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	015a      	lsls	r2, r3, #5
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f4f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4fa:	d118      	bne.n	800f52e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d10a      	bne.n	800f518 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	015a      	lsls	r2, r3, #5
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	4413      	add	r3, r2
 800f50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f50e:	461a      	mov	r2, r3
 800f510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f514:	6013      	str	r3, [r2, #0]
 800f516:	e013      	b.n	800f540 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	4413      	add	r3, r2
 800f520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f524:	461a      	mov	r2, r3
 800f526:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f52a:	6013      	str	r3, [r2, #0]
 800f52c:	e008      	b.n	800f540 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	015a      	lsls	r2, r3, #5
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	4413      	add	r3, r2
 800f536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f53a:	461a      	mov	r2, r3
 800f53c:	2300      	movs	r3, #0
 800f53e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	015a      	lsls	r2, r3, #5
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	4413      	add	r3, r2
 800f548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f54c:	461a      	mov	r2, r3
 800f54e:	2300      	movs	r3, #0
 800f550:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	015a      	lsls	r2, r3, #5
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	4413      	add	r3, r2
 800f55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f55e:	461a      	mov	r2, r3
 800f560:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f564:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	3301      	adds	r3, #1
 800f56a:	613b      	str	r3, [r7, #16]
 800f56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	429a      	cmp	r2, r3
 800f572:	d3b7      	bcc.n	800f4e4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f57a:	691b      	ldr	r3, [r3, #16]
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f586:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f594:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	699b      	ldr	r3, [r3, #24]
 800f59a:	f043 0210 	orr.w	r2, r3, #16
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	699a      	ldr	r2, [r3, #24]
 800f5a6:	4b10      	ldr	r3, [pc, #64]	; (800f5e8 <USB_DevInit+0x294>)
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d005      	beq.n	800f5c0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	699b      	ldr	r3, [r3, #24]
 800f5b8:	f043 0208 	orr.w	r2, r3, #8
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d107      	bne.n	800f5d6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5ce:	f043 0304 	orr.w	r3, r3, #4
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3718      	adds	r7, #24
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5e2:	b004      	add	sp, #16
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	803c3800 	.word	0x803c3800

0800f5ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	4a13      	ldr	r2, [pc, #76]	; (800f650 <USB_FlushTxFifo+0x64>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d901      	bls.n	800f60c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f608:	2303      	movs	r3, #3
 800f60a:	e01b      	b.n	800f644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	691b      	ldr	r3, [r3, #16]
 800f610:	2b00      	cmp	r3, #0
 800f612:	daf2      	bge.n	800f5fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f614:	2300      	movs	r3, #0
 800f616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	019b      	lsls	r3, r3, #6
 800f61c:	f043 0220 	orr.w	r2, r3, #32
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	3301      	adds	r3, #1
 800f628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	4a08      	ldr	r2, [pc, #32]	; (800f650 <USB_FlushTxFifo+0x64>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d901      	bls.n	800f636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f632:	2303      	movs	r3, #3
 800f634:	e006      	b.n	800f644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	691b      	ldr	r3, [r3, #16]
 800f63a:	f003 0320 	and.w	r3, r3, #32
 800f63e:	2b20      	cmp	r3, #32
 800f640:	d0f0      	beq.n	800f624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3714      	adds	r7, #20
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr
 800f650:	00030d40 	.word	0x00030d40

0800f654 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f654:	b480      	push	{r7}
 800f656:	b085      	sub	sp, #20
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f65c:	2300      	movs	r3, #0
 800f65e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	3301      	adds	r3, #1
 800f664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	4a11      	ldr	r2, [pc, #68]	; (800f6b0 <USB_FlushRxFifo+0x5c>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d901      	bls.n	800f672 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f66e:	2303      	movs	r3, #3
 800f670:	e018      	b.n	800f6a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	2b00      	cmp	r3, #0
 800f678:	daf2      	bge.n	800f660 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f67a:	2300      	movs	r3, #0
 800f67c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2210      	movs	r2, #16
 800f682:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	3301      	adds	r3, #1
 800f688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	4a08      	ldr	r2, [pc, #32]	; (800f6b0 <USB_FlushRxFifo+0x5c>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d901      	bls.n	800f696 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f692:	2303      	movs	r3, #3
 800f694:	e006      	b.n	800f6a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	691b      	ldr	r3, [r3, #16]
 800f69a:	f003 0310 	and.w	r3, r3, #16
 800f69e:	2b10      	cmp	r3, #16
 800f6a0:	d0f0      	beq.n	800f684 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr
 800f6b0:	00030d40 	.word	0x00030d40

0800f6b4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	460b      	mov	r3, r1
 800f6be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	78fb      	ldrb	r3, [r7, #3]
 800f6ce:	68f9      	ldr	r1, [r7, #12]
 800f6d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3714      	adds	r7, #20
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b087      	sub	sp, #28
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	f003 0306 	and.w	r3, r3, #6
 800f6fe:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2b02      	cmp	r3, #2
 800f704:	d002      	beq.n	800f70c <USB_GetDevSpeed+0x26>
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2b06      	cmp	r3, #6
 800f70a:	d102      	bne.n	800f712 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f70c:	2302      	movs	r3, #2
 800f70e:	75fb      	strb	r3, [r7, #23]
 800f710:	e001      	b.n	800f716 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800f712:	230f      	movs	r3, #15
 800f714:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f716:	7dfb      	ldrb	r3, [r7, #23]
}
 800f718:	4618      	mov	r0, r3
 800f71a:	371c      	adds	r7, #28
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	785b      	ldrb	r3, [r3, #1]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d13a      	bne.n	800f7b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f746:	69da      	ldr	r2, [r3, #28]
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	f003 030f 	and.w	r3, r3, #15
 800f750:	2101      	movs	r1, #1
 800f752:	fa01 f303 	lsl.w	r3, r1, r3
 800f756:	b29b      	uxth	r3, r3
 800f758:	68f9      	ldr	r1, [r7, #12]
 800f75a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f75e:	4313      	orrs	r3, r2
 800f760:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	015a      	lsls	r2, r3, #5
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	4413      	add	r3, r2
 800f76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f774:	2b00      	cmp	r3, #0
 800f776:	d155      	bne.n	800f824 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	015a      	lsls	r2, r3, #5
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	4413      	add	r3, r2
 800f780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	791b      	ldrb	r3, [r3, #4]
 800f792:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f794:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	059b      	lsls	r3, r3, #22
 800f79a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f79c:	4313      	orrs	r3, r2
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	0151      	lsls	r1, r2, #5
 800f7a2:	68fa      	ldr	r2, [r7, #12]
 800f7a4:	440a      	add	r2, r1
 800f7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7b2:	6013      	str	r3, [r2, #0]
 800f7b4:	e036      	b.n	800f824 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7bc:	69da      	ldr	r2, [r3, #28]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	f003 030f 	and.w	r3, r3, #15
 800f7c6:	2101      	movs	r1, #1
 800f7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f7cc:	041b      	lsls	r3, r3, #16
 800f7ce:	68f9      	ldr	r1, [r7, #12]
 800f7d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	015a      	lsls	r2, r3, #5
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	4413      	add	r3, r2
 800f7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d11a      	bne.n	800f824 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	015a      	lsls	r2, r3, #5
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	791b      	ldrb	r3, [r3, #4]
 800f808:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f80a:	430b      	orrs	r3, r1
 800f80c:	4313      	orrs	r3, r2
 800f80e:	68ba      	ldr	r2, [r7, #8]
 800f810:	0151      	lsls	r1, r2, #5
 800f812:	68fa      	ldr	r2, [r7, #12]
 800f814:	440a      	add	r2, r1
 800f816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f81a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f81e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f822:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3714      	adds	r7, #20
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
	...

0800f834 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	785b      	ldrb	r3, [r3, #1]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d161      	bne.n	800f914 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	015a      	lsls	r2, r3, #5
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	4413      	add	r3, r2
 800f858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f866:	d11f      	bne.n	800f8a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	015a      	lsls	r2, r3, #5
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	4413      	add	r3, r2
 800f870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	68ba      	ldr	r2, [r7, #8]
 800f878:	0151      	lsls	r1, r2, #5
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	440a      	add	r2, r1
 800f87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f886:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	015a      	lsls	r2, r3, #5
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	4413      	add	r3, r2
 800f890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	68ba      	ldr	r2, [r7, #8]
 800f898:	0151      	lsls	r1, r2, #5
 800f89a:	68fa      	ldr	r2, [r7, #12]
 800f89c:	440a      	add	r2, r1
 800f89e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f8a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	f003 030f 	and.w	r3, r3, #15
 800f8b8:	2101      	movs	r1, #1
 800f8ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	43db      	mvns	r3, r3
 800f8c2:	68f9      	ldr	r1, [r7, #12]
 800f8c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f8c8:	4013      	ands	r3, r2
 800f8ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8d2:	69da      	ldr	r2, [r3, #28]
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	f003 030f 	and.w	r3, r3, #15
 800f8dc:	2101      	movs	r1, #1
 800f8de:	fa01 f303 	lsl.w	r3, r1, r3
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	43db      	mvns	r3, r3
 800f8e6:	68f9      	ldr	r1, [r7, #12]
 800f8e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f8ec:	4013      	ands	r3, r2
 800f8ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	015a      	lsls	r2, r3, #5
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	0159      	lsls	r1, r3, #5
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	440b      	add	r3, r1
 800f906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f90a:	4619      	mov	r1, r3
 800f90c:	4b35      	ldr	r3, [pc, #212]	; (800f9e4 <USB_DeactivateEndpoint+0x1b0>)
 800f90e:	4013      	ands	r3, r2
 800f910:	600b      	str	r3, [r1, #0]
 800f912:	e060      	b.n	800f9d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	015a      	lsls	r2, r3, #5
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	4413      	add	r3, r2
 800f91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f92a:	d11f      	bne.n	800f96c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	015a      	lsls	r2, r3, #5
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	4413      	add	r3, r2
 800f934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	68ba      	ldr	r2, [r7, #8]
 800f93c:	0151      	lsls	r1, r2, #5
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	440a      	add	r2, r1
 800f942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f94a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	015a      	lsls	r2, r3, #5
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	4413      	add	r3, r2
 800f954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68ba      	ldr	r2, [r7, #8]
 800f95c:	0151      	lsls	r1, r2, #5
 800f95e:	68fa      	ldr	r2, [r7, #12]
 800f960:	440a      	add	r2, r1
 800f962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f96a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	f003 030f 	and.w	r3, r3, #15
 800f97c:	2101      	movs	r1, #1
 800f97e:	fa01 f303 	lsl.w	r3, r1, r3
 800f982:	041b      	lsls	r3, r3, #16
 800f984:	43db      	mvns	r3, r3
 800f986:	68f9      	ldr	r1, [r7, #12]
 800f988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f98c:	4013      	ands	r3, r2
 800f98e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f996:	69da      	ldr	r2, [r3, #28]
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	f003 030f 	and.w	r3, r3, #15
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	fa01 f303 	lsl.w	r3, r1, r3
 800f9a6:	041b      	lsls	r3, r3, #16
 800f9a8:	43db      	mvns	r3, r3
 800f9aa:	68f9      	ldr	r1, [r7, #12]
 800f9ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	015a      	lsls	r2, r3, #5
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	0159      	lsls	r1, r3, #5
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	440b      	add	r3, r1
 800f9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	4b05      	ldr	r3, [pc, #20]	; (800f9e8 <USB_DeactivateEndpoint+0x1b4>)
 800f9d2:	4013      	ands	r3, r2
 800f9d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f9d6:	2300      	movs	r3, #0
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3714      	adds	r7, #20
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	ec337800 	.word	0xec337800
 800f9e8:	eff37800 	.word	0xeff37800

0800f9ec <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b086      	sub	sp, #24
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	785b      	ldrb	r3, [r3, #1]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	f040 810a 	bne.w	800fc1e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	699b      	ldr	r3, [r3, #24]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d132      	bne.n	800fa78 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	015a      	lsls	r2, r3, #5
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	4413      	add	r3, r2
 800fa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	693a      	ldr	r2, [r7, #16]
 800fa22:	0151      	lsls	r1, r2, #5
 800fa24:	697a      	ldr	r2, [r7, #20]
 800fa26:	440a      	add	r2, r1
 800fa28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	015a      	lsls	r2, r3, #5
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	0151      	lsls	r1, r2, #5
 800fa48:	697a      	ldr	r2, [r7, #20]
 800fa4a:	440a      	add	r2, r1
 800fa4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	015a      	lsls	r2, r3, #5
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	693a      	ldr	r2, [r7, #16]
 800fa66:	0151      	lsls	r1, r2, #5
 800fa68:	697a      	ldr	r2, [r7, #20]
 800fa6a:	440a      	add	r2, r1
 800fa6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa70:	0cdb      	lsrs	r3, r3, #19
 800fa72:	04db      	lsls	r3, r3, #19
 800fa74:	6113      	str	r3, [r2, #16]
 800fa76:	e074      	b.n	800fb62 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	015a      	lsls	r2, r3, #5
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	4413      	add	r3, r2
 800fa80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	693a      	ldr	r2, [r7, #16]
 800fa88:	0151      	lsls	r1, r2, #5
 800fa8a:	697a      	ldr	r2, [r7, #20]
 800fa8c:	440a      	add	r2, r1
 800fa8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa92:	0cdb      	lsrs	r3, r3, #19
 800fa94:	04db      	lsls	r3, r3, #19
 800fa96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	015a      	lsls	r2, r3, #5
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	4413      	add	r3, r2
 800faa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	693a      	ldr	r2, [r7, #16]
 800faa8:	0151      	lsls	r1, r2, #5
 800faaa:	697a      	ldr	r2, [r7, #20]
 800faac:	440a      	add	r2, r1
 800faae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fab2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fab6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800faba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	015a      	lsls	r2, r3, #5
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	4413      	add	r3, r2
 800fac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fac8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	6999      	ldr	r1, [r3, #24]
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	440b      	add	r3, r1
 800fad4:	1e59      	subs	r1, r3, #1
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	fbb1 f3f3 	udiv	r3, r1, r3
 800fade:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fae0:	4b9e      	ldr	r3, [pc, #632]	; (800fd5c <USB_EPStartXfer+0x370>)
 800fae2:	400b      	ands	r3, r1
 800fae4:	6939      	ldr	r1, [r7, #16]
 800fae6:	0148      	lsls	r0, r1, #5
 800fae8:	6979      	ldr	r1, [r7, #20]
 800faea:	4401      	add	r1, r0
 800faec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800faf0:	4313      	orrs	r3, r2
 800faf2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	015a      	lsls	r2, r3, #5
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	4413      	add	r3, r2
 800fafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb00:	691a      	ldr	r2, [r3, #16]
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb0a:	6939      	ldr	r1, [r7, #16]
 800fb0c:	0148      	lsls	r0, r1, #5
 800fb0e:	6979      	ldr	r1, [r7, #20]
 800fb10:	4401      	add	r1, r0
 800fb12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fb16:	4313      	orrs	r3, r2
 800fb18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	791b      	ldrb	r3, [r3, #4]
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d11f      	bne.n	800fb62 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	015a      	lsls	r2, r3, #5
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	4413      	add	r3, r2
 800fb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb2e:	691b      	ldr	r3, [r3, #16]
 800fb30:	693a      	ldr	r2, [r7, #16]
 800fb32:	0151      	lsls	r1, r2, #5
 800fb34:	697a      	ldr	r2, [r7, #20]
 800fb36:	440a      	add	r2, r1
 800fb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fb40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	015a      	lsls	r2, r3, #5
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	4413      	add	r3, r2
 800fb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	693a      	ldr	r2, [r7, #16]
 800fb52:	0151      	lsls	r1, r2, #5
 800fb54:	697a      	ldr	r2, [r7, #20]
 800fb56:	440a      	add	r2, r1
 800fb58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb60:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	015a      	lsls	r2, r3, #5
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	4413      	add	r3, r2
 800fb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	693a      	ldr	r2, [r7, #16]
 800fb72:	0151      	lsls	r1, r2, #5
 800fb74:	697a      	ldr	r2, [r7, #20]
 800fb76:	440a      	add	r2, r1
 800fb78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb80:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	791b      	ldrb	r3, [r3, #4]
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d015      	beq.n	800fbb6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	699b      	ldr	r3, [r3, #24]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f000 8106 	beq.w	800fda0 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	f003 030f 	and.w	r3, r3, #15
 800fba4:	2101      	movs	r1, #1
 800fba6:	fa01 f303 	lsl.w	r3, r1, r3
 800fbaa:	6979      	ldr	r1, [r7, #20]
 800fbac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	634b      	str	r3, [r1, #52]	; 0x34
 800fbb4:	e0f4      	b.n	800fda0 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d110      	bne.n	800fbe8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	015a      	lsls	r2, r3, #5
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	4413      	add	r3, r2
 800fbce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	0151      	lsls	r1, r2, #5
 800fbd8:	697a      	ldr	r2, [r7, #20]
 800fbda:	440a      	add	r2, r1
 800fbdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fbe4:	6013      	str	r3, [r2, #0]
 800fbe6:	e00f      	b.n	800fc08 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	015a      	lsls	r2, r3, #5
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	4413      	add	r3, r2
 800fbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	693a      	ldr	r2, [r7, #16]
 800fbf8:	0151      	lsls	r1, r2, #5
 800fbfa:	697a      	ldr	r2, [r7, #20]
 800fbfc:	440a      	add	r2, r1
 800fbfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc06:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	6919      	ldr	r1, [r3, #16]
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	781a      	ldrb	r2, [r3, #0]
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	699b      	ldr	r3, [r3, #24]
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 fa94 	bl	8010144 <USB_WritePacket>
 800fc1c:	e0c0      	b.n	800fda0 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	015a      	lsls	r2, r3, #5
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	4413      	add	r3, r2
 800fc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc2a:	691b      	ldr	r3, [r3, #16]
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	0151      	lsls	r1, r2, #5
 800fc30:	697a      	ldr	r2, [r7, #20]
 800fc32:	440a      	add	r2, r1
 800fc34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc38:	0cdb      	lsrs	r3, r3, #19
 800fc3a:	04db      	lsls	r3, r3, #19
 800fc3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	015a      	lsls	r2, r3, #5
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	4413      	add	r3, r2
 800fc46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc4a:	691b      	ldr	r3, [r3, #16]
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	0151      	lsls	r1, r2, #5
 800fc50:	697a      	ldr	r2, [r7, #20]
 800fc52:	440a      	add	r2, r1
 800fc54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fc5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fc60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	699b      	ldr	r3, [r3, #24]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d123      	bne.n	800fcb2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	015a      	lsls	r2, r3, #5
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	4413      	add	r3, r2
 800fc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc76:	691a      	ldr	r2, [r3, #16]
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc80:	6939      	ldr	r1, [r7, #16]
 800fc82:	0148      	lsls	r0, r1, #5
 800fc84:	6979      	ldr	r1, [r7, #20]
 800fc86:	4401      	add	r1, r0
 800fc88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	015a      	lsls	r2, r3, #5
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	4413      	add	r3, r2
 800fc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc9c:	691b      	ldr	r3, [r3, #16]
 800fc9e:	693a      	ldr	r2, [r7, #16]
 800fca0:	0151      	lsls	r1, r2, #5
 800fca2:	697a      	ldr	r2, [r7, #20]
 800fca4:	440a      	add	r2, r1
 800fca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fcae:	6113      	str	r3, [r2, #16]
 800fcb0:	e037      	b.n	800fd22 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	699a      	ldr	r2, [r3, #24]
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	4413      	add	r3, r2
 800fcbc:	1e5a      	subs	r2, r3, #1
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcc6:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	68db      	ldr	r3, [r3, #12]
 800fccc:	89fa      	ldrh	r2, [r7, #14]
 800fcce:	fb03 f202 	mul.w	r2, r3, r2
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	015a      	lsls	r2, r3, #5
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	4413      	add	r3, r2
 800fcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fce2:	691a      	ldr	r2, [r3, #16]
 800fce4:	89fb      	ldrh	r3, [r7, #14]
 800fce6:	04d9      	lsls	r1, r3, #19
 800fce8:	4b1c      	ldr	r3, [pc, #112]	; (800fd5c <USB_EPStartXfer+0x370>)
 800fcea:	400b      	ands	r3, r1
 800fcec:	6939      	ldr	r1, [r7, #16]
 800fcee:	0148      	lsls	r0, r1, #5
 800fcf0:	6979      	ldr	r1, [r7, #20]
 800fcf2:	4401      	add	r1, r0
 800fcf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	015a      	lsls	r2, r3, #5
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	4413      	add	r3, r2
 800fd04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd08:	691a      	ldr	r2, [r3, #16]
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	69db      	ldr	r3, [r3, #28]
 800fd0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd12:	6939      	ldr	r1, [r7, #16]
 800fd14:	0148      	lsls	r0, r1, #5
 800fd16:	6979      	ldr	r1, [r7, #20]
 800fd18:	4401      	add	r1, r0
 800fd1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	791b      	ldrb	r3, [r3, #4]
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d12a      	bne.n	800fd80 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d112      	bne.n	800fd60 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	015a      	lsls	r2, r3, #5
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	4413      	add	r3, r2
 800fd42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	693a      	ldr	r2, [r7, #16]
 800fd4a:	0151      	lsls	r1, r2, #5
 800fd4c:	697a      	ldr	r2, [r7, #20]
 800fd4e:	440a      	add	r2, r1
 800fd50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	e011      	b.n	800fd80 <USB_EPStartXfer+0x394>
 800fd5c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	015a      	lsls	r2, r3, #5
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	4413      	add	r3, r2
 800fd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	693a      	ldr	r2, [r7, #16]
 800fd70:	0151      	lsls	r1, r2, #5
 800fd72:	697a      	ldr	r2, [r7, #20]
 800fd74:	440a      	add	r2, r1
 800fd76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	015a      	lsls	r2, r3, #5
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	4413      	add	r3, r2
 800fd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	693a      	ldr	r2, [r7, #16]
 800fd90:	0151      	lsls	r1, r2, #5
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	440a      	add	r2, r1
 800fd96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fda0:	2300      	movs	r3, #0
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3718      	adds	r7, #24
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop

0800fdac <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	785b      	ldrb	r3, [r3, #1]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	f040 80ab 	bne.w	800ff20 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	699b      	ldr	r3, [r3, #24]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d132      	bne.n	800fe38 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	015a      	lsls	r2, r3, #5
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	4413      	add	r3, r2
 800fdda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	68ba      	ldr	r2, [r7, #8]
 800fde2:	0151      	lsls	r1, r2, #5
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	440a      	add	r2, r1
 800fde8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fdf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fdf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	015a      	lsls	r2, r3, #5
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe02:	691b      	ldr	r3, [r3, #16]
 800fe04:	68ba      	ldr	r2, [r7, #8]
 800fe06:	0151      	lsls	r1, r2, #5
 800fe08:	68fa      	ldr	r2, [r7, #12]
 800fe0a:	440a      	add	r2, r1
 800fe0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	015a      	lsls	r2, r3, #5
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	4413      	add	r3, r2
 800fe1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	68ba      	ldr	r2, [r7, #8]
 800fe26:	0151      	lsls	r1, r2, #5
 800fe28:	68fa      	ldr	r2, [r7, #12]
 800fe2a:	440a      	add	r2, r1
 800fe2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe30:	0cdb      	lsrs	r3, r3, #19
 800fe32:	04db      	lsls	r3, r3, #19
 800fe34:	6113      	str	r3, [r2, #16]
 800fe36:	e04e      	b.n	800fed6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	015a      	lsls	r2, r3, #5
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	4413      	add	r3, r2
 800fe40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe44:	691b      	ldr	r3, [r3, #16]
 800fe46:	68ba      	ldr	r2, [r7, #8]
 800fe48:	0151      	lsls	r1, r2, #5
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	440a      	add	r2, r1
 800fe4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe52:	0cdb      	lsrs	r3, r3, #19
 800fe54:	04db      	lsls	r3, r3, #19
 800fe56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	015a      	lsls	r2, r3, #5
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	4413      	add	r3, r2
 800fe60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe64:	691b      	ldr	r3, [r3, #16]
 800fe66:	68ba      	ldr	r2, [r7, #8]
 800fe68:	0151      	lsls	r1, r2, #5
 800fe6a:	68fa      	ldr	r2, [r7, #12]
 800fe6c:	440a      	add	r2, r1
 800fe6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	699a      	ldr	r2, [r3, #24]
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d903      	bls.n	800fe90 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	68da      	ldr	r2, [r3, #12]
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	015a      	lsls	r2, r3, #5
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	4413      	add	r3, r2
 800fe98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe9c:	691b      	ldr	r3, [r3, #16]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	0151      	lsls	r1, r2, #5
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	440a      	add	r2, r1
 800fea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800feaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800feae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	015a      	lsls	r2, r3, #5
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	4413      	add	r3, r2
 800feb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800febc:	691a      	ldr	r2, [r3, #16]
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	699b      	ldr	r3, [r3, #24]
 800fec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fec6:	68b9      	ldr	r1, [r7, #8]
 800fec8:	0148      	lsls	r0, r1, #5
 800feca:	68f9      	ldr	r1, [r7, #12]
 800fecc:	4401      	add	r1, r0
 800fece:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fed2:	4313      	orrs	r3, r2
 800fed4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	015a      	lsls	r2, r3, #5
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	4413      	add	r3, r2
 800fede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	0151      	lsls	r1, r2, #5
 800fee8:	68fa      	ldr	r2, [r7, #12]
 800feea:	440a      	add	r2, r1
 800feec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fef4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	699b      	ldr	r3, [r3, #24]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d071      	beq.n	800ffe2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	f003 030f 	and.w	r3, r3, #15
 800ff0e:	2101      	movs	r1, #1
 800ff10:	fa01 f303 	lsl.w	r3, r1, r3
 800ff14:	68f9      	ldr	r1, [r7, #12]
 800ff16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	634b      	str	r3, [r1, #52]	; 0x34
 800ff1e:	e060      	b.n	800ffe2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	015a      	lsls	r2, r3, #5
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	4413      	add	r3, r2
 800ff28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff2c:	691b      	ldr	r3, [r3, #16]
 800ff2e:	68ba      	ldr	r2, [r7, #8]
 800ff30:	0151      	lsls	r1, r2, #5
 800ff32:	68fa      	ldr	r2, [r7, #12]
 800ff34:	440a      	add	r2, r1
 800ff36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff3a:	0cdb      	lsrs	r3, r3, #19
 800ff3c:	04db      	lsls	r3, r3, #19
 800ff3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	015a      	lsls	r2, r3, #5
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	4413      	add	r3, r2
 800ff48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	68ba      	ldr	r2, [r7, #8]
 800ff50:	0151      	lsls	r1, r2, #5
 800ff52:	68fa      	ldr	r2, [r7, #12]
 800ff54:	440a      	add	r2, r1
 800ff56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ff5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ff62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	699b      	ldr	r3, [r3, #24]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d003      	beq.n	800ff74 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	68da      	ldr	r2, [r3, #12]
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	68da      	ldr	r2, [r3, #12]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	015a      	lsls	r2, r3, #5
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	4413      	add	r3, r2
 800ff84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff88:	691b      	ldr	r3, [r3, #16]
 800ff8a:	68ba      	ldr	r2, [r7, #8]
 800ff8c:	0151      	lsls	r1, r2, #5
 800ff8e:	68fa      	ldr	r2, [r7, #12]
 800ff90:	440a      	add	r2, r1
 800ff92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	015a      	lsls	r2, r3, #5
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffa8:	691a      	ldr	r2, [r3, #16]
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	69db      	ldr	r3, [r3, #28]
 800ffae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffb2:	68b9      	ldr	r1, [r7, #8]
 800ffb4:	0148      	lsls	r0, r1, #5
 800ffb6:	68f9      	ldr	r1, [r7, #12]
 800ffb8:	4401      	add	r1, r0
 800ffba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	015a      	lsls	r2, r3, #5
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	4413      	add	r3, r2
 800ffca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	0151      	lsls	r1, r2, #5
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	440a      	add	r2, r1
 800ffd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ffdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ffe0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ffe2:	2300      	movs	r3, #0
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3714      	adds	r7, #20
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b087      	sub	sp, #28
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fffa:	2300      	movs	r3, #0
 800fffc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	785b      	ldrb	r3, [r3, #1]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d14a      	bne.n	80100a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	015a      	lsls	r2, r3, #5
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	4413      	add	r3, r2
 8010018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010026:	f040 8086 	bne.w	8010136 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	015a      	lsls	r2, r3, #5
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	4413      	add	r3, r2
 8010034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	683a      	ldr	r2, [r7, #0]
 801003c:	7812      	ldrb	r2, [r2, #0]
 801003e:	0151      	lsls	r1, r2, #5
 8010040:	693a      	ldr	r2, [r7, #16]
 8010042:	440a      	add	r2, r1
 8010044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010048:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801004c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	015a      	lsls	r2, r3, #5
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	4413      	add	r3, r2
 8010058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	683a      	ldr	r2, [r7, #0]
 8010060:	7812      	ldrb	r2, [r2, #0]
 8010062:	0151      	lsls	r1, r2, #5
 8010064:	693a      	ldr	r2, [r7, #16]
 8010066:	440a      	add	r2, r1
 8010068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801006c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010070:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3301      	adds	r3, #1
 8010076:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f242 7210 	movw	r2, #10000	; 0x2710
 801007e:	4293      	cmp	r3, r2
 8010080:	d902      	bls.n	8010088 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010082:	2301      	movs	r3, #1
 8010084:	75fb      	strb	r3, [r7, #23]
          break;
 8010086:	e056      	b.n	8010136 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	015a      	lsls	r2, r3, #5
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	4413      	add	r3, r2
 8010092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801009c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100a0:	d0e7      	beq.n	8010072 <USB_EPStopXfer+0x82>
 80100a2:	e048      	b.n	8010136 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	015a      	lsls	r2, r3, #5
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	4413      	add	r3, r2
 80100ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100bc:	d13b      	bne.n	8010136 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	015a      	lsls	r2, r3, #5
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	4413      	add	r3, r2
 80100c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	7812      	ldrb	r2, [r2, #0]
 80100d2:	0151      	lsls	r1, r2, #5
 80100d4:	693a      	ldr	r2, [r7, #16]
 80100d6:	440a      	add	r2, r1
 80100d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80100e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	015a      	lsls	r2, r3, #5
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	4413      	add	r3, r2
 80100ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	683a      	ldr	r2, [r7, #0]
 80100f4:	7812      	ldrb	r2, [r2, #0]
 80100f6:	0151      	lsls	r1, r2, #5
 80100f8:	693a      	ldr	r2, [r7, #16]
 80100fa:	440a      	add	r2, r1
 80100fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010104:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	3301      	adds	r3, #1
 801010a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f242 7210 	movw	r2, #10000	; 0x2710
 8010112:	4293      	cmp	r3, r2
 8010114:	d902      	bls.n	801011c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010116:	2301      	movs	r3, #1
 8010118:	75fb      	strb	r3, [r7, #23]
          break;
 801011a:	e00c      	b.n	8010136 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	015a      	lsls	r2, r3, #5
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	4413      	add	r3, r2
 8010126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010134:	d0e7      	beq.n	8010106 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010136:	7dfb      	ldrb	r3, [r7, #23]
}
 8010138:	4618      	mov	r0, r3
 801013a:	371c      	adds	r7, #28
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8010144:	b480      	push	{r7}
 8010146:	b089      	sub	sp, #36	; 0x24
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	4611      	mov	r1, r2
 8010150:	461a      	mov	r2, r3
 8010152:	460b      	mov	r3, r1
 8010154:	71fb      	strb	r3, [r7, #7]
 8010156:	4613      	mov	r3, r2
 8010158:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8010162:	88bb      	ldrh	r3, [r7, #4]
 8010164:	3303      	adds	r3, #3
 8010166:	089b      	lsrs	r3, r3, #2
 8010168:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 801016a:	2300      	movs	r3, #0
 801016c:	61bb      	str	r3, [r7, #24]
 801016e:	e018      	b.n	80101a2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010170:	79fb      	ldrb	r3, [r7, #7]
 8010172:	031a      	lsls	r2, r3, #12
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	4413      	add	r3, r2
 8010178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801017c:	461a      	mov	r2, r3
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	6013      	str	r3, [r2, #0]
    pSrc++;
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	3301      	adds	r3, #1
 8010188:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	3301      	adds	r3, #1
 801018e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	3301      	adds	r3, #1
 8010194:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8010196:	69fb      	ldr	r3, [r7, #28]
 8010198:	3301      	adds	r3, #1
 801019a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801019c:	69bb      	ldr	r3, [r7, #24]
 801019e:	3301      	adds	r3, #1
 80101a0:	61bb      	str	r3, [r7, #24]
 80101a2:	69ba      	ldr	r2, [r7, #24]
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d3e2      	bcc.n	8010170 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3724      	adds	r7, #36	; 0x24
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr

080101b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b08b      	sub	sp, #44	; 0x2c
 80101bc:	af00      	add	r7, sp, #0
 80101be:	60f8      	str	r0, [r7, #12]
 80101c0:	60b9      	str	r1, [r7, #8]
 80101c2:	4613      	mov	r3, r2
 80101c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80101ce:	88fb      	ldrh	r3, [r7, #6]
 80101d0:	089b      	lsrs	r3, r3, #2
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80101d6:	88fb      	ldrh	r3, [r7, #6]
 80101d8:	f003 0303 	and.w	r3, r3, #3
 80101dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80101de:	2300      	movs	r3, #0
 80101e0:	623b      	str	r3, [r7, #32]
 80101e2:	e014      	b.n	801020e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80101f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f2:	3301      	adds	r3, #1
 80101f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	3301      	adds	r3, #1
 80101fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80101fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fe:	3301      	adds	r3, #1
 8010200:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010204:	3301      	adds	r3, #1
 8010206:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010208:	6a3b      	ldr	r3, [r7, #32]
 801020a:	3301      	adds	r3, #1
 801020c:	623b      	str	r3, [r7, #32]
 801020e:	6a3a      	ldr	r2, [r7, #32]
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	429a      	cmp	r2, r3
 8010214:	d3e6      	bcc.n	80101e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010216:	8bfb      	ldrh	r3, [r7, #30]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d01e      	beq.n	801025a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801021c:	2300      	movs	r3, #0
 801021e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010226:	461a      	mov	r2, r3
 8010228:	f107 0310 	add.w	r3, r7, #16
 801022c:	6812      	ldr	r2, [r2, #0]
 801022e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010230:	693a      	ldr	r2, [r7, #16]
 8010232:	6a3b      	ldr	r3, [r7, #32]
 8010234:	b2db      	uxtb	r3, r3
 8010236:	00db      	lsls	r3, r3, #3
 8010238:	fa22 f303 	lsr.w	r3, r2, r3
 801023c:	b2da      	uxtb	r2, r3
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	701a      	strb	r2, [r3, #0]
      i++;
 8010242:	6a3b      	ldr	r3, [r7, #32]
 8010244:	3301      	adds	r3, #1
 8010246:	623b      	str	r3, [r7, #32]
      pDest++;
 8010248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024a:	3301      	adds	r3, #1
 801024c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801024e:	8bfb      	ldrh	r3, [r7, #30]
 8010250:	3b01      	subs	r3, #1
 8010252:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010254:	8bfb      	ldrh	r3, [r7, #30]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d1ea      	bne.n	8010230 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801025c:	4618      	mov	r0, r3
 801025e:	372c      	adds	r7, #44	; 0x2c
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr

08010268 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	785b      	ldrb	r3, [r3, #1]
 8010280:	2b01      	cmp	r3, #1
 8010282:	d12c      	bne.n	80102de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	015a      	lsls	r2, r3, #5
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	4413      	add	r3, r2
 801028c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	db12      	blt.n	80102bc <USB_EPSetStall+0x54>
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d00f      	beq.n	80102bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	015a      	lsls	r2, r3, #5
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	4413      	add	r3, r2
 80102a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	0151      	lsls	r1, r2, #5
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	440a      	add	r2, r1
 80102b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80102ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	015a      	lsls	r2, r3, #5
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	4413      	add	r3, r2
 80102c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	0151      	lsls	r1, r2, #5
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	440a      	add	r2, r1
 80102d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80102da:	6013      	str	r3, [r2, #0]
 80102dc:	e02b      	b.n	8010336 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	015a      	lsls	r2, r3, #5
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	4413      	add	r3, r2
 80102e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	db12      	blt.n	8010316 <USB_EPSetStall+0xae>
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00f      	beq.n	8010316 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	015a      	lsls	r2, r3, #5
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	4413      	add	r3, r2
 80102fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	68ba      	ldr	r2, [r7, #8]
 8010306:	0151      	lsls	r1, r2, #5
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	440a      	add	r2, r1
 801030c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010310:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010314:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	015a      	lsls	r2, r3, #5
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	4413      	add	r3, r2
 801031e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	0151      	lsls	r1, r2, #5
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	440a      	add	r2, r1
 801032c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010334:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010336:	2300      	movs	r3, #0
}
 8010338:	4618      	mov	r0, r3
 801033a:	3714      	adds	r7, #20
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010344:	b480      	push	{r7}
 8010346:	b085      	sub	sp, #20
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	785b      	ldrb	r3, [r3, #1]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d128      	bne.n	80103b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	015a      	lsls	r2, r3, #5
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	4413      	add	r3, r2
 8010368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	68ba      	ldr	r2, [r7, #8]
 8010370:	0151      	lsls	r1, r2, #5
 8010372:	68fa      	ldr	r2, [r7, #12]
 8010374:	440a      	add	r2, r1
 8010376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801037a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801037e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	791b      	ldrb	r3, [r3, #4]
 8010384:	2b03      	cmp	r3, #3
 8010386:	d003      	beq.n	8010390 <USB_EPClearStall+0x4c>
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	791b      	ldrb	r3, [r3, #4]
 801038c:	2b02      	cmp	r3, #2
 801038e:	d138      	bne.n	8010402 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	015a      	lsls	r2, r3, #5
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	4413      	add	r3, r2
 8010398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	68ba      	ldr	r2, [r7, #8]
 80103a0:	0151      	lsls	r1, r2, #5
 80103a2:	68fa      	ldr	r2, [r7, #12]
 80103a4:	440a      	add	r2, r1
 80103a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	e027      	b.n	8010402 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	015a      	lsls	r2, r3, #5
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	4413      	add	r3, r2
 80103ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	68ba      	ldr	r2, [r7, #8]
 80103c2:	0151      	lsls	r1, r2, #5
 80103c4:	68fa      	ldr	r2, [r7, #12]
 80103c6:	440a      	add	r2, r1
 80103c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80103d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	791b      	ldrb	r3, [r3, #4]
 80103d6:	2b03      	cmp	r3, #3
 80103d8:	d003      	beq.n	80103e2 <USB_EPClearStall+0x9e>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	791b      	ldrb	r3, [r3, #4]
 80103de:	2b02      	cmp	r3, #2
 80103e0:	d10f      	bne.n	8010402 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	015a      	lsls	r2, r3, #5
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	4413      	add	r3, r2
 80103ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	0151      	lsls	r1, r2, #5
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	440a      	add	r2, r1
 80103f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010400:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010402:	2300      	movs	r3, #0
}
 8010404:	4618      	mov	r0, r3
 8010406:	3714      	adds	r7, #20
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr

08010410 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	460b      	mov	r3, r1
 801041a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801042e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010432:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	78fb      	ldrb	r3, [r7, #3]
 801043e:	011b      	lsls	r3, r3, #4
 8010440:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010444:	68f9      	ldr	r1, [r7, #12]
 8010446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801044a:	4313      	orrs	r3, r2
 801044c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801044e:	2300      	movs	r3, #0
}
 8010450:	4618      	mov	r0, r3
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801045c:	b480      	push	{r7}
 801045e:	b085      	sub	sp, #20
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	68fa      	ldr	r2, [r7, #12]
 8010472:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010476:	f023 0303 	bic.w	r3, r3, #3
 801047a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801048a:	f023 0302 	bic.w	r3, r3, #2
 801048e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3714      	adds	r7, #20
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801049e:	b480      	push	{r7}
 80104a0:	b085      	sub	sp, #20
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80104b8:	f023 0303 	bic.w	r3, r3, #3
 80104bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80104cc:	f043 0302 	orr.w	r3, r3, #2
 80104d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3714      	adds	r7, #20
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b085      	sub	sp, #20
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	695b      	ldr	r3, [r3, #20]
 80104ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	699b      	ldr	r3, [r3, #24]
 80104f2:	68fa      	ldr	r2, [r7, #12]
 80104f4:	4013      	ands	r3, r2
 80104f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80104f8:	68fb      	ldr	r3, [r7, #12]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3714      	adds	r7, #20
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr

08010506 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010506:	b480      	push	{r7}
 8010508:	b085      	sub	sp, #20
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010518:	699b      	ldr	r3, [r3, #24]
 801051a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010522:	69db      	ldr	r3, [r3, #28]
 8010524:	68ba      	ldr	r2, [r7, #8]
 8010526:	4013      	ands	r3, r2
 8010528:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	0c1b      	lsrs	r3, r3, #16
}
 801052e:	4618      	mov	r0, r3
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr

0801053a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801053a:	b480      	push	{r7}
 801053c:	b085      	sub	sp, #20
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801054c:	699b      	ldr	r3, [r3, #24]
 801054e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010556:	69db      	ldr	r3, [r3, #28]
 8010558:	68ba      	ldr	r2, [r7, #8]
 801055a:	4013      	ands	r3, r2
 801055c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	b29b      	uxth	r3, r3
}
 8010562:	4618      	mov	r0, r3
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr

0801056e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801056e:	b480      	push	{r7}
 8010570:	b085      	sub	sp, #20
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	460b      	mov	r3, r1
 8010578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801057e:	78fb      	ldrb	r3, [r7, #3]
 8010580:	015a      	lsls	r2, r3, #5
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	4413      	add	r3, r2
 8010586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010594:	695b      	ldr	r3, [r3, #20]
 8010596:	68ba      	ldr	r2, [r7, #8]
 8010598:	4013      	ands	r3, r2
 801059a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801059c:	68bb      	ldr	r3, [r7, #8]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3714      	adds	r7, #20
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80105aa:	b480      	push	{r7}
 80105ac:	b087      	sub	sp, #28
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	460b      	mov	r3, r1
 80105b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105c0:	691b      	ldr	r3, [r3, #16]
 80105c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80105ce:	78fb      	ldrb	r3, [r7, #3]
 80105d0:	f003 030f 	and.w	r3, r3, #15
 80105d4:	68fa      	ldr	r2, [r7, #12]
 80105d6:	fa22 f303 	lsr.w	r3, r2, r3
 80105da:	01db      	lsls	r3, r3, #7
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	693a      	ldr	r2, [r7, #16]
 80105e0:	4313      	orrs	r3, r2
 80105e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80105e4:	78fb      	ldrb	r3, [r7, #3]
 80105e6:	015a      	lsls	r2, r3, #5
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	4413      	add	r3, r2
 80105ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	4013      	ands	r3, r2
 80105f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80105f8:	68bb      	ldr	r3, [r7, #8]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	371c      	adds	r7, #28
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr

08010606 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010606:	b480      	push	{r7}
 8010608:	b083      	sub	sp, #12
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	695b      	ldr	r3, [r3, #20]
 8010612:	f003 0301 	and.w	r3, r3, #1
}
 8010616:	4618      	mov	r0, r3
 8010618:	370c      	adds	r7, #12
 801061a:	46bd      	mov	sp, r7
 801061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010620:	4770      	bx	lr

08010622 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010622:	b480      	push	{r7}
 8010624:	b085      	sub	sp, #20
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	68fa      	ldr	r2, [r7, #12]
 8010638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801063c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010640:	f023 0307 	bic.w	r3, r3, #7
 8010644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801065a:	2300      	movs	r3, #0
}
 801065c:	4618      	mov	r0, r3
 801065e:	3714      	adds	r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	333c      	adds	r3, #60	; 0x3c
 801067a:	3304      	adds	r3, #4
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	4a1c      	ldr	r2, [pc, #112]	; (80106f4 <USB_EP0_OutStart+0x8c>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d90a      	bls.n	801069e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010698:	d101      	bne.n	801069e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 801069a:	2300      	movs	r3, #0
 801069c:	e024      	b.n	80106e8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a4:	461a      	mov	r2, r3
 80106a6:	2300      	movs	r3, #0
 80106a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106b0:	691b      	ldr	r3, [r3, #16]
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80106bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c4:	691b      	ldr	r3, [r3, #16]
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106cc:	f043 0318 	orr.w	r3, r3, #24
 80106d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106d8:	691b      	ldr	r3, [r3, #16]
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80106e4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr
 80106f4:	4f54300a 	.word	0x4f54300a

080106f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010700:	2300      	movs	r3, #0
 8010702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	3301      	adds	r3, #1
 8010708:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	4a13      	ldr	r2, [pc, #76]	; (801075c <USB_CoreReset+0x64>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d901      	bls.n	8010716 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010712:	2303      	movs	r3, #3
 8010714:	e01b      	b.n	801074e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	691b      	ldr	r3, [r3, #16]
 801071a:	2b00      	cmp	r3, #0
 801071c:	daf2      	bge.n	8010704 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801071e:	2300      	movs	r3, #0
 8010720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	691b      	ldr	r3, [r3, #16]
 8010726:	f043 0201 	orr.w	r2, r3, #1
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	3301      	adds	r3, #1
 8010732:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	4a09      	ldr	r2, [pc, #36]	; (801075c <USB_CoreReset+0x64>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d901      	bls.n	8010740 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801073c:	2303      	movs	r3, #3
 801073e:	e006      	b.n	801074e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	691b      	ldr	r3, [r3, #16]
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	2b01      	cmp	r3, #1
 801074a:	d0f0      	beq.n	801072e <USB_CoreReset+0x36>

  return HAL_OK;
 801074c:	2300      	movs	r3, #0
}
 801074e:	4618      	mov	r0, r3
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop
 801075c:	00030d40 	.word	0x00030d40

08010760 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801076c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010770:	f002 fa6c 	bl	8012c4c <USBD_static_malloc>
 8010774:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d105      	bne.n	8010788 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2200      	movs	r2, #0
 8010780:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010784:	2302      	movs	r3, #2
 8010786:	e066      	b.n	8010856 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	7c1b      	ldrb	r3, [r3, #16]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d119      	bne.n	80107cc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010798:	f44f 7300 	mov.w	r3, #512	; 0x200
 801079c:	2202      	movs	r2, #2
 801079e:	2181      	movs	r1, #129	; 0x81
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f002 f83f 	bl	8012824 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2201      	movs	r2, #1
 80107aa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80107ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107b0:	2202      	movs	r2, #2
 80107b2:	2101      	movs	r1, #1
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f002 f835 	bl	8012824 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2201      	movs	r2, #1
 80107be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2210      	movs	r2, #16
 80107c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80107ca:	e016      	b.n	80107fa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80107cc:	2340      	movs	r3, #64	; 0x40
 80107ce:	2202      	movs	r2, #2
 80107d0:	2181      	movs	r1, #129	; 0x81
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f002 f826 	bl	8012824 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2201      	movs	r2, #1
 80107dc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80107de:	2340      	movs	r3, #64	; 0x40
 80107e0:	2202      	movs	r2, #2
 80107e2:	2101      	movs	r1, #1
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f002 f81d 	bl	8012824 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2210      	movs	r2, #16
 80107f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80107fa:	2308      	movs	r3, #8
 80107fc:	2203      	movs	r2, #3
 80107fe:	2182      	movs	r1, #130	; 0x82
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f002 f80f 	bl	8012824 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2201      	movs	r2, #1
 801080a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2200      	movs	r2, #0
 801081c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2200      	movs	r2, #0
 8010824:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	7c1b      	ldrb	r3, [r3, #16]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d109      	bne.n	8010844 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010836:	f44f 7300 	mov.w	r3, #512	; 0x200
 801083a:	2101      	movs	r1, #1
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f002 f96b 	bl	8012b18 <USBD_LL_PrepareReceive>
 8010842:	e007      	b.n	8010854 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801084a:	2340      	movs	r3, #64	; 0x40
 801084c:	2101      	movs	r1, #1
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f002 f962 	bl	8012b18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010854:	2300      	movs	r3, #0
}
 8010856:	4618      	mov	r0, r3
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}

0801085e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801085e:	b580      	push	{r7, lr}
 8010860:	b082      	sub	sp, #8
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
 8010866:	460b      	mov	r3, r1
 8010868:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801086a:	2181      	movs	r1, #129	; 0x81
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f002 f817 	bl	80128a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010878:	2101      	movs	r1, #1
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f002 f810 	bl	80128a0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010888:	2182      	movs	r1, #130	; 0x82
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f002 f808 	bl	80128a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00e      	beq.n	80108c8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108ba:	4618      	mov	r0, r3
 80108bc:	f002 f9d4 	bl	8012c68 <USBD_static_free>
    pdev->pClassData = NULL;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3708      	adds	r7, #8
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
	...

080108d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b086      	sub	sp, #24
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80108e6:	2300      	movs	r3, #0
 80108e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80108ea:	2300      	movs	r3, #0
 80108ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80108ee:	2300      	movs	r3, #0
 80108f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80108f8:	2303      	movs	r3, #3
 80108fa:	e0af      	b.n	8010a5c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010904:	2b00      	cmp	r3, #0
 8010906:	d03f      	beq.n	8010988 <USBD_CDC_Setup+0xb4>
 8010908:	2b20      	cmp	r3, #32
 801090a:	f040 809f 	bne.w	8010a4c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	88db      	ldrh	r3, [r3, #6]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d02e      	beq.n	8010974 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	b25b      	sxtb	r3, r3
 801091c:	2b00      	cmp	r3, #0
 801091e:	da16      	bge.n	801094e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	683a      	ldr	r2, [r7, #0]
 801092a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801092c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801092e:	683a      	ldr	r2, [r7, #0]
 8010930:	88d2      	ldrh	r2, [r2, #6]
 8010932:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	88db      	ldrh	r3, [r3, #6]
 8010938:	2b07      	cmp	r3, #7
 801093a:	bf28      	it	cs
 801093c:	2307      	movcs	r3, #7
 801093e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	89fa      	ldrh	r2, [r7, #14]
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f001 fb13 	bl	8011f72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801094c:	e085      	b.n	8010a5a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	785a      	ldrb	r2, [r3, #1]
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	88db      	ldrh	r3, [r3, #6]
 801095c:	b2da      	uxtb	r2, r3
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010964:	6939      	ldr	r1, [r7, #16]
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	88db      	ldrh	r3, [r3, #6]
 801096a:	461a      	mov	r2, r3
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f001 fb2c 	bl	8011fca <USBD_CtlPrepareRx>
      break;
 8010972:	e072      	b.n	8010a5a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	7850      	ldrb	r0, [r2, #1]
 8010980:	2200      	movs	r2, #0
 8010982:	6839      	ldr	r1, [r7, #0]
 8010984:	4798      	blx	r3
      break;
 8010986:	e068      	b.n	8010a5a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	785b      	ldrb	r3, [r3, #1]
 801098c:	2b0b      	cmp	r3, #11
 801098e:	d852      	bhi.n	8010a36 <USBD_CDC_Setup+0x162>
 8010990:	a201      	add	r2, pc, #4	; (adr r2, 8010998 <USBD_CDC_Setup+0xc4>)
 8010992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010996:	bf00      	nop
 8010998:	080109c9 	.word	0x080109c9
 801099c:	08010a45 	.word	0x08010a45
 80109a0:	08010a37 	.word	0x08010a37
 80109a4:	08010a37 	.word	0x08010a37
 80109a8:	08010a37 	.word	0x08010a37
 80109ac:	08010a37 	.word	0x08010a37
 80109b0:	08010a37 	.word	0x08010a37
 80109b4:	08010a37 	.word	0x08010a37
 80109b8:	08010a37 	.word	0x08010a37
 80109bc:	08010a37 	.word	0x08010a37
 80109c0:	080109f3 	.word	0x080109f3
 80109c4:	08010a1d 	.word	0x08010a1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	2b03      	cmp	r3, #3
 80109d2:	d107      	bne.n	80109e4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80109d4:	f107 030a 	add.w	r3, r7, #10
 80109d8:	2202      	movs	r2, #2
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f001 fac8 	bl	8011f72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80109e2:	e032      	b.n	8010a4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80109e4:	6839      	ldr	r1, [r7, #0]
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f001 fa52 	bl	8011e90 <USBD_CtlError>
            ret = USBD_FAIL;
 80109ec:	2303      	movs	r3, #3
 80109ee:	75fb      	strb	r3, [r7, #23]
          break;
 80109f0:	e02b      	b.n	8010a4a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	2b03      	cmp	r3, #3
 80109fc:	d107      	bne.n	8010a0e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80109fe:	f107 030d 	add.w	r3, r7, #13
 8010a02:	2201      	movs	r2, #1
 8010a04:	4619      	mov	r1, r3
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f001 fab3 	bl	8011f72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a0c:	e01d      	b.n	8010a4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010a0e:	6839      	ldr	r1, [r7, #0]
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f001 fa3d 	bl	8011e90 <USBD_CtlError>
            ret = USBD_FAIL;
 8010a16:	2303      	movs	r3, #3
 8010a18:	75fb      	strb	r3, [r7, #23]
          break;
 8010a1a:	e016      	b.n	8010a4a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	2b03      	cmp	r3, #3
 8010a26:	d00f      	beq.n	8010a48 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010a28:	6839      	ldr	r1, [r7, #0]
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f001 fa30 	bl	8011e90 <USBD_CtlError>
            ret = USBD_FAIL;
 8010a30:	2303      	movs	r3, #3
 8010a32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010a34:	e008      	b.n	8010a48 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f001 fa29 	bl	8011e90 <USBD_CtlError>
          ret = USBD_FAIL;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	75fb      	strb	r3, [r7, #23]
          break;
 8010a42:	e002      	b.n	8010a4a <USBD_CDC_Setup+0x176>
          break;
 8010a44:	bf00      	nop
 8010a46:	e008      	b.n	8010a5a <USBD_CDC_Setup+0x186>
          break;
 8010a48:	bf00      	nop
      }
      break;
 8010a4a:	e006      	b.n	8010a5a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010a4c:	6839      	ldr	r1, [r7, #0]
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f001 fa1e 	bl	8011e90 <USBD_CtlError>
      ret = USBD_FAIL;
 8010a54:	2303      	movs	r3, #3
 8010a56:	75fb      	strb	r3, [r7, #23]
      break;
 8010a58:	bf00      	nop
  }

  return (uint8_t)ret;
 8010a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3718      	adds	r7, #24
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d101      	bne.n	8010a86 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010a82:	2303      	movs	r3, #3
 8010a84:	e04f      	b.n	8010b26 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010a8e:	78fa      	ldrb	r2, [r7, #3]
 8010a90:	6879      	ldr	r1, [r7, #4]
 8010a92:	4613      	mov	r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4413      	add	r3, r2
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	440b      	add	r3, r1
 8010a9c:	3318      	adds	r3, #24
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d029      	beq.n	8010af8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010aa4:	78fa      	ldrb	r2, [r7, #3]
 8010aa6:	6879      	ldr	r1, [r7, #4]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4413      	add	r3, r2
 8010aae:	009b      	lsls	r3, r3, #2
 8010ab0:	440b      	add	r3, r1
 8010ab2:	3318      	adds	r3, #24
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	78f9      	ldrb	r1, [r7, #3]
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	460b      	mov	r3, r1
 8010abc:	00db      	lsls	r3, r3, #3
 8010abe:	440b      	add	r3, r1
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	4403      	add	r3, r0
 8010ac4:	3348      	adds	r3, #72	; 0x48
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	fbb2 f1f3 	udiv	r1, r2, r3
 8010acc:	fb01 f303 	mul.w	r3, r1, r3
 8010ad0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d110      	bne.n	8010af8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010ad6:	78fa      	ldrb	r2, [r7, #3]
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	4613      	mov	r3, r2
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	4413      	add	r3, r2
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	440b      	add	r3, r1
 8010ae4:	3318      	adds	r3, #24
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010aea:	78f9      	ldrb	r1, [r7, #3]
 8010aec:	2300      	movs	r3, #0
 8010aee:	2200      	movs	r2, #0
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f001 ffd9 	bl	8012aa8 <USBD_LL_Transmit>
 8010af6:	e015      	b.n	8010b24 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	2200      	movs	r2, #0
 8010afc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00b      	beq.n	8010b24 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b12:	691b      	ldr	r3, [r3, #16]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010b20:	78fa      	ldrb	r2, [r7, #3]
 8010b22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b084      	sub	sp, #16
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
 8010b36:	460b      	mov	r3, r1
 8010b38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d101      	bne.n	8010b50 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b4c:	2303      	movs	r3, #3
 8010b4e:	e015      	b.n	8010b7c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010b50:	78fb      	ldrb	r3, [r7, #3]
 8010b52:	4619      	mov	r1, r3
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f002 f817 	bl	8012b88 <USBD_LL_GetRxDataSize>
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010b70:	68fa      	ldr	r2, [r7, #12]
 8010b72:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010b76:	4611      	mov	r1, r2
 8010b78:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010b7a:	2300      	movs	r3, #0
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d101      	bne.n	8010b9e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010b9a:	2303      	movs	r3, #3
 8010b9c:	e01b      	b.n	8010bd6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d015      	beq.n	8010bd4 <USBD_CDC_EP0_RxReady+0x50>
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010bae:	2bff      	cmp	r3, #255	; 0xff
 8010bb0:	d010      	beq.n	8010bd4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	68fa      	ldr	r2, [r7, #12]
 8010bbc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010bc0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010bc2:	68fa      	ldr	r2, [r7, #12]
 8010bc4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010bc8:	b292      	uxth	r2, r2
 8010bca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	22ff      	movs	r2, #255	; 0xff
 8010bd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3710      	adds	r7, #16
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
	...

08010be0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2243      	movs	r2, #67	; 0x43
 8010bec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010bee:	4b03      	ldr	r3, [pc, #12]	; (8010bfc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	370c      	adds	r7, #12
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr
 8010bfc:	20000190 	.word	0x20000190

08010c00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2243      	movs	r2, #67	; 0x43
 8010c0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010c0e:	4b03      	ldr	r3, [pc, #12]	; (8010c1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	370c      	adds	r7, #12
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr
 8010c1c:	2000014c 	.word	0x2000014c

08010c20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2243      	movs	r2, #67	; 0x43
 8010c2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010c2e:	4b03      	ldr	r3, [pc, #12]	; (8010c3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	200001d4 	.word	0x200001d4

08010c40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	220a      	movs	r2, #10
 8010c4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010c4e:	4b03      	ldr	r3, [pc, #12]	; (8010c5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr
 8010c5c:	20000108 	.word	0x20000108

08010c60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b083      	sub	sp, #12
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d101      	bne.n	8010c74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010c70:	2303      	movs	r3, #3
 8010c72:	e004      	b.n	8010c7e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	683a      	ldr	r2, [r7, #0]
 8010c78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	370c      	adds	r7, #12
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr

08010c8a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010c8a:	b480      	push	{r7}
 8010c8c:	b087      	sub	sp, #28
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	60f8      	str	r0, [r7, #12]
 8010c92:	60b9      	str	r1, [r7, #8]
 8010c94:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c9c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d101      	bne.n	8010ca8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010ca4:	2303      	movs	r3, #3
 8010ca6:	e008      	b.n	8010cba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	371c      	adds	r7, #28
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc4:	4770      	bx	lr

08010cc6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010cc6:	b480      	push	{r7}
 8010cc8:	b085      	sub	sp, #20
 8010cca:	af00      	add	r7, sp, #0
 8010ccc:	6078      	str	r0, [r7, #4]
 8010cce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d101      	bne.n	8010ce2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	e004      	b.n	8010cec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	683a      	ldr	r2, [r7, #0]
 8010ce6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010cea:	2300      	movs	r3, #0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3714      	adds	r7, #20
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d101      	bne.n	8010d16 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010d12:	2303      	movs	r3, #3
 8010d14:	e016      	b.n	8010d44 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	7c1b      	ldrb	r3, [r3, #16]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d109      	bne.n	8010d32 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d28:	2101      	movs	r1, #1
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f001 fef4 	bl	8012b18 <USBD_LL_PrepareReceive>
 8010d30:	e007      	b.n	8010d42 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d38:	2340      	movs	r3, #64	; 0x40
 8010d3a:	2101      	movs	r1, #1
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f001 feeb 	bl	8012b18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3710      	adds	r7, #16
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b086      	sub	sp, #24
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	4613      	mov	r3, r2
 8010d58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d101      	bne.n	8010d64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010d60:	2303      	movs	r3, #3
 8010d62:	e01f      	b.n	8010da4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2200      	movs	r2, #0
 8010d68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2200      	movs	r2, #0
 8010d78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d003      	beq.n	8010d8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	68ba      	ldr	r2, [r7, #8]
 8010d86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	79fa      	ldrb	r2, [r7, #7]
 8010d96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f001 fcc5 	bl	8012728 <USBD_LL_Init>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3718      	adds	r7, #24
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010db6:	2300      	movs	r3, #0
 8010db8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d101      	bne.n	8010dc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010dc0:	2303      	movs	r3, #3
 8010dc2:	e016      	b.n	8010df2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	683a      	ldr	r2, [r7, #0]
 8010dc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d00b      	beq.n	8010df0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de0:	f107 020e 	add.w	r2, r7, #14
 8010de4:	4610      	mov	r0, r2
 8010de6:	4798      	blx	r3
 8010de8:	4602      	mov	r2, r0
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010df0:	2300      	movs	r3, #0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3710      	adds	r7, #16
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b082      	sub	sp, #8
 8010dfe:	af00      	add	r7, sp, #0
 8010e00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f001 fcdc 	bl	80127c0 <USBD_LL_Start>
 8010e08:	4603      	mov	r3, r0
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3708      	adds	r7, #8
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}

08010e12 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010e12:	b480      	push	{r7}
 8010e14:	b083      	sub	sp, #12
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010e1a:	2300      	movs	r3, #0
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	460b      	mov	r3, r1
 8010e32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010e34:	2303      	movs	r3, #3
 8010e36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d009      	beq.n	8010e56 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	78fa      	ldrb	r2, [r7, #3]
 8010e4c:	4611      	mov	r1, r2
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	4798      	blx	r3
 8010e52:	4603      	mov	r3, r0
 8010e54:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d007      	beq.n	8010e86 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	78fa      	ldrb	r2, [r7, #3]
 8010e80:	4611      	mov	r1, r2
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	4798      	blx	r3
  }

  return USBD_OK;
 8010e86:	2300      	movs	r3, #0
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010ea0:	6839      	ldr	r1, [r7, #0]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 ffba 	bl	8011e1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2201      	movs	r2, #1
 8010eac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010ec4:	f003 031f 	and.w	r3, r3, #31
 8010ec8:	2b02      	cmp	r3, #2
 8010eca:	d01a      	beq.n	8010f02 <USBD_LL_SetupStage+0x72>
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	d822      	bhi.n	8010f16 <USBD_LL_SetupStage+0x86>
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <USBD_LL_SetupStage+0x4a>
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d00a      	beq.n	8010eee <USBD_LL_SetupStage+0x5e>
 8010ed8:	e01d      	b.n	8010f16 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 fa62 	bl	80113ac <USBD_StdDevReq>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	73fb      	strb	r3, [r7, #15]
      break;
 8010eec:	e020      	b.n	8010f30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 fac6 	bl	8011488 <USBD_StdItfReq>
 8010efc:	4603      	mov	r3, r0
 8010efe:	73fb      	strb	r3, [r7, #15]
      break;
 8010f00:	e016      	b.n	8010f30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f08:	4619      	mov	r1, r3
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f000 fb05 	bl	801151a <USBD_StdEPReq>
 8010f10:	4603      	mov	r3, r0
 8010f12:	73fb      	strb	r3, [r7, #15]
      break;
 8010f14:	e00c      	b.n	8010f30 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	4619      	mov	r1, r3
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f001 fcf1 	bl	801290c <USBD_LL_StallEP>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8010f2e:	bf00      	nop
  }

  return ret;
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3710      	adds	r7, #16
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b086      	sub	sp, #24
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	60f8      	str	r0, [r7, #12]
 8010f42:	460b      	mov	r3, r1
 8010f44:	607a      	str	r2, [r7, #4]
 8010f46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010f48:	7afb      	ldrb	r3, [r7, #11]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d138      	bne.n	8010fc0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010f54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010f5c:	2b03      	cmp	r3, #3
 8010f5e:	d14a      	bne.n	8010ff6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	689a      	ldr	r2, [r3, #8]
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d913      	bls.n	8010f94 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	689a      	ldr	r2, [r3, #8]
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	1ad2      	subs	r2, r2, r3
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	68da      	ldr	r2, [r3, #12]
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	4293      	cmp	r3, r2
 8010f84:	bf28      	it	cs
 8010f86:	4613      	movcs	r3, r2
 8010f88:	461a      	mov	r2, r3
 8010f8a:	6879      	ldr	r1, [r7, #4]
 8010f8c:	68f8      	ldr	r0, [r7, #12]
 8010f8e:	f001 f839 	bl	8012004 <USBD_CtlContinueRx>
 8010f92:	e030      	b.n	8010ff6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	2b03      	cmp	r3, #3
 8010f9e:	d10b      	bne.n	8010fb8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fa6:	691b      	ldr	r3, [r3, #16]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d005      	beq.n	8010fb8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fb2:	691b      	ldr	r3, [r3, #16]
 8010fb4:	68f8      	ldr	r0, [r7, #12]
 8010fb6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f001 f834 	bl	8012026 <USBD_CtlSendStatus>
 8010fbe:	e01a      	b.n	8010ff6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	2b03      	cmp	r3, #3
 8010fca:	d114      	bne.n	8010ff6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fd2:	699b      	ldr	r3, [r3, #24]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d00e      	beq.n	8010ff6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fde:	699b      	ldr	r3, [r3, #24]
 8010fe0:	7afa      	ldrb	r2, [r7, #11]
 8010fe2:	4611      	mov	r1, r2
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	4798      	blx	r3
 8010fe8:	4603      	mov	r3, r0
 8010fea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010fec:	7dfb      	ldrb	r3, [r7, #23]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010ff2:	7dfb      	ldrb	r3, [r7, #23]
 8010ff4:	e000      	b.n	8010ff8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3718      	adds	r7, #24
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b086      	sub	sp, #24
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	460b      	mov	r3, r1
 801100a:	607a      	str	r2, [r7, #4]
 801100c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801100e:	7afb      	ldrb	r3, [r7, #11]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d16b      	bne.n	80110ec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	3314      	adds	r3, #20
 8011018:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011020:	2b02      	cmp	r3, #2
 8011022:	d156      	bne.n	80110d2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	689a      	ldr	r2, [r3, #8]
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	429a      	cmp	r2, r3
 801102e:	d914      	bls.n	801105a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	689a      	ldr	r2, [r3, #8]
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	1ad2      	subs	r2, r2, r3
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	461a      	mov	r2, r3
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f000 ffae 	bl	8011fa8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801104c:	2300      	movs	r3, #0
 801104e:	2200      	movs	r2, #0
 8011050:	2100      	movs	r1, #0
 8011052:	68f8      	ldr	r0, [r7, #12]
 8011054:	f001 fd60 	bl	8012b18 <USBD_LL_PrepareReceive>
 8011058:	e03b      	b.n	80110d2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	68da      	ldr	r2, [r3, #12]
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	429a      	cmp	r2, r3
 8011064:	d11c      	bne.n	80110a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	685a      	ldr	r2, [r3, #4]
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801106e:	429a      	cmp	r2, r3
 8011070:	d316      	bcc.n	80110a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	685a      	ldr	r2, [r3, #4]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801107c:	429a      	cmp	r2, r3
 801107e:	d20f      	bcs.n	80110a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011080:	2200      	movs	r2, #0
 8011082:	2100      	movs	r1, #0
 8011084:	68f8      	ldr	r0, [r7, #12]
 8011086:	f000 ff8f 	bl	8011fa8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2200      	movs	r2, #0
 801108e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011092:	2300      	movs	r3, #0
 8011094:	2200      	movs	r2, #0
 8011096:	2100      	movs	r1, #0
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	f001 fd3d 	bl	8012b18 <USBD_LL_PrepareReceive>
 801109e:	e018      	b.n	80110d2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	2b03      	cmp	r3, #3
 80110aa:	d10b      	bne.n	80110c4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d005      	beq.n	80110c4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80110c4:	2180      	movs	r1, #128	; 0x80
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f001 fc20 	bl	801290c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f000 ffbd 	bl	801204c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d122      	bne.n	8011122 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f7ff fe98 	bl	8010e12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2200      	movs	r2, #0
 80110e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80110ea:	e01a      	b.n	8011122 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b03      	cmp	r3, #3
 80110f6:	d114      	bne.n	8011122 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110fe:	695b      	ldr	r3, [r3, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d00e      	beq.n	8011122 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801110a:	695b      	ldr	r3, [r3, #20]
 801110c:	7afa      	ldrb	r2, [r7, #11]
 801110e:	4611      	mov	r1, r2
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	4798      	blx	r3
 8011114:	4603      	mov	r3, r0
 8011116:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011118:	7dfb      	ldrb	r3, [r7, #23]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d001      	beq.n	8011122 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801111e:	7dfb      	ldrb	r3, [r7, #23]
 8011120:	e000      	b.n	8011124 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011122:	2300      	movs	r3, #0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3718      	adds	r7, #24
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2201      	movs	r2, #1
 8011138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2200      	movs	r2, #0
 8011140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2200      	movs	r2, #0
 8011148:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2200      	movs	r2, #0
 801114e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011158:	2b00      	cmp	r3, #0
 801115a:	d101      	bne.n	8011160 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801115c:	2303      	movs	r3, #3
 801115e:	e02f      	b.n	80111c0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011166:	2b00      	cmp	r3, #0
 8011168:	d00f      	beq.n	801118a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d009      	beq.n	801118a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	6852      	ldr	r2, [r2, #4]
 8011182:	b2d2      	uxtb	r2, r2
 8011184:	4611      	mov	r1, r2
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801118a:	2340      	movs	r3, #64	; 0x40
 801118c:	2200      	movs	r2, #0
 801118e:	2100      	movs	r1, #0
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f001 fb47 	bl	8012824 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2201      	movs	r2, #1
 801119a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2240      	movs	r2, #64	; 0x40
 80111a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80111a6:	2340      	movs	r3, #64	; 0x40
 80111a8:	2200      	movs	r2, #0
 80111aa:	2180      	movs	r1, #128	; 0x80
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f001 fb39 	bl	8012824 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2201      	movs	r2, #1
 80111b6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2240      	movs	r2, #64	; 0x40
 80111bc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	460b      	mov	r3, r1
 80111d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	78fa      	ldrb	r2, [r7, #3]
 80111d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80111da:	2300      	movs	r3, #0
}
 80111dc:	4618      	mov	r0, r3
 80111de:	370c      	adds	r7, #12
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111f6:	b2da      	uxtb	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2204      	movs	r2, #4
 8011202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011206:	2300      	movs	r3, #0
}
 8011208:	4618      	mov	r0, r3
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011214:	b480      	push	{r7}
 8011216:	b083      	sub	sp, #12
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011222:	b2db      	uxtb	r3, r3
 8011224:	2b04      	cmp	r3, #4
 8011226:	d106      	bne.n	8011236 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801122e:	b2da      	uxtb	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011236:	2300      	movs	r3, #0
}
 8011238:	4618      	mov	r0, r3
 801123a:	370c      	adds	r7, #12
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011252:	2b00      	cmp	r3, #0
 8011254:	d101      	bne.n	801125a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011256:	2303      	movs	r3, #3
 8011258:	e012      	b.n	8011280 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b03      	cmp	r3, #3
 8011264:	d10b      	bne.n	801127e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801126c:	69db      	ldr	r3, [r3, #28]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d005      	beq.n	801127e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011278:	69db      	ldr	r3, [r3, #28]
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	3708      	adds	r7, #8
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}

08011288 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	460b      	mov	r3, r1
 8011292:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801129a:	2b00      	cmp	r3, #0
 801129c:	d101      	bne.n	80112a2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801129e:	2303      	movs	r3, #3
 80112a0:	e014      	b.n	80112cc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	2b03      	cmp	r3, #3
 80112ac:	d10d      	bne.n	80112ca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112b4:	6a1b      	ldr	r3, [r3, #32]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d007      	beq.n	80112ca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112c0:	6a1b      	ldr	r3, [r3, #32]
 80112c2:	78fa      	ldrb	r2, [r7, #3]
 80112c4:	4611      	mov	r1, r2
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80112ca:	2300      	movs	r3, #0
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d101      	bne.n	80112ee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80112ea:	2303      	movs	r3, #3
 80112ec:	e014      	b.n	8011318 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	2b03      	cmp	r3, #3
 80112f8:	d10d      	bne.n	8011316 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011302:	2b00      	cmp	r3, #0
 8011304:	d007      	beq.n	8011316 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801130e:	78fa      	ldrb	r2, [r7, #3]
 8011310:	4611      	mov	r1, r2
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011316:	2300      	movs	r3, #0
}
 8011318:	4618      	mov	r0, r3
 801131a:	3708      	adds	r7, #8
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011328:	2300      	movs	r3, #0
}
 801132a:	4618      	mov	r0, r3
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr

08011336 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011336:	b580      	push	{r7, lr}
 8011338:	b082      	sub	sp, #8
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2201      	movs	r2, #1
 8011342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801134c:	2b00      	cmp	r3, #0
 801134e:	d009      	beq.n	8011364 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	6852      	ldr	r2, [r2, #4]
 801135c:	b2d2      	uxtb	r2, r2
 801135e:	4611      	mov	r1, r2
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	4798      	blx	r3
  }

  return USBD_OK;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3708      	adds	r7, #8
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801136e:	b480      	push	{r7}
 8011370:	b087      	sub	sp, #28
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	3301      	adds	r3, #1
 8011384:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801138c:	8a3b      	ldrh	r3, [r7, #16]
 801138e:	021b      	lsls	r3, r3, #8
 8011390:	b21a      	sxth	r2, r3
 8011392:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011396:	4313      	orrs	r3, r2
 8011398:	b21b      	sxth	r3, r3
 801139a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801139c:	89fb      	ldrh	r3, [r7, #14]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	371c      	adds	r7, #28
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
	...

080113ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80113b6:	2300      	movs	r3, #0
 80113b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80113c2:	2b40      	cmp	r3, #64	; 0x40
 80113c4:	d005      	beq.n	80113d2 <USBD_StdDevReq+0x26>
 80113c6:	2b40      	cmp	r3, #64	; 0x40
 80113c8:	d853      	bhi.n	8011472 <USBD_StdDevReq+0xc6>
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00b      	beq.n	80113e6 <USBD_StdDevReq+0x3a>
 80113ce:	2b20      	cmp	r3, #32
 80113d0:	d14f      	bne.n	8011472 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	6839      	ldr	r1, [r7, #0]
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	4798      	blx	r3
 80113e0:	4603      	mov	r3, r0
 80113e2:	73fb      	strb	r3, [r7, #15]
      break;
 80113e4:	e04a      	b.n	801147c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	785b      	ldrb	r3, [r3, #1]
 80113ea:	2b09      	cmp	r3, #9
 80113ec:	d83b      	bhi.n	8011466 <USBD_StdDevReq+0xba>
 80113ee:	a201      	add	r2, pc, #4	; (adr r2, 80113f4 <USBD_StdDevReq+0x48>)
 80113f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f4:	08011449 	.word	0x08011449
 80113f8:	0801145d 	.word	0x0801145d
 80113fc:	08011467 	.word	0x08011467
 8011400:	08011453 	.word	0x08011453
 8011404:	08011467 	.word	0x08011467
 8011408:	08011427 	.word	0x08011427
 801140c:	0801141d 	.word	0x0801141d
 8011410:	08011467 	.word	0x08011467
 8011414:	0801143f 	.word	0x0801143f
 8011418:	08011431 	.word	0x08011431
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801141c:	6839      	ldr	r1, [r7, #0]
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f000 f9de 	bl	80117e0 <USBD_GetDescriptor>
          break;
 8011424:	e024      	b.n	8011470 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011426:	6839      	ldr	r1, [r7, #0]
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 fb6d 	bl	8011b08 <USBD_SetAddress>
          break;
 801142e:	e01f      	b.n	8011470 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011430:	6839      	ldr	r1, [r7, #0]
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f000 fbac 	bl	8011b90 <USBD_SetConfig>
 8011438:	4603      	mov	r3, r0
 801143a:	73fb      	strb	r3, [r7, #15]
          break;
 801143c:	e018      	b.n	8011470 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801143e:	6839      	ldr	r1, [r7, #0]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 fc4b 	bl	8011cdc <USBD_GetConfig>
          break;
 8011446:	e013      	b.n	8011470 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011448:	6839      	ldr	r1, [r7, #0]
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f000 fc7c 	bl	8011d48 <USBD_GetStatus>
          break;
 8011450:	e00e      	b.n	8011470 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011452:	6839      	ldr	r1, [r7, #0]
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 fcab 	bl	8011db0 <USBD_SetFeature>
          break;
 801145a:	e009      	b.n	8011470 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801145c:	6839      	ldr	r1, [r7, #0]
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 fcba 	bl	8011dd8 <USBD_ClrFeature>
          break;
 8011464:	e004      	b.n	8011470 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011466:	6839      	ldr	r1, [r7, #0]
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f000 fd11 	bl	8011e90 <USBD_CtlError>
          break;
 801146e:	bf00      	nop
      }
      break;
 8011470:	e004      	b.n	801147c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011472:	6839      	ldr	r1, [r7, #0]
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fd0b 	bl	8011e90 <USBD_CtlError>
      break;
 801147a:	bf00      	nop
  }

  return ret;
 801147c:	7bfb      	ldrb	r3, [r7, #15]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop

08011488 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011492:	2300      	movs	r3, #0
 8011494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801149e:	2b40      	cmp	r3, #64	; 0x40
 80114a0:	d005      	beq.n	80114ae <USBD_StdItfReq+0x26>
 80114a2:	2b40      	cmp	r3, #64	; 0x40
 80114a4:	d82f      	bhi.n	8011506 <USBD_StdItfReq+0x7e>
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d001      	beq.n	80114ae <USBD_StdItfReq+0x26>
 80114aa:	2b20      	cmp	r3, #32
 80114ac:	d12b      	bne.n	8011506 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	3b01      	subs	r3, #1
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d81d      	bhi.n	80114f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	889b      	ldrh	r3, [r3, #4]
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d813      	bhi.n	80114ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114cc:	689b      	ldr	r3, [r3, #8]
 80114ce:	6839      	ldr	r1, [r7, #0]
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	4798      	blx	r3
 80114d4:	4603      	mov	r3, r0
 80114d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	88db      	ldrh	r3, [r3, #6]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d110      	bne.n	8011502 <USBD_StdItfReq+0x7a>
 80114e0:	7bfb      	ldrb	r3, [r7, #15]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d10d      	bne.n	8011502 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f000 fd9d 	bl	8012026 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80114ec:	e009      	b.n	8011502 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80114ee:	6839      	ldr	r1, [r7, #0]
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f000 fccd 	bl	8011e90 <USBD_CtlError>
          break;
 80114f6:	e004      	b.n	8011502 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80114f8:	6839      	ldr	r1, [r7, #0]
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f000 fcc8 	bl	8011e90 <USBD_CtlError>
          break;
 8011500:	e000      	b.n	8011504 <USBD_StdItfReq+0x7c>
          break;
 8011502:	bf00      	nop
      }
      break;
 8011504:	e004      	b.n	8011510 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011506:	6839      	ldr	r1, [r7, #0]
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f000 fcc1 	bl	8011e90 <USBD_CtlError>
      break;
 801150e:	bf00      	nop
  }

  return ret;
 8011510:	7bfb      	ldrb	r3, [r7, #15]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801151a:	b580      	push	{r7, lr}
 801151c:	b084      	sub	sp, #16
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
 8011522:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011524:	2300      	movs	r3, #0
 8011526:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	889b      	ldrh	r3, [r3, #4]
 801152c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011536:	2b40      	cmp	r3, #64	; 0x40
 8011538:	d007      	beq.n	801154a <USBD_StdEPReq+0x30>
 801153a:	2b40      	cmp	r3, #64	; 0x40
 801153c:	f200 8145 	bhi.w	80117ca <USBD_StdEPReq+0x2b0>
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00c      	beq.n	801155e <USBD_StdEPReq+0x44>
 8011544:	2b20      	cmp	r3, #32
 8011546:	f040 8140 	bne.w	80117ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011550:	689b      	ldr	r3, [r3, #8]
 8011552:	6839      	ldr	r1, [r7, #0]
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	4798      	blx	r3
 8011558:	4603      	mov	r3, r0
 801155a:	73fb      	strb	r3, [r7, #15]
      break;
 801155c:	e13a      	b.n	80117d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	785b      	ldrb	r3, [r3, #1]
 8011562:	2b03      	cmp	r3, #3
 8011564:	d007      	beq.n	8011576 <USBD_StdEPReq+0x5c>
 8011566:	2b03      	cmp	r3, #3
 8011568:	f300 8129 	bgt.w	80117be <USBD_StdEPReq+0x2a4>
 801156c:	2b00      	cmp	r3, #0
 801156e:	d07f      	beq.n	8011670 <USBD_StdEPReq+0x156>
 8011570:	2b01      	cmp	r3, #1
 8011572:	d03c      	beq.n	80115ee <USBD_StdEPReq+0xd4>
 8011574:	e123      	b.n	80117be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801157c:	b2db      	uxtb	r3, r3
 801157e:	2b02      	cmp	r3, #2
 8011580:	d002      	beq.n	8011588 <USBD_StdEPReq+0x6e>
 8011582:	2b03      	cmp	r3, #3
 8011584:	d016      	beq.n	80115b4 <USBD_StdEPReq+0x9a>
 8011586:	e02c      	b.n	80115e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011588:	7bbb      	ldrb	r3, [r7, #14]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d00d      	beq.n	80115aa <USBD_StdEPReq+0x90>
 801158e:	7bbb      	ldrb	r3, [r7, #14]
 8011590:	2b80      	cmp	r3, #128	; 0x80
 8011592:	d00a      	beq.n	80115aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011594:	7bbb      	ldrb	r3, [r7, #14]
 8011596:	4619      	mov	r1, r3
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f001 f9b7 	bl	801290c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801159e:	2180      	movs	r1, #128	; 0x80
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f001 f9b3 	bl	801290c <USBD_LL_StallEP>
 80115a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80115a8:	e020      	b.n	80115ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80115aa:	6839      	ldr	r1, [r7, #0]
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 fc6f 	bl	8011e90 <USBD_CtlError>
              break;
 80115b2:	e01b      	b.n	80115ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	885b      	ldrh	r3, [r3, #2]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d10e      	bne.n	80115da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80115bc:	7bbb      	ldrb	r3, [r7, #14]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00b      	beq.n	80115da <USBD_StdEPReq+0xc0>
 80115c2:	7bbb      	ldrb	r3, [r7, #14]
 80115c4:	2b80      	cmp	r3, #128	; 0x80
 80115c6:	d008      	beq.n	80115da <USBD_StdEPReq+0xc0>
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	88db      	ldrh	r3, [r3, #6]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d104      	bne.n	80115da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80115d0:	7bbb      	ldrb	r3, [r7, #14]
 80115d2:	4619      	mov	r1, r3
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f001 f999 	bl	801290c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 fd23 	bl	8012026 <USBD_CtlSendStatus>

              break;
 80115e0:	e004      	b.n	80115ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80115e2:	6839      	ldr	r1, [r7, #0]
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f000 fc53 	bl	8011e90 <USBD_CtlError>
              break;
 80115ea:	bf00      	nop
          }
          break;
 80115ec:	e0ec      	b.n	80117c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	2b02      	cmp	r3, #2
 80115f8:	d002      	beq.n	8011600 <USBD_StdEPReq+0xe6>
 80115fa:	2b03      	cmp	r3, #3
 80115fc:	d016      	beq.n	801162c <USBD_StdEPReq+0x112>
 80115fe:	e030      	b.n	8011662 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011600:	7bbb      	ldrb	r3, [r7, #14]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00d      	beq.n	8011622 <USBD_StdEPReq+0x108>
 8011606:	7bbb      	ldrb	r3, [r7, #14]
 8011608:	2b80      	cmp	r3, #128	; 0x80
 801160a:	d00a      	beq.n	8011622 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801160c:	7bbb      	ldrb	r3, [r7, #14]
 801160e:	4619      	mov	r1, r3
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f001 f97b 	bl	801290c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011616:	2180      	movs	r1, #128	; 0x80
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f001 f977 	bl	801290c <USBD_LL_StallEP>
 801161e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011620:	e025      	b.n	801166e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011622:	6839      	ldr	r1, [r7, #0]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 fc33 	bl	8011e90 <USBD_CtlError>
              break;
 801162a:	e020      	b.n	801166e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	885b      	ldrh	r3, [r3, #2]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d11b      	bne.n	801166c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011634:	7bbb      	ldrb	r3, [r7, #14]
 8011636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801163a:	2b00      	cmp	r3, #0
 801163c:	d004      	beq.n	8011648 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801163e:	7bbb      	ldrb	r3, [r7, #14]
 8011640:	4619      	mov	r1, r3
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f001 f998 	bl	8012978 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 fcec 	bl	8012026 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011654:	689b      	ldr	r3, [r3, #8]
 8011656:	6839      	ldr	r1, [r7, #0]
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	4798      	blx	r3
 801165c:	4603      	mov	r3, r0
 801165e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011660:	e004      	b.n	801166c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011662:	6839      	ldr	r1, [r7, #0]
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 fc13 	bl	8011e90 <USBD_CtlError>
              break;
 801166a:	e000      	b.n	801166e <USBD_StdEPReq+0x154>
              break;
 801166c:	bf00      	nop
          }
          break;
 801166e:	e0ab      	b.n	80117c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011676:	b2db      	uxtb	r3, r3
 8011678:	2b02      	cmp	r3, #2
 801167a:	d002      	beq.n	8011682 <USBD_StdEPReq+0x168>
 801167c:	2b03      	cmp	r3, #3
 801167e:	d032      	beq.n	80116e6 <USBD_StdEPReq+0x1cc>
 8011680:	e097      	b.n	80117b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011682:	7bbb      	ldrb	r3, [r7, #14]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d007      	beq.n	8011698 <USBD_StdEPReq+0x17e>
 8011688:	7bbb      	ldrb	r3, [r7, #14]
 801168a:	2b80      	cmp	r3, #128	; 0x80
 801168c:	d004      	beq.n	8011698 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801168e:	6839      	ldr	r1, [r7, #0]
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f000 fbfd 	bl	8011e90 <USBD_CtlError>
                break;
 8011696:	e091      	b.n	80117bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801169c:	2b00      	cmp	r3, #0
 801169e:	da0b      	bge.n	80116b8 <USBD_StdEPReq+0x19e>
 80116a0:	7bbb      	ldrb	r3, [r7, #14]
 80116a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80116a6:	4613      	mov	r3, r2
 80116a8:	009b      	lsls	r3, r3, #2
 80116aa:	4413      	add	r3, r2
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	3310      	adds	r3, #16
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	4413      	add	r3, r2
 80116b4:	3304      	adds	r3, #4
 80116b6:	e00b      	b.n	80116d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80116b8:	7bbb      	ldrb	r3, [r7, #14]
 80116ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116be:	4613      	mov	r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4413      	add	r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	4413      	add	r3, r2
 80116ce:	3304      	adds	r3, #4
 80116d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	2200      	movs	r2, #0
 80116d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	2202      	movs	r2, #2
 80116dc:	4619      	mov	r1, r3
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f000 fc47 	bl	8011f72 <USBD_CtlSendData>
              break;
 80116e4:	e06a      	b.n	80117bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80116e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	da11      	bge.n	8011712 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80116ee:	7bbb      	ldrb	r3, [r7, #14]
 80116f0:	f003 020f 	and.w	r2, r3, #15
 80116f4:	6879      	ldr	r1, [r7, #4]
 80116f6:	4613      	mov	r3, r2
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	4413      	add	r3, r2
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	440b      	add	r3, r1
 8011700:	3324      	adds	r3, #36	; 0x24
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d117      	bne.n	8011738 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 fbc0 	bl	8011e90 <USBD_CtlError>
                  break;
 8011710:	e054      	b.n	80117bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011712:	7bbb      	ldrb	r3, [r7, #14]
 8011714:	f003 020f 	and.w	r2, r3, #15
 8011718:	6879      	ldr	r1, [r7, #4]
 801171a:	4613      	mov	r3, r2
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4413      	add	r3, r2
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	440b      	add	r3, r1
 8011724:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011728:	881b      	ldrh	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d104      	bne.n	8011738 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801172e:	6839      	ldr	r1, [r7, #0]
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f000 fbad 	bl	8011e90 <USBD_CtlError>
                  break;
 8011736:	e041      	b.n	80117bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801173c:	2b00      	cmp	r3, #0
 801173e:	da0b      	bge.n	8011758 <USBD_StdEPReq+0x23e>
 8011740:	7bbb      	ldrb	r3, [r7, #14]
 8011742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011746:	4613      	mov	r3, r2
 8011748:	009b      	lsls	r3, r3, #2
 801174a:	4413      	add	r3, r2
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	3310      	adds	r3, #16
 8011750:	687a      	ldr	r2, [r7, #4]
 8011752:	4413      	add	r3, r2
 8011754:	3304      	adds	r3, #4
 8011756:	e00b      	b.n	8011770 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011758:	7bbb      	ldrb	r3, [r7, #14]
 801175a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801175e:	4613      	mov	r3, r2
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	4413      	add	r3, r2
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	4413      	add	r3, r2
 801176e:	3304      	adds	r3, #4
 8011770:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011772:	7bbb      	ldrb	r3, [r7, #14]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d002      	beq.n	801177e <USBD_StdEPReq+0x264>
 8011778:	7bbb      	ldrb	r3, [r7, #14]
 801177a:	2b80      	cmp	r3, #128	; 0x80
 801177c:	d103      	bne.n	8011786 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	2200      	movs	r2, #0
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	e00e      	b.n	80117a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011786:	7bbb      	ldrb	r3, [r7, #14]
 8011788:	4619      	mov	r1, r3
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f001 f92a 	bl	80129e4 <USBD_LL_IsStallEP>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d003      	beq.n	801179e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	2201      	movs	r2, #1
 801179a:	601a      	str	r2, [r3, #0]
 801179c:	e002      	b.n	80117a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	2200      	movs	r2, #0
 80117a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2202      	movs	r2, #2
 80117a8:	4619      	mov	r1, r3
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 fbe1 	bl	8011f72 <USBD_CtlSendData>
              break;
 80117b0:	e004      	b.n	80117bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80117b2:	6839      	ldr	r1, [r7, #0]
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f000 fb6b 	bl	8011e90 <USBD_CtlError>
              break;
 80117ba:	bf00      	nop
          }
          break;
 80117bc:	e004      	b.n	80117c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80117be:	6839      	ldr	r1, [r7, #0]
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f000 fb65 	bl	8011e90 <USBD_CtlError>
          break;
 80117c6:	bf00      	nop
      }
      break;
 80117c8:	e004      	b.n	80117d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80117ca:	6839      	ldr	r1, [r7, #0]
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f000 fb5f 	bl	8011e90 <USBD_CtlError>
      break;
 80117d2:	bf00      	nop
  }

  return ret;
 80117d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
	...

080117e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80117ea:	2300      	movs	r3, #0
 80117ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80117ee:	2300      	movs	r3, #0
 80117f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80117f2:	2300      	movs	r3, #0
 80117f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	885b      	ldrh	r3, [r3, #2]
 80117fa:	0a1b      	lsrs	r3, r3, #8
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	3b01      	subs	r3, #1
 8011800:	2b0e      	cmp	r3, #14
 8011802:	f200 8152 	bhi.w	8011aaa <USBD_GetDescriptor+0x2ca>
 8011806:	a201      	add	r2, pc, #4	; (adr r2, 801180c <USBD_GetDescriptor+0x2c>)
 8011808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801180c:	0801187d 	.word	0x0801187d
 8011810:	08011895 	.word	0x08011895
 8011814:	080118d5 	.word	0x080118d5
 8011818:	08011aab 	.word	0x08011aab
 801181c:	08011aab 	.word	0x08011aab
 8011820:	08011a4b 	.word	0x08011a4b
 8011824:	08011a77 	.word	0x08011a77
 8011828:	08011aab 	.word	0x08011aab
 801182c:	08011aab 	.word	0x08011aab
 8011830:	08011aab 	.word	0x08011aab
 8011834:	08011aab 	.word	0x08011aab
 8011838:	08011aab 	.word	0x08011aab
 801183c:	08011aab 	.word	0x08011aab
 8011840:	08011aab 	.word	0x08011aab
 8011844:	08011849 	.word	0x08011849
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801184e:	69db      	ldr	r3, [r3, #28]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00b      	beq.n	801186c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801185a:	69db      	ldr	r3, [r3, #28]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	7c12      	ldrb	r2, [r2, #16]
 8011860:	f107 0108 	add.w	r1, r7, #8
 8011864:	4610      	mov	r0, r2
 8011866:	4798      	blx	r3
 8011868:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801186a:	e126      	b.n	8011aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801186c:	6839      	ldr	r1, [r7, #0]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 fb0e 	bl	8011e90 <USBD_CtlError>
        err++;
 8011874:	7afb      	ldrb	r3, [r7, #11]
 8011876:	3301      	adds	r3, #1
 8011878:	72fb      	strb	r3, [r7, #11]
      break;
 801187a:	e11e      	b.n	8011aba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	7c12      	ldrb	r2, [r2, #16]
 8011888:	f107 0108 	add.w	r1, r7, #8
 801188c:	4610      	mov	r0, r2
 801188e:	4798      	blx	r3
 8011890:	60f8      	str	r0, [r7, #12]
      break;
 8011892:	e112      	b.n	8011aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	7c1b      	ldrb	r3, [r3, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10d      	bne.n	80118b8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a4:	f107 0208 	add.w	r2, r7, #8
 80118a8:	4610      	mov	r0, r2
 80118aa:	4798      	blx	r3
 80118ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	3301      	adds	r3, #1
 80118b2:	2202      	movs	r2, #2
 80118b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80118b6:	e100      	b.n	8011aba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c0:	f107 0208 	add.w	r2, r7, #8
 80118c4:	4610      	mov	r0, r2
 80118c6:	4798      	blx	r3
 80118c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	3301      	adds	r3, #1
 80118ce:	2202      	movs	r2, #2
 80118d0:	701a      	strb	r2, [r3, #0]
      break;
 80118d2:	e0f2      	b.n	8011aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	885b      	ldrh	r3, [r3, #2]
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	2b05      	cmp	r3, #5
 80118dc:	f200 80ac 	bhi.w	8011a38 <USBD_GetDescriptor+0x258>
 80118e0:	a201      	add	r2, pc, #4	; (adr r2, 80118e8 <USBD_GetDescriptor+0x108>)
 80118e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118e6:	bf00      	nop
 80118e8:	08011901 	.word	0x08011901
 80118ec:	08011935 	.word	0x08011935
 80118f0:	08011969 	.word	0x08011969
 80118f4:	0801199d 	.word	0x0801199d
 80118f8:	080119d1 	.word	0x080119d1
 80118fc:	08011a05 	.word	0x08011a05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00b      	beq.n	8011924 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	7c12      	ldrb	r2, [r2, #16]
 8011918:	f107 0108 	add.w	r1, r7, #8
 801191c:	4610      	mov	r0, r2
 801191e:	4798      	blx	r3
 8011920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011922:	e091      	b.n	8011a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011924:	6839      	ldr	r1, [r7, #0]
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 fab2 	bl	8011e90 <USBD_CtlError>
            err++;
 801192c:	7afb      	ldrb	r3, [r7, #11]
 801192e:	3301      	adds	r3, #1
 8011930:	72fb      	strb	r3, [r7, #11]
          break;
 8011932:	e089      	b.n	8011a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00b      	beq.n	8011958 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011946:	689b      	ldr	r3, [r3, #8]
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	7c12      	ldrb	r2, [r2, #16]
 801194c:	f107 0108 	add.w	r1, r7, #8
 8011950:	4610      	mov	r0, r2
 8011952:	4798      	blx	r3
 8011954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011956:	e077      	b.n	8011a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 fa98 	bl	8011e90 <USBD_CtlError>
            err++;
 8011960:	7afb      	ldrb	r3, [r7, #11]
 8011962:	3301      	adds	r3, #1
 8011964:	72fb      	strb	r3, [r7, #11]
          break;
 8011966:	e06f      	b.n	8011a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00b      	beq.n	801198c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	7c12      	ldrb	r2, [r2, #16]
 8011980:	f107 0108 	add.w	r1, r7, #8
 8011984:	4610      	mov	r0, r2
 8011986:	4798      	blx	r3
 8011988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801198a:	e05d      	b.n	8011a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801198c:	6839      	ldr	r1, [r7, #0]
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 fa7e 	bl	8011e90 <USBD_CtlError>
            err++;
 8011994:	7afb      	ldrb	r3, [r7, #11]
 8011996:	3301      	adds	r3, #1
 8011998:	72fb      	strb	r3, [r7, #11]
          break;
 801199a:	e055      	b.n	8011a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119a2:	691b      	ldr	r3, [r3, #16]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00b      	beq.n	80119c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119ae:	691b      	ldr	r3, [r3, #16]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	7c12      	ldrb	r2, [r2, #16]
 80119b4:	f107 0108 	add.w	r1, r7, #8
 80119b8:	4610      	mov	r0, r2
 80119ba:	4798      	blx	r3
 80119bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119be:	e043      	b.n	8011a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80119c0:	6839      	ldr	r1, [r7, #0]
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 fa64 	bl	8011e90 <USBD_CtlError>
            err++;
 80119c8:	7afb      	ldrb	r3, [r7, #11]
 80119ca:	3301      	adds	r3, #1
 80119cc:	72fb      	strb	r3, [r7, #11]
          break;
 80119ce:	e03b      	b.n	8011a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119d6:	695b      	ldr	r3, [r3, #20]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d00b      	beq.n	80119f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119e2:	695b      	ldr	r3, [r3, #20]
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	7c12      	ldrb	r2, [r2, #16]
 80119e8:	f107 0108 	add.w	r1, r7, #8
 80119ec:	4610      	mov	r0, r2
 80119ee:	4798      	blx	r3
 80119f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119f2:	e029      	b.n	8011a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80119f4:	6839      	ldr	r1, [r7, #0]
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 fa4a 	bl	8011e90 <USBD_CtlError>
            err++;
 80119fc:	7afb      	ldrb	r3, [r7, #11]
 80119fe:	3301      	adds	r3, #1
 8011a00:	72fb      	strb	r3, [r7, #11]
          break;
 8011a02:	e021      	b.n	8011a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a0a:	699b      	ldr	r3, [r3, #24]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00b      	beq.n	8011a28 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a16:	699b      	ldr	r3, [r3, #24]
 8011a18:	687a      	ldr	r2, [r7, #4]
 8011a1a:	7c12      	ldrb	r2, [r2, #16]
 8011a1c:	f107 0108 	add.w	r1, r7, #8
 8011a20:	4610      	mov	r0, r2
 8011a22:	4798      	blx	r3
 8011a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a26:	e00f      	b.n	8011a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 fa30 	bl	8011e90 <USBD_CtlError>
            err++;
 8011a30:	7afb      	ldrb	r3, [r7, #11]
 8011a32:	3301      	adds	r3, #1
 8011a34:	72fb      	strb	r3, [r7, #11]
          break;
 8011a36:	e007      	b.n	8011a48 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011a38:	6839      	ldr	r1, [r7, #0]
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 fa28 	bl	8011e90 <USBD_CtlError>
          err++;
 8011a40:	7afb      	ldrb	r3, [r7, #11]
 8011a42:	3301      	adds	r3, #1
 8011a44:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011a46:	bf00      	nop
      }
      break;
 8011a48:	e037      	b.n	8011aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	7c1b      	ldrb	r3, [r3, #16]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d109      	bne.n	8011a66 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a5a:	f107 0208 	add.w	r2, r7, #8
 8011a5e:	4610      	mov	r0, r2
 8011a60:	4798      	blx	r3
 8011a62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011a64:	e029      	b.n	8011aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011a66:	6839      	ldr	r1, [r7, #0]
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f000 fa11 	bl	8011e90 <USBD_CtlError>
        err++;
 8011a6e:	7afb      	ldrb	r3, [r7, #11]
 8011a70:	3301      	adds	r3, #1
 8011a72:	72fb      	strb	r3, [r7, #11]
      break;
 8011a74:	e021      	b.n	8011aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	7c1b      	ldrb	r3, [r3, #16]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d10d      	bne.n	8011a9a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a86:	f107 0208 	add.w	r2, r7, #8
 8011a8a:	4610      	mov	r0, r2
 8011a8c:	4798      	blx	r3
 8011a8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	3301      	adds	r3, #1
 8011a94:	2207      	movs	r2, #7
 8011a96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011a98:	e00f      	b.n	8011aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 f9f7 	bl	8011e90 <USBD_CtlError>
        err++;
 8011aa2:	7afb      	ldrb	r3, [r7, #11]
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8011aa8:	e007      	b.n	8011aba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011aaa:	6839      	ldr	r1, [r7, #0]
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 f9ef 	bl	8011e90 <USBD_CtlError>
      err++;
 8011ab2:	7afb      	ldrb	r3, [r7, #11]
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8011ab8:	bf00      	nop
  }

  if (err != 0U)
 8011aba:	7afb      	ldrb	r3, [r7, #11]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d11e      	bne.n	8011afe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	88db      	ldrh	r3, [r3, #6]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d016      	beq.n	8011af6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011ac8:	893b      	ldrh	r3, [r7, #8]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00e      	beq.n	8011aec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	88da      	ldrh	r2, [r3, #6]
 8011ad2:	893b      	ldrh	r3, [r7, #8]
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	bf28      	it	cs
 8011ad8:	4613      	movcs	r3, r2
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011ade:	893b      	ldrh	r3, [r7, #8]
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	68f9      	ldr	r1, [r7, #12]
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 fa44 	bl	8011f72 <USBD_CtlSendData>
 8011aea:	e009      	b.n	8011b00 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011aec:	6839      	ldr	r1, [r7, #0]
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f000 f9ce 	bl	8011e90 <USBD_CtlError>
 8011af4:	e004      	b.n	8011b00 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 fa95 	bl	8012026 <USBD_CtlSendStatus>
 8011afc:	e000      	b.n	8011b00 <USBD_GetDescriptor+0x320>
    return;
 8011afe:	bf00      	nop
  }
}
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop

08011b08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	889b      	ldrh	r3, [r3, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d131      	bne.n	8011b7e <USBD_SetAddress+0x76>
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	88db      	ldrh	r3, [r3, #6]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d12d      	bne.n	8011b7e <USBD_SetAddress+0x76>
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	885b      	ldrh	r3, [r3, #2]
 8011b26:	2b7f      	cmp	r3, #127	; 0x7f
 8011b28:	d829      	bhi.n	8011b7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	885b      	ldrh	r3, [r3, #2]
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b3c:	b2db      	uxtb	r3, r3
 8011b3e:	2b03      	cmp	r3, #3
 8011b40:	d104      	bne.n	8011b4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011b42:	6839      	ldr	r1, [r7, #0]
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 f9a3 	bl	8011e90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b4a:	e01d      	b.n	8011b88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	7bfa      	ldrb	r2, [r7, #15]
 8011b50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011b54:	7bfb      	ldrb	r3, [r7, #15]
 8011b56:	4619      	mov	r1, r3
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 ff6f 	bl	8012a3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f000 fa61 	bl	8012026 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011b64:	7bfb      	ldrb	r3, [r7, #15]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d004      	beq.n	8011b74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2202      	movs	r2, #2
 8011b6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b72:	e009      	b.n	8011b88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2201      	movs	r2, #1
 8011b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b7c:	e004      	b.n	8011b88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011b7e:	6839      	ldr	r1, [r7, #0]
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 f985 	bl	8011e90 <USBD_CtlError>
  }
}
 8011b86:	bf00      	nop
 8011b88:	bf00      	nop
 8011b8a:	3710      	adds	r7, #16
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	885b      	ldrh	r3, [r3, #2]
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	4b4c      	ldr	r3, [pc, #304]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011ba6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011ba8:	4b4b      	ldr	r3, [pc, #300]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d905      	bls.n	8011bbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011bb0:	6839      	ldr	r1, [r7, #0]
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f000 f96c 	bl	8011e90 <USBD_CtlError>
    return USBD_FAIL;
 8011bb8:	2303      	movs	r3, #3
 8011bba:	e088      	b.n	8011cce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	2b02      	cmp	r3, #2
 8011bc6:	d002      	beq.n	8011bce <USBD_SetConfig+0x3e>
 8011bc8:	2b03      	cmp	r3, #3
 8011bca:	d025      	beq.n	8011c18 <USBD_SetConfig+0x88>
 8011bcc:	e071      	b.n	8011cb2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011bce:	4b42      	ldr	r3, [pc, #264]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d01c      	beq.n	8011c10 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011bd6:	4b40      	ldr	r3, [pc, #256]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011be0:	4b3d      	ldr	r3, [pc, #244]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	4619      	mov	r1, r3
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f7ff f91e 	bl	8010e28 <USBD_SetClassConfig>
 8011bec:	4603      	mov	r3, r0
 8011bee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011bf0:	7bfb      	ldrb	r3, [r7, #15]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d004      	beq.n	8011c00 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011bf6:	6839      	ldr	r1, [r7, #0]
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f000 f949 	bl	8011e90 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011bfe:	e065      	b.n	8011ccc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f000 fa10 	bl	8012026 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2203      	movs	r2, #3
 8011c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011c0e:	e05d      	b.n	8011ccc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f000 fa08 	bl	8012026 <USBD_CtlSendStatus>
      break;
 8011c16:	e059      	b.n	8011ccc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011c18:	4b2f      	ldr	r3, [pc, #188]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d112      	bne.n	8011c46 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2202      	movs	r2, #2
 8011c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011c28:	4b2b      	ldr	r3, [pc, #172]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011c32:	4b29      	ldr	r3, [pc, #164]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	4619      	mov	r1, r3
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f7ff f911 	bl	8010e60 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 f9f1 	bl	8012026 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011c44:	e042      	b.n	8011ccc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011c46:	4b24      	ldr	r3, [pc, #144]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d02a      	beq.n	8011caa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f7ff f8ff 	bl	8010e60 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011c62:	4b1d      	ldr	r3, [pc, #116]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	461a      	mov	r2, r3
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011c6c:	4b1a      	ldr	r3, [pc, #104]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	4619      	mov	r1, r3
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f7ff f8d8 	bl	8010e28 <USBD_SetClassConfig>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011c7c:	7bfb      	ldrb	r3, [r7, #15]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d00f      	beq.n	8011ca2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011c82:	6839      	ldr	r1, [r7, #0]
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 f903 	bl	8011e90 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	b2db      	uxtb	r3, r3
 8011c90:	4619      	mov	r1, r3
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f7ff f8e4 	bl	8010e60 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2202      	movs	r2, #2
 8011c9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011ca0:	e014      	b.n	8011ccc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f9bf 	bl	8012026 <USBD_CtlSendStatus>
      break;
 8011ca8:	e010      	b.n	8011ccc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 f9bb 	bl	8012026 <USBD_CtlSendStatus>
      break;
 8011cb0:	e00c      	b.n	8011ccc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011cb2:	6839      	ldr	r1, [r7, #0]
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f000 f8eb 	bl	8011e90 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011cba:	4b07      	ldr	r3, [pc, #28]	; (8011cd8 <USBD_SetConfig+0x148>)
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f7ff f8cd 	bl	8010e60 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011cc6:	2303      	movs	r3, #3
 8011cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8011cca:	bf00      	nop
  }

  return ret;
 8011ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	20000c7c 	.word	0x20000c7c

08011cdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	88db      	ldrh	r3, [r3, #6]
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d004      	beq.n	8011cf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011cee:	6839      	ldr	r1, [r7, #0]
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f000 f8cd 	bl	8011e90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011cf6:	e023      	b.n	8011d40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	2b02      	cmp	r3, #2
 8011d02:	dc02      	bgt.n	8011d0a <USBD_GetConfig+0x2e>
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	dc03      	bgt.n	8011d10 <USBD_GetConfig+0x34>
 8011d08:	e015      	b.n	8011d36 <USBD_GetConfig+0x5a>
 8011d0a:	2b03      	cmp	r3, #3
 8011d0c:	d00b      	beq.n	8011d26 <USBD_GetConfig+0x4a>
 8011d0e:	e012      	b.n	8011d36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2200      	movs	r2, #0
 8011d14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	3308      	adds	r3, #8
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 f927 	bl	8011f72 <USBD_CtlSendData>
        break;
 8011d24:	e00c      	b.n	8011d40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	3304      	adds	r3, #4
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f000 f91f 	bl	8011f72 <USBD_CtlSendData>
        break;
 8011d34:	e004      	b.n	8011d40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011d36:	6839      	ldr	r1, [r7, #0]
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 f8a9 	bl	8011e90 <USBD_CtlError>
        break;
 8011d3e:	bf00      	nop
}
 8011d40:	bf00      	nop
 8011d42:	3708      	adds	r7, #8
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	2b02      	cmp	r3, #2
 8011d5e:	d81e      	bhi.n	8011d9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	88db      	ldrh	r3, [r3, #6]
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d004      	beq.n	8011d72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011d68:	6839      	ldr	r1, [r7, #0]
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 f890 	bl	8011e90 <USBD_CtlError>
        break;
 8011d70:	e01a      	b.n	8011da8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2201      	movs	r2, #1
 8011d76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d005      	beq.n	8011d8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	f043 0202 	orr.w	r2, r3, #2
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	330c      	adds	r3, #12
 8011d92:	2202      	movs	r2, #2
 8011d94:	4619      	mov	r1, r3
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 f8eb 	bl	8011f72 <USBD_CtlSendData>
      break;
 8011d9c:	e004      	b.n	8011da8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011d9e:	6839      	ldr	r1, [r7, #0]
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 f875 	bl	8011e90 <USBD_CtlError>
      break;
 8011da6:	bf00      	nop
  }
}
 8011da8:	bf00      	nop
 8011daa:	3708      	adds	r7, #8
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	885b      	ldrh	r3, [r3, #2]
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d106      	bne.n	8011dd0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f000 f92b 	bl	8012026 <USBD_CtlSendStatus>
  }
}
 8011dd0:	bf00      	nop
 8011dd2:	3708      	adds	r7, #8
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}

08011dd8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	3b01      	subs	r3, #1
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	d80b      	bhi.n	8011e08 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	885b      	ldrh	r3, [r3, #2]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d10c      	bne.n	8011e12 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f000 f910 	bl	8012026 <USBD_CtlSendStatus>
      }
      break;
 8011e06:	e004      	b.n	8011e12 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011e08:	6839      	ldr	r1, [r7, #0]
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f000 f840 	bl	8011e90 <USBD_CtlError>
      break;
 8011e10:	e000      	b.n	8011e14 <USBD_ClrFeature+0x3c>
      break;
 8011e12:	bf00      	nop
  }
}
 8011e14:	bf00      	nop
 8011e16:	3708      	adds	r7, #8
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	781a      	ldrb	r2, [r3, #0]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	3301      	adds	r3, #1
 8011e36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	781a      	ldrb	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	3301      	adds	r3, #1
 8011e44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011e46:	68f8      	ldr	r0, [r7, #12]
 8011e48:	f7ff fa91 	bl	801136e <SWAPBYTE>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	3301      	adds	r3, #1
 8011e58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	f7ff fa84 	bl	801136e <SWAPBYTE>
 8011e66:	4603      	mov	r3, r0
 8011e68:	461a      	mov	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	3301      	adds	r3, #1
 8011e72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	3301      	adds	r3, #1
 8011e78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011e7a:	68f8      	ldr	r0, [r7, #12]
 8011e7c:	f7ff fa77 	bl	801136e <SWAPBYTE>
 8011e80:	4603      	mov	r3, r0
 8011e82:	461a      	mov	r2, r3
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	80da      	strh	r2, [r3, #6]
}
 8011e88:	bf00      	nop
 8011e8a:	3710      	adds	r7, #16
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e9a:	2180      	movs	r1, #128	; 0x80
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 fd35 	bl	801290c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011ea2:	2100      	movs	r1, #0
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f000 fd31 	bl	801290c <USBD_LL_StallEP>
}
 8011eaa:	bf00      	nop
 8011eac:	3708      	adds	r7, #8
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b086      	sub	sp, #24
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	60f8      	str	r0, [r7, #12]
 8011eba:	60b9      	str	r1, [r7, #8]
 8011ebc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d036      	beq.n	8011f36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011ecc:	6938      	ldr	r0, [r7, #16]
 8011ece:	f000 f836 	bl	8011f3e <USBD_GetLen>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011ee0:	7dfb      	ldrb	r3, [r7, #23]
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	7812      	ldrb	r2, [r2, #0]
 8011eea:	701a      	strb	r2, [r3, #0]
  idx++;
 8011eec:	7dfb      	ldrb	r3, [r7, #23]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011ef2:	7dfb      	ldrb	r3, [r7, #23]
 8011ef4:	68ba      	ldr	r2, [r7, #8]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	2203      	movs	r2, #3
 8011efa:	701a      	strb	r2, [r3, #0]
  idx++;
 8011efc:	7dfb      	ldrb	r3, [r7, #23]
 8011efe:	3301      	adds	r3, #1
 8011f00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011f02:	e013      	b.n	8011f2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011f04:	7dfb      	ldrb	r3, [r7, #23]
 8011f06:	68ba      	ldr	r2, [r7, #8]
 8011f08:	4413      	add	r3, r2
 8011f0a:	693a      	ldr	r2, [r7, #16]
 8011f0c:	7812      	ldrb	r2, [r2, #0]
 8011f0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	3301      	adds	r3, #1
 8011f14:	613b      	str	r3, [r7, #16]
    idx++;
 8011f16:	7dfb      	ldrb	r3, [r7, #23]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011f1c:	7dfb      	ldrb	r3, [r7, #23]
 8011f1e:	68ba      	ldr	r2, [r7, #8]
 8011f20:	4413      	add	r3, r2
 8011f22:	2200      	movs	r2, #0
 8011f24:	701a      	strb	r2, [r3, #0]
    idx++;
 8011f26:	7dfb      	ldrb	r3, [r7, #23]
 8011f28:	3301      	adds	r3, #1
 8011f2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d1e7      	bne.n	8011f04 <USBD_GetString+0x52>
 8011f34:	e000      	b.n	8011f38 <USBD_GetString+0x86>
    return;
 8011f36:	bf00      	nop
  }
}
 8011f38:	3718      	adds	r7, #24
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}

08011f3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011f3e:	b480      	push	{r7}
 8011f40:	b085      	sub	sp, #20
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011f46:	2300      	movs	r3, #0
 8011f48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011f4e:	e005      	b.n	8011f5c <USBD_GetLen+0x1e>
  {
    len++;
 8011f50:	7bfb      	ldrb	r3, [r7, #15]
 8011f52:	3301      	adds	r3, #1
 8011f54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1f5      	bne.n	8011f50 <USBD_GetLen+0x12>
  }

  return len;
 8011f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3714      	adds	r7, #20
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr

08011f72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b084      	sub	sp, #16
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	60f8      	str	r0, [r7, #12]
 8011f7a:	60b9      	str	r1, [r7, #8]
 8011f7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2202      	movs	r2, #2
 8011f82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	68ba      	ldr	r2, [r7, #8]
 8011f96:	2100      	movs	r1, #0
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f000 fd85 	bl	8012aa8 <USBD_LL_Transmit>

  return USBD_OK;
 8011f9e:	2300      	movs	r3, #0
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	60b9      	str	r1, [r7, #8]
 8011fb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	2100      	movs	r1, #0
 8011fba:	68f8      	ldr	r0, [r7, #12]
 8011fbc:	f000 fd74 	bl	8012aa8 <USBD_LL_Transmit>

  return USBD_OK;
 8011fc0:	2300      	movs	r3, #0
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b084      	sub	sp, #16
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	60f8      	str	r0, [r7, #12]
 8011fd2:	60b9      	str	r1, [r7, #8]
 8011fd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	2203      	movs	r2, #3
 8011fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	687a      	ldr	r2, [r7, #4]
 8011fea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	68ba      	ldr	r2, [r7, #8]
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f000 fd8f 	bl	8012b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011ffa:	2300      	movs	r3, #0
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	68ba      	ldr	r2, [r7, #8]
 8012014:	2100      	movs	r1, #0
 8012016:	68f8      	ldr	r0, [r7, #12]
 8012018:	f000 fd7e 	bl	8012b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801201c:	2300      	movs	r3, #0
}
 801201e:	4618      	mov	r0, r3
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012026:	b580      	push	{r7, lr}
 8012028:	b082      	sub	sp, #8
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2204      	movs	r2, #4
 8012032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012036:	2300      	movs	r3, #0
 8012038:	2200      	movs	r2, #0
 801203a:	2100      	movs	r1, #0
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f000 fd33 	bl	8012aa8 <USBD_LL_Transmit>

  return USBD_OK;
 8012042:	2300      	movs	r3, #0
}
 8012044:	4618      	mov	r0, r3
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2205      	movs	r2, #5
 8012058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801205c:	2300      	movs	r3, #0
 801205e:	2200      	movs	r2, #0
 8012060:	2100      	movs	r1, #0
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f000 fd58 	bl	8012b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
	...

08012074 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012078:	2200      	movs	r2, #0
 801207a:	4912      	ldr	r1, [pc, #72]	; (80120c4 <MX_USB_DEVICE_Init+0x50>)
 801207c:	4812      	ldr	r0, [pc, #72]	; (80120c8 <MX_USB_DEVICE_Init+0x54>)
 801207e:	f7fe fe65 	bl	8010d4c <USBD_Init>
 8012082:	4603      	mov	r3, r0
 8012084:	2b00      	cmp	r3, #0
 8012086:	d001      	beq.n	801208c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012088:	f7ef fa76 	bl	8001578 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801208c:	490f      	ldr	r1, [pc, #60]	; (80120cc <MX_USB_DEVICE_Init+0x58>)
 801208e:	480e      	ldr	r0, [pc, #56]	; (80120c8 <MX_USB_DEVICE_Init+0x54>)
 8012090:	f7fe fe8c 	bl	8010dac <USBD_RegisterClass>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d001      	beq.n	801209e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801209a:	f7ef fa6d 	bl	8001578 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801209e:	490c      	ldr	r1, [pc, #48]	; (80120d0 <MX_USB_DEVICE_Init+0x5c>)
 80120a0:	4809      	ldr	r0, [pc, #36]	; (80120c8 <MX_USB_DEVICE_Init+0x54>)
 80120a2:	f7fe fddd 	bl	8010c60 <USBD_CDC_RegisterInterface>
 80120a6:	4603      	mov	r3, r0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d001      	beq.n	80120b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80120ac:	f7ef fa64 	bl	8001578 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80120b0:	4805      	ldr	r0, [pc, #20]	; (80120c8 <MX_USB_DEVICE_Init+0x54>)
 80120b2:	f7fe fea2 	bl	8010dfa <USBD_Start>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d001      	beq.n	80120c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80120bc:	f7ef fa5c 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80120c0:	bf00      	nop
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	2000022c 	.word	0x2000022c
 80120c8:	20000c80 	.word	0x20000c80
 80120cc:	20000114 	.word	0x20000114
 80120d0:	20000218 	.word	0x20000218

080120d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80120d8:	2200      	movs	r2, #0
 80120da:	4905      	ldr	r1, [pc, #20]	; (80120f0 <CDC_Init_FS+0x1c>)
 80120dc:	4805      	ldr	r0, [pc, #20]	; (80120f4 <CDC_Init_FS+0x20>)
 80120de:	f7fe fdd4 	bl	8010c8a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80120e2:	4905      	ldr	r1, [pc, #20]	; (80120f8 <CDC_Init_FS+0x24>)
 80120e4:	4803      	ldr	r0, [pc, #12]	; (80120f4 <CDC_Init_FS+0x20>)
 80120e6:	f7fe fdee 	bl	8010cc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80120ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	20001750 	.word	0x20001750
 80120f4:	20000c80 	.word	0x20000c80
 80120f8:	20000f50 	.word	0x20000f50

080120fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80120fc:	b480      	push	{r7}
 80120fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012100:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012102:	4618      	mov	r0, r3
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
 8012112:	4603      	mov	r3, r0
 8012114:	6039      	str	r1, [r7, #0]
 8012116:	71fb      	strb	r3, [r7, #7]
 8012118:	4613      	mov	r3, r2
 801211a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801211c:	79fb      	ldrb	r3, [r7, #7]
 801211e:	2b23      	cmp	r3, #35	; 0x23
 8012120:	d84a      	bhi.n	80121b8 <CDC_Control_FS+0xac>
 8012122:	a201      	add	r2, pc, #4	; (adr r2, 8012128 <CDC_Control_FS+0x1c>)
 8012124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012128:	080121b9 	.word	0x080121b9
 801212c:	080121b9 	.word	0x080121b9
 8012130:	080121b9 	.word	0x080121b9
 8012134:	080121b9 	.word	0x080121b9
 8012138:	080121b9 	.word	0x080121b9
 801213c:	080121b9 	.word	0x080121b9
 8012140:	080121b9 	.word	0x080121b9
 8012144:	080121b9 	.word	0x080121b9
 8012148:	080121b9 	.word	0x080121b9
 801214c:	080121b9 	.word	0x080121b9
 8012150:	080121b9 	.word	0x080121b9
 8012154:	080121b9 	.word	0x080121b9
 8012158:	080121b9 	.word	0x080121b9
 801215c:	080121b9 	.word	0x080121b9
 8012160:	080121b9 	.word	0x080121b9
 8012164:	080121b9 	.word	0x080121b9
 8012168:	080121b9 	.word	0x080121b9
 801216c:	080121b9 	.word	0x080121b9
 8012170:	080121b9 	.word	0x080121b9
 8012174:	080121b9 	.word	0x080121b9
 8012178:	080121b9 	.word	0x080121b9
 801217c:	080121b9 	.word	0x080121b9
 8012180:	080121b9 	.word	0x080121b9
 8012184:	080121b9 	.word	0x080121b9
 8012188:	080121b9 	.word	0x080121b9
 801218c:	080121b9 	.word	0x080121b9
 8012190:	080121b9 	.word	0x080121b9
 8012194:	080121b9 	.word	0x080121b9
 8012198:	080121b9 	.word	0x080121b9
 801219c:	080121b9 	.word	0x080121b9
 80121a0:	080121b9 	.word	0x080121b9
 80121a4:	080121b9 	.word	0x080121b9
 80121a8:	080121b9 	.word	0x080121b9
 80121ac:	080121b9 	.word	0x080121b9
 80121b0:	080121b9 	.word	0x080121b9
 80121b4:	080121b9 	.word	0x080121b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80121b8:	bf00      	nop
  }

  return (USBD_OK);
 80121ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80121bc:	4618      	mov	r0, r3
 80121be:	370c      	adds	r7, #12
 80121c0:	46bd      	mov	sp, r7
 80121c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c6:	4770      	bx	lr

080121c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80121d2:	6879      	ldr	r1, [r7, #4]
 80121d4:	4805      	ldr	r0, [pc, #20]	; (80121ec <CDC_Receive_FS+0x24>)
 80121d6:	f7fe fd76 	bl	8010cc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80121da:	4804      	ldr	r0, [pc, #16]	; (80121ec <CDC_Receive_FS+0x24>)
 80121dc:	f7fe fd8c 	bl	8010cf8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80121e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	20000c80 	.word	0x20000c80

080121f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80121f0:	b480      	push	{r7}
 80121f2:	b087      	sub	sp, #28
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	4613      	mov	r3, r2
 80121fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80121fe:	2300      	movs	r3, #0
 8012200:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012202:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012206:	4618      	mov	r0, r3
 8012208:	371c      	adds	r7, #28
 801220a:	46bd      	mov	sp, r7
 801220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012210:	4770      	bx	lr
	...

08012214 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012214:	b480      	push	{r7}
 8012216:	b083      	sub	sp, #12
 8012218:	af00      	add	r7, sp, #0
 801221a:	4603      	mov	r3, r0
 801221c:	6039      	str	r1, [r7, #0]
 801221e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	2212      	movs	r2, #18
 8012224:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012226:	4b03      	ldr	r3, [pc, #12]	; (8012234 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012228:	4618      	mov	r0, r3
 801222a:	370c      	adds	r7, #12
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr
 8012234:	2000024c 	.word	0x2000024c

08012238 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	4603      	mov	r3, r0
 8012240:	6039      	str	r1, [r7, #0]
 8012242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	2204      	movs	r2, #4
 8012248:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801224a:	4b03      	ldr	r3, [pc, #12]	; (8012258 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801224c:	4618      	mov	r0, r3
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr
 8012258:	2000026c 	.word	0x2000026c

0801225c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	4603      	mov	r3, r0
 8012264:	6039      	str	r1, [r7, #0]
 8012266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012268:	79fb      	ldrb	r3, [r7, #7]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d105      	bne.n	801227a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801226e:	683a      	ldr	r2, [r7, #0]
 8012270:	4907      	ldr	r1, [pc, #28]	; (8012290 <USBD_FS_ProductStrDescriptor+0x34>)
 8012272:	4808      	ldr	r0, [pc, #32]	; (8012294 <USBD_FS_ProductStrDescriptor+0x38>)
 8012274:	f7ff fe1d 	bl	8011eb2 <USBD_GetString>
 8012278:	e004      	b.n	8012284 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801227a:	683a      	ldr	r2, [r7, #0]
 801227c:	4904      	ldr	r1, [pc, #16]	; (8012290 <USBD_FS_ProductStrDescriptor+0x34>)
 801227e:	4805      	ldr	r0, [pc, #20]	; (8012294 <USBD_FS_ProductStrDescriptor+0x38>)
 8012280:	f7ff fe17 	bl	8011eb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012284:	4b02      	ldr	r3, [pc, #8]	; (8012290 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012286:	4618      	mov	r0, r3
 8012288:	3708      	adds	r7, #8
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	20001f50 	.word	0x20001f50
 8012294:	08012d04 	.word	0x08012d04

08012298 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	4603      	mov	r3, r0
 80122a0:	6039      	str	r1, [r7, #0]
 80122a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80122a4:	683a      	ldr	r2, [r7, #0]
 80122a6:	4904      	ldr	r1, [pc, #16]	; (80122b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80122a8:	4804      	ldr	r0, [pc, #16]	; (80122bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80122aa:	f7ff fe02 	bl	8011eb2 <USBD_GetString>
  return USBD_StrDesc;
 80122ae:	4b02      	ldr	r3, [pc, #8]	; (80122b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3708      	adds	r7, #8
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	20001f50 	.word	0x20001f50
 80122bc:	08012d1c 	.word	0x08012d1c

080122c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	4603      	mov	r3, r0
 80122c8:	6039      	str	r1, [r7, #0]
 80122ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	221a      	movs	r2, #26
 80122d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80122d2:	f000 f855 	bl	8012380 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80122d6:	4b02      	ldr	r3, [pc, #8]	; (80122e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3708      	adds	r7, #8
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	20000270 	.word	0x20000270

080122e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	4603      	mov	r3, r0
 80122ec:	6039      	str	r1, [r7, #0]
 80122ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80122f0:	79fb      	ldrb	r3, [r7, #7]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d105      	bne.n	8012302 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80122f6:	683a      	ldr	r2, [r7, #0]
 80122f8:	4907      	ldr	r1, [pc, #28]	; (8012318 <USBD_FS_ConfigStrDescriptor+0x34>)
 80122fa:	4808      	ldr	r0, [pc, #32]	; (801231c <USBD_FS_ConfigStrDescriptor+0x38>)
 80122fc:	f7ff fdd9 	bl	8011eb2 <USBD_GetString>
 8012300:	e004      	b.n	801230c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012302:	683a      	ldr	r2, [r7, #0]
 8012304:	4904      	ldr	r1, [pc, #16]	; (8012318 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012306:	4805      	ldr	r0, [pc, #20]	; (801231c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012308:	f7ff fdd3 	bl	8011eb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801230c:	4b02      	ldr	r3, [pc, #8]	; (8012318 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801230e:	4618      	mov	r0, r3
 8012310:	3708      	adds	r7, #8
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	20001f50 	.word	0x20001f50
 801231c:	08012d30 	.word	0x08012d30

08012320 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	4603      	mov	r3, r0
 8012328:	6039      	str	r1, [r7, #0]
 801232a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801232c:	79fb      	ldrb	r3, [r7, #7]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d105      	bne.n	801233e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012332:	683a      	ldr	r2, [r7, #0]
 8012334:	4907      	ldr	r1, [pc, #28]	; (8012354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012336:	4808      	ldr	r0, [pc, #32]	; (8012358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012338:	f7ff fdbb 	bl	8011eb2 <USBD_GetString>
 801233c:	e004      	b.n	8012348 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	4904      	ldr	r1, [pc, #16]	; (8012354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012342:	4805      	ldr	r0, [pc, #20]	; (8012358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012344:	f7ff fdb5 	bl	8011eb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012348:	4b02      	ldr	r3, [pc, #8]	; (8012354 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801234a:	4618      	mov	r0, r3
 801234c:	3708      	adds	r7, #8
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	20001f50 	.word	0x20001f50
 8012358:	08012d3c 	.word	0x08012d3c

0801235c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
 8012362:	4603      	mov	r3, r0
 8012364:	6039      	str	r1, [r7, #0]
 8012366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	220c      	movs	r2, #12
 801236c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801236e:	4b03      	ldr	r3, [pc, #12]	; (801237c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr
 801237c:	20000260 	.word	0x20000260

08012380 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012386:	4b0f      	ldr	r3, [pc, #60]	; (80123c4 <Get_SerialNum+0x44>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801238c:	4b0e      	ldr	r3, [pc, #56]	; (80123c8 <Get_SerialNum+0x48>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012392:	4b0e      	ldr	r3, [pc, #56]	; (80123cc <Get_SerialNum+0x4c>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	4413      	add	r3, r2
 801239e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d009      	beq.n	80123ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80123a6:	2208      	movs	r2, #8
 80123a8:	4909      	ldr	r1, [pc, #36]	; (80123d0 <Get_SerialNum+0x50>)
 80123aa:	68f8      	ldr	r0, [r7, #12]
 80123ac:	f000 f814 	bl	80123d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80123b0:	2204      	movs	r2, #4
 80123b2:	4908      	ldr	r1, [pc, #32]	; (80123d4 <Get_SerialNum+0x54>)
 80123b4:	68b8      	ldr	r0, [r7, #8]
 80123b6:	f000 f80f 	bl	80123d8 <IntToUnicode>
  }
}
 80123ba:	bf00      	nop
 80123bc:	3710      	adds	r7, #16
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	1fff7590 	.word	0x1fff7590
 80123c8:	1fff7594 	.word	0x1fff7594
 80123cc:	1fff7598 	.word	0x1fff7598
 80123d0:	20000272 	.word	0x20000272
 80123d4:	20000282 	.word	0x20000282

080123d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80123d8:	b480      	push	{r7}
 80123da:	b087      	sub	sp, #28
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	4613      	mov	r3, r2
 80123e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80123e6:	2300      	movs	r3, #0
 80123e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80123ea:	2300      	movs	r3, #0
 80123ec:	75fb      	strb	r3, [r7, #23]
 80123ee:	e027      	b.n	8012440 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	0f1b      	lsrs	r3, r3, #28
 80123f4:	2b09      	cmp	r3, #9
 80123f6:	d80b      	bhi.n	8012410 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	0f1b      	lsrs	r3, r3, #28
 80123fc:	b2da      	uxtb	r2, r3
 80123fe:	7dfb      	ldrb	r3, [r7, #23]
 8012400:	005b      	lsls	r3, r3, #1
 8012402:	4619      	mov	r1, r3
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	440b      	add	r3, r1
 8012408:	3230      	adds	r2, #48	; 0x30
 801240a:	b2d2      	uxtb	r2, r2
 801240c:	701a      	strb	r2, [r3, #0]
 801240e:	e00a      	b.n	8012426 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	0f1b      	lsrs	r3, r3, #28
 8012414:	b2da      	uxtb	r2, r3
 8012416:	7dfb      	ldrb	r3, [r7, #23]
 8012418:	005b      	lsls	r3, r3, #1
 801241a:	4619      	mov	r1, r3
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	440b      	add	r3, r1
 8012420:	3237      	adds	r2, #55	; 0x37
 8012422:	b2d2      	uxtb	r2, r2
 8012424:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	011b      	lsls	r3, r3, #4
 801242a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801242c:	7dfb      	ldrb	r3, [r7, #23]
 801242e:	005b      	lsls	r3, r3, #1
 8012430:	3301      	adds	r3, #1
 8012432:	68ba      	ldr	r2, [r7, #8]
 8012434:	4413      	add	r3, r2
 8012436:	2200      	movs	r2, #0
 8012438:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801243a:	7dfb      	ldrb	r3, [r7, #23]
 801243c:	3301      	adds	r3, #1
 801243e:	75fb      	strb	r3, [r7, #23]
 8012440:	7dfa      	ldrb	r2, [r7, #23]
 8012442:	79fb      	ldrb	r3, [r7, #7]
 8012444:	429a      	cmp	r2, r3
 8012446:	d3d3      	bcc.n	80123f0 <IntToUnicode+0x18>
  }
}
 8012448:	bf00      	nop
 801244a:	bf00      	nop
 801244c:	371c      	adds	r7, #28
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
	...

08012458 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b08a      	sub	sp, #40	; 0x28
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012460:	f107 0314 	add.w	r3, r7, #20
 8012464:	2200      	movs	r2, #0
 8012466:	601a      	str	r2, [r3, #0]
 8012468:	605a      	str	r2, [r3, #4]
 801246a:	609a      	str	r2, [r3, #8]
 801246c:	60da      	str	r2, [r3, #12]
 801246e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012478:	d14e      	bne.n	8012518 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801247a:	4b29      	ldr	r3, [pc, #164]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 801247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801247e:	4a28      	ldr	r2, [pc, #160]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 8012480:	f043 0301 	orr.w	r3, r3, #1
 8012484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012486:	4b26      	ldr	r3, [pc, #152]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 8012488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801248a:	f003 0301 	and.w	r3, r3, #1
 801248e:	613b      	str	r3, [r7, #16]
 8012490:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8012492:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012498:	2302      	movs	r3, #2
 801249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801249c:	2300      	movs	r3, #0
 801249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80124a0:	2303      	movs	r3, #3
 80124a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80124a4:	230a      	movs	r3, #10
 80124a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80124a8:	f107 0314 	add.w	r3, r7, #20
 80124ac:	4619      	mov	r1, r3
 80124ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80124b2:	f7f4 fdc9 	bl	8007048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80124b6:	4b1a      	ldr	r3, [pc, #104]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124ba:	4a19      	ldr	r2, [pc, #100]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80124c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80124c2:	4b17      	ldr	r3, [pc, #92]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80124ca:	60fb      	str	r3, [r7, #12]
 80124cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80124ce:	4b14      	ldr	r3, [pc, #80]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d114      	bne.n	8012504 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80124da:	4b11      	ldr	r3, [pc, #68]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124de:	4a10      	ldr	r2, [pc, #64]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124e4:	6593      	str	r3, [r2, #88]	; 0x58
 80124e6:	4b0e      	ldr	r3, [pc, #56]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80124ee:	60bb      	str	r3, [r7, #8]
 80124f0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80124f2:	f7f7 f9b7 	bl	8009864 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80124f6:	4b0a      	ldr	r3, [pc, #40]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124fa:	4a09      	ldr	r2, [pc, #36]	; (8012520 <HAL_PCD_MspInit+0xc8>)
 80124fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012500:	6593      	str	r3, [r2, #88]	; 0x58
 8012502:	e001      	b.n	8012508 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012504:	f7f7 f9ae 	bl	8009864 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012508:	2200      	movs	r2, #0
 801250a:	2100      	movs	r1, #0
 801250c:	2043      	movs	r0, #67	; 0x43
 801250e:	f7f4 fbc4 	bl	8006c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012512:	2043      	movs	r0, #67	; 0x43
 8012514:	f7f4 fbdd 	bl	8006cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012518:	bf00      	nop
 801251a:	3728      	adds	r7, #40	; 0x28
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	40021000 	.word	0x40021000

08012524 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012538:	4619      	mov	r1, r3
 801253a:	4610      	mov	r0, r2
 801253c:	f7fe fca8 	bl	8010e90 <USBD_LL_SetupStage>
}
 8012540:	bf00      	nop
 8012542:	3708      	adds	r7, #8
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	460b      	mov	r3, r1
 8012552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801255a:	78fa      	ldrb	r2, [r7, #3]
 801255c:	6879      	ldr	r1, [r7, #4]
 801255e:	4613      	mov	r3, r2
 8012560:	00db      	lsls	r3, r3, #3
 8012562:	4413      	add	r3, r2
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	440b      	add	r3, r1
 8012568:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	78fb      	ldrb	r3, [r7, #3]
 8012570:	4619      	mov	r1, r3
 8012572:	f7fe fce2 	bl	8010f3a <USBD_LL_DataOutStage>
}
 8012576:	bf00      	nop
 8012578:	3708      	adds	r7, #8
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b082      	sub	sp, #8
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
 8012586:	460b      	mov	r3, r1
 8012588:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012590:	78fa      	ldrb	r2, [r7, #3]
 8012592:	6879      	ldr	r1, [r7, #4]
 8012594:	4613      	mov	r3, r2
 8012596:	00db      	lsls	r3, r3, #3
 8012598:	4413      	add	r3, r2
 801259a:	009b      	lsls	r3, r3, #2
 801259c:	440b      	add	r3, r1
 801259e:	334c      	adds	r3, #76	; 0x4c
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	78fb      	ldrb	r3, [r7, #3]
 80125a4:	4619      	mov	r1, r3
 80125a6:	f7fe fd2b 	bl	8011000 <USBD_LL_DataInStage>
}
 80125aa:	bf00      	nop
 80125ac:	3708      	adds	r7, #8
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}

080125b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b082      	sub	sp, #8
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7fe fe3f 	bl	8011244 <USBD_LL_SOF>
}
 80125c6:	bf00      	nop
 80125c8:	3708      	adds	r7, #8
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b084      	sub	sp, #16
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80125d6:	2301      	movs	r3, #1
 80125d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	2b02      	cmp	r3, #2
 80125e0:	d001      	beq.n	80125e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80125e2:	f7ee ffc9 	bl	8001578 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80125ec:	7bfa      	ldrb	r2, [r7, #15]
 80125ee:	4611      	mov	r1, r2
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7fe fde9 	bl	80111c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7fe fd95 	bl	801112c <USBD_LL_Reset>
}
 8012602:	bf00      	nop
 8012604:	3710      	adds	r7, #16
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
	...

0801260c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	6812      	ldr	r2, [r2, #0]
 8012622:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012626:	f043 0301 	orr.w	r3, r3, #1
 801262a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012632:	4618      	mov	r0, r3
 8012634:	f7fe fdd8 	bl	80111e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6a1b      	ldr	r3, [r3, #32]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d005      	beq.n	801264c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012640:	4b04      	ldr	r3, [pc, #16]	; (8012654 <HAL_PCD_SuspendCallback+0x48>)
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	4a03      	ldr	r2, [pc, #12]	; (8012654 <HAL_PCD_SuspendCallback+0x48>)
 8012646:	f043 0306 	orr.w	r3, r3, #6
 801264a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801264c:	bf00      	nop
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}
 8012654:	e000ed00 	.word	0xe000ed00

08012658 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	6812      	ldr	r2, [r2, #0]
 801266e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012672:	f023 0301 	bic.w	r3, r3, #1
 8012676:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6a1b      	ldr	r3, [r3, #32]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d007      	beq.n	8012690 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012680:	4b08      	ldr	r3, [pc, #32]	; (80126a4 <HAL_PCD_ResumeCallback+0x4c>)
 8012682:	691b      	ldr	r3, [r3, #16]
 8012684:	4a07      	ldr	r2, [pc, #28]	; (80126a4 <HAL_PCD_ResumeCallback+0x4c>)
 8012686:	f023 0306 	bic.w	r3, r3, #6
 801268a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801268c:	f000 faf6 	bl	8012c7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012696:	4618      	mov	r0, r3
 8012698:	f7fe fdbc 	bl	8011214 <USBD_LL_Resume>
}
 801269c:	bf00      	nop
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	e000ed00 	.word	0xe000ed00

080126a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	460b      	mov	r3, r1
 80126b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80126ba:	78fa      	ldrb	r2, [r7, #3]
 80126bc:	4611      	mov	r1, r2
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fe fe08 	bl	80112d4 <USBD_LL_IsoOUTIncomplete>
}
 80126c4:	bf00      	nop
 80126c6:	3708      	adds	r7, #8
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}

080126cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	460b      	mov	r3, r1
 80126d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80126de:	78fa      	ldrb	r2, [r7, #3]
 80126e0:	4611      	mov	r1, r2
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fe fdd0 	bl	8011288 <USBD_LL_IsoINIncomplete>
}
 80126e8:	bf00      	nop
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fe fe0e 	bl	8011320 <USBD_LL_DevConnected>
}
 8012704:	bf00      	nop
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801271a:	4618      	mov	r0, r3
 801271c:	f7fe fe0b 	bl	8011336 <USBD_LL_DevDisconnected>
}
 8012720:	bf00      	nop
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d13c      	bne.n	80127b2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012738:	4a20      	ldr	r2, [pc, #128]	; (80127bc <USBD_LL_Init+0x94>)
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4a1e      	ldr	r2, [pc, #120]	; (80127bc <USBD_LL_Init+0x94>)
 8012744:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012748:	4b1c      	ldr	r3, [pc, #112]	; (80127bc <USBD_LL_Init+0x94>)
 801274a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801274e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8012750:	4b1a      	ldr	r3, [pc, #104]	; (80127bc <USBD_LL_Init+0x94>)
 8012752:	2206      	movs	r2, #6
 8012754:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012756:	4b19      	ldr	r3, [pc, #100]	; (80127bc <USBD_LL_Init+0x94>)
 8012758:	2202      	movs	r2, #2
 801275a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801275c:	4b17      	ldr	r3, [pc, #92]	; (80127bc <USBD_LL_Init+0x94>)
 801275e:	2202      	movs	r2, #2
 8012760:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012762:	4b16      	ldr	r3, [pc, #88]	; (80127bc <USBD_LL_Init+0x94>)
 8012764:	2200      	movs	r2, #0
 8012766:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012768:	4b14      	ldr	r3, [pc, #80]	; (80127bc <USBD_LL_Init+0x94>)
 801276a:	2200      	movs	r2, #0
 801276c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801276e:	4b13      	ldr	r3, [pc, #76]	; (80127bc <USBD_LL_Init+0x94>)
 8012770:	2200      	movs	r2, #0
 8012772:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012774:	4b11      	ldr	r3, [pc, #68]	; (80127bc <USBD_LL_Init+0x94>)
 8012776:	2200      	movs	r2, #0
 8012778:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801277a:	4b10      	ldr	r3, [pc, #64]	; (80127bc <USBD_LL_Init+0x94>)
 801277c:	2200      	movs	r2, #0
 801277e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012780:	4b0e      	ldr	r3, [pc, #56]	; (80127bc <USBD_LL_Init+0x94>)
 8012782:	2200      	movs	r2, #0
 8012784:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012786:	480d      	ldr	r0, [pc, #52]	; (80127bc <USBD_LL_Init+0x94>)
 8012788:	f7f5 fe39 	bl	80083fe <HAL_PCD_Init>
 801278c:	4603      	mov	r3, r0
 801278e:	2b00      	cmp	r3, #0
 8012790:	d001      	beq.n	8012796 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012792:	f7ee fef1 	bl	8001578 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012796:	2180      	movs	r1, #128	; 0x80
 8012798:	4808      	ldr	r0, [pc, #32]	; (80127bc <USBD_LL_Init+0x94>)
 801279a:	f7f6 ffba 	bl	8009712 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801279e:	2240      	movs	r2, #64	; 0x40
 80127a0:	2100      	movs	r1, #0
 80127a2:	4806      	ldr	r0, [pc, #24]	; (80127bc <USBD_LL_Init+0x94>)
 80127a4:	f7f6 ff6e 	bl	8009684 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80127a8:	2280      	movs	r2, #128	; 0x80
 80127aa:	2101      	movs	r1, #1
 80127ac:	4803      	ldr	r0, [pc, #12]	; (80127bc <USBD_LL_Init+0x94>)
 80127ae:	f7f6 ff69 	bl	8009684 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80127b2:	2300      	movs	r3, #0
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	20002150 	.word	0x20002150

080127c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127c8:	2300      	movs	r3, #0
 80127ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127cc:	2300      	movs	r3, #0
 80127ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7f5 ff35 	bl	8008646 <HAL_PCD_Start>
 80127dc:	4603      	mov	r3, r0
 80127de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80127e0:	7bbb      	ldrb	r3, [r7, #14]
 80127e2:	2b03      	cmp	r3, #3
 80127e4:	d816      	bhi.n	8012814 <USBD_LL_Start+0x54>
 80127e6:	a201      	add	r2, pc, #4	; (adr r2, 80127ec <USBD_LL_Start+0x2c>)
 80127e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127ec:	080127fd 	.word	0x080127fd
 80127f0:	08012803 	.word	0x08012803
 80127f4:	08012809 	.word	0x08012809
 80127f8:	0801280f 	.word	0x0801280f
    case HAL_OK :
      usb_status = USBD_OK;
 80127fc:	2300      	movs	r3, #0
 80127fe:	73fb      	strb	r3, [r7, #15]
    break;
 8012800:	e00b      	b.n	801281a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012802:	2303      	movs	r3, #3
 8012804:	73fb      	strb	r3, [r7, #15]
    break;
 8012806:	e008      	b.n	801281a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012808:	2301      	movs	r3, #1
 801280a:	73fb      	strb	r3, [r7, #15]
    break;
 801280c:	e005      	b.n	801281a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801280e:	2303      	movs	r3, #3
 8012810:	73fb      	strb	r3, [r7, #15]
    break;
 8012812:	e002      	b.n	801281a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8012814:	2303      	movs	r3, #3
 8012816:	73fb      	strb	r3, [r7, #15]
    break;
 8012818:	bf00      	nop
  }
  return usb_status;
 801281a:	7bfb      	ldrb	r3, [r7, #15]
}
 801281c:	4618      	mov	r0, r3
 801281e:	3710      	adds	r7, #16
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	4608      	mov	r0, r1
 801282e:	4611      	mov	r1, r2
 8012830:	461a      	mov	r2, r3
 8012832:	4603      	mov	r3, r0
 8012834:	70fb      	strb	r3, [r7, #3]
 8012836:	460b      	mov	r3, r1
 8012838:	70bb      	strb	r3, [r7, #2]
 801283a:	4613      	mov	r3, r2
 801283c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801283e:	2300      	movs	r3, #0
 8012840:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012842:	2300      	movs	r3, #0
 8012844:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801284c:	78bb      	ldrb	r3, [r7, #2]
 801284e:	883a      	ldrh	r2, [r7, #0]
 8012850:	78f9      	ldrb	r1, [r7, #3]
 8012852:	f7f6 fbdf 	bl	8009014 <HAL_PCD_EP_Open>
 8012856:	4603      	mov	r3, r0
 8012858:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801285a:	7bbb      	ldrb	r3, [r7, #14]
 801285c:	2b03      	cmp	r3, #3
 801285e:	d817      	bhi.n	8012890 <USBD_LL_OpenEP+0x6c>
 8012860:	a201      	add	r2, pc, #4	; (adr r2, 8012868 <USBD_LL_OpenEP+0x44>)
 8012862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012866:	bf00      	nop
 8012868:	08012879 	.word	0x08012879
 801286c:	0801287f 	.word	0x0801287f
 8012870:	08012885 	.word	0x08012885
 8012874:	0801288b 	.word	0x0801288b
    case HAL_OK :
      usb_status = USBD_OK;
 8012878:	2300      	movs	r3, #0
 801287a:	73fb      	strb	r3, [r7, #15]
    break;
 801287c:	e00b      	b.n	8012896 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801287e:	2303      	movs	r3, #3
 8012880:	73fb      	strb	r3, [r7, #15]
    break;
 8012882:	e008      	b.n	8012896 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012884:	2301      	movs	r3, #1
 8012886:	73fb      	strb	r3, [r7, #15]
    break;
 8012888:	e005      	b.n	8012896 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801288a:	2303      	movs	r3, #3
 801288c:	73fb      	strb	r3, [r7, #15]
    break;
 801288e:	e002      	b.n	8012896 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8012890:	2303      	movs	r3, #3
 8012892:	73fb      	strb	r3, [r7, #15]
    break;
 8012894:	bf00      	nop
  }
  return usb_status;
 8012896:	7bfb      	ldrb	r3, [r7, #15]
}
 8012898:	4618      	mov	r0, r3
 801289a:	3710      	adds	r7, #16
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b084      	sub	sp, #16
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	460b      	mov	r3, r1
 80128aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128ac:	2300      	movs	r3, #0
 80128ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128b0:	2300      	movs	r3, #0
 80128b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80128ba:	78fa      	ldrb	r2, [r7, #3]
 80128bc:	4611      	mov	r1, r2
 80128be:	4618      	mov	r0, r3
 80128c0:	f7f6 fc10 	bl	80090e4 <HAL_PCD_EP_Close>
 80128c4:	4603      	mov	r3, r0
 80128c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80128c8:	7bbb      	ldrb	r3, [r7, #14]
 80128ca:	2b03      	cmp	r3, #3
 80128cc:	d816      	bhi.n	80128fc <USBD_LL_CloseEP+0x5c>
 80128ce:	a201      	add	r2, pc, #4	; (adr r2, 80128d4 <USBD_LL_CloseEP+0x34>)
 80128d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128d4:	080128e5 	.word	0x080128e5
 80128d8:	080128eb 	.word	0x080128eb
 80128dc:	080128f1 	.word	0x080128f1
 80128e0:	080128f7 	.word	0x080128f7
    case HAL_OK :
      usb_status = USBD_OK;
 80128e4:	2300      	movs	r3, #0
 80128e6:	73fb      	strb	r3, [r7, #15]
    break;
 80128e8:	e00b      	b.n	8012902 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80128ea:	2303      	movs	r3, #3
 80128ec:	73fb      	strb	r3, [r7, #15]
    break;
 80128ee:	e008      	b.n	8012902 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80128f0:	2301      	movs	r3, #1
 80128f2:	73fb      	strb	r3, [r7, #15]
    break;
 80128f4:	e005      	b.n	8012902 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80128f6:	2303      	movs	r3, #3
 80128f8:	73fb      	strb	r3, [r7, #15]
    break;
 80128fa:	e002      	b.n	8012902 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80128fc:	2303      	movs	r3, #3
 80128fe:	73fb      	strb	r3, [r7, #15]
    break;
 8012900:	bf00      	nop
  }
  return usb_status;
 8012902:	7bfb      	ldrb	r3, [r7, #15]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3710      	adds	r7, #16
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	460b      	mov	r3, r1
 8012916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012918:	2300      	movs	r3, #0
 801291a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801291c:	2300      	movs	r3, #0
 801291e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012926:	78fa      	ldrb	r2, [r7, #3]
 8012928:	4611      	mov	r1, r2
 801292a:	4618      	mov	r0, r3
 801292c:	f7f6 fcb7 	bl	800929e <HAL_PCD_EP_SetStall>
 8012930:	4603      	mov	r3, r0
 8012932:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012934:	7bbb      	ldrb	r3, [r7, #14]
 8012936:	2b03      	cmp	r3, #3
 8012938:	d816      	bhi.n	8012968 <USBD_LL_StallEP+0x5c>
 801293a:	a201      	add	r2, pc, #4	; (adr r2, 8012940 <USBD_LL_StallEP+0x34>)
 801293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012940:	08012951 	.word	0x08012951
 8012944:	08012957 	.word	0x08012957
 8012948:	0801295d 	.word	0x0801295d
 801294c:	08012963 	.word	0x08012963
    case HAL_OK :
      usb_status = USBD_OK;
 8012950:	2300      	movs	r3, #0
 8012952:	73fb      	strb	r3, [r7, #15]
    break;
 8012954:	e00b      	b.n	801296e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012956:	2303      	movs	r3, #3
 8012958:	73fb      	strb	r3, [r7, #15]
    break;
 801295a:	e008      	b.n	801296e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801295c:	2301      	movs	r3, #1
 801295e:	73fb      	strb	r3, [r7, #15]
    break;
 8012960:	e005      	b.n	801296e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012962:	2303      	movs	r3, #3
 8012964:	73fb      	strb	r3, [r7, #15]
    break;
 8012966:	e002      	b.n	801296e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012968:	2303      	movs	r3, #3
 801296a:	73fb      	strb	r3, [r7, #15]
    break;
 801296c:	bf00      	nop
  }
  return usb_status;
 801296e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3710      	adds	r7, #16
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	460b      	mov	r3, r1
 8012982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012984:	2300      	movs	r3, #0
 8012986:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012988:	2300      	movs	r3, #0
 801298a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012992:	78fa      	ldrb	r2, [r7, #3]
 8012994:	4611      	mov	r1, r2
 8012996:	4618      	mov	r0, r3
 8012998:	f7f6 fce3 	bl	8009362 <HAL_PCD_EP_ClrStall>
 801299c:	4603      	mov	r3, r0
 801299e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80129a0:	7bbb      	ldrb	r3, [r7, #14]
 80129a2:	2b03      	cmp	r3, #3
 80129a4:	d816      	bhi.n	80129d4 <USBD_LL_ClearStallEP+0x5c>
 80129a6:	a201      	add	r2, pc, #4	; (adr r2, 80129ac <USBD_LL_ClearStallEP+0x34>)
 80129a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129ac:	080129bd 	.word	0x080129bd
 80129b0:	080129c3 	.word	0x080129c3
 80129b4:	080129c9 	.word	0x080129c9
 80129b8:	080129cf 	.word	0x080129cf
    case HAL_OK :
      usb_status = USBD_OK;
 80129bc:	2300      	movs	r3, #0
 80129be:	73fb      	strb	r3, [r7, #15]
    break;
 80129c0:	e00b      	b.n	80129da <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80129c2:	2303      	movs	r3, #3
 80129c4:	73fb      	strb	r3, [r7, #15]
    break;
 80129c6:	e008      	b.n	80129da <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80129c8:	2301      	movs	r3, #1
 80129ca:	73fb      	strb	r3, [r7, #15]
    break;
 80129cc:	e005      	b.n	80129da <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80129ce:	2303      	movs	r3, #3
 80129d0:	73fb      	strb	r3, [r7, #15]
    break;
 80129d2:	e002      	b.n	80129da <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80129d4:	2303      	movs	r3, #3
 80129d6:	73fb      	strb	r3, [r7, #15]
    break;
 80129d8:	bf00      	nop
  }
  return usb_status;
 80129da:	7bfb      	ldrb	r3, [r7, #15]
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3710      	adds	r7, #16
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129e4:	b480      	push	{r7}
 80129e6:	b085      	sub	sp, #20
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	460b      	mov	r3, r1
 80129ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80129f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	da0b      	bge.n	8012a18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012a00:	78fb      	ldrb	r3, [r7, #3]
 8012a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a06:	68f9      	ldr	r1, [r7, #12]
 8012a08:	4613      	mov	r3, r2
 8012a0a:	00db      	lsls	r3, r3, #3
 8012a0c:	4413      	add	r3, r2
 8012a0e:	009b      	lsls	r3, r3, #2
 8012a10:	440b      	add	r3, r1
 8012a12:	333e      	adds	r3, #62	; 0x3e
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	e00b      	b.n	8012a30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012a18:	78fb      	ldrb	r3, [r7, #3]
 8012a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a1e:	68f9      	ldr	r1, [r7, #12]
 8012a20:	4613      	mov	r3, r2
 8012a22:	00db      	lsls	r3, r3, #3
 8012a24:	4413      	add	r3, r2
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	440b      	add	r3, r1
 8012a2a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012a2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3714      	adds	r7, #20
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr

08012a3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	460b      	mov	r3, r1
 8012a46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a48:	2300      	movs	r3, #0
 8012a4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a56:	78fa      	ldrb	r2, [r7, #3]
 8012a58:	4611      	mov	r1, r2
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f7f6 fab5 	bl	8008fca <HAL_PCD_SetAddress>
 8012a60:	4603      	mov	r3, r0
 8012a62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012a64:	7bbb      	ldrb	r3, [r7, #14]
 8012a66:	2b03      	cmp	r3, #3
 8012a68:	d816      	bhi.n	8012a98 <USBD_LL_SetUSBAddress+0x5c>
 8012a6a:	a201      	add	r2, pc, #4	; (adr r2, 8012a70 <USBD_LL_SetUSBAddress+0x34>)
 8012a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a70:	08012a81 	.word	0x08012a81
 8012a74:	08012a87 	.word	0x08012a87
 8012a78:	08012a8d 	.word	0x08012a8d
 8012a7c:	08012a93 	.word	0x08012a93
    case HAL_OK :
      usb_status = USBD_OK;
 8012a80:	2300      	movs	r3, #0
 8012a82:	73fb      	strb	r3, [r7, #15]
    break;
 8012a84:	e00b      	b.n	8012a9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012a86:	2303      	movs	r3, #3
 8012a88:	73fb      	strb	r3, [r7, #15]
    break;
 8012a8a:	e008      	b.n	8012a9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a90:	e005      	b.n	8012a9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012a92:	2303      	movs	r3, #3
 8012a94:	73fb      	strb	r3, [r7, #15]
    break;
 8012a96:	e002      	b.n	8012a9e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8012a98:	2303      	movs	r3, #3
 8012a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8012a9c:	bf00      	nop
  }
  return usb_status;
 8012a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3710      	adds	r7, #16
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	607a      	str	r2, [r7, #4]
 8012ab2:	603b      	str	r3, [r7, #0]
 8012ab4:	460b      	mov	r3, r1
 8012ab6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012abc:	2300      	movs	r3, #0
 8012abe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012ac6:	7af9      	ldrb	r1, [r7, #11]
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	f7f6 fbaa 	bl	8009224 <HAL_PCD_EP_Transmit>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8012ad4:	7dbb      	ldrb	r3, [r7, #22]
 8012ad6:	2b03      	cmp	r3, #3
 8012ad8:	d816      	bhi.n	8012b08 <USBD_LL_Transmit+0x60>
 8012ada:	a201      	add	r2, pc, #4	; (adr r2, 8012ae0 <USBD_LL_Transmit+0x38>)
 8012adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ae0:	08012af1 	.word	0x08012af1
 8012ae4:	08012af7 	.word	0x08012af7
 8012ae8:	08012afd 	.word	0x08012afd
 8012aec:	08012b03 	.word	0x08012b03
    case HAL_OK :
      usb_status = USBD_OK;
 8012af0:	2300      	movs	r3, #0
 8012af2:	75fb      	strb	r3, [r7, #23]
    break;
 8012af4:	e00b      	b.n	8012b0e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012af6:	2303      	movs	r3, #3
 8012af8:	75fb      	strb	r3, [r7, #23]
    break;
 8012afa:	e008      	b.n	8012b0e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012afc:	2301      	movs	r3, #1
 8012afe:	75fb      	strb	r3, [r7, #23]
    break;
 8012b00:	e005      	b.n	8012b0e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b02:	2303      	movs	r3, #3
 8012b04:	75fb      	strb	r3, [r7, #23]
    break;
 8012b06:	e002      	b.n	8012b0e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8012b08:	2303      	movs	r3, #3
 8012b0a:	75fb      	strb	r3, [r7, #23]
    break;
 8012b0c:	bf00      	nop
  }
  return usb_status;
 8012b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3718      	adds	r7, #24
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b086      	sub	sp, #24
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	607a      	str	r2, [r7, #4]
 8012b22:	603b      	str	r3, [r7, #0]
 8012b24:	460b      	mov	r3, r1
 8012b26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012b36:	7af9      	ldrb	r1, [r7, #11]
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	687a      	ldr	r2, [r7, #4]
 8012b3c:	f7f6 fb1c 	bl	8009178 <HAL_PCD_EP_Receive>
 8012b40:	4603      	mov	r3, r0
 8012b42:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8012b44:	7dbb      	ldrb	r3, [r7, #22]
 8012b46:	2b03      	cmp	r3, #3
 8012b48:	d816      	bhi.n	8012b78 <USBD_LL_PrepareReceive+0x60>
 8012b4a:	a201      	add	r2, pc, #4	; (adr r2, 8012b50 <USBD_LL_PrepareReceive+0x38>)
 8012b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b50:	08012b61 	.word	0x08012b61
 8012b54:	08012b67 	.word	0x08012b67
 8012b58:	08012b6d 	.word	0x08012b6d
 8012b5c:	08012b73 	.word	0x08012b73
    case HAL_OK :
      usb_status = USBD_OK;
 8012b60:	2300      	movs	r3, #0
 8012b62:	75fb      	strb	r3, [r7, #23]
    break;
 8012b64:	e00b      	b.n	8012b7e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b66:	2303      	movs	r3, #3
 8012b68:	75fb      	strb	r3, [r7, #23]
    break;
 8012b6a:	e008      	b.n	8012b7e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	75fb      	strb	r3, [r7, #23]
    break;
 8012b70:	e005      	b.n	8012b7e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b72:	2303      	movs	r3, #3
 8012b74:	75fb      	strb	r3, [r7, #23]
    break;
 8012b76:	e002      	b.n	8012b7e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8012b78:	2303      	movs	r3, #3
 8012b7a:	75fb      	strb	r3, [r7, #23]
    break;
 8012b7c:	bf00      	nop
  }
  return usb_status;
 8012b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3718      	adds	r7, #24
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	460b      	mov	r3, r1
 8012b92:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b9a:	78fa      	ldrb	r2, [r7, #3]
 8012b9c:	4611      	mov	r1, r2
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7f6 fb28 	bl	80091f4 <HAL_PCD_EP_GetRxCount>
 8012ba4:	4603      	mov	r3, r0
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3708      	adds	r7, #8
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}
	...

08012bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012bbc:	78fb      	ldrb	r3, [r7, #3]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d002      	beq.n	8012bc8 <HAL_PCDEx_LPM_Callback+0x18>
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d01f      	beq.n	8012c06 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012bc6:	e03b      	b.n	8012c40 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6a1b      	ldr	r3, [r3, #32]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d007      	beq.n	8012be0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012bd0:	f000 f854 	bl	8012c7c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012bd4:	4b1c      	ldr	r3, [pc, #112]	; (8012c48 <HAL_PCDEx_LPM_Callback+0x98>)
 8012bd6:	691b      	ldr	r3, [r3, #16]
 8012bd8:	4a1b      	ldr	r2, [pc, #108]	; (8012c48 <HAL_PCDEx_LPM_Callback+0x98>)
 8012bda:	f023 0306 	bic.w	r3, r3, #6
 8012bde:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	687a      	ldr	r2, [r7, #4]
 8012bec:	6812      	ldr	r2, [r2, #0]
 8012bee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012bf2:	f023 0301 	bic.w	r3, r3, #1
 8012bf6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7fe fb08 	bl	8011214 <USBD_LL_Resume>
    break;
 8012c04:	e01c      	b.n	8012c40 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	6812      	ldr	r2, [r2, #0]
 8012c14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012c18:	f043 0301 	orr.w	r3, r3, #1
 8012c1c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7fe fadf 	bl	80111e8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6a1b      	ldr	r3, [r3, #32]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d005      	beq.n	8012c3e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012c32:	4b05      	ldr	r3, [pc, #20]	; (8012c48 <HAL_PCDEx_LPM_Callback+0x98>)
 8012c34:	691b      	ldr	r3, [r3, #16]
 8012c36:	4a04      	ldr	r2, [pc, #16]	; (8012c48 <HAL_PCDEx_LPM_Callback+0x98>)
 8012c38:	f043 0306 	orr.w	r3, r3, #6
 8012c3c:	6113      	str	r3, [r2, #16]
    break;
 8012c3e:	bf00      	nop
}
 8012c40:	bf00      	nop
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	e000ed00 	.word	0xe000ed00

08012c4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012c54:	4b03      	ldr	r3, [pc, #12]	; (8012c64 <USBD_static_malloc+0x18>)
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	370c      	adds	r7, #12
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop
 8012c64:	2000265c 	.word	0x2000265c

08012c68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]

}
 8012c70:	bf00      	nop
 8012c72:	370c      	adds	r7, #12
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012c80:	f7ed fd50 	bl	8000724 <SystemClock_Config>
}
 8012c84:	bf00      	nop
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <__libc_init_array>:
 8012c88:	b570      	push	{r4, r5, r6, lr}
 8012c8a:	4d0d      	ldr	r5, [pc, #52]	; (8012cc0 <__libc_init_array+0x38>)
 8012c8c:	4c0d      	ldr	r4, [pc, #52]	; (8012cc4 <__libc_init_array+0x3c>)
 8012c8e:	1b64      	subs	r4, r4, r5
 8012c90:	10a4      	asrs	r4, r4, #2
 8012c92:	2600      	movs	r6, #0
 8012c94:	42a6      	cmp	r6, r4
 8012c96:	d109      	bne.n	8012cac <__libc_init_array+0x24>
 8012c98:	4d0b      	ldr	r5, [pc, #44]	; (8012cc8 <__libc_init_array+0x40>)
 8012c9a:	4c0c      	ldr	r4, [pc, #48]	; (8012ccc <__libc_init_array+0x44>)
 8012c9c:	f000 f820 	bl	8012ce0 <_init>
 8012ca0:	1b64      	subs	r4, r4, r5
 8012ca2:	10a4      	asrs	r4, r4, #2
 8012ca4:	2600      	movs	r6, #0
 8012ca6:	42a6      	cmp	r6, r4
 8012ca8:	d105      	bne.n	8012cb6 <__libc_init_array+0x2e>
 8012caa:	bd70      	pop	{r4, r5, r6, pc}
 8012cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8012cb0:	4798      	blx	r3
 8012cb2:	3601      	adds	r6, #1
 8012cb4:	e7ee      	b.n	8012c94 <__libc_init_array+0xc>
 8012cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012cba:	4798      	blx	r3
 8012cbc:	3601      	adds	r6, #1
 8012cbe:	e7f2      	b.n	8012ca6 <__libc_init_array+0x1e>
 8012cc0:	08014cc8 	.word	0x08014cc8
 8012cc4:	08014cc8 	.word	0x08014cc8
 8012cc8:	08014cc8 	.word	0x08014cc8
 8012ccc:	08014ccc 	.word	0x08014ccc

08012cd0 <memset>:
 8012cd0:	4402      	add	r2, r0
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d100      	bne.n	8012cda <memset+0xa>
 8012cd8:	4770      	bx	lr
 8012cda:	f803 1b01 	strb.w	r1, [r3], #1
 8012cde:	e7f9      	b.n	8012cd4 <memset+0x4>

08012ce0 <_init>:
 8012ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce2:	bf00      	nop
 8012ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ce6:	bc08      	pop	{r3}
 8012ce8:	469e      	mov	lr, r3
 8012cea:	4770      	bx	lr

08012cec <_fini>:
 8012cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cee:	bf00      	nop
 8012cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cf2:	bc08      	pop	{r3}
 8012cf4:	469e      	mov	lr, r3
 8012cf6:	4770      	bx	lr
